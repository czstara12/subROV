
subROV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fa7c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f38  0800fc10  0800fc10  0001fc10  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010b48  08010b48  00030bac  2**0
                  CONTENTS
  4 .ARM          00000008  08010b48  08010b48  00020b48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010b50  08010b50  00030bac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08010b50  08010b50  00020b50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010b58  08010b58  00020b58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000bac  20000000  08010b5c  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000bc8  20000bac  08011708  00030bac  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001774  08011708  00031774  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030bac  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017354  00000000  00000000  00030bdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000358b  00000000  00000000  00047f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0004b4c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0004c708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f00  00000000  00000000  0004d7f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000154f1  00000000  00000000  000706f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000cfd29  00000000  00000000  00085be9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00155912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006694  00000000  00000000  00155968  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000bac 	.word	0x20000bac
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800fbf4 	.word	0x0800fbf4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000bb0 	.word	0x20000bb0
 80001cc:	0800fbf4 	.word	0x0800fbf4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9a4 	b.w	8000fe8 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468c      	mov	ip, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	f040 8083 	bne.w	8000e3a <__udivmoddi4+0x116>
 8000d34:	428a      	cmp	r2, r1
 8000d36:	4617      	mov	r7, r2
 8000d38:	d947      	bls.n	8000dca <__udivmoddi4+0xa6>
 8000d3a:	fab2 f282 	clz	r2, r2
 8000d3e:	b142      	cbz	r2, 8000d52 <__udivmoddi4+0x2e>
 8000d40:	f1c2 0020 	rsb	r0, r2, #32
 8000d44:	fa24 f000 	lsr.w	r0, r4, r0
 8000d48:	4091      	lsls	r1, r2
 8000d4a:	4097      	lsls	r7, r2
 8000d4c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d50:	4094      	lsls	r4, r2
 8000d52:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d56:	0c23      	lsrs	r3, r4, #16
 8000d58:	fbbc f6f8 	udiv	r6, ip, r8
 8000d5c:	fa1f fe87 	uxth.w	lr, r7
 8000d60:	fb08 c116 	mls	r1, r8, r6, ip
 8000d64:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d68:	fb06 f10e 	mul.w	r1, r6, lr
 8000d6c:	4299      	cmp	r1, r3
 8000d6e:	d909      	bls.n	8000d84 <__udivmoddi4+0x60>
 8000d70:	18fb      	adds	r3, r7, r3
 8000d72:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d76:	f080 8119 	bcs.w	8000fac <__udivmoddi4+0x288>
 8000d7a:	4299      	cmp	r1, r3
 8000d7c:	f240 8116 	bls.w	8000fac <__udivmoddi4+0x288>
 8000d80:	3e02      	subs	r6, #2
 8000d82:	443b      	add	r3, r7
 8000d84:	1a5b      	subs	r3, r3, r1
 8000d86:	b2a4      	uxth	r4, r4
 8000d88:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d8c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d90:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d94:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d98:	45a6      	cmp	lr, r4
 8000d9a:	d909      	bls.n	8000db0 <__udivmoddi4+0x8c>
 8000d9c:	193c      	adds	r4, r7, r4
 8000d9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da2:	f080 8105 	bcs.w	8000fb0 <__udivmoddi4+0x28c>
 8000da6:	45a6      	cmp	lr, r4
 8000da8:	f240 8102 	bls.w	8000fb0 <__udivmoddi4+0x28c>
 8000dac:	3802      	subs	r0, #2
 8000dae:	443c      	add	r4, r7
 8000db0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000db4:	eba4 040e 	sub.w	r4, r4, lr
 8000db8:	2600      	movs	r6, #0
 8000dba:	b11d      	cbz	r5, 8000dc4 <__udivmoddi4+0xa0>
 8000dbc:	40d4      	lsrs	r4, r2
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc4:	4631      	mov	r1, r6
 8000dc6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xaa>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f282 	clz	r2, r2
 8000dd2:	2a00      	cmp	r2, #0
 8000dd4:	d150      	bne.n	8000e78 <__udivmoddi4+0x154>
 8000dd6:	1bcb      	subs	r3, r1, r7
 8000dd8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ddc:	fa1f f887 	uxth.w	r8, r7
 8000de0:	2601      	movs	r6, #1
 8000de2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000de6:	0c21      	lsrs	r1, r4, #16
 8000de8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000dec:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df0:	fb08 f30c 	mul.w	r3, r8, ip
 8000df4:	428b      	cmp	r3, r1
 8000df6:	d907      	bls.n	8000e08 <__udivmoddi4+0xe4>
 8000df8:	1879      	adds	r1, r7, r1
 8000dfa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dfe:	d202      	bcs.n	8000e06 <__udivmoddi4+0xe2>
 8000e00:	428b      	cmp	r3, r1
 8000e02:	f200 80e9 	bhi.w	8000fd8 <__udivmoddi4+0x2b4>
 8000e06:	4684      	mov	ip, r0
 8000e08:	1ac9      	subs	r1, r1, r3
 8000e0a:	b2a3      	uxth	r3, r4
 8000e0c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e10:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e14:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e18:	fb08 f800 	mul.w	r8, r8, r0
 8000e1c:	45a0      	cmp	r8, r4
 8000e1e:	d907      	bls.n	8000e30 <__udivmoddi4+0x10c>
 8000e20:	193c      	adds	r4, r7, r4
 8000e22:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e26:	d202      	bcs.n	8000e2e <__udivmoddi4+0x10a>
 8000e28:	45a0      	cmp	r8, r4
 8000e2a:	f200 80d9 	bhi.w	8000fe0 <__udivmoddi4+0x2bc>
 8000e2e:	4618      	mov	r0, r3
 8000e30:	eba4 0408 	sub.w	r4, r4, r8
 8000e34:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e38:	e7bf      	b.n	8000dba <__udivmoddi4+0x96>
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	d909      	bls.n	8000e52 <__udivmoddi4+0x12e>
 8000e3e:	2d00      	cmp	r5, #0
 8000e40:	f000 80b1 	beq.w	8000fa6 <__udivmoddi4+0x282>
 8000e44:	2600      	movs	r6, #0
 8000e46:	e9c5 0100 	strd	r0, r1, [r5]
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	4631      	mov	r1, r6
 8000e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e52:	fab3 f683 	clz	r6, r3
 8000e56:	2e00      	cmp	r6, #0
 8000e58:	d14a      	bne.n	8000ef0 <__udivmoddi4+0x1cc>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d302      	bcc.n	8000e64 <__udivmoddi4+0x140>
 8000e5e:	4282      	cmp	r2, r0
 8000e60:	f200 80b8 	bhi.w	8000fd4 <__udivmoddi4+0x2b0>
 8000e64:	1a84      	subs	r4, r0, r2
 8000e66:	eb61 0103 	sbc.w	r1, r1, r3
 8000e6a:	2001      	movs	r0, #1
 8000e6c:	468c      	mov	ip, r1
 8000e6e:	2d00      	cmp	r5, #0
 8000e70:	d0a8      	beq.n	8000dc4 <__udivmoddi4+0xa0>
 8000e72:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e76:	e7a5      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000e78:	f1c2 0320 	rsb	r3, r2, #32
 8000e7c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e80:	4097      	lsls	r7, r2
 8000e82:	fa01 f002 	lsl.w	r0, r1, r2
 8000e86:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e8a:	40d9      	lsrs	r1, r3
 8000e8c:	4330      	orrs	r0, r6
 8000e8e:	0c03      	lsrs	r3, r0, #16
 8000e90:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e94:	fa1f f887 	uxth.w	r8, r7
 8000e98:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e9c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ea0:	fb06 f108 	mul.w	r1, r6, r8
 8000ea4:	4299      	cmp	r1, r3
 8000ea6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eaa:	d909      	bls.n	8000ec0 <__udivmoddi4+0x19c>
 8000eac:	18fb      	adds	r3, r7, r3
 8000eae:	f106 3cff 	add.w	ip, r6, #4294967295
 8000eb2:	f080 808d 	bcs.w	8000fd0 <__udivmoddi4+0x2ac>
 8000eb6:	4299      	cmp	r1, r3
 8000eb8:	f240 808a 	bls.w	8000fd0 <__udivmoddi4+0x2ac>
 8000ebc:	3e02      	subs	r6, #2
 8000ebe:	443b      	add	r3, r7
 8000ec0:	1a5b      	subs	r3, r3, r1
 8000ec2:	b281      	uxth	r1, r0
 8000ec4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000ec8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000ecc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ed0:	fb00 f308 	mul.w	r3, r0, r8
 8000ed4:	428b      	cmp	r3, r1
 8000ed6:	d907      	bls.n	8000ee8 <__udivmoddi4+0x1c4>
 8000ed8:	1879      	adds	r1, r7, r1
 8000eda:	f100 3cff 	add.w	ip, r0, #4294967295
 8000ede:	d273      	bcs.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee0:	428b      	cmp	r3, r1
 8000ee2:	d971      	bls.n	8000fc8 <__udivmoddi4+0x2a4>
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	4439      	add	r1, r7
 8000ee8:	1acb      	subs	r3, r1, r3
 8000eea:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000eee:	e778      	b.n	8000de2 <__udivmoddi4+0xbe>
 8000ef0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ef4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ef8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000efc:	431c      	orrs	r4, r3
 8000efe:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f02:	fa01 f306 	lsl.w	r3, r1, r6
 8000f06:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f0a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f0e:	431f      	orrs	r7, r3
 8000f10:	0c3b      	lsrs	r3, r7, #16
 8000f12:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f16:	fa1f f884 	uxth.w	r8, r4
 8000f1a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f1e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f22:	fb09 fa08 	mul.w	sl, r9, r8
 8000f26:	458a      	cmp	sl, r1
 8000f28:	fa02 f206 	lsl.w	r2, r2, r6
 8000f2c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f30:	d908      	bls.n	8000f44 <__udivmoddi4+0x220>
 8000f32:	1861      	adds	r1, r4, r1
 8000f34:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f38:	d248      	bcs.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3a:	458a      	cmp	sl, r1
 8000f3c:	d946      	bls.n	8000fcc <__udivmoddi4+0x2a8>
 8000f3e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f42:	4421      	add	r1, r4
 8000f44:	eba1 010a 	sub.w	r1, r1, sl
 8000f48:	b2bf      	uxth	r7, r7
 8000f4a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f4e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f52:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f56:	fb00 f808 	mul.w	r8, r0, r8
 8000f5a:	45b8      	cmp	r8, r7
 8000f5c:	d907      	bls.n	8000f6e <__udivmoddi4+0x24a>
 8000f5e:	19e7      	adds	r7, r4, r7
 8000f60:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f64:	d22e      	bcs.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f66:	45b8      	cmp	r8, r7
 8000f68:	d92c      	bls.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f6a:	3802      	subs	r0, #2
 8000f6c:	4427      	add	r7, r4
 8000f6e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f72:	eba7 0708 	sub.w	r7, r7, r8
 8000f76:	fba0 8902 	umull	r8, r9, r0, r2
 8000f7a:	454f      	cmp	r7, r9
 8000f7c:	46c6      	mov	lr, r8
 8000f7e:	4649      	mov	r1, r9
 8000f80:	d31a      	bcc.n	8000fb8 <__udivmoddi4+0x294>
 8000f82:	d017      	beq.n	8000fb4 <__udivmoddi4+0x290>
 8000f84:	b15d      	cbz	r5, 8000f9e <__udivmoddi4+0x27a>
 8000f86:	ebb3 020e 	subs.w	r2, r3, lr
 8000f8a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f8e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f92:	40f2      	lsrs	r2, r6
 8000f94:	ea4c 0202 	orr.w	r2, ip, r2
 8000f98:	40f7      	lsrs	r7, r6
 8000f9a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f9e:	2600      	movs	r6, #0
 8000fa0:	4631      	mov	r1, r6
 8000fa2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fa6:	462e      	mov	r6, r5
 8000fa8:	4628      	mov	r0, r5
 8000faa:	e70b      	b.n	8000dc4 <__udivmoddi4+0xa0>
 8000fac:	4606      	mov	r6, r0
 8000fae:	e6e9      	b.n	8000d84 <__udivmoddi4+0x60>
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	e6fd      	b.n	8000db0 <__udivmoddi4+0x8c>
 8000fb4:	4543      	cmp	r3, r8
 8000fb6:	d2e5      	bcs.n	8000f84 <__udivmoddi4+0x260>
 8000fb8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000fbc:	eb69 0104 	sbc.w	r1, r9, r4
 8000fc0:	3801      	subs	r0, #1
 8000fc2:	e7df      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e7d2      	b.n	8000f6e <__udivmoddi4+0x24a>
 8000fc8:	4660      	mov	r0, ip
 8000fca:	e78d      	b.n	8000ee8 <__udivmoddi4+0x1c4>
 8000fcc:	4681      	mov	r9, r0
 8000fce:	e7b9      	b.n	8000f44 <__udivmoddi4+0x220>
 8000fd0:	4666      	mov	r6, ip
 8000fd2:	e775      	b.n	8000ec0 <__udivmoddi4+0x19c>
 8000fd4:	4630      	mov	r0, r6
 8000fd6:	e74a      	b.n	8000e6e <__udivmoddi4+0x14a>
 8000fd8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000fdc:	4439      	add	r1, r7
 8000fde:	e713      	b.n	8000e08 <__udivmoddi4+0xe4>
 8000fe0:	3802      	subs	r0, #2
 8000fe2:	443c      	add	r4, r7
 8000fe4:	e724      	b.n	8000e30 <__udivmoddi4+0x10c>
 8000fe6:	bf00      	nop

08000fe8 <__aeabi_idiv0>:
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop

08000fec <PID_init>:
};
//Roll,Pitch,Yaw,z x y
float target_ver[6];
int pidinit = 0;
void PID_init()
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
    target_ver[0] = 0;
 8000ff0:	4b0b      	ldr	r3, [pc, #44]	; (8001020 <PID_init+0x34>)
 8000ff2:	f04f 0200 	mov.w	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]
    target_ver[1] = 0;
 8000ff8:	4b09      	ldr	r3, [pc, #36]	; (8001020 <PID_init+0x34>)
 8000ffa:	f04f 0200 	mov.w	r2, #0
 8000ffe:	605a      	str	r2, [r3, #4]
    target_ver[2] = yaw;
 8001000:	4b08      	ldr	r3, [pc, #32]	; (8001024 <PID_init+0x38>)
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	4a06      	ldr	r2, [pc, #24]	; (8001020 <PID_init+0x34>)
 8001006:	6093      	str	r3, [r2, #8]
    target_ver[3] = 0.2;
 8001008:	4b05      	ldr	r3, [pc, #20]	; (8001020 <PID_init+0x34>)
 800100a:	4a07      	ldr	r2, [pc, #28]	; (8001028 <PID_init+0x3c>)
 800100c:	60da      	str	r2, [r3, #12]
    pidinit = 1;
 800100e:	4b07      	ldr	r3, [pc, #28]	; (800102c <PID_init+0x40>)
 8001010:	2201      	movs	r2, #1
 8001012:	601a      	str	r2, [r3, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000c90 	.word	0x20000c90
 8001024:	20000d04 	.word	0x20000d04
 8001028:	3e4ccccd 	.word	0x3e4ccccd
 800102c:	20000bc8 	.word	0x20000bc8

08001030 <PID_CTRL>:

void PID_CTRL() //综合控制 encodeL左侧编码器 encodeR右侧编码器
{
 8001030:	b480      	push	{r7}
 8001032:	b089      	sub	sp, #36	; 0x24
 8001034:	af00      	add	r7, sp, #0
    //out += Kpr * (err - err1) + Tir * err+Tdr*(err-2*err1+err2); //
    //增量式PID方程 输出=输出+P*(本次误差-上次误差)+I*本次误差
    float err[6];
    float tmp_yaw;
    tmp_yaw = target_ver[2];
 8001036:	4b99      	ldr	r3, [pc, #612]	; (800129c <PID_CTRL+0x26c>)
 8001038:	689b      	ldr	r3, [r3, #8]
 800103a:	61fb      	str	r3, [r7, #28]
    if (tmp_yaw > 180)
 800103c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001040:	ed9f 7a97 	vldr	s14, [pc, #604]	; 80012a0 <PID_CTRL+0x270>
 8001044:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001048:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800104c:	dd08      	ble.n	8001060 <PID_CTRL+0x30>
    	tmp_yaw = target_ver[2] - 360;
 800104e:	4b93      	ldr	r3, [pc, #588]	; (800129c <PID_CTRL+0x26c>)
 8001050:	edd3 7a02 	vldr	s15, [r3, #8]
 8001054:	ed9f 7a93 	vldr	s14, [pc, #588]	; 80012a4 <PID_CTRL+0x274>
 8001058:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800105c:	edc7 7a07 	vstr	s15, [r7, #28]
    if (tmp_yaw < -180)
 8001060:	edd7 7a07 	vldr	s15, [r7, #28]
 8001064:	ed9f 7a90 	vldr	s14, [pc, #576]	; 80012a8 <PID_CTRL+0x278>
 8001068:	eef4 7ac7 	vcmpe.f32	s15, s14
 800106c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001070:	d508      	bpl.n	8001084 <PID_CTRL+0x54>
    	tmp_yaw = target_ver[2] + 360;
 8001072:	4b8a      	ldr	r3, [pc, #552]	; (800129c <PID_CTRL+0x26c>)
 8001074:	edd3 7a02 	vldr	s15, [r3, #8]
 8001078:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 80012a4 <PID_CTRL+0x274>
 800107c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001080:	edc7 7a07 	vstr	s15, [r7, #28]

    err[0] = target_ver[0] - roll;  //求误差
 8001084:	4b85      	ldr	r3, [pc, #532]	; (800129c <PID_CTRL+0x26c>)
 8001086:	ed93 7a00 	vldr	s14, [r3]
 800108a:	4b88      	ldr	r3, [pc, #544]	; (80012ac <PID_CTRL+0x27c>)
 800108c:	edd3 7a00 	vldr	s15, [r3]
 8001090:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001094:	edc7 7a00 	vstr	s15, [r7]
    err[1] = target_ver[1] - pitch; //求误差
 8001098:	4b80      	ldr	r3, [pc, #512]	; (800129c <PID_CTRL+0x26c>)
 800109a:	ed93 7a01 	vldr	s14, [r3, #4]
 800109e:	4b84      	ldr	r3, [pc, #528]	; (80012b0 <PID_CTRL+0x280>)
 80010a0:	edd3 7a00 	vldr	s15, [r3]
 80010a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010a8:	edc7 7a01 	vstr	s15, [r7, #4]
    err[2] = tmp_yaw - yaw;   //求误差
 80010ac:	4b81      	ldr	r3, [pc, #516]	; (80012b4 <PID_CTRL+0x284>)
 80010ae:	edd3 7a00 	vldr	s15, [r3]
 80010b2:	ed97 7a07 	vldr	s14, [r7, #28]
 80010b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010ba:	edc7 7a02 	vstr	s15, [r7, #8]

    if (err[2] > 180)
 80010be:	edd7 7a02 	vldr	s15, [r7, #8]
 80010c2:	ed9f 7a77 	vldr	s14, [pc, #476]	; 80012a0 <PID_CTRL+0x270>
 80010c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ce:	dd07      	ble.n	80010e0 <PID_CTRL+0xb0>
        err[2] -= 360;
 80010d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010d4:	ed9f 7a73 	vldr	s14, [pc, #460]	; 80012a4 <PID_CTRL+0x274>
 80010d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010dc:	edc7 7a02 	vstr	s15, [r7, #8]
    if (err[2] < -180)
 80010e0:	edd7 7a02 	vldr	s15, [r7, #8]
 80010e4:	ed9f 7a70 	vldr	s14, [pc, #448]	; 80012a8 <PID_CTRL+0x278>
 80010e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010f0:	d507      	bpl.n	8001102 <PID_CTRL+0xd2>
        err[2] += 360;
 80010f2:	edd7 7a02 	vldr	s15, [r7, #8]
 80010f6:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 80012a4 <PID_CTRL+0x274>
 80010fa:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010fe:	edc7 7a02 	vstr	s15, [r7, #8]

    err[3] = target_ver[3] - deep; //求误差
 8001102:	4b66      	ldr	r3, [pc, #408]	; (800129c <PID_CTRL+0x26c>)
 8001104:	ed93 7a03 	vldr	s14, [r3, #12]
 8001108:	4b6b      	ldr	r3, [pc, #428]	; (80012b8 <PID_CTRL+0x288>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001112:	edc7 7a03 	vstr	s15, [r7, #12]
    err[4] = target_ver[4]; //求误差
 8001116:	4b61      	ldr	r3, [pc, #388]	; (800129c <PID_CTRL+0x26c>)
 8001118:	691b      	ldr	r3, [r3, #16]
 800111a:	613b      	str	r3, [r7, #16]
    err[5] = target_ver[5]; //求误差
 800111c:	4b5f      	ldr	r3, [pc, #380]	; (800129c <PID_CTRL+0x26c>)
 800111e:	695b      	ldr	r3, [r3, #20]
 8001120:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 8001122:	2300      	movs	r3, #0
 8001124:	61bb      	str	r3, [r7, #24]
 8001126:	e0ad      	b.n	8001284 <PID_CTRL+0x254>
    {
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4]) + pid_ver[i][1] * err[i] + pid_ver[i][2] * (err[i] - 2 * pid_ver[i][4] + pid_ver[i][5]);
 8001128:	4964      	ldr	r1, [pc, #400]	; (80012bc <PID_CTRL+0x28c>)
 800112a:	69ba      	ldr	r2, [r7, #24]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	330c      	adds	r3, #12
 8001138:	ed93 7a00 	vldr	s14, [r3]
 800113c:	495f      	ldr	r1, [pc, #380]	; (80012bc <PID_CTRL+0x28c>)
 800113e:	69ba      	ldr	r2, [r7, #24]
 8001140:	4613      	mov	r3, r2
 8001142:	00db      	lsls	r3, r3, #3
 8001144:	1a9b      	subs	r3, r3, r2
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	440b      	add	r3, r1
 800114a:	edd3 6a00 	vldr	s13, [r3]
 800114e:	69bb      	ldr	r3, [r7, #24]
 8001150:	009b      	lsls	r3, r3, #2
 8001152:	f107 0220 	add.w	r2, r7, #32
 8001156:	4413      	add	r3, r2
 8001158:	3b20      	subs	r3, #32
 800115a:	ed93 6a00 	vldr	s12, [r3]
 800115e:	4957      	ldr	r1, [pc, #348]	; (80012bc <PID_CTRL+0x28c>)
 8001160:	69ba      	ldr	r2, [r7, #24]
 8001162:	4613      	mov	r3, r2
 8001164:	00db      	lsls	r3, r3, #3
 8001166:	1a9b      	subs	r3, r3, r2
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	440b      	add	r3, r1
 800116c:	3310      	adds	r3, #16
 800116e:	edd3 7a00 	vldr	s15, [r3]
 8001172:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001176:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800117a:	4950      	ldr	r1, [pc, #320]	; (80012bc <PID_CTRL+0x28c>)
 800117c:	69ba      	ldr	r2, [r7, #24]
 800117e:	4613      	mov	r3, r2
 8001180:	00db      	lsls	r3, r3, #3
 8001182:	1a9b      	subs	r3, r3, r2
 8001184:	009b      	lsls	r3, r3, #2
 8001186:	440b      	add	r3, r1
 8001188:	3304      	adds	r3, #4
 800118a:	ed93 6a00 	vldr	s12, [r3]
 800118e:	69bb      	ldr	r3, [r7, #24]
 8001190:	009b      	lsls	r3, r3, #2
 8001192:	f107 0220 	add.w	r2, r7, #32
 8001196:	4413      	add	r3, r2
 8001198:	3b20      	subs	r3, #32
 800119a:	edd3 7a00 	vldr	s15, [r3]
 800119e:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011a2:	ee76 6aa7 	vadd.f32	s13, s13, s15
 80011a6:	4945      	ldr	r1, [pc, #276]	; (80012bc <PID_CTRL+0x28c>)
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	4613      	mov	r3, r2
 80011ac:	00db      	lsls	r3, r3, #3
 80011ae:	1a9b      	subs	r3, r3, r2
 80011b0:	009b      	lsls	r3, r3, #2
 80011b2:	440b      	add	r3, r1
 80011b4:	3308      	adds	r3, #8
 80011b6:	ed93 6a00 	vldr	s12, [r3]
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	009b      	lsls	r3, r3, #2
 80011be:	f107 0220 	add.w	r2, r7, #32
 80011c2:	4413      	add	r3, r2
 80011c4:	3b20      	subs	r3, #32
 80011c6:	edd3 5a00 	vldr	s11, [r3]
 80011ca:	493c      	ldr	r1, [pc, #240]	; (80012bc <PID_CTRL+0x28c>)
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	4613      	mov	r3, r2
 80011d0:	00db      	lsls	r3, r3, #3
 80011d2:	1a9b      	subs	r3, r3, r2
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	440b      	add	r3, r1
 80011d8:	3310      	adds	r3, #16
 80011da:	edd3 7a00 	vldr	s15, [r3]
 80011de:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011e2:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80011e6:	4935      	ldr	r1, [pc, #212]	; (80012bc <PID_CTRL+0x28c>)
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	4613      	mov	r3, r2
 80011ec:	00db      	lsls	r3, r3, #3
 80011ee:	1a9b      	subs	r3, r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	3314      	adds	r3, #20
 80011f6:	edd3 7a00 	vldr	s15, [r3]
 80011fa:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011fe:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001202:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120a:	492c      	ldr	r1, [pc, #176]	; (80012bc <PID_CTRL+0x28c>)
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	4613      	mov	r3, r2
 8001210:	00db      	lsls	r3, r3, #3
 8001212:	1a9b      	subs	r3, r3, r2
 8001214:	009b      	lsls	r3, r3, #2
 8001216:	440b      	add	r3, r1
 8001218:	330c      	adds	r3, #12
 800121a:	edc3 7a00 	vstr	s15, [r3]
        dof6[i] = pid_ver[i][3];       //输出到6自由度
 800121e:	4927      	ldr	r1, [pc, #156]	; (80012bc <PID_CTRL+0x28c>)
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4613      	mov	r3, r2
 8001224:	00db      	lsls	r3, r3, #3
 8001226:	1a9b      	subs	r3, r3, r2
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	440b      	add	r3, r1
 800122c:	330c      	adds	r3, #12
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	4923      	ldr	r1, [pc, #140]	; (80012c0 <PID_CTRL+0x290>)
 8001232:	69bb      	ldr	r3, [r7, #24]
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	440b      	add	r3, r1
 8001238:	601a      	str	r2, [r3, #0]
        pid_ver[i][5] = pid_ver[i][4]; //更新上上次误差
 800123a:	4920      	ldr	r1, [pc, #128]	; (80012bc <PID_CTRL+0x28c>)
 800123c:	69ba      	ldr	r2, [r7, #24]
 800123e:	4613      	mov	r3, r2
 8001240:	00db      	lsls	r3, r3, #3
 8001242:	1a9b      	subs	r3, r3, r2
 8001244:	009b      	lsls	r3, r3, #2
 8001246:	440b      	add	r3, r1
 8001248:	3310      	adds	r3, #16
 800124a:	6819      	ldr	r1, [r3, #0]
 800124c:	481b      	ldr	r0, [pc, #108]	; (80012bc <PID_CTRL+0x28c>)
 800124e:	69ba      	ldr	r2, [r7, #24]
 8001250:	4613      	mov	r3, r2
 8001252:	00db      	lsls	r3, r3, #3
 8001254:	1a9b      	subs	r3, r3, r2
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	4403      	add	r3, r0
 800125a:	3314      	adds	r3, #20
 800125c:	6019      	str	r1, [r3, #0]
        pid_ver[i][4] = err[i];        //更新上次误差
 800125e:	69bb      	ldr	r3, [r7, #24]
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	f107 0220 	add.w	r2, r7, #32
 8001266:	4413      	add	r3, r2
 8001268:	3b20      	subs	r3, #32
 800126a:	6819      	ldr	r1, [r3, #0]
 800126c:	4813      	ldr	r0, [pc, #76]	; (80012bc <PID_CTRL+0x28c>)
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4613      	mov	r3, r2
 8001272:	00db      	lsls	r3, r3, #3
 8001274:	1a9b      	subs	r3, r3, r2
 8001276:	009b      	lsls	r3, r3, #2
 8001278:	4403      	add	r3, r0
 800127a:	3310      	adds	r3, #16
 800127c:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < 6; i++)
 800127e:	69bb      	ldr	r3, [r7, #24]
 8001280:	3301      	adds	r3, #1
 8001282:	61bb      	str	r3, [r7, #24]
 8001284:	69bb      	ldr	r3, [r7, #24]
 8001286:	2b05      	cmp	r3, #5
 8001288:	f77f af4e 	ble.w	8001128 <PID_CTRL+0xf8>
    }
}
 800128c:	bf00      	nop
 800128e:	bf00      	nop
 8001290:	3724      	adds	r7, #36	; 0x24
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	20000c90 	.word	0x20000c90
 80012a0:	43340000 	.word	0x43340000
 80012a4:	43b40000 	.word	0x43b40000
 80012a8:	c3340000 	.word	0xc3340000
 80012ac:	20000d0c 	.word	0x20000d0c
 80012b0:	20000d08 	.word	0x20000d08
 80012b4:	20000d04 	.word	0x20000d04
 80012b8:	20000d10 	.word	0x20000d10
 80012bc:	20000000 	.word	0x20000000
 80012c0:	20000bcc 	.word	0x20000bcc

080012c4 <VRUinit>:
float pitch, roll, yaw,*dat;
int tim;
//UART_HandleTypeDef *VRUhuart;

void VRUinit(UART_HandleTypeDef *huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	//VRUhuart = huart;
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	68da      	ldr	r2, [r3, #12]
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f042 0210 	orr.w	r2, r2, #16
 80012da:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, ch110, 82);
 80012dc:	2252      	movs	r2, #82	; 0x52
 80012de:	4904      	ldr	r1, [pc, #16]	; (80012f0 <VRUinit+0x2c>)
 80012e0:	6878      	ldr	r0, [r7, #4]
 80012e2:	f006 f807 	bl	80072f4 <HAL_UART_Receive_DMA>
}
 80012e6:	bf00      	nop
 80012e8:	3708      	adds	r7, #8
 80012ea:	46bd      	mov	sp, r7
 80012ec:	bd80      	pop	{r7, pc}
 80012ee:	bf00      	nop
 80012f0:	20000cb0 	.word	0x20000cb0

080012f4 <VRUupdate>:
//从串口中断触发 每次执行 提取姿态数据
void VRUupdate()
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	float * datflo;
	datflo=(float *) (ch110 + 18);
 80012fa:	4b15      	ldr	r3, [pc, #84]	; (8001350 <VRUupdate+0x5c>)
 80012fc:	603b      	str	r3, [r7, #0]
	/*
	roll = *(float *) (ch110 + 54);
	pitch = *(float *) (ch110 + 58);
	yaw = *(float *) (ch110 + 62);
	*/
	roll = datflo[9];
 80012fe:	683b      	ldr	r3, [r7, #0]
 8001300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001302:	4a14      	ldr	r2, [pc, #80]	; (8001354 <VRUupdate+0x60>)
 8001304:	6013      	str	r3, [r2, #0]
	pitch = datflo[10];
 8001306:	683b      	ldr	r3, [r7, #0]
 8001308:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800130a:	4a13      	ldr	r2, [pc, #76]	; (8001358 <VRUupdate+0x64>)
 800130c:	6013      	str	r3, [r2, #0]
	yaw = datflo[11];
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001312:	4a12      	ldr	r2, [pc, #72]	; (800135c <VRUupdate+0x68>)
 8001314:	6013      	str	r3, [r2, #0]

	for(int i=0;i<16;i++)
 8001316:	2300      	movs	r3, #0
 8001318:	607b      	str	r3, [r7, #4]
 800131a:	e00c      	b.n	8001336 <VRUupdate+0x42>
	{
		frame.fdata[i] = datflo[i];
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	683a      	ldr	r2, [r7, #0]
 8001322:	4413      	add	r3, r2
 8001324:	681a      	ldr	r2, [r3, #0]
 8001326:	490e      	ldr	r1, [pc, #56]	; (8001360 <VRUupdate+0x6c>)
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	009b      	lsls	r3, r3, #2
 800132c:	440b      	add	r3, r1
 800132e:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	3301      	adds	r3, #1
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2b0f      	cmp	r3, #15
 800133a:	ddef      	ble.n	800131c <VRUupdate+0x28>
		//3角速度XYZ
		//6磁强度XYZ
		//9欧拉角Roll Pitch Yaw
		//12四元数WXYZ
	}
    if(pidinit == 0)
 800133c:	4b09      	ldr	r3, [pc, #36]	; (8001364 <VRUupdate+0x70>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d101      	bne.n	8001348 <VRUupdate+0x54>
        PID_init();
 8001344:	f7ff fe52 	bl	8000fec <PID_init>
    if(pidinit == 1)
    {
        PID_CTRL();
        setmotor();
    }*/
}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000cc2 	.word	0x20000cc2
 8001354:	20000d0c 	.word	0x20000d0c
 8001358:	20000d08 	.word	0x20000d08
 800135c:	20000d04 	.word	0x20000d04
 8001360:	200000a8 	.word	0x200000a8
 8001364:	20000bc8 	.word	0x20000bc8

08001368 <VRUerror>:
void VRUerror(UART_HandleTypeDef *huart)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f005 ffef 	bl	8007354 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, ch110, 82);
 8001376:	2252      	movs	r2, #82	; 0x52
 8001378:	4903      	ldr	r1, [pc, #12]	; (8001388 <VRUerror+0x20>)
 800137a:	6878      	ldr	r0, [r7, #4]
 800137c:	f005 ffba 	bl	80072f4 <HAL_UART_Receive_DMA>
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	20000cb0 	.word	0x20000cb0

0800138c <deepSensorInit>:

unsigned char deepSensorBuff[20];
float deep,temperature;

void deepSensorInit(UART_HandleTypeDef *huart)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	68da      	ldr	r2, [r3, #12]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	f042 0210 	orr.w	r2, r2, #16
 80013a2:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, deepSensorBuff, 20);
 80013a4:	2214      	movs	r2, #20
 80013a6:	4904      	ldr	r1, [pc, #16]	; (80013b8 <deepSensorInit+0x2c>)
 80013a8:	6878      	ldr	r0, [r7, #4]
 80013aa:	f005 ffa3 	bl	80072f4 <HAL_UART_Receive_DMA>
}
 80013ae:	bf00      	nop
 80013b0:	3708      	adds	r7, #8
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000d18 	.word	0x20000d18

080013bc <deepSensorUpdate>:

void deepSensorUpdate(unsigned char *deepSsensorBuff)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b082      	sub	sp, #8
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
	sscanf((char *)deepSensorBuff,"T=%fD=%f",&temperature,&deep);
 80013c4:	4b08      	ldr	r3, [pc, #32]	; (80013e8 <deepSensorUpdate+0x2c>)
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <deepSensorUpdate+0x30>)
 80013c8:	4909      	ldr	r1, [pc, #36]	; (80013f0 <deepSensorUpdate+0x34>)
 80013ca:	480a      	ldr	r0, [pc, #40]	; (80013f4 <deepSensorUpdate+0x38>)
 80013cc:	f006 fee6 	bl	800819c <sscanf>
	frame.fdata[27]=deep;
 80013d0:	4b05      	ldr	r3, [pc, #20]	; (80013e8 <deepSensorUpdate+0x2c>)
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4a08      	ldr	r2, [pc, #32]	; (80013f8 <deepSensorUpdate+0x3c>)
 80013d6:	66d3      	str	r3, [r2, #108]	; 0x6c
	frame.fdata[28]=temperature;
 80013d8:	4b04      	ldr	r3, [pc, #16]	; (80013ec <deepSensorUpdate+0x30>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <deepSensorUpdate+0x3c>)
 80013de:	6713      	str	r3, [r2, #112]	; 0x70
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000d10 	.word	0x20000d10
 80013ec:	20000d14 	.word	0x20000d14
 80013f0:	0800fc10 	.word	0x0800fc10
 80013f4:	20000d18 	.word	0x20000d18
 80013f8:	200000a8 	.word	0x200000a8

080013fc <deepSensorerr>:

void deepSensorerr(UART_HandleTypeDef *huart)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 8001404:	6878      	ldr	r0, [r7, #4]
 8001406:	f005 ffa5 	bl	8007354 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, deepSensorBuff, 20);
 800140a:	2214      	movs	r2, #20
 800140c:	4903      	ldr	r1, [pc, #12]	; (800141c <deepSensorerr+0x20>)
 800140e:	6878      	ldr	r0, [r7, #4]
 8001410:	f005 ff70 	bl	80072f4 <HAL_UART_Receive_DMA>
}
 8001414:	bf00      	nop
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20000d18 	.word	0x20000d18

08001420 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	60f8      	str	r0, [r7, #12]
 8001428:	60b9      	str	r1, [r7, #8]
 800142a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 300);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	b29a      	uxth	r2, r3
 8001430:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001434:	68b9      	ldr	r1, [r7, #8]
 8001436:	4804      	ldr	r0, [pc, #16]	; (8001448 <_write+0x28>)
 8001438:	f005 fe85 	bl	8007146 <HAL_UART_Transmit>
	return len;
 800143c:	687b      	ldr	r3, [r7, #4]
}
 800143e:	4618      	mov	r0, r3
 8001440:	3710      	adds	r7, #16
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	2000109c 	.word	0x2000109c

0800144c <HAL_UART_RxCpltCallback>:
void delay_ms(unsigned int ms) {
	HAL_Delay(ms);
	return;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b082      	sub	sp, #8
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	4a08      	ldr	r2, [pc, #32]	; (8001478 <HAL_UART_RxCpltCallback+0x2c>)
 8001458:	4293      	cmp	r3, r2
 800145a:	d102      	bne.n	8001462 <HAL_UART_RxCpltCallback+0x16>
	{
		VRUupdate();
 800145c:	f7ff ff4a 	bl	80012f4 <VRUupdate>
	}else if(&huart4==huart)
	 {
		raspiUpdate();
	}
}
 8001460:	e005      	b.n	800146e <HAL_UART_RxCpltCallback+0x22>
	}else if(&huart4==huart)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	4a05      	ldr	r2, [pc, #20]	; (800147c <HAL_UART_RxCpltCallback+0x30>)
 8001466:	4293      	cmp	r3, r2
 8001468:	d101      	bne.n	800146e <HAL_UART_RxCpltCallback+0x22>
		raspiUpdate();
 800146a:	f001 fb3d 	bl	8002ae8 <raspiUpdate>
}
 800146e:	bf00      	nop
 8001470:	3708      	adds	r7, #8
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	2000120c 	.word	0x2000120c
 800147c:	20001128 	.word	0x20001128

08001480 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	4a13      	ldr	r2, [pc, #76]	; (80014d8 <HAL_UART_ErrorCallback+0x58>)
 800148c:	4293      	cmp	r3, r2
 800148e:	d103      	bne.n	8001498 <HAL_UART_ErrorCallback+0x18>
	{
		VRUerror(huart);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff ff69 	bl	8001368 <VRUerror>
		deepSensorerr(huart);
	}else if(&huart4==huart)
	{
		raspierr(huart);
	}
}
 8001496:	e01a      	b.n	80014ce <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart1==huart)
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	4a10      	ldr	r2, [pc, #64]	; (80014dc <HAL_UART_ErrorCallback+0x5c>)
 800149c:	4293      	cmp	r3, r2
 800149e:	d016      	beq.n	80014ce <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart5==huart)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <HAL_UART_ErrorCallback+0x60>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d103      	bne.n	80014b0 <HAL_UART_ErrorCallback+0x30>
		remoteerr(huart);
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f001 fcbb 	bl	8002e24 <remoteerr>
}
 80014ae:	e00e      	b.n	80014ce <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart3==huart)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	4a0c      	ldr	r2, [pc, #48]	; (80014e4 <HAL_UART_ErrorCallback+0x64>)
 80014b4:	4293      	cmp	r3, r2
 80014b6:	d103      	bne.n	80014c0 <HAL_UART_ErrorCallback+0x40>
		deepSensorerr(huart);
 80014b8:	6878      	ldr	r0, [r7, #4]
 80014ba:	f7ff ff9f 	bl	80013fc <deepSensorerr>
}
 80014be:	e006      	b.n	80014ce <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart4==huart)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	4a09      	ldr	r2, [pc, #36]	; (80014e8 <HAL_UART_ErrorCallback+0x68>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d102      	bne.n	80014ce <HAL_UART_ErrorCallback+0x4e>
		raspierr(huart);
 80014c8:	6878      	ldr	r0, [r7, #4]
 80014ca:	f001 fb81 	bl	8002bd0 <raspierr>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000120c 	.word	0x2000120c
 80014dc:	2000109c 	.word	0x2000109c
 80014e0:	20000fb0 	.word	0x20000fb0
 80014e4:	20000edc 	.word	0x20000edc
 80014e8:	20001128 	.word	0x20001128

080014ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f2:	f002 fc53 	bl	8003d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014f6:	f000 f889 	bl	800160c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fa:	f000 fddd 	bl	80020b8 <MX_GPIO_Init>
  MX_DMA_Init();
 80014fe:	f000 fd8d 	bl	800201c <MX_DMA_Init>
  MX_ADC1_Init();
 8001502:	f000 f8ed 	bl	80016e0 <MX_ADC1_Init>
  MX_SPI1_Init();
 8001506:	f000 f93d 	bl	8001784 <MX_SPI1_Init>
  MX_TIM1_Init();
 800150a:	f000 f971 	bl	80017f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800150e:	f000 f9bf 	bl	8001890 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001512:	f000 fa09 	bl	8001928 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001516:	f000 fa9f 	bl	8001a58 <MX_TIM4_Init>
  MX_TIM5_Init();
 800151a:	f000 fb35 	bl	8001b88 <MX_TIM5_Init>
  MX_TIM8_Init();
 800151e:	f000 fb97 	bl	8001c50 <MX_TIM8_Init>
  MX_UART4_Init();
 8001522:	f000 fca9 	bl	8001e78 <MX_UART4_Init>
  MX_UART5_Init();
 8001526:	f000 fcd1 	bl	8001ecc <MX_UART5_Init>
  MX_USART1_UART_Init();
 800152a:	f000 fcf9 	bl	8001f20 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800152e:	f000 fd21 	bl	8001f74 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001532:	f000 fd49 	bl	8001fc8 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8001536:	f000 fc4f 	bl	8001dd8 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//delay function sppeeort
 800153a:	4827      	ldr	r0, [pc, #156]	; (80015d8 <main+0xec>)
 800153c:	f004 fd22 	bl	8005f84 <HAL_TIM_Base_Start>

  motorinit();
 8001540:	f000 fed0 	bl	80022e4 <motorinit>

	HAL_TIM_Base_Start_IT(&htim1);
 8001544:	4825      	ldr	r0, [pc, #148]	; (80015dc <main+0xf0>)
 8001546:	f004 fd85 	bl	8006054 <HAL_TIM_Base_Start_IT>

	VRUinit(&huart2);
 800154a:	4825      	ldr	r0, [pc, #148]	; (80015e0 <main+0xf4>)
 800154c:	f7ff feba 	bl	80012c4 <VRUinit>
	OLED_Init();
 8001550:	f001 fa04 	bl	800295c <OLED_Init>
	//PID_init();
	remoteInit(&huart5);
 8001554:	4823      	ldr	r0, [pc, #140]	; (80015e4 <main+0xf8>)
 8001556:	f001 fb4d 	bl	8002bf4 <remoteInit>
	raspiInit(&huart4);
 800155a:	4823      	ldr	r0, [pc, #140]	; (80015e8 <main+0xfc>)
 800155c:	f001 faaa 	bl	8002ab4 <raspiInit>
	deepSensorInit(&huart3);
 8001560:	4822      	ldr	r0, [pc, #136]	; (80015ec <main+0x100>)
 8001562:	f7ff ff13 	bl	800138c <deepSensorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello\r\n");
 8001566:	4822      	ldr	r0, [pc, #136]	; (80015f0 <main+0x104>)
 8001568:	f006 fe10 	bl	800818c <puts>
  OLED_ShowString(0,0,"runing...");
 800156c:	4a21      	ldr	r2, [pc, #132]	; (80015f4 <main+0x108>)
 800156e:	2100      	movs	r1, #0
 8001570:	2000      	movs	r0, #0
 8001572:	f001 f9c1 	bl	80028f8 <OLED_ShowString>

  while (1)
  {
	  OLED_ShowString(0,12,"run time:");
 8001576:	4a20      	ldr	r2, [pc, #128]	; (80015f8 <main+0x10c>)
 8001578:	210c      	movs	r1, #12
 800157a:	2000      	movs	r0, #0
 800157c:	f001 f9bc 	bl	80028f8 <OLED_ShowString>
	  OLED_ShowNumber(0, 24, HAL_GetTick()/1000, 3, 12);
 8001580:	f002 fc42 	bl	8003e08 <HAL_GetTick>
 8001584:	4603      	mov	r3, r0
 8001586:	4a1d      	ldr	r2, [pc, #116]	; (80015fc <main+0x110>)
 8001588:	fba2 2303 	umull	r2, r3, r2, r3
 800158c:	099a      	lsrs	r2, r3, #6
 800158e:	230c      	movs	r3, #12
 8001590:	9300      	str	r3, [sp, #0]
 8001592:	2303      	movs	r3, #3
 8001594:	2118      	movs	r1, #24
 8001596:	2000      	movs	r0, #0
 8001598:	f001 f940 	bl	800281c <OLED_ShowNumber>
	  OLED_ShowNumber(0, 36, raspiBuffer[10], 3, 12);
 800159c:	4b18      	ldr	r3, [pc, #96]	; (8001600 <main+0x114>)
 800159e:	7a9b      	ldrb	r3, [r3, #10]
 80015a0:	461a      	mov	r2, r3
 80015a2:	230c      	movs	r3, #12
 80015a4:	9300      	str	r3, [sp, #0]
 80015a6:	2303      	movs	r3, #3
 80015a8:	2124      	movs	r1, #36	; 0x24
 80015aa:	2000      	movs	r0, #0
 80015ac:	f001 f936 	bl	800281c <OLED_ShowNumber>
	  OLED_ShowNumber(0, 48, (int)(deep*100), 3, 12);
 80015b0:	4b14      	ldr	r3, [pc, #80]	; (8001604 <main+0x118>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001608 <main+0x11c>
 80015ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015c2:	ee17 2a90 	vmov	r2, s15
 80015c6:	230c      	movs	r3, #12
 80015c8:	9300      	str	r3, [sp, #0]
 80015ca:	2303      	movs	r3, #3
 80015cc:	2130      	movs	r1, #48	; 0x30
 80015ce:	2000      	movs	r0, #0
 80015d0:	f001 f924 	bl	800281c <OLED_ShowNumber>
	  OLED_ShowString(0,12,"run time:");
 80015d4:	e7cf      	b.n	8001576 <main+0x8a>
 80015d6:	bf00      	nop
 80015d8:	200011c4 	.word	0x200011c4
 80015dc:	200010e0 	.word	0x200010e0
 80015e0:	2000120c 	.word	0x2000120c
 80015e4:	20000fb0 	.word	0x20000fb0
 80015e8:	20001128 	.word	0x20001128
 80015ec:	20000edc 	.word	0x20000edc
 80015f0:	0800fc1c 	.word	0x0800fc1c
 80015f4:	0800fc24 	.word	0x0800fc24
 80015f8:	0800fc30 	.word	0x0800fc30
 80015fc:	10624dd3 	.word	0x10624dd3
 8001600:	20000be8 	.word	0x20000be8
 8001604:	20000d10 	.word	0x20000d10
 8001608:	42c80000 	.word	0x42c80000

0800160c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b094      	sub	sp, #80	; 0x50
 8001610:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	2230      	movs	r2, #48	; 0x30
 8001618:	2100      	movs	r1, #0
 800161a:	4618      	mov	r0, r3
 800161c:	f006 fd68 	bl	80080f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	2200      	movs	r2, #0
 8001626:	601a      	str	r2, [r3, #0]
 8001628:	605a      	str	r2, [r3, #4]
 800162a:	609a      	str	r2, [r3, #8]
 800162c:	60da      	str	r2, [r3, #12]
 800162e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001630:	2300      	movs	r3, #0
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <SystemClock_Config+0xcc>)
 8001636:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001638:	4a27      	ldr	r2, [pc, #156]	; (80016d8 <SystemClock_Config+0xcc>)
 800163a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800163e:	6413      	str	r3, [r2, #64]	; 0x40
 8001640:	4b25      	ldr	r3, [pc, #148]	; (80016d8 <SystemClock_Config+0xcc>)
 8001642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001644:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001648:	60bb      	str	r3, [r7, #8]
 800164a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800164c:	2300      	movs	r3, #0
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	4b22      	ldr	r3, [pc, #136]	; (80016dc <SystemClock_Config+0xd0>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a21      	ldr	r2, [pc, #132]	; (80016dc <SystemClock_Config+0xd0>)
 8001656:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800165a:	6013      	str	r3, [r2, #0]
 800165c:	4b1f      	ldr	r3, [pc, #124]	; (80016dc <SystemClock_Config+0xd0>)
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001664:	607b      	str	r3, [r7, #4]
 8001666:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001668:	2301      	movs	r3, #1
 800166a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800166c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001670:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001672:	2302      	movs	r3, #2
 8001674:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001676:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800167a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800167c:	2308      	movs	r3, #8
 800167e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001680:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001684:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001686:	2302      	movs	r3, #2
 8001688:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800168a:	2304      	movs	r3, #4
 800168c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4618      	mov	r0, r3
 8001694:	f003 fcf0 	bl	8005078 <HAL_RCC_OscConfig>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800169e:	f000 fe1b 	bl	80022d8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016a2:	230f      	movs	r3, #15
 80016a4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016a6:	2302      	movs	r3, #2
 80016a8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016aa:	2300      	movs	r3, #0
 80016ac:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016ae:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80016b2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80016b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016ba:	f107 030c 	add.w	r3, r7, #12
 80016be:	2105      	movs	r1, #5
 80016c0:	4618      	mov	r0, r3
 80016c2:	f003 ff51 	bl	8005568 <HAL_RCC_ClockConfig>
 80016c6:	4603      	mov	r3, r0
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d001      	beq.n	80016d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016cc:	f000 fe04 	bl	80022d8 <Error_Handler>
  }
}
 80016d0:	bf00      	nop
 80016d2:	3750      	adds	r7, #80	; 0x50
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	40023800 	.word	0x40023800
 80016dc:	40007000 	.word	0x40007000

080016e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016f2:	4b21      	ldr	r3, [pc, #132]	; (8001778 <MX_ADC1_Init+0x98>)
 80016f4:	4a21      	ldr	r2, [pc, #132]	; (800177c <MX_ADC1_Init+0x9c>)
 80016f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016f8:	4b1f      	ldr	r3, [pc, #124]	; (8001778 <MX_ADC1_Init+0x98>)
 80016fa:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001700:	4b1d      	ldr	r3, [pc, #116]	; (8001778 <MX_ADC1_Init+0x98>)
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <MX_ADC1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800170c:	4b1a      	ldr	r3, [pc, #104]	; (8001778 <MX_ADC1_Init+0x98>)
 800170e:	2200      	movs	r2, #0
 8001710:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <MX_ADC1_Init+0x98>)
 8001714:	2200      	movs	r2, #0
 8001716:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800171a:	4b17      	ldr	r3, [pc, #92]	; (8001778 <MX_ADC1_Init+0x98>)
 800171c:	2200      	movs	r2, #0
 800171e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001720:	4b15      	ldr	r3, [pc, #84]	; (8001778 <MX_ADC1_Init+0x98>)
 8001722:	4a17      	ldr	r2, [pc, #92]	; (8001780 <MX_ADC1_Init+0xa0>)
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001726:	4b14      	ldr	r3, [pc, #80]	; (8001778 <MX_ADC1_Init+0x98>)
 8001728:	2200      	movs	r2, #0
 800172a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800172c:	4b12      	ldr	r3, [pc, #72]	; (8001778 <MX_ADC1_Init+0x98>)
 800172e:	2201      	movs	r2, #1
 8001730:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001732:	4b11      	ldr	r3, [pc, #68]	; (8001778 <MX_ADC1_Init+0x98>)
 8001734:	2200      	movs	r2, #0
 8001736:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800173a:	4b0f      	ldr	r3, [pc, #60]	; (8001778 <MX_ADC1_Init+0x98>)
 800173c:	2201      	movs	r2, #1
 800173e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001740:	480d      	ldr	r0, [pc, #52]	; (8001778 <MX_ADC1_Init+0x98>)
 8001742:	f002 fb91 	bl	8003e68 <HAL_ADC_Init>
 8001746:	4603      	mov	r3, r0
 8001748:	2b00      	cmp	r3, #0
 800174a:	d001      	beq.n	8001750 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800174c:	f000 fdc4 	bl	80022d8 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001750:	2304      	movs	r3, #4
 8001752:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001754:	2301      	movs	r3, #1
 8001756:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800175c:	463b      	mov	r3, r7
 800175e:	4619      	mov	r1, r3
 8001760:	4805      	ldr	r0, [pc, #20]	; (8001778 <MX_ADC1_Init+0x98>)
 8001762:	f002 fbc5 	bl	8003ef0 <HAL_ADC_ConfigChannel>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800176c:	f000 fdb4 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001770:	bf00      	nop
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000ff4 	.word	0x20000ff4
 800177c:	40012000 	.word	0x40012000
 8001780:	0f000001 	.word	0x0f000001

08001784 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001788:	4b17      	ldr	r3, [pc, #92]	; (80017e8 <MX_SPI1_Init+0x64>)
 800178a:	4a18      	ldr	r2, [pc, #96]	; (80017ec <MX_SPI1_Init+0x68>)
 800178c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800178e:	4b16      	ldr	r3, [pc, #88]	; (80017e8 <MX_SPI1_Init+0x64>)
 8001790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001794:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001796:	4b14      	ldr	r3, [pc, #80]	; (80017e8 <MX_SPI1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800179c:	4b12      	ldr	r3, [pc, #72]	; (80017e8 <MX_SPI1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017a2:	4b11      	ldr	r3, [pc, #68]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a8:	4b0f      	ldr	r3, [pc, #60]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017aa:	2200      	movs	r2, #0
 80017ac:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017ae:	4b0e      	ldr	r3, [pc, #56]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017b4:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017b6:	4b0c      	ldr	r3, [pc, #48]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017bc:	4b0a      	ldr	r3, [pc, #40]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017be:	2200      	movs	r2, #0
 80017c0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017c2:	4b09      	ldr	r3, [pc, #36]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c8:	4b07      	ldr	r3, [pc, #28]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017ca:	2200      	movs	r2, #0
 80017cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017ce:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017d0:	220a      	movs	r2, #10
 80017d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017d4:	4804      	ldr	r0, [pc, #16]	; (80017e8 <MX_SPI1_Init+0x64>)
 80017d6:	f004 f8f5 	bl	80059c4 <HAL_SPI_Init>
 80017da:	4603      	mov	r3, r0
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d001      	beq.n	80017e4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017e0:	f000 fd7a 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017e4:	bf00      	nop
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	2000116c 	.word	0x2000116c
 80017ec:	40013000 	.word	0x40013000

080017f0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	b086      	sub	sp, #24
 80017f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017f6:	f107 0308 	add.w	r3, r7, #8
 80017fa:	2200      	movs	r2, #0
 80017fc:	601a      	str	r2, [r3, #0]
 80017fe:	605a      	str	r2, [r3, #4]
 8001800:	609a      	str	r2, [r3, #8]
 8001802:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001804:	463b      	mov	r3, r7
 8001806:	2200      	movs	r2, #0
 8001808:	601a      	str	r2, [r3, #0]
 800180a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800180c:	4b1e      	ldr	r3, [pc, #120]	; (8001888 <MX_TIM1_Init+0x98>)
 800180e:	4a1f      	ldr	r2, [pc, #124]	; (800188c <MX_TIM1_Init+0x9c>)
 8001810:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8001812:	4b1d      	ldr	r3, [pc, #116]	; (8001888 <MX_TIM1_Init+0x98>)
 8001814:	22a7      	movs	r2, #167	; 0xa7
 8001816:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001818:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <MX_TIM1_Init+0x98>)
 800181a:	2200      	movs	r2, #0
 800181c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800181e:	4b1a      	ldr	r3, [pc, #104]	; (8001888 <MX_TIM1_Init+0x98>)
 8001820:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001824:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <MX_TIM1_Init+0x98>)
 8001828:	2200      	movs	r2, #0
 800182a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800182c:	4b16      	ldr	r3, [pc, #88]	; (8001888 <MX_TIM1_Init+0x98>)
 800182e:	2200      	movs	r2, #0
 8001830:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001832:	4b15      	ldr	r3, [pc, #84]	; (8001888 <MX_TIM1_Init+0x98>)
 8001834:	2200      	movs	r2, #0
 8001836:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001838:	4813      	ldr	r0, [pc, #76]	; (8001888 <MX_TIM1_Init+0x98>)
 800183a:	f004 fb53 	bl	8005ee4 <HAL_TIM_Base_Init>
 800183e:	4603      	mov	r3, r0
 8001840:	2b00      	cmp	r3, #0
 8001842:	d001      	beq.n	8001848 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001844:	f000 fd48 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001848:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800184c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800184e:	f107 0308 	add.w	r3, r7, #8
 8001852:	4619      	mov	r1, r3
 8001854:	480c      	ldr	r0, [pc, #48]	; (8001888 <MX_TIM1_Init+0x98>)
 8001856:	f004 ff4b 	bl	80066f0 <HAL_TIM_ConfigClockSource>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d001      	beq.n	8001864 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001860:	f000 fd3a 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001864:	2300      	movs	r3, #0
 8001866:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001868:	2300      	movs	r3, #0
 800186a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800186c:	463b      	mov	r3, r7
 800186e:	4619      	mov	r1, r3
 8001870:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_TIM1_Init+0x98>)
 8001872:	f005 fb39 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001876:	4603      	mov	r3, r0
 8001878:	2b00      	cmp	r3, #0
 800187a:	d001      	beq.n	8001880 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800187c:	f000 fd2c 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001880:	bf00      	nop
 8001882:	3718      	adds	r7, #24
 8001884:	46bd      	mov	sp, r7
 8001886:	bd80      	pop	{r7, pc}
 8001888:	200010e0 	.word	0x200010e0
 800188c:	40010000 	.word	0x40010000

08001890 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b086      	sub	sp, #24
 8001894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001896:	f107 0308 	add.w	r3, r7, #8
 800189a:	2200      	movs	r2, #0
 800189c:	601a      	str	r2, [r3, #0]
 800189e:	605a      	str	r2, [r3, #4]
 80018a0:	609a      	str	r2, [r3, #8]
 80018a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018a4:	463b      	mov	r3, r7
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80018ac:	4b1d      	ldr	r3, [pc, #116]	; (8001924 <MX_TIM2_Init+0x94>)
 80018ae:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80018b2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80018b4:	4b1b      	ldr	r3, [pc, #108]	; (8001924 <MX_TIM2_Init+0x94>)
 80018b6:	2253      	movs	r2, #83	; 0x53
 80018b8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018ba:	4b1a      	ldr	r3, [pc, #104]	; (8001924 <MX_TIM2_Init+0x94>)
 80018bc:	2200      	movs	r2, #0
 80018be:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80018c0:	4b18      	ldr	r3, [pc, #96]	; (8001924 <MX_TIM2_Init+0x94>)
 80018c2:	f04f 32ff 	mov.w	r2, #4294967295
 80018c6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c8:	4b16      	ldr	r3, [pc, #88]	; (8001924 <MX_TIM2_Init+0x94>)
 80018ca:	2200      	movs	r2, #0
 80018cc:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ce:	4b15      	ldr	r3, [pc, #84]	; (8001924 <MX_TIM2_Init+0x94>)
 80018d0:	2200      	movs	r2, #0
 80018d2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018d4:	4813      	ldr	r0, [pc, #76]	; (8001924 <MX_TIM2_Init+0x94>)
 80018d6:	f004 fb05 	bl	8005ee4 <HAL_TIM_Base_Init>
 80018da:	4603      	mov	r3, r0
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d001      	beq.n	80018e4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018e0:	f000 fcfa 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018e8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018ea:	f107 0308 	add.w	r3, r7, #8
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	; (8001924 <MX_TIM2_Init+0x94>)
 80018f2:	f004 fefd 	bl	80066f0 <HAL_TIM_ConfigClockSource>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018fc:	f000 fcec 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001900:	2300      	movs	r3, #0
 8001902:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001904:	2300      	movs	r3, #0
 8001906:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001908:	463b      	mov	r3, r7
 800190a:	4619      	mov	r1, r3
 800190c:	4805      	ldr	r0, [pc, #20]	; (8001924 <MX_TIM2_Init+0x94>)
 800190e:	f005 faeb 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001918:	f000 fcde 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800191c:	bf00      	nop
 800191e:	3718      	adds	r7, #24
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	200011c4 	.word	0x200011c4

08001928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b08e      	sub	sp, #56	; 0x38
 800192c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800192e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001932:	2200      	movs	r2, #0
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	605a      	str	r2, [r3, #4]
 8001938:	609a      	str	r2, [r3, #8]
 800193a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800193c:	f107 0320 	add.w	r3, r7, #32
 8001940:	2200      	movs	r2, #0
 8001942:	601a      	str	r2, [r3, #0]
 8001944:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001946:	1d3b      	adds	r3, r7, #4
 8001948:	2200      	movs	r2, #0
 800194a:	601a      	str	r2, [r3, #0]
 800194c:	605a      	str	r2, [r3, #4]
 800194e:	609a      	str	r2, [r3, #8]
 8001950:	60da      	str	r2, [r3, #12]
 8001952:	611a      	str	r2, [r3, #16]
 8001954:	615a      	str	r2, [r3, #20]
 8001956:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001958:	4b3d      	ldr	r3, [pc, #244]	; (8001a50 <MX_TIM3_Init+0x128>)
 800195a:	4a3e      	ldr	r2, [pc, #248]	; (8001a54 <MX_TIM3_Init+0x12c>)
 800195c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800195e:	4b3c      	ldr	r3, [pc, #240]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001960:	2200      	movs	r2, #0
 8001962:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001964:	4b3a      	ldr	r3, [pc, #232]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001966:	2200      	movs	r2, #0
 8001968:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800196a:	4b39      	ldr	r3, [pc, #228]	; (8001a50 <MX_TIM3_Init+0x128>)
 800196c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001970:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001972:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001974:	2200      	movs	r2, #0
 8001976:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001978:	4b35      	ldr	r3, [pc, #212]	; (8001a50 <MX_TIM3_Init+0x128>)
 800197a:	2200      	movs	r2, #0
 800197c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800197e:	4834      	ldr	r0, [pc, #208]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001980:	f004 fab0 	bl	8005ee4 <HAL_TIM_Base_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800198a:	f000 fca5 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800198e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001992:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001994:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001998:	4619      	mov	r1, r3
 800199a:	482d      	ldr	r0, [pc, #180]	; (8001a50 <MX_TIM3_Init+0x128>)
 800199c:	f004 fea8 	bl	80066f0 <HAL_TIM_ConfigClockSource>
 80019a0:	4603      	mov	r3, r0
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d001      	beq.n	80019aa <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019a6:	f000 fc97 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019aa:	4829      	ldr	r0, [pc, #164]	; (8001a50 <MX_TIM3_Init+0x128>)
 80019ac:	f004 fbc2 	bl	8006134 <HAL_TIM_PWM_Init>
 80019b0:	4603      	mov	r3, r0
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d001      	beq.n	80019ba <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019b6:	f000 fc8f 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019ba:	2300      	movs	r3, #0
 80019bc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c2:	f107 0320 	add.w	r3, r7, #32
 80019c6:	4619      	mov	r1, r3
 80019c8:	4821      	ldr	r0, [pc, #132]	; (8001a50 <MX_TIM3_Init+0x128>)
 80019ca:	f005 fa8d 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 80019ce:	4603      	mov	r3, r0
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d001      	beq.n	80019d8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019d4:	f000 fc80 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019d8:	2360      	movs	r3, #96	; 0x60
 80019da:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019dc:	2300      	movs	r3, #0
 80019de:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e4:	2300      	movs	r3, #0
 80019e6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2200      	movs	r2, #0
 80019ec:	4619      	mov	r1, r3
 80019ee:	4818      	ldr	r0, [pc, #96]	; (8001a50 <MX_TIM3_Init+0x128>)
 80019f0:	f004 fdc0 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019fa:	f000 fc6d 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	2204      	movs	r2, #4
 8001a02:	4619      	mov	r1, r3
 8001a04:	4812      	ldr	r0, [pc, #72]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001a06:	f004 fdb5 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001a10:	f000 fc62 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a14:	1d3b      	adds	r3, r7, #4
 8001a16:	2208      	movs	r2, #8
 8001a18:	4619      	mov	r1, r3
 8001a1a:	480d      	ldr	r0, [pc, #52]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001a1c:	f004 fdaa 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d001      	beq.n	8001a2a <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001a26:	f000 fc57 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a2a:	1d3b      	adds	r3, r7, #4
 8001a2c:	220c      	movs	r2, #12
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4807      	ldr	r0, [pc, #28]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001a32:	f004 fd9f 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001a36:	4603      	mov	r3, r0
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d001      	beq.n	8001a40 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001a3c:	f000 fc4c 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a40:	4803      	ldr	r0, [pc, #12]	; (8001a50 <MX_TIM3_Init+0x128>)
 8001a42:	f001 fbc3 	bl	80031cc <HAL_TIM_MspPostInit>

}
 8001a46:	bf00      	nop
 8001a48:	3738      	adds	r7, #56	; 0x38
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	20000f68 	.word	0x20000f68
 8001a54:	40000400 	.word	0x40000400

08001a58 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b08e      	sub	sp, #56	; 0x38
 8001a5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a62:	2200      	movs	r2, #0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	605a      	str	r2, [r3, #4]
 8001a68:	609a      	str	r2, [r3, #8]
 8001a6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a6c:	f107 0320 	add.w	r3, r7, #32
 8001a70:	2200      	movs	r2, #0
 8001a72:	601a      	str	r2, [r3, #0]
 8001a74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a76:	1d3b      	adds	r3, r7, #4
 8001a78:	2200      	movs	r2, #0
 8001a7a:	601a      	str	r2, [r3, #0]
 8001a7c:	605a      	str	r2, [r3, #4]
 8001a7e:	609a      	str	r2, [r3, #8]
 8001a80:	60da      	str	r2, [r3, #12]
 8001a82:	611a      	str	r2, [r3, #16]
 8001a84:	615a      	str	r2, [r3, #20]
 8001a86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a88:	4b3d      	ldr	r3, [pc, #244]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001a8a:	4a3e      	ldr	r2, [pc, #248]	; (8001b84 <MX_TIM4_Init+0x12c>)
 8001a8c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001a8e:	4b3c      	ldr	r3, [pc, #240]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001a90:	2253      	movs	r2, #83	; 0x53
 8001a92:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a94:	4b3a      	ldr	r3, [pc, #232]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001a9a:	4b39      	ldr	r3, [pc, #228]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001a9c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001aa0:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa2:	4b37      	ldr	r3, [pc, #220]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aa8:	4b35      	ldr	r3, [pc, #212]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001aae:	4834      	ldr	r0, [pc, #208]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001ab0:	f004 fa18 	bl	8005ee4 <HAL_TIM_Base_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001aba:	f000 fc0d 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001abe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ac2:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ac4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ac8:	4619      	mov	r1, r3
 8001aca:	482d      	ldr	r0, [pc, #180]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001acc:	f004 fe10 	bl	80066f0 <HAL_TIM_ConfigClockSource>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ad6:	f000 fbff 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ada:	4829      	ldr	r0, [pc, #164]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001adc:	f004 fb2a 	bl	8006134 <HAL_TIM_PWM_Init>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ae6:	f000 fbf7 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aea:	2300      	movs	r3, #0
 8001aec:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aee:	2300      	movs	r3, #0
 8001af0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af2:	f107 0320 	add.w	r3, r7, #32
 8001af6:	4619      	mov	r1, r3
 8001af8:	4821      	ldr	r0, [pc, #132]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001afa:	f005 f9f5 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001afe:	4603      	mov	r3, r0
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d001      	beq.n	8001b08 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b04:	f000 fbe8 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b08:	2360      	movs	r3, #96	; 0x60
 8001b0a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b14:	2300      	movs	r3, #0
 8001b16:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4818      	ldr	r0, [pc, #96]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001b20:	f004 fd28 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b2a:	f000 fbd5 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	2204      	movs	r2, #4
 8001b32:	4619      	mov	r1, r3
 8001b34:	4812      	ldr	r0, [pc, #72]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001b36:	f004 fd1d 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001b40:	f000 fbca 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b44:	1d3b      	adds	r3, r7, #4
 8001b46:	2208      	movs	r2, #8
 8001b48:	4619      	mov	r1, r3
 8001b4a:	480d      	ldr	r0, [pc, #52]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001b4c:	f004 fd12 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001b50:	4603      	mov	r3, r0
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d001      	beq.n	8001b5a <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b56:	f000 fbbf 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b5a:	1d3b      	adds	r3, r7, #4
 8001b5c:	220c      	movs	r2, #12
 8001b5e:	4619      	mov	r1, r3
 8001b60:	4807      	ldr	r0, [pc, #28]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001b62:	f004 fd07 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001b66:	4603      	mov	r3, r0
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d001      	beq.n	8001b70 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001b6c:	f000 fbb4 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b70:	4803      	ldr	r0, [pc, #12]	; (8001b80 <MX_TIM4_Init+0x128>)
 8001b72:	f001 fb2b 	bl	80031cc <HAL_TIM_MspPostInit>

}
 8001b76:	bf00      	nop
 8001b78:	3738      	adds	r7, #56	; 0x38
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000e34 	.word	0x20000e34
 8001b84:	40000800 	.word	0x40000800

08001b88 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b08a      	sub	sp, #40	; 0x28
 8001b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b8e:	f107 0320 	add.w	r3, r7, #32
 8001b92:	2200      	movs	r2, #0
 8001b94:	601a      	str	r2, [r3, #0]
 8001b96:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b98:	1d3b      	adds	r3, r7, #4
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	601a      	str	r2, [r3, #0]
 8001b9e:	605a      	str	r2, [r3, #4]
 8001ba0:	609a      	str	r2, [r3, #8]
 8001ba2:	60da      	str	r2, [r3, #12]
 8001ba4:	611a      	str	r2, [r3, #16]
 8001ba6:	615a      	str	r2, [r3, #20]
 8001ba8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001baa:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bac:	4a27      	ldr	r2, [pc, #156]	; (8001c4c <MX_TIM5_Init+0xc4>)
 8001bae:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bb6:	4b24      	ldr	r3, [pc, #144]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001bbc:	4b22      	ldr	r3, [pc, #136]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bbe:	f04f 32ff 	mov.w	r2, #4294967295
 8001bc2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bc4:	4b20      	ldr	r3, [pc, #128]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bca:	4b1f      	ldr	r3, [pc, #124]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bcc:	2200      	movs	r2, #0
 8001bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001bd0:	481d      	ldr	r0, [pc, #116]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bd2:	f004 faaf 	bl	8006134 <HAL_TIM_PWM_Init>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d001      	beq.n	8001be0 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001bdc:	f000 fb7c 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001be0:	2300      	movs	r3, #0
 8001be2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001be4:	2300      	movs	r3, #0
 8001be6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001be8:	f107 0320 	add.w	r3, r7, #32
 8001bec:	4619      	mov	r1, r3
 8001bee:	4816      	ldr	r0, [pc, #88]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001bf0:	f005 f97a 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001bfa:	f000 fb6d 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bfe:	2360      	movs	r3, #96	; 0x60
 8001c00:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c02:	2300      	movs	r3, #0
 8001c04:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c06:	2300      	movs	r3, #0
 8001c08:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c0e:	1d3b      	adds	r3, r7, #4
 8001c10:	2208      	movs	r2, #8
 8001c12:	4619      	mov	r1, r3
 8001c14:	480c      	ldr	r0, [pc, #48]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001c16:	f004 fcad 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d001      	beq.n	8001c24 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001c20:	f000 fb5a 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001c24:	1d3b      	adds	r3, r7, #4
 8001c26:	220c      	movs	r2, #12
 8001c28:	4619      	mov	r1, r3
 8001c2a:	4807      	ldr	r0, [pc, #28]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001c2c:	f004 fca2 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001c36:	f000 fb4f 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c3a:	4803      	ldr	r0, [pc, #12]	; (8001c48 <MX_TIM5_Init+0xc0>)
 8001c3c:	f001 fac6 	bl	80031cc <HAL_TIM_MspPostInit>

}
 8001c40:	bf00      	nop
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	20000f20 	.word	0x20000f20
 8001c4c:	40000c00 	.word	0x40000c00

08001c50 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b096      	sub	sp, #88	; 0x58
 8001c54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c56:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	601a      	str	r2, [r3, #0]
 8001c5e:	605a      	str	r2, [r3, #4]
 8001c60:	609a      	str	r2, [r3, #8]
 8001c62:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c64:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c68:	2200      	movs	r2, #0
 8001c6a:	601a      	str	r2, [r3, #0]
 8001c6c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c6e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c72:	2200      	movs	r2, #0
 8001c74:	601a      	str	r2, [r3, #0]
 8001c76:	605a      	str	r2, [r3, #4]
 8001c78:	609a      	str	r2, [r3, #8]
 8001c7a:	60da      	str	r2, [r3, #12]
 8001c7c:	611a      	str	r2, [r3, #16]
 8001c7e:	615a      	str	r2, [r3, #20]
 8001c80:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c82:	1d3b      	adds	r3, r7, #4
 8001c84:	2220      	movs	r2, #32
 8001c86:	2100      	movs	r1, #0
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f006 fa31 	bl	80080f0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c8e:	4b50      	ldr	r3, [pc, #320]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001c90:	4a50      	ldr	r2, [pc, #320]	; (8001dd4 <MX_TIM8_Init+0x184>)
 8001c92:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8001c94:	4b4e      	ldr	r3, [pc, #312]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001c96:	22a7      	movs	r2, #167	; 0xa7
 8001c98:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c9a:	4b4d      	ldr	r3, [pc, #308]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001ca0:	4b4b      	ldr	r3, [pc, #300]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001ca2:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001ca6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ca8:	4b49      	ldr	r3, [pc, #292]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001cae:	4b48      	ldr	r3, [pc, #288]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb4:	4b46      	ldr	r3, [pc, #280]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001cba:	4845      	ldr	r0, [pc, #276]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001cbc:	f004 f912 	bl	8005ee4 <HAL_TIM_Base_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001cc6:	f000 fb07 	bl	80022d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001cca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001cce:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001cd0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	483e      	ldr	r0, [pc, #248]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001cd8:	f004 fd0a 	bl	80066f0 <HAL_TIM_ConfigClockSource>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001ce2:	f000 faf9 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001ce6:	483a      	ldr	r0, [pc, #232]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001ce8:	f004 fa24 	bl	8006134 <HAL_TIM_PWM_Init>
 8001cec:	4603      	mov	r3, r0
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d001      	beq.n	8001cf6 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001cf2:	f000 faf1 	bl	80022d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cfe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001d02:	4619      	mov	r1, r3
 8001d04:	4832      	ldr	r0, [pc, #200]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001d06:	f005 f8ef 	bl	8006ee8 <HAL_TIMEx_MasterConfigSynchronization>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001d10:	f000 fae2 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d14:	2360      	movs	r3, #96	; 0x60
 8001d16:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d1c:	2300      	movs	r3, #0
 8001d1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001d20:	2300      	movs	r3, #0
 8001d22:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d34:	2200      	movs	r2, #0
 8001d36:	4619      	mov	r1, r3
 8001d38:	4825      	ldr	r0, [pc, #148]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001d3a:	f004 fc1b 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001d3e:	4603      	mov	r3, r0
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d001      	beq.n	8001d48 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d44:	f000 fac8 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d4c:	2204      	movs	r2, #4
 8001d4e:	4619      	mov	r1, r3
 8001d50:	481f      	ldr	r0, [pc, #124]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001d52:	f004 fc0f 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d001      	beq.n	8001d60 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d5c:	f000 fabc 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d64:	2208      	movs	r2, #8
 8001d66:	4619      	mov	r1, r3
 8001d68:	4819      	ldr	r0, [pc, #100]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001d6a:	f004 fc03 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001d6e:	4603      	mov	r3, r0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d001      	beq.n	8001d78 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001d74:	f000 fab0 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d7c:	220c      	movs	r2, #12
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4813      	ldr	r0, [pc, #76]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001d82:	f004 fbf7 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001d8c:	f000 faa4 	bl	80022d8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d90:	2300      	movs	r3, #0
 8001d92:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001da4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001da8:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001daa:	2300      	movs	r3, #0
 8001dac:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001dae:	1d3b      	adds	r3, r7, #4
 8001db0:	4619      	mov	r1, r3
 8001db2:	4807      	ldr	r0, [pc, #28]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001db4:	f005 f914 	bl	8006fe0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001db8:	4603      	mov	r3, r0
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d001      	beq.n	8001dc2 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001dbe:	f000 fa8b 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001dc2:	4803      	ldr	r0, [pc, #12]	; (8001dd0 <MX_TIM8_Init+0x180>)
 8001dc4:	f001 fa02 	bl	80031cc <HAL_TIM_MspPostInit>

}
 8001dc8:	bf00      	nop
 8001dca:	3758      	adds	r7, #88	; 0x58
 8001dcc:	46bd      	mov	sp, r7
 8001dce:	bd80      	pop	{r7, pc}
 8001dd0:	20000dec 	.word	0x20000dec
 8001dd4:	40010400 	.word	0x40010400

08001dd8 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b088      	sub	sp, #32
 8001ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001dde:	1d3b      	adds	r3, r7, #4
 8001de0:	2200      	movs	r2, #0
 8001de2:	601a      	str	r2, [r3, #0]
 8001de4:	605a      	str	r2, [r3, #4]
 8001de6:	609a      	str	r2, [r3, #8]
 8001de8:	60da      	str	r2, [r3, #12]
 8001dea:	611a      	str	r2, [r3, #16]
 8001dec:	615a      	str	r2, [r3, #20]
 8001dee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001df0:	4b1f      	ldr	r3, [pc, #124]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001df2:	4a20      	ldr	r2, [pc, #128]	; (8001e74 <MX_TIM12_Init+0x9c>)
 8001df4:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001df6:	4b1e      	ldr	r3, [pc, #120]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001df8:	2200      	movs	r2, #0
 8001dfa:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dfc:	4b1c      	ldr	r3, [pc, #112]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001e02:	4b1b      	ldr	r3, [pc, #108]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e04:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e08:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e0a:	4b19      	ldr	r3, [pc, #100]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e10:	4b17      	ldr	r3, [pc, #92]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001e16:	4816      	ldr	r0, [pc, #88]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e18:	f004 f98c 	bl	8006134 <HAL_TIM_PWM_Init>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d001      	beq.n	8001e26 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001e22:	f000 fa59 	bl	80022d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e26:	2360      	movs	r3, #96	; 0x60
 8001e28:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e2e:	2300      	movs	r3, #0
 8001e30:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e36:	1d3b      	adds	r3, r7, #4
 8001e38:	2200      	movs	r2, #0
 8001e3a:	4619      	mov	r1, r3
 8001e3c:	480c      	ldr	r0, [pc, #48]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e3e:	f004 fb99 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001e42:	4603      	mov	r3, r0
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	d001      	beq.n	8001e4c <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e48:	f000 fa46 	bl	80022d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e4c:	1d3b      	adds	r3, r7, #4
 8001e4e:	2204      	movs	r2, #4
 8001e50:	4619      	mov	r1, r3
 8001e52:	4807      	ldr	r0, [pc, #28]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e54:	f004 fb8e 	bl	8006574 <HAL_TIM_PWM_ConfigChannel>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d001      	beq.n	8001e62 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001e5e:	f000 fa3b 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e62:	4803      	ldr	r0, [pc, #12]	; (8001e70 <MX_TIM12_Init+0x98>)
 8001e64:	f001 f9b2 	bl	80031cc <HAL_TIM_MspPostInit>

}
 8001e68:	bf00      	nop
 8001e6a:	3720      	adds	r7, #32
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}
 8001e70:	200012b0 	.word	0x200012b0
 8001e74:	40001800 	.word	0x40001800

08001e78 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e7c:	4b11      	ldr	r3, [pc, #68]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001e7e:	4a12      	ldr	r2, [pc, #72]	; (8001ec8 <MX_UART4_Init+0x50>)
 8001e80:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e82:	4b10      	ldr	r3, [pc, #64]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001e84:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e88:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e8a:	4b0e      	ldr	r3, [pc, #56]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001e8c:	2200      	movs	r2, #0
 8001e8e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001e92:	2200      	movs	r2, #0
 8001e94:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e96:	4b0b      	ldr	r3, [pc, #44]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001e98:	2200      	movs	r2, #0
 8001e9a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e9c:	4b09      	ldr	r3, [pc, #36]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001e9e:	220c      	movs	r2, #12
 8001ea0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ea2:	4b08      	ldr	r3, [pc, #32]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001ea4:	2200      	movs	r2, #0
 8001ea6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ea8:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001eae:	4805      	ldr	r0, [pc, #20]	; (8001ec4 <MX_UART4_Init+0x4c>)
 8001eb0:	f005 f8fc 	bl	80070ac <HAL_UART_Init>
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d001      	beq.n	8001ebe <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001eba:	f000 fa0d 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20001128 	.word	0x20001128
 8001ec8:	40004c00 	.word	0x40004c00

08001ecc <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001ed2:	4a12      	ldr	r2, [pc, #72]	; (8001f1c <MX_UART5_Init+0x50>)
 8001ed4:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001ed8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001edc:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001ee4:	4b0c      	ldr	r3, [pc, #48]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001ee6:	2200      	movs	r2, #0
 8001ee8:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001eea:	4b0b      	ldr	r3, [pc, #44]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001eec:	2200      	movs	r2, #0
 8001eee:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ef0:	4b09      	ldr	r3, [pc, #36]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001ef2:	220c      	movs	r2, #12
 8001ef4:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ef6:	4b08      	ldr	r3, [pc, #32]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001ef8:	2200      	movs	r2, #0
 8001efa:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001efc:	4b06      	ldr	r3, [pc, #24]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001f02:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_UART5_Init+0x4c>)
 8001f04:	f005 f8d2 	bl	80070ac <HAL_UART_Init>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d001      	beq.n	8001f12 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001f0e:	f000 f9e3 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001f12:	bf00      	nop
 8001f14:	bd80      	pop	{r7, pc}
 8001f16:	bf00      	nop
 8001f18:	20000fb0 	.word	0x20000fb0
 8001f1c:	40005000 	.word	0x40005000

08001f20 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f24:	4b11      	ldr	r3, [pc, #68]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <MX_USART1_UART_Init+0x50>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f2a:	4b10      	ldr	r3, [pc, #64]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0c      	ldr	r3, [pc, #48]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b09      	ldr	r3, [pc, #36]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b06      	ldr	r3, [pc, #24]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f56:	4805      	ldr	r0, [pc, #20]	; (8001f6c <MX_USART1_UART_Init+0x4c>)
 8001f58:	f005 f8a8 	bl	80070ac <HAL_UART_Init>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d001      	beq.n	8001f66 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f62:	f000 f9b9 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f66:	bf00      	nop
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000109c 	.word	0x2000109c
 8001f70:	40011000 	.word	0x40011000

08001f74 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f78:	4b11      	ldr	r3, [pc, #68]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	4a12      	ldr	r2, [pc, #72]	; (8001fc4 <MX_USART2_UART_Init+0x50>)
 8001f7c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f7e:	4b10      	ldr	r3, [pc, #64]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f80:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f84:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f86:	4b0e      	ldr	r3, [pc, #56]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f8c:	4b0c      	ldr	r3, [pc, #48]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f8e:	2200      	movs	r2, #0
 8001f90:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f92:	4b0b      	ldr	r3, [pc, #44]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f98:	4b09      	ldr	r3, [pc, #36]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001f9a:	220c      	movs	r2, #12
 8001f9c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f9e:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fa4:	4b06      	ldr	r3, [pc, #24]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001faa:	4805      	ldr	r0, [pc, #20]	; (8001fc0 <MX_USART2_UART_Init+0x4c>)
 8001fac:	f005 f87e 	bl	80070ac <HAL_UART_Init>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001fb6:	f000 f98f 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	2000120c 	.word	0x2000120c
 8001fc4:	40004400 	.word	0x40004400

08001fc8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fcc:	4b11      	ldr	r3, [pc, #68]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001fce:	4a12      	ldr	r2, [pc, #72]	; (8002018 <MX_USART3_UART_Init+0x50>)
 8001fd0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fd2:	4b10      	ldr	r3, [pc, #64]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001fd4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fd8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fda:	4b0e      	ldr	r3, [pc, #56]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001fdc:	2200      	movs	r2, #0
 8001fde:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fe0:	4b0c      	ldr	r3, [pc, #48]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001fe8:	2200      	movs	r2, #0
 8001fea:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fec:	4b09      	ldr	r3, [pc, #36]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001fee:	220c      	movs	r2, #12
 8001ff0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ff2:	4b08      	ldr	r3, [pc, #32]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001ffe:	4805      	ldr	r0, [pc, #20]	; (8002014 <MX_USART3_UART_Init+0x4c>)
 8002000:	f005 f854 	bl	80070ac <HAL_UART_Init>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800200a:	f000 f965 	bl	80022d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	20000edc 	.word	0x20000edc
 8002018:	40004800 	.word	0x40004800

0800201c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b082      	sub	sp, #8
 8002020:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002022:	2300      	movs	r3, #0
 8002024:	607b      	str	r3, [r7, #4]
 8002026:	4b23      	ldr	r3, [pc, #140]	; (80020b4 <MX_DMA_Init+0x98>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a22      	ldr	r2, [pc, #136]	; (80020b4 <MX_DMA_Init+0x98>)
 800202c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b20      	ldr	r3, [pc, #128]	; (80020b4 <MX_DMA_Init+0x98>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800203a:	607b      	str	r3, [r7, #4]
 800203c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800203e:	2300      	movs	r3, #0
 8002040:	603b      	str	r3, [r7, #0]
 8002042:	4b1c      	ldr	r3, [pc, #112]	; (80020b4 <MX_DMA_Init+0x98>)
 8002044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002046:	4a1b      	ldr	r2, [pc, #108]	; (80020b4 <MX_DMA_Init+0x98>)
 8002048:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800204c:	6313      	str	r3, [r2, #48]	; 0x30
 800204e:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <MX_DMA_Init+0x98>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002052:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002056:	603b      	str	r3, [r7, #0]
 8002058:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800205a:	2200      	movs	r2, #0
 800205c:	2100      	movs	r1, #0
 800205e:	200b      	movs	r0, #11
 8002060:	f002 fa1c 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002064:	200b      	movs	r0, #11
 8002066:	f002 fa35 	bl	80044d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800206a:	2200      	movs	r2, #0
 800206c:	2100      	movs	r1, #0
 800206e:	200c      	movs	r0, #12
 8002070:	f002 fa14 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002074:	200c      	movs	r0, #12
 8002076:	f002 fa2d 	bl	80044d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800207a:	2200      	movs	r2, #0
 800207c:	2100      	movs	r1, #0
 800207e:	200d      	movs	r0, #13
 8002080:	f002 fa0c 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002084:	200d      	movs	r0, #13
 8002086:	f002 fa25 	bl	80044d4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800208a:	2200      	movs	r2, #0
 800208c:	2100      	movs	r1, #0
 800208e:	2010      	movs	r0, #16
 8002090:	f002 fa04 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002094:	2010      	movs	r0, #16
 8002096:	f002 fa1d 	bl	80044d4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	2100      	movs	r1, #0
 800209e:	203a      	movs	r0, #58	; 0x3a
 80020a0:	f002 f9fc 	bl	800449c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 80020a4:	203a      	movs	r0, #58	; 0x3a
 80020a6:	f002 fa15 	bl	80044d4 <HAL_NVIC_EnableIRQ>

}
 80020aa:	bf00      	nop
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023800 	.word	0x40023800

080020b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b08c      	sub	sp, #48	; 0x30
 80020bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020be:	f107 031c 	add.w	r3, r7, #28
 80020c2:	2200      	movs	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
 80020c6:	605a      	str	r2, [r3, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	60da      	str	r2, [r3, #12]
 80020cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	61bb      	str	r3, [r7, #24]
 80020d2:	4b62      	ldr	r3, [pc, #392]	; (800225c <MX_GPIO_Init+0x1a4>)
 80020d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d6:	4a61      	ldr	r2, [pc, #388]	; (800225c <MX_GPIO_Init+0x1a4>)
 80020d8:	f043 0310 	orr.w	r3, r3, #16
 80020dc:	6313      	str	r3, [r2, #48]	; 0x30
 80020de:	4b5f      	ldr	r3, [pc, #380]	; (800225c <MX_GPIO_Init+0x1a4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	f003 0310 	and.w	r3, r3, #16
 80020e6:	61bb      	str	r3, [r7, #24]
 80020e8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	617b      	str	r3, [r7, #20]
 80020ee:	4b5b      	ldr	r3, [pc, #364]	; (800225c <MX_GPIO_Init+0x1a4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a5a      	ldr	r2, [pc, #360]	; (800225c <MX_GPIO_Init+0x1a4>)
 80020f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b58      	ldr	r3, [pc, #352]	; (800225c <MX_GPIO_Init+0x1a4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002102:	617b      	str	r3, [r7, #20]
 8002104:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	613b      	str	r3, [r7, #16]
 800210a:	4b54      	ldr	r3, [pc, #336]	; (800225c <MX_GPIO_Init+0x1a4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a53      	ldr	r2, [pc, #332]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b51      	ldr	r3, [pc, #324]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	613b      	str	r3, [r7, #16]
 8002120:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60fb      	str	r3, [r7, #12]
 8002126:	4b4d      	ldr	r3, [pc, #308]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a4c      	ldr	r2, [pc, #304]	; (800225c <MX_GPIO_Init+0x1a4>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b4a      	ldr	r3, [pc, #296]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60fb      	str	r3, [r7, #12]
 800213c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b46      	ldr	r3, [pc, #280]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002146:	4a45      	ldr	r2, [pc, #276]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002148:	f043 0308 	orr.w	r3, r3, #8
 800214c:	6313      	str	r3, [r2, #48]	; 0x30
 800214e:	4b43      	ldr	r3, [pc, #268]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002150:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002152:	f003 0308 	and.w	r3, r3, #8
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800215a:	2300      	movs	r3, #0
 800215c:	607b      	str	r3, [r7, #4]
 800215e:	4b3f      	ldr	r3, [pc, #252]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a3e      	ldr	r2, [pc, #248]	; (800225c <MX_GPIO_Init+0x1a4>)
 8002164:	f043 0304 	orr.w	r3, r3, #4
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b3c      	ldr	r3, [pc, #240]	; (800225c <MX_GPIO_Init+0x1a4>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0304 	and.w	r3, r3, #4
 8002172:	607b      	str	r3, [r7, #4]
 8002174:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002176:	2200      	movs	r2, #0
 8002178:	f44f 7180 	mov.w	r1, #256	; 0x100
 800217c:	4838      	ldr	r0, [pc, #224]	; (8002260 <MX_GPIO_Init+0x1a8>)
 800217e:	f002 ff61 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CSN_GPIO_Port, OLED_CSN_Pin, GPIO_PIN_RESET);
 8002182:	2200      	movs	r2, #0
 8002184:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002188:	4836      	ldr	r0, [pc, #216]	; (8002264 <MX_GPIO_Init+0x1ac>)
 800218a:	f002 ff5b 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800218e:	2200      	movs	r2, #0
 8002190:	21c0      	movs	r1, #192	; 0xc0
 8002192:	4835      	ldr	r0, [pc, #212]	; (8002268 <MX_GPIO_Init+0x1b0>)
 8002194:	f002 ff56 	bl	8005044 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002198:	2360      	movs	r3, #96	; 0x60
 800219a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800219c:	2302      	movs	r3, #2
 800219e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80021a8:	2303      	movs	r3, #3
 80021aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80021ac:	f107 031c 	add.w	r3, r7, #28
 80021b0:	4619      	mov	r1, r3
 80021b2:	482e      	ldr	r0, [pc, #184]	; (800226c <MX_GPIO_Init+0x1b4>)
 80021b4:	f002 fdaa 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 80021b8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021be:	2301      	movs	r3, #1
 80021c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c2:	2300      	movs	r3, #0
 80021c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021c6:	2300      	movs	r3, #0
 80021c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 80021ca:	f107 031c 	add.w	r3, r7, #28
 80021ce:	4619      	mov	r1, r3
 80021d0:	4823      	ldr	r0, [pc, #140]	; (8002260 <MX_GPIO_Init+0x1a8>)
 80021d2:	f002 fd9b 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CSN_Pin */
  GPIO_InitStruct.Pin = OLED_CSN_Pin;
 80021d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021dc:	2301      	movs	r3, #1
 80021de:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021e4:	2303      	movs	r3, #3
 80021e6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CSN_GPIO_Port, &GPIO_InitStruct);
 80021e8:	f107 031c 	add.w	r3, r7, #28
 80021ec:	4619      	mov	r1, r3
 80021ee:	481d      	ldr	r0, [pc, #116]	; (8002264 <MX_GPIO_Init+0x1ac>)
 80021f0:	f002 fd8c 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 80021f4:	23c0      	movs	r3, #192	; 0xc0
 80021f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021f8:	2301      	movs	r3, #1
 80021fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fc:	2300      	movs	r3, #0
 80021fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002204:	f107 031c 	add.w	r3, r7, #28
 8002208:	4619      	mov	r1, r3
 800220a:	4817      	ldr	r0, [pc, #92]	; (8002268 <MX_GPIO_Init+0x1b0>)
 800220c:	f002 fd7e 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002210:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002216:	2302      	movs	r3, #2
 8002218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800221a:	2300      	movs	r3, #0
 800221c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800221e:	2300      	movs	r3, #0
 8002220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8002222:	2303      	movs	r3, #3
 8002224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002226:	f107 031c 	add.w	r3, r7, #28
 800222a:	4619      	mov	r1, r3
 800222c:	480e      	ldr	r0, [pc, #56]	; (8002268 <MX_GPIO_Init+0x1b0>)
 800222e:	f002 fd6d 	bl	8004d0c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002238:	2302      	movs	r3, #2
 800223a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800223c:	2300      	movs	r3, #0
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002240:	2300      	movs	r3, #0
 8002242:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002244:	2303      	movs	r3, #3
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002248:	f107 031c 	add.w	r3, r7, #28
 800224c:	4619      	mov	r1, r3
 800224e:	4806      	ldr	r0, [pc, #24]	; (8002268 <MX_GPIO_Init+0x1b0>)
 8002250:	f002 fd5c 	bl	8004d0c <HAL_GPIO_Init>

}
 8002254:	bf00      	nop
 8002256:	3730      	adds	r7, #48	; 0x30
 8002258:	46bd      	mov	sp, r7
 800225a:	bd80      	pop	{r7, pc}
 800225c:	40023800 	.word	0x40023800
 8002260:	40020c00 	.word	0x40020c00
 8002264:	40020000 	.word	0x40020000
 8002268:	40020400 	.word	0x40020400
 800226c:	40021000 	.word	0x40021000

08002270 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	4a10      	ldr	r2, [pc, #64]	; (80022c0 <HAL_TIM_PeriodElapsedCallback+0x50>)
 800227e:	4293      	cmp	r3, r2
 8002280:	d102      	bne.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002282:	f001 fdad 	bl	8003de0 <HAL_IncTick>
      if(pidinit==1&&lock!=0)
    	  PID_CTRL();
      setmotor();
  }
  /* USER CODE END Callback 1 */
}
 8002286:	e017      	b.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if(htim->Instance == TIM1)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a0d      	ldr	r2, [pc, #52]	; (80022c4 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800228e:	4293      	cmp	r3, r2
 8002290:	d112      	bne.n	80022b8 <HAL_TIM_PeriodElapsedCallback+0x48>
	  HAL_UART_Transmit_IT(&huart5, (unsigned char *)&frame, sizeof(frame));
 8002292:	2284      	movs	r2, #132	; 0x84
 8002294:	490c      	ldr	r1, [pc, #48]	; (80022c8 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002296:	480d      	ldr	r0, [pc, #52]	; (80022cc <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002298:	f004 ffe7 	bl	800726a <HAL_UART_Transmit_IT>
	  OLED_Refresh_Gram();
 800229c:	f000 f956 	bl	800254c <OLED_Refresh_Gram>
      if(pidinit==1&&lock!=0)
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2b01      	cmp	r3, #1
 80022a6:	d105      	bne.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x44>
 80022a8:	4b0a      	ldr	r3, [pc, #40]	; (80022d4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d001      	beq.n	80022b4 <HAL_TIM_PeriodElapsedCallback+0x44>
    	  PID_CTRL();
 80022b0:	f7fe febe 	bl	8001030 <PID_CTRL>
      setmotor();
 80022b4:	f000 f83e 	bl	8002334 <setmotor>
}
 80022b8:	bf00      	nop
 80022ba:	3708      	adds	r7, #8
 80022bc:	46bd      	mov	sp, r7
 80022be:	bd80      	pop	{r7, pc}
 80022c0:	40001400 	.word	0x40001400
 80022c4:	40010000 	.word	0x40010000
 80022c8:	200000a8 	.word	0x200000a8
 80022cc:	20000fb0 	.word	0x20000fb0
 80022d0:	20000bc8 	.word	0x20000bc8
 80022d4:	20000be4 	.word	0x20000be4

080022d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022d8:	b480      	push	{r7}
 80022da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022dc:	b672      	cpsid	i
}
 80022de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022e0:	e7fe      	b.n	80022e0 <Error_Handler+0x8>
	...

080022e4 <motorinit>:
		{ 1.0f, 1.0f, 0, 0,1.0f, 0, 0, 0, 0, },
		{ -1.0f, 1.0f, 0, 0, 1.0f, 0, 0, 0, 0, }, };*/
float motor[8];
//每次执行会将六自由度dof6转换为8个电机通道 并赋值
void motorinit()
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim4;
	extern TIM_HandleTypeDef htim8;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80022e8:	2100      	movs	r1, #0
 80022ea:	4810      	ldr	r0, [pc, #64]	; (800232c <motorinit+0x48>)
 80022ec:	f003 ff72 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80022f0:	2104      	movs	r1, #4
 80022f2:	480e      	ldr	r0, [pc, #56]	; (800232c <motorinit+0x48>)
 80022f4:	f003 ff6e 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80022f8:	2108      	movs	r1, #8
 80022fa:	480c      	ldr	r0, [pc, #48]	; (800232c <motorinit+0x48>)
 80022fc:	f003 ff6a 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8002300:	210c      	movs	r1, #12
 8002302:	480a      	ldr	r0, [pc, #40]	; (800232c <motorinit+0x48>)
 8002304:	f003 ff66 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8002308:	2100      	movs	r1, #0
 800230a:	4809      	ldr	r0, [pc, #36]	; (8002330 <motorinit+0x4c>)
 800230c:	f003 ff62 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8002310:	2104      	movs	r1, #4
 8002312:	4807      	ldr	r0, [pc, #28]	; (8002330 <motorinit+0x4c>)
 8002314:	f003 ff5e 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8002318:	2108      	movs	r1, #8
 800231a:	4805      	ldr	r0, [pc, #20]	; (8002330 <motorinit+0x4c>)
 800231c:	f003 ff5a 	bl	80061d4 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8002320:	210c      	movs	r1, #12
 8002322:	4803      	ldr	r0, [pc, #12]	; (8002330 <motorinit+0x4c>)
 8002324:	f003 ff56 	bl	80061d4 <HAL_TIM_PWM_Start>
}
 8002328:	bf00      	nop
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000e34 	.word	0x20000e34
 8002330:	20000dec 	.word	0x20000dec

08002334 <setmotor>:
void setmotor()
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b084      	sub	sp, #16
 8002338:	af00      	add	r7, sp, #0
    int time = HAL_GetTick();
 800233a:	f001 fd65 	bl	8003e08 <HAL_GetTick>
 800233e:	4603      	mov	r3, r0
 8002340:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 8; i++)
 8002342:	2300      	movs	r3, #0
 8002344:	60fb      	str	r3, [r7, #12]
 8002346:	e05d      	b.n	8002404 <setmotor+0xd0>
    {
        float tmp = 0;
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	60bb      	str	r3, [r7, #8]
        for (int j = 0; j < 6; j++)
 800234e:	2300      	movs	r3, #0
 8002350:	607b      	str	r3, [r7, #4]
 8002352:	e01c      	b.n	800238e <setmotor+0x5a>
            tmp += hcc[i][j] * dof6[j];
 8002354:	4973      	ldr	r1, [pc, #460]	; (8002524 <setmotor+0x1f0>)
 8002356:	68fa      	ldr	r2, [r7, #12]
 8002358:	4613      	mov	r3, r2
 800235a:	005b      	lsls	r3, r3, #1
 800235c:	4413      	add	r3, r2
 800235e:	005b      	lsls	r3, r3, #1
 8002360:	687a      	ldr	r2, [r7, #4]
 8002362:	4413      	add	r3, r2
 8002364:	009b      	lsls	r3, r3, #2
 8002366:	440b      	add	r3, r1
 8002368:	ed93 7a00 	vldr	s14, [r3]
 800236c:	4a6e      	ldr	r2, [pc, #440]	; (8002528 <setmotor+0x1f4>)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	4413      	add	r3, r2
 8002374:	edd3 7a00 	vldr	s15, [r3]
 8002378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800237c:	ed97 7a02 	vldr	s14, [r7, #8]
 8002380:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002384:	edc7 7a02 	vstr	s15, [r7, #8]
        for (int j = 0; j < 6; j++)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	3301      	adds	r3, #1
 800238c:	607b      	str	r3, [r7, #4]
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2b05      	cmp	r3, #5
 8002392:	dddf      	ble.n	8002354 <setmotor+0x20>
        if(tmp > 1)
 8002394:	edd7 7a02 	vldr	s15, [r7, #8]
 8002398:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800239c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a4:	dd02      	ble.n	80023ac <setmotor+0x78>
            tmp = 1;
 80023a6:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80023aa:	60bb      	str	r3, [r7, #8]
        if(tmp < -1)
 80023ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80023b0:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80023b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d501      	bpl.n	80023c2 <setmotor+0x8e>
            tmp = -1;
 80023be:	4b5b      	ldr	r3, [pc, #364]	; (800252c <setmotor+0x1f8>)
 80023c0:	60bb      	str	r3, [r7, #8]
        if(time<10000||lock==0)//初始化||没有解开锁定
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	f242 720f 	movw	r2, #9999	; 0x270f
 80023c8:	4293      	cmp	r3, r2
 80023ca:	dd03      	ble.n	80023d4 <setmotor+0xa0>
 80023cc:	4b58      	ldr	r3, [pc, #352]	; (8002530 <setmotor+0x1fc>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d107      	bne.n	80023e4 <setmotor+0xb0>
			motor[i] = 0;
 80023d4:	4a57      	ldr	r2, [pc, #348]	; (8002534 <setmotor+0x200>)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	009b      	lsls	r3, r3, #2
 80023da:	4413      	add	r3, r2
 80023dc:	f04f 0200 	mov.w	r2, #0
 80023e0:	601a      	str	r2, [r3, #0]
 80023e2:	e005      	b.n	80023f0 <setmotor+0xbc>
        else
        	motor[i] = tmp;
 80023e4:	4a53      	ldr	r2, [pc, #332]	; (8002534 <setmotor+0x200>)
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	009b      	lsls	r3, r3, #2
 80023ea:	4413      	add	r3, r2
 80023ec:	68ba      	ldr	r2, [r7, #8]
 80023ee:	601a      	str	r2, [r3, #0]
        frame.fdata[i + 16] = tmp;//回传数据
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	3310      	adds	r3, #16
 80023f4:	4a50      	ldr	r2, [pc, #320]	; (8002538 <setmotor+0x204>)
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	4413      	add	r3, r2
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	3301      	adds	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	2b07      	cmp	r3, #7
 8002408:	dd9e      	ble.n	8002348 <setmotor+0x14>
    }

    MOTOR_1 = motor[0] * MOTOR_WAY + MOTOR_CENTER;
 800240a:	4b4a      	ldr	r3, [pc, #296]	; (8002534 <setmotor+0x200>)
 800240c:	edd3 7a00 	vldr	s15, [r3]
 8002410:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 800253c <setmotor+0x208>
 8002414:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002418:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002540 <setmotor+0x20c>
 800241c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002420:	4b48      	ldr	r3, [pc, #288]	; (8002544 <setmotor+0x210>)
 8002422:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002426:	ee17 2a90 	vmov	r2, s15
 800242a:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_2 = motor[1] * MOTOR_WAY + MOTOR_CENTER;
 800242c:	4b41      	ldr	r3, [pc, #260]	; (8002534 <setmotor+0x200>)
 800242e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002432:	ed9f 7a42 	vldr	s14, [pc, #264]	; 800253c <setmotor+0x208>
 8002436:	ee67 7a87 	vmul.f32	s15, s15, s14
 800243a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002540 <setmotor+0x20c>
 800243e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002442:	4b40      	ldr	r3, [pc, #256]	; (8002544 <setmotor+0x210>)
 8002444:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002448:	ee17 2a90 	vmov	r2, s15
 800244c:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_3 = motor[2] * MOTOR_WAY + MOTOR_CENTER;
 800244e:	4b39      	ldr	r3, [pc, #228]	; (8002534 <setmotor+0x200>)
 8002450:	edd3 7a02 	vldr	s15, [r3, #8]
 8002454:	ed9f 7a39 	vldr	s14, [pc, #228]	; 800253c <setmotor+0x208>
 8002458:	ee67 7a87 	vmul.f32	s15, s15, s14
 800245c:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002540 <setmotor+0x20c>
 8002460:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002464:	4b37      	ldr	r3, [pc, #220]	; (8002544 <setmotor+0x210>)
 8002466:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800246a:	ee17 2a90 	vmov	r2, s15
 800246e:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_4 = motor[3] * MOTOR_WAY + MOTOR_CENTER;
 8002470:	4b30      	ldr	r3, [pc, #192]	; (8002534 <setmotor+0x200>)
 8002472:	edd3 7a03 	vldr	s15, [r3, #12]
 8002476:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800253c <setmotor+0x208>
 800247a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800247e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002540 <setmotor+0x20c>
 8002482:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002486:	4b2f      	ldr	r3, [pc, #188]	; (8002544 <setmotor+0x210>)
 8002488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800248c:	ee17 2a90 	vmov	r2, s15
 8002490:	641a      	str	r2, [r3, #64]	; 0x40
    MOTOR_5 = motor[4] * MOTOR_WAY + MOTOR_CENTER;
 8002492:	4b28      	ldr	r3, [pc, #160]	; (8002534 <setmotor+0x200>)
 8002494:	edd3 7a04 	vldr	s15, [r3, #16]
 8002498:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800253c <setmotor+0x208>
 800249c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024a0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002540 <setmotor+0x20c>
 80024a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024a8:	4b27      	ldr	r3, [pc, #156]	; (8002548 <setmotor+0x214>)
 80024aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024ae:	ee17 2a90 	vmov	r2, s15
 80024b2:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_6 = motor[5] * MOTOR_WAY + MOTOR_CENTER;
 80024b4:	4b1f      	ldr	r3, [pc, #124]	; (8002534 <setmotor+0x200>)
 80024b6:	edd3 7a05 	vldr	s15, [r3, #20]
 80024ba:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800253c <setmotor+0x208>
 80024be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024c2:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002540 <setmotor+0x20c>
 80024c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024ca:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <setmotor+0x214>)
 80024cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024d0:	ee17 2a90 	vmov	r2, s15
 80024d4:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_7 = motor[6] * MOTOR_WAY + MOTOR_CENTER;
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <setmotor+0x200>)
 80024d8:	edd3 7a06 	vldr	s15, [r3, #24]
 80024dc:	ed9f 7a17 	vldr	s14, [pc, #92]	; 800253c <setmotor+0x208>
 80024e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024e4:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002540 <setmotor+0x20c>
 80024e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024ec:	4b16      	ldr	r3, [pc, #88]	; (8002548 <setmotor+0x214>)
 80024ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024f2:	ee17 2a90 	vmov	r2, s15
 80024f6:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_8 = motor[7] * MOTOR_WAY + MOTOR_CENTER;
 80024f8:	4b0e      	ldr	r3, [pc, #56]	; (8002534 <setmotor+0x200>)
 80024fa:	edd3 7a07 	vldr	s15, [r3, #28]
 80024fe:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800253c <setmotor+0x208>
 8002502:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002506:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002540 <setmotor+0x20c>
 800250a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800250e:	4b0e      	ldr	r3, [pc, #56]	; (8002548 <setmotor+0x214>)
 8002510:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002514:	ee17 2a90 	vmov	r2, s15
 8002518:	641a      	str	r2, [r3, #64]	; 0x40
}
 800251a:	bf00      	nop
 800251c:	3710      	adds	r7, #16
 800251e:	46bd      	mov	sp, r7
 8002520:	bd80      	pop	{r7, pc}
 8002522:	bf00      	nop
 8002524:	2000012c 	.word	0x2000012c
 8002528:	20000bcc 	.word	0x20000bcc
 800252c:	bf800000 	.word	0xbf800000
 8002530:	20000be4 	.word	0x20000be4
 8002534:	200012f8 	.word	0x200012f8
 8002538:	200000a8 	.word	0x200000a8
 800253c:	44480000 	.word	0x44480000
 8002540:	44bb8000 	.word	0x44bb8000
 8002544:	40000800 	.word	0x40000800
 8002548:	40010400 	.word	0x40010400

0800254c <OLED_Refresh_Gram>:
extern SPI_HandleTypeDef hspi1;

  
u8 OLED_GRAM[8][128];	   //内部定义了一块GRAM
void OLED_Refresh_Gram(void) //把32内部的GRAM刷新到OLED里面显示
{
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
	//u8 i,n;
	for(int i=0;i<8;i++)
 8002552:	2300      	movs	r3, #0
 8002554:	607b      	str	r3, [r7, #4]
 8002556:	e01b      	b.n	8002590 <OLED_Refresh_Gram+0x44>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	b2db      	uxtb	r3, r3
 800255c:	3b50      	subs	r3, #80	; 0x50
 800255e:	b2db      	uxtb	r3, r3
 8002560:	2100      	movs	r1, #0
 8002562:	4618      	mov	r0, r3
 8002564:	f000 f820 	bl	80025a8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002568:	2100      	movs	r1, #0
 800256a:	2000      	movs	r0, #0
 800256c:	f000 f81c 	bl	80025a8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 8002570:	2100      	movs	r1, #0
 8002572:	2010      	movs	r0, #16
 8002574:	f000 f818 	bl	80025a8 <OLED_WR_Byte>
		//OLED_RS_Set();
		HAL_SPI_Transmit(&hspi1, OLED_GRAM[i], 128, 10);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	01db      	lsls	r3, r3, #7
 800257c:	4a08      	ldr	r2, [pc, #32]	; (80025a0 <OLED_Refresh_Gram+0x54>)
 800257e:	1899      	adds	r1, r3, r2
 8002580:	230a      	movs	r3, #10
 8002582:	2280      	movs	r2, #128	; 0x80
 8002584:	4807      	ldr	r0, [pc, #28]	; (80025a4 <OLED_Refresh_Gram+0x58>)
 8002586:	f003 faa6 	bl	8005ad6 <HAL_SPI_Transmit>
	for(int i=0;i<8;i++)
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	3301      	adds	r3, #1
 800258e:	607b      	str	r3, [r7, #4]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2b07      	cmp	r3, #7
 8002594:	dde0      	ble.n	8002558 <OLED_Refresh_Gram+0xc>
		//for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
	}
}
 8002596:	bf00      	nop
 8002598:	bf00      	nop
 800259a:	3708      	adds	r7, #8
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	20001318 	.word	0x20001318
 80025a4:	2000116c 	.word	0x2000116c

080025a8 <OLED_WR_Byte>:
函数功能：向OLED写入一个字节
入口参数：dat:要写入的数据/命令  ，cmd:数据/命令标志 0,表示命令;1,表示数据;
返 回 值：无
**************************************************************************/
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 80025a8:	b580      	push	{r7, lr}
 80025aa:	b082      	sub	sp, #8
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	460a      	mov	r2, r1
 80025b2:	71fb      	strb	r3, [r7, #7]
 80025b4:	4613      	mov	r3, r2
 80025b6:	71bb      	strb	r3, [r7, #6]
	//u8 i;
	if(cmd)
 80025b8:	79bb      	ldrb	r3, [r7, #6]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d005      	beq.n	80025ca <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 80025be:	2201      	movs	r2, #1
 80025c0:	2180      	movs	r1, #128	; 0x80
 80025c2:	480c      	ldr	r0, [pc, #48]	; (80025f4 <OLED_WR_Byte+0x4c>)
 80025c4:	f002 fd3e 	bl	8005044 <HAL_GPIO_WritePin>
 80025c8:	e004      	b.n	80025d4 <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();
 80025ca:	2200      	movs	r2, #0
 80025cc:	2180      	movs	r1, #128	; 0x80
 80025ce:	4809      	ldr	r0, [pc, #36]	; (80025f4 <OLED_WR_Byte+0x4c>)
 80025d0:	f002 fd38 	bl	8005044 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 10);
 80025d4:	1df9      	adds	r1, r7, #7
 80025d6:	230a      	movs	r3, #10
 80025d8:	2201      	movs	r2, #1
 80025da:	4807      	ldr	r0, [pc, #28]	; (80025f8 <OLED_WR_Byte+0x50>)
 80025dc:	f003 fa7b 	bl	8005ad6 <HAL_SPI_Transmit>
		   OLED_SDIN_Clr();
		OLED_SCLK_Set();
		dat<<=1;   
	}				 		  
	*/
	OLED_RS_Set();   	  
 80025e0:	2201      	movs	r2, #1
 80025e2:	2180      	movs	r1, #128	; 0x80
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <OLED_WR_Byte+0x4c>)
 80025e6:	f002 fd2d 	bl	8005044 <HAL_GPIO_WritePin>
} 
 80025ea:	bf00      	nop
 80025ec:	3708      	adds	r7, #8
 80025ee:	46bd      	mov	sp, r7
 80025f0:	bd80      	pop	{r7, pc}
 80025f2:	bf00      	nop
 80025f4:	40020400 	.word	0x40020400
 80025f8:	2000116c 	.word	0x2000116c

080025fc <OLED_Clear>:
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}	
////////////////////////////////////////////////////////////////////////////////
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 80025fc:	b480      	push	{r7}
 80025fe:	b083      	sub	sp, #12
 8002600:	af00      	add	r7, sp, #0
	u8 i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[i][n]=0X00;
 8002602:	2300      	movs	r3, #0
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	e014      	b.n	8002632 <OLED_Clear+0x36>
 8002608:	2300      	movs	r3, #0
 800260a:	71bb      	strb	r3, [r7, #6]
 800260c:	e00a      	b.n	8002624 <OLED_Clear+0x28>
 800260e:	79fa      	ldrb	r2, [r7, #7]
 8002610:	79bb      	ldrb	r3, [r7, #6]
 8002612:	490d      	ldr	r1, [pc, #52]	; (8002648 <OLED_Clear+0x4c>)
 8002614:	01d2      	lsls	r2, r2, #7
 8002616:	440a      	add	r2, r1
 8002618:	4413      	add	r3, r2
 800261a:	2200      	movs	r2, #0
 800261c:	701a      	strb	r2, [r3, #0]
 800261e:	79bb      	ldrb	r3, [r7, #6]
 8002620:	3301      	adds	r3, #1
 8002622:	71bb      	strb	r3, [r7, #6]
 8002624:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002628:	2b00      	cmp	r3, #0
 800262a:	daf0      	bge.n	800260e <OLED_Clear+0x12>
 800262c:	79fb      	ldrb	r3, [r7, #7]
 800262e:	3301      	adds	r3, #1
 8002630:	71fb      	strb	r3, [r7, #7]
 8002632:	79fb      	ldrb	r3, [r7, #7]
 8002634:	2b07      	cmp	r3, #7
 8002636:	d9e7      	bls.n	8002608 <OLED_Clear+0xc>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
		//for(k=0;k<128;k++)OLED_WR_Byte(OLED_GRAM[j][k],OLED_DATA);
	}
	//OLED_Refresh_Gram();//更新显示
	 */
}
 8002638:	bf00      	nop
 800263a:	bf00      	nop
 800263c:	370c      	adds	r7, #12
 800263e:	46bd      	mov	sp, r7
 8002640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002644:	4770      	bx	lr
 8002646:	bf00      	nop
 8002648:	20001318 	.word	0x20001318

0800264c <OLED_DrawPoint>:
函数功能：在OLED中画点
入口参数：坐标:x：0~127，y:0~63  ，t:1 填充 0,清空		
返 回 值：无
**************************************************************************/
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	4603      	mov	r3, r0
 8002654:	71fb      	strb	r3, [r7, #7]
 8002656:	460b      	mov	r3, r1
 8002658:	71bb      	strb	r3, [r7, #6]
 800265a:	4613      	mov	r3, r2
 800265c:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 800265e:	2300      	movs	r3, #0
 8002660:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 8002662:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002666:	2b00      	cmp	r3, #0
 8002668:	db41      	blt.n	80026ee <OLED_DrawPoint+0xa2>
 800266a:	79bb      	ldrb	r3, [r7, #6]
 800266c:	2b3f      	cmp	r3, #63	; 0x3f
 800266e:	d83e      	bhi.n	80026ee <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002670:	79bb      	ldrb	r3, [r7, #6]
 8002672:	08db      	lsrs	r3, r3, #3
 8002674:	b2db      	uxtb	r3, r3
 8002676:	f1c3 0307 	rsb	r3, r3, #7
 800267a:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800267c:	79bb      	ldrb	r3, [r7, #6]
 800267e:	f003 0307 	and.w	r3, r3, #7
 8002682:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002684:	7b7b      	ldrb	r3, [r7, #13]
 8002686:	f1c3 0307 	rsb	r3, r3, #7
 800268a:	2201      	movs	r2, #1
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[pos][x]|=temp;
 8002692:	797b      	ldrb	r3, [r7, #5]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d012      	beq.n	80026be <OLED_DrawPoint+0x72>
 8002698:	7bba      	ldrb	r2, [r7, #14]
 800269a:	79fb      	ldrb	r3, [r7, #7]
 800269c:	4917      	ldr	r1, [pc, #92]	; (80026fc <OLED_DrawPoint+0xb0>)
 800269e:	01d2      	lsls	r2, r2, #7
 80026a0:	440a      	add	r2, r1
 80026a2:	4413      	add	r3, r2
 80026a4:	7818      	ldrb	r0, [r3, #0]
 80026a6:	7bba      	ldrb	r2, [r7, #14]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	7bf9      	ldrb	r1, [r7, #15]
 80026ac:	4301      	orrs	r1, r0
 80026ae:	b2c8      	uxtb	r0, r1
 80026b0:	4912      	ldr	r1, [pc, #72]	; (80026fc <OLED_DrawPoint+0xb0>)
 80026b2:	01d2      	lsls	r2, r2, #7
 80026b4:	440a      	add	r2, r1
 80026b6:	4413      	add	r3, r2
 80026b8:	4602      	mov	r2, r0
 80026ba:	701a      	strb	r2, [r3, #0]
 80026bc:	e018      	b.n	80026f0 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[pos][x]&=~temp;
 80026be:	7bba      	ldrb	r2, [r7, #14]
 80026c0:	79fb      	ldrb	r3, [r7, #7]
 80026c2:	490e      	ldr	r1, [pc, #56]	; (80026fc <OLED_DrawPoint+0xb0>)
 80026c4:	01d2      	lsls	r2, r2, #7
 80026c6:	440a      	add	r2, r1
 80026c8:	4413      	add	r3, r2
 80026ca:	781b      	ldrb	r3, [r3, #0]
 80026cc:	b25a      	sxtb	r2, r3
 80026ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026d2:	43db      	mvns	r3, r3
 80026d4:	b25b      	sxtb	r3, r3
 80026d6:	4013      	ands	r3, r2
 80026d8:	b259      	sxtb	r1, r3
 80026da:	7bba      	ldrb	r2, [r7, #14]
 80026dc:	79fb      	ldrb	r3, [r7, #7]
 80026de:	b2c8      	uxtb	r0, r1
 80026e0:	4906      	ldr	r1, [pc, #24]	; (80026fc <OLED_DrawPoint+0xb0>)
 80026e2:	01d2      	lsls	r2, r2, #7
 80026e4:	440a      	add	r2, r1
 80026e6:	4413      	add	r3, r2
 80026e8:	4602      	mov	r2, r0
 80026ea:	701a      	strb	r2, [r3, #0]
 80026ec:	e000      	b.n	80026f0 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 80026ee:	bf00      	nop
}
 80026f0:	3714      	adds	r7, #20
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	20001318 	.word	0x20001318

08002700 <OLED_ShowChar>:
函数功能：在指定的位置显示一个字符
入口参数：坐标:x：0~127，y:0~63 ，mode:0,反白显示;1,正常显示	，size:选择字体 12-16		
返 回 值：无
**************************************************************************/
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{      			    
 8002700:	b590      	push	{r4, r7, lr}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	4604      	mov	r4, r0
 8002708:	4608      	mov	r0, r1
 800270a:	4611      	mov	r1, r2
 800270c:	461a      	mov	r2, r3
 800270e:	4623      	mov	r3, r4
 8002710:	71fb      	strb	r3, [r7, #7]
 8002712:	4603      	mov	r3, r0
 8002714:	71bb      	strb	r3, [r7, #6]
 8002716:	460b      	mov	r3, r1
 8002718:	717b      	strb	r3, [r7, #5]
 800271a:	4613      	mov	r3, r2
 800271c:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 800271e:	79bb      	ldrb	r3, [r7, #6]
 8002720:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值				   
 8002722:	797b      	ldrb	r3, [r7, #5]
 8002724:	3b20      	subs	r3, #32
 8002726:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8002728:	2300      	movs	r3, #0
 800272a:	73bb      	strb	r3, [r7, #14]
 800272c:	e04d      	b.n	80027ca <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 800272e:	793b      	ldrb	r3, [r7, #4]
 8002730:	2b0c      	cmp	r3, #12
 8002732:	d10b      	bne.n	800274c <OLED_ShowChar+0x4c>
 8002734:	797a      	ldrb	r2, [r7, #5]
 8002736:	7bb9      	ldrb	r1, [r7, #14]
 8002738:	4828      	ldr	r0, [pc, #160]	; (80027dc <OLED_ShowChar+0xdc>)
 800273a:	4613      	mov	r3, r2
 800273c:	005b      	lsls	r3, r3, #1
 800273e:	4413      	add	r3, r2
 8002740:	009b      	lsls	r3, r3, #2
 8002742:	4403      	add	r3, r0
 8002744:	440b      	add	r3, r1
 8002746:	781b      	ldrb	r3, [r3, #0]
 8002748:	73fb      	strb	r3, [r7, #15]
 800274a:	e007      	b.n	800275c <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体 	                          
 800274c:	797a      	ldrb	r2, [r7, #5]
 800274e:	7bbb      	ldrb	r3, [r7, #14]
 8002750:	4923      	ldr	r1, [pc, #140]	; (80027e0 <OLED_ShowChar+0xe0>)
 8002752:	0112      	lsls	r2, r2, #4
 8002754:	440a      	add	r2, r1
 8002756:	4413      	add	r3, r2
 8002758:	781b      	ldrb	r3, [r3, #0]
 800275a:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800275c:	2300      	movs	r3, #0
 800275e:	737b      	strb	r3, [r7, #13]
 8002760:	e02d      	b.n	80027be <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8002762:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002766:	2b00      	cmp	r3, #0
 8002768:	da07      	bge.n	800277a <OLED_ShowChar+0x7a>
 800276a:	f897 2020 	ldrb.w	r2, [r7, #32]
 800276e:	79b9      	ldrb	r1, [r7, #6]
 8002770:	79fb      	ldrb	r3, [r7, #7]
 8002772:	4618      	mov	r0, r3
 8002774:	f7ff ff6a 	bl	800264c <OLED_DrawPoint>
 8002778:	e00c      	b.n	8002794 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800277a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	79b9      	ldrb	r1, [r7, #6]
 800278c:	79fb      	ldrb	r3, [r7, #7]
 800278e:	4618      	mov	r0, r3
 8002790:	f7ff ff5c 	bl	800264c <OLED_DrawPoint>
			temp<<=1;
 8002794:	7bfb      	ldrb	r3, [r7, #15]
 8002796:	005b      	lsls	r3, r3, #1
 8002798:	73fb      	strb	r3, [r7, #15]
			y++;
 800279a:	79bb      	ldrb	r3, [r7, #6]
 800279c:	3301      	adds	r3, #1
 800279e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80027a0:	79ba      	ldrb	r2, [r7, #6]
 80027a2:	7b3b      	ldrb	r3, [r7, #12]
 80027a4:	1ad2      	subs	r2, r2, r3
 80027a6:	793b      	ldrb	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	d105      	bne.n	80027b8 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80027ac:	7b3b      	ldrb	r3, [r7, #12]
 80027ae:	71bb      	strb	r3, [r7, #6]
				x++;
 80027b0:	79fb      	ldrb	r3, [r7, #7]
 80027b2:	3301      	adds	r3, #1
 80027b4:	71fb      	strb	r3, [r7, #7]
				break;
 80027b6:	e005      	b.n	80027c4 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80027b8:	7b7b      	ldrb	r3, [r7, #13]
 80027ba:	3301      	adds	r3, #1
 80027bc:	737b      	strb	r3, [r7, #13]
 80027be:	7b7b      	ldrb	r3, [r7, #13]
 80027c0:	2b07      	cmp	r3, #7
 80027c2:	d9ce      	bls.n	8002762 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80027c4:	7bbb      	ldrb	r3, [r7, #14]
 80027c6:	3301      	adds	r3, #1
 80027c8:	73bb      	strb	r3, [r7, #14]
 80027ca:	7bba      	ldrb	r2, [r7, #14]
 80027cc:	793b      	ldrb	r3, [r7, #4]
 80027ce:	429a      	cmp	r2, r3
 80027d0:	d3ad      	bcc.n	800272e <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80027d2:	bf00      	nop
 80027d4:	bf00      	nop
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd90      	pop	{r4, r7, pc}
 80027dc:	0800fc3c 	.word	0x0800fc3c
 80027e0:	080100b0 	.word	0x080100b0

080027e4 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 80027e4:	b480      	push	{r7}
 80027e6:	b085      	sub	sp, #20
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	4603      	mov	r3, r0
 80027ec:	460a      	mov	r2, r1
 80027ee:	71fb      	strb	r3, [r7, #7]
 80027f0:	4613      	mov	r3, r2
 80027f2:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 80027f4:	2301      	movs	r3, #1
 80027f6:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 80027f8:	e004      	b.n	8002804 <oled_pow+0x20>
 80027fa:	79fa      	ldrb	r2, [r7, #7]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	fb02 f303 	mul.w	r3, r2, r3
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	79bb      	ldrb	r3, [r7, #6]
 8002806:	1e5a      	subs	r2, r3, #1
 8002808:	71ba      	strb	r2, [r7, #6]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d1f5      	bne.n	80027fa <oled_pow+0x16>
	return result;
 800280e:	68fb      	ldr	r3, [r7, #12]
}	
 8002810:	4618      	mov	r0, r3
 8002812:	3714      	adds	r7, #20
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：坐标:x：0~127，y:0~63 ；num:数值(0~4294967295)；mode:0,填充模式 1,叠加模式； size:选择字体 12-16		
返 回 值：无
**************************************************************************/  
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 800281c:	b590      	push	{r4, r7, lr}
 800281e:	b087      	sub	sp, #28
 8002820:	af02      	add	r7, sp, #8
 8002822:	603a      	str	r2, [r7, #0]
 8002824:	461a      	mov	r2, r3
 8002826:	4603      	mov	r3, r0
 8002828:	71fb      	strb	r3, [r7, #7]
 800282a:	460b      	mov	r3, r1
 800282c:	71bb      	strb	r3, [r7, #6]
 800282e:	4613      	mov	r3, r2
 8002830:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 8002832:	2300      	movs	r3, #0
 8002834:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8002836:	2300      	movs	r3, #0
 8002838:	73fb      	strb	r3, [r7, #15]
 800283a:	e051      	b.n	80028e0 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 800283c:	797a      	ldrb	r2, [r7, #5]
 800283e:	7bfb      	ldrb	r3, [r7, #15]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	3b01      	subs	r3, #1
 8002846:	b2db      	uxtb	r3, r3
 8002848:	4619      	mov	r1, r3
 800284a:	200a      	movs	r0, #10
 800284c:	f7ff ffca 	bl	80027e4 <oled_pow>
 8002850:	4602      	mov	r2, r0
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	fbb3 f1f2 	udiv	r1, r3, r2
 8002858:	4b26      	ldr	r3, [pc, #152]	; (80028f4 <OLED_ShowNumber+0xd8>)
 800285a:	fba3 2301 	umull	r2, r3, r3, r1
 800285e:	08da      	lsrs	r2, r3, #3
 8002860:	4613      	mov	r3, r2
 8002862:	009b      	lsls	r3, r3, #2
 8002864:	4413      	add	r3, r2
 8002866:	005b      	lsls	r3, r3, #1
 8002868:	1aca      	subs	r2, r1, r3
 800286a:	4613      	mov	r3, r2
 800286c:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800286e:	7bbb      	ldrb	r3, [r7, #14]
 8002870:	2b00      	cmp	r3, #0
 8002872:	d11d      	bne.n	80028b0 <OLED_ShowNumber+0x94>
 8002874:	7bfa      	ldrb	r2, [r7, #15]
 8002876:	797b      	ldrb	r3, [r7, #5]
 8002878:	3b01      	subs	r3, #1
 800287a:	429a      	cmp	r2, r3
 800287c:	da18      	bge.n	80028b0 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 800287e:	7b7b      	ldrb	r3, [r7, #13]
 8002880:	2b00      	cmp	r3, #0
 8002882:	d113      	bne.n	80028ac <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8002884:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	fb12 f303 	smulbb	r3, r2, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4413      	add	r3, r2
 8002898:	b2d8      	uxtb	r0, r3
 800289a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800289e:	79b9      	ldrb	r1, [r7, #6]
 80028a0:	2201      	movs	r2, #1
 80028a2:	9200      	str	r2, [sp, #0]
 80028a4:	2220      	movs	r2, #32
 80028a6:	f7ff ff2b 	bl	8002700 <OLED_ShowChar>
				continue;
 80028aa:	e016      	b.n	80028da <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 80028ac:	2301      	movs	r3, #1
 80028ae:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 80028b0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028b4:	085b      	lsrs	r3, r3, #1
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	7bfa      	ldrb	r2, [r7, #15]
 80028ba:	fb12 f303 	smulbb	r3, r2, r3
 80028be:	b2da      	uxtb	r2, r3
 80028c0:	79fb      	ldrb	r3, [r7, #7]
 80028c2:	4413      	add	r3, r2
 80028c4:	b2d8      	uxtb	r0, r3
 80028c6:	7b7b      	ldrb	r3, [r7, #13]
 80028c8:	3330      	adds	r3, #48	; 0x30
 80028ca:	b2da      	uxtb	r2, r3
 80028cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028d0:	79b9      	ldrb	r1, [r7, #6]
 80028d2:	2401      	movs	r4, #1
 80028d4:	9400      	str	r4, [sp, #0]
 80028d6:	f7ff ff13 	bl	8002700 <OLED_ShowChar>
	for(t=0;t<len;t++)
 80028da:	7bfb      	ldrb	r3, [r7, #15]
 80028dc:	3301      	adds	r3, #1
 80028de:	73fb      	strb	r3, [r7, #15]
 80028e0:	7bfa      	ldrb	r2, [r7, #15]
 80028e2:	797b      	ldrb	r3, [r7, #5]
 80028e4:	429a      	cmp	r2, r3
 80028e6:	d3a9      	bcc.n	800283c <OLED_ShowNumber+0x20>
	}
} 
 80028e8:	bf00      	nop
 80028ea:	bf00      	nop
 80028ec:	3714      	adds	r7, #20
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd90      	pop	{r4, r7, pc}
 80028f2:	bf00      	nop
 80028f4:	cccccccd 	.word	0xcccccccd

080028f8 <OLED_ShowString>:
函数功能：显示字符串
入口参数：坐标:x：0~127，y:0~63 ；*p:字符串起始地址；
返 回 值：无
**************************************************************************/  
void OLED_ShowString(u8 x,u8 y,const char *p)
{
 80028f8:	b580      	push	{r7, lr}
 80028fa:	b084      	sub	sp, #16
 80028fc:	af02      	add	r7, sp, #8
 80028fe:	4603      	mov	r3, r0
 8002900:	603a      	str	r2, [r7, #0]
 8002902:	71fb      	strb	r3, [r7, #7]
 8002904:	460b      	mov	r3, r1
 8002906:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8002908:	e01f      	b.n	800294a <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	2b7a      	cmp	r3, #122	; 0x7a
 800290e:	d904      	bls.n	800291a <OLED_ShowString+0x22>
 8002910:	2300      	movs	r3, #0
 8002912:	71fb      	strb	r3, [r7, #7]
 8002914:	79bb      	ldrb	r3, [r7, #6]
 8002916:	3310      	adds	r3, #16
 8002918:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800291a:	79bb      	ldrb	r3, [r7, #6]
 800291c:	2b3a      	cmp	r3, #58	; 0x3a
 800291e:	d905      	bls.n	800292c <OLED_ShowString+0x34>
 8002920:	2300      	movs	r3, #0
 8002922:	71fb      	strb	r3, [r7, #7]
 8002924:	79fb      	ldrb	r3, [r7, #7]
 8002926:	71bb      	strb	r3, [r7, #6]
 8002928:	f7ff fe68 	bl	80025fc <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	781a      	ldrb	r2, [r3, #0]
 8002930:	79b9      	ldrb	r1, [r7, #6]
 8002932:	79f8      	ldrb	r0, [r7, #7]
 8002934:	2301      	movs	r3, #1
 8002936:	9300      	str	r3, [sp, #0]
 8002938:	230c      	movs	r3, #12
 800293a:	f7ff fee1 	bl	8002700 <OLED_ShowChar>
        x+=8;
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	3308      	adds	r3, #8
 8002942:	71fb      	strb	r3, [r7, #7]
        p++;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	3301      	adds	r3, #1
 8002948:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	781b      	ldrb	r3, [r3, #0]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d1db      	bne.n	800290a <OLED_ShowString+0x12>
    }  
}	
 8002952:	bf00      	nop
 8002954:	bf00      	nop
 8002956:	3708      	adds	r7, #8
 8002958:	46bd      	mov	sp, r7
 800295a:	bd80      	pop	{r7, pc}

0800295c <OLED_Init>:
函数功能：初始化OLED
入口参数：无
返 回 值：无
**************************************************************************/ 
void OLED_Init(void)
{ 	 	 
 800295c:	b580      	push	{r7, lr}
 800295e:	b082      	sub	sp, #8
 8002960:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 8002962:	2200      	movs	r2, #0
 8002964:	2140      	movs	r1, #64	; 0x40
 8002966:	4851      	ldr	r0, [pc, #324]	; (8002aac <OLED_Init+0x150>)
 8002968:	f002 fb6c 	bl	8005044 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800296c:	2001      	movs	r0, #1
 800296e:	f001 fa57 	bl	8003e20 <HAL_Delay>
	OLED_RST_Set();   //OLED复位
 8002972:	2201      	movs	r2, #1
 8002974:	2140      	movs	r1, #64	; 0x40
 8002976:	484d      	ldr	r0, [pc, #308]	; (8002aac <OLED_Init+0x150>)
 8002978:	f002 fb64 	bl	8005044 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 800297c:	2100      	movs	r1, #0
 800297e:	20ae      	movs	r0, #174	; 0xae
 8002980:	f7ff fe12 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8002984:	2100      	movs	r1, #0
 8002986:	20d5      	movs	r0, #213	; 0xd5
 8002988:	f7ff fe0e 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 800298c:	2100      	movs	r1, #0
 800298e:	2050      	movs	r0, #80	; 0x50
 8002990:	f7ff fe0a 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8002994:	2100      	movs	r1, #0
 8002996:	20a8      	movs	r0, #168	; 0xa8
 8002998:	f7ff fe06 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
 800299c:	2100      	movs	r1, #0
 800299e:	203f      	movs	r0, #63	; 0x3f
 80029a0:	f7ff fe02 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 80029a4:	2100      	movs	r1, #0
 80029a6:	20d3      	movs	r0, #211	; 0xd3
 80029a8:	f7ff fdfe 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 80029ac:	2100      	movs	r1, #0
 80029ae:	2000      	movs	r0, #0
 80029b0:	f7ff fdfa 	bl	80025a8 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 80029b4:	2100      	movs	r1, #0
 80029b6:	2040      	movs	r0, #64	; 0x40
 80029b8:	f7ff fdf6 	bl	80025a8 <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 80029bc:	2100      	movs	r1, #0
 80029be:	208d      	movs	r0, #141	; 0x8d
 80029c0:	f7ff fdf2 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 80029c4:	2100      	movs	r1, #0
 80029c6:	2014      	movs	r0, #20
 80029c8:	f7ff fdee 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 80029cc:	2100      	movs	r1, #0
 80029ce:	2020      	movs	r0, #32
 80029d0:	f7ff fdea 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 80029d4:	2100      	movs	r1, #0
 80029d6:	2002      	movs	r0, #2
 80029d8:	f7ff fde6 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 80029dc:	2100      	movs	r1, #0
 80029de:	20a1      	movs	r0, #161	; 0xa1
 80029e0:	f7ff fde2 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 80029e4:	2100      	movs	r1, #0
 80029e6:	20c0      	movs	r0, #192	; 0xc0
 80029e8:	f7ff fdde 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 80029ec:	2100      	movs	r1, #0
 80029ee:	20da      	movs	r0, #218	; 0xda
 80029f0:	f7ff fdda 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 80029f4:	2100      	movs	r1, #0
 80029f6:	2012      	movs	r0, #18
 80029f8:	f7ff fdd6 	bl	80025a8 <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 80029fc:	2100      	movs	r1, #0
 80029fe:	2081      	movs	r0, #129	; 0x81
 8002a00:	f7ff fdd2 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 8002a04:	2100      	movs	r1, #0
 8002a06:	20ef      	movs	r0, #239	; 0xef
 8002a08:	f7ff fdce 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	20d9      	movs	r0, #217	; 0xd9
 8002a10:	f7ff fdca 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8002a14:	2100      	movs	r1, #0
 8002a16:	20f1      	movs	r0, #241	; 0xf1
 8002a18:	f7ff fdc6 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 8002a1c:	2100      	movs	r1, #0
 8002a1e:	20db      	movs	r0, #219	; 0xdb
 8002a20:	f7ff fdc2 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8002a24:	2100      	movs	r1, #0
 8002a26:	2030      	movs	r0, #48	; 0x30
 8002a28:	f7ff fdbe 	bl	80025a8 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 8002a2c:	2100      	movs	r1, #0
 8002a2e:	20a4      	movs	r0, #164	; 0xa4
 8002a30:	f7ff fdba 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
 8002a34:	2100      	movs	r1, #0
 8002a36:	20a6      	movs	r0, #166	; 0xa6
 8002a38:	f7ff fdb6 	bl	80025a8 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
 8002a3c:	2100      	movs	r1, #0
 8002a3e:	20af      	movs	r0, #175	; 0xaf
 8002a40:	f7ff fdb2 	bl	80025a8 <OLED_WR_Byte>
	OLED_Clear();                //清屏
 8002a44:	f7ff fdda 	bl	80025fc <OLED_Clear>
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8002a48:	2300      	movs	r3, #0
 8002a4a:	71fb      	strb	r3, [r7, #7]
 8002a4c:	e026      	b.n	8002a9c <OLED_Init+0x140>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	3b50      	subs	r3, #80	; 0x50
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fda6 	bl	80025a8 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002a5c:	2100      	movs	r1, #0
 8002a5e:	2000      	movs	r0, #0
 8002a60:	f7ff fda2 	bl	80025a8 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8002a64:	2100      	movs	r1, #0
 8002a66:	2010      	movs	r0, #16
 8002a68:	f7ff fd9e 	bl	80025a8 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[i][n],OLED_DATA);
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	71bb      	strb	r3, [r7, #6]
 8002a70:	e00d      	b.n	8002a8e <OLED_Init+0x132>
 8002a72:	79fa      	ldrb	r2, [r7, #7]
 8002a74:	79bb      	ldrb	r3, [r7, #6]
 8002a76:	490e      	ldr	r1, [pc, #56]	; (8002ab0 <OLED_Init+0x154>)
 8002a78:	01d2      	lsls	r2, r2, #7
 8002a7a:	440a      	add	r2, r1
 8002a7c:	4413      	add	r3, r2
 8002a7e:	781b      	ldrb	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7ff fd90 	bl	80025a8 <OLED_WR_Byte>
 8002a88:	79bb      	ldrb	r3, [r7, #6]
 8002a8a:	3301      	adds	r3, #1
 8002a8c:	71bb      	strb	r3, [r7, #6]
 8002a8e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	daed      	bge.n	8002a72 <OLED_Init+0x116>
	for(i=0;i<8;i++)  
 8002a96:	79fb      	ldrb	r3, [r7, #7]
 8002a98:	3301      	adds	r3, #1
 8002a9a:	71fb      	strb	r3, [r7, #7]
 8002a9c:	79fb      	ldrb	r3, [r7, #7]
 8002a9e:	2b07      	cmp	r3, #7
 8002aa0:	d9d5      	bls.n	8002a4e <OLED_Init+0xf2>
	}   
}  
 8002aa2:	bf00      	nop
 8002aa4:	bf00      	nop
 8002aa6:	3708      	adds	r7, #8
 8002aa8:	46bd      	mov	sp, r7
 8002aaa:	bd80      	pop	{r7, pc}
 8002aac:	40020400 	.word	0x40020400
 8002ab0:	20001318 	.word	0x20001318

08002ab4 <raspiInit>:
//0x5a 0xa5 Yaw Factor Throttle Factor Forward Factor Lateral Factor LED lock



void raspiInit(UART_HandleTypeDef *huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	68da      	ldr	r2, [r3, #12]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f042 0210 	orr.w	r2, r2, #16
 8002aca:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 8002acc:	220c      	movs	r2, #12
 8002ace:	4904      	ldr	r1, [pc, #16]	; (8002ae0 <raspiInit+0x2c>)
 8002ad0:	6878      	ldr	r0, [r7, #4]
 8002ad2:	f004 fc0f 	bl	80072f4 <HAL_UART_Receive_DMA>
}
 8002ad6:	bf00      	nop
 8002ad8:	3708      	adds	r7, #8
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	20000be8 	.word	0x20000be8
 8002ae4:	00000000 	.word	0x00000000

08002ae8 <raspiUpdate>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void raspiUpdate()
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b082      	sub	sp, #8
 8002aec:	af00      	add	r7, sp, #0
	short * date = (short *)(raspiBuffer + 2);
 8002aee:	4b30      	ldr	r3, [pc, #192]	; (8002bb0 <raspiUpdate+0xc8>)
 8002af0:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++)
 8002af2:	2300      	movs	r3, #0
 8002af4:	607b      	str	r3, [r7, #4]
 8002af6:	e01c      	b.n	8002b32 <raspiUpdate+0x4a>
		raspich_float[i]=1.0*date[i]/0x7fff;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	005b      	lsls	r3, r3, #1
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	4413      	add	r3, r2
 8002b00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b04:	4618      	mov	r0, r3
 8002b06:	f7fd fd0d 	bl	8000524 <__aeabi_i2d>
 8002b0a:	a327      	add	r3, pc, #156	; (adr r3, 8002ba8 <raspiUpdate+0xc0>)
 8002b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b10:	f7fd fe9c 	bl	800084c <__aeabi_ddiv>
 8002b14:	4602      	mov	r2, r0
 8002b16:	460b      	mov	r3, r1
 8002b18:	4610      	mov	r0, r2
 8002b1a:	4619      	mov	r1, r3
 8002b1c:	f7fe f864 	bl	8000be8 <__aeabi_d2f>
 8002b20:	4602      	mov	r2, r0
 8002b22:	4924      	ldr	r1, [pc, #144]	; (8002bb4 <raspiUpdate+0xcc>)
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	440b      	add	r3, r1
 8002b2a:	601a      	str	r2, [r3, #0]
	for(int i=0;i<4;i++)
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	3301      	adds	r3, #1
 8002b30:	607b      	str	r3, [r7, #4]
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2b03      	cmp	r3, #3
 8002b36:	dddf      	ble.n	8002af8 <raspiUpdate+0x10>

    target_ver[2] = yaw + raspich_float[0]*180;
 8002b38:	4b1e      	ldr	r3, [pc, #120]	; (8002bb4 <raspiUpdate+0xcc>)
 8002b3a:	edd3 7a00 	vldr	s15, [r3]
 8002b3e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002bb8 <raspiUpdate+0xd0>
 8002b42:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b46:	4b1d      	ldr	r3, [pc, #116]	; (8002bbc <raspiUpdate+0xd4>)
 8002b48:	edd3 7a00 	vldr	s15, [r3]
 8002b4c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b50:	4b1b      	ldr	r3, [pc, #108]	; (8002bc0 <raspiUpdate+0xd8>)
 8002b52:	edc3 7a02 	vstr	s15, [r3, #8]
    target_ver[3] = raspich_float[1];
 8002b56:	4b17      	ldr	r3, [pc, #92]	; (8002bb4 <raspiUpdate+0xcc>)
 8002b58:	685b      	ldr	r3, [r3, #4]
 8002b5a:	4a19      	ldr	r2, [pc, #100]	; (8002bc0 <raspiUpdate+0xd8>)
 8002b5c:	60d3      	str	r3, [r2, #12]
    target_ver[4] = raspich_float[2];
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <raspiUpdate+0xcc>)
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	4a17      	ldr	r2, [pc, #92]	; (8002bc0 <raspiUpdate+0xd8>)
 8002b64:	6113      	str	r3, [r2, #16]
    target_ver[5] = raspich_float[3];
 8002b66:	4b13      	ldr	r3, [pc, #76]	; (8002bb4 <raspiUpdate+0xcc>)
 8002b68:	68db      	ldr	r3, [r3, #12]
 8002b6a:	4a15      	ldr	r2, [pc, #84]	; (8002bc0 <raspiUpdate+0xd8>)
 8002b6c:	6153      	str	r3, [r2, #20]
    if(raspiBuffer[10]==0)
 8002b6e:	4b15      	ldr	r3, [pc, #84]	; (8002bc4 <raspiUpdate+0xdc>)
 8002b70:	7a9b      	ldrb	r3, [r3, #10]
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d106      	bne.n	8002b84 <raspiUpdate+0x9c>
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002b76:	2201      	movs	r2, #1
 8002b78:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b7c:	4812      	ldr	r0, [pc, #72]	; (8002bc8 <raspiUpdate+0xe0>)
 8002b7e:	f002 fa61 	bl	8005044 <HAL_GPIO_WritePin>
 8002b82:	e005      	b.n	8002b90 <raspiUpdate+0xa8>
    else
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002b84:	2200      	movs	r2, #0
 8002b86:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b8a:	480f      	ldr	r0, [pc, #60]	; (8002bc8 <raspiUpdate+0xe0>)
 8002b8c:	f002 fa5a 	bl	8005044 <HAL_GPIO_WritePin>
    lock=raspiBuffer[11];
 8002b90:	4b0c      	ldr	r3, [pc, #48]	; (8002bc4 <raspiUpdate+0xdc>)
 8002b92:	7adb      	ldrb	r3, [r3, #11]
 8002b94:	461a      	mov	r2, r3
 8002b96:	4b0d      	ldr	r3, [pc, #52]	; (8002bcc <raspiUpdate+0xe4>)
 8002b98:	601a      	str	r2, [r3, #0]

}
 8002b9a:	bf00      	nop
 8002b9c:	3708      	adds	r7, #8
 8002b9e:	46bd      	mov	sp, r7
 8002ba0:	bd80      	pop	{r7, pc}
 8002ba2:	bf00      	nop
 8002ba4:	f3af 8000 	nop.w
 8002ba8:	00000000 	.word	0x00000000
 8002bac:	40dfffc0 	.word	0x40dfffc0
 8002bb0:	20000bea 	.word	0x20000bea
 8002bb4:	20000c08 	.word	0x20000c08
 8002bb8:	43340000 	.word	0x43340000
 8002bbc:	20000d04 	.word	0x20000d04
 8002bc0:	20000c90 	.word	0x20000c90
 8002bc4:	20000be8 	.word	0x20000be8
 8002bc8:	40020c00 	.word	0x40020c00
 8002bcc:	20000be4 	.word	0x20000be4

08002bd0 <raspierr>:
void raspierr(UART_HandleTypeDef *huart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f004 fbbb 	bl	8007354 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 8002bde:	220c      	movs	r2, #12
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <raspierr+0x20>)
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f004 fb86 	bl	80072f4 <HAL_UART_Receive_DMA>
}
 8002be8:	bf00      	nop
 8002bea:	3708      	adds	r7, #8
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	20000be8 	.word	0x20000be8

08002bf4 <remoteInit>:
float conf=0;
float val=0;
extern UART_HandleTypeDef huart5;
extern UART_HandleTypeDef huart1;
void remoteInit(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
    if(&huart1==huart)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	4a0f      	ldr	r2, [pc, #60]	; (8002c3c <remoteInit+0x48>)
 8002c00:	4293      	cmp	r3, r2
 8002c02:	d106      	bne.n	8002c12 <remoteInit+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 8002c04:	4b0e      	ldr	r3, [pc, #56]	; (8002c40 <remoteInit+0x4c>)
 8002c06:	2219      	movs	r2, #25
 8002c08:	4619      	mov	r1, r3
 8002c0a:	6878      	ldr	r0, [r7, #4]
 8002c0c:	f004 fb72 	bl	80072f4 <HAL_UART_Receive_DMA>
 8002c10:	e008      	b.n	8002c24 <remoteInit+0x30>
	}else if(&huart5==huart)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4a0b      	ldr	r2, [pc, #44]	; (8002c44 <remoteInit+0x50>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d104      	bne.n	8002c24 <remoteInit+0x30>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002c1a:	2219      	movs	r2, #25
 8002c1c:	490a      	ldr	r1, [pc, #40]	; (8002c48 <remoteInit+0x54>)
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f004 fb68 	bl	80072f4 <HAL_UART_Receive_DMA>
	}
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f042 0210 	orr.w	r2, r2, #16
 8002c32:	60da      	str	r2, [r3, #12]
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	2000109c 	.word	0x2000109c
 8002c40:	20000c28 	.word	0x20000c28
 8002c44:	20000fb0 	.word	0x20000fb0
 8002c48:	20000c18 	.word	0x20000c18

08002c4c <remoteUpdate>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void remoteUpdate(uint8_t * remoteBuffer)
{
 8002c4c:	b490      	push	{r4, r7}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
	float *dat = (float*)(remoteBuffer+4);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	3304      	adds	r3, #4
 8002c58:	617b      	str	r3, [r7, #20]
	if(remoteBuffer[3]==0x00)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	3303      	adds	r3, #3
 8002c5e:	781b      	ldrb	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d108      	bne.n	8002c76 <remoteUpdate+0x2a>
	{
		ch_float[4]=dat[1];
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	4a66      	ldr	r2, [pc, #408]	; (8002e04 <remoteUpdate+0x1b8>)
 8002c6a:	6113      	str	r3, [r2, #16]
		ch_float[5]=dat[0];
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a64      	ldr	r2, [pc, #400]	; (8002e04 <remoteUpdate+0x1b8>)
 8002c72:	6153      	str	r3, [r2, #20]
 8002c74:	e08a      	b.n	8002d8c <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x01)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3303      	adds	r3, #3
 8002c7a:	781b      	ldrb	r3, [r3, #0]
 8002c7c:	2b01      	cmp	r3, #1
 8002c7e:	d108      	bne.n	8002c92 <remoteUpdate+0x46>
	{
		ch_float[0]=dat[0];
 8002c80:	697b      	ldr	r3, [r7, #20]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5f      	ldr	r2, [pc, #380]	; (8002e04 <remoteUpdate+0x1b8>)
 8002c86:	6013      	str	r3, [r2, #0]
		ch_float[1]=dat[1];
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	4a5d      	ldr	r2, [pc, #372]	; (8002e04 <remoteUpdate+0x1b8>)
 8002c8e:	6053      	str	r3, [r2, #4]
 8002c90:	e07c      	b.n	8002d8c <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x02)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	3303      	adds	r3, #3
 8002c96:	781b      	ldrb	r3, [r3, #0]
 8002c98:	2b02      	cmp	r3, #2
 8002c9a:	d106      	bne.n	8002caa <remoteUpdate+0x5e>
	{
		lock = remoteBuffer[7];
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	3307      	adds	r3, #7
 8002ca0:	781b      	ldrb	r3, [r3, #0]
 8002ca2:	461a      	mov	r2, r3
 8002ca4:	4b58      	ldr	r3, [pc, #352]	; (8002e08 <remoteUpdate+0x1bc>)
 8002ca6:	601a      	str	r2, [r3, #0]
 8002ca8:	e070      	b.n	8002d8c <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x03)//通道选择
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	3303      	adds	r3, #3
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b03      	cmp	r3, #3
 8002cb2:	d12e      	bne.n	8002d12 <remoteUpdate+0xc6>
	{
		conf=dat[0];
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a54      	ldr	r2, [pc, #336]	; (8002e0c <remoteUpdate+0x1c0>)
 8002cba:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <remoteUpdate+0x1c0>)
 8002cbe:	edd3 7a00 	vldr	s15, [r3]
 8002cc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cc6:	ee17 3a90 	vmov	r3, s15
 8002cca:	60fb      	str	r3, [r7, #12]
		val=pid_ver[i_conf/3][i_conf%3];
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	4a50      	ldr	r2, [pc, #320]	; (8002e10 <remoteUpdate+0x1c4>)
 8002cd0:	fb82 1203 	smull	r1, r2, r2, r3
 8002cd4:	17db      	asrs	r3, r3, #31
 8002cd6:	1ad0      	subs	r0, r2, r3
 8002cd8:	68f9      	ldr	r1, [r7, #12]
 8002cda:	4b4d      	ldr	r3, [pc, #308]	; (8002e10 <remoteUpdate+0x1c4>)
 8002cdc:	fb83 3201 	smull	r3, r2, r3, r1
 8002ce0:	17cb      	asrs	r3, r1, #31
 8002ce2:	1ad2      	subs	r2, r2, r3
 8002ce4:	4613      	mov	r3, r2
 8002ce6:	005b      	lsls	r3, r3, #1
 8002ce8:	4413      	add	r3, r2
 8002cea:	1aca      	subs	r2, r1, r3
 8002cec:	4949      	ldr	r1, [pc, #292]	; (8002e14 <remoteUpdate+0x1c8>)
 8002cee:	4603      	mov	r3, r0
 8002cf0:	00db      	lsls	r3, r3, #3
 8002cf2:	1a1b      	subs	r3, r3, r0
 8002cf4:	4413      	add	r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a46      	ldr	r2, [pc, #280]	; (8002e18 <remoteUpdate+0x1cc>)
 8002cfe:	6013      	str	r3, [r2, #0]
		frame.fdata[24]=conf;
 8002d00:	4b42      	ldr	r3, [pc, #264]	; (8002e0c <remoteUpdate+0x1c0>)
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	4a45      	ldr	r2, [pc, #276]	; (8002e1c <remoteUpdate+0x1d0>)
 8002d06:	6613      	str	r3, [r2, #96]	; 0x60
		frame.fdata[25]=val;
 8002d08:	4b43      	ldr	r3, [pc, #268]	; (8002e18 <remoteUpdate+0x1cc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a43      	ldr	r2, [pc, #268]	; (8002e1c <remoteUpdate+0x1d0>)
 8002d0e:	6653      	str	r3, [r2, #100]	; 0x64
 8002d10:	e03c      	b.n	8002d8c <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x04)//通道值
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	3303      	adds	r3, #3
 8002d16:	781b      	ldrb	r3, [r3, #0]
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d12a      	bne.n	8002d72 <remoteUpdate+0x126>
	{
		val=dat[0];
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4a3d      	ldr	r2, [pc, #244]	; (8002e18 <remoteUpdate+0x1cc>)
 8002d22:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8002d24:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <remoteUpdate+0x1c0>)
 8002d26:	edd3 7a00 	vldr	s15, [r3]
 8002d2a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d2e:	ee17 3a90 	vmov	r3, s15
 8002d32:	613b      	str	r3, [r7, #16]
		pid_ver[i_conf/3][i_conf%3]=val;
 8002d34:	693b      	ldr	r3, [r7, #16]
 8002d36:	4a36      	ldr	r2, [pc, #216]	; (8002e10 <remoteUpdate+0x1c4>)
 8002d38:	fb82 1203 	smull	r1, r2, r2, r3
 8002d3c:	17db      	asrs	r3, r3, #31
 8002d3e:	1ad0      	subs	r0, r2, r3
 8002d40:	6939      	ldr	r1, [r7, #16]
 8002d42:	4b33      	ldr	r3, [pc, #204]	; (8002e10 <remoteUpdate+0x1c4>)
 8002d44:	fb83 3201 	smull	r3, r2, r3, r1
 8002d48:	17cb      	asrs	r3, r1, #31
 8002d4a:	1ad2      	subs	r2, r2, r3
 8002d4c:	4613      	mov	r3, r2
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	4413      	add	r3, r2
 8002d52:	1aca      	subs	r2, r1, r3
 8002d54:	4b30      	ldr	r3, [pc, #192]	; (8002e18 <remoteUpdate+0x1cc>)
 8002d56:	6819      	ldr	r1, [r3, #0]
 8002d58:	4c2e      	ldr	r4, [pc, #184]	; (8002e14 <remoteUpdate+0x1c8>)
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	1a1b      	subs	r3, r3, r0
 8002d60:	4413      	add	r3, r2
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	4423      	add	r3, r4
 8002d66:	6019      	str	r1, [r3, #0]
		frame.fdata[25]=val;
 8002d68:	4b2b      	ldr	r3, [pc, #172]	; (8002e18 <remoteUpdate+0x1cc>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	4a2b      	ldr	r2, [pc, #172]	; (8002e1c <remoteUpdate+0x1d0>)
 8002d6e:	6653      	str	r3, [r2, #100]	; 0x64
 8002d70:	e00c      	b.n	8002d8c <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x05)
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	3303      	adds	r3, #3
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	2b05      	cmp	r3, #5
 8002d7a:	d107      	bne.n	8002d8c <remoteUpdate+0x140>
	{
		ch_float[2]=dat[0];
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4a20      	ldr	r2, [pc, #128]	; (8002e04 <remoteUpdate+0x1b8>)
 8002d82:	6093      	str	r3, [r2, #8]
		ch_float[3]=dat[1];
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	4a1e      	ldr	r2, [pc, #120]	; (8002e04 <remoteUpdate+0x1b8>)
 8002d8a:	60d3      	str	r3, [r2, #12]
	}
    target_ver[0] = ch_float[0]*30;
 8002d8c:	4b1d      	ldr	r3, [pc, #116]	; (8002e04 <remoteUpdate+0x1b8>)
 8002d8e:	edd3 7a00 	vldr	s15, [r3]
 8002d92:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d96:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d9a:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <remoteUpdate+0x1d4>)
 8002d9c:	edc3 7a00 	vstr	s15, [r3]
    target_ver[1] = ch_float[1]*30;
 8002da0:	4b18      	ldr	r3, [pc, #96]	; (8002e04 <remoteUpdate+0x1b8>)
 8002da2:	edd3 7a01 	vldr	s15, [r3, #4]
 8002da6:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002daa:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002dae:	4b1c      	ldr	r3, [pc, #112]	; (8002e20 <remoteUpdate+0x1d4>)
 8002db0:	edc3 7a01 	vstr	s15, [r3, #4]
    target_ver[2] -= ch_float[2];
 8002db4:	4b1a      	ldr	r3, [pc, #104]	; (8002e20 <remoteUpdate+0x1d4>)
 8002db6:	ed93 7a02 	vldr	s14, [r3, #8]
 8002dba:	4b12      	ldr	r3, [pc, #72]	; (8002e04 <remoteUpdate+0x1b8>)
 8002dbc:	edd3 7a02 	vldr	s15, [r3, #8]
 8002dc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dc4:	4b16      	ldr	r3, [pc, #88]	; (8002e20 <remoteUpdate+0x1d4>)
 8002dc6:	edc3 7a02 	vstr	s15, [r3, #8]
    target_ver[3] = ch_float[3];
 8002dca:	4b0e      	ldr	r3, [pc, #56]	; (8002e04 <remoteUpdate+0x1b8>)
 8002dcc:	68db      	ldr	r3, [r3, #12]
 8002dce:	4a14      	ldr	r2, [pc, #80]	; (8002e20 <remoteUpdate+0x1d4>)
 8002dd0:	60d3      	str	r3, [r2, #12]
    target_ver[4] = ch_float[4];
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <remoteUpdate+0x1b8>)
 8002dd4:	691b      	ldr	r3, [r3, #16]
 8002dd6:	4a12      	ldr	r2, [pc, #72]	; (8002e20 <remoteUpdate+0x1d4>)
 8002dd8:	6113      	str	r3, [r2, #16]
    target_ver[5] = ch_float[5];
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <remoteUpdate+0x1b8>)
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	4a10      	ldr	r2, [pc, #64]	; (8002e20 <remoteUpdate+0x1d4>)
 8002de0:	6153      	str	r3, [r2, #20]

    frame.fdata[29]=target_ver[0];
 8002de2:	4b0f      	ldr	r3, [pc, #60]	; (8002e20 <remoteUpdate+0x1d4>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4a0d      	ldr	r2, [pc, #52]	; (8002e1c <remoteUpdate+0x1d0>)
 8002de8:	6753      	str	r3, [r2, #116]	; 0x74
    frame.fdata[30]=target_ver[1];
 8002dea:	4b0d      	ldr	r3, [pc, #52]	; (8002e20 <remoteUpdate+0x1d4>)
 8002dec:	685b      	ldr	r3, [r3, #4]
 8002dee:	4a0b      	ldr	r2, [pc, #44]	; (8002e1c <remoteUpdate+0x1d0>)
 8002df0:	6793      	str	r3, [r2, #120]	; 0x78
    frame.fdata[31]=target_ver[2];
 8002df2:	4b0b      	ldr	r3, [pc, #44]	; (8002e20 <remoteUpdate+0x1d4>)
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	4a09      	ldr	r2, [pc, #36]	; (8002e1c <remoteUpdate+0x1d0>)
 8002df8:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8002dfa:	bf00      	nop
 8002dfc:	3718      	adds	r7, #24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	bc90      	pop	{r4, r7}
 8002e02:	4770      	bx	lr
 8002e04:	20000c38 	.word	0x20000c38
 8002e08:	20000be4 	.word	0x20000be4
 8002e0c:	20000c50 	.word	0x20000c50
 8002e10:	55555556 	.word	0x55555556
 8002e14:	20000000 	.word	0x20000000
 8002e18:	20000c54 	.word	0x20000c54
 8002e1c:	200000a8 	.word	0x200000a8
 8002e20:	20000c90 	.word	0x20000c90

08002e24 <remoteerr>:
void remoteerr(UART_HandleTypeDef *huart)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b082      	sub	sp, #8
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
    //HAL_UART_AbortReceive(huart);
    if(&huart1==huart)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	4a0b      	ldr	r2, [pc, #44]	; (8002e5c <remoteerr+0x38>)
 8002e30:	4293      	cmp	r3, r2
 8002e32:	d106      	bne.n	8002e42 <remoteerr+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 8002e34:	4b0a      	ldr	r3, [pc, #40]	; (8002e60 <remoteerr+0x3c>)
 8002e36:	2219      	movs	r2, #25
 8002e38:	4619      	mov	r1, r3
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f004 fa5a 	bl	80072f4 <HAL_UART_Receive_DMA>
	}else if(&huart5==huart)
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
	}
    //HAL_UART_Receive_DMA(huart, remoteBuffer, 16);
}
 8002e40:	e008      	b.n	8002e54 <remoteerr+0x30>
	}else if(&huart5==huart)
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4a07      	ldr	r2, [pc, #28]	; (8002e64 <remoteerr+0x40>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d104      	bne.n	8002e54 <remoteerr+0x30>
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002e4a:	2219      	movs	r2, #25
 8002e4c:	4906      	ldr	r1, [pc, #24]	; (8002e68 <remoteerr+0x44>)
 8002e4e:	6878      	ldr	r0, [r7, #4]
 8002e50:	f004 fa50 	bl	80072f4 <HAL_UART_Receive_DMA>
}
 8002e54:	bf00      	nop
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	2000109c 	.word	0x2000109c
 8002e60:	20000c28 	.word	0x20000c28
 8002e64:	20000fb0 	.word	0x20000fb0
 8002e68:	20000c18 	.word	0x20000c18

08002e6c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	607b      	str	r3, [r7, #4]
 8002e76:	4b10      	ldr	r3, [pc, #64]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a0f      	ldr	r2, [pc, #60]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b0d      	ldr	r3, [pc, #52]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	607b      	str	r3, [r7, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e8e:	2300      	movs	r3, #0
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e96:	4a08      	ldr	r2, [pc, #32]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002e98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002e9e:	4b06      	ldr	r3, [pc, #24]	; (8002eb8 <HAL_MspInit+0x4c>)
 8002ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ea6:	603b      	str	r3, [r7, #0]
 8002ea8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eaa:	bf00      	nop
 8002eac:	370c      	adds	r7, #12
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40023800 	.word	0x40023800

08002ebc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b08a      	sub	sp, #40	; 0x28
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec4:	f107 0314 	add.w	r3, r7, #20
 8002ec8:	2200      	movs	r2, #0
 8002eca:	601a      	str	r2, [r3, #0]
 8002ecc:	605a      	str	r2, [r3, #4]
 8002ece:	609a      	str	r2, [r3, #8]
 8002ed0:	60da      	str	r2, [r3, #12]
 8002ed2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4a17      	ldr	r2, [pc, #92]	; (8002f38 <HAL_ADC_MspInit+0x7c>)
 8002eda:	4293      	cmp	r3, r2
 8002edc:	d127      	bne.n	8002f2e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ede:	2300      	movs	r3, #0
 8002ee0:	613b      	str	r3, [r7, #16]
 8002ee2:	4b16      	ldr	r3, [pc, #88]	; (8002f3c <HAL_ADC_MspInit+0x80>)
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	4a15      	ldr	r2, [pc, #84]	; (8002f3c <HAL_ADC_MspInit+0x80>)
 8002ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002eec:	6453      	str	r3, [r2, #68]	; 0x44
 8002eee:	4b13      	ldr	r3, [pc, #76]	; (8002f3c <HAL_ADC_MspInit+0x80>)
 8002ef0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ef6:	613b      	str	r3, [r7, #16]
 8002ef8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efa:	2300      	movs	r3, #0
 8002efc:	60fb      	str	r3, [r7, #12]
 8002efe:	4b0f      	ldr	r3, [pc, #60]	; (8002f3c <HAL_ADC_MspInit+0x80>)
 8002f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f02:	4a0e      	ldr	r2, [pc, #56]	; (8002f3c <HAL_ADC_MspInit+0x80>)
 8002f04:	f043 0301 	orr.w	r3, r3, #1
 8002f08:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0a:	4b0c      	ldr	r3, [pc, #48]	; (8002f3c <HAL_ADC_MspInit+0x80>)
 8002f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f0e:	f003 0301 	and.w	r3, r3, #1
 8002f12:	60fb      	str	r3, [r7, #12]
 8002f14:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f16:	2310      	movs	r3, #16
 8002f18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f22:	f107 0314 	add.w	r3, r7, #20
 8002f26:	4619      	mov	r1, r3
 8002f28:	4805      	ldr	r0, [pc, #20]	; (8002f40 <HAL_ADC_MspInit+0x84>)
 8002f2a:	f001 feef 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f2e:	bf00      	nop
 8002f30:	3728      	adds	r7, #40	; 0x28
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	40012000 	.word	0x40012000
 8002f3c:	40023800 	.word	0x40023800
 8002f40:	40020000 	.word	0x40020000

08002f44 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b08a      	sub	sp, #40	; 0x28
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f4c:	f107 0314 	add.w	r3, r7, #20
 8002f50:	2200      	movs	r2, #0
 8002f52:	601a      	str	r2, [r3, #0]
 8002f54:	605a      	str	r2, [r3, #4]
 8002f56:	609a      	str	r2, [r3, #8]
 8002f58:	60da      	str	r2, [r3, #12]
 8002f5a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4a28      	ldr	r2, [pc, #160]	; (8003004 <HAL_SPI_MspInit+0xc0>)
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d149      	bne.n	8002ffa <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	613b      	str	r3, [r7, #16]
 8002f6a:	4b27      	ldr	r3, [pc, #156]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002f6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f6e:	4a26      	ldr	r2, [pc, #152]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002f70:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f74:	6453      	str	r3, [r2, #68]	; 0x44
 8002f76:	4b24      	ldr	r3, [pc, #144]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002f78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f7e:	613b      	str	r3, [r7, #16]
 8002f80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f82:	2300      	movs	r3, #0
 8002f84:	60fb      	str	r3, [r7, #12]
 8002f86:	4b20      	ldr	r3, [pc, #128]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	4a1f      	ldr	r2, [pc, #124]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6313      	str	r3, [r2, #48]	; 0x30
 8002f92:	4b1d      	ldr	r3, [pc, #116]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f96:	f003 0301 	and.w	r3, r3, #1
 8002f9a:	60fb      	str	r3, [r7, #12]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	60bb      	str	r3, [r7, #8]
 8002fa2:	4b19      	ldr	r3, [pc, #100]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002fa8:	f043 0302 	orr.w	r3, r3, #2
 8002fac:	6313      	str	r3, [r2, #48]	; 0x30
 8002fae:	4b16      	ldr	r3, [pc, #88]	; (8003008 <HAL_SPI_MspInit+0xc4>)
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	f003 0302 	and.w	r3, r3, #2
 8002fb6:	60bb      	str	r3, [r7, #8]
 8002fb8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fba:	2320      	movs	r3, #32
 8002fbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fbe:	2302      	movs	r3, #2
 8002fc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fc6:	2303      	movs	r3, #3
 8002fc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fca:	2305      	movs	r3, #5
 8002fcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fce:	f107 0314 	add.w	r3, r7, #20
 8002fd2:	4619      	mov	r1, r3
 8002fd4:	480d      	ldr	r0, [pc, #52]	; (800300c <HAL_SPI_MspInit+0xc8>)
 8002fd6:	f001 fe99 	bl	8004d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002fda:	2330      	movs	r3, #48	; 0x30
 8002fdc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fde:	2302      	movs	r3, #2
 8002fe0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fea:	2305      	movs	r3, #5
 8002fec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fee:	f107 0314 	add.w	r3, r7, #20
 8002ff2:	4619      	mov	r1, r3
 8002ff4:	4806      	ldr	r0, [pc, #24]	; (8003010 <HAL_SPI_MspInit+0xcc>)
 8002ff6:	f001 fe89 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ffa:	bf00      	nop
 8002ffc:	3728      	adds	r7, #40	; 0x28
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40013000 	.word	0x40013000
 8003008:	40023800 	.word	0x40023800
 800300c:	40020000 	.word	0x40020000
 8003010:	40020400 	.word	0x40020400

08003014 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b088      	sub	sp, #32
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	4a36      	ldr	r2, [pc, #216]	; (80030fc <HAL_TIM_Base_MspInit+0xe8>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d116      	bne.n	8003054 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	61fb      	str	r3, [r7, #28]
 800302a:	4b35      	ldr	r3, [pc, #212]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	4a34      	ldr	r2, [pc, #208]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 8003030:	f043 0301 	orr.w	r3, r3, #1
 8003034:	6453      	str	r3, [r2, #68]	; 0x44
 8003036:	4b32      	ldr	r3, [pc, #200]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 8003038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303a:	f003 0301 	and.w	r3, r3, #1
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003042:	2200      	movs	r2, #0
 8003044:	2100      	movs	r1, #0
 8003046:	2019      	movs	r0, #25
 8003048:	f001 fa28 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800304c:	2019      	movs	r0, #25
 800304e:	f001 fa41 	bl	80044d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003052:	e04e      	b.n	80030f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800305c:	d10e      	bne.n	800307c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
 8003062:	4b27      	ldr	r3, [pc, #156]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	4a26      	ldr	r2, [pc, #152]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 8003068:	f043 0301 	orr.w	r3, r3, #1
 800306c:	6413      	str	r3, [r2, #64]	; 0x40
 800306e:	4b24      	ldr	r3, [pc, #144]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	f003 0301 	and.w	r3, r3, #1
 8003076:	61bb      	str	r3, [r7, #24]
 8003078:	69bb      	ldr	r3, [r7, #24]
}
 800307a:	e03a      	b.n	80030f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a20      	ldr	r2, [pc, #128]	; (8003104 <HAL_TIM_Base_MspInit+0xf0>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d10e      	bne.n	80030a4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003086:	2300      	movs	r3, #0
 8003088:	617b      	str	r3, [r7, #20]
 800308a:	4b1d      	ldr	r3, [pc, #116]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800308e:	4a1c      	ldr	r2, [pc, #112]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 8003090:	f043 0302 	orr.w	r3, r3, #2
 8003094:	6413      	str	r3, [r2, #64]	; 0x40
 8003096:	4b1a      	ldr	r3, [pc, #104]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 8003098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309a:	f003 0302 	and.w	r3, r3, #2
 800309e:	617b      	str	r3, [r7, #20]
 80030a0:	697b      	ldr	r3, [r7, #20]
}
 80030a2:	e026      	b.n	80030f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	4a17      	ldr	r2, [pc, #92]	; (8003108 <HAL_TIM_Base_MspInit+0xf4>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d10e      	bne.n	80030cc <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b13      	ldr	r3, [pc, #76]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 80030b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030b6:	4a12      	ldr	r2, [pc, #72]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 80030b8:	f043 0304 	orr.w	r3, r3, #4
 80030bc:	6413      	str	r3, [r2, #64]	; 0x40
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	f003 0304 	and.w	r3, r3, #4
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
}
 80030ca:	e012      	b.n	80030f2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a0e      	ldr	r2, [pc, #56]	; (800310c <HAL_TIM_Base_MspInit+0xf8>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d10d      	bne.n	80030f2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030d6:	2300      	movs	r3, #0
 80030d8:	60fb      	str	r3, [r7, #12]
 80030da:	4b09      	ldr	r3, [pc, #36]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 80030dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030de:	4a08      	ldr	r2, [pc, #32]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 80030e0:	f043 0302 	orr.w	r3, r3, #2
 80030e4:	6453      	str	r3, [r2, #68]	; 0x44
 80030e6:	4b06      	ldr	r3, [pc, #24]	; (8003100 <HAL_TIM_Base_MspInit+0xec>)
 80030e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ea:	f003 0302 	and.w	r3, r3, #2
 80030ee:	60fb      	str	r3, [r7, #12]
 80030f0:	68fb      	ldr	r3, [r7, #12]
}
 80030f2:	bf00      	nop
 80030f4:	3720      	adds	r7, #32
 80030f6:	46bd      	mov	sp, r7
 80030f8:	bd80      	pop	{r7, pc}
 80030fa:	bf00      	nop
 80030fc:	40010000 	.word	0x40010000
 8003100:	40023800 	.word	0x40023800
 8003104:	40000400 	.word	0x40000400
 8003108:	40000800 	.word	0x40000800
 800310c:	40010400 	.word	0x40010400

08003110 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003110:	b580      	push	{r7, lr}
 8003112:	b08a      	sub	sp, #40	; 0x28
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003118:	f107 0314 	add.w	r3, r7, #20
 800311c:	2200      	movs	r2, #0
 800311e:	601a      	str	r2, [r3, #0]
 8003120:	605a      	str	r2, [r3, #4]
 8003122:	609a      	str	r2, [r3, #8]
 8003124:	60da      	str	r2, [r3, #12]
 8003126:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM5)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_TIM_PWM_MspInit+0xac>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d12c      	bne.n	800318c <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003132:	2300      	movs	r3, #0
 8003134:	613b      	str	r3, [r7, #16]
 8003136:	4b22      	ldr	r3, [pc, #136]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a21      	ldr	r2, [pc, #132]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 800313c:	f043 0308 	orr.w	r3, r3, #8
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b1f      	ldr	r3, [pc, #124]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0308 	and.w	r3, r3, #8
 800314a:	613b      	str	r3, [r7, #16]
 800314c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800314e:	2300      	movs	r3, #0
 8003150:	60fb      	str	r3, [r7, #12]
 8003152:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003156:	4a1a      	ldr	r2, [pc, #104]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003158:	f043 0301 	orr.w	r3, r3, #1
 800315c:	6313      	str	r3, [r2, #48]	; 0x30
 800315e:	4b18      	ldr	r3, [pc, #96]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f003 0301 	and.w	r3, r3, #1
 8003166:	60fb      	str	r3, [r7, #12]
 8003168:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800316a:	2303      	movs	r3, #3
 800316c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800316e:	2302      	movs	r3, #2
 8003170:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003172:	2300      	movs	r3, #0
 8003174:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003176:	2300      	movs	r3, #0
 8003178:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800317a:	2302      	movs	r3, #2
 800317c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800317e:	f107 0314 	add.w	r3, r7, #20
 8003182:	4619      	mov	r1, r3
 8003184:	480f      	ldr	r0, [pc, #60]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb4>)
 8003186:	f001 fdc1 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800318a:	e012      	b.n	80031b2 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM12)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	4a0d      	ldr	r2, [pc, #52]	; (80031c8 <HAL_TIM_PWM_MspInit+0xb8>)
 8003192:	4293      	cmp	r3, r2
 8003194:	d10d      	bne.n	80031b2 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8003196:	2300      	movs	r3, #0
 8003198:	60bb      	str	r3, [r7, #8]
 800319a:	4b09      	ldr	r3, [pc, #36]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 800319c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319e:	4a08      	ldr	r2, [pc, #32]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 80031a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a4:	6413      	str	r3, [r2, #64]	; 0x40
 80031a6:	4b06      	ldr	r3, [pc, #24]	; (80031c0 <HAL_TIM_PWM_MspInit+0xb0>)
 80031a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
}
 80031b2:	bf00      	nop
 80031b4:	3728      	adds	r7, #40	; 0x28
 80031b6:	46bd      	mov	sp, r7
 80031b8:	bd80      	pop	{r7, pc}
 80031ba:	bf00      	nop
 80031bc:	40000c00 	.word	0x40000c00
 80031c0:	40023800 	.word	0x40023800
 80031c4:	40020000 	.word	0x40020000
 80031c8:	40001800 	.word	0x40001800

080031cc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b08e      	sub	sp, #56	; 0x38
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]
 80031dc:	605a      	str	r2, [r3, #4]
 80031de:	609a      	str	r2, [r3, #8]
 80031e0:	60da      	str	r2, [r3, #12]
 80031e2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a6a      	ldr	r2, [pc, #424]	; (8003394 <HAL_TIM_MspPostInit+0x1c8>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d13c      	bne.n	8003268 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031ee:	2300      	movs	r3, #0
 80031f0:	623b      	str	r3, [r7, #32]
 80031f2:	4b69      	ldr	r3, [pc, #420]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 80031f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031f6:	4a68      	ldr	r2, [pc, #416]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 80031f8:	f043 0301 	orr.w	r3, r3, #1
 80031fc:	6313      	str	r3, [r2, #48]	; 0x30
 80031fe:	4b66      	ldr	r3, [pc, #408]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	f003 0301 	and.w	r3, r3, #1
 8003206:	623b      	str	r3, [r7, #32]
 8003208:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320a:	2300      	movs	r3, #0
 800320c:	61fb      	str	r3, [r7, #28]
 800320e:	4b62      	ldr	r3, [pc, #392]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003210:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003212:	4a61      	ldr	r2, [pc, #388]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003214:	f043 0302 	orr.w	r3, r3, #2
 8003218:	6313      	str	r3, [r2, #48]	; 0x30
 800321a:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 800321c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800321e:	f003 0302 	and.w	r3, r3, #2
 8003222:	61fb      	str	r3, [r7, #28]
 8003224:	69fb      	ldr	r3, [r7, #28]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003226:	23c0      	movs	r3, #192	; 0xc0
 8003228:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322a:	2302      	movs	r3, #2
 800322c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800322e:	2300      	movs	r3, #0
 8003230:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003232:	2300      	movs	r3, #0
 8003234:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003236:	2302      	movs	r3, #2
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800323e:	4619      	mov	r1, r3
 8003240:	4856      	ldr	r0, [pc, #344]	; (800339c <HAL_TIM_MspPostInit+0x1d0>)
 8003242:	f001 fd63 	bl	8004d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003246:	2303      	movs	r3, #3
 8003248:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324a:	2302      	movs	r3, #2
 800324c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800324e:	2300      	movs	r3, #0
 8003250:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003252:	2300      	movs	r3, #0
 8003254:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003256:	2302      	movs	r3, #2
 8003258:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800325e:	4619      	mov	r1, r3
 8003260:	484f      	ldr	r0, [pc, #316]	; (80033a0 <HAL_TIM_MspPostInit+0x1d4>)
 8003262:	f001 fd53 	bl	8004d0c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8003266:	e091      	b.n	800338c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	4a4d      	ldr	r2, [pc, #308]	; (80033a4 <HAL_TIM_MspPostInit+0x1d8>)
 800326e:	4293      	cmp	r3, r2
 8003270:	d11f      	bne.n	80032b2 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003272:	2300      	movs	r3, #0
 8003274:	61bb      	str	r3, [r7, #24]
 8003276:	4b48      	ldr	r3, [pc, #288]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327a:	4a47      	ldr	r2, [pc, #284]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 800327c:	f043 0308 	orr.w	r3, r3, #8
 8003280:	6313      	str	r3, [r2, #48]	; 0x30
 8003282:	4b45      	ldr	r3, [pc, #276]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	f003 0308 	and.w	r3, r3, #8
 800328a:	61bb      	str	r3, [r7, #24]
 800328c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800328e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003292:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003294:	2302      	movs	r3, #2
 8003296:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003298:	2300      	movs	r3, #0
 800329a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800329c:	2300      	movs	r3, #0
 800329e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032a0:	2302      	movs	r3, #2
 80032a2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032a8:	4619      	mov	r1, r3
 80032aa:	483f      	ldr	r0, [pc, #252]	; (80033a8 <HAL_TIM_MspPostInit+0x1dc>)
 80032ac:	f001 fd2e 	bl	8004d0c <HAL_GPIO_Init>
}
 80032b0:	e06c      	b.n	800338c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a3d      	ldr	r2, [pc, #244]	; (80033ac <HAL_TIM_MspPostInit+0x1e0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d11e      	bne.n	80032fa <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032bc:	2300      	movs	r3, #0
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	4b35      	ldr	r3, [pc, #212]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 80032c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c4:	4a34      	ldr	r2, [pc, #208]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 80032c6:	f043 0301 	orr.w	r3, r3, #1
 80032ca:	6313      	str	r3, [r2, #48]	; 0x30
 80032cc:	4b32      	ldr	r3, [pc, #200]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 80032ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d0:	f003 0301 	and.w	r3, r3, #1
 80032d4:	617b      	str	r3, [r7, #20]
 80032d6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032d8:	230c      	movs	r3, #12
 80032da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032dc:	2302      	movs	r3, #2
 80032de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e0:	2300      	movs	r3, #0
 80032e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e4:	2300      	movs	r3, #0
 80032e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032e8:	2302      	movs	r3, #2
 80032ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f0:	4619      	mov	r1, r3
 80032f2:	482a      	ldr	r0, [pc, #168]	; (800339c <HAL_TIM_MspPostInit+0x1d0>)
 80032f4:	f001 fd0a 	bl	8004d0c <HAL_GPIO_Init>
}
 80032f8:	e048      	b.n	800338c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4a2c      	ldr	r2, [pc, #176]	; (80033b0 <HAL_TIM_MspPostInit+0x1e4>)
 8003300:	4293      	cmp	r3, r2
 8003302:	d11f      	bne.n	8003344 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003304:	2300      	movs	r3, #0
 8003306:	613b      	str	r3, [r7, #16]
 8003308:	4b23      	ldr	r3, [pc, #140]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	4a22      	ldr	r2, [pc, #136]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 800330e:	f043 0304 	orr.w	r3, r3, #4
 8003312:	6313      	str	r3, [r2, #48]	; 0x30
 8003314:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003316:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003318:	f003 0304 	and.w	r3, r3, #4
 800331c:	613b      	str	r3, [r7, #16]
 800331e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003320:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003324:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003326:	2302      	movs	r3, #2
 8003328:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332a:	2300      	movs	r3, #0
 800332c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800332e:	2300      	movs	r3, #0
 8003330:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003332:	2303      	movs	r3, #3
 8003334:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003336:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333a:	4619      	mov	r1, r3
 800333c:	481d      	ldr	r0, [pc, #116]	; (80033b4 <HAL_TIM_MspPostInit+0x1e8>)
 800333e:	f001 fce5 	bl	8004d0c <HAL_GPIO_Init>
}
 8003342:	e023      	b.n	800338c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	4a1b      	ldr	r2, [pc, #108]	; (80033b8 <HAL_TIM_MspPostInit+0x1ec>)
 800334a:	4293      	cmp	r3, r2
 800334c:	d11e      	bne.n	800338c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800334e:	2300      	movs	r3, #0
 8003350:	60fb      	str	r3, [r7, #12]
 8003352:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003356:	4a10      	ldr	r2, [pc, #64]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003358:	f043 0302 	orr.w	r3, r3, #2
 800335c:	6313      	str	r3, [r2, #48]	; 0x30
 800335e:	4b0e      	ldr	r3, [pc, #56]	; (8003398 <HAL_TIM_MspPostInit+0x1cc>)
 8003360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003362:	f003 0302 	and.w	r3, r3, #2
 8003366:	60fb      	str	r3, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800336a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800336e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003370:	2302      	movs	r3, #2
 8003372:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003374:	2300      	movs	r3, #0
 8003376:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003378:	2300      	movs	r3, #0
 800337a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 800337c:	2309      	movs	r3, #9
 800337e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003380:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003384:	4619      	mov	r1, r3
 8003386:	4806      	ldr	r0, [pc, #24]	; (80033a0 <HAL_TIM_MspPostInit+0x1d4>)
 8003388:	f001 fcc0 	bl	8004d0c <HAL_GPIO_Init>
}
 800338c:	bf00      	nop
 800338e:	3738      	adds	r7, #56	; 0x38
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}
 8003394:	40000400 	.word	0x40000400
 8003398:	40023800 	.word	0x40023800
 800339c:	40020000 	.word	0x40020000
 80033a0:	40020400 	.word	0x40020400
 80033a4:	40000800 	.word	0x40000800
 80033a8:	40020c00 	.word	0x40020c00
 80033ac:	40000c00 	.word	0x40000c00
 80033b0:	40010400 	.word	0x40010400
 80033b4:	40020800 	.word	0x40020800
 80033b8:	40001800 	.word	0x40001800

080033bc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b092      	sub	sp, #72	; 0x48
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033c8:	2200      	movs	r2, #0
 80033ca:	601a      	str	r2, [r3, #0]
 80033cc:	605a      	str	r2, [r3, #4]
 80033ce:	609a      	str	r2, [r3, #8]
 80033d0:	60da      	str	r2, [r3, #12]
 80033d2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a78      	ldr	r2, [pc, #480]	; (80035bc <HAL_UART_MspInit+0x200>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d164      	bne.n	80034a8 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80033de:	2300      	movs	r3, #0
 80033e0:	633b      	str	r3, [r7, #48]	; 0x30
 80033e2:	4b77      	ldr	r3, [pc, #476]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80033e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033e6:	4a76      	ldr	r2, [pc, #472]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80033e8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033ec:	6413      	str	r3, [r2, #64]	; 0x40
 80033ee:	4b74      	ldr	r3, [pc, #464]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80033f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033f6:	633b      	str	r3, [r7, #48]	; 0x30
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fa:	2300      	movs	r3, #0
 80033fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033fe:	4b70      	ldr	r3, [pc, #448]	; (80035c0 <HAL_UART_MspInit+0x204>)
 8003400:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003402:	4a6f      	ldr	r2, [pc, #444]	; (80035c0 <HAL_UART_MspInit+0x204>)
 8003404:	f043 0304 	orr.w	r3, r3, #4
 8003408:	6313      	str	r3, [r2, #48]	; 0x30
 800340a:	4b6d      	ldr	r3, [pc, #436]	; (80035c0 <HAL_UART_MspInit+0x204>)
 800340c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800340e:	f003 0304 	and.w	r3, r3, #4
 8003412:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003416:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800341a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800341c:	2302      	movs	r3, #2
 800341e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003420:	2301      	movs	r3, #1
 8003422:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003424:	2303      	movs	r3, #3
 8003426:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003428:	2308      	movs	r3, #8
 800342a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800342c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003430:	4619      	mov	r1, r3
 8003432:	4864      	ldr	r0, [pc, #400]	; (80035c4 <HAL_UART_MspInit+0x208>)
 8003434:	f001 fc6a 	bl	8004d0c <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003438:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 800343a:	4a64      	ldr	r2, [pc, #400]	; (80035cc <HAL_UART_MspInit+0x210>)
 800343c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800343e:	4b62      	ldr	r3, [pc, #392]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003440:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003444:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003446:	4b60      	ldr	r3, [pc, #384]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003448:	2200      	movs	r2, #0
 800344a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800344c:	4b5e      	ldr	r3, [pc, #376]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 800344e:	2200      	movs	r2, #0
 8003450:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003452:	4b5d      	ldr	r3, [pc, #372]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003454:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003458:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345a:	4b5b      	ldr	r3, [pc, #364]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 800345c:	2200      	movs	r2, #0
 800345e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003460:	4b59      	ldr	r3, [pc, #356]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003462:	2200      	movs	r2, #0
 8003464:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003466:	4b58      	ldr	r3, [pc, #352]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003468:	f44f 7280 	mov.w	r2, #256	; 0x100
 800346c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800346e:	4b56      	ldr	r3, [pc, #344]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003470:	2200      	movs	r2, #0
 8003472:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003474:	4b54      	ldr	r3, [pc, #336]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003476:	2200      	movs	r2, #0
 8003478:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800347a:	4853      	ldr	r0, [pc, #332]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 800347c:	f001 f838 	bl	80044f0 <HAL_DMA_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003486:	f7fe ff27 	bl	80022d8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	4a4e      	ldr	r2, [pc, #312]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 800348e:	639a      	str	r2, [r3, #56]	; 0x38
 8003490:	4a4d      	ldr	r2, [pc, #308]	; (80035c8 <HAL_UART_MspInit+0x20c>)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003496:	2200      	movs	r2, #0
 8003498:	2100      	movs	r1, #0
 800349a:	2034      	movs	r0, #52	; 0x34
 800349c:	f000 fffe 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80034a0:	2034      	movs	r0, #52	; 0x34
 80034a2:	f001 f817 	bl	80044d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034a6:	e1d7      	b.n	8003858 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==UART5)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	4a48      	ldr	r2, [pc, #288]	; (80035d0 <HAL_UART_MspInit+0x214>)
 80034ae:	4293      	cmp	r3, r2
 80034b0:	f040 8096 	bne.w	80035e0 <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 80034b4:	2300      	movs	r3, #0
 80034b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b8:	4b41      	ldr	r3, [pc, #260]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034bc:	4a40      	ldr	r2, [pc, #256]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c2:	6413      	str	r3, [r2, #64]	; 0x40
 80034c4:	4b3e      	ldr	r3, [pc, #248]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80034ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d0:	2300      	movs	r3, #0
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
 80034d4:	4b3a      	ldr	r3, [pc, #232]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034d8:	4a39      	ldr	r2, [pc, #228]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034da:	f043 0304 	orr.w	r3, r3, #4
 80034de:	6313      	str	r3, [r2, #48]	; 0x30
 80034e0:	4b37      	ldr	r3, [pc, #220]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e4:	f003 0304 	and.w	r3, r3, #4
 80034e8:	627b      	str	r3, [r7, #36]	; 0x24
 80034ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034ec:	2300      	movs	r3, #0
 80034ee:	623b      	str	r3, [r7, #32]
 80034f0:	4b33      	ldr	r3, [pc, #204]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f4:	4a32      	ldr	r2, [pc, #200]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034f6:	f043 0308 	orr.w	r3, r3, #8
 80034fa:	6313      	str	r3, [r2, #48]	; 0x30
 80034fc:	4b30      	ldr	r3, [pc, #192]	; (80035c0 <HAL_UART_MspInit+0x204>)
 80034fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003500:	f003 0308 	and.w	r3, r3, #8
 8003504:	623b      	str	r3, [r7, #32]
 8003506:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003508:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800350c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800350e:	2302      	movs	r3, #2
 8003510:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003512:	2301      	movs	r3, #1
 8003514:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003516:	2303      	movs	r3, #3
 8003518:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800351a:	2308      	movs	r3, #8
 800351c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800351e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003522:	4619      	mov	r1, r3
 8003524:	4827      	ldr	r0, [pc, #156]	; (80035c4 <HAL_UART_MspInit+0x208>)
 8003526:	f001 fbf1 	bl	8004d0c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800352a:	2304      	movs	r3, #4
 800352c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800352e:	2302      	movs	r3, #2
 8003530:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003532:	2301      	movs	r3, #1
 8003534:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003536:	2303      	movs	r3, #3
 8003538:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800353a:	2308      	movs	r3, #8
 800353c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800353e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003542:	4619      	mov	r1, r3
 8003544:	4823      	ldr	r0, [pc, #140]	; (80035d4 <HAL_UART_MspInit+0x218>)
 8003546:	f001 fbe1 	bl	8004d0c <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800354a:	4b23      	ldr	r3, [pc, #140]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 800354c:	4a23      	ldr	r2, [pc, #140]	; (80035dc <HAL_UART_MspInit+0x220>)
 800354e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003550:	4b21      	ldr	r3, [pc, #132]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 8003552:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003556:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003558:	4b1f      	ldr	r3, [pc, #124]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 800355a:	2200      	movs	r2, #0
 800355c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800355e:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 8003560:	2200      	movs	r2, #0
 8003562:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003564:	4b1c      	ldr	r3, [pc, #112]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 8003566:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800356c:	4b1a      	ldr	r3, [pc, #104]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 800356e:	2200      	movs	r2, #0
 8003570:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003572:	4b19      	ldr	r3, [pc, #100]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 8003574:	2200      	movs	r2, #0
 8003576:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003578:	4b17      	ldr	r3, [pc, #92]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 800357a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800357e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003580:	4b15      	ldr	r3, [pc, #84]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 8003582:	2200      	movs	r2, #0
 8003584:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003586:	4b14      	ldr	r3, [pc, #80]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 8003588:	2200      	movs	r2, #0
 800358a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800358c:	4812      	ldr	r0, [pc, #72]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 800358e:	f000 ffaf 	bl	80044f0 <HAL_DMA_Init>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d001      	beq.n	800359c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8003598:	f7fe fe9e 	bl	80022d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4a0e      	ldr	r2, [pc, #56]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 80035a0:	639a      	str	r2, [r3, #56]	; 0x38
 80035a2:	4a0d      	ldr	r2, [pc, #52]	; (80035d8 <HAL_UART_MspInit+0x21c>)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80035a8:	2200      	movs	r2, #0
 80035aa:	2100      	movs	r1, #0
 80035ac:	2035      	movs	r0, #53	; 0x35
 80035ae:	f000 ff75 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035b2:	2035      	movs	r0, #53	; 0x35
 80035b4:	f000 ff8e 	bl	80044d4 <HAL_NVIC_EnableIRQ>
}
 80035b8:	e14e      	b.n	8003858 <HAL_UART_MspInit+0x49c>
 80035ba:	bf00      	nop
 80035bc:	40004c00 	.word	0x40004c00
 80035c0:	40023800 	.word	0x40023800
 80035c4:	40020800 	.word	0x40020800
 80035c8:	20000d2c 	.word	0x20000d2c
 80035cc:	40026040 	.word	0x40026040
 80035d0:	40005000 	.word	0x40005000
 80035d4:	40020c00 	.word	0x40020c00
 80035d8:	20001250 	.word	0x20001250
 80035dc:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a9e      	ldr	r2, [pc, #632]	; (8003860 <HAL_UART_MspInit+0x4a4>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d164      	bne.n	80036b4 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ea:	2300      	movs	r3, #0
 80035ec:	61fb      	str	r3, [r7, #28]
 80035ee:	4b9d      	ldr	r3, [pc, #628]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80035f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f2:	4a9c      	ldr	r2, [pc, #624]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80035f4:	f043 0310 	orr.w	r3, r3, #16
 80035f8:	6453      	str	r3, [r2, #68]	; 0x44
 80035fa:	4b9a      	ldr	r3, [pc, #616]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80035fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fe:	f003 0310 	and.w	r3, r3, #16
 8003602:	61fb      	str	r3, [r7, #28]
 8003604:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003606:	2300      	movs	r3, #0
 8003608:	61bb      	str	r3, [r7, #24]
 800360a:	4b96      	ldr	r3, [pc, #600]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 800360c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360e:	4a95      	ldr	r2, [pc, #596]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 8003610:	f043 0301 	orr.w	r3, r3, #1
 8003614:	6313      	str	r3, [r2, #48]	; 0x30
 8003616:	4b93      	ldr	r3, [pc, #588]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 8003618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361a:	f003 0301 	and.w	r3, r3, #1
 800361e:	61bb      	str	r3, [r7, #24]
 8003620:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003622:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003626:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003628:	2302      	movs	r3, #2
 800362a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800362c:	2300      	movs	r3, #0
 800362e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003630:	2303      	movs	r3, #3
 8003632:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003634:	2307      	movs	r3, #7
 8003636:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800363c:	4619      	mov	r1, r3
 800363e:	488a      	ldr	r0, [pc, #552]	; (8003868 <HAL_UART_MspInit+0x4ac>)
 8003640:	f001 fb64 	bl	8004d0c <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003644:	4b89      	ldr	r3, [pc, #548]	; (800386c <HAL_UART_MspInit+0x4b0>)
 8003646:	4a8a      	ldr	r2, [pc, #552]	; (8003870 <HAL_UART_MspInit+0x4b4>)
 8003648:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800364a:	4b88      	ldr	r3, [pc, #544]	; (800386c <HAL_UART_MspInit+0x4b0>)
 800364c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003650:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003652:	4b86      	ldr	r3, [pc, #536]	; (800386c <HAL_UART_MspInit+0x4b0>)
 8003654:	2200      	movs	r2, #0
 8003656:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003658:	4b84      	ldr	r3, [pc, #528]	; (800386c <HAL_UART_MspInit+0x4b0>)
 800365a:	2200      	movs	r2, #0
 800365c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800365e:	4b83      	ldr	r3, [pc, #524]	; (800386c <HAL_UART_MspInit+0x4b0>)
 8003660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003664:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003666:	4b81      	ldr	r3, [pc, #516]	; (800386c <HAL_UART_MspInit+0x4b0>)
 8003668:	2200      	movs	r2, #0
 800366a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800366c:	4b7f      	ldr	r3, [pc, #508]	; (800386c <HAL_UART_MspInit+0x4b0>)
 800366e:	2200      	movs	r2, #0
 8003670:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003672:	4b7e      	ldr	r3, [pc, #504]	; (800386c <HAL_UART_MspInit+0x4b0>)
 8003674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003678:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800367a:	4b7c      	ldr	r3, [pc, #496]	; (800386c <HAL_UART_MspInit+0x4b0>)
 800367c:	2200      	movs	r2, #0
 800367e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003680:	4b7a      	ldr	r3, [pc, #488]	; (800386c <HAL_UART_MspInit+0x4b0>)
 8003682:	2200      	movs	r2, #0
 8003684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003686:	4879      	ldr	r0, [pc, #484]	; (800386c <HAL_UART_MspInit+0x4b0>)
 8003688:	f000 ff32 	bl	80044f0 <HAL_DMA_Init>
 800368c:	4603      	mov	r3, r0
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <HAL_UART_MspInit+0x2da>
      Error_Handler();
 8003692:	f7fe fe21 	bl	80022d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a74      	ldr	r2, [pc, #464]	; (800386c <HAL_UART_MspInit+0x4b0>)
 800369a:	639a      	str	r2, [r3, #56]	; 0x38
 800369c:	4a73      	ldr	r2, [pc, #460]	; (800386c <HAL_UART_MspInit+0x4b0>)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036a2:	2200      	movs	r2, #0
 80036a4:	2100      	movs	r1, #0
 80036a6:	2025      	movs	r0, #37	; 0x25
 80036a8:	f000 fef8 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036ac:	2025      	movs	r0, #37	; 0x25
 80036ae:	f000 ff11 	bl	80044d4 <HAL_NVIC_EnableIRQ>
}
 80036b2:	e0d1      	b.n	8003858 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART2)
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a6e      	ldr	r2, [pc, #440]	; (8003874 <HAL_UART_MspInit+0x4b8>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d163      	bne.n	8003786 <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036be:	2300      	movs	r3, #0
 80036c0:	617b      	str	r3, [r7, #20]
 80036c2:	4b68      	ldr	r3, [pc, #416]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80036c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036c6:	4a67      	ldr	r2, [pc, #412]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80036c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036cc:	6413      	str	r3, [r2, #64]	; 0x40
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80036d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d6:	617b      	str	r3, [r7, #20]
 80036d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	4b61      	ldr	r3, [pc, #388]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80036e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e2:	4a60      	ldr	r2, [pc, #384]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80036e4:	f043 0308 	orr.w	r3, r3, #8
 80036e8:	6313      	str	r3, [r2, #48]	; 0x30
 80036ea:	4b5e      	ldr	r3, [pc, #376]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80036ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036ee:	f003 0308 	and.w	r3, r3, #8
 80036f2:	613b      	str	r3, [r7, #16]
 80036f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036f6:	2360      	movs	r3, #96	; 0x60
 80036f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fa:	2302      	movs	r3, #2
 80036fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036fe:	2300      	movs	r3, #0
 8003700:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003702:	2303      	movs	r3, #3
 8003704:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003706:	2307      	movs	r3, #7
 8003708:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800370a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800370e:	4619      	mov	r1, r3
 8003710:	4859      	ldr	r0, [pc, #356]	; (8003878 <HAL_UART_MspInit+0x4bc>)
 8003712:	f001 fafb 	bl	8004d0c <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003716:	4b59      	ldr	r3, [pc, #356]	; (800387c <HAL_UART_MspInit+0x4c0>)
 8003718:	4a59      	ldr	r2, [pc, #356]	; (8003880 <HAL_UART_MspInit+0x4c4>)
 800371a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800371c:	4b57      	ldr	r3, [pc, #348]	; (800387c <HAL_UART_MspInit+0x4c0>)
 800371e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003722:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003724:	4b55      	ldr	r3, [pc, #340]	; (800387c <HAL_UART_MspInit+0x4c0>)
 8003726:	2200      	movs	r2, #0
 8003728:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800372a:	4b54      	ldr	r3, [pc, #336]	; (800387c <HAL_UART_MspInit+0x4c0>)
 800372c:	2200      	movs	r2, #0
 800372e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003730:	4b52      	ldr	r3, [pc, #328]	; (800387c <HAL_UART_MspInit+0x4c0>)
 8003732:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003736:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003738:	4b50      	ldr	r3, [pc, #320]	; (800387c <HAL_UART_MspInit+0x4c0>)
 800373a:	2200      	movs	r2, #0
 800373c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800373e:	4b4f      	ldr	r3, [pc, #316]	; (800387c <HAL_UART_MspInit+0x4c0>)
 8003740:	2200      	movs	r2, #0
 8003742:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003744:	4b4d      	ldr	r3, [pc, #308]	; (800387c <HAL_UART_MspInit+0x4c0>)
 8003746:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800374c:	4b4b      	ldr	r3, [pc, #300]	; (800387c <HAL_UART_MspInit+0x4c0>)
 800374e:	2200      	movs	r2, #0
 8003750:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003752:	4b4a      	ldr	r3, [pc, #296]	; (800387c <HAL_UART_MspInit+0x4c0>)
 8003754:	2200      	movs	r2, #0
 8003756:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003758:	4848      	ldr	r0, [pc, #288]	; (800387c <HAL_UART_MspInit+0x4c0>)
 800375a:	f000 fec9 	bl	80044f0 <HAL_DMA_Init>
 800375e:	4603      	mov	r3, r0
 8003760:	2b00      	cmp	r3, #0
 8003762:	d001      	beq.n	8003768 <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 8003764:	f7fe fdb8 	bl	80022d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	4a44      	ldr	r2, [pc, #272]	; (800387c <HAL_UART_MspInit+0x4c0>)
 800376c:	639a      	str	r2, [r3, #56]	; 0x38
 800376e:	4a43      	ldr	r2, [pc, #268]	; (800387c <HAL_UART_MspInit+0x4c0>)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003774:	2200      	movs	r2, #0
 8003776:	2100      	movs	r1, #0
 8003778:	2026      	movs	r0, #38	; 0x26
 800377a:	f000 fe8f 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800377e:	2026      	movs	r0, #38	; 0x26
 8003780:	f000 fea8 	bl	80044d4 <HAL_NVIC_EnableIRQ>
}
 8003784:	e068      	b.n	8003858 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART3)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	4a3e      	ldr	r2, [pc, #248]	; (8003884 <HAL_UART_MspInit+0x4c8>)
 800378c:	4293      	cmp	r3, r2
 800378e:	d163      	bne.n	8003858 <HAL_UART_MspInit+0x49c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003790:	2300      	movs	r3, #0
 8003792:	60fb      	str	r3, [r7, #12]
 8003794:	4b33      	ldr	r3, [pc, #204]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 8003796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003798:	4a32      	ldr	r2, [pc, #200]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 800379a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800379e:	6413      	str	r3, [r2, #64]	; 0x40
 80037a0:	4b30      	ldr	r3, [pc, #192]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80037a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037ac:	2300      	movs	r3, #0
 80037ae:	60bb      	str	r3, [r7, #8]
 80037b0:	4b2c      	ldr	r3, [pc, #176]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80037b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b4:	4a2b      	ldr	r2, [pc, #172]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80037b6:	f043 0302 	orr.w	r3, r3, #2
 80037ba:	6313      	str	r3, [r2, #48]	; 0x30
 80037bc:	4b29      	ldr	r3, [pc, #164]	; (8003864 <HAL_UART_MspInit+0x4a8>)
 80037be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c0:	f003 0302 	and.w	r3, r3, #2
 80037c4:	60bb      	str	r3, [r7, #8]
 80037c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037ce:	2302      	movs	r3, #2
 80037d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d2:	2300      	movs	r3, #0
 80037d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037d6:	2303      	movs	r3, #3
 80037d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037da:	2307      	movs	r3, #7
 80037dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037e2:	4619      	mov	r1, r3
 80037e4:	4828      	ldr	r0, [pc, #160]	; (8003888 <HAL_UART_MspInit+0x4cc>)
 80037e6:	f001 fa91 	bl	8004d0c <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80037ea:	4b28      	ldr	r3, [pc, #160]	; (800388c <HAL_UART_MspInit+0x4d0>)
 80037ec:	4a28      	ldr	r2, [pc, #160]	; (8003890 <HAL_UART_MspInit+0x4d4>)
 80037ee:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80037f0:	4b26      	ldr	r3, [pc, #152]	; (800388c <HAL_UART_MspInit+0x4d0>)
 80037f2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037f6:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037f8:	4b24      	ldr	r3, [pc, #144]	; (800388c <HAL_UART_MspInit+0x4d0>)
 80037fa:	2200      	movs	r2, #0
 80037fc:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80037fe:	4b23      	ldr	r3, [pc, #140]	; (800388c <HAL_UART_MspInit+0x4d0>)
 8003800:	2200      	movs	r2, #0
 8003802:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003804:	4b21      	ldr	r3, [pc, #132]	; (800388c <HAL_UART_MspInit+0x4d0>)
 8003806:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800380a:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800380c:	4b1f      	ldr	r3, [pc, #124]	; (800388c <HAL_UART_MspInit+0x4d0>)
 800380e:	2200      	movs	r2, #0
 8003810:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003812:	4b1e      	ldr	r3, [pc, #120]	; (800388c <HAL_UART_MspInit+0x4d0>)
 8003814:	2200      	movs	r2, #0
 8003816:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003818:	4b1c      	ldr	r3, [pc, #112]	; (800388c <HAL_UART_MspInit+0x4d0>)
 800381a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800381e:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003820:	4b1a      	ldr	r3, [pc, #104]	; (800388c <HAL_UART_MspInit+0x4d0>)
 8003822:	2200      	movs	r2, #0
 8003824:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003826:	4b19      	ldr	r3, [pc, #100]	; (800388c <HAL_UART_MspInit+0x4d0>)
 8003828:	2200      	movs	r2, #0
 800382a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 800382c:	4817      	ldr	r0, [pc, #92]	; (800388c <HAL_UART_MspInit+0x4d0>)
 800382e:	f000 fe5f 	bl	80044f0 <HAL_DMA_Init>
 8003832:	4603      	mov	r3, r0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d001      	beq.n	800383c <HAL_UART_MspInit+0x480>
      Error_Handler();
 8003838:	f7fe fd4e 	bl	80022d8 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a13      	ldr	r2, [pc, #76]	; (800388c <HAL_UART_MspInit+0x4d0>)
 8003840:	639a      	str	r2, [r3, #56]	; 0x38
 8003842:	4a12      	ldr	r2, [pc, #72]	; (800388c <HAL_UART_MspInit+0x4d0>)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003848:	2200      	movs	r2, #0
 800384a:	2100      	movs	r1, #0
 800384c:	2027      	movs	r0, #39	; 0x27
 800384e:	f000 fe25 	bl	800449c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003852:	2027      	movs	r0, #39	; 0x27
 8003854:	f000 fe3e 	bl	80044d4 <HAL_NVIC_EnableIRQ>
}
 8003858:	bf00      	nop
 800385a:	3748      	adds	r7, #72	; 0x48
 800385c:	46bd      	mov	sp, r7
 800385e:	bd80      	pop	{r7, pc}
 8003860:	40011000 	.word	0x40011000
 8003864:	40023800 	.word	0x40023800
 8003868:	40020000 	.word	0x40020000
 800386c:	2000103c 	.word	0x2000103c
 8003870:	40026440 	.word	0x40026440
 8003874:	40004400 	.word	0x40004400
 8003878:	40020c00 	.word	0x40020c00
 800387c:	20000d8c 	.word	0x20000d8c
 8003880:	40026088 	.word	0x40026088
 8003884:	40004800 	.word	0x40004800
 8003888:	40020400 	.word	0x40020400
 800388c:	20000e7c 	.word	0x20000e7c
 8003890:	40026028 	.word	0x40026028

08003894 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b08c      	sub	sp, #48	; 0x30
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800389c:	2300      	movs	r3, #0
 800389e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80038a4:	2200      	movs	r2, #0
 80038a6:	6879      	ldr	r1, [r7, #4]
 80038a8:	2037      	movs	r0, #55	; 0x37
 80038aa:	f000 fdf7 	bl	800449c <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038ae:	2037      	movs	r0, #55	; 0x37
 80038b0:	f000 fe10 	bl	80044d4 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80038b4:	2300      	movs	r3, #0
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	4b1f      	ldr	r3, [pc, #124]	; (8003938 <HAL_InitTick+0xa4>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	4a1e      	ldr	r2, [pc, #120]	; (8003938 <HAL_InitTick+0xa4>)
 80038be:	f043 0320 	orr.w	r3, r3, #32
 80038c2:	6413      	str	r3, [r2, #64]	; 0x40
 80038c4:	4b1c      	ldr	r3, [pc, #112]	; (8003938 <HAL_InitTick+0xa4>)
 80038c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c8:	f003 0320 	and.w	r3, r3, #32
 80038cc:	60fb      	str	r3, [r7, #12]
 80038ce:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038d0:	f107 0210 	add.w	r2, r7, #16
 80038d4:	f107 0314 	add.w	r3, r7, #20
 80038d8:	4611      	mov	r1, r2
 80038da:	4618      	mov	r0, r3
 80038dc:	f002 f840 	bl	8005960 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038e0:	f002 f816 	bl	8005910 <HAL_RCC_GetPCLK1Freq>
 80038e4:	4603      	mov	r3, r0
 80038e6:	005b      	lsls	r3, r3, #1
 80038e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ec:	4a13      	ldr	r2, [pc, #76]	; (800393c <HAL_InitTick+0xa8>)
 80038ee:	fba2 2303 	umull	r2, r3, r2, r3
 80038f2:	0c9b      	lsrs	r3, r3, #18
 80038f4:	3b01      	subs	r3, #1
 80038f6:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80038f8:	4b11      	ldr	r3, [pc, #68]	; (8003940 <HAL_InitTick+0xac>)
 80038fa:	4a12      	ldr	r2, [pc, #72]	; (8003944 <HAL_InitTick+0xb0>)
 80038fc:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 80038fe:	4b10      	ldr	r3, [pc, #64]	; (8003940 <HAL_InitTick+0xac>)
 8003900:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003904:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003906:	4a0e      	ldr	r2, [pc, #56]	; (8003940 <HAL_InitTick+0xac>)
 8003908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 800390c:	4b0c      	ldr	r3, [pc, #48]	; (8003940 <HAL_InitTick+0xac>)
 800390e:	2200      	movs	r2, #0
 8003910:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003912:	4b0b      	ldr	r3, [pc, #44]	; (8003940 <HAL_InitTick+0xac>)
 8003914:	2200      	movs	r2, #0
 8003916:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003918:	4809      	ldr	r0, [pc, #36]	; (8003940 <HAL_InitTick+0xac>)
 800391a:	f002 fae3 	bl	8005ee4 <HAL_TIM_Base_Init>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d104      	bne.n	800392e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003924:	4806      	ldr	r0, [pc, #24]	; (8003940 <HAL_InitTick+0xac>)
 8003926:	f002 fb95 	bl	8006054 <HAL_TIM_Base_Start_IT>
 800392a:	4603      	mov	r3, r0
 800392c:	e000      	b.n	8003930 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
}
 8003930:	4618      	mov	r0, r3
 8003932:	3730      	adds	r7, #48	; 0x30
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	40023800 	.word	0x40023800
 800393c:	431bde83 	.word	0x431bde83
 8003940:	20001718 	.word	0x20001718
 8003944:	40001400 	.word	0x40001400

08003948 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003948:	b480      	push	{r7}
 800394a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800394c:	e7fe      	b.n	800394c <NMI_Handler+0x4>

0800394e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800394e:	b480      	push	{r7}
 8003950:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003952:	e7fe      	b.n	8003952 <HardFault_Handler+0x4>

08003954 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003954:	b480      	push	{r7}
 8003956:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003958:	e7fe      	b.n	8003958 <MemManage_Handler+0x4>

0800395a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800395a:	b480      	push	{r7}
 800395c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800395e:	e7fe      	b.n	800395e <BusFault_Handler+0x4>

08003960 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003960:	b480      	push	{r7}
 8003962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003964:	e7fe      	b.n	8003964 <UsageFault_Handler+0x4>

08003966 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003966:	b480      	push	{r7}
 8003968:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800396a:	bf00      	nop
 800396c:	46bd      	mov	sp, r7
 800396e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003972:	4770      	bx	lr

08003974 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003974:	b480      	push	{r7}
 8003976:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003978:	bf00      	nop
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003982:	b480      	push	{r7}
 8003984:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003986:	bf00      	nop
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003994:	bf00      	nop
 8003996:	46bd      	mov	sp, r7
 8003998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399c:	4770      	bx	lr
	...

080039a0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80039a4:	4802      	ldr	r0, [pc, #8]	; (80039b0 <DMA1_Stream0_IRQHandler+0x10>)
 80039a6:	f000 ff3b 	bl	8004820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039aa:	bf00      	nop
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	20001250 	.word	0x20001250

080039b4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039b8:	4802      	ldr	r0, [pc, #8]	; (80039c4 <DMA1_Stream1_IRQHandler+0x10>)
 80039ba:	f000 ff31 	bl	8004820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039be:	bf00      	nop
 80039c0:	bd80      	pop	{r7, pc}
 80039c2:	bf00      	nop
 80039c4:	20000e7c 	.word	0x20000e7c

080039c8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039c8:	b580      	push	{r7, lr}
 80039ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80039cc:	4802      	ldr	r0, [pc, #8]	; (80039d8 <DMA1_Stream2_IRQHandler+0x10>)
 80039ce:	f000 ff27 	bl	8004820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039d2:	bf00      	nop
 80039d4:	bd80      	pop	{r7, pc}
 80039d6:	bf00      	nop
 80039d8:	20000d2c 	.word	0x20000d2c

080039dc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <DMA1_Stream5_IRQHandler+0x10>)
 80039e2:	f000 ff1d 	bl	8004820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000d8c 	.word	0x20000d8c

080039f0 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80039f6:	f002 fcb5 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	200010e0 	.word	0x200010e0

08003a04 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0

	        	remoteUpdate(remoteBuffer + 16);
	        }
	    }*/
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <USART1_IRQHandler+0x10>)
 8003a0a:	f003 fcff 	bl	800740c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	2000109c 	.word	0x2000109c

08003a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern unsigned char ch110[82];
    if(USART2->SR & 0x10)
 8003a1e:	4b12      	ldr	r3, [pc, #72]	; (8003a68 <USART2_IRQHandler+0x50>)
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	f003 0310 	and.w	r3, r3, #16
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d016      	beq.n	8003a58 <USART2_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
 8003a2e:	4b0f      	ldr	r3, [pc, #60]	; (8003a6c <USART2_IRQHandler+0x54>)
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	607b      	str	r3, [r7, #4]
 8003a36:	4b0d      	ldr	r3, [pc, #52]	; (8003a6c <USART2_IRQHandler+0x54>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	607b      	str	r3, [r7, #4]
 8003a3e:	687b      	ldr	r3, [r7, #4]
        if(ch110[0] != 0x5a)
 8003a40:	4b0b      	ldr	r3, [pc, #44]	; (8003a70 <USART2_IRQHandler+0x58>)
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b5a      	cmp	r3, #90	; 0x5a
 8003a46:	d007      	beq.n	8003a58 <USART2_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart2);
 8003a48:	4808      	ldr	r0, [pc, #32]	; (8003a6c <USART2_IRQHandler+0x54>)
 8003a4a:	f003 fc83 	bl	8007354 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart2, ch110, 82);
 8003a4e:	2252      	movs	r2, #82	; 0x52
 8003a50:	4907      	ldr	r1, [pc, #28]	; (8003a70 <USART2_IRQHandler+0x58>)
 8003a52:	4806      	ldr	r0, [pc, #24]	; (8003a6c <USART2_IRQHandler+0x54>)
 8003a54:	f003 fc4e 	bl	80072f4 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a58:	4804      	ldr	r0, [pc, #16]	; (8003a6c <USART2_IRQHandler+0x54>)
 8003a5a:	f003 fcd7 	bl	800740c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	3708      	adds	r7, #8
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40004400 	.word	0x40004400
 8003a6c:	2000120c 	.word	0x2000120c
 8003a70:	20000cb0 	.word	0x20000cb0

08003a74 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

    extern unsigned char deepSensorBuff[20];
    if(USART3->SR & 0x10)
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <USART3_IRQHandler+0x5c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0310 	and.w	r3, r3, #16
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d01d      	beq.n	8003ac2 <USART3_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	4b12      	ldr	r3, [pc, #72]	; (8003ad4 <USART3_IRQHandler+0x60>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	4b10      	ldr	r3, [pc, #64]	; (8003ad4 <USART3_IRQHandler+0x60>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	685b      	ldr	r3, [r3, #4]
 8003a98:	607b      	str	r3, [r7, #4]
 8003a9a:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart3);
 8003a9c:	480d      	ldr	r0, [pc, #52]	; (8003ad4 <USART3_IRQHandler+0x60>)
 8003a9e:	f003 fc59 	bl	8007354 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart3, deepSensorBuff, 20);
 8003aa2:	2214      	movs	r2, #20
 8003aa4:	490c      	ldr	r1, [pc, #48]	; (8003ad8 <USART3_IRQHandler+0x64>)
 8003aa6:	480b      	ldr	r0, [pc, #44]	; (8003ad4 <USART3_IRQHandler+0x60>)
 8003aa8:	f003 fc24 	bl	80072f4 <HAL_UART_Receive_DMA>
        if (0x54 == deepSensorBuff[0]&&0x3D == deepSensorBuff[1])
 8003aac:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <USART3_IRQHandler+0x64>)
 8003aae:	781b      	ldrb	r3, [r3, #0]
 8003ab0:	2b54      	cmp	r3, #84	; 0x54
 8003ab2:	d106      	bne.n	8003ac2 <USART3_IRQHandler+0x4e>
 8003ab4:	4b08      	ldr	r3, [pc, #32]	; (8003ad8 <USART3_IRQHandler+0x64>)
 8003ab6:	785b      	ldrb	r3, [r3, #1]
 8003ab8:	2b3d      	cmp	r3, #61	; 0x3d
 8003aba:	d102      	bne.n	8003ac2 <USART3_IRQHandler+0x4e>
        {
        	void deepSensorUpdate(uint8_t * deepSensorBuff);

        	deepSensorUpdate(deepSensorBuff);
 8003abc:	4806      	ldr	r0, [pc, #24]	; (8003ad8 <USART3_IRQHandler+0x64>)
 8003abe:	f7fd fc7d 	bl	80013bc <deepSensorUpdate>
        }
    }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ac2:	4804      	ldr	r0, [pc, #16]	; (8003ad4 <USART3_IRQHandler+0x60>)
 8003ac4:	f003 fca2 	bl	800740c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003ac8:	bf00      	nop
 8003aca:	3708      	adds	r7, #8
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40004800 	.word	0x40004800
 8003ad4:	20000edc 	.word	0x20000edc
 8003ad8:	20000d18 	.word	0x20000d18

08003adc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
    extern unsigned char raspiBuffer[82];
    if(UART4->SR & 0x10)
 8003ae2:	4b12      	ldr	r3, [pc, #72]	; (8003b2c <UART4_IRQHandler+0x50>)
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f003 0310 	and.w	r3, r3, #16
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d016      	beq.n	8003b1c <UART4_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8003aee:	2300      	movs	r3, #0
 8003af0:	607b      	str	r3, [r7, #4]
 8003af2:	4b0f      	ldr	r3, [pc, #60]	; (8003b30 <UART4_IRQHandler+0x54>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	607b      	str	r3, [r7, #4]
 8003afa:	4b0d      	ldr	r3, [pc, #52]	; (8003b30 <UART4_IRQHandler+0x54>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	607b      	str	r3, [r7, #4]
 8003b02:	687b      	ldr	r3, [r7, #4]
        if(raspiBuffer[0] != 0x5a)
 8003b04:	4b0b      	ldr	r3, [pc, #44]	; (8003b34 <UART4_IRQHandler+0x58>)
 8003b06:	781b      	ldrb	r3, [r3, #0]
 8003b08:	2b5a      	cmp	r3, #90	; 0x5a
 8003b0a:	d007      	beq.n	8003b1c <UART4_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart4);
 8003b0c:	4808      	ldr	r0, [pc, #32]	; (8003b30 <UART4_IRQHandler+0x54>)
 8003b0e:	f003 fc21 	bl	8007354 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart4, raspiBuffer, 12);
 8003b12:	220c      	movs	r2, #12
 8003b14:	4907      	ldr	r1, [pc, #28]	; (8003b34 <UART4_IRQHandler+0x58>)
 8003b16:	4806      	ldr	r0, [pc, #24]	; (8003b30 <UART4_IRQHandler+0x54>)
 8003b18:	f003 fbec 	bl	80072f4 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b1c:	4804      	ldr	r0, [pc, #16]	; (8003b30 <UART4_IRQHandler+0x54>)
 8003b1e:	f003 fc75 	bl	800740c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b22:	bf00      	nop
 8003b24:	3708      	adds	r7, #8
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bd80      	pop	{r7, pc}
 8003b2a:	bf00      	nop
 8003b2c:	40004c00 	.word	0x40004c00
 8003b30:	20001128 	.word	0x20001128
 8003b34:	20000be8 	.word	0x20000be8

08003b38 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b082      	sub	sp, #8
 8003b3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

    extern unsigned char remoteBuffer[32];
    if(UART5->SR & 0x10)
 8003b3e:	4b15      	ldr	r3, [pc, #84]	; (8003b94 <UART5_IRQHandler+0x5c>)
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d01d      	beq.n	8003b86 <UART5_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	607b      	str	r3, [r7, #4]
 8003b4e:	4b12      	ldr	r3, [pc, #72]	; (8003b98 <UART5_IRQHandler+0x60>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	607b      	str	r3, [r7, #4]
 8003b56:	4b10      	ldr	r3, [pc, #64]	; (8003b98 <UART5_IRQHandler+0x60>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	607b      	str	r3, [r7, #4]
 8003b5e:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart5);
 8003b60:	480d      	ldr	r0, [pc, #52]	; (8003b98 <UART5_IRQHandler+0x60>)
 8003b62:	f003 fbf7 	bl	8007354 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart5, remoteBuffer, 25);
 8003b66:	2219      	movs	r2, #25
 8003b68:	490c      	ldr	r1, [pc, #48]	; (8003b9c <UART5_IRQHandler+0x64>)
 8003b6a:	480b      	ldr	r0, [pc, #44]	; (8003b98 <UART5_IRQHandler+0x60>)
 8003b6c:	f003 fbc2 	bl	80072f4 <HAL_UART_Receive_DMA>
        if (0x5a == remoteBuffer[0]&&0xa5 == remoteBuffer[1])
 8003b70:	4b0a      	ldr	r3, [pc, #40]	; (8003b9c <UART5_IRQHandler+0x64>)
 8003b72:	781b      	ldrb	r3, [r3, #0]
 8003b74:	2b5a      	cmp	r3, #90	; 0x5a
 8003b76:	d106      	bne.n	8003b86 <UART5_IRQHandler+0x4e>
 8003b78:	4b08      	ldr	r3, [pc, #32]	; (8003b9c <UART5_IRQHandler+0x64>)
 8003b7a:	785b      	ldrb	r3, [r3, #1]
 8003b7c:	2ba5      	cmp	r3, #165	; 0xa5
 8003b7e:	d102      	bne.n	8003b86 <UART5_IRQHandler+0x4e>
        {
        	void remoteUpdate(uint8_t * remoteBuffer);

        	remoteUpdate(remoteBuffer);
 8003b80:	4806      	ldr	r0, [pc, #24]	; (8003b9c <UART5_IRQHandler+0x64>)
 8003b82:	f7ff f863 	bl	8002c4c <remoteUpdate>
        }
    }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b86:	4804      	ldr	r0, [pc, #16]	; (8003b98 <UART5_IRQHandler+0x60>)
 8003b88:	f003 fc40 	bl	800740c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003b8c:	bf00      	nop
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}
 8003b94:	40005000 	.word	0x40005000
 8003b98:	20000fb0 	.word	0x20000fb0
 8003b9c:	20000c18 	.word	0x20000c18

08003ba0 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ba4:	4802      	ldr	r0, [pc, #8]	; (8003bb0 <TIM7_IRQHandler+0x10>)
 8003ba6:	f002 fbdd 	bl	8006364 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003baa:	bf00      	nop
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20001718 	.word	0x20001718

08003bb4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003bb8:	4802      	ldr	r0, [pc, #8]	; (8003bc4 <DMA2_Stream2_IRQHandler+0x10>)
 8003bba:	f000 fe31 	bl	8004820 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003bbe:	bf00      	nop
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	2000103c 	.word	0x2000103c

08003bc8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
	return 1;
 8003bcc:	2301      	movs	r3, #1
}
 8003bce:	4618      	mov	r0, r3
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <_kill>:

int _kill(int pid, int sig)
{
 8003bd8:	b580      	push	{r7, lr}
 8003bda:	b082      	sub	sp, #8
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003be2:	f004 fa5b 	bl	800809c <__errno>
 8003be6:	4603      	mov	r3, r0
 8003be8:	2216      	movs	r2, #22
 8003bea:	601a      	str	r2, [r3, #0]
	return -1;
 8003bec:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	3708      	adds	r7, #8
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bd80      	pop	{r7, pc}

08003bf8 <_exit>:

void _exit (int status)
{
 8003bf8:	b580      	push	{r7, lr}
 8003bfa:	b082      	sub	sp, #8
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c00:	f04f 31ff 	mov.w	r1, #4294967295
 8003c04:	6878      	ldr	r0, [r7, #4]
 8003c06:	f7ff ffe7 	bl	8003bd8 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c0a:	e7fe      	b.n	8003c0a <_exit+0x12>

08003c0c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c0c:	b580      	push	{r7, lr}
 8003c0e:	b086      	sub	sp, #24
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c18:	2300      	movs	r3, #0
 8003c1a:	617b      	str	r3, [r7, #20]
 8003c1c:	e00a      	b.n	8003c34 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c1e:	f3af 8000 	nop.w
 8003c22:	4601      	mov	r1, r0
 8003c24:	68bb      	ldr	r3, [r7, #8]
 8003c26:	1c5a      	adds	r2, r3, #1
 8003c28:	60ba      	str	r2, [r7, #8]
 8003c2a:	b2ca      	uxtb	r2, r1
 8003c2c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c2e:	697b      	ldr	r3, [r7, #20]
 8003c30:	3301      	adds	r3, #1
 8003c32:	617b      	str	r3, [r7, #20]
 8003c34:	697a      	ldr	r2, [r7, #20]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	dbf0      	blt.n	8003c1e <_read+0x12>
	}

return len;
 8003c3c:	687b      	ldr	r3, [r7, #4]
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3718      	adds	r7, #24
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
	return -1;
 8003c4e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	370c      	adds	r7, #12
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr

08003c5e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c5e:	b480      	push	{r7}
 8003c60:	b083      	sub	sp, #12
 8003c62:	af00      	add	r7, sp, #0
 8003c64:	6078      	str	r0, [r7, #4]
 8003c66:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c6e:	605a      	str	r2, [r3, #4]
	return 0;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	370c      	adds	r7, #12
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr

08003c7e <_isatty>:

int _isatty(int file)
{
 8003c7e:	b480      	push	{r7}
 8003c80:	b083      	sub	sp, #12
 8003c82:	af00      	add	r7, sp, #0
 8003c84:	6078      	str	r0, [r7, #4]
	return 1;
 8003c86:	2301      	movs	r3, #1
}
 8003c88:	4618      	mov	r0, r3
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr

08003c94 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	60f8      	str	r0, [r7, #12]
 8003c9c:	60b9      	str	r1, [r7, #8]
 8003c9e:	607a      	str	r2, [r7, #4]
	return 0;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3714      	adds	r7, #20
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cb8:	4a14      	ldr	r2, [pc, #80]	; (8003d0c <_sbrk+0x5c>)
 8003cba:	4b15      	ldr	r3, [pc, #84]	; (8003d10 <_sbrk+0x60>)
 8003cbc:	1ad3      	subs	r3, r2, r3
 8003cbe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc0:	697b      	ldr	r3, [r7, #20]
 8003cc2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc4:	4b13      	ldr	r3, [pc, #76]	; (8003d14 <_sbrk+0x64>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ccc:	4b11      	ldr	r3, [pc, #68]	; (8003d14 <_sbrk+0x64>)
 8003cce:	4a12      	ldr	r2, [pc, #72]	; (8003d18 <_sbrk+0x68>)
 8003cd0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd2:	4b10      	ldr	r3, [pc, #64]	; (8003d14 <_sbrk+0x64>)
 8003cd4:	681a      	ldr	r2, [r3, #0]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4413      	add	r3, r2
 8003cda:	693a      	ldr	r2, [r7, #16]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	d207      	bcs.n	8003cf0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce0:	f004 f9dc 	bl	800809c <__errno>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	220c      	movs	r2, #12
 8003ce8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cea:	f04f 33ff 	mov.w	r3, #4294967295
 8003cee:	e009      	b.n	8003d04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf0:	4b08      	ldr	r3, [pc, #32]	; (8003d14 <_sbrk+0x64>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cf6:	4b07      	ldr	r3, [pc, #28]	; (8003d14 <_sbrk+0x64>)
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4413      	add	r3, r2
 8003cfe:	4a05      	ldr	r2, [pc, #20]	; (8003d14 <_sbrk+0x64>)
 8003d00:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d02:	68fb      	ldr	r3, [r7, #12]
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	20020000 	.word	0x20020000
 8003d10:	00000400 	.word	0x00000400
 8003d14:	20000c58 	.word	0x20000c58
 8003d18:	20001778 	.word	0x20001778

08003d1c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d1c:	b480      	push	{r7}
 8003d1e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d20:	4b08      	ldr	r3, [pc, #32]	; (8003d44 <SystemInit+0x28>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	4a07      	ldr	r2, [pc, #28]	; (8003d44 <SystemInit+0x28>)
 8003d28:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d2c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d30:	4b04      	ldr	r3, [pc, #16]	; (8003d44 <SystemInit+0x28>)
 8003d32:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d36:	609a      	str	r2, [r3, #8]
#endif
}
 8003d38:	bf00      	nop
 8003d3a:	46bd      	mov	sp, r7
 8003d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d40:	4770      	bx	lr
 8003d42:	bf00      	nop
 8003d44:	e000ed00 	.word	0xe000ed00

08003d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d80 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d4c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d4e:	e003      	b.n	8003d58 <LoopCopyDataInit>

08003d50 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d50:	4b0c      	ldr	r3, [pc, #48]	; (8003d84 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d52:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d54:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d56:	3104      	adds	r1, #4

08003d58 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d58:	480b      	ldr	r0, [pc, #44]	; (8003d88 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d5a:	4b0c      	ldr	r3, [pc, #48]	; (8003d8c <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d5c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d5e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d60:	d3f6      	bcc.n	8003d50 <CopyDataInit>
  ldr  r2, =_sbss
 8003d62:	4a0b      	ldr	r2, [pc, #44]	; (8003d90 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d64:	e002      	b.n	8003d6c <LoopFillZerobss>

08003d66 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d66:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d68:	f842 3b04 	str.w	r3, [r2], #4

08003d6c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d6c:	4b09      	ldr	r3, [pc, #36]	; (8003d94 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d6e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d70:	d3f9      	bcc.n	8003d66 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d72:	f7ff ffd3 	bl	8003d1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d76:	f004 f997 	bl	80080a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d7a:	f7fd fbb7 	bl	80014ec <main>
  bx  lr    
 8003d7e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d80:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d84:	08010b5c 	.word	0x08010b5c
  ldr  r0, =_sdata
 8003d88:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d8c:	20000bac 	.word	0x20000bac
  ldr  r2, =_sbss
 8003d90:	20000bac 	.word	0x20000bac
  ldr  r3, = _ebss
 8003d94:	20001774 	.word	0x20001774

08003d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d98:	e7fe      	b.n	8003d98 <ADC_IRQHandler>
	...

08003d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003da0:	4b0e      	ldr	r3, [pc, #56]	; (8003ddc <HAL_Init+0x40>)
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a0d      	ldr	r2, [pc, #52]	; (8003ddc <HAL_Init+0x40>)
 8003da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_Init+0x40>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4a0a      	ldr	r2, [pc, #40]	; (8003ddc <HAL_Init+0x40>)
 8003db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003db8:	4b08      	ldr	r3, [pc, #32]	; (8003ddc <HAL_Init+0x40>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	4a07      	ldr	r2, [pc, #28]	; (8003ddc <HAL_Init+0x40>)
 8003dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc4:	2003      	movs	r0, #3
 8003dc6:	f000 fb5e 	bl	8004486 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dca:	2000      	movs	r0, #0
 8003dcc:	f7ff fd62 	bl	8003894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd0:	f7ff f84c 	bl	8002e6c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd4:	2300      	movs	r3, #0
}
 8003dd6:	4618      	mov	r0, r3
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023c00 	.word	0x40023c00

08003de0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de0:	b480      	push	{r7}
 8003de2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de4:	4b06      	ldr	r3, [pc, #24]	; (8003e00 <HAL_IncTick+0x20>)
 8003de6:	781b      	ldrb	r3, [r3, #0]
 8003de8:	461a      	mov	r2, r3
 8003dea:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x24>)
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	4413      	add	r3, r2
 8003df0:	4a04      	ldr	r2, [pc, #16]	; (8003e04 <HAL_IncTick+0x24>)
 8003df2:	6013      	str	r3, [r2, #0]
}
 8003df4:	bf00      	nop
 8003df6:	46bd      	mov	sp, r7
 8003df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfc:	4770      	bx	lr
 8003dfe:	bf00      	nop
 8003e00:	200001f4 	.word	0x200001f4
 8003e04:	20001760 	.word	0x20001760

08003e08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e08:	b480      	push	{r7}
 8003e0a:	af00      	add	r7, sp, #0
  return uwTick;
 8003e0c:	4b03      	ldr	r3, [pc, #12]	; (8003e1c <HAL_GetTick+0x14>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	46bd      	mov	sp, r7
 8003e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	20001760 	.word	0x20001760

08003e20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b084      	sub	sp, #16
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e28:	f7ff ffee 	bl	8003e08 <HAL_GetTick>
 8003e2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e38:	d005      	beq.n	8003e46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e3a:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_Delay+0x44>)
 8003e3c:	781b      	ldrb	r3, [r3, #0]
 8003e3e:	461a      	mov	r2, r3
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	4413      	add	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e46:	bf00      	nop
 8003e48:	f7ff ffde 	bl	8003e08 <HAL_GetTick>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	1ad3      	subs	r3, r2, r3
 8003e52:	68fa      	ldr	r2, [r7, #12]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	d8f7      	bhi.n	8003e48 <HAL_Delay+0x28>
  {
  }
}
 8003e58:	bf00      	nop
 8003e5a:	bf00      	nop
 8003e5c:	3710      	adds	r7, #16
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	bd80      	pop	{r7, pc}
 8003e62:	bf00      	nop
 8003e64:	200001f4 	.word	0x200001f4

08003e68 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b084      	sub	sp, #16
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e70:	2300      	movs	r3, #0
 8003e72:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d101      	bne.n	8003e7e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e033      	b.n	8003ee6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d109      	bne.n	8003e9a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e86:	6878      	ldr	r0, [r7, #4]
 8003e88:	f7ff f818 	bl	8002ebc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e9e:	f003 0310 	and.w	r3, r3, #16
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d118      	bne.n	8003ed8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eaa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eae:	f023 0302 	bic.w	r3, r3, #2
 8003eb2:	f043 0202 	orr.w	r2, r3, #2
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f93a 	bl	8004134 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	2200      	movs	r2, #0
 8003ec4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eca:	f023 0303 	bic.w	r3, r3, #3
 8003ece:	f043 0201 	orr.w	r2, r3, #1
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed6:	e001      	b.n	8003edc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2200      	movs	r2, #0
 8003ee0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
	...

08003ef0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ef0:	b480      	push	{r7}
 8003ef2:	b085      	sub	sp, #20
 8003ef4:	af00      	add	r7, sp, #0
 8003ef6:	6078      	str	r0, [r7, #4]
 8003ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003efa:	2300      	movs	r3, #0
 8003efc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_ADC_ConfigChannel+0x1c>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e105      	b.n	8004118 <HAL_ADC_ConfigChannel+0x228>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	2b09      	cmp	r3, #9
 8003f1a:	d925      	bls.n	8003f68 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	68d9      	ldr	r1, [r3, #12]
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	b29b      	uxth	r3, r3
 8003f28:	461a      	mov	r2, r3
 8003f2a:	4613      	mov	r3, r2
 8003f2c:	005b      	lsls	r3, r3, #1
 8003f2e:	4413      	add	r3, r2
 8003f30:	3b1e      	subs	r3, #30
 8003f32:	2207      	movs	r2, #7
 8003f34:	fa02 f303 	lsl.w	r3, r2, r3
 8003f38:	43da      	mvns	r2, r3
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	400a      	ands	r2, r1
 8003f40:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68d9      	ldr	r1, [r3, #12]
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	689a      	ldr	r2, [r3, #8]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	4618      	mov	r0, r3
 8003f54:	4603      	mov	r3, r0
 8003f56:	005b      	lsls	r3, r3, #1
 8003f58:	4403      	add	r3, r0
 8003f5a:	3b1e      	subs	r3, #30
 8003f5c:	409a      	lsls	r2, r3
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	430a      	orrs	r2, r1
 8003f64:	60da      	str	r2, [r3, #12]
 8003f66:	e022      	b.n	8003fae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	6919      	ldr	r1, [r3, #16]
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	b29b      	uxth	r3, r3
 8003f74:	461a      	mov	r2, r3
 8003f76:	4613      	mov	r3, r2
 8003f78:	005b      	lsls	r3, r3, #1
 8003f7a:	4413      	add	r3, r2
 8003f7c:	2207      	movs	r2, #7
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43da      	mvns	r2, r3
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	400a      	ands	r2, r1
 8003f8a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	6919      	ldr	r1, [r3, #16]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	689a      	ldr	r2, [r3, #8]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	b29b      	uxth	r3, r3
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	4603      	mov	r3, r0
 8003fa0:	005b      	lsls	r3, r3, #1
 8003fa2:	4403      	add	r3, r0
 8003fa4:	409a      	lsls	r2, r3
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	430a      	orrs	r2, r1
 8003fac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	2b06      	cmp	r3, #6
 8003fb4:	d824      	bhi.n	8004000 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fbc:	683b      	ldr	r3, [r7, #0]
 8003fbe:	685a      	ldr	r2, [r3, #4]
 8003fc0:	4613      	mov	r3, r2
 8003fc2:	009b      	lsls	r3, r3, #2
 8003fc4:	4413      	add	r3, r2
 8003fc6:	3b05      	subs	r3, #5
 8003fc8:	221f      	movs	r2, #31
 8003fca:	fa02 f303 	lsl.w	r3, r2, r3
 8003fce:	43da      	mvns	r2, r3
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	400a      	ands	r2, r1
 8003fd6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	b29b      	uxth	r3, r3
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685a      	ldr	r2, [r3, #4]
 8003fea:	4613      	mov	r3, r2
 8003fec:	009b      	lsls	r3, r3, #2
 8003fee:	4413      	add	r3, r2
 8003ff0:	3b05      	subs	r3, #5
 8003ff2:	fa00 f203 	lsl.w	r2, r0, r3
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	635a      	str	r2, [r3, #52]	; 0x34
 8003ffe:	e04c      	b.n	800409a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004000:	683b      	ldr	r3, [r7, #0]
 8004002:	685b      	ldr	r3, [r3, #4]
 8004004:	2b0c      	cmp	r3, #12
 8004006:	d824      	bhi.n	8004052 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800400e:	683b      	ldr	r3, [r7, #0]
 8004010:	685a      	ldr	r2, [r3, #4]
 8004012:	4613      	mov	r3, r2
 8004014:	009b      	lsls	r3, r3, #2
 8004016:	4413      	add	r3, r2
 8004018:	3b23      	subs	r3, #35	; 0x23
 800401a:	221f      	movs	r2, #31
 800401c:	fa02 f303 	lsl.w	r3, r2, r3
 8004020:	43da      	mvns	r2, r3
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	400a      	ands	r2, r1
 8004028:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004030:	683b      	ldr	r3, [r7, #0]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	b29b      	uxth	r3, r3
 8004036:	4618      	mov	r0, r3
 8004038:	683b      	ldr	r3, [r7, #0]
 800403a:	685a      	ldr	r2, [r3, #4]
 800403c:	4613      	mov	r3, r2
 800403e:	009b      	lsls	r3, r3, #2
 8004040:	4413      	add	r3, r2
 8004042:	3b23      	subs	r3, #35	; 0x23
 8004044:	fa00 f203 	lsl.w	r2, r0, r3
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	631a      	str	r2, [r3, #48]	; 0x30
 8004050:	e023      	b.n	800409a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	4613      	mov	r3, r2
 800405e:	009b      	lsls	r3, r3, #2
 8004060:	4413      	add	r3, r2
 8004062:	3b41      	subs	r3, #65	; 0x41
 8004064:	221f      	movs	r2, #31
 8004066:	fa02 f303 	lsl.w	r3, r2, r3
 800406a:	43da      	mvns	r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	400a      	ands	r2, r1
 8004072:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	b29b      	uxth	r3, r3
 8004080:	4618      	mov	r0, r3
 8004082:	683b      	ldr	r3, [r7, #0]
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	4613      	mov	r3, r2
 8004088:	009b      	lsls	r3, r3, #2
 800408a:	4413      	add	r3, r2
 800408c:	3b41      	subs	r3, #65	; 0x41
 800408e:	fa00 f203 	lsl.w	r2, r0, r3
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	430a      	orrs	r2, r1
 8004098:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800409a:	4b22      	ldr	r3, [pc, #136]	; (8004124 <HAL_ADC_ConfigChannel+0x234>)
 800409c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a21      	ldr	r2, [pc, #132]	; (8004128 <HAL_ADC_ConfigChannel+0x238>)
 80040a4:	4293      	cmp	r3, r2
 80040a6:	d109      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x1cc>
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	2b12      	cmp	r3, #18
 80040ae:	d105      	bne.n	80040bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	685b      	ldr	r3, [r3, #4]
 80040b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	4a19      	ldr	r2, [pc, #100]	; (8004128 <HAL_ADC_ConfigChannel+0x238>)
 80040c2:	4293      	cmp	r3, r2
 80040c4:	d123      	bne.n	800410e <HAL_ADC_ConfigChannel+0x21e>
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	2b10      	cmp	r3, #16
 80040cc:	d003      	beq.n	80040d6 <HAL_ADC_ConfigChannel+0x1e6>
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	2b11      	cmp	r3, #17
 80040d4:	d11b      	bne.n	800410e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	2b10      	cmp	r3, #16
 80040e8:	d111      	bne.n	800410e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040ea:	4b10      	ldr	r3, [pc, #64]	; (800412c <HAL_ADC_ConfigChannel+0x23c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	4a10      	ldr	r2, [pc, #64]	; (8004130 <HAL_ADC_ConfigChannel+0x240>)
 80040f0:	fba2 2303 	umull	r2, r3, r2, r3
 80040f4:	0c9a      	lsrs	r2, r3, #18
 80040f6:	4613      	mov	r3, r2
 80040f8:	009b      	lsls	r3, r3, #2
 80040fa:	4413      	add	r3, r2
 80040fc:	005b      	lsls	r3, r3, #1
 80040fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004100:	e002      	b.n	8004108 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	3b01      	subs	r3, #1
 8004106:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1f9      	bne.n	8004102 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004116:	2300      	movs	r3, #0
}
 8004118:	4618      	mov	r0, r3
 800411a:	3714      	adds	r7, #20
 800411c:	46bd      	mov	sp, r7
 800411e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004122:	4770      	bx	lr
 8004124:	40012300 	.word	0x40012300
 8004128:	40012000 	.word	0x40012000
 800412c:	200001ec 	.word	0x200001ec
 8004130:	431bde83 	.word	0x431bde83

08004134 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004134:	b480      	push	{r7}
 8004136:	b085      	sub	sp, #20
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800413c:	4b79      	ldr	r3, [pc, #484]	; (8004324 <ADC_Init+0x1f0>)
 800413e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	431a      	orrs	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	685a      	ldr	r2, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004168:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	6859      	ldr	r1, [r3, #4]
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	691b      	ldr	r3, [r3, #16]
 8004174:	021a      	lsls	r2, r3, #8
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	430a      	orrs	r2, r1
 800417c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	685a      	ldr	r2, [r3, #4]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800418c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	6859      	ldr	r1, [r3, #4]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	430a      	orrs	r2, r1
 800419e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	689a      	ldr	r2, [r3, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6899      	ldr	r1, [r3, #8]
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	68da      	ldr	r2, [r3, #12]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	430a      	orrs	r2, r1
 80041c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041c6:	4a58      	ldr	r2, [pc, #352]	; (8004328 <ADC_Init+0x1f4>)
 80041c8:	4293      	cmp	r3, r2
 80041ca:	d022      	beq.n	8004212 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	689a      	ldr	r2, [r3, #8]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6899      	ldr	r1, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	430a      	orrs	r2, r1
 80041ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80041fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	6899      	ldr	r1, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	430a      	orrs	r2, r1
 800420e:	609a      	str	r2, [r3, #8]
 8004210:	e00f      	b.n	8004232 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	689a      	ldr	r2, [r3, #8]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004220:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004230:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	689a      	ldr	r2, [r3, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0202 	bic.w	r2, r2, #2
 8004240:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	6899      	ldr	r1, [r3, #8]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	7e1b      	ldrb	r3, [r3, #24]
 800424c:	005a      	lsls	r2, r3, #1
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	430a      	orrs	r2, r1
 8004254:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f893 3020 	ldrb.w	r3, [r3, #32]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d01b      	beq.n	8004298 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	685a      	ldr	r2, [r3, #4]
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800426e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	685a      	ldr	r2, [r3, #4]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800427e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	6859      	ldr	r1, [r3, #4]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428a:	3b01      	subs	r3, #1
 800428c:	035a      	lsls	r2, r3, #13
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]
 8004296:	e007      	b.n	80042a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	69db      	ldr	r3, [r3, #28]
 80042c2:	3b01      	subs	r3, #1
 80042c4:	051a      	lsls	r2, r3, #20
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	430a      	orrs	r2, r1
 80042cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	6899      	ldr	r1, [r3, #8]
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ea:	025a      	lsls	r2, r3, #9
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004302:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	6899      	ldr	r1, [r3, #8]
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	695b      	ldr	r3, [r3, #20]
 800430e:	029a      	lsls	r2, r3, #10
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	430a      	orrs	r2, r1
 8004316:	609a      	str	r2, [r3, #8]
}
 8004318:	bf00      	nop
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40012300 	.word	0x40012300
 8004328:	0f000001 	.word	0x0f000001

0800432c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800432c:	b480      	push	{r7}
 800432e:	b085      	sub	sp, #20
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	f003 0307 	and.w	r3, r3, #7
 800433a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800433c:	4b0c      	ldr	r3, [pc, #48]	; (8004370 <__NVIC_SetPriorityGrouping+0x44>)
 800433e:	68db      	ldr	r3, [r3, #12]
 8004340:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004342:	68ba      	ldr	r2, [r7, #8]
 8004344:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004348:	4013      	ands	r3, r2
 800434a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004354:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004358:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800435c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800435e:	4a04      	ldr	r2, [pc, #16]	; (8004370 <__NVIC_SetPriorityGrouping+0x44>)
 8004360:	68bb      	ldr	r3, [r7, #8]
 8004362:	60d3      	str	r3, [r2, #12]
}
 8004364:	bf00      	nop
 8004366:	3714      	adds	r7, #20
 8004368:	46bd      	mov	sp, r7
 800436a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800436e:	4770      	bx	lr
 8004370:	e000ed00 	.word	0xe000ed00

08004374 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004374:	b480      	push	{r7}
 8004376:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004378:	4b04      	ldr	r3, [pc, #16]	; (800438c <__NVIC_GetPriorityGrouping+0x18>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	0a1b      	lsrs	r3, r3, #8
 800437e:	f003 0307 	and.w	r3, r3, #7
}
 8004382:	4618      	mov	r0, r3
 8004384:	46bd      	mov	sp, r7
 8004386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438a:	4770      	bx	lr
 800438c:	e000ed00 	.word	0xe000ed00

08004390 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004390:	b480      	push	{r7}
 8004392:	b083      	sub	sp, #12
 8004394:	af00      	add	r7, sp, #0
 8004396:	4603      	mov	r3, r0
 8004398:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	db0b      	blt.n	80043ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a2:	79fb      	ldrb	r3, [r7, #7]
 80043a4:	f003 021f 	and.w	r2, r3, #31
 80043a8:	4907      	ldr	r1, [pc, #28]	; (80043c8 <__NVIC_EnableIRQ+0x38>)
 80043aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	2001      	movs	r0, #1
 80043b2:	fa00 f202 	lsl.w	r2, r0, r2
 80043b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043ba:	bf00      	nop
 80043bc:	370c      	adds	r7, #12
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	e000e100 	.word	0xe000e100

080043cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	6039      	str	r1, [r7, #0]
 80043d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043dc:	2b00      	cmp	r3, #0
 80043de:	db0a      	blt.n	80043f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	b2da      	uxtb	r2, r3
 80043e4:	490c      	ldr	r1, [pc, #48]	; (8004418 <__NVIC_SetPriority+0x4c>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	0112      	lsls	r2, r2, #4
 80043ec:	b2d2      	uxtb	r2, r2
 80043ee:	440b      	add	r3, r1
 80043f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f4:	e00a      	b.n	800440c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043f6:	683b      	ldr	r3, [r7, #0]
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	4908      	ldr	r1, [pc, #32]	; (800441c <__NVIC_SetPriority+0x50>)
 80043fc:	79fb      	ldrb	r3, [r7, #7]
 80043fe:	f003 030f 	and.w	r3, r3, #15
 8004402:	3b04      	subs	r3, #4
 8004404:	0112      	lsls	r2, r2, #4
 8004406:	b2d2      	uxtb	r2, r2
 8004408:	440b      	add	r3, r1
 800440a:	761a      	strb	r2, [r3, #24]
}
 800440c:	bf00      	nop
 800440e:	370c      	adds	r7, #12
 8004410:	46bd      	mov	sp, r7
 8004412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004416:	4770      	bx	lr
 8004418:	e000e100 	.word	0xe000e100
 800441c:	e000ed00 	.word	0xe000ed00

08004420 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004420:	b480      	push	{r7}
 8004422:	b089      	sub	sp, #36	; 0x24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f003 0307 	and.w	r3, r3, #7
 8004432:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	f1c3 0307 	rsb	r3, r3, #7
 800443a:	2b04      	cmp	r3, #4
 800443c:	bf28      	it	cs
 800443e:	2304      	movcs	r3, #4
 8004440:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004442:	69fb      	ldr	r3, [r7, #28]
 8004444:	3304      	adds	r3, #4
 8004446:	2b06      	cmp	r3, #6
 8004448:	d902      	bls.n	8004450 <NVIC_EncodePriority+0x30>
 800444a:	69fb      	ldr	r3, [r7, #28]
 800444c:	3b03      	subs	r3, #3
 800444e:	e000      	b.n	8004452 <NVIC_EncodePriority+0x32>
 8004450:	2300      	movs	r3, #0
 8004452:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004454:	f04f 32ff 	mov.w	r2, #4294967295
 8004458:	69bb      	ldr	r3, [r7, #24]
 800445a:	fa02 f303 	lsl.w	r3, r2, r3
 800445e:	43da      	mvns	r2, r3
 8004460:	68bb      	ldr	r3, [r7, #8]
 8004462:	401a      	ands	r2, r3
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004468:	f04f 31ff 	mov.w	r1, #4294967295
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	43d9      	mvns	r1, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004478:	4313      	orrs	r3, r2
         );
}
 800447a:	4618      	mov	r0, r3
 800447c:	3724      	adds	r7, #36	; 0x24
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f7ff ff4c 	bl	800432c <__NVIC_SetPriorityGrouping>
}
 8004494:	bf00      	nop
 8004496:	3708      	adds	r7, #8
 8004498:	46bd      	mov	sp, r7
 800449a:	bd80      	pop	{r7, pc}

0800449c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800449c:	b580      	push	{r7, lr}
 800449e:	b086      	sub	sp, #24
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	4603      	mov	r3, r0
 80044a4:	60b9      	str	r1, [r7, #8]
 80044a6:	607a      	str	r2, [r7, #4]
 80044a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044aa:	2300      	movs	r3, #0
 80044ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ae:	f7ff ff61 	bl	8004374 <__NVIC_GetPriorityGrouping>
 80044b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b4:	687a      	ldr	r2, [r7, #4]
 80044b6:	68b9      	ldr	r1, [r7, #8]
 80044b8:	6978      	ldr	r0, [r7, #20]
 80044ba:	f7ff ffb1 	bl	8004420 <NVIC_EncodePriority>
 80044be:	4602      	mov	r2, r0
 80044c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c4:	4611      	mov	r1, r2
 80044c6:	4618      	mov	r0, r3
 80044c8:	f7ff ff80 	bl	80043cc <__NVIC_SetPriority>
}
 80044cc:	bf00      	nop
 80044ce:	3718      	adds	r7, #24
 80044d0:	46bd      	mov	sp, r7
 80044d2:	bd80      	pop	{r7, pc}

080044d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	4603      	mov	r3, r0
 80044dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7ff ff54 	bl	8004390 <__NVIC_EnableIRQ>
}
 80044e8:	bf00      	nop
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b086      	sub	sp, #24
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044f8:	2300      	movs	r3, #0
 80044fa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80044fc:	f7ff fc84 	bl	8003e08 <HAL_GetTick>
 8004500:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d101      	bne.n	800450c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004508:	2301      	movs	r3, #1
 800450a:	e099      	b.n	8004640 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	2200      	movs	r2, #0
 8004510:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	2202      	movs	r2, #2
 8004518:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0201 	bic.w	r2, r2, #1
 800452a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800452c:	e00f      	b.n	800454e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800452e:	f7ff fc6b 	bl	8003e08 <HAL_GetTick>
 8004532:	4602      	mov	r2, r0
 8004534:	693b      	ldr	r3, [r7, #16]
 8004536:	1ad3      	subs	r3, r2, r3
 8004538:	2b05      	cmp	r3, #5
 800453a:	d908      	bls.n	800454e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	2220      	movs	r2, #32
 8004540:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2203      	movs	r2, #3
 8004546:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800454a:	2303      	movs	r3, #3
 800454c:	e078      	b.n	8004640 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f003 0301 	and.w	r3, r3, #1
 8004558:	2b00      	cmp	r3, #0
 800455a:	d1e8      	bne.n	800452e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004564:	697a      	ldr	r2, [r7, #20]
 8004566:	4b38      	ldr	r3, [pc, #224]	; (8004648 <HAL_DMA_Init+0x158>)
 8004568:	4013      	ands	r3, r2
 800456a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	685a      	ldr	r2, [r3, #4]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800457a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004586:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	699b      	ldr	r3, [r3, #24]
 800458c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004592:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a1b      	ldr	r3, [r3, #32]
 8004598:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	4313      	orrs	r3, r2
 800459e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	2b04      	cmp	r3, #4
 80045a6:	d107      	bne.n	80045b8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b0:	4313      	orrs	r3, r2
 80045b2:	697a      	ldr	r2, [r7, #20]
 80045b4:	4313      	orrs	r3, r2
 80045b6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	695b      	ldr	r3, [r3, #20]
 80045c6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0307 	bic.w	r3, r3, #7
 80045ce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045de:	2b04      	cmp	r3, #4
 80045e0:	d117      	bne.n	8004612 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045e6:	697a      	ldr	r2, [r7, #20]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d00e      	beq.n	8004612 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 fb0d 	bl	8004c14 <DMA_CheckFifoParam>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d008      	beq.n	8004612 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2240      	movs	r2, #64	; 0x40
 8004604:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2201      	movs	r2, #1
 800460a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800460e:	2301      	movs	r3, #1
 8004610:	e016      	b.n	8004640 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	697a      	ldr	r2, [r7, #20]
 8004618:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800461a:	6878      	ldr	r0, [r7, #4]
 800461c:	f000 fac4 	bl	8004ba8 <DMA_CalcBaseAndBitshift>
 8004620:	4603      	mov	r3, r0
 8004622:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004628:	223f      	movs	r2, #63	; 0x3f
 800462a:	409a      	lsls	r2, r3
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2200      	movs	r2, #0
 8004634:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800463e:	2300      	movs	r3, #0
}
 8004640:	4618      	mov	r0, r3
 8004642:	3718      	adds	r7, #24
 8004644:	46bd      	mov	sp, r7
 8004646:	bd80      	pop	{r7, pc}
 8004648:	f010803f 	.word	0xf010803f

0800464c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b086      	sub	sp, #24
 8004650:	af00      	add	r7, sp, #0
 8004652:	60f8      	str	r0, [r7, #12]
 8004654:	60b9      	str	r1, [r7, #8]
 8004656:	607a      	str	r2, [r7, #4]
 8004658:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465a:	2300      	movs	r3, #0
 800465c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004662:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800466a:	2b01      	cmp	r3, #1
 800466c:	d101      	bne.n	8004672 <HAL_DMA_Start_IT+0x26>
 800466e:	2302      	movs	r3, #2
 8004670:	e040      	b.n	80046f4 <HAL_DMA_Start_IT+0xa8>
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004680:	b2db      	uxtb	r3, r3
 8004682:	2b01      	cmp	r3, #1
 8004684:	d12f      	bne.n	80046e6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	2202      	movs	r2, #2
 800468a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2200      	movs	r2, #0
 8004692:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	68b9      	ldr	r1, [r7, #8]
 800469a:	68f8      	ldr	r0, [r7, #12]
 800469c:	f000 fa56 	bl	8004b4c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a4:	223f      	movs	r2, #63	; 0x3f
 80046a6:	409a      	lsls	r2, r3
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f042 0216 	orr.w	r2, r2, #22
 80046ba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d007      	beq.n	80046d4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f042 0208 	orr.w	r2, r2, #8
 80046d2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f042 0201 	orr.w	r2, r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
 80046e4:	e005      	b.n	80046f2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046ee:	2302      	movs	r3, #2
 80046f0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046f2:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3718      	adds	r7, #24
 80046f8:	46bd      	mov	sp, r7
 80046fa:	bd80      	pop	{r7, pc}

080046fc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004708:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800470a:	f7ff fb7d 	bl	8003e08 <HAL_GetTick>
 800470e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004716:	b2db      	uxtb	r3, r3
 8004718:	2b02      	cmp	r3, #2
 800471a:	d008      	beq.n	800472e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	2280      	movs	r2, #128	; 0x80
 8004720:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	e052      	b.n	80047d4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	f022 0216 	bic.w	r2, r2, #22
 800473c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	695a      	ldr	r2, [r3, #20]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800474c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004752:	2b00      	cmp	r3, #0
 8004754:	d103      	bne.n	800475e <HAL_DMA_Abort+0x62>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475a:	2b00      	cmp	r3, #0
 800475c:	d007      	beq.n	800476e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	f022 0208 	bic.w	r2, r2, #8
 800476c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	681a      	ldr	r2, [r3, #0]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f022 0201 	bic.w	r2, r2, #1
 800477c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800477e:	e013      	b.n	80047a8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004780:	f7ff fb42 	bl	8003e08 <HAL_GetTick>
 8004784:	4602      	mov	r2, r0
 8004786:	68bb      	ldr	r3, [r7, #8]
 8004788:	1ad3      	subs	r3, r2, r3
 800478a:	2b05      	cmp	r3, #5
 800478c:	d90c      	bls.n	80047a8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	2220      	movs	r2, #32
 8004792:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2200      	movs	r2, #0
 8004798:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2203      	movs	r2, #3
 80047a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80047a4:	2303      	movs	r3, #3
 80047a6:	e015      	b.n	80047d4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f003 0301 	and.w	r3, r3, #1
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d1e4      	bne.n	8004780 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ba:	223f      	movs	r2, #63	; 0x3f
 80047bc:	409a      	lsls	r2, r3
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2200      	movs	r2, #0
 80047c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2201      	movs	r2, #1
 80047ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80047d2:	2300      	movs	r3, #0
}
 80047d4:	4618      	mov	r0, r3
 80047d6:	3710      	adds	r7, #16
 80047d8:	46bd      	mov	sp, r7
 80047da:	bd80      	pop	{r7, pc}

080047dc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047dc:	b480      	push	{r7}
 80047de:	b083      	sub	sp, #12
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	2b02      	cmp	r3, #2
 80047ee:	d004      	beq.n	80047fa <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2280      	movs	r2, #128	; 0x80
 80047f4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047f6:	2301      	movs	r3, #1
 80047f8:	e00c      	b.n	8004814 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	2205      	movs	r2, #5
 80047fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	681a      	ldr	r2, [r3, #0]
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f022 0201 	bic.w	r2, r2, #1
 8004810:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004812:	2300      	movs	r3, #0
}
 8004814:	4618      	mov	r0, r3
 8004816:	370c      	adds	r7, #12
 8004818:	46bd      	mov	sp, r7
 800481a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481e:	4770      	bx	lr

08004820 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004820:	b580      	push	{r7, lr}
 8004822:	b086      	sub	sp, #24
 8004824:	af00      	add	r7, sp, #0
 8004826:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004828:	2300      	movs	r3, #0
 800482a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800482c:	4b92      	ldr	r3, [pc, #584]	; (8004a78 <HAL_DMA_IRQHandler+0x258>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a92      	ldr	r2, [pc, #584]	; (8004a7c <HAL_DMA_IRQHandler+0x25c>)
 8004832:	fba2 2303 	umull	r2, r3, r2, r3
 8004836:	0a9b      	lsrs	r3, r3, #10
 8004838:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800483e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484a:	2208      	movs	r2, #8
 800484c:	409a      	lsls	r2, r3
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	4013      	ands	r3, r2
 8004852:	2b00      	cmp	r3, #0
 8004854:	d01a      	beq.n	800488c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f003 0304 	and.w	r3, r3, #4
 8004860:	2b00      	cmp	r3, #0
 8004862:	d013      	beq.n	800488c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	f022 0204 	bic.w	r2, r2, #4
 8004872:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004878:	2208      	movs	r2, #8
 800487a:	409a      	lsls	r2, r3
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004884:	f043 0201 	orr.w	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004890:	2201      	movs	r2, #1
 8004892:	409a      	lsls	r2, r3
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	4013      	ands	r3, r2
 8004898:	2b00      	cmp	r3, #0
 800489a:	d012      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d00b      	beq.n	80048c2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ae:	2201      	movs	r2, #1
 80048b0:	409a      	lsls	r2, r3
 80048b2:	693b      	ldr	r3, [r7, #16]
 80048b4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048ba:	f043 0202 	orr.w	r2, r3, #2
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048c6:	2204      	movs	r2, #4
 80048c8:	409a      	lsls	r2, r3
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	4013      	ands	r3, r2
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d012      	beq.n	80048f8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f003 0302 	and.w	r3, r3, #2
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d00b      	beq.n	80048f8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e4:	2204      	movs	r2, #4
 80048e6:	409a      	lsls	r2, r3
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f0:	f043 0204 	orr.w	r2, r3, #4
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048fc:	2210      	movs	r2, #16
 80048fe:	409a      	lsls	r2, r3
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	4013      	ands	r3, r2
 8004904:	2b00      	cmp	r3, #0
 8004906:	d043      	beq.n	8004990 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	f003 0308 	and.w	r3, r3, #8
 8004912:	2b00      	cmp	r3, #0
 8004914:	d03c      	beq.n	8004990 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491a:	2210      	movs	r2, #16
 800491c:	409a      	lsls	r2, r3
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800492c:	2b00      	cmp	r3, #0
 800492e:	d018      	beq.n	8004962 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d108      	bne.n	8004950 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004942:	2b00      	cmp	r3, #0
 8004944:	d024      	beq.n	8004990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	6878      	ldr	r0, [r7, #4]
 800494c:	4798      	blx	r3
 800494e:	e01f      	b.n	8004990 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004954:	2b00      	cmp	r3, #0
 8004956:	d01b      	beq.n	8004990 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	4798      	blx	r3
 8004960:	e016      	b.n	8004990 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d107      	bne.n	8004980 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	681a      	ldr	r2, [r3, #0]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f022 0208 	bic.w	r2, r2, #8
 800497e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004984:	2b00      	cmp	r3, #0
 8004986:	d003      	beq.n	8004990 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800498c:	6878      	ldr	r0, [r7, #4]
 800498e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004994:	2220      	movs	r2, #32
 8004996:	409a      	lsls	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	4013      	ands	r3, r2
 800499c:	2b00      	cmp	r3, #0
 800499e:	f000 808e 	beq.w	8004abe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	f000 8086 	beq.w	8004abe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b6:	2220      	movs	r2, #32
 80049b8:	409a      	lsls	r2, r3
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b05      	cmp	r3, #5
 80049c8:	d136      	bne.n	8004a38 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	f022 0216 	bic.w	r2, r2, #22
 80049d8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	695a      	ldr	r2, [r3, #20]
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049e8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d103      	bne.n	80049fa <HAL_DMA_IRQHandler+0x1da>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d007      	beq.n	8004a0a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	681a      	ldr	r2, [r3, #0]
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f022 0208 	bic.w	r2, r2, #8
 8004a08:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a0e:	223f      	movs	r2, #63	; 0x3f
 8004a10:	409a      	lsls	r2, r3
 8004a12:	693b      	ldr	r3, [r7, #16]
 8004a14:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2201      	movs	r2, #1
 8004a22:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d07d      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a32:	6878      	ldr	r0, [r7, #4]
 8004a34:	4798      	blx	r3
        }
        return;
 8004a36:	e078      	b.n	8004b2a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d01c      	beq.n	8004a80 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d108      	bne.n	8004a66 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d030      	beq.n	8004abe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	4798      	blx	r3
 8004a64:	e02b      	b.n	8004abe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d027      	beq.n	8004abe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	4798      	blx	r3
 8004a76:	e022      	b.n	8004abe <HAL_DMA_IRQHandler+0x29e>
 8004a78:	200001ec 	.word	0x200001ec
 8004a7c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10f      	bne.n	8004aae <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 0210 	bic.w	r2, r2, #16
 8004a9c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	2200      	movs	r2, #0
 8004aa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	2201      	movs	r2, #1
 8004aaa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d003      	beq.n	8004abe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aba:	6878      	ldr	r0, [r7, #4]
 8004abc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d032      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aca:	f003 0301 	and.w	r3, r3, #1
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d022      	beq.n	8004b18 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	2205      	movs	r2, #5
 8004ad6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	681a      	ldr	r2, [r3, #0]
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	f022 0201 	bic.w	r2, r2, #1
 8004ae8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004aea:	68bb      	ldr	r3, [r7, #8]
 8004aec:	3301      	adds	r3, #1
 8004aee:	60bb      	str	r3, [r7, #8]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d307      	bcc.n	8004b06 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0301 	and.w	r3, r3, #1
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d1f2      	bne.n	8004aea <HAL_DMA_IRQHandler+0x2ca>
 8004b04:	e000      	b.n	8004b08 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b06:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2201      	movs	r2, #1
 8004b14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b24:	6878      	ldr	r0, [r7, #4]
 8004b26:	4798      	blx	r3
 8004b28:	e000      	b.n	8004b2c <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b2a:	bf00      	nop
    }
  }
}
 8004b2c:	3718      	adds	r7, #24
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop

08004b34 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b34:	b480      	push	{r7}
 8004b36:	b083      	sub	sp, #12
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	370c      	adds	r7, #12
 8004b44:	46bd      	mov	sp, r7
 8004b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4a:	4770      	bx	lr

08004b4c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b085      	sub	sp, #20
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	681a      	ldr	r2, [r3, #0]
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b68:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	683a      	ldr	r2, [r7, #0]
 8004b70:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	689b      	ldr	r3, [r3, #8]
 8004b76:	2b40      	cmp	r3, #64	; 0x40
 8004b78:	d108      	bne.n	8004b8c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	687a      	ldr	r2, [r7, #4]
 8004b80:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68ba      	ldr	r2, [r7, #8]
 8004b88:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b8a:	e007      	b.n	8004b9c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	68ba      	ldr	r2, [r7, #8]
 8004b92:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	687a      	ldr	r2, [r7, #4]
 8004b9a:	60da      	str	r2, [r3, #12]
}
 8004b9c:	bf00      	nop
 8004b9e:	3714      	adds	r7, #20
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba6:	4770      	bx	lr

08004ba8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b085      	sub	sp, #20
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	b2db      	uxtb	r3, r3
 8004bb6:	3b10      	subs	r3, #16
 8004bb8:	4a14      	ldr	r2, [pc, #80]	; (8004c0c <DMA_CalcBaseAndBitshift+0x64>)
 8004bba:	fba2 2303 	umull	r2, r3, r2, r3
 8004bbe:	091b      	lsrs	r3, r3, #4
 8004bc0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bc2:	4a13      	ldr	r2, [pc, #76]	; (8004c10 <DMA_CalcBaseAndBitshift+0x68>)
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	461a      	mov	r2, r3
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	2b03      	cmp	r3, #3
 8004bd4:	d909      	bls.n	8004bea <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bde:	f023 0303 	bic.w	r3, r3, #3
 8004be2:	1d1a      	adds	r2, r3, #4
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	659a      	str	r2, [r3, #88]	; 0x58
 8004be8:	e007      	b.n	8004bfa <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bf2:	f023 0303 	bic.w	r3, r3, #3
 8004bf6:	687a      	ldr	r2, [r7, #4]
 8004bf8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3714      	adds	r7, #20
 8004c02:	46bd      	mov	sp, r7
 8004c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c08:	4770      	bx	lr
 8004c0a:	bf00      	nop
 8004c0c:	aaaaaaab 	.word	0xaaaaaaab
 8004c10:	080106b8 	.word	0x080106b8

08004c14 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c24:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	699b      	ldr	r3, [r3, #24]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d11f      	bne.n	8004c6e <DMA_CheckFifoParam+0x5a>
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	2b03      	cmp	r3, #3
 8004c32:	d856      	bhi.n	8004ce2 <DMA_CheckFifoParam+0xce>
 8004c34:	a201      	add	r2, pc, #4	; (adr r2, 8004c3c <DMA_CheckFifoParam+0x28>)
 8004c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3a:	bf00      	nop
 8004c3c:	08004c4d 	.word	0x08004c4d
 8004c40:	08004c5f 	.word	0x08004c5f
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	08004ce3 	.word	0x08004ce3
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d046      	beq.n	8004ce6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c58:	2301      	movs	r3, #1
 8004c5a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c5c:	e043      	b.n	8004ce6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c66:	d140      	bne.n	8004cea <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c6c:	e03d      	b.n	8004cea <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	699b      	ldr	r3, [r3, #24]
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d121      	bne.n	8004cbc <DMA_CheckFifoParam+0xa8>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b03      	cmp	r3, #3
 8004c7c:	d837      	bhi.n	8004cee <DMA_CheckFifoParam+0xda>
 8004c7e:	a201      	add	r2, pc, #4	; (adr r2, 8004c84 <DMA_CheckFifoParam+0x70>)
 8004c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c84:	08004c95 	.word	0x08004c95
 8004c88:	08004c9b 	.word	0x08004c9b
 8004c8c:	08004c95 	.word	0x08004c95
 8004c90:	08004cad 	.word	0x08004cad
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      break;
 8004c98:	e030      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	d025      	beq.n	8004cf2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ca6:	2301      	movs	r3, #1
 8004ca8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004caa:	e022      	b.n	8004cf2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb0:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb4:	d11f      	bne.n	8004cf6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cb6:	2301      	movs	r3, #1
 8004cb8:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cba:	e01c      	b.n	8004cf6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	2b02      	cmp	r3, #2
 8004cc0:	d903      	bls.n	8004cca <DMA_CheckFifoParam+0xb6>
 8004cc2:	68bb      	ldr	r3, [r7, #8]
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d003      	beq.n	8004cd0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004cc8:	e018      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cca:	2301      	movs	r3, #1
 8004ccc:	73fb      	strb	r3, [r7, #15]
      break;
 8004cce:	e015      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d00e      	beq.n	8004cfa <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce0:	e00b      	b.n	8004cfa <DMA_CheckFifoParam+0xe6>
      break;
 8004ce2:	bf00      	nop
 8004ce4:	e00a      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e008      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cea:	bf00      	nop
 8004cec:	e006      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e004      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e002      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;   
 8004cf6:	bf00      	nop
 8004cf8:	e000      	b.n	8004cfc <DMA_CheckFifoParam+0xe8>
      break;
 8004cfa:	bf00      	nop
    }
  } 
  
  return status; 
 8004cfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cfe:	4618      	mov	r0, r3
 8004d00:	3714      	adds	r7, #20
 8004d02:	46bd      	mov	sp, r7
 8004d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d08:	4770      	bx	lr
 8004d0a:	bf00      	nop

08004d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b089      	sub	sp, #36	; 0x24
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d16:	2300      	movs	r3, #0
 8004d18:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d22:	2300      	movs	r3, #0
 8004d24:	61fb      	str	r3, [r7, #28]
 8004d26:	e16b      	b.n	8005000 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d28:	2201      	movs	r2, #1
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8004d30:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	697a      	ldr	r2, [r7, #20]
 8004d38:	4013      	ands	r3, r2
 8004d3a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d3c:	693a      	ldr	r2, [r7, #16]
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	f040 815a 	bne.w	8004ffa <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d46:	683b      	ldr	r3, [r7, #0]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	f003 0303 	and.w	r3, r3, #3
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d005      	beq.n	8004d5e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d130      	bne.n	8004dc0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	689b      	ldr	r3, [r3, #8]
 8004d62:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	2203      	movs	r2, #3
 8004d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6e:	43db      	mvns	r3, r3
 8004d70:	69ba      	ldr	r2, [r7, #24]
 8004d72:	4013      	ands	r3, r2
 8004d74:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	68da      	ldr	r2, [r3, #12]
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	005b      	lsls	r3, r3, #1
 8004d7e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d82:	69ba      	ldr	r2, [r7, #24]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d94:	2201      	movs	r2, #1
 8004d96:	69fb      	ldr	r3, [r7, #28]
 8004d98:	fa02 f303 	lsl.w	r3, r2, r3
 8004d9c:	43db      	mvns	r3, r3
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4013      	ands	r3, r2
 8004da2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004da4:	683b      	ldr	r3, [r7, #0]
 8004da6:	685b      	ldr	r3, [r3, #4]
 8004da8:	091b      	lsrs	r3, r3, #4
 8004daa:	f003 0201 	and.w	r2, r3, #1
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	fa02 f303 	lsl.w	r3, r2, r3
 8004db4:	69ba      	ldr	r2, [r7, #24]
 8004db6:	4313      	orrs	r3, r2
 8004db8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	69ba      	ldr	r2, [r7, #24]
 8004dbe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	685b      	ldr	r3, [r3, #4]
 8004dc4:	f003 0303 	and.w	r3, r3, #3
 8004dc8:	2b03      	cmp	r3, #3
 8004dca:	d017      	beq.n	8004dfc <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	68db      	ldr	r3, [r3, #12]
 8004dd0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	005b      	lsls	r3, r3, #1
 8004dd6:	2203      	movs	r2, #3
 8004dd8:	fa02 f303 	lsl.w	r3, r2, r3
 8004ddc:	43db      	mvns	r3, r3
 8004dde:	69ba      	ldr	r2, [r7, #24]
 8004de0:	4013      	ands	r3, r2
 8004de2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	689a      	ldr	r2, [r3, #8]
 8004de8:	69fb      	ldr	r3, [r7, #28]
 8004dea:	005b      	lsls	r3, r3, #1
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b02      	cmp	r3, #2
 8004e06:	d123      	bne.n	8004e50 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	08da      	lsrs	r2, r3, #3
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	3208      	adds	r2, #8
 8004e10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e16:	69fb      	ldr	r3, [r7, #28]
 8004e18:	f003 0307 	and.w	r3, r3, #7
 8004e1c:	009b      	lsls	r3, r3, #2
 8004e1e:	220f      	movs	r2, #15
 8004e20:	fa02 f303 	lsl.w	r3, r2, r3
 8004e24:	43db      	mvns	r3, r3
 8004e26:	69ba      	ldr	r2, [r7, #24]
 8004e28:	4013      	ands	r3, r2
 8004e2a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	691a      	ldr	r2, [r3, #16]
 8004e30:	69fb      	ldr	r3, [r7, #28]
 8004e32:	f003 0307 	and.w	r3, r3, #7
 8004e36:	009b      	lsls	r3, r3, #2
 8004e38:	fa02 f303 	lsl.w	r3, r2, r3
 8004e3c:	69ba      	ldr	r2, [r7, #24]
 8004e3e:	4313      	orrs	r3, r2
 8004e40:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	08da      	lsrs	r2, r3, #3
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3208      	adds	r2, #8
 8004e4a:	69b9      	ldr	r1, [r7, #24]
 8004e4c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	005b      	lsls	r3, r3, #1
 8004e5a:	2203      	movs	r2, #3
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	f003 0203 	and.w	r2, r3, #3
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	005b      	lsls	r3, r3, #1
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	69ba      	ldr	r2, [r7, #24]
 8004e82:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f000 80b4 	beq.w	8004ffa <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e92:	2300      	movs	r3, #0
 8004e94:	60fb      	str	r3, [r7, #12]
 8004e96:	4b60      	ldr	r3, [pc, #384]	; (8005018 <HAL_GPIO_Init+0x30c>)
 8004e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9a:	4a5f      	ldr	r2, [pc, #380]	; (8005018 <HAL_GPIO_Init+0x30c>)
 8004e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea2:	4b5d      	ldr	r3, [pc, #372]	; (8005018 <HAL_GPIO_Init+0x30c>)
 8004ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eaa:	60fb      	str	r3, [r7, #12]
 8004eac:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eae:	4a5b      	ldr	r2, [pc, #364]	; (800501c <HAL_GPIO_Init+0x310>)
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	089b      	lsrs	r3, r3, #2
 8004eb4:	3302      	adds	r3, #2
 8004eb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	f003 0303 	and.w	r3, r3, #3
 8004ec2:	009b      	lsls	r3, r3, #2
 8004ec4:	220f      	movs	r2, #15
 8004ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eca:	43db      	mvns	r3, r3
 8004ecc:	69ba      	ldr	r2, [r7, #24]
 8004ece:	4013      	ands	r3, r2
 8004ed0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	4a52      	ldr	r2, [pc, #328]	; (8005020 <HAL_GPIO_Init+0x314>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d02b      	beq.n	8004f32 <HAL_GPIO_Init+0x226>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a51      	ldr	r2, [pc, #324]	; (8005024 <HAL_GPIO_Init+0x318>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d025      	beq.n	8004f2e <HAL_GPIO_Init+0x222>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a50      	ldr	r2, [pc, #320]	; (8005028 <HAL_GPIO_Init+0x31c>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d01f      	beq.n	8004f2a <HAL_GPIO_Init+0x21e>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a4f      	ldr	r2, [pc, #316]	; (800502c <HAL_GPIO_Init+0x320>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d019      	beq.n	8004f26 <HAL_GPIO_Init+0x21a>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a4e      	ldr	r2, [pc, #312]	; (8005030 <HAL_GPIO_Init+0x324>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d013      	beq.n	8004f22 <HAL_GPIO_Init+0x216>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a4d      	ldr	r2, [pc, #308]	; (8005034 <HAL_GPIO_Init+0x328>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d00d      	beq.n	8004f1e <HAL_GPIO_Init+0x212>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a4c      	ldr	r2, [pc, #304]	; (8005038 <HAL_GPIO_Init+0x32c>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d007      	beq.n	8004f1a <HAL_GPIO_Init+0x20e>
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	4a4b      	ldr	r2, [pc, #300]	; (800503c <HAL_GPIO_Init+0x330>)
 8004f0e:	4293      	cmp	r3, r2
 8004f10:	d101      	bne.n	8004f16 <HAL_GPIO_Init+0x20a>
 8004f12:	2307      	movs	r3, #7
 8004f14:	e00e      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f16:	2308      	movs	r3, #8
 8004f18:	e00c      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f1a:	2306      	movs	r3, #6
 8004f1c:	e00a      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f1e:	2305      	movs	r3, #5
 8004f20:	e008      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f22:	2304      	movs	r3, #4
 8004f24:	e006      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f26:	2303      	movs	r3, #3
 8004f28:	e004      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f2a:	2302      	movs	r3, #2
 8004f2c:	e002      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f2e:	2301      	movs	r3, #1
 8004f30:	e000      	b.n	8004f34 <HAL_GPIO_Init+0x228>
 8004f32:	2300      	movs	r3, #0
 8004f34:	69fa      	ldr	r2, [r7, #28]
 8004f36:	f002 0203 	and.w	r2, r2, #3
 8004f3a:	0092      	lsls	r2, r2, #2
 8004f3c:	4093      	lsls	r3, r2
 8004f3e:	69ba      	ldr	r2, [r7, #24]
 8004f40:	4313      	orrs	r3, r2
 8004f42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f44:	4935      	ldr	r1, [pc, #212]	; (800501c <HAL_GPIO_Init+0x310>)
 8004f46:	69fb      	ldr	r3, [r7, #28]
 8004f48:	089b      	lsrs	r3, r3, #2
 8004f4a:	3302      	adds	r3, #2
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f52:	4b3b      	ldr	r3, [pc, #236]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	43db      	mvns	r3, r3
 8004f5c:	69ba      	ldr	r2, [r7, #24]
 8004f5e:	4013      	ands	r3, r2
 8004f60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	693b      	ldr	r3, [r7, #16]
 8004f72:	4313      	orrs	r3, r2
 8004f74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f76:	4a32      	ldr	r2, [pc, #200]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004f78:	69bb      	ldr	r3, [r7, #24]
 8004f7a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f7c:	4b30      	ldr	r3, [pc, #192]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f82:	693b      	ldr	r3, [r7, #16]
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d003      	beq.n	8004fa0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fa0:	4a27      	ldr	r2, [pc, #156]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fa6:	4b26      	ldr	r3, [pc, #152]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004fa8:	689b      	ldr	r3, [r3, #8]
 8004faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	43db      	mvns	r3, r3
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d003      	beq.n	8004fca <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	4313      	orrs	r3, r2
 8004fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fca:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004fcc:	69bb      	ldr	r3, [r7, #24]
 8004fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fd0:	4b1b      	ldr	r3, [pc, #108]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	43db      	mvns	r3, r3
 8004fda:	69ba      	ldr	r2, [r7, #24]
 8004fdc:	4013      	ands	r3, r2
 8004fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d003      	beq.n	8004ff4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	693b      	ldr	r3, [r7, #16]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff4:	4a12      	ldr	r2, [pc, #72]	; (8005040 <HAL_GPIO_Init+0x334>)
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	61fb      	str	r3, [r7, #28]
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	2b0f      	cmp	r3, #15
 8005004:	f67f ae90 	bls.w	8004d28 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005008:	bf00      	nop
 800500a:	bf00      	nop
 800500c:	3724      	adds	r7, #36	; 0x24
 800500e:	46bd      	mov	sp, r7
 8005010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005014:	4770      	bx	lr
 8005016:	bf00      	nop
 8005018:	40023800 	.word	0x40023800
 800501c:	40013800 	.word	0x40013800
 8005020:	40020000 	.word	0x40020000
 8005024:	40020400 	.word	0x40020400
 8005028:	40020800 	.word	0x40020800
 800502c:	40020c00 	.word	0x40020c00
 8005030:	40021000 	.word	0x40021000
 8005034:	40021400 	.word	0x40021400
 8005038:	40021800 	.word	0x40021800
 800503c:	40021c00 	.word	0x40021c00
 8005040:	40013c00 	.word	0x40013c00

08005044 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005044:	b480      	push	{r7}
 8005046:	b083      	sub	sp, #12
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]
 8005050:	4613      	mov	r3, r2
 8005052:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005054:	787b      	ldrb	r3, [r7, #1]
 8005056:	2b00      	cmp	r3, #0
 8005058:	d003      	beq.n	8005062 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800505a:	887a      	ldrh	r2, [r7, #2]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005060:	e003      	b.n	800506a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005062:	887b      	ldrh	r3, [r7, #2]
 8005064:	041a      	lsls	r2, r3, #16
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	619a      	str	r2, [r3, #24]
}
 800506a:	bf00      	nop
 800506c:	370c      	adds	r7, #12
 800506e:	46bd      	mov	sp, r7
 8005070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005074:	4770      	bx	lr
	...

08005078 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e264      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d075      	beq.n	8005182 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005096:	4ba3      	ldr	r3, [pc, #652]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005098:	689b      	ldr	r3, [r3, #8]
 800509a:	f003 030c 	and.w	r3, r3, #12
 800509e:	2b04      	cmp	r3, #4
 80050a0:	d00c      	beq.n	80050bc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050a2:	4ba0      	ldr	r3, [pc, #640]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050aa:	2b08      	cmp	r3, #8
 80050ac:	d112      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ae:	4b9d      	ldr	r3, [pc, #628]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050ba:	d10b      	bne.n	80050d4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050bc:	4b99      	ldr	r3, [pc, #612]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d05b      	beq.n	8005180 <HAL_RCC_OscConfig+0x108>
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	685b      	ldr	r3, [r3, #4]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d157      	bne.n	8005180 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d0:	2301      	movs	r3, #1
 80050d2:	e23f      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	685b      	ldr	r3, [r3, #4]
 80050d8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050dc:	d106      	bne.n	80050ec <HAL_RCC_OscConfig+0x74>
 80050de:	4b91      	ldr	r3, [pc, #580]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	4a90      	ldr	r2, [pc, #576]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e8:	6013      	str	r3, [r2, #0]
 80050ea:	e01d      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	685b      	ldr	r3, [r3, #4]
 80050f0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x98>
 80050f6:	4b8b      	ldr	r3, [pc, #556]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a8a      	ldr	r2, [pc, #552]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b88      	ldr	r3, [pc, #544]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a87      	ldr	r2, [pc, #540]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e00b      	b.n	8005128 <HAL_RCC_OscConfig+0xb0>
 8005110:	4b84      	ldr	r3, [pc, #528]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a83      	ldr	r2, [pc, #524]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511a:	6013      	str	r3, [r2, #0]
 800511c:	4b81      	ldr	r3, [pc, #516]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a80      	ldr	r2, [pc, #512]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005122:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005126:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d013      	beq.n	8005158 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fe fe6a 	bl	8003e08 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005138:	f7fe fe66 	bl	8003e08 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e204      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514a:	4b76      	ldr	r3, [pc, #472]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d0f0      	beq.n	8005138 <HAL_RCC_OscConfig+0xc0>
 8005156:	e014      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005158:	f7fe fe56 	bl	8003e08 <HAL_GetTick>
 800515c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800515e:	e008      	b.n	8005172 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005160:	f7fe fe52 	bl	8003e08 <HAL_GetTick>
 8005164:	4602      	mov	r2, r0
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	1ad3      	subs	r3, r2, r3
 800516a:	2b64      	cmp	r3, #100	; 0x64
 800516c:	d901      	bls.n	8005172 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e1f0      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005172:	4b6c      	ldr	r3, [pc, #432]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517a:	2b00      	cmp	r3, #0
 800517c:	d1f0      	bne.n	8005160 <HAL_RCC_OscConfig+0xe8>
 800517e:	e000      	b.n	8005182 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005180:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	f003 0302 	and.w	r3, r3, #2
 800518a:	2b00      	cmp	r3, #0
 800518c:	d063      	beq.n	8005256 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800518e:	4b65      	ldr	r3, [pc, #404]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005190:	689b      	ldr	r3, [r3, #8]
 8005192:	f003 030c 	and.w	r3, r3, #12
 8005196:	2b00      	cmp	r3, #0
 8005198:	d00b      	beq.n	80051b2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800519a:	4b62      	ldr	r3, [pc, #392]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800519c:	689b      	ldr	r3, [r3, #8]
 800519e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a2:	2b08      	cmp	r3, #8
 80051a4:	d11c      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051a6:	4b5f      	ldr	r3, [pc, #380]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d116      	bne.n	80051e0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b2:	4b5c      	ldr	r3, [pc, #368]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	f003 0302 	and.w	r3, r3, #2
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d005      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	2b01      	cmp	r3, #1
 80051c4:	d001      	beq.n	80051ca <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	e1c4      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ca:	4b56      	ldr	r3, [pc, #344]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	691b      	ldr	r3, [r3, #16]
 80051d6:	00db      	lsls	r3, r3, #3
 80051d8:	4952      	ldr	r1, [pc, #328]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80051da:	4313      	orrs	r3, r2
 80051dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051de:	e03a      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	68db      	ldr	r3, [r3, #12]
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d020      	beq.n	800522a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051e8:	4b4f      	ldr	r3, [pc, #316]	; (8005328 <HAL_RCC_OscConfig+0x2b0>)
 80051ea:	2201      	movs	r2, #1
 80051ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051ee:	f7fe fe0b 	bl	8003e08 <HAL_GetTick>
 80051f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f4:	e008      	b.n	8005208 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051f6:	f7fe fe07 	bl	8003e08 <HAL_GetTick>
 80051fa:	4602      	mov	r2, r0
 80051fc:	693b      	ldr	r3, [r7, #16]
 80051fe:	1ad3      	subs	r3, r2, r3
 8005200:	2b02      	cmp	r3, #2
 8005202:	d901      	bls.n	8005208 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e1a5      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005208:	4b46      	ldr	r3, [pc, #280]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f003 0302 	and.w	r3, r3, #2
 8005210:	2b00      	cmp	r3, #0
 8005212:	d0f0      	beq.n	80051f6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005214:	4b43      	ldr	r3, [pc, #268]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	691b      	ldr	r3, [r3, #16]
 8005220:	00db      	lsls	r3, r3, #3
 8005222:	4940      	ldr	r1, [pc, #256]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 8005224:	4313      	orrs	r3, r2
 8005226:	600b      	str	r3, [r1, #0]
 8005228:	e015      	b.n	8005256 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522a:	4b3f      	ldr	r3, [pc, #252]	; (8005328 <HAL_RCC_OscConfig+0x2b0>)
 800522c:	2200      	movs	r2, #0
 800522e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005230:	f7fe fdea 	bl	8003e08 <HAL_GetTick>
 8005234:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005236:	e008      	b.n	800524a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005238:	f7fe fde6 	bl	8003e08 <HAL_GetTick>
 800523c:	4602      	mov	r2, r0
 800523e:	693b      	ldr	r3, [r7, #16]
 8005240:	1ad3      	subs	r3, r2, r3
 8005242:	2b02      	cmp	r3, #2
 8005244:	d901      	bls.n	800524a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005246:	2303      	movs	r3, #3
 8005248:	e184      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524a:	4b36      	ldr	r3, [pc, #216]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f003 0302 	and.w	r3, r3, #2
 8005252:	2b00      	cmp	r3, #0
 8005254:	d1f0      	bne.n	8005238 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f003 0308 	and.w	r3, r3, #8
 800525e:	2b00      	cmp	r3, #0
 8005260:	d030      	beq.n	80052c4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	695b      	ldr	r3, [r3, #20]
 8005266:	2b00      	cmp	r3, #0
 8005268:	d016      	beq.n	8005298 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526a:	4b30      	ldr	r3, [pc, #192]	; (800532c <HAL_RCC_OscConfig+0x2b4>)
 800526c:	2201      	movs	r2, #1
 800526e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005270:	f7fe fdca 	bl	8003e08 <HAL_GetTick>
 8005274:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005276:	e008      	b.n	800528a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005278:	f7fe fdc6 	bl	8003e08 <HAL_GetTick>
 800527c:	4602      	mov	r2, r0
 800527e:	693b      	ldr	r3, [r7, #16]
 8005280:	1ad3      	subs	r3, r2, r3
 8005282:	2b02      	cmp	r3, #2
 8005284:	d901      	bls.n	800528a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005286:	2303      	movs	r3, #3
 8005288:	e164      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528a:	4b26      	ldr	r3, [pc, #152]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 800528c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800528e:	f003 0302 	and.w	r3, r3, #2
 8005292:	2b00      	cmp	r3, #0
 8005294:	d0f0      	beq.n	8005278 <HAL_RCC_OscConfig+0x200>
 8005296:	e015      	b.n	80052c4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005298:	4b24      	ldr	r3, [pc, #144]	; (800532c <HAL_RCC_OscConfig+0x2b4>)
 800529a:	2200      	movs	r2, #0
 800529c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800529e:	f7fe fdb3 	bl	8003e08 <HAL_GetTick>
 80052a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a4:	e008      	b.n	80052b8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052a6:	f7fe fdaf 	bl	8003e08 <HAL_GetTick>
 80052aa:	4602      	mov	r2, r0
 80052ac:	693b      	ldr	r3, [r7, #16]
 80052ae:	1ad3      	subs	r3, r2, r3
 80052b0:	2b02      	cmp	r3, #2
 80052b2:	d901      	bls.n	80052b8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052b4:	2303      	movs	r3, #3
 80052b6:	e14d      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052b8:	4b1a      	ldr	r3, [pc, #104]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052bc:	f003 0302 	and.w	r3, r3, #2
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d1f0      	bne.n	80052a6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f003 0304 	and.w	r3, r3, #4
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	f000 80a0 	beq.w	8005412 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d2:	2300      	movs	r3, #0
 80052d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052d6:	4b13      	ldr	r3, [pc, #76]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d10f      	bne.n	8005302 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e2:	2300      	movs	r3, #0
 80052e4:	60bb      	str	r3, [r7, #8]
 80052e6:	4b0f      	ldr	r3, [pc, #60]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ea:	4a0e      	ldr	r2, [pc, #56]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f0:	6413      	str	r3, [r2, #64]	; 0x40
 80052f2:	4b0c      	ldr	r3, [pc, #48]	; (8005324 <HAL_RCC_OscConfig+0x2ac>)
 80052f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fa:	60bb      	str	r3, [r7, #8]
 80052fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052fe:	2301      	movs	r3, #1
 8005300:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005302:	4b0b      	ldr	r3, [pc, #44]	; (8005330 <HAL_RCC_OscConfig+0x2b8>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530a:	2b00      	cmp	r3, #0
 800530c:	d121      	bne.n	8005352 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800530e:	4b08      	ldr	r3, [pc, #32]	; (8005330 <HAL_RCC_OscConfig+0x2b8>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	4a07      	ldr	r2, [pc, #28]	; (8005330 <HAL_RCC_OscConfig+0x2b8>)
 8005314:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005318:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531a:	f7fe fd75 	bl	8003e08 <HAL_GetTick>
 800531e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005320:	e011      	b.n	8005346 <HAL_RCC_OscConfig+0x2ce>
 8005322:	bf00      	nop
 8005324:	40023800 	.word	0x40023800
 8005328:	42470000 	.word	0x42470000
 800532c:	42470e80 	.word	0x42470e80
 8005330:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005334:	f7fe fd68 	bl	8003e08 <HAL_GetTick>
 8005338:	4602      	mov	r2, r0
 800533a:	693b      	ldr	r3, [r7, #16]
 800533c:	1ad3      	subs	r3, r2, r3
 800533e:	2b02      	cmp	r3, #2
 8005340:	d901      	bls.n	8005346 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005342:	2303      	movs	r3, #3
 8005344:	e106      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005346:	4b85      	ldr	r3, [pc, #532]	; (800555c <HAL_RCC_OscConfig+0x4e4>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d0f0      	beq.n	8005334 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	689b      	ldr	r3, [r3, #8]
 8005356:	2b01      	cmp	r3, #1
 8005358:	d106      	bne.n	8005368 <HAL_RCC_OscConfig+0x2f0>
 800535a:	4b81      	ldr	r3, [pc, #516]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 800535c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800535e:	4a80      	ldr	r2, [pc, #512]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	6713      	str	r3, [r2, #112]	; 0x70
 8005366:	e01c      	b.n	80053a2 <HAL_RCC_OscConfig+0x32a>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	689b      	ldr	r3, [r3, #8]
 800536c:	2b05      	cmp	r3, #5
 800536e:	d10c      	bne.n	800538a <HAL_RCC_OscConfig+0x312>
 8005370:	4b7b      	ldr	r3, [pc, #492]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	4a7a      	ldr	r2, [pc, #488]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005376:	f043 0304 	orr.w	r3, r3, #4
 800537a:	6713      	str	r3, [r2, #112]	; 0x70
 800537c:	4b78      	ldr	r3, [pc, #480]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 800537e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005380:	4a77      	ldr	r2, [pc, #476]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6713      	str	r3, [r2, #112]	; 0x70
 8005388:	e00b      	b.n	80053a2 <HAL_RCC_OscConfig+0x32a>
 800538a:	4b75      	ldr	r3, [pc, #468]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 800538c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800538e:	4a74      	ldr	r2, [pc, #464]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	f023 0301 	bic.w	r3, r3, #1
 8005394:	6713      	str	r3, [r2, #112]	; 0x70
 8005396:	4b72      	ldr	r3, [pc, #456]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a71      	ldr	r2, [pc, #452]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 800539c:	f023 0304 	bic.w	r3, r3, #4
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d015      	beq.n	80053d6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053aa:	f7fe fd2d 	bl	8003e08 <HAL_GetTick>
 80053ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b0:	e00a      	b.n	80053c8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b2:	f7fe fd29 	bl	8003e08 <HAL_GetTick>
 80053b6:	4602      	mov	r2, r0
 80053b8:	693b      	ldr	r3, [r7, #16]
 80053ba:	1ad3      	subs	r3, r2, r3
 80053bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c0:	4293      	cmp	r3, r2
 80053c2:	d901      	bls.n	80053c8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053c4:	2303      	movs	r3, #3
 80053c6:	e0c5      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053c8:	4b65      	ldr	r3, [pc, #404]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 80053ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053cc:	f003 0302 	and.w	r3, r3, #2
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d0ee      	beq.n	80053b2 <HAL_RCC_OscConfig+0x33a>
 80053d4:	e014      	b.n	8005400 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053d6:	f7fe fd17 	bl	8003e08 <HAL_GetTick>
 80053da:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053dc:	e00a      	b.n	80053f4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053de:	f7fe fd13 	bl	8003e08 <HAL_GetTick>
 80053e2:	4602      	mov	r2, r0
 80053e4:	693b      	ldr	r3, [r7, #16]
 80053e6:	1ad3      	subs	r3, r2, r3
 80053e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ec:	4293      	cmp	r3, r2
 80053ee:	d901      	bls.n	80053f4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053f0:	2303      	movs	r3, #3
 80053f2:	e0af      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f4:	4b5a      	ldr	r3, [pc, #360]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 80053f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f8:	f003 0302 	and.w	r3, r3, #2
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d1ee      	bne.n	80053de <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005400:	7dfb      	ldrb	r3, [r7, #23]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d105      	bne.n	8005412 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005406:	4b56      	ldr	r3, [pc, #344]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540a:	4a55      	ldr	r2, [pc, #340]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 800540c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005410:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	699b      	ldr	r3, [r3, #24]
 8005416:	2b00      	cmp	r3, #0
 8005418:	f000 809b 	beq.w	8005552 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800541c:	4b50      	ldr	r3, [pc, #320]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 030c 	and.w	r3, r3, #12
 8005424:	2b08      	cmp	r3, #8
 8005426:	d05c      	beq.n	80054e2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	699b      	ldr	r3, [r3, #24]
 800542c:	2b02      	cmp	r3, #2
 800542e:	d141      	bne.n	80054b4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005430:	4b4c      	ldr	r3, [pc, #304]	; (8005564 <HAL_RCC_OscConfig+0x4ec>)
 8005432:	2200      	movs	r2, #0
 8005434:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005436:	f7fe fce7 	bl	8003e08 <HAL_GetTick>
 800543a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800543c:	e008      	b.n	8005450 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800543e:	f7fe fce3 	bl	8003e08 <HAL_GetTick>
 8005442:	4602      	mov	r2, r0
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	1ad3      	subs	r3, r2, r3
 8005448:	2b02      	cmp	r3, #2
 800544a:	d901      	bls.n	8005450 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800544c:	2303      	movs	r3, #3
 800544e:	e081      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005450:	4b43      	ldr	r3, [pc, #268]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005458:	2b00      	cmp	r3, #0
 800545a:	d1f0      	bne.n	800543e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	69da      	ldr	r2, [r3, #28]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6a1b      	ldr	r3, [r3, #32]
 8005464:	431a      	orrs	r2, r3
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546a:	019b      	lsls	r3, r3, #6
 800546c:	431a      	orrs	r2, r3
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005472:	085b      	lsrs	r3, r3, #1
 8005474:	3b01      	subs	r3, #1
 8005476:	041b      	lsls	r3, r3, #16
 8005478:	431a      	orrs	r2, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800547e:	061b      	lsls	r3, r3, #24
 8005480:	4937      	ldr	r1, [pc, #220]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 8005482:	4313      	orrs	r3, r2
 8005484:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005486:	4b37      	ldr	r3, [pc, #220]	; (8005564 <HAL_RCC_OscConfig+0x4ec>)
 8005488:	2201      	movs	r2, #1
 800548a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800548c:	f7fe fcbc 	bl	8003e08 <HAL_GetTick>
 8005490:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005492:	e008      	b.n	80054a6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005494:	f7fe fcb8 	bl	8003e08 <HAL_GetTick>
 8005498:	4602      	mov	r2, r0
 800549a:	693b      	ldr	r3, [r7, #16]
 800549c:	1ad3      	subs	r3, r2, r3
 800549e:	2b02      	cmp	r3, #2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e056      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054a6:	4b2e      	ldr	r3, [pc, #184]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0f0      	beq.n	8005494 <HAL_RCC_OscConfig+0x41c>
 80054b2:	e04e      	b.n	8005552 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b4:	4b2b      	ldr	r3, [pc, #172]	; (8005564 <HAL_RCC_OscConfig+0x4ec>)
 80054b6:	2200      	movs	r2, #0
 80054b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054ba:	f7fe fca5 	bl	8003e08 <HAL_GetTick>
 80054be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c0:	e008      	b.n	80054d4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c2:	f7fe fca1 	bl	8003e08 <HAL_GetTick>
 80054c6:	4602      	mov	r2, r0
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	1ad3      	subs	r3, r2, r3
 80054cc:	2b02      	cmp	r3, #2
 80054ce:	d901      	bls.n	80054d4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054d0:	2303      	movs	r3, #3
 80054d2:	e03f      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d4:	4b22      	ldr	r3, [pc, #136]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d1f0      	bne.n	80054c2 <HAL_RCC_OscConfig+0x44a>
 80054e0:	e037      	b.n	8005552 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	699b      	ldr	r3, [r3, #24]
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d101      	bne.n	80054ee <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054ea:	2301      	movs	r3, #1
 80054ec:	e032      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054ee:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <HAL_RCC_OscConfig+0x4e8>)
 80054f0:	685b      	ldr	r3, [r3, #4]
 80054f2:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	699b      	ldr	r3, [r3, #24]
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d028      	beq.n	800554e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005506:	429a      	cmp	r2, r3
 8005508:	d121      	bne.n	800554e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005514:	429a      	cmp	r2, r3
 8005516:	d11a      	bne.n	800554e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005518:	68fa      	ldr	r2, [r7, #12]
 800551a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800551e:	4013      	ands	r3, r2
 8005520:	687a      	ldr	r2, [r7, #4]
 8005522:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005524:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005526:	4293      	cmp	r3, r2
 8005528:	d111      	bne.n	800554e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	085b      	lsrs	r3, r3, #1
 8005536:	3b01      	subs	r3, #1
 8005538:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800553a:	429a      	cmp	r2, r3
 800553c:	d107      	bne.n	800554e <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005548:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800554a:	429a      	cmp	r2, r3
 800554c:	d001      	beq.n	8005552 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800554e:	2301      	movs	r3, #1
 8005550:	e000      	b.n	8005554 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005552:	2300      	movs	r3, #0
}
 8005554:	4618      	mov	r0, r3
 8005556:	3718      	adds	r7, #24
 8005558:	46bd      	mov	sp, r7
 800555a:	bd80      	pop	{r7, pc}
 800555c:	40007000 	.word	0x40007000
 8005560:	40023800 	.word	0x40023800
 8005564:	42470060 	.word	0x42470060

08005568 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b084      	sub	sp, #16
 800556c:	af00      	add	r7, sp, #0
 800556e:	6078      	str	r0, [r7, #4]
 8005570:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d101      	bne.n	800557c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0cc      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800557c:	4b68      	ldr	r3, [pc, #416]	; (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0307 	and.w	r3, r3, #7
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	429a      	cmp	r2, r3
 8005588:	d90c      	bls.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558a:	4b65      	ldr	r3, [pc, #404]	; (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800558c:	683a      	ldr	r2, [r7, #0]
 800558e:	b2d2      	uxtb	r2, r2
 8005590:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005592:	4b63      	ldr	r3, [pc, #396]	; (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f003 0307 	and.w	r3, r3, #7
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	429a      	cmp	r2, r3
 800559e:	d001      	beq.n	80055a4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a0:	2301      	movs	r3, #1
 80055a2:	e0b8      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d020      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	f003 0304 	and.w	r3, r3, #4
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d005      	beq.n	80055c8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055bc:	4b59      	ldr	r3, [pc, #356]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	4a58      	ldr	r2, [pc, #352]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055c6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d005      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d4:	4b53      	ldr	r3, [pc, #332]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055d6:	689b      	ldr	r3, [r3, #8]
 80055d8:	4a52      	ldr	r2, [pc, #328]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055de:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e0:	4b50      	ldr	r3, [pc, #320]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	689b      	ldr	r3, [r3, #8]
 80055ec:	494d      	ldr	r1, [pc, #308]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80055ee:	4313      	orrs	r3, r2
 80055f0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f003 0301 	and.w	r3, r3, #1
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d044      	beq.n	8005688 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	685b      	ldr	r3, [r3, #4]
 8005602:	2b01      	cmp	r3, #1
 8005604:	d107      	bne.n	8005616 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005606:	4b47      	ldr	r3, [pc, #284]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d119      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005612:	2301      	movs	r3, #1
 8005614:	e07f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	685b      	ldr	r3, [r3, #4]
 800561a:	2b02      	cmp	r3, #2
 800561c:	d003      	beq.n	8005626 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005622:	2b03      	cmp	r3, #3
 8005624:	d107      	bne.n	8005636 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005626:	4b3f      	ldr	r3, [pc, #252]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800562e:	2b00      	cmp	r3, #0
 8005630:	d109      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005632:	2301      	movs	r3, #1
 8005634:	e06f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005636:	4b3b      	ldr	r3, [pc, #236]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f003 0302 	and.w	r3, r3, #2
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005642:	2301      	movs	r3, #1
 8005644:	e067      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005646:	4b37      	ldr	r3, [pc, #220]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005648:	689b      	ldr	r3, [r3, #8]
 800564a:	f023 0203 	bic.w	r2, r3, #3
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	685b      	ldr	r3, [r3, #4]
 8005652:	4934      	ldr	r1, [pc, #208]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005654:	4313      	orrs	r3, r2
 8005656:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005658:	f7fe fbd6 	bl	8003e08 <HAL_GetTick>
 800565c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800565e:	e00a      	b.n	8005676 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005660:	f7fe fbd2 	bl	8003e08 <HAL_GetTick>
 8005664:	4602      	mov	r2, r0
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	1ad3      	subs	r3, r2, r3
 800566a:	f241 3288 	movw	r2, #5000	; 0x1388
 800566e:	4293      	cmp	r3, r2
 8005670:	d901      	bls.n	8005676 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e04f      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005676:	4b2b      	ldr	r3, [pc, #172]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f003 020c 	and.w	r2, r3, #12
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	685b      	ldr	r3, [r3, #4]
 8005682:	009b      	lsls	r3, r3, #2
 8005684:	429a      	cmp	r2, r3
 8005686:	d1eb      	bne.n	8005660 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005688:	4b25      	ldr	r3, [pc, #148]	; (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	683a      	ldr	r2, [r7, #0]
 8005692:	429a      	cmp	r2, r3
 8005694:	d20c      	bcs.n	80056b0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005696:	4b22      	ldr	r3, [pc, #136]	; (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	b2d2      	uxtb	r2, r2
 800569c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800569e:	4b20      	ldr	r3, [pc, #128]	; (8005720 <HAL_RCC_ClockConfig+0x1b8>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	683a      	ldr	r2, [r7, #0]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d001      	beq.n	80056b0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056ac:	2301      	movs	r3, #1
 80056ae:	e032      	b.n	8005716 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0304 	and.w	r3, r3, #4
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d008      	beq.n	80056ce <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056bc:	4b19      	ldr	r3, [pc, #100]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	68db      	ldr	r3, [r3, #12]
 80056c8:	4916      	ldr	r1, [pc, #88]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0308 	and.w	r3, r3, #8
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d009      	beq.n	80056ee <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056da:	4b12      	ldr	r3, [pc, #72]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	691b      	ldr	r3, [r3, #16]
 80056e6:	00db      	lsls	r3, r3, #3
 80056e8:	490e      	ldr	r1, [pc, #56]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056ea:	4313      	orrs	r3, r2
 80056ec:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056ee:	f000 f821 	bl	8005734 <HAL_RCC_GetSysClockFreq>
 80056f2:	4602      	mov	r2, r0
 80056f4:	4b0b      	ldr	r3, [pc, #44]	; (8005724 <HAL_RCC_ClockConfig+0x1bc>)
 80056f6:	689b      	ldr	r3, [r3, #8]
 80056f8:	091b      	lsrs	r3, r3, #4
 80056fa:	f003 030f 	and.w	r3, r3, #15
 80056fe:	490a      	ldr	r1, [pc, #40]	; (8005728 <HAL_RCC_ClockConfig+0x1c0>)
 8005700:	5ccb      	ldrb	r3, [r1, r3]
 8005702:	fa22 f303 	lsr.w	r3, r2, r3
 8005706:	4a09      	ldr	r2, [pc, #36]	; (800572c <HAL_RCC_ClockConfig+0x1c4>)
 8005708:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800570a:	4b09      	ldr	r3, [pc, #36]	; (8005730 <HAL_RCC_ClockConfig+0x1c8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	4618      	mov	r0, r3
 8005710:	f7fe f8c0 	bl	8003894 <HAL_InitTick>

  return HAL_OK;
 8005714:	2300      	movs	r3, #0
}
 8005716:	4618      	mov	r0, r3
 8005718:	3710      	adds	r7, #16
 800571a:	46bd      	mov	sp, r7
 800571c:	bd80      	pop	{r7, pc}
 800571e:	bf00      	nop
 8005720:	40023c00 	.word	0x40023c00
 8005724:	40023800 	.word	0x40023800
 8005728:	080106a0 	.word	0x080106a0
 800572c:	200001ec 	.word	0x200001ec
 8005730:	200001f0 	.word	0x200001f0

08005734 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005734:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005738:	b084      	sub	sp, #16
 800573a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800573c:	2300      	movs	r3, #0
 800573e:	607b      	str	r3, [r7, #4]
 8005740:	2300      	movs	r3, #0
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	2300      	movs	r3, #0
 8005746:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800574c:	4b67      	ldr	r3, [pc, #412]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	f003 030c 	and.w	r3, r3, #12
 8005754:	2b08      	cmp	r3, #8
 8005756:	d00d      	beq.n	8005774 <HAL_RCC_GetSysClockFreq+0x40>
 8005758:	2b08      	cmp	r3, #8
 800575a:	f200 80bd 	bhi.w	80058d8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800575e:	2b00      	cmp	r3, #0
 8005760:	d002      	beq.n	8005768 <HAL_RCC_GetSysClockFreq+0x34>
 8005762:	2b04      	cmp	r3, #4
 8005764:	d003      	beq.n	800576e <HAL_RCC_GetSysClockFreq+0x3a>
 8005766:	e0b7      	b.n	80058d8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005768:	4b61      	ldr	r3, [pc, #388]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800576a:	60bb      	str	r3, [r7, #8]
       break;
 800576c:	e0b7      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800576e:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005770:	60bb      	str	r3, [r7, #8]
      break;
 8005772:	e0b4      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005774:	4b5d      	ldr	r3, [pc, #372]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005776:	685b      	ldr	r3, [r3, #4]
 8005778:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800577c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800577e:	4b5b      	ldr	r3, [pc, #364]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005780:	685b      	ldr	r3, [r3, #4]
 8005782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d04d      	beq.n	8005826 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800578a:	4b58      	ldr	r3, [pc, #352]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 800578c:	685b      	ldr	r3, [r3, #4]
 800578e:	099b      	lsrs	r3, r3, #6
 8005790:	461a      	mov	r2, r3
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	f240 10ff 	movw	r0, #511	; 0x1ff
 800579a:	f04f 0100 	mov.w	r1, #0
 800579e:	ea02 0800 	and.w	r8, r2, r0
 80057a2:	ea03 0901 	and.w	r9, r3, r1
 80057a6:	4640      	mov	r0, r8
 80057a8:	4649      	mov	r1, r9
 80057aa:	f04f 0200 	mov.w	r2, #0
 80057ae:	f04f 0300 	mov.w	r3, #0
 80057b2:	014b      	lsls	r3, r1, #5
 80057b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057b8:	0142      	lsls	r2, r0, #5
 80057ba:	4610      	mov	r0, r2
 80057bc:	4619      	mov	r1, r3
 80057be:	ebb0 0008 	subs.w	r0, r0, r8
 80057c2:	eb61 0109 	sbc.w	r1, r1, r9
 80057c6:	f04f 0200 	mov.w	r2, #0
 80057ca:	f04f 0300 	mov.w	r3, #0
 80057ce:	018b      	lsls	r3, r1, #6
 80057d0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057d4:	0182      	lsls	r2, r0, #6
 80057d6:	1a12      	subs	r2, r2, r0
 80057d8:	eb63 0301 	sbc.w	r3, r3, r1
 80057dc:	f04f 0000 	mov.w	r0, #0
 80057e0:	f04f 0100 	mov.w	r1, #0
 80057e4:	00d9      	lsls	r1, r3, #3
 80057e6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ea:	00d0      	lsls	r0, r2, #3
 80057ec:	4602      	mov	r2, r0
 80057ee:	460b      	mov	r3, r1
 80057f0:	eb12 0208 	adds.w	r2, r2, r8
 80057f4:	eb43 0309 	adc.w	r3, r3, r9
 80057f8:	f04f 0000 	mov.w	r0, #0
 80057fc:	f04f 0100 	mov.w	r1, #0
 8005800:	0259      	lsls	r1, r3, #9
 8005802:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005806:	0250      	lsls	r0, r2, #9
 8005808:	4602      	mov	r2, r0
 800580a:	460b      	mov	r3, r1
 800580c:	4610      	mov	r0, r2
 800580e:	4619      	mov	r1, r3
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	461a      	mov	r2, r3
 8005814:	f04f 0300 	mov.w	r3, #0
 8005818:	f7fb fa36 	bl	8000c88 <__aeabi_uldivmod>
 800581c:	4602      	mov	r2, r0
 800581e:	460b      	mov	r3, r1
 8005820:	4613      	mov	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e04a      	b.n	80058bc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005826:	4b31      	ldr	r3, [pc, #196]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005828:	685b      	ldr	r3, [r3, #4]
 800582a:	099b      	lsrs	r3, r3, #6
 800582c:	461a      	mov	r2, r3
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005836:	f04f 0100 	mov.w	r1, #0
 800583a:	ea02 0400 	and.w	r4, r2, r0
 800583e:	ea03 0501 	and.w	r5, r3, r1
 8005842:	4620      	mov	r0, r4
 8005844:	4629      	mov	r1, r5
 8005846:	f04f 0200 	mov.w	r2, #0
 800584a:	f04f 0300 	mov.w	r3, #0
 800584e:	014b      	lsls	r3, r1, #5
 8005850:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005854:	0142      	lsls	r2, r0, #5
 8005856:	4610      	mov	r0, r2
 8005858:	4619      	mov	r1, r3
 800585a:	1b00      	subs	r0, r0, r4
 800585c:	eb61 0105 	sbc.w	r1, r1, r5
 8005860:	f04f 0200 	mov.w	r2, #0
 8005864:	f04f 0300 	mov.w	r3, #0
 8005868:	018b      	lsls	r3, r1, #6
 800586a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800586e:	0182      	lsls	r2, r0, #6
 8005870:	1a12      	subs	r2, r2, r0
 8005872:	eb63 0301 	sbc.w	r3, r3, r1
 8005876:	f04f 0000 	mov.w	r0, #0
 800587a:	f04f 0100 	mov.w	r1, #0
 800587e:	00d9      	lsls	r1, r3, #3
 8005880:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005884:	00d0      	lsls	r0, r2, #3
 8005886:	4602      	mov	r2, r0
 8005888:	460b      	mov	r3, r1
 800588a:	1912      	adds	r2, r2, r4
 800588c:	eb45 0303 	adc.w	r3, r5, r3
 8005890:	f04f 0000 	mov.w	r0, #0
 8005894:	f04f 0100 	mov.w	r1, #0
 8005898:	0299      	lsls	r1, r3, #10
 800589a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800589e:	0290      	lsls	r0, r2, #10
 80058a0:	4602      	mov	r2, r0
 80058a2:	460b      	mov	r3, r1
 80058a4:	4610      	mov	r0, r2
 80058a6:	4619      	mov	r1, r3
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	461a      	mov	r2, r3
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	f7fb f9ea 	bl	8000c88 <__aeabi_uldivmod>
 80058b4:	4602      	mov	r2, r0
 80058b6:	460b      	mov	r3, r1
 80058b8:	4613      	mov	r3, r2
 80058ba:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058bc:	4b0b      	ldr	r3, [pc, #44]	; (80058ec <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	0c1b      	lsrs	r3, r3, #16
 80058c2:	f003 0303 	and.w	r3, r3, #3
 80058c6:	3301      	adds	r3, #1
 80058c8:	005b      	lsls	r3, r3, #1
 80058ca:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058cc:	68fa      	ldr	r2, [r7, #12]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d4:	60bb      	str	r3, [r7, #8]
      break;
 80058d6:	e002      	b.n	80058de <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058d8:	4b05      	ldr	r3, [pc, #20]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058da:	60bb      	str	r3, [r7, #8]
      break;
 80058dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058de:	68bb      	ldr	r3, [r7, #8]
}
 80058e0:	4618      	mov	r0, r3
 80058e2:	3710      	adds	r7, #16
 80058e4:	46bd      	mov	sp, r7
 80058e6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058ea:	bf00      	nop
 80058ec:	40023800 	.word	0x40023800
 80058f0:	00f42400 	.word	0x00f42400
 80058f4:	007a1200 	.word	0x007a1200

080058f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058f8:	b480      	push	{r7}
 80058fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058fc:	4b03      	ldr	r3, [pc, #12]	; (800590c <HAL_RCC_GetHCLKFreq+0x14>)
 80058fe:	681b      	ldr	r3, [r3, #0]
}
 8005900:	4618      	mov	r0, r3
 8005902:	46bd      	mov	sp, r7
 8005904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005908:	4770      	bx	lr
 800590a:	bf00      	nop
 800590c:	200001ec 	.word	0x200001ec

08005910 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005914:	f7ff fff0 	bl	80058f8 <HAL_RCC_GetHCLKFreq>
 8005918:	4602      	mov	r2, r0
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCC_GetPCLK1Freq+0x20>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	0a9b      	lsrs	r3, r3, #10
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	4903      	ldr	r1, [pc, #12]	; (8005934 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005926:	5ccb      	ldrb	r3, [r1, r3]
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40023800 	.word	0x40023800
 8005934:	080106b0 	.word	0x080106b0

08005938 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800593c:	f7ff ffdc 	bl	80058f8 <HAL_RCC_GetHCLKFreq>
 8005940:	4602      	mov	r2, r0
 8005942:	4b05      	ldr	r3, [pc, #20]	; (8005958 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	0b5b      	lsrs	r3, r3, #13
 8005948:	f003 0307 	and.w	r3, r3, #7
 800594c:	4903      	ldr	r1, [pc, #12]	; (800595c <HAL_RCC_GetPCLK2Freq+0x24>)
 800594e:	5ccb      	ldrb	r3, [r1, r3]
 8005950:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005954:	4618      	mov	r0, r3
 8005956:	bd80      	pop	{r7, pc}
 8005958:	40023800 	.word	0x40023800
 800595c:	080106b0 	.word	0x080106b0

08005960 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005960:	b480      	push	{r7}
 8005962:	b083      	sub	sp, #12
 8005964:	af00      	add	r7, sp, #0
 8005966:	6078      	str	r0, [r7, #4]
 8005968:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	220f      	movs	r2, #15
 800596e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005970:	4b12      	ldr	r3, [pc, #72]	; (80059bc <HAL_RCC_GetClockConfig+0x5c>)
 8005972:	689b      	ldr	r3, [r3, #8]
 8005974:	f003 0203 	and.w	r2, r3, #3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800597c:	4b0f      	ldr	r3, [pc, #60]	; (80059bc <HAL_RCC_GetClockConfig+0x5c>)
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005988:	4b0c      	ldr	r3, [pc, #48]	; (80059bc <HAL_RCC_GetClockConfig+0x5c>)
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005994:	4b09      	ldr	r3, [pc, #36]	; (80059bc <HAL_RCC_GetClockConfig+0x5c>)
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	08db      	lsrs	r3, r3, #3
 800599a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059a2:	4b07      	ldr	r3, [pc, #28]	; (80059c0 <HAL_RCC_GetClockConfig+0x60>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f003 0207 	and.w	r2, r3, #7
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	601a      	str	r2, [r3, #0]
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr
 80059ba:	bf00      	nop
 80059bc:	40023800 	.word	0x40023800
 80059c0:	40023c00 	.word	0x40023c00

080059c4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b082      	sub	sp, #8
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d101      	bne.n	80059d6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059d2:	2301      	movs	r3, #1
 80059d4:	e07b      	b.n	8005ace <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d108      	bne.n	80059f0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	685b      	ldr	r3, [r3, #4]
 80059e2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059e6:	d009      	beq.n	80059fc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	61da      	str	r2, [r3, #28]
 80059ee:	e005      	b.n	80059fc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2200      	movs	r2, #0
 80059f4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	2200      	movs	r2, #0
 80059fa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2200      	movs	r2, #0
 8005a00:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a08:	b2db      	uxtb	r3, r3
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d106      	bne.n	8005a1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a16:	6878      	ldr	r0, [r7, #4]
 8005a18:	f7fd fa94 	bl	8002f44 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2202      	movs	r2, #2
 8005a20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	681a      	ldr	r2, [r3, #0]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	685b      	ldr	r3, [r3, #4]
 8005a38:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	689b      	ldr	r3, [r3, #8]
 8005a40:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a44:	431a      	orrs	r2, r3
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a4e:	431a      	orrs	r2, r3
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	691b      	ldr	r3, [r3, #16]
 8005a54:	f003 0302 	and.w	r3, r3, #2
 8005a58:	431a      	orrs	r2, r3
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	695b      	ldr	r3, [r3, #20]
 8005a5e:	f003 0301 	and.w	r3, r3, #1
 8005a62:	431a      	orrs	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	699b      	ldr	r3, [r3, #24]
 8005a68:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	69db      	ldr	r3, [r3, #28]
 8005a72:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a76:	431a      	orrs	r2, r3
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6a1b      	ldr	r3, [r3, #32]
 8005a7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a80:	ea42 0103 	orr.w	r1, r2, r3
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	430a      	orrs	r2, r1
 8005a92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	699b      	ldr	r3, [r3, #24]
 8005a98:	0c1b      	lsrs	r3, r3, #16
 8005a9a:	f003 0104 	and.w	r1, r3, #4
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa2:	f003 0210 	and.w	r2, r3, #16
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	69da      	ldr	r2, [r3, #28]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005abc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2201      	movs	r2, #1
 8005ac8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005acc:	2300      	movs	r3, #0
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3708      	adds	r7, #8
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}

08005ad6 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ad6:	b580      	push	{r7, lr}
 8005ad8:	b088      	sub	sp, #32
 8005ada:	af00      	add	r7, sp, #0
 8005adc:	60f8      	str	r0, [r7, #12]
 8005ade:	60b9      	str	r1, [r7, #8]
 8005ae0:	603b      	str	r3, [r7, #0]
 8005ae2:	4613      	mov	r3, r2
 8005ae4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d101      	bne.n	8005af8 <HAL_SPI_Transmit+0x22>
 8005af4:	2302      	movs	r3, #2
 8005af6:	e126      	b.n	8005d46 <HAL_SPI_Transmit+0x270>
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2201      	movs	r2, #1
 8005afc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b00:	f7fe f982 	bl	8003e08 <HAL_GetTick>
 8005b04:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b06:	88fb      	ldrh	r3, [r7, #6]
 8005b08:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b10:	b2db      	uxtb	r3, r3
 8005b12:	2b01      	cmp	r3, #1
 8005b14:	d002      	beq.n	8005b1c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b16:	2302      	movs	r3, #2
 8005b18:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b1a:	e10b      	b.n	8005d34 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d002      	beq.n	8005b28 <HAL_SPI_Transmit+0x52>
 8005b22:	88fb      	ldrh	r3, [r7, #6]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d102      	bne.n	8005b2e <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b2c:	e102      	b.n	8005d34 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	2203      	movs	r2, #3
 8005b32:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	2200      	movs	r2, #0
 8005b3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	68ba      	ldr	r2, [r7, #8]
 8005b40:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	88fa      	ldrh	r2, [r7, #6]
 8005b46:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	88fa      	ldrh	r2, [r7, #6]
 8005b4c:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	2200      	movs	r2, #0
 8005b52:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b54:	68fb      	ldr	r3, [r7, #12]
 8005b56:	2200      	movs	r2, #0
 8005b58:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	2200      	movs	r2, #0
 8005b64:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	2200      	movs	r2, #0
 8005b6a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b74:	d10f      	bne.n	8005b96 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	681a      	ldr	r2, [r3, #0]
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b84:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	681a      	ldr	r2, [r3, #0]
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b94:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba0:	2b40      	cmp	r3, #64	; 0x40
 8005ba2:	d007      	beq.n	8005bb4 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	68db      	ldr	r3, [r3, #12]
 8005bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bbc:	d14b      	bne.n	8005c56 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	685b      	ldr	r3, [r3, #4]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d002      	beq.n	8005bcc <HAL_SPI_Transmit+0xf6>
 8005bc6:	8afb      	ldrh	r3, [r7, #22]
 8005bc8:	2b01      	cmp	r3, #1
 8005bca:	d13e      	bne.n	8005c4a <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd0:	881a      	ldrh	r2, [r3, #0]
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bdc:	1c9a      	adds	r2, r3, #2
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005be6:	b29b      	uxth	r3, r3
 8005be8:	3b01      	subs	r3, #1
 8005bea:	b29a      	uxth	r2, r3
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bf0:	e02b      	b.n	8005c4a <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	689b      	ldr	r3, [r3, #8]
 8005bf8:	f003 0302 	and.w	r3, r3, #2
 8005bfc:	2b02      	cmp	r3, #2
 8005bfe:	d112      	bne.n	8005c26 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c04:	881a      	ldrh	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c10:	1c9a      	adds	r2, r3, #2
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1a:	b29b      	uxth	r3, r3
 8005c1c:	3b01      	subs	r3, #1
 8005c1e:	b29a      	uxth	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c24:	e011      	b.n	8005c4a <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c26:	f7fe f8ef 	bl	8003e08 <HAL_GetTick>
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	69bb      	ldr	r3, [r7, #24]
 8005c2e:	1ad3      	subs	r3, r2, r3
 8005c30:	683a      	ldr	r2, [r7, #0]
 8005c32:	429a      	cmp	r2, r3
 8005c34:	d803      	bhi.n	8005c3e <HAL_SPI_Transmit+0x168>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3c:	d102      	bne.n	8005c44 <HAL_SPI_Transmit+0x16e>
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d102      	bne.n	8005c4a <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c44:	2303      	movs	r3, #3
 8005c46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c48:	e074      	b.n	8005d34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c4e:	b29b      	uxth	r3, r3
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d1ce      	bne.n	8005bf2 <HAL_SPI_Transmit+0x11c>
 8005c54:	e04c      	b.n	8005cf0 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	685b      	ldr	r3, [r3, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d002      	beq.n	8005c64 <HAL_SPI_Transmit+0x18e>
 8005c5e:	8afb      	ldrh	r3, [r7, #22]
 8005c60:	2b01      	cmp	r3, #1
 8005c62:	d140      	bne.n	8005ce6 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	330c      	adds	r3, #12
 8005c6e:	7812      	ldrb	r2, [r2, #0]
 8005c70:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c76:	1c5a      	adds	r2, r3, #1
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c80:	b29b      	uxth	r3, r3
 8005c82:	3b01      	subs	r3, #1
 8005c84:	b29a      	uxth	r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c8a:	e02c      	b.n	8005ce6 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	689b      	ldr	r3, [r3, #8]
 8005c92:	f003 0302 	and.w	r3, r3, #2
 8005c96:	2b02      	cmp	r3, #2
 8005c98:	d113      	bne.n	8005cc2 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	330c      	adds	r3, #12
 8005ca4:	7812      	ldrb	r2, [r2, #0]
 8005ca6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cac:	1c5a      	adds	r2, r3, #1
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	b29a      	uxth	r2, r3
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cc0:	e011      	b.n	8005ce6 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc2:	f7fe f8a1 	bl	8003e08 <HAL_GetTick>
 8005cc6:	4602      	mov	r2, r0
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	1ad3      	subs	r3, r2, r3
 8005ccc:	683a      	ldr	r2, [r7, #0]
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d803      	bhi.n	8005cda <HAL_SPI_Transmit+0x204>
 8005cd2:	683b      	ldr	r3, [r7, #0]
 8005cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cd8:	d102      	bne.n	8005ce0 <HAL_SPI_Transmit+0x20a>
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d102      	bne.n	8005ce6 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ce0:	2303      	movs	r3, #3
 8005ce2:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ce4:	e026      	b.n	8005d34 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cea:	b29b      	uxth	r3, r3
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d1cd      	bne.n	8005c8c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf0:	69ba      	ldr	r2, [r7, #24]
 8005cf2:	6839      	ldr	r1, [r7, #0]
 8005cf4:	68f8      	ldr	r0, [r7, #12]
 8005cf6:	f000 f8b3 	bl	8005e60 <SPI_EndRxTxTransaction>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d002      	beq.n	8005d06 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d00:	68fb      	ldr	r3, [r7, #12]
 8005d02:	2220      	movs	r2, #32
 8005d04:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	689b      	ldr	r3, [r3, #8]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d10a      	bne.n	8005d24 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d0e:	2300      	movs	r3, #0
 8005d10:	613b      	str	r3, [r7, #16]
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	613b      	str	r3, [r7, #16]
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	613b      	str	r3, [r7, #16]
 8005d22:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d002      	beq.n	8005d32 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	77fb      	strb	r3, [r7, #31]
 8005d30:	e000      	b.n	8005d34 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d32:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2201      	movs	r2, #1
 8005d38:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2200      	movs	r2, #0
 8005d40:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d44:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	3720      	adds	r7, #32
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	bd80      	pop	{r7, pc}
	...

08005d50 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b088      	sub	sp, #32
 8005d54:	af00      	add	r7, sp, #0
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d60:	f7fe f852 	bl	8003e08 <HAL_GetTick>
 8005d64:	4602      	mov	r2, r0
 8005d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d68:	1a9b      	subs	r3, r3, r2
 8005d6a:	683a      	ldr	r2, [r7, #0]
 8005d6c:	4413      	add	r3, r2
 8005d6e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d70:	f7fe f84a 	bl	8003e08 <HAL_GetTick>
 8005d74:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d76:	4b39      	ldr	r3, [pc, #228]	; (8005e5c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	015b      	lsls	r3, r3, #5
 8005d7c:	0d1b      	lsrs	r3, r3, #20
 8005d7e:	69fa      	ldr	r2, [r7, #28]
 8005d80:	fb02 f303 	mul.w	r3, r2, r3
 8005d84:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d86:	e054      	b.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d8e:	d050      	beq.n	8005e32 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d90:	f7fe f83a 	bl	8003e08 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	69bb      	ldr	r3, [r7, #24]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	69fa      	ldr	r2, [r7, #28]
 8005d9c:	429a      	cmp	r2, r3
 8005d9e:	d902      	bls.n	8005da6 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005da0:	69fb      	ldr	r3, [r7, #28]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d13d      	bne.n	8005e22 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005da6:	68fb      	ldr	r3, [r7, #12]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005db4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	685b      	ldr	r3, [r3, #4]
 8005dba:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dbe:	d111      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dc8:	d004      	beq.n	8005dd4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dca:	68fb      	ldr	r3, [r7, #12]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd2:	d107      	bne.n	8005de4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	681a      	ldr	r2, [r3, #0]
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005de8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dec:	d10f      	bne.n	8005e0e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005dfc:	601a      	str	r2, [r3, #0]
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e0c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2201      	movs	r2, #1
 8005e12:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e1e:	2303      	movs	r3, #3
 8005e20:	e017      	b.n	8005e52 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d101      	bne.n	8005e2c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	689a      	ldr	r2, [r3, #8]
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	4013      	ands	r3, r2
 8005e3c:	68ba      	ldr	r2, [r7, #8]
 8005e3e:	429a      	cmp	r2, r3
 8005e40:	bf0c      	ite	eq
 8005e42:	2301      	moveq	r3, #1
 8005e44:	2300      	movne	r3, #0
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	461a      	mov	r2, r3
 8005e4a:	79fb      	ldrb	r3, [r7, #7]
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d19b      	bne.n	8005d88 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e50:	2300      	movs	r3, #0
}
 8005e52:	4618      	mov	r0, r3
 8005e54:	3720      	adds	r7, #32
 8005e56:	46bd      	mov	sp, r7
 8005e58:	bd80      	pop	{r7, pc}
 8005e5a:	bf00      	nop
 8005e5c:	200001ec 	.word	0x200001ec

08005e60 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e60:	b580      	push	{r7, lr}
 8005e62:	b088      	sub	sp, #32
 8005e64:	af02      	add	r7, sp, #8
 8005e66:	60f8      	str	r0, [r7, #12]
 8005e68:	60b9      	str	r1, [r7, #8]
 8005e6a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e6c:	4b1b      	ldr	r3, [pc, #108]	; (8005edc <SPI_EndRxTxTransaction+0x7c>)
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	4a1b      	ldr	r2, [pc, #108]	; (8005ee0 <SPI_EndRxTxTransaction+0x80>)
 8005e72:	fba2 2303 	umull	r2, r3, r2, r3
 8005e76:	0d5b      	lsrs	r3, r3, #21
 8005e78:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e7c:	fb02 f303 	mul.w	r3, r2, r3
 8005e80:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	685b      	ldr	r3, [r3, #4]
 8005e86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8a:	d112      	bne.n	8005eb2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	9300      	str	r3, [sp, #0]
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	2200      	movs	r2, #0
 8005e94:	2180      	movs	r1, #128	; 0x80
 8005e96:	68f8      	ldr	r0, [r7, #12]
 8005e98:	f7ff ff5a 	bl	8005d50 <SPI_WaitFlagStateUntilTimeout>
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea2:	68fb      	ldr	r3, [r7, #12]
 8005ea4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ea6:	f043 0220 	orr.w	r2, r3, #32
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eae:	2303      	movs	r3, #3
 8005eb0:	e00f      	b.n	8005ed2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d00a      	beq.n	8005ece <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005eb8:	697b      	ldr	r3, [r7, #20]
 8005eba:	3b01      	subs	r3, #1
 8005ebc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	689b      	ldr	r3, [r3, #8]
 8005ec4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ec8:	2b80      	cmp	r3, #128	; 0x80
 8005eca:	d0f2      	beq.n	8005eb2 <SPI_EndRxTxTransaction+0x52>
 8005ecc:	e000      	b.n	8005ed0 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ece:	bf00      	nop
  }

  return HAL_OK;
 8005ed0:	2300      	movs	r3, #0
}
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	3718      	adds	r7, #24
 8005ed6:	46bd      	mov	sp, r7
 8005ed8:	bd80      	pop	{r7, pc}
 8005eda:	bf00      	nop
 8005edc:	200001ec 	.word	0x200001ec
 8005ee0:	165e9f81 	.word	0x165e9f81

08005ee4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d101      	bne.n	8005ef6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ef2:	2301      	movs	r3, #1
 8005ef4:	e041      	b.n	8005f7a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b00      	cmp	r3, #0
 8005f00:	d106      	bne.n	8005f10 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2200      	movs	r2, #0
 8005f06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f0a:	6878      	ldr	r0, [r7, #4]
 8005f0c:	f7fd f882 	bl	8003014 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2202      	movs	r2, #2
 8005f14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f000 fcd0 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2201      	movs	r2, #1
 8005f2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2201      	movs	r2, #1
 8005f3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2201      	movs	r2, #1
 8005f44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2201      	movs	r2, #1
 8005f4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2201      	movs	r2, #1
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2201      	movs	r2, #1
 8005f64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2201      	movs	r2, #1
 8005f6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2201      	movs	r2, #1
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f78:	2300      	movs	r3, #0
}
 8005f7a:	4618      	mov	r0, r3
 8005f7c:	3708      	adds	r7, #8
 8005f7e:	46bd      	mov	sp, r7
 8005f80:	bd80      	pop	{r7, pc}
	...

08005f84 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f92:	b2db      	uxtb	r3, r3
 8005f94:	2b01      	cmp	r3, #1
 8005f96:	d001      	beq.n	8005f9c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f98:	2301      	movs	r3, #1
 8005f9a:	e046      	b.n	800602a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2202      	movs	r2, #2
 8005fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	4a23      	ldr	r2, [pc, #140]	; (8006038 <HAL_TIM_Base_Start+0xb4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d022      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb6:	d01d      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	4a1f      	ldr	r2, [pc, #124]	; (800603c <HAL_TIM_Base_Start+0xb8>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d018      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	4a1e      	ldr	r2, [pc, #120]	; (8006040 <HAL_TIM_Base_Start+0xbc>)
 8005fc8:	4293      	cmp	r3, r2
 8005fca:	d013      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4a1c      	ldr	r2, [pc, #112]	; (8006044 <HAL_TIM_Base_Start+0xc0>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d00e      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	4a1b      	ldr	r2, [pc, #108]	; (8006048 <HAL_TIM_Base_Start+0xc4>)
 8005fdc:	4293      	cmp	r3, r2
 8005fde:	d009      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a19      	ldr	r2, [pc, #100]	; (800604c <HAL_TIM_Base_Start+0xc8>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d004      	beq.n	8005ff4 <HAL_TIM_Base_Start+0x70>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	4a18      	ldr	r2, [pc, #96]	; (8006050 <HAL_TIM_Base_Start+0xcc>)
 8005ff0:	4293      	cmp	r3, r2
 8005ff2:	d111      	bne.n	8006018 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	f003 0307 	and.w	r3, r3, #7
 8005ffe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	2b06      	cmp	r3, #6
 8006004:	d010      	beq.n	8006028 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	681a      	ldr	r2, [r3, #0]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f042 0201 	orr.w	r2, r2, #1
 8006014:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006016:	e007      	b.n	8006028 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	681a      	ldr	r2, [r3, #0]
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	f042 0201 	orr.w	r2, r2, #1
 8006026:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006028:	2300      	movs	r3, #0
}
 800602a:	4618      	mov	r0, r3
 800602c:	3714      	adds	r7, #20
 800602e:	46bd      	mov	sp, r7
 8006030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006034:	4770      	bx	lr
 8006036:	bf00      	nop
 8006038:	40010000 	.word	0x40010000
 800603c:	40000400 	.word	0x40000400
 8006040:	40000800 	.word	0x40000800
 8006044:	40000c00 	.word	0x40000c00
 8006048:	40010400 	.word	0x40010400
 800604c:	40014000 	.word	0x40014000
 8006050:	40001800 	.word	0x40001800

08006054 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006054:	b480      	push	{r7}
 8006056:	b085      	sub	sp, #20
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006062:	b2db      	uxtb	r3, r3
 8006064:	2b01      	cmp	r3, #1
 8006066:	d001      	beq.n	800606c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006068:	2301      	movs	r3, #1
 800606a:	e04e      	b.n	800610a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2202      	movs	r2, #2
 8006070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	68da      	ldr	r2, [r3, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	4a23      	ldr	r2, [pc, #140]	; (8006118 <HAL_TIM_Base_Start_IT+0xc4>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d022      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006096:	d01d      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1f      	ldr	r2, [pc, #124]	; (800611c <HAL_TIM_Base_Start_IT+0xc8>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	4a1e      	ldr	r2, [pc, #120]	; (8006120 <HAL_TIM_Base_Start_IT+0xcc>)
 80060a8:	4293      	cmp	r3, r2
 80060aa:	d013      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <HAL_TIM_Base_Start_IT+0xd0>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a1b      	ldr	r2, [pc, #108]	; (8006128 <HAL_TIM_Base_Start_IT+0xd4>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a19      	ldr	r2, [pc, #100]	; (800612c <HAL_TIM_Base_Start_IT+0xd8>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a18      	ldr	r2, [pc, #96]	; (8006130 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d111      	bne.n	80060f8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	689b      	ldr	r3, [r3, #8]
 80060da:	f003 0307 	and.w	r3, r3, #7
 80060de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	2b06      	cmp	r3, #6
 80060e4:	d010      	beq.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f042 0201 	orr.w	r2, r2, #1
 80060f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060f6:	e007      	b.n	8006108 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	681a      	ldr	r2, [r3, #0]
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f042 0201 	orr.w	r2, r2, #1
 8006106:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006108:	2300      	movs	r3, #0
}
 800610a:	4618      	mov	r0, r3
 800610c:	3714      	adds	r7, #20
 800610e:	46bd      	mov	sp, r7
 8006110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop
 8006118:	40010000 	.word	0x40010000
 800611c:	40000400 	.word	0x40000400
 8006120:	40000800 	.word	0x40000800
 8006124:	40000c00 	.word	0x40000c00
 8006128:	40010400 	.word	0x40010400
 800612c:	40014000 	.word	0x40014000
 8006130:	40001800 	.word	0x40001800

08006134 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b082      	sub	sp, #8
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d101      	bne.n	8006146 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006142:	2301      	movs	r3, #1
 8006144:	e041      	b.n	80061ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800614c:	b2db      	uxtb	r3, r3
 800614e:	2b00      	cmp	r3, #0
 8006150:	d106      	bne.n	8006160 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2200      	movs	r2, #0
 8006156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800615a:	6878      	ldr	r0, [r7, #4]
 800615c:	f7fc ffd8 	bl	8003110 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2202      	movs	r2, #2
 8006164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	3304      	adds	r3, #4
 8006170:	4619      	mov	r1, r3
 8006172:	4610      	mov	r0, r2
 8006174:	f000 fba8 	bl	80068c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2201      	movs	r2, #1
 800617c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	2201      	movs	r2, #1
 8006184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	2201      	movs	r2, #1
 800618c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2201      	movs	r2, #1
 8006194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2201      	movs	r2, #1
 800619c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2201      	movs	r2, #1
 80061a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2201      	movs	r2, #1
 80061b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	2201      	movs	r2, #1
 80061bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	2201      	movs	r2, #1
 80061c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061c8:	2300      	movs	r3, #0
}
 80061ca:	4618      	mov	r0, r3
 80061cc:	3708      	adds	r7, #8
 80061ce:	46bd      	mov	sp, r7
 80061d0:	bd80      	pop	{r7, pc}
	...

080061d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b084      	sub	sp, #16
 80061d8:	af00      	add	r7, sp, #0
 80061da:	6078      	str	r0, [r7, #4]
 80061dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d109      	bne.n	80061f8 <HAL_TIM_PWM_Start+0x24>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ea:	b2db      	uxtb	r3, r3
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	bf14      	ite	ne
 80061f0:	2301      	movne	r3, #1
 80061f2:	2300      	moveq	r3, #0
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	e022      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	2b04      	cmp	r3, #4
 80061fc:	d109      	bne.n	8006212 <HAL_TIM_PWM_Start+0x3e>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006204:	b2db      	uxtb	r3, r3
 8006206:	2b01      	cmp	r3, #1
 8006208:	bf14      	ite	ne
 800620a:	2301      	movne	r3, #1
 800620c:	2300      	moveq	r3, #0
 800620e:	b2db      	uxtb	r3, r3
 8006210:	e015      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	2b08      	cmp	r3, #8
 8006216:	d109      	bne.n	800622c <HAL_TIM_PWM_Start+0x58>
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800621e:	b2db      	uxtb	r3, r3
 8006220:	2b01      	cmp	r3, #1
 8006222:	bf14      	ite	ne
 8006224:	2301      	movne	r3, #1
 8006226:	2300      	moveq	r3, #0
 8006228:	b2db      	uxtb	r3, r3
 800622a:	e008      	b.n	800623e <HAL_TIM_PWM_Start+0x6a>
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006232:	b2db      	uxtb	r3, r3
 8006234:	2b01      	cmp	r3, #1
 8006236:	bf14      	ite	ne
 8006238:	2301      	movne	r3, #1
 800623a:	2300      	moveq	r3, #0
 800623c:	b2db      	uxtb	r3, r3
 800623e:	2b00      	cmp	r3, #0
 8006240:	d001      	beq.n	8006246 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006242:	2301      	movs	r3, #1
 8006244:	e07c      	b.n	8006340 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d104      	bne.n	8006256 <HAL_TIM_PWM_Start+0x82>
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2202      	movs	r2, #2
 8006250:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006254:	e013      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	2b04      	cmp	r3, #4
 800625a:	d104      	bne.n	8006266 <HAL_TIM_PWM_Start+0x92>
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2202      	movs	r2, #2
 8006260:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006264:	e00b      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	2b08      	cmp	r3, #8
 800626a:	d104      	bne.n	8006276 <HAL_TIM_PWM_Start+0xa2>
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	2202      	movs	r2, #2
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006274:	e003      	b.n	800627e <HAL_TIM_PWM_Start+0xaa>
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	2202      	movs	r2, #2
 800627a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2201      	movs	r2, #1
 8006284:	6839      	ldr	r1, [r7, #0]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fe08 	bl	8006e9c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	4a2d      	ldr	r2, [pc, #180]	; (8006348 <HAL_TIM_PWM_Start+0x174>)
 8006292:	4293      	cmp	r3, r2
 8006294:	d004      	beq.n	80062a0 <HAL_TIM_PWM_Start+0xcc>
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	4a2c      	ldr	r2, [pc, #176]	; (800634c <HAL_TIM_PWM_Start+0x178>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d101      	bne.n	80062a4 <HAL_TIM_PWM_Start+0xd0>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <HAL_TIM_PWM_Start+0xd2>
 80062a4:	2300      	movs	r3, #0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d007      	beq.n	80062ba <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062b8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	4a22      	ldr	r2, [pc, #136]	; (8006348 <HAL_TIM_PWM_Start+0x174>)
 80062c0:	4293      	cmp	r3, r2
 80062c2:	d022      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d01d      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	4a1f      	ldr	r2, [pc, #124]	; (8006350 <HAL_TIM_PWM_Start+0x17c>)
 80062d4:	4293      	cmp	r3, r2
 80062d6:	d018      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	4a1d      	ldr	r2, [pc, #116]	; (8006354 <HAL_TIM_PWM_Start+0x180>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d013      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	4a1c      	ldr	r2, [pc, #112]	; (8006358 <HAL_TIM_PWM_Start+0x184>)
 80062e8:	4293      	cmp	r3, r2
 80062ea:	d00e      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	4a16      	ldr	r2, [pc, #88]	; (800634c <HAL_TIM_PWM_Start+0x178>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d009      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a18      	ldr	r2, [pc, #96]	; (800635c <HAL_TIM_PWM_Start+0x188>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d004      	beq.n	800630a <HAL_TIM_PWM_Start+0x136>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a16      	ldr	r2, [pc, #88]	; (8006360 <HAL_TIM_PWM_Start+0x18c>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d111      	bne.n	800632e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	689b      	ldr	r3, [r3, #8]
 8006310:	f003 0307 	and.w	r3, r3, #7
 8006314:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	2b06      	cmp	r3, #6
 800631a:	d010      	beq.n	800633e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f042 0201 	orr.w	r2, r2, #1
 800632a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800632c:	e007      	b.n	800633e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f042 0201 	orr.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800633e:	2300      	movs	r3, #0
}
 8006340:	4618      	mov	r0, r3
 8006342:	3710      	adds	r7, #16
 8006344:	46bd      	mov	sp, r7
 8006346:	bd80      	pop	{r7, pc}
 8006348:	40010000 	.word	0x40010000
 800634c:	40010400 	.word	0x40010400
 8006350:	40000400 	.word	0x40000400
 8006354:	40000800 	.word	0x40000800
 8006358:	40000c00 	.word	0x40000c00
 800635c:	40014000 	.word	0x40014000
 8006360:	40001800 	.word	0x40001800

08006364 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b082      	sub	sp, #8
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	2b02      	cmp	r3, #2
 8006378:	d122      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	68db      	ldr	r3, [r3, #12]
 8006380:	f003 0302 	and.w	r3, r3, #2
 8006384:	2b02      	cmp	r3, #2
 8006386:	d11b      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	f06f 0202 	mvn.w	r2, #2
 8006390:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2201      	movs	r2, #1
 8006396:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	699b      	ldr	r3, [r3, #24]
 800639e:	f003 0303 	and.w	r3, r3, #3
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa70 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 80063ac:	e005      	b.n	80063ba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ae:	6878      	ldr	r0, [r7, #4]
 80063b0:	f000 fa62 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa73 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	2200      	movs	r2, #0
 80063be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0304 	and.w	r3, r3, #4
 80063ca:	2b04      	cmp	r3, #4
 80063cc:	d122      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0304 	and.w	r3, r3, #4
 80063d8:	2b04      	cmp	r3, #4
 80063da:	d11b      	bne.n	8006414 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0204 	mvn.w	r2, #4
 80063e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063f6:	2b00      	cmp	r3, #0
 80063f8:	d003      	beq.n	8006402 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fa:	6878      	ldr	r0, [r7, #4]
 80063fc:	f000 fa46 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 8006400:	e005      	b.n	800640e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 fa38 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006408:	6878      	ldr	r0, [r7, #4]
 800640a:	f000 fa49 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	2200      	movs	r2, #0
 8006412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	681b      	ldr	r3, [r3, #0]
 8006418:	691b      	ldr	r3, [r3, #16]
 800641a:	f003 0308 	and.w	r3, r3, #8
 800641e:	2b08      	cmp	r3, #8
 8006420:	d122      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68db      	ldr	r3, [r3, #12]
 8006428:	f003 0308 	and.w	r3, r3, #8
 800642c:	2b08      	cmp	r3, #8
 800642e:	d11b      	bne.n	8006468 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	f06f 0208 	mvn.w	r2, #8
 8006438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	2204      	movs	r2, #4
 800643e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	69db      	ldr	r3, [r3, #28]
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f000 fa1c 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 8006454:	e005      	b.n	8006462 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	f000 fa0e 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	f000 fa1f 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	2200      	movs	r2, #0
 8006466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	681b      	ldr	r3, [r3, #0]
 800646c:	691b      	ldr	r3, [r3, #16]
 800646e:	f003 0310 	and.w	r3, r3, #16
 8006472:	2b10      	cmp	r3, #16
 8006474:	d122      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	68db      	ldr	r3, [r3, #12]
 800647c:	f003 0310 	and.w	r3, r3, #16
 8006480:	2b10      	cmp	r3, #16
 8006482:	d11b      	bne.n	80064bc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	f06f 0210 	mvn.w	r2, #16
 800648c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2208      	movs	r2, #8
 8006492:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	69db      	ldr	r3, [r3, #28]
 800649a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d003      	beq.n	80064aa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f000 f9f2 	bl	800688c <HAL_TIM_IC_CaptureCallback>
 80064a8:	e005      	b.n	80064b6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064aa:	6878      	ldr	r0, [r7, #4]
 80064ac:	f000 f9e4 	bl	8006878 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f000 f9f5 	bl	80068a0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	2200      	movs	r2, #0
 80064ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	691b      	ldr	r3, [r3, #16]
 80064c2:	f003 0301 	and.w	r3, r3, #1
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d10e      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	68db      	ldr	r3, [r3, #12]
 80064d0:	f003 0301 	and.w	r3, r3, #1
 80064d4:	2b01      	cmp	r3, #1
 80064d6:	d107      	bne.n	80064e8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f06f 0201 	mvn.w	r2, #1
 80064e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fb fec4 	bl	8002270 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f2:	2b80      	cmp	r3, #128	; 0x80
 80064f4:	d10e      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	68db      	ldr	r3, [r3, #12]
 80064fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006500:	2b80      	cmp	r3, #128	; 0x80
 8006502:	d107      	bne.n	8006514 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800650c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fdc2 	bl	8007098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800651e:	2b40      	cmp	r3, #64	; 0x40
 8006520:	d10e      	bne.n	8006540 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	68db      	ldr	r3, [r3, #12]
 8006528:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800652c:	2b40      	cmp	r3, #64	; 0x40
 800652e:	d107      	bne.n	8006540 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006538:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653a:	6878      	ldr	r0, [r7, #4]
 800653c:	f000 f9ba 	bl	80068b4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	691b      	ldr	r3, [r3, #16]
 8006546:	f003 0320 	and.w	r3, r3, #32
 800654a:	2b20      	cmp	r3, #32
 800654c:	d10e      	bne.n	800656c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	68db      	ldr	r3, [r3, #12]
 8006554:	f003 0320 	and.w	r3, r3, #32
 8006558:	2b20      	cmp	r3, #32
 800655a:	d107      	bne.n	800656c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f06f 0220 	mvn.w	r2, #32
 8006564:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006566:	6878      	ldr	r0, [r7, #4]
 8006568:	f000 fd8c 	bl	8007084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800656c:	bf00      	nop
 800656e:	3708      	adds	r7, #8
 8006570:	46bd      	mov	sp, r7
 8006572:	bd80      	pop	{r7, pc}

08006574 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006574:	b580      	push	{r7, lr}
 8006576:	b084      	sub	sp, #16
 8006578:	af00      	add	r7, sp, #0
 800657a:	60f8      	str	r0, [r7, #12]
 800657c:	60b9      	str	r1, [r7, #8]
 800657e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006586:	2b01      	cmp	r3, #1
 8006588:	d101      	bne.n	800658e <HAL_TIM_PWM_ConfigChannel+0x1a>
 800658a:	2302      	movs	r3, #2
 800658c:	e0ac      	b.n	80066e8 <HAL_TIM_PWM_ConfigChannel+0x174>
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	2201      	movs	r2, #1
 8006592:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	2b0c      	cmp	r3, #12
 800659a:	f200 809f 	bhi.w	80066dc <HAL_TIM_PWM_ConfigChannel+0x168>
 800659e:	a201      	add	r2, pc, #4	; (adr r2, 80065a4 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80065a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a4:	080065d9 	.word	0x080065d9
 80065a8:	080066dd 	.word	0x080066dd
 80065ac:	080066dd 	.word	0x080066dd
 80065b0:	080066dd 	.word	0x080066dd
 80065b4:	08006619 	.word	0x08006619
 80065b8:	080066dd 	.word	0x080066dd
 80065bc:	080066dd 	.word	0x080066dd
 80065c0:	080066dd 	.word	0x080066dd
 80065c4:	0800665b 	.word	0x0800665b
 80065c8:	080066dd 	.word	0x080066dd
 80065cc:	080066dd 	.word	0x080066dd
 80065d0:	080066dd 	.word	0x080066dd
 80065d4:	0800669b 	.word	0x0800669b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	68b9      	ldr	r1, [r7, #8]
 80065de:	4618      	mov	r0, r3
 80065e0:	f000 fa12 	bl	8006a08 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	699a      	ldr	r2, [r3, #24]
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	f042 0208 	orr.w	r2, r2, #8
 80065f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	699a      	ldr	r2, [r3, #24]
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	f022 0204 	bic.w	r2, r2, #4
 8006602:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	6999      	ldr	r1, [r3, #24]
 800660a:	68bb      	ldr	r3, [r7, #8]
 800660c:	691a      	ldr	r2, [r3, #16]
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	619a      	str	r2, [r3, #24]
      break;
 8006616:	e062      	b.n	80066de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fa62 	bl	8006ae8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	699a      	ldr	r2, [r3, #24]
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006632:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	699a      	ldr	r2, [r3, #24]
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006642:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6999      	ldr	r1, [r3, #24]
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691b      	ldr	r3, [r3, #16]
 800664e:	021a      	lsls	r2, r3, #8
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	430a      	orrs	r2, r1
 8006656:	619a      	str	r2, [r3, #24]
      break;
 8006658:	e041      	b.n	80066de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	68b9      	ldr	r1, [r7, #8]
 8006660:	4618      	mov	r0, r3
 8006662:	f000 fab7 	bl	8006bd4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69da      	ldr	r2, [r3, #28]
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	f042 0208 	orr.w	r2, r2, #8
 8006674:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	69da      	ldr	r2, [r3, #28]
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f022 0204 	bic.w	r2, r2, #4
 8006684:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	69d9      	ldr	r1, [r3, #28]
 800668c:	68bb      	ldr	r3, [r7, #8]
 800668e:	691a      	ldr	r2, [r3, #16]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	61da      	str	r2, [r3, #28]
      break;
 8006698:	e021      	b.n	80066de <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	681b      	ldr	r3, [r3, #0]
 800669e:	68b9      	ldr	r1, [r7, #8]
 80066a0:	4618      	mov	r0, r3
 80066a2:	f000 fb0b 	bl	8006cbc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	69da      	ldr	r2, [r3, #28]
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	69da      	ldr	r2, [r3, #28]
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	69d9      	ldr	r1, [r3, #28]
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	691b      	ldr	r3, [r3, #16]
 80066d0:	021a      	lsls	r2, r3, #8
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	430a      	orrs	r2, r1
 80066d8:	61da      	str	r2, [r3, #28]
      break;
 80066da:	e000      	b.n	80066de <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80066dc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	2200      	movs	r2, #0
 80066e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066e6:	2300      	movs	r3, #0
}
 80066e8:	4618      	mov	r0, r3
 80066ea:	3710      	adds	r7, #16
 80066ec:	46bd      	mov	sp, r7
 80066ee:	bd80      	pop	{r7, pc}

080066f0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	b084      	sub	sp, #16
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
 80066f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006700:	2b01      	cmp	r3, #1
 8006702:	d101      	bne.n	8006708 <HAL_TIM_ConfigClockSource+0x18>
 8006704:	2302      	movs	r3, #2
 8006706:	e0b3      	b.n	8006870 <HAL_TIM_ConfigClockSource+0x180>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	2201      	movs	r2, #1
 800670c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	689b      	ldr	r3, [r3, #8]
 800671e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006726:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800672e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68fa      	ldr	r2, [r7, #12]
 8006736:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681b      	ldr	r3, [r3, #0]
 800673c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006740:	d03e      	beq.n	80067c0 <HAL_TIM_ConfigClockSource+0xd0>
 8006742:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006746:	f200 8087 	bhi.w	8006858 <HAL_TIM_ConfigClockSource+0x168>
 800674a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800674e:	f000 8085 	beq.w	800685c <HAL_TIM_ConfigClockSource+0x16c>
 8006752:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006756:	d87f      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
 8006758:	2b70      	cmp	r3, #112	; 0x70
 800675a:	d01a      	beq.n	8006792 <HAL_TIM_ConfigClockSource+0xa2>
 800675c:	2b70      	cmp	r3, #112	; 0x70
 800675e:	d87b      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
 8006760:	2b60      	cmp	r3, #96	; 0x60
 8006762:	d050      	beq.n	8006806 <HAL_TIM_ConfigClockSource+0x116>
 8006764:	2b60      	cmp	r3, #96	; 0x60
 8006766:	d877      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
 8006768:	2b50      	cmp	r3, #80	; 0x50
 800676a:	d03c      	beq.n	80067e6 <HAL_TIM_ConfigClockSource+0xf6>
 800676c:	2b50      	cmp	r3, #80	; 0x50
 800676e:	d873      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
 8006770:	2b40      	cmp	r3, #64	; 0x40
 8006772:	d058      	beq.n	8006826 <HAL_TIM_ConfigClockSource+0x136>
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d86f      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
 8006778:	2b30      	cmp	r3, #48	; 0x30
 800677a:	d064      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x156>
 800677c:	2b30      	cmp	r3, #48	; 0x30
 800677e:	d86b      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
 8006780:	2b20      	cmp	r3, #32
 8006782:	d060      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x156>
 8006784:	2b20      	cmp	r3, #32
 8006786:	d867      	bhi.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
 8006788:	2b00      	cmp	r3, #0
 800678a:	d05c      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x156>
 800678c:	2b10      	cmp	r3, #16
 800678e:	d05a      	beq.n	8006846 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006790:	e062      	b.n	8006858 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	6818      	ldr	r0, [r3, #0]
 8006796:	683b      	ldr	r3, [r7, #0]
 8006798:	6899      	ldr	r1, [r3, #8]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	68db      	ldr	r3, [r3, #12]
 80067a2:	f000 fb5b 	bl	8006e5c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	689b      	ldr	r3, [r3, #8]
 80067ac:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067b4:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	68fa      	ldr	r2, [r7, #12]
 80067bc:	609a      	str	r2, [r3, #8]
      break;
 80067be:	e04e      	b.n	800685e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	6818      	ldr	r0, [r3, #0]
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	6899      	ldr	r1, [r3, #8]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	685a      	ldr	r2, [r3, #4]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	68db      	ldr	r3, [r3, #12]
 80067d0:	f000 fb44 	bl	8006e5c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	689a      	ldr	r2, [r3, #8]
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067e2:	609a      	str	r2, [r3, #8]
      break;
 80067e4:	e03b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	6818      	ldr	r0, [r3, #0]
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	6859      	ldr	r1, [r3, #4]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	461a      	mov	r2, r3
 80067f4:	f000 fab8 	bl	8006d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	2150      	movs	r1, #80	; 0x50
 80067fe:	4618      	mov	r0, r3
 8006800:	f000 fb11 	bl	8006e26 <TIM_ITRx_SetConfig>
      break;
 8006804:	e02b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6818      	ldr	r0, [r3, #0]
 800680a:	683b      	ldr	r3, [r7, #0]
 800680c:	6859      	ldr	r1, [r3, #4]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	461a      	mov	r2, r3
 8006814:	f000 fad7 	bl	8006dc6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	2160      	movs	r1, #96	; 0x60
 800681e:	4618      	mov	r0, r3
 8006820:	f000 fb01 	bl	8006e26 <TIM_ITRx_SetConfig>
      break;
 8006824:	e01b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6818      	ldr	r0, [r3, #0]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	6859      	ldr	r1, [r3, #4]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	68db      	ldr	r3, [r3, #12]
 8006832:	461a      	mov	r2, r3
 8006834:	f000 fa98 	bl	8006d68 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2140      	movs	r1, #64	; 0x40
 800683e:	4618      	mov	r0, r3
 8006840:	f000 faf1 	bl	8006e26 <TIM_ITRx_SetConfig>
      break;
 8006844:	e00b      	b.n	800685e <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	4619      	mov	r1, r3
 8006850:	4610      	mov	r0, r2
 8006852:	f000 fae8 	bl	8006e26 <TIM_ITRx_SetConfig>
        break;
 8006856:	e002      	b.n	800685e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006858:	bf00      	nop
 800685a:	e000      	b.n	800685e <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800685c:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2201      	movs	r2, #1
 8006862:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800686e:	2300      	movs	r3, #0
}
 8006870:	4618      	mov	r0, r3
 8006872:	3710      	adds	r7, #16
 8006874:	46bd      	mov	sp, r7
 8006876:	bd80      	pop	{r7, pc}

08006878 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006878:	b480      	push	{r7}
 800687a:	b083      	sub	sp, #12
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006880:	bf00      	nop
 8006882:	370c      	adds	r7, #12
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800688c:	b480      	push	{r7}
 800688e:	b083      	sub	sp, #12
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800689e:	4770      	bx	lr

080068a0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a0:	b480      	push	{r7}
 80068a2:	b083      	sub	sp, #12
 80068a4:	af00      	add	r7, sp, #0
 80068a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068a8:	bf00      	nop
 80068aa:	370c      	adds	r7, #12
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr

080068b4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b085      	sub	sp, #20
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
 80068d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	4a40      	ldr	r2, [pc, #256]	; (80069dc <TIM_Base_SetConfig+0x114>)
 80068dc:	4293      	cmp	r3, r2
 80068de:	d013      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068e6:	d00f      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	4a3d      	ldr	r2, [pc, #244]	; (80069e0 <TIM_Base_SetConfig+0x118>)
 80068ec:	4293      	cmp	r3, r2
 80068ee:	d00b      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	4a3c      	ldr	r2, [pc, #240]	; (80069e4 <TIM_Base_SetConfig+0x11c>)
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d007      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	4a3b      	ldr	r2, [pc, #236]	; (80069e8 <TIM_Base_SetConfig+0x120>)
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <TIM_Base_SetConfig+0x40>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a3a      	ldr	r2, [pc, #232]	; (80069ec <TIM_Base_SetConfig+0x124>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d108      	bne.n	800691a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800690e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	68fa      	ldr	r2, [r7, #12]
 8006916:	4313      	orrs	r3, r2
 8006918:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a2f      	ldr	r2, [pc, #188]	; (80069dc <TIM_Base_SetConfig+0x114>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d02b      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006928:	d027      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a2c      	ldr	r2, [pc, #176]	; (80069e0 <TIM_Base_SetConfig+0x118>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d023      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a2b      	ldr	r2, [pc, #172]	; (80069e4 <TIM_Base_SetConfig+0x11c>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d01f      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a2a      	ldr	r2, [pc, #168]	; (80069e8 <TIM_Base_SetConfig+0x120>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d01b      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a29      	ldr	r2, [pc, #164]	; (80069ec <TIM_Base_SetConfig+0x124>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d017      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a28      	ldr	r2, [pc, #160]	; (80069f0 <TIM_Base_SetConfig+0x128>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d013      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a27      	ldr	r2, [pc, #156]	; (80069f4 <TIM_Base_SetConfig+0x12c>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00f      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a26      	ldr	r2, [pc, #152]	; (80069f8 <TIM_Base_SetConfig+0x130>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d00b      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a25      	ldr	r2, [pc, #148]	; (80069fc <TIM_Base_SetConfig+0x134>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d007      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a24      	ldr	r2, [pc, #144]	; (8006a00 <TIM_Base_SetConfig+0x138>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d003      	beq.n	800697a <TIM_Base_SetConfig+0xb2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a23      	ldr	r2, [pc, #140]	; (8006a04 <TIM_Base_SetConfig+0x13c>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d108      	bne.n	800698c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697a:	68fb      	ldr	r3, [r7, #12]
 800697c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006980:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	68db      	ldr	r3, [r3, #12]
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4313      	orrs	r3, r2
 800698a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800698c:	68fb      	ldr	r3, [r7, #12]
 800698e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006992:	683b      	ldr	r3, [r7, #0]
 8006994:	695b      	ldr	r3, [r3, #20]
 8006996:	4313      	orrs	r3, r2
 8006998:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	68fa      	ldr	r2, [r7, #12]
 800699e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	689a      	ldr	r2, [r3, #8]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	681a      	ldr	r2, [r3, #0]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	4a0a      	ldr	r2, [pc, #40]	; (80069dc <TIM_Base_SetConfig+0x114>)
 80069b4:	4293      	cmp	r3, r2
 80069b6:	d003      	beq.n	80069c0 <TIM_Base_SetConfig+0xf8>
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	4a0c      	ldr	r2, [pc, #48]	; (80069ec <TIM_Base_SetConfig+0x124>)
 80069bc:	4293      	cmp	r3, r2
 80069be:	d103      	bne.n	80069c8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	691a      	ldr	r2, [r3, #16]
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	2201      	movs	r2, #1
 80069cc:	615a      	str	r2, [r3, #20]
}
 80069ce:	bf00      	nop
 80069d0:	3714      	adds	r7, #20
 80069d2:	46bd      	mov	sp, r7
 80069d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d8:	4770      	bx	lr
 80069da:	bf00      	nop
 80069dc:	40010000 	.word	0x40010000
 80069e0:	40000400 	.word	0x40000400
 80069e4:	40000800 	.word	0x40000800
 80069e8:	40000c00 	.word	0x40000c00
 80069ec:	40010400 	.word	0x40010400
 80069f0:	40014000 	.word	0x40014000
 80069f4:	40014400 	.word	0x40014400
 80069f8:	40014800 	.word	0x40014800
 80069fc:	40001800 	.word	0x40001800
 8006a00:	40001c00 	.word	0x40001c00
 8006a04:	40002000 	.word	0x40002000

08006a08 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b087      	sub	sp, #28
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a1b      	ldr	r3, [r3, #32]
 8006a16:	f023 0201 	bic.w	r2, r3, #1
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	685b      	ldr	r3, [r3, #4]
 8006a28:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	699b      	ldr	r3, [r3, #24]
 8006a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a36:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f023 0303 	bic.w	r3, r3, #3
 8006a3e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	68fa      	ldr	r2, [r7, #12]
 8006a46:	4313      	orrs	r3, r2
 8006a48:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	f023 0302 	bic.w	r3, r3, #2
 8006a50:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a52:	683b      	ldr	r3, [r7, #0]
 8006a54:	689b      	ldr	r3, [r3, #8]
 8006a56:	697a      	ldr	r2, [r7, #20]
 8006a58:	4313      	orrs	r3, r2
 8006a5a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a20      	ldr	r2, [pc, #128]	; (8006ae0 <TIM_OC1_SetConfig+0xd8>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d003      	beq.n	8006a6c <TIM_OC1_SetConfig+0x64>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1f      	ldr	r2, [pc, #124]	; (8006ae4 <TIM_OC1_SetConfig+0xdc>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d10c      	bne.n	8006a86 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	f023 0308 	bic.w	r3, r3, #8
 8006a72:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a74:	683b      	ldr	r3, [r7, #0]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	697a      	ldr	r2, [r7, #20]
 8006a7a:	4313      	orrs	r3, r2
 8006a7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	f023 0304 	bic.w	r3, r3, #4
 8006a84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4a15      	ldr	r2, [pc, #84]	; (8006ae0 <TIM_OC1_SetConfig+0xd8>)
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d003      	beq.n	8006a96 <TIM_OC1_SetConfig+0x8e>
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	4a14      	ldr	r2, [pc, #80]	; (8006ae4 <TIM_OC1_SetConfig+0xdc>)
 8006a92:	4293      	cmp	r3, r2
 8006a94:	d111      	bne.n	8006aba <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	695b      	ldr	r3, [r3, #20]
 8006aaa:	693a      	ldr	r2, [r7, #16]
 8006aac:	4313      	orrs	r3, r2
 8006aae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	699b      	ldr	r3, [r3, #24]
 8006ab4:	693a      	ldr	r2, [r7, #16]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	693a      	ldr	r2, [r7, #16]
 8006abe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	68fa      	ldr	r2, [r7, #12]
 8006ac4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006ac6:	683b      	ldr	r3, [r7, #0]
 8006ac8:	685a      	ldr	r2, [r3, #4]
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	697a      	ldr	r2, [r7, #20]
 8006ad2:	621a      	str	r2, [r3, #32]
}
 8006ad4:	bf00      	nop
 8006ad6:	371c      	adds	r7, #28
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr
 8006ae0:	40010000 	.word	0x40010000
 8006ae4:	40010400 	.word	0x40010400

08006ae8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f023 0210 	bic.w	r2, r3, #16
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	699b      	ldr	r3, [r3, #24]
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b16:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b1e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b20:	683b      	ldr	r3, [r7, #0]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	021b      	lsls	r3, r3, #8
 8006b26:	68fa      	ldr	r2, [r7, #12]
 8006b28:	4313      	orrs	r3, r2
 8006b2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b2c:	697b      	ldr	r3, [r7, #20]
 8006b2e:	f023 0320 	bic.w	r3, r3, #32
 8006b32:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	011b      	lsls	r3, r3, #4
 8006b3a:	697a      	ldr	r2, [r7, #20]
 8006b3c:	4313      	orrs	r3, r2
 8006b3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a22      	ldr	r2, [pc, #136]	; (8006bcc <TIM_OC2_SetConfig+0xe4>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_OC2_SetConfig+0x68>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a21      	ldr	r2, [pc, #132]	; (8006bd0 <TIM_OC2_SetConfig+0xe8>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d10d      	bne.n	8006b6c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b50:	697b      	ldr	r3, [r7, #20]
 8006b52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b58:	683b      	ldr	r3, [r7, #0]
 8006b5a:	68db      	ldr	r3, [r3, #12]
 8006b5c:	011b      	lsls	r3, r3, #4
 8006b5e:	697a      	ldr	r2, [r7, #20]
 8006b60:	4313      	orrs	r3, r2
 8006b62:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b64:	697b      	ldr	r3, [r7, #20]
 8006b66:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	4a17      	ldr	r2, [pc, #92]	; (8006bcc <TIM_OC2_SetConfig+0xe4>)
 8006b70:	4293      	cmp	r3, r2
 8006b72:	d003      	beq.n	8006b7c <TIM_OC2_SetConfig+0x94>
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	4a16      	ldr	r2, [pc, #88]	; (8006bd0 <TIM_OC2_SetConfig+0xe8>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d113      	bne.n	8006ba4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b7c:	693b      	ldr	r3, [r7, #16]
 8006b7e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	695b      	ldr	r3, [r3, #20]
 8006b90:	009b      	lsls	r3, r3, #2
 8006b92:	693a      	ldr	r2, [r7, #16]
 8006b94:	4313      	orrs	r3, r2
 8006b96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	699b      	ldr	r3, [r3, #24]
 8006b9c:	009b      	lsls	r3, r3, #2
 8006b9e:	693a      	ldr	r2, [r7, #16]
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	693a      	ldr	r2, [r7, #16]
 8006ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	68fa      	ldr	r2, [r7, #12]
 8006bae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bb0:	683b      	ldr	r3, [r7, #0]
 8006bb2:	685a      	ldr	r2, [r3, #4]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	697a      	ldr	r2, [r7, #20]
 8006bbc:	621a      	str	r2, [r3, #32]
}
 8006bbe:	bf00      	nop
 8006bc0:	371c      	adds	r7, #28
 8006bc2:	46bd      	mov	sp, r7
 8006bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop
 8006bcc:	40010000 	.word	0x40010000
 8006bd0:	40010400 	.word	0x40010400

08006bd4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd4:	b480      	push	{r7}
 8006bd6:	b087      	sub	sp, #28
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	6a1b      	ldr	r3, [r3, #32]
 8006bee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	685b      	ldr	r3, [r3, #4]
 8006bf4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	69db      	ldr	r3, [r3, #28]
 8006bfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	f023 0303 	bic.w	r3, r3, #3
 8006c0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c0c:	683b      	ldr	r3, [r7, #0]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	68fa      	ldr	r2, [r7, #12]
 8006c12:	4313      	orrs	r3, r2
 8006c14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c16:	697b      	ldr	r3, [r7, #20]
 8006c18:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c1e:	683b      	ldr	r3, [r7, #0]
 8006c20:	689b      	ldr	r3, [r3, #8]
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	697a      	ldr	r2, [r7, #20]
 8006c26:	4313      	orrs	r3, r2
 8006c28:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a21      	ldr	r2, [pc, #132]	; (8006cb4 <TIM_OC3_SetConfig+0xe0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d003      	beq.n	8006c3a <TIM_OC3_SetConfig+0x66>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4a20      	ldr	r2, [pc, #128]	; (8006cb8 <TIM_OC3_SetConfig+0xe4>)
 8006c36:	4293      	cmp	r3, r2
 8006c38:	d10d      	bne.n	8006c56 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c3a:	697b      	ldr	r3, [r7, #20]
 8006c3c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c40:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	021b      	lsls	r3, r3, #8
 8006c48:	697a      	ldr	r2, [r7, #20]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c4e:	697b      	ldr	r3, [r7, #20]
 8006c50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	4a16      	ldr	r2, [pc, #88]	; (8006cb4 <TIM_OC3_SetConfig+0xe0>)
 8006c5a:	4293      	cmp	r3, r2
 8006c5c:	d003      	beq.n	8006c66 <TIM_OC3_SetConfig+0x92>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	4a15      	ldr	r2, [pc, #84]	; (8006cb8 <TIM_OC3_SetConfig+0xe4>)
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d113      	bne.n	8006c8e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c66:	693b      	ldr	r3, [r7, #16]
 8006c68:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c6e:	693b      	ldr	r3, [r7, #16]
 8006c70:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	695b      	ldr	r3, [r3, #20]
 8006c7a:	011b      	lsls	r3, r3, #4
 8006c7c:	693a      	ldr	r2, [r7, #16]
 8006c7e:	4313      	orrs	r3, r2
 8006c80:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	693a      	ldr	r2, [r7, #16]
 8006c8a:	4313      	orrs	r3, r2
 8006c8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	693a      	ldr	r2, [r7, #16]
 8006c92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	68fa      	ldr	r2, [r7, #12]
 8006c98:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	685a      	ldr	r2, [r3, #4]
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	697a      	ldr	r2, [r7, #20]
 8006ca6:	621a      	str	r2, [r3, #32]
}
 8006ca8:	bf00      	nop
 8006caa:	371c      	adds	r7, #28
 8006cac:	46bd      	mov	sp, r7
 8006cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb2:	4770      	bx	lr
 8006cb4:	40010000 	.word	0x40010000
 8006cb8:	40010400 	.word	0x40010400

08006cbc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cbc:	b480      	push	{r7}
 8006cbe:	b087      	sub	sp, #28
 8006cc0:	af00      	add	r7, sp, #0
 8006cc2:	6078      	str	r0, [r7, #4]
 8006cc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6a1b      	ldr	r3, [r3, #32]
 8006cca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	6a1b      	ldr	r3, [r3, #32]
 8006cd6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	69db      	ldr	r3, [r3, #28]
 8006ce2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf4:	683b      	ldr	r3, [r7, #0]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	021b      	lsls	r3, r3, #8
 8006cfa:	68fa      	ldr	r2, [r7, #12]
 8006cfc:	4313      	orrs	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	031b      	lsls	r3, r3, #12
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	4a12      	ldr	r2, [pc, #72]	; (8006d60 <TIM_OC4_SetConfig+0xa4>)
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d003      	beq.n	8006d24 <TIM_OC4_SetConfig+0x68>
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	4a11      	ldr	r2, [pc, #68]	; (8006d64 <TIM_OC4_SetConfig+0xa8>)
 8006d20:	4293      	cmp	r3, r2
 8006d22:	d109      	bne.n	8006d38 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d24:	697b      	ldr	r3, [r7, #20]
 8006d26:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d2a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	695b      	ldr	r3, [r3, #20]
 8006d30:	019b      	lsls	r3, r3, #6
 8006d32:	697a      	ldr	r2, [r7, #20]
 8006d34:	4313      	orrs	r3, r2
 8006d36:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	697a      	ldr	r2, [r7, #20]
 8006d3c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	68fa      	ldr	r2, [r7, #12]
 8006d42:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685a      	ldr	r2, [r3, #4]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	693a      	ldr	r2, [r7, #16]
 8006d50:	621a      	str	r2, [r3, #32]
}
 8006d52:	bf00      	nop
 8006d54:	371c      	adds	r7, #28
 8006d56:	46bd      	mov	sp, r7
 8006d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5c:	4770      	bx	lr
 8006d5e:	bf00      	nop
 8006d60:	40010000 	.word	0x40010000
 8006d64:	40010400 	.word	0x40010400

08006d68 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d68:	b480      	push	{r7}
 8006d6a:	b087      	sub	sp, #28
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	6a1b      	ldr	r3, [r3, #32]
 8006d78:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	6a1b      	ldr	r3, [r3, #32]
 8006d7e:	f023 0201 	bic.w	r2, r3, #1
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	699b      	ldr	r3, [r3, #24]
 8006d8a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d92:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	011b      	lsls	r3, r3, #4
 8006d98:	693a      	ldr	r2, [r7, #16]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d9e:	697b      	ldr	r3, [r7, #20]
 8006da0:	f023 030a 	bic.w	r3, r3, #10
 8006da4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006da6:	697a      	ldr	r2, [r7, #20]
 8006da8:	68bb      	ldr	r3, [r7, #8]
 8006daa:	4313      	orrs	r3, r2
 8006dac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	693a      	ldr	r2, [r7, #16]
 8006db2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	697a      	ldr	r2, [r7, #20]
 8006db8:	621a      	str	r2, [r3, #32]
}
 8006dba:	bf00      	nop
 8006dbc:	371c      	adds	r7, #28
 8006dbe:	46bd      	mov	sp, r7
 8006dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc4:	4770      	bx	lr

08006dc6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dc6:	b480      	push	{r7}
 8006dc8:	b087      	sub	sp, #28
 8006dca:	af00      	add	r7, sp, #0
 8006dcc:	60f8      	str	r0, [r7, #12]
 8006dce:	60b9      	str	r1, [r7, #8]
 8006dd0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	6a1b      	ldr	r3, [r3, #32]
 8006dd6:	f023 0210 	bic.w	r2, r3, #16
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	699b      	ldr	r3, [r3, #24]
 8006de2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	6a1b      	ldr	r3, [r3, #32]
 8006de8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	031b      	lsls	r3, r3, #12
 8006df6:	697a      	ldr	r2, [r7, #20]
 8006df8:	4313      	orrs	r3, r2
 8006dfa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006dfc:	693b      	ldr	r3, [r7, #16]
 8006dfe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e02:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e04:	68bb      	ldr	r3, [r7, #8]
 8006e06:	011b      	lsls	r3, r3, #4
 8006e08:	693a      	ldr	r2, [r7, #16]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	697a      	ldr	r2, [r7, #20]
 8006e12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	693a      	ldr	r2, [r7, #16]
 8006e18:	621a      	str	r2, [r3, #32]
}
 8006e1a:	bf00      	nop
 8006e1c:	371c      	adds	r7, #28
 8006e1e:	46bd      	mov	sp, r7
 8006e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e24:	4770      	bx	lr

08006e26 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e26:	b480      	push	{r7}
 8006e28:	b085      	sub	sp, #20
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
 8006e2e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e3c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	4313      	orrs	r3, r2
 8006e44:	f043 0307 	orr.w	r3, r3, #7
 8006e48:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	68fa      	ldr	r2, [r7, #12]
 8006e4e:	609a      	str	r2, [r3, #8]
}
 8006e50:	bf00      	nop
 8006e52:	3714      	adds	r7, #20
 8006e54:	46bd      	mov	sp, r7
 8006e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5a:	4770      	bx	lr

08006e5c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e5c:	b480      	push	{r7}
 8006e5e:	b087      	sub	sp, #28
 8006e60:	af00      	add	r7, sp, #0
 8006e62:	60f8      	str	r0, [r7, #12]
 8006e64:	60b9      	str	r1, [r7, #8]
 8006e66:	607a      	str	r2, [r7, #4]
 8006e68:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e70:	697b      	ldr	r3, [r7, #20]
 8006e72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e76:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	021a      	lsls	r2, r3, #8
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	431a      	orrs	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	4313      	orrs	r3, r2
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	609a      	str	r2, [r3, #8]
}
 8006e90:	bf00      	nop
 8006e92:	371c      	adds	r7, #28
 8006e94:	46bd      	mov	sp, r7
 8006e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9a:	4770      	bx	lr

08006e9c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b087      	sub	sp, #28
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	60f8      	str	r0, [r7, #12]
 8006ea4:	60b9      	str	r1, [r7, #8]
 8006ea6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ea8:	68bb      	ldr	r3, [r7, #8]
 8006eaa:	f003 031f 	and.w	r3, r3, #31
 8006eae:	2201      	movs	r2, #1
 8006eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	6a1a      	ldr	r2, [r3, #32]
 8006eba:	697b      	ldr	r3, [r7, #20]
 8006ebc:	43db      	mvns	r3, r3
 8006ebe:	401a      	ands	r2, r3
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	6a1a      	ldr	r2, [r3, #32]
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f003 031f 	and.w	r3, r3, #31
 8006ece:	6879      	ldr	r1, [r7, #4]
 8006ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed4:	431a      	orrs	r2, r3
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	621a      	str	r2, [r3, #32]
}
 8006eda:	bf00      	nop
 8006edc:	371c      	adds	r7, #28
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee4:	4770      	bx	lr
	...

08006ee8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ef8:	2b01      	cmp	r3, #1
 8006efa:	d101      	bne.n	8006f00 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006efc:	2302      	movs	r3, #2
 8006efe:	e05a      	b.n	8006fb6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2201      	movs	r2, #1
 8006f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2202      	movs	r2, #2
 8006f0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	685b      	ldr	r3, [r3, #4]
 8006f16:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	689b      	ldr	r3, [r3, #8]
 8006f1e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f26:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f28:	683b      	ldr	r3, [r7, #0]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68fa      	ldr	r2, [r7, #12]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	68fa      	ldr	r2, [r7, #12]
 8006f38:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3a:	687b      	ldr	r3, [r7, #4]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	4a21      	ldr	r2, [pc, #132]	; (8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f40:	4293      	cmp	r3, r2
 8006f42:	d022      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f4c:	d01d      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	4a1d      	ldr	r2, [pc, #116]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f54:	4293      	cmp	r3, r2
 8006f56:	d018      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a1b      	ldr	r2, [pc, #108]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d013      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	4a1a      	ldr	r2, [pc, #104]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f68:	4293      	cmp	r3, r2
 8006f6a:	d00e      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a18      	ldr	r2, [pc, #96]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f72:	4293      	cmp	r3, r2
 8006f74:	d009      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a17      	ldr	r2, [pc, #92]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d004      	beq.n	8006f8a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	4a15      	ldr	r2, [pc, #84]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f86:	4293      	cmp	r3, r2
 8006f88:	d10c      	bne.n	8006fa4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f8a:	68bb      	ldr	r3, [r7, #8]
 8006f8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	68ba      	ldr	r2, [r7, #8]
 8006f98:	4313      	orrs	r3, r2
 8006f9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	68ba      	ldr	r2, [r7, #8]
 8006fa2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2201      	movs	r2, #1
 8006fa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2200      	movs	r2, #0
 8006fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb4:	2300      	movs	r3, #0
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3714      	adds	r7, #20
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc0:	4770      	bx	lr
 8006fc2:	bf00      	nop
 8006fc4:	40010000 	.word	0x40010000
 8006fc8:	40000400 	.word	0x40000400
 8006fcc:	40000800 	.word	0x40000800
 8006fd0:	40000c00 	.word	0x40000c00
 8006fd4:	40010400 	.word	0x40010400
 8006fd8:	40014000 	.word	0x40014000
 8006fdc:	40001800 	.word	0x40001800

08006fe0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fe0:	b480      	push	{r7}
 8006fe2:	b085      	sub	sp, #20
 8006fe4:	af00      	add	r7, sp, #0
 8006fe6:	6078      	str	r0, [r7, #4]
 8006fe8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fea:	2300      	movs	r3, #0
 8006fec:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff4:	2b01      	cmp	r3, #1
 8006ff6:	d101      	bne.n	8006ffc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	e03d      	b.n	8007078 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	2201      	movs	r2, #1
 8007000:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	4313      	orrs	r3, r2
 8007010:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	689b      	ldr	r3, [r3, #8]
 800701c:	4313      	orrs	r3, r2
 800701e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	4313      	orrs	r3, r2
 800702c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007034:	683b      	ldr	r3, [r7, #0]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	4313      	orrs	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	691b      	ldr	r3, [r3, #16]
 8007046:	4313      	orrs	r3, r2
 8007048:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007050:	683b      	ldr	r3, [r7, #0]
 8007052:	695b      	ldr	r3, [r3, #20]
 8007054:	4313      	orrs	r3, r2
 8007056:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	69db      	ldr	r3, [r3, #28]
 8007062:	4313      	orrs	r3, r2
 8007064:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	68fa      	ldr	r2, [r7, #12]
 800706c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2200      	movs	r2, #0
 8007072:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007076:	2300      	movs	r3, #0
}
 8007078:	4618      	mov	r0, r3
 800707a:	3714      	adds	r7, #20
 800707c:	46bd      	mov	sp, r7
 800707e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007082:	4770      	bx	lr

08007084 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800708c:	bf00      	nop
 800708e:	370c      	adds	r7, #12
 8007090:	46bd      	mov	sp, r7
 8007092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007096:	4770      	bx	lr

08007098 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a0:	bf00      	nop
 80070a2:	370c      	adds	r7, #12
 80070a4:	46bd      	mov	sp, r7
 80070a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070aa:	4770      	bx	lr

080070ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b082      	sub	sp, #8
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d101      	bne.n	80070be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070ba:	2301      	movs	r3, #1
 80070bc:	e03f      	b.n	800713e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	2200      	movs	r2, #0
 80070ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d2:	6878      	ldr	r0, [r7, #4]
 80070d4:	f7fc f972 	bl	80033bc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2224      	movs	r2, #36	; 0x24
 80070dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	68da      	ldr	r2, [r3, #12]
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 fe0b 	bl	8007d0c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	691a      	ldr	r2, [r3, #16]
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	695a      	ldr	r2, [r3, #20]
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007116:	687b      	ldr	r3, [r7, #4]
 8007118:	681b      	ldr	r3, [r3, #0]
 800711a:	68da      	ldr	r2, [r3, #12]
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2200      	movs	r2, #0
 800712a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2220      	movs	r2, #32
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	2220      	movs	r2, #32
 8007138:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800713c:	2300      	movs	r3, #0
}
 800713e:	4618      	mov	r0, r3
 8007140:	3708      	adds	r7, #8
 8007142:	46bd      	mov	sp, r7
 8007144:	bd80      	pop	{r7, pc}

08007146 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007146:	b580      	push	{r7, lr}
 8007148:	b08a      	sub	sp, #40	; 0x28
 800714a:	af02      	add	r7, sp, #8
 800714c:	60f8      	str	r0, [r7, #12]
 800714e:	60b9      	str	r1, [r7, #8]
 8007150:	603b      	str	r3, [r7, #0]
 8007152:	4613      	mov	r3, r2
 8007154:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007156:	2300      	movs	r3, #0
 8007158:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007160:	b2db      	uxtb	r3, r3
 8007162:	2b20      	cmp	r3, #32
 8007164:	d17c      	bne.n	8007260 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007166:	68bb      	ldr	r3, [r7, #8]
 8007168:	2b00      	cmp	r3, #0
 800716a:	d002      	beq.n	8007172 <HAL_UART_Transmit+0x2c>
 800716c:	88fb      	ldrh	r3, [r7, #6]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d101      	bne.n	8007176 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e075      	b.n	8007262 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800717c:	2b01      	cmp	r3, #1
 800717e:	d101      	bne.n	8007184 <HAL_UART_Transmit+0x3e>
 8007180:	2302      	movs	r3, #2
 8007182:	e06e      	b.n	8007262 <HAL_UART_Transmit+0x11c>
 8007184:	68fb      	ldr	r3, [r7, #12]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	2200      	movs	r2, #0
 8007190:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	2221      	movs	r2, #33	; 0x21
 8007196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800719a:	f7fc fe35 	bl	8003e08 <HAL_GetTick>
 800719e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	88fa      	ldrh	r2, [r7, #6]
 80071a4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071a6:	68fb      	ldr	r3, [r7, #12]
 80071a8:	88fa      	ldrh	r2, [r7, #6]
 80071aa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071ac:	68fb      	ldr	r3, [r7, #12]
 80071ae:	689b      	ldr	r3, [r3, #8]
 80071b0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b4:	d108      	bne.n	80071c8 <HAL_UART_Transmit+0x82>
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	691b      	ldr	r3, [r3, #16]
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d104      	bne.n	80071c8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071be:	2300      	movs	r3, #0
 80071c0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071c2:	68bb      	ldr	r3, [r7, #8]
 80071c4:	61bb      	str	r3, [r7, #24]
 80071c6:	e003      	b.n	80071d0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071c8:	68bb      	ldr	r3, [r7, #8]
 80071ca:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071cc:	2300      	movs	r3, #0
 80071ce:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071d0:	68fb      	ldr	r3, [r7, #12]
 80071d2:	2200      	movs	r2, #0
 80071d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071d8:	e02a      	b.n	8007230 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	9300      	str	r3, [sp, #0]
 80071de:	697b      	ldr	r3, [r7, #20]
 80071e0:	2200      	movs	r2, #0
 80071e2:	2180      	movs	r1, #128	; 0x80
 80071e4:	68f8      	ldr	r0, [r7, #12]
 80071e6:	f000 fb8d 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d001      	beq.n	80071f4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071f0:	2303      	movs	r3, #3
 80071f2:	e036      	b.n	8007262 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071f4:	69fb      	ldr	r3, [r7, #28]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071fa:	69bb      	ldr	r3, [r7, #24]
 80071fc:	881b      	ldrh	r3, [r3, #0]
 80071fe:	461a      	mov	r2, r3
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	681b      	ldr	r3, [r3, #0]
 8007204:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007208:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800720a:	69bb      	ldr	r3, [r7, #24]
 800720c:	3302      	adds	r3, #2
 800720e:	61bb      	str	r3, [r7, #24]
 8007210:	e007      	b.n	8007222 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	781a      	ldrb	r2, [r3, #0]
 8007216:	68fb      	ldr	r3, [r7, #12]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800721c:	69fb      	ldr	r3, [r7, #28]
 800721e:	3301      	adds	r3, #1
 8007220:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007226:	b29b      	uxth	r3, r3
 8007228:	3b01      	subs	r3, #1
 800722a:	b29a      	uxth	r2, r3
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007234:	b29b      	uxth	r3, r3
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1cf      	bne.n	80071da <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800723a:	683b      	ldr	r3, [r7, #0]
 800723c:	9300      	str	r3, [sp, #0]
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	2200      	movs	r2, #0
 8007242:	2140      	movs	r1, #64	; 0x40
 8007244:	68f8      	ldr	r0, [r7, #12]
 8007246:	f000 fb5d 	bl	8007904 <UART_WaitOnFlagUntilTimeout>
 800724a:	4603      	mov	r3, r0
 800724c:	2b00      	cmp	r3, #0
 800724e:	d001      	beq.n	8007254 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007250:	2303      	movs	r3, #3
 8007252:	e006      	b.n	8007262 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2220      	movs	r2, #32
 8007258:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800725c:	2300      	movs	r3, #0
 800725e:	e000      	b.n	8007262 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007260:	2302      	movs	r3, #2
  }
}
 8007262:	4618      	mov	r0, r3
 8007264:	3720      	adds	r7, #32
 8007266:	46bd      	mov	sp, r7
 8007268:	bd80      	pop	{r7, pc}

0800726a <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800726a:	b480      	push	{r7}
 800726c:	b085      	sub	sp, #20
 800726e:	af00      	add	r7, sp, #0
 8007270:	60f8      	str	r0, [r7, #12]
 8007272:	60b9      	str	r1, [r7, #8]
 8007274:	4613      	mov	r3, r2
 8007276:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800727e:	b2db      	uxtb	r3, r3
 8007280:	2b20      	cmp	r3, #32
 8007282:	d130      	bne.n	80072e6 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d002      	beq.n	8007290 <HAL_UART_Transmit_IT+0x26>
 800728a:	88fb      	ldrh	r3, [r7, #6]
 800728c:	2b00      	cmp	r3, #0
 800728e:	d101      	bne.n	8007294 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007290:	2301      	movs	r3, #1
 8007292:	e029      	b.n	80072e8 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729a:	2b01      	cmp	r3, #1
 800729c:	d101      	bne.n	80072a2 <HAL_UART_Transmit_IT+0x38>
 800729e:	2302      	movs	r3, #2
 80072a0:	e022      	b.n	80072e8 <HAL_UART_Transmit_IT+0x7e>
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2201      	movs	r2, #1
 80072a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	68ba      	ldr	r2, [r7, #8]
 80072ae:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	88fa      	ldrh	r2, [r7, #6]
 80072b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	88fa      	ldrh	r2, [r7, #6]
 80072ba:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	2221      	movs	r2, #33	; 0x21
 80072c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	2200      	movs	r2, #0
 80072ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	68da      	ldr	r2, [r3, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072e0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80072e2:	2300      	movs	r3, #0
 80072e4:	e000      	b.n	80072e8 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80072e6:	2302      	movs	r3, #2
  }
}
 80072e8:	4618      	mov	r0, r3
 80072ea:	3714      	adds	r7, #20
 80072ec:	46bd      	mov	sp, r7
 80072ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f2:	4770      	bx	lr

080072f4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	4613      	mov	r3, r2
 8007300:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007308:	b2db      	uxtb	r3, r3
 800730a:	2b20      	cmp	r3, #32
 800730c:	d11d      	bne.n	800734a <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800730e:	68bb      	ldr	r3, [r7, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d002      	beq.n	800731a <HAL_UART_Receive_DMA+0x26>
 8007314:	88fb      	ldrh	r3, [r7, #6]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d101      	bne.n	800731e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800731a:	2301      	movs	r3, #1
 800731c:	e016      	b.n	800734c <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800731e:	68fb      	ldr	r3, [r7, #12]
 8007320:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007324:	2b01      	cmp	r3, #1
 8007326:	d101      	bne.n	800732c <HAL_UART_Receive_DMA+0x38>
 8007328:	2302      	movs	r3, #2
 800732a:	e00f      	b.n	800734c <HAL_UART_Receive_DMA+0x58>
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	2201      	movs	r2, #1
 8007330:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	2200      	movs	r2, #0
 8007338:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800733a:	88fb      	ldrh	r3, [r7, #6]
 800733c:	461a      	mov	r2, r3
 800733e:	68b9      	ldr	r1, [r7, #8]
 8007340:	68f8      	ldr	r0, [r7, #12]
 8007342:	f000 fb29 	bl	8007998 <UART_Start_Receive_DMA>
 8007346:	4603      	mov	r3, r0
 8007348:	e000      	b.n	800734c <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800734a:	2302      	movs	r3, #2
  }
}
 800734c:	4618      	mov	r0, r3
 800734e:	3710      	adds	r7, #16
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	68da      	ldr	r2, [r3, #12]
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800736a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	695a      	ldr	r2, [r3, #20]
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f022 0201 	bic.w	r2, r2, #1
 800737a:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007380:	2b01      	cmp	r3, #1
 8007382:	d107      	bne.n	8007394 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	68da      	ldr	r2, [r3, #12]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0210 	bic.w	r2, r2, #16
 8007392:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	695b      	ldr	r3, [r3, #20]
 800739a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800739e:	2b40      	cmp	r3, #64	; 0x40
 80073a0:	d124      	bne.n	80073ec <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	695a      	ldr	r2, [r3, #20]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b0:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d018      	beq.n	80073ec <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073be:	2200      	movs	r2, #0
 80073c0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c6:	4618      	mov	r0, r3
 80073c8:	f7fd f998 	bl	80046fc <HAL_DMA_Abort>
 80073cc:	4603      	mov	r3, r0
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d00c      	beq.n	80073ec <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073d6:	4618      	mov	r0, r3
 80073d8:	f7fd fbac 	bl	8004b34 <HAL_DMA_GetError>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d104      	bne.n	80073ec <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2210      	movs	r2, #16
 80073e6:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80073e8:	2303      	movs	r3, #3
 80073ea:	e00a      	b.n	8007402 <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	2220      	movs	r2, #32
 80073f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2200      	movs	r2, #0
 80073fe:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007400:	2300      	movs	r3, #0
}
 8007402:	4618      	mov	r0, r3
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}
	...

0800740c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b08a      	sub	sp, #40	; 0x28
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	68db      	ldr	r3, [r3, #12]
 8007422:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	695b      	ldr	r3, [r3, #20]
 800742a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800742c:	2300      	movs	r3, #0
 800742e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007430:	2300      	movs	r3, #0
 8007432:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007436:	f003 030f 	and.w	r3, r3, #15
 800743a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800743c:	69bb      	ldr	r3, [r7, #24]
 800743e:	2b00      	cmp	r3, #0
 8007440:	d10d      	bne.n	800745e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007444:	f003 0320 	and.w	r3, r3, #32
 8007448:	2b00      	cmp	r3, #0
 800744a:	d008      	beq.n	800745e <HAL_UART_IRQHandler+0x52>
 800744c:	6a3b      	ldr	r3, [r7, #32]
 800744e:	f003 0320 	and.w	r3, r3, #32
 8007452:	2b00      	cmp	r3, #0
 8007454:	d003      	beq.n	800745e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 fbc1 	bl	8007bde <UART_Receive_IT>
      return;
 800745c:	e17c      	b.n	8007758 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800745e:	69bb      	ldr	r3, [r7, #24]
 8007460:	2b00      	cmp	r3, #0
 8007462:	f000 80b1 	beq.w	80075c8 <HAL_UART_IRQHandler+0x1bc>
 8007466:	69fb      	ldr	r3, [r7, #28]
 8007468:	f003 0301 	and.w	r3, r3, #1
 800746c:	2b00      	cmp	r3, #0
 800746e:	d105      	bne.n	800747c <HAL_UART_IRQHandler+0x70>
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007476:	2b00      	cmp	r3, #0
 8007478:	f000 80a6 	beq.w	80075c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800747c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747e:	f003 0301 	and.w	r3, r3, #1
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00a      	beq.n	800749c <HAL_UART_IRQHandler+0x90>
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800748c:	2b00      	cmp	r3, #0
 800748e:	d005      	beq.n	800749c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007494:	f043 0201 	orr.w	r2, r3, #1
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800749c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749e:	f003 0304 	and.w	r3, r3, #4
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <HAL_UART_IRQHandler+0xb0>
 80074a6:	69fb      	ldr	r3, [r7, #28]
 80074a8:	f003 0301 	and.w	r3, r3, #1
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d005      	beq.n	80074bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	f043 0202 	orr.w	r2, r3, #2
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074be:	f003 0302 	and.w	r3, r3, #2
 80074c2:	2b00      	cmp	r3, #0
 80074c4:	d00a      	beq.n	80074dc <HAL_UART_IRQHandler+0xd0>
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	f003 0301 	and.w	r3, r3, #1
 80074cc:	2b00      	cmp	r3, #0
 80074ce:	d005      	beq.n	80074dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d4:	f043 0204 	orr.w	r2, r3, #4
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80074dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074de:	f003 0308 	and.w	r3, r3, #8
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d00f      	beq.n	8007506 <HAL_UART_IRQHandler+0xfa>
 80074e6:	6a3b      	ldr	r3, [r7, #32]
 80074e8:	f003 0320 	and.w	r3, r3, #32
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d104      	bne.n	80074fa <HAL_UART_IRQHandler+0xee>
 80074f0:	69fb      	ldr	r3, [r7, #28]
 80074f2:	f003 0301 	and.w	r3, r3, #1
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d005      	beq.n	8007506 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074fe:	f043 0208 	orr.w	r2, r3, #8
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750a:	2b00      	cmp	r3, #0
 800750c:	f000 811f 	beq.w	800774e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007512:	f003 0320 	and.w	r3, r3, #32
 8007516:	2b00      	cmp	r3, #0
 8007518:	d007      	beq.n	800752a <HAL_UART_IRQHandler+0x11e>
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	f003 0320 	and.w	r3, r3, #32
 8007520:	2b00      	cmp	r3, #0
 8007522:	d002      	beq.n	800752a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007524:	6878      	ldr	r0, [r7, #4]
 8007526:	f000 fb5a 	bl	8007bde <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	695b      	ldr	r3, [r3, #20]
 8007530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007534:	2b40      	cmp	r3, #64	; 0x40
 8007536:	bf0c      	ite	eq
 8007538:	2301      	moveq	r3, #1
 800753a:	2300      	movne	r3, #0
 800753c:	b2db      	uxtb	r3, r3
 800753e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007544:	f003 0308 	and.w	r3, r3, #8
 8007548:	2b00      	cmp	r3, #0
 800754a:	d102      	bne.n	8007552 <HAL_UART_IRQHandler+0x146>
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	2b00      	cmp	r3, #0
 8007550:	d031      	beq.n	80075b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 fa9a 	bl	8007a8c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	695b      	ldr	r3, [r3, #20]
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b40      	cmp	r3, #64	; 0x40
 8007564:	d123      	bne.n	80075ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695a      	ldr	r2, [r3, #20]
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007574:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757a:	2b00      	cmp	r3, #0
 800757c:	d013      	beq.n	80075a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007582:	4a77      	ldr	r2, [pc, #476]	; (8007760 <HAL_UART_IRQHandler+0x354>)
 8007584:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758a:	4618      	mov	r0, r3
 800758c:	f7fd f926 	bl	80047dc <HAL_DMA_Abort_IT>
 8007590:	4603      	mov	r3, r0
 8007592:	2b00      	cmp	r3, #0
 8007594:	d016      	beq.n	80075c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075a0:	4610      	mov	r0, r2
 80075a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a4:	e00e      	b.n	80075c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f7f9 ff6a 	bl	8001480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075ac:	e00a      	b.n	80075c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ae:	6878      	ldr	r0, [r7, #4]
 80075b0:	f7f9 ff66 	bl	8001480 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b4:	e006      	b.n	80075c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075b6:	6878      	ldr	r0, [r7, #4]
 80075b8:	f7f9 ff62 	bl	8001480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	2200      	movs	r2, #0
 80075c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075c2:	e0c4      	b.n	800774e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c4:	bf00      	nop
    return;
 80075c6:	e0c2      	b.n	800774e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075cc:	2b01      	cmp	r3, #1
 80075ce:	f040 80a2 	bne.w	8007716 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	f003 0310 	and.w	r3, r3, #16
 80075d8:	2b00      	cmp	r3, #0
 80075da:	f000 809c 	beq.w	8007716 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80075de:	6a3b      	ldr	r3, [r7, #32]
 80075e0:	f003 0310 	and.w	r3, r3, #16
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	f000 8096 	beq.w	8007716 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ea:	2300      	movs	r3, #0
 80075ec:	60fb      	str	r3, [r7, #12]
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	60fb      	str	r3, [r7, #12]
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	60fb      	str	r3, [r7, #12]
 80075fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	695b      	ldr	r3, [r3, #20]
 8007606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760a:	2b40      	cmp	r3, #64	; 0x40
 800760c:	d14f      	bne.n	80076ae <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007618:	8a3b      	ldrh	r3, [r7, #16]
 800761a:	2b00      	cmp	r3, #0
 800761c:	f000 8099 	beq.w	8007752 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007624:	8a3a      	ldrh	r2, [r7, #16]
 8007626:	429a      	cmp	r2, r3
 8007628:	f080 8093 	bcs.w	8007752 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	8a3a      	ldrh	r2, [r7, #16]
 8007630:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007636:	69db      	ldr	r3, [r3, #28]
 8007638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800763c:	d02b      	beq.n	8007696 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	68da      	ldr	r2, [r3, #12]
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800764c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	695a      	ldr	r2, [r3, #20]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	f022 0201 	bic.w	r2, r2, #1
 800765c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	695a      	ldr	r2, [r3, #20]
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800766c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	2220      	movs	r2, #32
 8007672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	2200      	movs	r2, #0
 800767a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	68da      	ldr	r2, [r3, #12]
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	f022 0210 	bic.w	r2, r2, #16
 800768a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007690:	4618      	mov	r0, r3
 8007692:	f7fd f833 	bl	80046fc <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800769e:	b29b      	uxth	r3, r3
 80076a0:	1ad3      	subs	r3, r2, r3
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	4619      	mov	r1, r3
 80076a6:	6878      	ldr	r0, [r7, #4]
 80076a8:	f000 f870 	bl	800778c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076ac:	e051      	b.n	8007752 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	1ad3      	subs	r3, r2, r3
 80076ba:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c0:	b29b      	uxth	r3, r3
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d047      	beq.n	8007756 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80076c6:	8a7b      	ldrh	r3, [r7, #18]
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d044      	beq.n	8007756 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	68da      	ldr	r2, [r3, #12]
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076da:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	695a      	ldr	r2, [r3, #20]
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	f022 0201 	bic.w	r2, r2, #1
 80076ea:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	2220      	movs	r2, #32
 80076f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	2200      	movs	r2, #0
 80076f8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	68da      	ldr	r2, [r3, #12]
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	f022 0210 	bic.w	r2, r2, #16
 8007708:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800770a:	8a7b      	ldrh	r3, [r7, #18]
 800770c:	4619      	mov	r1, r3
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f83c 	bl	800778c <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007714:	e01f      	b.n	8007756 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800771c:	2b00      	cmp	r3, #0
 800771e:	d008      	beq.n	8007732 <HAL_UART_IRQHandler+0x326>
 8007720:	6a3b      	ldr	r3, [r7, #32]
 8007722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007726:	2b00      	cmp	r3, #0
 8007728:	d003      	beq.n	8007732 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 f9ef 	bl	8007b0e <UART_Transmit_IT>
    return;
 8007730:	e012      	b.n	8007758 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00d      	beq.n	8007758 <HAL_UART_IRQHandler+0x34c>
 800773c:	6a3b      	ldr	r3, [r7, #32]
 800773e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007742:	2b00      	cmp	r3, #0
 8007744:	d008      	beq.n	8007758 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007746:	6878      	ldr	r0, [r7, #4]
 8007748:	f000 fa31 	bl	8007bae <UART_EndTransmit_IT>
    return;
 800774c:	e004      	b.n	8007758 <HAL_UART_IRQHandler+0x34c>
    return;
 800774e:	bf00      	nop
 8007750:	e002      	b.n	8007758 <HAL_UART_IRQHandler+0x34c>
      return;
 8007752:	bf00      	nop
 8007754:	e000      	b.n	8007758 <HAL_UART_IRQHandler+0x34c>
      return;
 8007756:	bf00      	nop
  }
}
 8007758:	3728      	adds	r7, #40	; 0x28
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}
 800775e:	bf00      	nop
 8007760:	08007ae7 	.word	0x08007ae7

08007764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007764:	b480      	push	{r7}
 8007766:	b083      	sub	sp, #12
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800776c:	bf00      	nop
 800776e:	370c      	adds	r7, #12
 8007770:	46bd      	mov	sp, r7
 8007772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007776:	4770      	bx	lr

08007778 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007778:	b480      	push	{r7}
 800777a:	b083      	sub	sp, #12
 800777c:	af00      	add	r7, sp, #0
 800777e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007780:	bf00      	nop
 8007782:	370c      	adds	r7, #12
 8007784:	46bd      	mov	sp, r7
 8007786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778a:	4770      	bx	lr

0800778c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800778c:	b480      	push	{r7}
 800778e:	b083      	sub	sp, #12
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
 8007794:	460b      	mov	r3, r1
 8007796:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007798:	bf00      	nop
 800779a:	370c      	adds	r7, #12
 800779c:	46bd      	mov	sp, r7
 800779e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a2:	4770      	bx	lr

080077a4 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b084      	sub	sp, #16
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d12a      	bne.n	8007816 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	2200      	movs	r2, #0
 80077c4:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077d4:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	695a      	ldr	r2, [r3, #20]
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	f022 0201 	bic.w	r2, r2, #1
 80077e4:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	695a      	ldr	r2, [r3, #20]
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f4:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	2220      	movs	r2, #32
 80077fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007802:	2b01      	cmp	r3, #1
 8007804:	d107      	bne.n	8007816 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	68da      	ldr	r2, [r3, #12]
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f022 0210 	bic.w	r2, r2, #16
 8007814:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781a:	2b01      	cmp	r3, #1
 800781c:	d106      	bne.n	800782c <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007822:	4619      	mov	r1, r3
 8007824:	68f8      	ldr	r0, [r7, #12]
 8007826:	f7ff ffb1 	bl	800778c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800782a:	e002      	b.n	8007832 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800782c:	68f8      	ldr	r0, [r7, #12]
 800782e:	f7f9 fe0d 	bl	800144c <HAL_UART_RxCpltCallback>
}
 8007832:	bf00      	nop
 8007834:	3710      	adds	r7, #16
 8007836:	46bd      	mov	sp, r7
 8007838:	bd80      	pop	{r7, pc}

0800783a <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800783a:	b580      	push	{r7, lr}
 800783c:	b084      	sub	sp, #16
 800783e:	af00      	add	r7, sp, #0
 8007840:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007846:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800784c:	2b01      	cmp	r3, #1
 800784e:	d108      	bne.n	8007862 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007854:	085b      	lsrs	r3, r3, #1
 8007856:	b29b      	uxth	r3, r3
 8007858:	4619      	mov	r1, r3
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f7ff ff96 	bl	800778c <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007860:	e002      	b.n	8007868 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff ff88 	bl	8007778 <HAL_UART_RxHalfCpltCallback>
}
 8007868:	bf00      	nop
 800786a:	3710      	adds	r7, #16
 800786c:	46bd      	mov	sp, r7
 800786e:	bd80      	pop	{r7, pc}

08007870 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b084      	sub	sp, #16
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007878:	2300      	movs	r3, #0
 800787a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007880:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	695b      	ldr	r3, [r3, #20]
 8007888:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800788c:	2b80      	cmp	r3, #128	; 0x80
 800788e:	bf0c      	ite	eq
 8007890:	2301      	moveq	r3, #1
 8007892:	2300      	movne	r3, #0
 8007894:	b2db      	uxtb	r3, r3
 8007896:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007898:	68bb      	ldr	r3, [r7, #8]
 800789a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800789e:	b2db      	uxtb	r3, r3
 80078a0:	2b21      	cmp	r3, #33	; 0x21
 80078a2:	d108      	bne.n	80078b6 <UART_DMAError+0x46>
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d005      	beq.n	80078b6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078aa:	68bb      	ldr	r3, [r7, #8]
 80078ac:	2200      	movs	r2, #0
 80078ae:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078b0:	68b8      	ldr	r0, [r7, #8]
 80078b2:	f000 f8d5 	bl	8007a60 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078b6:	68bb      	ldr	r3, [r7, #8]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	695b      	ldr	r3, [r3, #20]
 80078bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c0:	2b40      	cmp	r3, #64	; 0x40
 80078c2:	bf0c      	ite	eq
 80078c4:	2301      	moveq	r3, #1
 80078c6:	2300      	movne	r3, #0
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078cc:	68bb      	ldr	r3, [r7, #8]
 80078ce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	2b22      	cmp	r3, #34	; 0x22
 80078d6:	d108      	bne.n	80078ea <UART_DMAError+0x7a>
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d005      	beq.n	80078ea <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	2200      	movs	r2, #0
 80078e2:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80078e4:	68b8      	ldr	r0, [r7, #8]
 80078e6:	f000 f8d1 	bl	8007a8c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078ea:	68bb      	ldr	r3, [r7, #8]
 80078ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078ee:	f043 0210 	orr.w	r2, r3, #16
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078f6:	68b8      	ldr	r0, [r7, #8]
 80078f8:	f7f9 fdc2 	bl	8001480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078fc:	bf00      	nop
 80078fe:	3710      	adds	r7, #16
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}

08007904 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007904:	b580      	push	{r7, lr}
 8007906:	b084      	sub	sp, #16
 8007908:	af00      	add	r7, sp, #0
 800790a:	60f8      	str	r0, [r7, #12]
 800790c:	60b9      	str	r1, [r7, #8]
 800790e:	603b      	str	r3, [r7, #0]
 8007910:	4613      	mov	r3, r2
 8007912:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007914:	e02c      	b.n	8007970 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007916:	69bb      	ldr	r3, [r7, #24]
 8007918:	f1b3 3fff 	cmp.w	r3, #4294967295
 800791c:	d028      	beq.n	8007970 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800791e:	69bb      	ldr	r3, [r7, #24]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d007      	beq.n	8007934 <UART_WaitOnFlagUntilTimeout+0x30>
 8007924:	f7fc fa70 	bl	8003e08 <HAL_GetTick>
 8007928:	4602      	mov	r2, r0
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	1ad3      	subs	r3, r2, r3
 800792e:	69ba      	ldr	r2, [r7, #24]
 8007930:	429a      	cmp	r2, r3
 8007932:	d21d      	bcs.n	8007970 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	68da      	ldr	r2, [r3, #12]
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007942:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	695a      	ldr	r2, [r3, #20]
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f022 0201 	bic.w	r2, r2, #1
 8007952:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	2220      	movs	r2, #32
 8007958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2220      	movs	r2, #32
 8007960:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	2200      	movs	r2, #0
 8007968:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800796c:	2303      	movs	r3, #3
 800796e:	e00f      	b.n	8007990 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	681a      	ldr	r2, [r3, #0]
 8007976:	68bb      	ldr	r3, [r7, #8]
 8007978:	4013      	ands	r3, r2
 800797a:	68ba      	ldr	r2, [r7, #8]
 800797c:	429a      	cmp	r2, r3
 800797e:	bf0c      	ite	eq
 8007980:	2301      	moveq	r3, #1
 8007982:	2300      	movne	r3, #0
 8007984:	b2db      	uxtb	r3, r3
 8007986:	461a      	mov	r2, r3
 8007988:	79fb      	ldrb	r3, [r7, #7]
 800798a:	429a      	cmp	r2, r3
 800798c:	d0c3      	beq.n	8007916 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800798e:	2300      	movs	r3, #0
}
 8007990:	4618      	mov	r0, r3
 8007992:	3710      	adds	r7, #16
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b086      	sub	sp, #24
 800799c:	af00      	add	r7, sp, #0
 800799e:	60f8      	str	r0, [r7, #12]
 80079a0:	60b9      	str	r1, [r7, #8]
 80079a2:	4613      	mov	r3, r2
 80079a4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079a6:	68ba      	ldr	r2, [r7, #8]
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	2222      	movs	r2, #34	; 0x22
 80079bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c4:	4a23      	ldr	r2, [pc, #140]	; (8007a54 <UART_Start_Receive_DMA+0xbc>)
 80079c6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079cc:	4a22      	ldr	r2, [pc, #136]	; (8007a58 <UART_Start_Receive_DMA+0xc0>)
 80079ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d4:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <UART_Start_Receive_DMA+0xc4>)
 80079d6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079dc:	2200      	movs	r2, #0
 80079de:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079e0:	f107 0308 	add.w	r3, r7, #8
 80079e4:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	3304      	adds	r3, #4
 80079f0:	4619      	mov	r1, r3
 80079f2:	697b      	ldr	r3, [r7, #20]
 80079f4:	681a      	ldr	r2, [r3, #0]
 80079f6:	88fb      	ldrh	r3, [r7, #6]
 80079f8:	f7fc fe28 	bl	800464c <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80079fc:	2300      	movs	r3, #0
 80079fe:	613b      	str	r3, [r7, #16]
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	613b      	str	r3, [r7, #16]
 8007a08:	68fb      	ldr	r3, [r7, #12]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	685b      	ldr	r3, [r3, #4]
 8007a0e:	613b      	str	r3, [r7, #16]
 8007a10:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2200      	movs	r2, #0
 8007a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	68da      	ldr	r2, [r3, #12]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a28:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	695a      	ldr	r2, [r3, #20]
 8007a30:	68fb      	ldr	r3, [r7, #12]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f042 0201 	orr.w	r2, r2, #1
 8007a38:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	695a      	ldr	r2, [r3, #20]
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a48:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3718      	adds	r7, #24
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	080077a5 	.word	0x080077a5
 8007a58:	0800783b 	.word	0x0800783b
 8007a5c:	08007871 	.word	0x08007871

08007a60 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a60:	b480      	push	{r7}
 8007a62:	b083      	sub	sp, #12
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	68da      	ldr	r2, [r3, #12]
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a76:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a80:	bf00      	nop
 8007a82:	370c      	adds	r7, #12
 8007a84:	46bd      	mov	sp, r7
 8007a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8a:	4770      	bx	lr

08007a8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	b083      	sub	sp, #12
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	681b      	ldr	r3, [r3, #0]
 8007a98:	68da      	ldr	r2, [r3, #12]
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007aa2:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	695a      	ldr	r2, [r3, #20]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 0201 	bic.w	r2, r2, #1
 8007ab2:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab8:	2b01      	cmp	r3, #1
 8007aba:	d107      	bne.n	8007acc <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0210 	bic.w	r2, r2, #16
 8007aca:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2220      	movs	r2, #32
 8007ad0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ada:	bf00      	nop
 8007adc:	370c      	adds	r7, #12
 8007ade:	46bd      	mov	sp, r7
 8007ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae4:	4770      	bx	lr

08007ae6 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007ae6:	b580      	push	{r7, lr}
 8007ae8:	b084      	sub	sp, #16
 8007aea:	af00      	add	r7, sp, #0
 8007aec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2200      	movs	r2, #0
 8007af8:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	2200      	movs	r2, #0
 8007afe:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b00:	68f8      	ldr	r0, [r7, #12]
 8007b02:	f7f9 fcbd 	bl	8001480 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b06:	bf00      	nop
 8007b08:	3710      	adds	r7, #16
 8007b0a:	46bd      	mov	sp, r7
 8007b0c:	bd80      	pop	{r7, pc}

08007b0e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b0e:	b480      	push	{r7}
 8007b10:	b085      	sub	sp, #20
 8007b12:	af00      	add	r7, sp, #0
 8007b14:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b1c:	b2db      	uxtb	r3, r3
 8007b1e:	2b21      	cmp	r3, #33	; 0x21
 8007b20:	d13e      	bne.n	8007ba0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	689b      	ldr	r3, [r3, #8]
 8007b26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2a:	d114      	bne.n	8007b56 <UART_Transmit_IT+0x48>
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	691b      	ldr	r3, [r3, #16]
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d110      	bne.n	8007b56 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6a1b      	ldr	r3, [r3, #32]
 8007b38:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	881b      	ldrh	r3, [r3, #0]
 8007b3e:	461a      	mov	r2, r3
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b48:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	6a1b      	ldr	r3, [r3, #32]
 8007b4e:	1c9a      	adds	r2, r3, #2
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	621a      	str	r2, [r3, #32]
 8007b54:	e008      	b.n	8007b68 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	6a1b      	ldr	r3, [r3, #32]
 8007b5a:	1c59      	adds	r1, r3, #1
 8007b5c:	687a      	ldr	r2, [r7, #4]
 8007b5e:	6211      	str	r1, [r2, #32]
 8007b60:	781a      	ldrb	r2, [r3, #0]
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	3b01      	subs	r3, #1
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	687a      	ldr	r2, [r7, #4]
 8007b74:	4619      	mov	r1, r3
 8007b76:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d10f      	bne.n	8007b9c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	68da      	ldr	r2, [r3, #12]
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b8a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	68da      	ldr	r2, [r3, #12]
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b9a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007b9c:	2300      	movs	r3, #0
 8007b9e:	e000      	b.n	8007ba2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ba0:	2302      	movs	r3, #2
  }
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr

08007bae <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bae:	b580      	push	{r7, lr}
 8007bb0:	b082      	sub	sp, #8
 8007bb2:	af00      	add	r7, sp, #0
 8007bb4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	68da      	ldr	r2, [r3, #12]
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	2220      	movs	r2, #32
 8007bca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f7ff fdc8 	bl	8007764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b22      	cmp	r3, #34	; 0x22
 8007bf0:	f040 8087 	bne.w	8007d02 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	689b      	ldr	r3, [r3, #8]
 8007bf8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bfc:	d117      	bne.n	8007c2e <UART_Receive_IT+0x50>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	691b      	ldr	r3, [r3, #16]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d113      	bne.n	8007c2e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c06:	2300      	movs	r3, #0
 8007c08:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	685b      	ldr	r3, [r3, #4]
 8007c16:	b29b      	uxth	r3, r3
 8007c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c1c:	b29a      	uxth	r2, r3
 8007c1e:	68bb      	ldr	r3, [r7, #8]
 8007c20:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c26:	1c9a      	adds	r2, r3, #2
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	629a      	str	r2, [r3, #40]	; 0x28
 8007c2c:	e026      	b.n	8007c7c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c32:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007c34:	2300      	movs	r3, #0
 8007c36:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	689b      	ldr	r3, [r3, #8]
 8007c3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c40:	d007      	beq.n	8007c52 <UART_Receive_IT+0x74>
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d10a      	bne.n	8007c60 <UART_Receive_IT+0x82>
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d106      	bne.n	8007c60 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	685b      	ldr	r3, [r3, #4]
 8007c58:	b2da      	uxtb	r2, r3
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	701a      	strb	r2, [r3, #0]
 8007c5e:	e008      	b.n	8007c72 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	b2db      	uxtb	r3, r3
 8007c68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c6c:	b2da      	uxtb	r2, r3
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c76:	1c5a      	adds	r2, r3, #1
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	3b01      	subs	r3, #1
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	687a      	ldr	r2, [r7, #4]
 8007c88:	4619      	mov	r1, r3
 8007c8a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d136      	bne.n	8007cfe <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	68da      	ldr	r2, [r3, #12]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f022 0220 	bic.w	r2, r2, #32
 8007c9e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	68da      	ldr	r2, [r3, #12]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	695a      	ldr	r2, [r3, #20]
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	f022 0201 	bic.w	r2, r2, #1
 8007cbe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	2220      	movs	r2, #32
 8007cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ccc:	2b01      	cmp	r3, #1
 8007cce:	d10e      	bne.n	8007cee <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68da      	ldr	r2, [r3, #12]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0210 	bic.w	r2, r2, #16
 8007cde:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7ff fd50 	bl	800778c <HAL_UARTEx_RxEventCallback>
 8007cec:	e002      	b.n	8007cf4 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7f9 fbac 	bl	800144c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007cfa:	2300      	movs	r3, #0
 8007cfc:	e002      	b.n	8007d04 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e000      	b.n	8007d04 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007d02:	2302      	movs	r3, #2
  }
}
 8007d04:	4618      	mov	r0, r3
 8007d06:	3710      	adds	r7, #16
 8007d08:	46bd      	mov	sp, r7
 8007d0a:	bd80      	pop	{r7, pc}

08007d0c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d10:	b09f      	sub	sp, #124	; 0x7c
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	691b      	ldr	r3, [r3, #16]
 8007d1c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d22:	68d9      	ldr	r1, [r3, #12]
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	ea40 0301 	orr.w	r3, r0, r1
 8007d2c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d30:	689a      	ldr	r2, [r3, #8]
 8007d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d34:	691b      	ldr	r3, [r3, #16]
 8007d36:	431a      	orrs	r2, r3
 8007d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3a:	695b      	ldr	r3, [r3, #20]
 8007d3c:	431a      	orrs	r2, r3
 8007d3e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d40:	69db      	ldr	r3, [r3, #28]
 8007d42:	4313      	orrs	r3, r2
 8007d44:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d48:	681b      	ldr	r3, [r3, #0]
 8007d4a:	68db      	ldr	r3, [r3, #12]
 8007d4c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d50:	f021 010c 	bic.w	r1, r1, #12
 8007d54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d56:	681a      	ldr	r2, [r3, #0]
 8007d58:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d5a:	430b      	orrs	r3, r1
 8007d5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	695b      	ldr	r3, [r3, #20]
 8007d64:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6a:	6999      	ldr	r1, [r3, #24]
 8007d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6e:	681a      	ldr	r2, [r3, #0]
 8007d70:	ea40 0301 	orr.w	r3, r0, r1
 8007d74:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d78:	681a      	ldr	r2, [r3, #0]
 8007d7a:	4bc5      	ldr	r3, [pc, #788]	; (8008090 <UART_SetConfig+0x384>)
 8007d7c:	429a      	cmp	r2, r3
 8007d7e:	d004      	beq.n	8007d8a <UART_SetConfig+0x7e>
 8007d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d82:	681a      	ldr	r2, [r3, #0]
 8007d84:	4bc3      	ldr	r3, [pc, #780]	; (8008094 <UART_SetConfig+0x388>)
 8007d86:	429a      	cmp	r2, r3
 8007d88:	d103      	bne.n	8007d92 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d8a:	f7fd fdd5 	bl	8005938 <HAL_RCC_GetPCLK2Freq>
 8007d8e:	6778      	str	r0, [r7, #116]	; 0x74
 8007d90:	e002      	b.n	8007d98 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d92:	f7fd fdbd 	bl	8005910 <HAL_RCC_GetPCLK1Freq>
 8007d96:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9a:	69db      	ldr	r3, [r3, #28]
 8007d9c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da0:	f040 80b6 	bne.w	8007f10 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007da4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007da6:	461c      	mov	r4, r3
 8007da8:	f04f 0500 	mov.w	r5, #0
 8007dac:	4622      	mov	r2, r4
 8007dae:	462b      	mov	r3, r5
 8007db0:	1891      	adds	r1, r2, r2
 8007db2:	6439      	str	r1, [r7, #64]	; 0x40
 8007db4:	415b      	adcs	r3, r3
 8007db6:	647b      	str	r3, [r7, #68]	; 0x44
 8007db8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dbc:	1912      	adds	r2, r2, r4
 8007dbe:	eb45 0303 	adc.w	r3, r5, r3
 8007dc2:	f04f 0000 	mov.w	r0, #0
 8007dc6:	f04f 0100 	mov.w	r1, #0
 8007dca:	00d9      	lsls	r1, r3, #3
 8007dcc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd0:	00d0      	lsls	r0, r2, #3
 8007dd2:	4602      	mov	r2, r0
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	1911      	adds	r1, r2, r4
 8007dd8:	6639      	str	r1, [r7, #96]	; 0x60
 8007dda:	416b      	adcs	r3, r5
 8007ddc:	667b      	str	r3, [r7, #100]	; 0x64
 8007dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de0:	685b      	ldr	r3, [r3, #4]
 8007de2:	461a      	mov	r2, r3
 8007de4:	f04f 0300 	mov.w	r3, #0
 8007de8:	1891      	adds	r1, r2, r2
 8007dea:	63b9      	str	r1, [r7, #56]	; 0x38
 8007dec:	415b      	adcs	r3, r3
 8007dee:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007df4:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007df8:	f7f8 ff46 	bl	8000c88 <__aeabi_uldivmod>
 8007dfc:	4602      	mov	r2, r0
 8007dfe:	460b      	mov	r3, r1
 8007e00:	4ba5      	ldr	r3, [pc, #660]	; (8008098 <UART_SetConfig+0x38c>)
 8007e02:	fba3 2302 	umull	r2, r3, r3, r2
 8007e06:	095b      	lsrs	r3, r3, #5
 8007e08:	011e      	lsls	r6, r3, #4
 8007e0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e0c:	461c      	mov	r4, r3
 8007e0e:	f04f 0500 	mov.w	r5, #0
 8007e12:	4622      	mov	r2, r4
 8007e14:	462b      	mov	r3, r5
 8007e16:	1891      	adds	r1, r2, r2
 8007e18:	6339      	str	r1, [r7, #48]	; 0x30
 8007e1a:	415b      	adcs	r3, r3
 8007e1c:	637b      	str	r3, [r7, #52]	; 0x34
 8007e1e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e22:	1912      	adds	r2, r2, r4
 8007e24:	eb45 0303 	adc.w	r3, r5, r3
 8007e28:	f04f 0000 	mov.w	r0, #0
 8007e2c:	f04f 0100 	mov.w	r1, #0
 8007e30:	00d9      	lsls	r1, r3, #3
 8007e32:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e36:	00d0      	lsls	r0, r2, #3
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	1911      	adds	r1, r2, r4
 8007e3e:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e40:	416b      	adcs	r3, r5
 8007e42:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e44:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	461a      	mov	r2, r3
 8007e4a:	f04f 0300 	mov.w	r3, #0
 8007e4e:	1891      	adds	r1, r2, r2
 8007e50:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e52:	415b      	adcs	r3, r3
 8007e54:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e56:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e5a:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e5e:	f7f8 ff13 	bl	8000c88 <__aeabi_uldivmod>
 8007e62:	4602      	mov	r2, r0
 8007e64:	460b      	mov	r3, r1
 8007e66:	4b8c      	ldr	r3, [pc, #560]	; (8008098 <UART_SetConfig+0x38c>)
 8007e68:	fba3 1302 	umull	r1, r3, r3, r2
 8007e6c:	095b      	lsrs	r3, r3, #5
 8007e6e:	2164      	movs	r1, #100	; 0x64
 8007e70:	fb01 f303 	mul.w	r3, r1, r3
 8007e74:	1ad3      	subs	r3, r2, r3
 8007e76:	00db      	lsls	r3, r3, #3
 8007e78:	3332      	adds	r3, #50	; 0x32
 8007e7a:	4a87      	ldr	r2, [pc, #540]	; (8008098 <UART_SetConfig+0x38c>)
 8007e7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007e80:	095b      	lsrs	r3, r3, #5
 8007e82:	005b      	lsls	r3, r3, #1
 8007e84:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e88:	441e      	add	r6, r3
 8007e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f04f 0100 	mov.w	r1, #0
 8007e92:	4602      	mov	r2, r0
 8007e94:	460b      	mov	r3, r1
 8007e96:	1894      	adds	r4, r2, r2
 8007e98:	623c      	str	r4, [r7, #32]
 8007e9a:	415b      	adcs	r3, r3
 8007e9c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e9e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ea2:	1812      	adds	r2, r2, r0
 8007ea4:	eb41 0303 	adc.w	r3, r1, r3
 8007ea8:	f04f 0400 	mov.w	r4, #0
 8007eac:	f04f 0500 	mov.w	r5, #0
 8007eb0:	00dd      	lsls	r5, r3, #3
 8007eb2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007eb6:	00d4      	lsls	r4, r2, #3
 8007eb8:	4622      	mov	r2, r4
 8007eba:	462b      	mov	r3, r5
 8007ebc:	1814      	adds	r4, r2, r0
 8007ebe:	653c      	str	r4, [r7, #80]	; 0x50
 8007ec0:	414b      	adcs	r3, r1
 8007ec2:	657b      	str	r3, [r7, #84]	; 0x54
 8007ec4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ec6:	685b      	ldr	r3, [r3, #4]
 8007ec8:	461a      	mov	r2, r3
 8007eca:	f04f 0300 	mov.w	r3, #0
 8007ece:	1891      	adds	r1, r2, r2
 8007ed0:	61b9      	str	r1, [r7, #24]
 8007ed2:	415b      	adcs	r3, r3
 8007ed4:	61fb      	str	r3, [r7, #28]
 8007ed6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007eda:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ede:	f7f8 fed3 	bl	8000c88 <__aeabi_uldivmod>
 8007ee2:	4602      	mov	r2, r0
 8007ee4:	460b      	mov	r3, r1
 8007ee6:	4b6c      	ldr	r3, [pc, #432]	; (8008098 <UART_SetConfig+0x38c>)
 8007ee8:	fba3 1302 	umull	r1, r3, r3, r2
 8007eec:	095b      	lsrs	r3, r3, #5
 8007eee:	2164      	movs	r1, #100	; 0x64
 8007ef0:	fb01 f303 	mul.w	r3, r1, r3
 8007ef4:	1ad3      	subs	r3, r2, r3
 8007ef6:	00db      	lsls	r3, r3, #3
 8007ef8:	3332      	adds	r3, #50	; 0x32
 8007efa:	4a67      	ldr	r2, [pc, #412]	; (8008098 <UART_SetConfig+0x38c>)
 8007efc:	fba2 2303 	umull	r2, r3, r2, r3
 8007f00:	095b      	lsrs	r3, r3, #5
 8007f02:	f003 0207 	and.w	r2, r3, #7
 8007f06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	4432      	add	r2, r6
 8007f0c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f0e:	e0b9      	b.n	8008084 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f10:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f12:	461c      	mov	r4, r3
 8007f14:	f04f 0500 	mov.w	r5, #0
 8007f18:	4622      	mov	r2, r4
 8007f1a:	462b      	mov	r3, r5
 8007f1c:	1891      	adds	r1, r2, r2
 8007f1e:	6139      	str	r1, [r7, #16]
 8007f20:	415b      	adcs	r3, r3
 8007f22:	617b      	str	r3, [r7, #20]
 8007f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f28:	1912      	adds	r2, r2, r4
 8007f2a:	eb45 0303 	adc.w	r3, r5, r3
 8007f2e:	f04f 0000 	mov.w	r0, #0
 8007f32:	f04f 0100 	mov.w	r1, #0
 8007f36:	00d9      	lsls	r1, r3, #3
 8007f38:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f3c:	00d0      	lsls	r0, r2, #3
 8007f3e:	4602      	mov	r2, r0
 8007f40:	460b      	mov	r3, r1
 8007f42:	eb12 0804 	adds.w	r8, r2, r4
 8007f46:	eb43 0905 	adc.w	r9, r3, r5
 8007f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f4c:	685b      	ldr	r3, [r3, #4]
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f04f 0100 	mov.w	r1, #0
 8007f54:	f04f 0200 	mov.w	r2, #0
 8007f58:	f04f 0300 	mov.w	r3, #0
 8007f5c:	008b      	lsls	r3, r1, #2
 8007f5e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f62:	0082      	lsls	r2, r0, #2
 8007f64:	4640      	mov	r0, r8
 8007f66:	4649      	mov	r1, r9
 8007f68:	f7f8 fe8e 	bl	8000c88 <__aeabi_uldivmod>
 8007f6c:	4602      	mov	r2, r0
 8007f6e:	460b      	mov	r3, r1
 8007f70:	4b49      	ldr	r3, [pc, #292]	; (8008098 <UART_SetConfig+0x38c>)
 8007f72:	fba3 2302 	umull	r2, r3, r3, r2
 8007f76:	095b      	lsrs	r3, r3, #5
 8007f78:	011e      	lsls	r6, r3, #4
 8007f7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	f04f 0100 	mov.w	r1, #0
 8007f82:	4602      	mov	r2, r0
 8007f84:	460b      	mov	r3, r1
 8007f86:	1894      	adds	r4, r2, r2
 8007f88:	60bc      	str	r4, [r7, #8]
 8007f8a:	415b      	adcs	r3, r3
 8007f8c:	60fb      	str	r3, [r7, #12]
 8007f8e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f92:	1812      	adds	r2, r2, r0
 8007f94:	eb41 0303 	adc.w	r3, r1, r3
 8007f98:	f04f 0400 	mov.w	r4, #0
 8007f9c:	f04f 0500 	mov.w	r5, #0
 8007fa0:	00dd      	lsls	r5, r3, #3
 8007fa2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fa6:	00d4      	lsls	r4, r2, #3
 8007fa8:	4622      	mov	r2, r4
 8007faa:	462b      	mov	r3, r5
 8007fac:	1814      	adds	r4, r2, r0
 8007fae:	64bc      	str	r4, [r7, #72]	; 0x48
 8007fb0:	414b      	adcs	r3, r1
 8007fb2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fb6:	685b      	ldr	r3, [r3, #4]
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f04f 0100 	mov.w	r1, #0
 8007fbe:	f04f 0200 	mov.w	r2, #0
 8007fc2:	f04f 0300 	mov.w	r3, #0
 8007fc6:	008b      	lsls	r3, r1, #2
 8007fc8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fcc:	0082      	lsls	r2, r0, #2
 8007fce:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007fd2:	f7f8 fe59 	bl	8000c88 <__aeabi_uldivmod>
 8007fd6:	4602      	mov	r2, r0
 8007fd8:	460b      	mov	r3, r1
 8007fda:	4b2f      	ldr	r3, [pc, #188]	; (8008098 <UART_SetConfig+0x38c>)
 8007fdc:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	2164      	movs	r1, #100	; 0x64
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	011b      	lsls	r3, r3, #4
 8007fec:	3332      	adds	r3, #50	; 0x32
 8007fee:	4a2a      	ldr	r2, [pc, #168]	; (8008098 <UART_SetConfig+0x38c>)
 8007ff0:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff4:	095b      	lsrs	r3, r3, #5
 8007ff6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ffa:	441e      	add	r6, r3
 8007ffc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ffe:	4618      	mov	r0, r3
 8008000:	f04f 0100 	mov.w	r1, #0
 8008004:	4602      	mov	r2, r0
 8008006:	460b      	mov	r3, r1
 8008008:	1894      	adds	r4, r2, r2
 800800a:	603c      	str	r4, [r7, #0]
 800800c:	415b      	adcs	r3, r3
 800800e:	607b      	str	r3, [r7, #4]
 8008010:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008014:	1812      	adds	r2, r2, r0
 8008016:	eb41 0303 	adc.w	r3, r1, r3
 800801a:	f04f 0400 	mov.w	r4, #0
 800801e:	f04f 0500 	mov.w	r5, #0
 8008022:	00dd      	lsls	r5, r3, #3
 8008024:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008028:	00d4      	lsls	r4, r2, #3
 800802a:	4622      	mov	r2, r4
 800802c:	462b      	mov	r3, r5
 800802e:	eb12 0a00 	adds.w	sl, r2, r0
 8008032:	eb43 0b01 	adc.w	fp, r3, r1
 8008036:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008038:	685b      	ldr	r3, [r3, #4]
 800803a:	4618      	mov	r0, r3
 800803c:	f04f 0100 	mov.w	r1, #0
 8008040:	f04f 0200 	mov.w	r2, #0
 8008044:	f04f 0300 	mov.w	r3, #0
 8008048:	008b      	lsls	r3, r1, #2
 800804a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800804e:	0082      	lsls	r2, r0, #2
 8008050:	4650      	mov	r0, sl
 8008052:	4659      	mov	r1, fp
 8008054:	f7f8 fe18 	bl	8000c88 <__aeabi_uldivmod>
 8008058:	4602      	mov	r2, r0
 800805a:	460b      	mov	r3, r1
 800805c:	4b0e      	ldr	r3, [pc, #56]	; (8008098 <UART_SetConfig+0x38c>)
 800805e:	fba3 1302 	umull	r1, r3, r3, r2
 8008062:	095b      	lsrs	r3, r3, #5
 8008064:	2164      	movs	r1, #100	; 0x64
 8008066:	fb01 f303 	mul.w	r3, r1, r3
 800806a:	1ad3      	subs	r3, r2, r3
 800806c:	011b      	lsls	r3, r3, #4
 800806e:	3332      	adds	r3, #50	; 0x32
 8008070:	4a09      	ldr	r2, [pc, #36]	; (8008098 <UART_SetConfig+0x38c>)
 8008072:	fba2 2303 	umull	r2, r3, r2, r3
 8008076:	095b      	lsrs	r3, r3, #5
 8008078:	f003 020f 	and.w	r2, r3, #15
 800807c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	4432      	add	r2, r6
 8008082:	609a      	str	r2, [r3, #8]
}
 8008084:	bf00      	nop
 8008086:	377c      	adds	r7, #124	; 0x7c
 8008088:	46bd      	mov	sp, r7
 800808a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800808e:	bf00      	nop
 8008090:	40011000 	.word	0x40011000
 8008094:	40011400 	.word	0x40011400
 8008098:	51eb851f 	.word	0x51eb851f

0800809c <__errno>:
 800809c:	4b01      	ldr	r3, [pc, #4]	; (80080a4 <__errno+0x8>)
 800809e:	6818      	ldr	r0, [r3, #0]
 80080a0:	4770      	bx	lr
 80080a2:	bf00      	nop
 80080a4:	200001f8 	.word	0x200001f8

080080a8 <__libc_init_array>:
 80080a8:	b570      	push	{r4, r5, r6, lr}
 80080aa:	4d0d      	ldr	r5, [pc, #52]	; (80080e0 <__libc_init_array+0x38>)
 80080ac:	4c0d      	ldr	r4, [pc, #52]	; (80080e4 <__libc_init_array+0x3c>)
 80080ae:	1b64      	subs	r4, r4, r5
 80080b0:	10a4      	asrs	r4, r4, #2
 80080b2:	2600      	movs	r6, #0
 80080b4:	42a6      	cmp	r6, r4
 80080b6:	d109      	bne.n	80080cc <__libc_init_array+0x24>
 80080b8:	4d0b      	ldr	r5, [pc, #44]	; (80080e8 <__libc_init_array+0x40>)
 80080ba:	4c0c      	ldr	r4, [pc, #48]	; (80080ec <__libc_init_array+0x44>)
 80080bc:	f007 fd9a 	bl	800fbf4 <_init>
 80080c0:	1b64      	subs	r4, r4, r5
 80080c2:	10a4      	asrs	r4, r4, #2
 80080c4:	2600      	movs	r6, #0
 80080c6:	42a6      	cmp	r6, r4
 80080c8:	d105      	bne.n	80080d6 <__libc_init_array+0x2e>
 80080ca:	bd70      	pop	{r4, r5, r6, pc}
 80080cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d0:	4798      	blx	r3
 80080d2:	3601      	adds	r6, #1
 80080d4:	e7ee      	b.n	80080b4 <__libc_init_array+0xc>
 80080d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080da:	4798      	blx	r3
 80080dc:	3601      	adds	r6, #1
 80080de:	e7f2      	b.n	80080c6 <__libc_init_array+0x1e>
 80080e0:	08010b50 	.word	0x08010b50
 80080e4:	08010b50 	.word	0x08010b50
 80080e8:	08010b50 	.word	0x08010b50
 80080ec:	08010b58 	.word	0x08010b58

080080f0 <memset>:
 80080f0:	4402      	add	r2, r0
 80080f2:	4603      	mov	r3, r0
 80080f4:	4293      	cmp	r3, r2
 80080f6:	d100      	bne.n	80080fa <memset+0xa>
 80080f8:	4770      	bx	lr
 80080fa:	f803 1b01 	strb.w	r1, [r3], #1
 80080fe:	e7f9      	b.n	80080f4 <memset+0x4>

08008100 <_puts_r>:
 8008100:	b530      	push	{r4, r5, lr}
 8008102:	4605      	mov	r5, r0
 8008104:	b089      	sub	sp, #36	; 0x24
 8008106:	4608      	mov	r0, r1
 8008108:	460c      	mov	r4, r1
 800810a:	f7f8 f861 	bl	80001d0 <strlen>
 800810e:	4b1e      	ldr	r3, [pc, #120]	; (8008188 <_puts_r+0x88>)
 8008110:	9306      	str	r3, [sp, #24]
 8008112:	2301      	movs	r3, #1
 8008114:	e9cd 4004 	strd	r4, r0, [sp, #16]
 8008118:	9307      	str	r3, [sp, #28]
 800811a:	4418      	add	r0, r3
 800811c:	ab04      	add	r3, sp, #16
 800811e:	9301      	str	r3, [sp, #4]
 8008120:	2302      	movs	r3, #2
 8008122:	9302      	str	r3, [sp, #8]
 8008124:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8008126:	68ac      	ldr	r4, [r5, #8]
 8008128:	9003      	str	r0, [sp, #12]
 800812a:	b913      	cbnz	r3, 8008132 <_puts_r+0x32>
 800812c:	4628      	mov	r0, r5
 800812e:	f001 faa9 	bl	8009684 <__sinit>
 8008132:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008134:	07db      	lsls	r3, r3, #31
 8008136:	d405      	bmi.n	8008144 <_puts_r+0x44>
 8008138:	89a3      	ldrh	r3, [r4, #12]
 800813a:	0598      	lsls	r0, r3, #22
 800813c:	d402      	bmi.n	8008144 <_puts_r+0x44>
 800813e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008140:	f001 fc5e 	bl	8009a00 <__retarget_lock_acquire_recursive>
 8008144:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008148:	0499      	lsls	r1, r3, #18
 800814a:	d406      	bmi.n	800815a <_puts_r+0x5a>
 800814c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8008150:	81a3      	strh	r3, [r4, #12]
 8008152:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008154:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008158:	6663      	str	r3, [r4, #100]	; 0x64
 800815a:	4628      	mov	r0, r5
 800815c:	aa01      	add	r2, sp, #4
 800815e:	4621      	mov	r1, r4
 8008160:	f001 facc 	bl	80096fc <__sfvwrite_r>
 8008164:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008166:	2800      	cmp	r0, #0
 8008168:	bf14      	ite	ne
 800816a:	f04f 35ff 	movne.w	r5, #4294967295
 800816e:	250a      	moveq	r5, #10
 8008170:	07da      	lsls	r2, r3, #31
 8008172:	d405      	bmi.n	8008180 <_puts_r+0x80>
 8008174:	89a3      	ldrh	r3, [r4, #12]
 8008176:	059b      	lsls	r3, r3, #22
 8008178:	d402      	bmi.n	8008180 <_puts_r+0x80>
 800817a:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800817c:	f001 fc41 	bl	8009a02 <__retarget_lock_release_recursive>
 8008180:	4628      	mov	r0, r5
 8008182:	b009      	add	sp, #36	; 0x24
 8008184:	bd30      	pop	{r4, r5, pc}
 8008186:	bf00      	nop
 8008188:	08010b26 	.word	0x08010b26

0800818c <puts>:
 800818c:	4b02      	ldr	r3, [pc, #8]	; (8008198 <puts+0xc>)
 800818e:	4601      	mov	r1, r0
 8008190:	6818      	ldr	r0, [r3, #0]
 8008192:	f7ff bfb5 	b.w	8008100 <_puts_r>
 8008196:	bf00      	nop
 8008198:	200001f8 	.word	0x200001f8

0800819c <sscanf>:
 800819c:	b40e      	push	{r1, r2, r3}
 800819e:	b510      	push	{r4, lr}
 80081a0:	b09f      	sub	sp, #124	; 0x7c
 80081a2:	ac21      	add	r4, sp, #132	; 0x84
 80081a4:	f44f 7101 	mov.w	r1, #516	; 0x204
 80081a8:	f854 2b04 	ldr.w	r2, [r4], #4
 80081ac:	9201      	str	r2, [sp, #4]
 80081ae:	f8ad 101c 	strh.w	r1, [sp, #28]
 80081b2:	9004      	str	r0, [sp, #16]
 80081b4:	9008      	str	r0, [sp, #32]
 80081b6:	f7f8 f80b 	bl	80001d0 <strlen>
 80081ba:	4b0c      	ldr	r3, [pc, #48]	; (80081ec <sscanf+0x50>)
 80081bc:	9005      	str	r0, [sp, #20]
 80081be:	9009      	str	r0, [sp, #36]	; 0x24
 80081c0:	930c      	str	r3, [sp, #48]	; 0x30
 80081c2:	480b      	ldr	r0, [pc, #44]	; (80081f0 <sscanf+0x54>)
 80081c4:	9a01      	ldr	r2, [sp, #4]
 80081c6:	6800      	ldr	r0, [r0, #0]
 80081c8:	9403      	str	r4, [sp, #12]
 80081ca:	2300      	movs	r3, #0
 80081cc:	9310      	str	r3, [sp, #64]	; 0x40
 80081ce:	9315      	str	r3, [sp, #84]	; 0x54
 80081d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80081d4:	f8ad 301e 	strh.w	r3, [sp, #30]
 80081d8:	a904      	add	r1, sp, #16
 80081da:	4623      	mov	r3, r4
 80081dc:	f000 f850 	bl	8008280 <__ssvfscanf_r>
 80081e0:	b01f      	add	sp, #124	; 0x7c
 80081e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80081e6:	b003      	add	sp, #12
 80081e8:	4770      	bx	lr
 80081ea:	bf00      	nop
 80081ec:	08008217 	.word	0x08008217
 80081f0:	200001f8 	.word	0x200001f8

080081f4 <__sread>:
 80081f4:	b510      	push	{r4, lr}
 80081f6:	460c      	mov	r4, r1
 80081f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081fc:	f001 fec6 	bl	8009f8c <_read_r>
 8008200:	2800      	cmp	r0, #0
 8008202:	bfab      	itete	ge
 8008204:	6d23      	ldrge	r3, [r4, #80]	; 0x50
 8008206:	89a3      	ldrhlt	r3, [r4, #12]
 8008208:	181b      	addge	r3, r3, r0
 800820a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800820e:	bfac      	ite	ge
 8008210:	6523      	strge	r3, [r4, #80]	; 0x50
 8008212:	81a3      	strhlt	r3, [r4, #12]
 8008214:	bd10      	pop	{r4, pc}

08008216 <__seofread>:
 8008216:	2000      	movs	r0, #0
 8008218:	4770      	bx	lr

0800821a <__swrite>:
 800821a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800821e:	461f      	mov	r7, r3
 8008220:	898b      	ldrh	r3, [r1, #12]
 8008222:	05db      	lsls	r3, r3, #23
 8008224:	4605      	mov	r5, r0
 8008226:	460c      	mov	r4, r1
 8008228:	4616      	mov	r6, r2
 800822a:	d505      	bpl.n	8008238 <__swrite+0x1e>
 800822c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008230:	2302      	movs	r3, #2
 8008232:	2200      	movs	r2, #0
 8008234:	f001 fbe6 	bl	8009a04 <_lseek_r>
 8008238:	89a3      	ldrh	r3, [r4, #12]
 800823a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800823e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008242:	81a3      	strh	r3, [r4, #12]
 8008244:	4632      	mov	r2, r6
 8008246:	463b      	mov	r3, r7
 8008248:	4628      	mov	r0, r5
 800824a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800824e:	f001 b9a1 	b.w	8009594 <_write_r>

08008252 <__sseek>:
 8008252:	b510      	push	{r4, lr}
 8008254:	460c      	mov	r4, r1
 8008256:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800825a:	f001 fbd3 	bl	8009a04 <_lseek_r>
 800825e:	1c43      	adds	r3, r0, #1
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	bf15      	itete	ne
 8008264:	6520      	strne	r0, [r4, #80]	; 0x50
 8008266:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800826a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800826e:	81a3      	strheq	r3, [r4, #12]
 8008270:	bf18      	it	ne
 8008272:	81a3      	strhne	r3, [r4, #12]
 8008274:	bd10      	pop	{r4, pc}

08008276 <__sclose>:
 8008276:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800827a:	f001 b9ad 	b.w	80095d8 <_close_r>
	...

08008280 <__ssvfscanf_r>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	ed2d 8b02 	vpush	{d8}
 8008288:	f5ad 7d2f 	sub.w	sp, sp, #700	; 0x2bc
 800828c:	461e      	mov	r6, r3
 800828e:	f9b1 300c 	ldrsh.w	r3, [r1, #12]
 8008292:	af02      	add	r7, sp, #8
 8008294:	049d      	lsls	r5, r3, #18
 8008296:	ee08 0a10 	vmov	s16, r0
 800829a:	460c      	mov	r4, r1
 800829c:	617a      	str	r2, [r7, #20]
 800829e:	d406      	bmi.n	80082ae <__ssvfscanf_r+0x2e>
 80082a0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80082a4:	818b      	strh	r3, [r1, #12]
 80082a6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 80082a8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80082ac:	664b      	str	r3, [r1, #100]	; 0x64
 80082ae:	2300      	movs	r3, #0
 80082b0:	e9c7 3307 	strd	r3, r3, [r7, #28]
 80082b4:	61bb      	str	r3, [r7, #24]
 80082b6:	637b      	str	r3, [r7, #52]	; 0x34
 80082b8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80082ba:	627b      	str	r3, [r7, #36]	; 0x24
 80082bc:	697a      	ldr	r2, [r7, #20]
 80082be:	f812 3b01 	ldrb.w	r3, [r2], #1
 80082c2:	617a      	str	r2, [r7, #20]
 80082c4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	f000 80d6 	beq.w	8008478 <__ssvfscanf_r+0x1f8>
 80082cc:	4a92      	ldr	r2, [pc, #584]	; (8008518 <__ssvfscanf_r+0x298>)
 80082ce:	f813 8002 	ldrb.w	r8, [r3, r2]
 80082d2:	f018 0808 	ands.w	r8, r8, #8
 80082d6:	d019      	beq.n	800830c <__ssvfscanf_r+0x8c>
 80082d8:	6863      	ldr	r3, [r4, #4]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	dd0e      	ble.n	80082fc <__ssvfscanf_r+0x7c>
 80082de:	6823      	ldr	r3, [r4, #0]
 80082e0:	498d      	ldr	r1, [pc, #564]	; (8008518 <__ssvfscanf_r+0x298>)
 80082e2:	781a      	ldrb	r2, [r3, #0]
 80082e4:	5c8a      	ldrb	r2, [r1, r2]
 80082e6:	0710      	lsls	r0, r2, #28
 80082e8:	d5e8      	bpl.n	80082bc <__ssvfscanf_r+0x3c>
 80082ea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082ec:	3201      	adds	r2, #1
 80082ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082f0:	6862      	ldr	r2, [r4, #4]
 80082f2:	3301      	adds	r3, #1
 80082f4:	3a01      	subs	r2, #1
 80082f6:	6062      	str	r2, [r4, #4]
 80082f8:	6023      	str	r3, [r4, #0]
 80082fa:	e7ed      	b.n	80082d8 <__ssvfscanf_r+0x58>
 80082fc:	ee18 0a10 	vmov	r0, s16
 8008300:	4621      	mov	r1, r4
 8008302:	f003 f916 	bl	800b532 <__ssrefill_r>
 8008306:	2800      	cmp	r0, #0
 8008308:	d0e9      	beq.n	80082de <__ssvfscanf_r+0x5e>
 800830a:	e7d7      	b.n	80082bc <__ssvfscanf_r+0x3c>
 800830c:	2b25      	cmp	r3, #37	; 0x25
 800830e:	d165      	bne.n	80083dc <__ssvfscanf_r+0x15c>
 8008310:	697b      	ldr	r3, [r7, #20]
 8008312:	f8c7 8030 	str.w	r8, [r7, #48]	; 0x30
 8008316:	46c1      	mov	r9, r8
 8008318:	220a      	movs	r2, #10
 800831a:	6979      	ldr	r1, [r7, #20]
 800831c:	781d      	ldrb	r5, [r3, #0]
 800831e:	3101      	adds	r1, #1
 8008320:	6179      	str	r1, [r7, #20]
 8008322:	f1a5 0125 	sub.w	r1, r5, #37	; 0x25
 8008326:	2955      	cmp	r1, #85	; 0x55
 8008328:	f200 80a6 	bhi.w	8008478 <__ssvfscanf_r+0x1f8>
 800832c:	e8df f011 	tbh	[pc, r1, lsl #1]
 8008330:	00a40056 	.word	0x00a40056
 8008334:	00a400a4 	.word	0x00a400a4
 8008338:	007d00a4 	.word	0x007d00a4
 800833c:	00a400a4 	.word	0x00a400a4
 8008340:	00a400a4 	.word	0x00a400a4
 8008344:	00ba00a4 	.word	0x00ba00a4
 8008348:	00ba00ba 	.word	0x00ba00ba
 800834c:	00ba00ba 	.word	0x00ba00ba
 8008350:	00ba00ba 	.word	0x00ba00ba
 8008354:	00ba00ba 	.word	0x00ba00ba
 8008358:	00a400ba 	.word	0x00a400ba
 800835c:	00a400a4 	.word	0x00a400a4
 8008360:	00a400a4 	.word	0x00a400a4
 8008364:	00a400a4 	.word	0x00a400a4
 8008368:	00a400da 	.word	0x00a400da
 800836c:	00c40104 	.word	0x00c40104
 8008370:	00da00da 	.word	0x00da00da
 8008374:	00a400da 	.word	0x00a400da
 8008378:	00a400a4 	.word	0x00a400a4
 800837c:	00a100a4 	.word	0x00a100a4
 8008380:	00a400a4 	.word	0x00a400a4
 8008384:	00a400c8 	.word	0x00a400c8
 8008388:	00a400a4 	.word	0x00a400a4
 800838c:	00a400f0 	.word	0x00a400f0
 8008390:	00a400a4 	.word	0x00a400a4
 8008394:	00d400a4 	.word	0x00d400a4
 8008398:	00a400a4 	.word	0x00a400a4
 800839c:	00a400fa 	.word	0x00a400fa
 80083a0:	00a400a4 	.word	0x00a400a4
 80083a4:	00a400a4 	.word	0x00a400a4
 80083a8:	00a400da 	.word	0x00a400da
 80083ac:	00c60106 	.word	0x00c60106
 80083b0:	00da00da 	.word	0x00da00da
 80083b4:	009400da 	.word	0x009400da
 80083b8:	00a10130 	.word	0x00a10130
 80083bc:	008600a4 	.word	0x008600a4
 80083c0:	010d00ad 	.word	0x010d00ad
 80083c4:	010a00ca 	.word	0x010a00ca
 80083c8:	00a400a4 	.word	0x00a400a4
 80083cc:	00a900f2 	.word	0x00a900f2
 80083d0:	00a400d0 	.word	0x00a400d0
 80083d4:	00d400a4 	.word	0x00d400a4
 80083d8:	00a900a4 	.word	0x00a900a4
 80083dc:	6863      	ldr	r3, [r4, #4]
 80083de:	2b00      	cmp	r3, #0
 80083e0:	dd0f      	ble.n	8008402 <__ssvfscanf_r+0x182>
 80083e2:	6823      	ldr	r3, [r4, #0]
 80083e4:	697a      	ldr	r2, [r7, #20]
 80083e6:	7819      	ldrb	r1, [r3, #0]
 80083e8:	f812 2c01 	ldrb.w	r2, [r2, #-1]
 80083ec:	4291      	cmp	r1, r2
 80083ee:	d143      	bne.n	8008478 <__ssvfscanf_r+0x1f8>
 80083f0:	6862      	ldr	r2, [r4, #4]
 80083f2:	3301      	adds	r3, #1
 80083f4:	6023      	str	r3, [r4, #0]
 80083f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083f8:	3a01      	subs	r2, #1
 80083fa:	6062      	str	r2, [r4, #4]
 80083fc:	3301      	adds	r3, #1
 80083fe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008400:	e75c      	b.n	80082bc <__ssvfscanf_r+0x3c>
 8008402:	ee18 0a10 	vmov	r0, s16
 8008406:	4621      	mov	r1, r4
 8008408:	f003 f893 	bl	800b532 <__ssrefill_r>
 800840c:	2800      	cmp	r0, #0
 800840e:	d0e8      	beq.n	80083e2 <__ssvfscanf_r+0x162>
 8008410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008412:	b113      	cbz	r3, 800841a <__ssvfscanf_r+0x19a>
 8008414:	89a3      	ldrh	r3, [r4, #12]
 8008416:	065b      	lsls	r3, r3, #25
 8008418:	d52e      	bpl.n	8008478 <__ssvfscanf_r+0x1f8>
 800841a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800841c:	2b00      	cmp	r3, #0
 800841e:	f040 80fa 	bne.w	8008616 <__ssvfscanf_r+0x396>
 8008422:	f04f 33ff 	mov.w	r3, #4294967295
 8008426:	627b      	str	r3, [r7, #36]	; 0x24
 8008428:	e105      	b.n	8008636 <__ssvfscanf_r+0x3b6>
 800842a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800842c:	ea53 0309 	orrs.w	r3, r3, r9
 8008430:	633b      	str	r3, [r7, #48]	; 0x30
 8008432:	d121      	bne.n	8008478 <__ssvfscanf_r+0x1f8>
 8008434:	f04f 0910 	mov.w	r9, #16
 8008438:	697b      	ldr	r3, [r7, #20]
 800843a:	e76e      	b.n	800831a <__ssvfscanf_r+0x9a>
 800843c:	f019 0f0f 	tst.w	r9, #15
 8008440:	d11a      	bne.n	8008478 <__ssvfscanf_r+0x1f8>
 8008442:	7859      	ldrb	r1, [r3, #1]
 8008444:	296c      	cmp	r1, #108	; 0x6c
 8008446:	d104      	bne.n	8008452 <__ssvfscanf_r+0x1d2>
 8008448:	3302      	adds	r3, #2
 800844a:	617b      	str	r3, [r7, #20]
 800844c:	f049 0902 	orr.w	r9, r9, #2
 8008450:	e7f2      	b.n	8008438 <__ssvfscanf_r+0x1b8>
 8008452:	f049 0901 	orr.w	r9, r9, #1
 8008456:	e7ef      	b.n	8008438 <__ssvfscanf_r+0x1b8>
 8008458:	f019 0f0f 	tst.w	r9, #15
 800845c:	d10c      	bne.n	8008478 <__ssvfscanf_r+0x1f8>
 800845e:	7859      	ldrb	r1, [r3, #1]
 8008460:	2968      	cmp	r1, #104	; 0x68
 8008462:	bf03      	ittte	eq
 8008464:	3302      	addeq	r3, #2
 8008466:	617b      	streq	r3, [r7, #20]
 8008468:	f049 0908 	orreq.w	r9, r9, #8
 800846c:	f049 0904 	orrne.w	r9, r9, #4
 8008470:	e7e2      	b.n	8008438 <__ssvfscanf_r+0x1b8>
 8008472:	f019 0f0f 	tst.w	r9, #15
 8008476:	d0e9      	beq.n	800844c <__ssvfscanf_r+0x1cc>
 8008478:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800847a:	2b00      	cmp	r3, #0
 800847c:	f000 80db 	beq.w	8008636 <__ssvfscanf_r+0x3b6>
 8008480:	e0d4      	b.n	800862c <__ssvfscanf_r+0x3ac>
 8008482:	f019 0f0f 	tst.w	r9, #15
 8008486:	d0d7      	beq.n	8008438 <__ssvfscanf_r+0x1b8>
 8008488:	e7f6      	b.n	8008478 <__ssvfscanf_r+0x1f8>
 800848a:	f019 038f 	ands.w	r3, r9, #143	; 0x8f
 800848e:	d1f3      	bne.n	8008478 <__ssvfscanf_r+0x1f8>
 8008490:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008492:	b921      	cbnz	r1, 800849e <__ssvfscanf_r+0x21e>
 8008494:	b082      	sub	sp, #8
 8008496:	a902      	add	r1, sp, #8
 8008498:	e9c1 3300 	strd	r3, r3, [r1]
 800849c:	6379      	str	r1, [r7, #52]	; 0x34
 800849e:	f049 0980 	orr.w	r9, r9, #128	; 0x80
 80084a2:	e7c9      	b.n	8008438 <__ssvfscanf_r+0x1b8>
 80084a4:	f019 0f8f 	tst.w	r9, #143	; 0x8f
 80084a8:	d1e6      	bne.n	8008478 <__ssvfscanf_r+0x1f8>
 80084aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80084ac:	fb02 5503 	mla	r5, r2, r3, r5
 80084b0:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 80084b4:	633b      	str	r3, [r7, #48]	; 0x30
 80084b6:	e7bf      	b.n	8008438 <__ssvfscanf_r+0x1b8>
 80084b8:	f049 0901 	orr.w	r9, r9, #1
 80084bc:	4b17      	ldr	r3, [pc, #92]	; (800851c <__ssvfscanf_r+0x29c>)
 80084be:	e008      	b.n	80084d2 <__ssvfscanf_r+0x252>
 80084c0:	f049 0901 	orr.w	r9, r9, #1
 80084c4:	4b16      	ldr	r3, [pc, #88]	; (8008520 <__ssvfscanf_r+0x2a0>)
 80084c6:	61bb      	str	r3, [r7, #24]
 80084c8:	2308      	movs	r3, #8
 80084ca:	61fb      	str	r3, [r7, #28]
 80084cc:	2503      	movs	r5, #3
 80084ce:	e00a      	b.n	80084e6 <__ssvfscanf_r+0x266>
 80084d0:	4b13      	ldr	r3, [pc, #76]	; (8008520 <__ssvfscanf_r+0x2a0>)
 80084d2:	61bb      	str	r3, [r7, #24]
 80084d4:	230a      	movs	r3, #10
 80084d6:	e7f8      	b.n	80084ca <__ssvfscanf_r+0x24a>
 80084d8:	f449 7900 	orr.w	r9, r9, #512	; 0x200
 80084dc:	4b10      	ldr	r3, [pc, #64]	; (8008520 <__ssvfscanf_r+0x2a0>)
 80084de:	61bb      	str	r3, [r7, #24]
 80084e0:	2310      	movs	r3, #16
 80084e2:	e7f2      	b.n	80084ca <__ssvfscanf_r+0x24a>
 80084e4:	2504      	movs	r5, #4
 80084e6:	6863      	ldr	r3, [r4, #4]
 80084e8:	2b00      	cmp	r3, #0
 80084ea:	dd55      	ble.n	8008598 <__ssvfscanf_r+0x318>
 80084ec:	f019 0f40 	tst.w	r9, #64	; 0x40
 80084f0:	d105      	bne.n	80084fe <__ssvfscanf_r+0x27e>
 80084f2:	6823      	ldr	r3, [r4, #0]
 80084f4:	4908      	ldr	r1, [pc, #32]	; (8008518 <__ssvfscanf_r+0x298>)
 80084f6:	781a      	ldrb	r2, [r3, #0]
 80084f8:	5c52      	ldrb	r2, [r2, r1]
 80084fa:	0711      	lsls	r1, r2, #28
 80084fc:	d454      	bmi.n	80085a8 <__ssvfscanf_r+0x328>
 80084fe:	3d01      	subs	r5, #1
 8008500:	2d03      	cmp	r5, #3
 8008502:	d864      	bhi.n	80085ce <__ssvfscanf_r+0x34e>
 8008504:	e8df f015 	tbh	[pc, r5, lsl #1]
 8008508:	039201d7 	.word	0x039201d7
 800850c:	062b0538 	.word	0x062b0538
 8008510:	f049 0901 	orr.w	r9, r9, #1
 8008514:	2502      	movs	r5, #2
 8008516:	e7e6      	b.n	80084e6 <__ssvfscanf_r+0x266>
 8008518:	080106ed 	.word	0x080106ed
 800851c:	0800b151 	.word	0x0800b151
 8008520:	0800b37d 	.word	0x0800b37d
 8008524:	6979      	ldr	r1, [r7, #20]
 8008526:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800852a:	f001 feff 	bl	800a32c <__sccl>
 800852e:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8008532:	6178      	str	r0, [r7, #20]
 8008534:	2501      	movs	r5, #1
 8008536:	e7d6      	b.n	80084e6 <__ssvfscanf_r+0x266>
 8008538:	f049 0901 	orr.w	r9, r9, #1
 800853c:	f049 0940 	orr.w	r9, r9, #64	; 0x40
 8008540:	2500      	movs	r5, #0
 8008542:	e7d0      	b.n	80084e6 <__ssvfscanf_r+0x266>
 8008544:	f449 7908 	orr.w	r9, r9, #544	; 0x220
 8008548:	e7c8      	b.n	80084dc <__ssvfscanf_r+0x25c>
 800854a:	f019 0f10 	tst.w	r9, #16
 800854e:	f47f aeb5 	bne.w	80082bc <__ssvfscanf_r+0x3c>
 8008552:	f019 0f08 	tst.w	r9, #8
 8008556:	f856 1b04 	ldr.w	r1, [r6], #4
 800855a:	d002      	beq.n	8008562 <__ssvfscanf_r+0x2e2>
 800855c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800855e:	700b      	strb	r3, [r1, #0]
 8008560:	e6ac      	b.n	80082bc <__ssvfscanf_r+0x3c>
 8008562:	f019 0f04 	tst.w	r9, #4
 8008566:	d002      	beq.n	800856e <__ssvfscanf_r+0x2ee>
 8008568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800856a:	800b      	strh	r3, [r1, #0]
 800856c:	e6a6      	b.n	80082bc <__ssvfscanf_r+0x3c>
 800856e:	f019 0f01 	tst.w	r9, #1
 8008572:	d002      	beq.n	800857a <__ssvfscanf_r+0x2fa>
 8008574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008576:	600b      	str	r3, [r1, #0]
 8008578:	e6a0      	b.n	80082bc <__ssvfscanf_r+0x3c>
 800857a:	f019 0f02 	tst.w	r9, #2
 800857e:	d0f9      	beq.n	8008574 <__ssvfscanf_r+0x2f4>
 8008580:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008582:	ea4f 79e3 	mov.w	r9, r3, asr #31
 8008586:	461a      	mov	r2, r3
 8008588:	464b      	mov	r3, r9
 800858a:	e9c1 2300 	strd	r2, r3, [r1]
 800858e:	e695      	b.n	80082bc <__ssvfscanf_r+0x3c>
 8008590:	4b9c      	ldr	r3, [pc, #624]	; (8008804 <__ssvfscanf_r+0x584>)
 8008592:	61bb      	str	r3, [r7, #24]
 8008594:	2300      	movs	r3, #0
 8008596:	e798      	b.n	80084ca <__ssvfscanf_r+0x24a>
 8008598:	ee18 0a10 	vmov	r0, s16
 800859c:	4621      	mov	r1, r4
 800859e:	f002 ffc8 	bl	800b532 <__ssrefill_r>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d0a2      	beq.n	80084ec <__ssvfscanf_r+0x26c>
 80085a6:	e733      	b.n	8008410 <__ssvfscanf_r+0x190>
 80085a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085aa:	3201      	adds	r2, #1
 80085ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80085ae:	6862      	ldr	r2, [r4, #4]
 80085b0:	3a01      	subs	r2, #1
 80085b2:	2a00      	cmp	r2, #0
 80085b4:	6062      	str	r2, [r4, #4]
 80085b6:	dd02      	ble.n	80085be <__ssvfscanf_r+0x33e>
 80085b8:	3301      	adds	r3, #1
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	e799      	b.n	80084f2 <__ssvfscanf_r+0x272>
 80085be:	ee18 0a10 	vmov	r0, s16
 80085c2:	4621      	mov	r1, r4
 80085c4:	f002 ffb5 	bl	800b532 <__ssrefill_r>
 80085c8:	2800      	cmp	r0, #0
 80085ca:	d092      	beq.n	80084f2 <__ssvfscanf_r+0x272>
 80085cc:	e720      	b.n	8008410 <__ssvfscanf_r+0x190>
 80085ce:	6b3d      	ldr	r5, [r7, #48]	; 0x30
 80085d0:	2d01      	cmp	r5, #1
 80085d2:	bf38      	it	cc
 80085d4:	2501      	movcc	r5, #1
 80085d6:	f019 0801 	ands.w	r8, r9, #1
 80085da:	f009 0b10 	and.w	fp, r9, #16
 80085de:	f000 80f2 	beq.w	80087c6 <__ssvfscanf_r+0x546>
 80085e2:	f1bb 0f00 	cmp.w	fp, #0
 80085e6:	f040 80b5 	bne.w	8008754 <__ssvfscanf_r+0x4d4>
 80085ea:	4633      	mov	r3, r6
 80085ec:	f019 0f80 	tst.w	r9, #128	; 0x80
 80085f0:	f853 6b04 	ldr.w	r6, [r3], #4
 80085f4:	633b      	str	r3, [r7, #48]	; 0x30
 80085f6:	f000 80b4 	beq.w	8008762 <__ssvfscanf_r+0x4e2>
 80085fa:	b13e      	cbz	r6, 800860c <__ssvfscanf_r+0x38c>
 80085fc:	2080      	movs	r0, #128	; 0x80
 80085fe:	f001 fa13 	bl	8009a28 <malloc>
 8008602:	4680      	mov	r8, r0
 8008604:	b9f8      	cbnz	r0, 8008646 <__ssvfscanf_r+0x3c6>
 8008606:	f04f 33ff 	mov.w	r3, #4294967295
 800860a:	627b      	str	r3, [r7, #36]	; 0x24
 800860c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800860e:	b193      	cbz	r3, 8008636 <__ssvfscanf_r+0x3b6>
 8008610:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008612:	3301      	adds	r3, #1
 8008614:	d10a      	bne.n	800862c <__ssvfscanf_r+0x3ac>
 8008616:	2400      	movs	r4, #0
 8008618:	4626      	mov	r6, r4
 800861a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800861c:	681d      	ldr	r5, [r3, #0]
 800861e:	88db      	ldrh	r3, [r3, #6]
 8008620:	42a3      	cmp	r3, r4
 8008622:	f300 87a8 	bgt.w	8009576 <__ssvfscanf_r+0x12f6>
 8008626:	f04f 33ff 	mov.w	r3, #4294967295
 800862a:	627b      	str	r3, [r7, #36]	; 0x24
 800862c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862e:	6818      	ldr	r0, [r3, #0]
 8008630:	b108      	cbz	r0, 8008636 <__ssvfscanf_r+0x3b6>
 8008632:	f001 fa01 	bl	8009a38 <free>
 8008636:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008638:	f507 772d 	add.w	r7, r7, #692	; 0x2b4
 800863c:	46bd      	mov	sp, r7
 800863e:	ecbd 8b02 	vpop	{d8}
 8008642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008648:	6030      	str	r0, [r6, #0]
 800864a:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 800864e:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8008652:	45ca      	cmp	sl, r9
 8008654:	d311      	bcc.n	800867a <__ssvfscanf_r+0x3fa>
 8008656:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800865a:	4599      	cmp	r9, r3
 800865c:	d8d3      	bhi.n	8008606 <__ssvfscanf_r+0x386>
 800865e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008660:	f109 0908 	add.w	r9, r9, #8
 8008664:	6818      	ldr	r0, [r3, #0]
 8008666:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800866a:	f001 fca1 	bl	8009fb0 <realloc>
 800866e:	2800      	cmp	r0, #0
 8008670:	d0c9      	beq.n	8008606 <__ssvfscanf_r+0x386>
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	6018      	str	r0, [r3, #0]
 8008676:	f8a3 9004 	strh.w	r9, [r3, #4]
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f10a 0201 	add.w	r2, sl, #1
 8008684:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8008688:	80ca      	strh	r2, [r1, #6]
 800868a:	46b2      	mov	sl, r6
 800868c:	f04f 0920 	mov.w	r9, #32
 8008690:	4646      	mov	r6, r8
 8008692:	2200      	movs	r2, #0
 8008694:	62ba      	str	r2, [r7, #40]	; 0x28
 8008696:	f001 f9a7 	bl	80099e8 <__locale_mb_cur_max>
 800869a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800869c:	4290      	cmp	r0, r2
 800869e:	f43f aeb7 	beq.w	8008410 <__ssvfscanf_r+0x190>
 80086a2:	6821      	ldr	r1, [r4, #0]
 80086a4:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 80086a8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80086ac:	f80c 0002 	strb.w	r0, [ip, r2]
 80086b0:	1c53      	adds	r3, r2, #1
 80086b2:	6862      	ldr	r2, [r4, #4]
 80086b4:	3a01      	subs	r2, #1
 80086b6:	e9c4 1200 	strd	r1, r2, [r4]
 80086ba:	6a3a      	ldr	r2, [r7, #32]
 80086bc:	2a03      	cmp	r2, #3
 80086be:	d102      	bne.n	80086c6 <__ssvfscanf_r+0x446>
 80086c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80086c2:	2a04      	cmp	r2, #4
 80086c4:	d007      	beq.n	80086d6 <__ssvfscanf_r+0x456>
 80086c6:	2208      	movs	r2, #8
 80086c8:	2100      	movs	r1, #0
 80086ca:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80086ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80086d0:	f7ff fd0e 	bl	80080f0 <memset>
 80086d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086d6:	62bb      	str	r3, [r7, #40]	; 0x28
 80086d8:	f107 0248 	add.w	r2, r7, #72	; 0x48
 80086dc:	9200      	str	r2, [sp, #0]
 80086de:	ee18 0a10 	vmov	r0, s16
 80086e2:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 80086e6:	4631      	mov	r1, r6
 80086e8:	f001 fbf0 	bl	8009ecc <_mbrtowc_r>
 80086ec:	1c42      	adds	r2, r0, #1
 80086ee:	6238      	str	r0, [r7, #32]
 80086f0:	f43f ae8e 	beq.w	8008410 <__ssvfscanf_r+0x190>
 80086f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f6:	2800      	cmp	r0, #0
 80086f8:	d137      	bne.n	800876a <__ssvfscanf_r+0x4ea>
 80086fa:	f1bb 0f00 	cmp.w	fp, #0
 80086fe:	d101      	bne.n	8008704 <__ssvfscanf_r+0x484>
 8008700:	f8c6 b000 	str.w	fp, [r6]
 8008704:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008706:	441a      	add	r2, r3
 8008708:	6a3b      	ldr	r3, [r7, #32]
 800870a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800870c:	2b03      	cmp	r3, #3
 800870e:	d102      	bne.n	8008716 <__ssvfscanf_r+0x496>
 8008710:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008712:	2b04      	cmp	r3, #4
 8008714:	d000      	beq.n	8008718 <__ssvfscanf_r+0x498>
 8008716:	3d01      	subs	r5, #1
 8008718:	f1bb 0f00 	cmp.w	fp, #0
 800871c:	d118      	bne.n	8008750 <__ssvfscanf_r+0x4d0>
 800871e:	f1ba 0f00 	cmp.w	sl, #0
 8008722:	d014      	beq.n	800874e <__ssvfscanf_r+0x4ce>
 8008724:	eba6 0308 	sub.w	r3, r6, r8
 8008728:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 800872c:	d80f      	bhi.n	800874e <__ssvfscanf_r+0x4ce>
 800872e:	4640      	mov	r0, r8
 8008730:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008734:	62bb      	str	r3, [r7, #40]	; 0x28
 8008736:	f001 fc3b 	bl	8009fb0 <realloc>
 800873a:	4680      	mov	r8, r0
 800873c:	2800      	cmp	r0, #0
 800873e:	f43f af62 	beq.w	8008606 <__ssvfscanf_r+0x386>
 8008742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008744:	f8ca 0000 	str.w	r0, [sl]
 8008748:	18c6      	adds	r6, r0, r3
 800874a:	ea4f 0949 	mov.w	r9, r9, lsl #1
 800874e:	3604      	adds	r6, #4
 8008750:	2300      	movs	r3, #0
 8008752:	e00d      	b.n	8008770 <__ssvfscanf_r+0x4f0>
 8008754:	f04f 0900 	mov.w	r9, #0
 8008758:	633e      	str	r6, [r7, #48]	; 0x30
 800875a:	46c8      	mov	r8, r9
 800875c:	46ca      	mov	sl, r9
 800875e:	464e      	mov	r6, r9
 8008760:	e797      	b.n	8008692 <__ssvfscanf_r+0x412>
 8008762:	46d9      	mov	r9, fp
 8008764:	46d8      	mov	r8, fp
 8008766:	46da      	mov	sl, fp
 8008768:	e793      	b.n	8008692 <__ssvfscanf_r+0x412>
 800876a:	6a3a      	ldr	r2, [r7, #32]
 800876c:	3202      	adds	r2, #2
 800876e:	d1c9      	bne.n	8008704 <__ssvfscanf_r+0x484>
 8008770:	6862      	ldr	r2, [r4, #4]
 8008772:	2a00      	cmp	r2, #0
 8008774:	dc15      	bgt.n	80087a2 <__ssvfscanf_r+0x522>
 8008776:	ee18 0a10 	vmov	r0, s16
 800877a:	4621      	mov	r1, r4
 800877c:	62bb      	str	r3, [r7, #40]	; 0x28
 800877e:	f002 fed8 	bl	800b532 <__ssrefill_r>
 8008782:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008784:	b168      	cbz	r0, 80087a2 <__ssvfscanf_r+0x522>
 8008786:	2b00      	cmp	r3, #0
 8008788:	f47f ae42 	bne.w	8008410 <__ssvfscanf_r+0x190>
 800878c:	f1ba 0f00 	cmp.w	sl, #0
 8008790:	d10b      	bne.n	80087aa <__ssvfscanf_r+0x52a>
 8008792:	f1bb 0f00 	cmp.w	fp, #0
 8008796:	d102      	bne.n	800879e <__ssvfscanf_r+0x51e>
 8008798:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800879a:	3301      	adds	r3, #1
 800879c:	627b      	str	r3, [r7, #36]	; 0x24
 800879e:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 80087a0:	e58c      	b.n	80082bc <__ssvfscanf_r+0x3c>
 80087a2:	2d00      	cmp	r5, #0
 80087a4:	d0f2      	beq.n	800878c <__ssvfscanf_r+0x50c>
 80087a6:	461a      	mov	r2, r3
 80087a8:	e774      	b.n	8008694 <__ssvfscanf_r+0x414>
 80087aa:	eba6 0108 	sub.w	r1, r6, r8
 80087ae:	ebb9 0fa1 	cmp.w	r9, r1, asr #2
 80087b2:	d9ee      	bls.n	8008792 <__ssvfscanf_r+0x512>
 80087b4:	f8da 0000 	ldr.w	r0, [sl]
 80087b8:	f001 fbfa 	bl	8009fb0 <realloc>
 80087bc:	2800      	cmp	r0, #0
 80087be:	d0e8      	beq.n	8008792 <__ssvfscanf_r+0x512>
 80087c0:	f8ca 0000 	str.w	r0, [sl]
 80087c4:	e7e5      	b.n	8008792 <__ssvfscanf_r+0x512>
 80087c6:	f1bb 0f00 	cmp.w	fp, #0
 80087ca:	d01d      	beq.n	8008808 <__ssvfscanf_r+0x588>
 80087cc:	e9d4 2300 	ldrd	r2, r3, [r4]
 80087d0:	429d      	cmp	r5, r3
 80087d2:	dd11      	ble.n	80087f8 <__ssvfscanf_r+0x578>
 80087d4:	4498      	add	r8, r3
 80087d6:	1aed      	subs	r5, r5, r3
 80087d8:	4413      	add	r3, r2
 80087da:	ee18 0a10 	vmov	r0, s16
 80087de:	6023      	str	r3, [r4, #0]
 80087e0:	4621      	mov	r1, r4
 80087e2:	f002 fea6 	bl	800b532 <__ssrefill_r>
 80087e6:	2800      	cmp	r0, #0
 80087e8:	d0f0      	beq.n	80087cc <__ssvfscanf_r+0x54c>
 80087ea:	f1b8 0f00 	cmp.w	r8, #0
 80087ee:	f43f ae0f 	beq.w	8008410 <__ssvfscanf_r+0x190>
 80087f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80087f4:	4443      	add	r3, r8
 80087f6:	e602      	b.n	80083fe <__ssvfscanf_r+0x17e>
 80087f8:	1b5b      	subs	r3, r3, r5
 80087fa:	44a8      	add	r8, r5
 80087fc:	4415      	add	r5, r2
 80087fe:	6063      	str	r3, [r4, #4]
 8008800:	6025      	str	r5, [r4, #0]
 8008802:	e7f6      	b.n	80087f2 <__ssvfscanf_r+0x572>
 8008804:	0800b151 	.word	0x0800b151
 8008808:	46b0      	mov	r8, r6
 800880a:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 800880e:	f858 6b04 	ldr.w	r6, [r8], #4
 8008812:	d02f      	beq.n	8008874 <__ssvfscanf_r+0x5f4>
 8008814:	2e00      	cmp	r6, #0
 8008816:	f43f ae2f 	beq.w	8008478 <__ssvfscanf_r+0x1f8>
 800881a:	4628      	mov	r0, r5
 800881c:	f001 f904 	bl	8009a28 <malloc>
 8008820:	4682      	mov	sl, r0
 8008822:	2800      	cmp	r0, #0
 8008824:	f43f adf9 	beq.w	800841a <__ssvfscanf_r+0x19a>
 8008828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800882a:	6030      	str	r0, [r6, #0]
 800882c:	f8b3 b006 	ldrh.w	fp, [r3, #6]
 8008830:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8008834:	45cb      	cmp	fp, r9
 8008836:	d313      	bcc.n	8008860 <__ssvfscanf_r+0x5e0>
 8008838:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800883c:	4599      	cmp	r9, r3
 800883e:	f63f aeea 	bhi.w	8008616 <__ssvfscanf_r+0x396>
 8008842:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008844:	f109 0908 	add.w	r9, r9, #8
 8008848:	6818      	ldr	r0, [r3, #0]
 800884a:	ea4f 0189 	mov.w	r1, r9, lsl #2
 800884e:	f001 fbaf 	bl	8009fb0 <realloc>
 8008852:	2800      	cmp	r0, #0
 8008854:	f43f aedf 	beq.w	8008616 <__ssvfscanf_r+0x396>
 8008858:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800885a:	6018      	str	r0, [r3, #0]
 800885c:	f8a3 9004 	strh.w	r9, [r3, #4]
 8008860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008862:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f10b 0201 	add.w	r2, fp, #1
 800886a:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800886e:	46b1      	mov	r9, r6
 8008870:	80ca      	strh	r2, [r1, #6]
 8008872:	4656      	mov	r6, sl
 8008874:	4631      	mov	r1, r6
 8008876:	ee18 0a10 	vmov	r0, s16
 800887a:	9400      	str	r4, [sp, #0]
 800887c:	462b      	mov	r3, r5
 800887e:	2201      	movs	r2, #1
 8008880:	f002 fe74 	bl	800b56c <_sfread_r>
 8008884:	4606      	mov	r6, r0
 8008886:	2800      	cmp	r0, #0
 8008888:	f43f adc2 	beq.w	8008410 <__ssvfscanf_r+0x190>
 800888c:	f1b9 0f00 	cmp.w	r9, #0
 8008890:	d009      	beq.n	80088a6 <__ssvfscanf_r+0x626>
 8008892:	4285      	cmp	r5, r0
 8008894:	d907      	bls.n	80088a6 <__ssvfscanf_r+0x626>
 8008896:	4601      	mov	r1, r0
 8008898:	f8d9 0000 	ldr.w	r0, [r9]
 800889c:	f001 fb88 	bl	8009fb0 <realloc>
 80088a0:	b108      	cbz	r0, 80088a6 <__ssvfscanf_r+0x626>
 80088a2:	f8c9 0000 	str.w	r0, [r9]
 80088a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088a8:	4433      	add	r3, r6
 80088aa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ae:	3301      	adds	r3, #1
 80088b0:	627b      	str	r3, [r7, #36]	; 0x24
 80088b2:	4646      	mov	r6, r8
 80088b4:	e502      	b.n	80082bc <__ssvfscanf_r+0x3c>
 80088b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	bf08      	it	eq
 80088bc:	f04f 33ff 	moveq.w	r3, #4294967295
 80088c0:	f019 0501 	ands.w	r5, r9, #1
 80088c4:	633b      	str	r3, [r7, #48]	; 0x30
 80088c6:	f009 0b10 	and.w	fp, r9, #16
 80088ca:	f000 8105 	beq.w	8008ad8 <__ssvfscanf_r+0x858>
 80088ce:	f1bb 0f00 	cmp.w	fp, #0
 80088d2:	f040 80a5 	bne.w	8008a20 <__ssvfscanf_r+0x7a0>
 80088d6:	4633      	mov	r3, r6
 80088d8:	f019 0f80 	tst.w	r9, #128	; 0x80
 80088dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80088e0:	613b      	str	r3, [r7, #16]
 80088e2:	f000 80a6 	beq.w	8008a32 <__ssvfscanf_r+0x7b2>
 80088e6:	2d00      	cmp	r5, #0
 80088e8:	f43f ae90 	beq.w	800860c <__ssvfscanf_r+0x38c>
 80088ec:	2080      	movs	r0, #128	; 0x80
 80088ee:	f001 f89b 	bl	8009a28 <malloc>
 80088f2:	4680      	mov	r8, r0
 80088f4:	2800      	cmp	r0, #0
 80088f6:	f43f ae86 	beq.w	8008606 <__ssvfscanf_r+0x386>
 80088fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80088fc:	6028      	str	r0, [r5, #0]
 80088fe:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008902:	889e      	ldrh	r6, [r3, #4]
 8008904:	45b1      	cmp	r9, r6
 8008906:	d310      	bcc.n	800892a <__ssvfscanf_r+0x6aa>
 8008908:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 800890c:	429e      	cmp	r6, r3
 800890e:	f63f ae7a 	bhi.w	8008606 <__ssvfscanf_r+0x386>
 8008912:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008914:	3608      	adds	r6, #8
 8008916:	6818      	ldr	r0, [r3, #0]
 8008918:	00b1      	lsls	r1, r6, #2
 800891a:	f001 fb49 	bl	8009fb0 <realloc>
 800891e:	2800      	cmp	r0, #0
 8008920:	f43f ae71 	beq.w	8008606 <__ssvfscanf_r+0x386>
 8008924:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008926:	6018      	str	r0, [r3, #0]
 8008928:	809e      	strh	r6, [r3, #4]
 800892a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800892c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	62bd      	str	r5, [r7, #40]	; 0x28
 8008932:	f109 0201 	add.w	r2, r9, #1
 8008936:	f843 5029 	str.w	r5, [r3, r9, lsl #2]
 800893a:	80ca      	strh	r2, [r1, #6]
 800893c:	4645      	mov	r5, r8
 800893e:	f04f 0a20 	mov.w	sl, #32
 8008942:	2600      	movs	r6, #0
 8008944:	f001 f850 	bl	80099e8 <__locale_mb_cur_max>
 8008948:	42b0      	cmp	r0, r6
 800894a:	f43f ad61 	beq.w	8008410 <__ssvfscanf_r+0x190>
 800894e:	6823      	ldr	r3, [r4, #0]
 8008950:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8008954:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008958:	558a      	strb	r2, [r1, r6]
 800895a:	6862      	ldr	r2, [r4, #4]
 800895c:	3a01      	subs	r2, #1
 800895e:	e9c4 3200 	strd	r3, r2, [r4]
 8008962:	6a3b      	ldr	r3, [r7, #32]
 8008964:	2b03      	cmp	r3, #3
 8008966:	f106 0901 	add.w	r9, r6, #1
 800896a:	d102      	bne.n	8008972 <__ssvfscanf_r+0x6f2>
 800896c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896e:	2b04      	cmp	r3, #4
 8008970:	d005      	beq.n	800897e <__ssvfscanf_r+0x6fe>
 8008972:	2208      	movs	r2, #8
 8008974:	2100      	movs	r1, #0
 8008976:	f107 0040 	add.w	r0, r7, #64	; 0x40
 800897a:	f7ff fbb9 	bl	80080f0 <memset>
 800897e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008982:	9300      	str	r3, [sp, #0]
 8008984:	ee18 0a10 	vmov	r0, s16
 8008988:	464b      	mov	r3, r9
 800898a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 800898e:	4629      	mov	r1, r5
 8008990:	f001 fa9c 	bl	8009ecc <_mbrtowc_r>
 8008994:	4603      	mov	r3, r0
 8008996:	6238      	str	r0, [r7, #32]
 8008998:	1c58      	adds	r0, r3, #1
 800899a:	f43f ad39 	beq.w	8008410 <__ssvfscanf_r+0x190>
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d14c      	bne.n	8008a3c <__ssvfscanf_r+0x7bc>
 80089a2:	602b      	str	r3, [r5, #0]
 80089a4:	682e      	ldr	r6, [r5, #0]
 80089a6:	1c71      	adds	r1, r6, #1
 80089a8:	d059      	beq.n	8008a5e <__ssvfscanf_r+0x7de>
 80089aa:	2208      	movs	r2, #8
 80089ac:	2100      	movs	r1, #0
 80089ae:	f107 0048 	add.w	r0, r7, #72	; 0x48
 80089b2:	f7ff fb9d 	bl	80080f0 <memset>
 80089b6:	4b9c      	ldr	r3, [pc, #624]	; (8008c28 <__ssvfscanf_r+0x9a8>)
 80089b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80089bc:	60fb      	str	r3, [r7, #12]
 80089be:	4632      	mov	r2, r6
 80089c0:	ee18 0a10 	vmov	r0, s16
 80089c4:	68fe      	ldr	r6, [r7, #12]
 80089c6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80089ca:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80089ce:	47b0      	blx	r6
 80089d0:	2801      	cmp	r0, #1
 80089d2:	d146      	bne.n	8008a62 <__ssvfscanf_r+0x7e2>
 80089d4:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80089d8:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80089dc:	5c9b      	ldrb	r3, [r3, r2]
 80089de:	2b00      	cmp	r3, #0
 80089e0:	d14b      	bne.n	8008a7a <__ssvfscanf_r+0x7fa>
 80089e2:	f507 76a8 	add.w	r6, r7, #336	; 0x150
 80089e6:	f1b9 0f00 	cmp.w	r9, #0
 80089ea:	d13c      	bne.n	8008a66 <__ssvfscanf_r+0x7e6>
 80089ec:	f1bb 0f00 	cmp.w	fp, #0
 80089f0:	d114      	bne.n	8008a1c <__ssvfscanf_r+0x79c>
 80089f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80089f4:	f8c5 b000 	str.w	fp, [r5]
 80089f8:	b16b      	cbz	r3, 8008a16 <__ssvfscanf_r+0x796>
 80089fa:	eba5 0108 	sub.w	r1, r5, r8
 80089fe:	108b      	asrs	r3, r1, #2
 8008a00:	3301      	adds	r3, #1
 8008a02:	459a      	cmp	sl, r3
 8008a04:	d907      	bls.n	8008a16 <__ssvfscanf_r+0x796>
 8008a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a08:	3104      	adds	r1, #4
 8008a0a:	6818      	ldr	r0, [r3, #0]
 8008a0c:	f001 fad0 	bl	8009fb0 <realloc>
 8008a10:	b108      	cbz	r0, 8008a16 <__ssvfscanf_r+0x796>
 8008a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a14:	6018      	str	r0, [r3, #0]
 8008a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a18:	3301      	adds	r3, #1
 8008a1a:	627b      	str	r3, [r7, #36]	; 0x24
 8008a1c:	693e      	ldr	r6, [r7, #16]
 8008a1e:	e44d      	b.n	80082bc <__ssvfscanf_r+0x3c>
 8008a20:	f04f 0a00 	mov.w	sl, #0
 8008a24:	613e      	str	r6, [r7, #16]
 8008a26:	46d0      	mov	r8, sl
 8008a28:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 8008a2c:	f107 053c 	add.w	r5, r7, #60	; 0x3c
 8008a30:	e787      	b.n	8008942 <__ssvfscanf_r+0x6c2>
 8008a32:	46da      	mov	sl, fp
 8008a34:	46d8      	mov	r8, fp
 8008a36:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 8008a3a:	e782      	b.n	8008942 <__ssvfscanf_r+0x6c2>
 8008a3c:	6a3b      	ldr	r3, [r7, #32]
 8008a3e:	3302      	adds	r3, #2
 8008a40:	d1b0      	bne.n	80089a4 <__ssvfscanf_r+0x724>
 8008a42:	6863      	ldr	r3, [r4, #4]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	dc42      	bgt.n	8008ace <__ssvfscanf_r+0x84e>
 8008a48:	ee18 0a10 	vmov	r0, s16
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	f002 fd70 	bl	800b532 <__ssrefill_r>
 8008a52:	2800      	cmp	r0, #0
 8008a54:	d03b      	beq.n	8008ace <__ssvfscanf_r+0x84e>
 8008a56:	f1b9 0f00 	cmp.w	r9, #0
 8008a5a:	d0c7      	beq.n	80089ec <__ssvfscanf_r+0x76c>
 8008a5c:	e4d8      	b.n	8008410 <__ssvfscanf_r+0x190>
 8008a5e:	4632      	mov	r2, r6
 8008a60:	e7ba      	b.n	80089d8 <__ssvfscanf_r+0x758>
 8008a62:	2200      	movs	r2, #0
 8008a64:	e7b8      	b.n	80089d8 <__ssvfscanf_r+0x758>
 8008a66:	f109 39ff 	add.w	r9, r9, #4294967295
 8008a6a:	ee18 0a10 	vmov	r0, s16
 8008a6e:	f816 1009 	ldrb.w	r1, [r6, r9]
 8008a72:	4622      	mov	r2, r4
 8008a74:	f002 fd20 	bl	800b4b8 <_sungetc_r>
 8008a78:	e7b5      	b.n	80089e6 <__ssvfscanf_r+0x766>
 8008a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a7c:	444b      	add	r3, r9
 8008a7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008a80:	6a3b      	ldr	r3, [r7, #32]
 8008a82:	2b03      	cmp	r3, #3
 8008a84:	d102      	bne.n	8008a8c <__ssvfscanf_r+0x80c>
 8008a86:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a88:	2b04      	cmp	r3, #4
 8008a8a:	d002      	beq.n	8008a92 <__ssvfscanf_r+0x812>
 8008a8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008a8e:	3b01      	subs	r3, #1
 8008a90:	633b      	str	r3, [r7, #48]	; 0x30
 8008a92:	f1bb 0f00 	cmp.w	fp, #0
 8008a96:	d117      	bne.n	8008ac8 <__ssvfscanf_r+0x848>
 8008a98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a9a:	3504      	adds	r5, #4
 8008a9c:	b1a3      	cbz	r3, 8008ac8 <__ssvfscanf_r+0x848>
 8008a9e:	eba5 0608 	sub.w	r6, r5, r8
 8008aa2:	ebba 0fa6 	cmp.w	sl, r6, asr #2
 8008aa6:	d80d      	bhi.n	8008ac4 <__ssvfscanf_r+0x844>
 8008aa8:	4640      	mov	r0, r8
 8008aaa:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 8008aae:	f001 fa7f 	bl	8009fb0 <realloc>
 8008ab2:	4680      	mov	r8, r0
 8008ab4:	2800      	cmp	r0, #0
 8008ab6:	f43f ada6 	beq.w	8008606 <__ssvfscanf_r+0x386>
 8008aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008abc:	1985      	adds	r5, r0, r6
 8008abe:	6018      	str	r0, [r3, #0]
 8008ac0:	ea4f 0a4a 	mov.w	sl, sl, lsl #1
 8008ac4:	46d9      	mov	r9, fp
 8008ac6:	e7bc      	b.n	8008a42 <__ssvfscanf_r+0x7c2>
 8008ac8:	f04f 0900 	mov.w	r9, #0
 8008acc:	e7b9      	b.n	8008a42 <__ssvfscanf_r+0x7c2>
 8008ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d08b      	beq.n	80089ec <__ssvfscanf_r+0x76c>
 8008ad4:	464e      	mov	r6, r9
 8008ad6:	e735      	b.n	8008944 <__ssvfscanf_r+0x6c4>
 8008ad8:	f1bb 0f00 	cmp.w	fp, #0
 8008adc:	d01d      	beq.n	8008b1a <__ssvfscanf_r+0x89a>
 8008ade:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008ae2:	6823      	ldr	r3, [r4, #0]
 8008ae4:	781a      	ldrb	r2, [r3, #0]
 8008ae6:	f818 2002 	ldrb.w	r2, [r8, r2]
 8008aea:	b90a      	cbnz	r2, 8008af0 <__ssvfscanf_r+0x870>
 8008aec:	b995      	cbnz	r5, 8008b14 <__ssvfscanf_r+0x894>
 8008aee:	e4c3      	b.n	8008478 <__ssvfscanf_r+0x1f8>
 8008af0:	3301      	adds	r3, #1
 8008af2:	6862      	ldr	r2, [r4, #4]
 8008af4:	6023      	str	r3, [r4, #0]
 8008af6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af8:	3501      	adds	r5, #1
 8008afa:	3a01      	subs	r2, #1
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	6062      	str	r2, [r4, #4]
 8008b00:	d008      	beq.n	8008b14 <__ssvfscanf_r+0x894>
 8008b02:	2a00      	cmp	r2, #0
 8008b04:	dced      	bgt.n	8008ae2 <__ssvfscanf_r+0x862>
 8008b06:	ee18 0a10 	vmov	r0, s16
 8008b0a:	4621      	mov	r1, r4
 8008b0c:	f002 fd11 	bl	800b532 <__ssrefill_r>
 8008b10:	2800      	cmp	r0, #0
 8008b12:	d0e6      	beq.n	8008ae2 <__ssvfscanf_r+0x862>
 8008b14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b16:	442b      	add	r3, r5
 8008b18:	e471      	b.n	80083fe <__ssvfscanf_r+0x17e>
 8008b1a:	46b3      	mov	fp, r6
 8008b1c:	f019 0980 	ands.w	r9, r9, #128	; 0x80
 8008b20:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008b24:	d07e      	beq.n	8008c24 <__ssvfscanf_r+0x9a4>
 8008b26:	2e00      	cmp	r6, #0
 8008b28:	f43f aca6 	beq.w	8008478 <__ssvfscanf_r+0x1f8>
 8008b2c:	2020      	movs	r0, #32
 8008b2e:	f000 ff7b 	bl	8009a28 <malloc>
 8008b32:	4680      	mov	r8, r0
 8008b34:	2800      	cmp	r0, #0
 8008b36:	f43f ac70 	beq.w	800841a <__ssvfscanf_r+0x19a>
 8008b3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b3c:	6030      	str	r0, [r6, #0]
 8008b3e:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008b42:	889d      	ldrh	r5, [r3, #4]
 8008b44:	45a9      	cmp	r9, r5
 8008b46:	d310      	bcc.n	8008b6a <__ssvfscanf_r+0x8ea>
 8008b48:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008b4c:	429d      	cmp	r5, r3
 8008b4e:	f63f ad62 	bhi.w	8008616 <__ssvfscanf_r+0x396>
 8008b52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b54:	3508      	adds	r5, #8
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	00a9      	lsls	r1, r5, #2
 8008b5a:	f001 fa29 	bl	8009fb0 <realloc>
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f43f ad59 	beq.w	8008616 <__ssvfscanf_r+0x396>
 8008b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b66:	6018      	str	r0, [r3, #0]
 8008b68:	809d      	strh	r5, [r3, #4]
 8008b6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008b6c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	f109 0201 	add.w	r2, r9, #1
 8008b74:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008b78:	46b2      	mov	sl, r6
 8008b7a:	80ca      	strh	r2, [r1, #6]
 8008b7c:	4646      	mov	r6, r8
 8008b7e:	f04f 0920 	mov.w	r9, #32
 8008b82:	4635      	mov	r5, r6
 8008b84:	f107 0850 	add.w	r8, r7, #80	; 0x50
 8008b88:	6823      	ldr	r3, [r4, #0]
 8008b8a:	781a      	ldrb	r2, [r3, #0]
 8008b8c:	f818 2002 	ldrb.w	r2, [r8, r2]
 8008b90:	b36a      	cbz	r2, 8008bee <__ssvfscanf_r+0x96e>
 8008b92:	6862      	ldr	r2, [r4, #4]
 8008b94:	3a01      	subs	r2, #1
 8008b96:	6062      	str	r2, [r4, #4]
 8008b98:	1c5a      	adds	r2, r3, #1
 8008b9a:	6022      	str	r2, [r4, #0]
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	f806 3b01 	strb.w	r3, [r6], #1
 8008ba2:	f1ba 0f00 	cmp.w	sl, #0
 8008ba6:	d011      	beq.n	8008bcc <__ssvfscanf_r+0x94c>
 8008ba8:	1b73      	subs	r3, r6, r5
 8008baa:	454b      	cmp	r3, r9
 8008bac:	d30e      	bcc.n	8008bcc <__ssvfscanf_r+0x94c>
 8008bae:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	4649      	mov	r1, r9
 8008bb6:	62bb      	str	r3, [r7, #40]	; 0x28
 8008bb8:	f001 f9fa 	bl	8009fb0 <realloc>
 8008bbc:	4605      	mov	r5, r0
 8008bbe:	2800      	cmp	r0, #0
 8008bc0:	f43f ac2b 	beq.w	800841a <__ssvfscanf_r+0x19a>
 8008bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bc6:	f8ca 0000 	str.w	r0, [sl]
 8008bca:	18c6      	adds	r6, r0, r3
 8008bcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bce:	3b01      	subs	r3, #1
 8008bd0:	633b      	str	r3, [r7, #48]	; 0x30
 8008bd2:	d00c      	beq.n	8008bee <__ssvfscanf_r+0x96e>
 8008bd4:	6863      	ldr	r3, [r4, #4]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	dcd6      	bgt.n	8008b88 <__ssvfscanf_r+0x908>
 8008bda:	ee18 0a10 	vmov	r0, s16
 8008bde:	4621      	mov	r1, r4
 8008be0:	f002 fca7 	bl	800b532 <__ssrefill_r>
 8008be4:	2800      	cmp	r0, #0
 8008be6:	d0cf      	beq.n	8008b88 <__ssvfscanf_r+0x908>
 8008be8:	42ae      	cmp	r6, r5
 8008bea:	f43f ac11 	beq.w	8008410 <__ssvfscanf_r+0x190>
 8008bee:	1b75      	subs	r5, r6, r5
 8008bf0:	f43f ac42 	beq.w	8008478 <__ssvfscanf_r+0x1f8>
 8008bf4:	2300      	movs	r3, #0
 8008bf6:	7033      	strb	r3, [r6, #0]
 8008bf8:	f1ba 0f00 	cmp.w	sl, #0
 8008bfc:	d009      	beq.n	8008c12 <__ssvfscanf_r+0x992>
 8008bfe:	1c69      	adds	r1, r5, #1
 8008c00:	4589      	cmp	r9, r1
 8008c02:	d906      	bls.n	8008c12 <__ssvfscanf_r+0x992>
 8008c04:	f8da 0000 	ldr.w	r0, [sl]
 8008c08:	f001 f9d2 	bl	8009fb0 <realloc>
 8008c0c:	b108      	cbz	r0, 8008c12 <__ssvfscanf_r+0x992>
 8008c0e:	f8ca 0000 	str.w	r0, [sl]
 8008c12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c14:	3301      	adds	r3, #1
 8008c16:	627b      	str	r3, [r7, #36]	; 0x24
 8008c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1a:	442b      	add	r3, r5
 8008c1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c1e:	465e      	mov	r6, fp
 8008c20:	f7ff bb4c 	b.w	80082bc <__ssvfscanf_r+0x3c>
 8008c24:	46ca      	mov	sl, r9
 8008c26:	e7ac      	b.n	8008b82 <__ssvfscanf_r+0x902>
 8008c28:	2000062c 	.word	0x2000062c
 8008c2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	bf08      	it	eq
 8008c32:	f04f 33ff 	moveq.w	r3, #4294967295
 8008c36:	f019 0501 	ands.w	r5, r9, #1
 8008c3a:	633b      	str	r3, [r7, #48]	; 0x30
 8008c3c:	f009 0810 	and.w	r8, r9, #16
 8008c40:	f000 80fb 	beq.w	8008e3a <__ssvfscanf_r+0xbba>
 8008c44:	f1b8 0f00 	cmp.w	r8, #0
 8008c48:	f040 80a0 	bne.w	8008d8c <__ssvfscanf_r+0xb0c>
 8008c4c:	4633      	mov	r3, r6
 8008c4e:	f019 0f80 	tst.w	r9, #128	; 0x80
 8008c52:	f853 6b04 	ldr.w	r6, [r3], #4
 8008c56:	62bb      	str	r3, [r7, #40]	; 0x28
 8008c58:	f000 80a0 	beq.w	8008d9c <__ssvfscanf_r+0xb1c>
 8008c5c:	2e00      	cmp	r6, #0
 8008c5e:	f43f acd5 	beq.w	800860c <__ssvfscanf_r+0x38c>
 8008c62:	2080      	movs	r0, #128	; 0x80
 8008c64:	f000 fee0 	bl	8009a28 <malloc>
 8008c68:	4605      	mov	r5, r0
 8008c6a:	2800      	cmp	r0, #0
 8008c6c:	f43f accb 	beq.w	8008606 <__ssvfscanf_r+0x386>
 8008c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c72:	6030      	str	r0, [r6, #0]
 8008c74:	f8b3 a006 	ldrh.w	sl, [r3, #6]
 8008c78:	f8b3 9004 	ldrh.w	r9, [r3, #4]
 8008c7c:	45ca      	cmp	sl, r9
 8008c7e:	d313      	bcc.n	8008ca8 <__ssvfscanf_r+0xa28>
 8008c80:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008c84:	4599      	cmp	r9, r3
 8008c86:	f63f acbe 	bhi.w	8008606 <__ssvfscanf_r+0x386>
 8008c8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c8c:	f109 0908 	add.w	r9, r9, #8
 8008c90:	6818      	ldr	r0, [r3, #0]
 8008c92:	ea4f 0189 	mov.w	r1, r9, lsl #2
 8008c96:	f001 f98b 	bl	8009fb0 <realloc>
 8008c9a:	2800      	cmp	r0, #0
 8008c9c:	f43f acb3 	beq.w	8008606 <__ssvfscanf_r+0x386>
 8008ca0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ca2:	6018      	str	r0, [r3, #0]
 8008ca4:	f8a3 9004 	strh.w	r9, [r3, #4]
 8008ca8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008caa:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f10a 0201 	add.w	r2, sl, #1
 8008cb2:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 8008cb6:	80ca      	strh	r2, [r1, #6]
 8008cb8:	46b2      	mov	sl, r6
 8008cba:	f04f 0920 	mov.w	r9, #32
 8008cbe:	462e      	mov	r6, r5
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f107 0b48 	add.w	fp, r7, #72	; 0x48
 8008cc6:	6823      	ldr	r3, [r4, #0]
 8008cc8:	49aa      	ldr	r1, [pc, #680]	; (8008f74 <__ssvfscanf_r+0xcf4>)
 8008cca:	781b      	ldrb	r3, [r3, #0]
 8008ccc:	5c5b      	ldrb	r3, [r3, r1]
 8008cce:	0718      	lsls	r0, r3, #28
 8008cd0:	d441      	bmi.n	8008d56 <__ssvfscanf_r+0xad6>
 8008cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008cd4:	2b00      	cmp	r3, #0
 8008cd6:	d03e      	beq.n	8008d56 <__ssvfscanf_r+0xad6>
 8008cd8:	613a      	str	r2, [r7, #16]
 8008cda:	f000 fe85 	bl	80099e8 <__locale_mb_cur_max>
 8008cde:	693a      	ldr	r2, [r7, #16]
 8008ce0:	4290      	cmp	r0, r2
 8008ce2:	f43f ab95 	beq.w	8008410 <__ssvfscanf_r+0x190>
 8008ce6:	6821      	ldr	r1, [r4, #0]
 8008ce8:	f507 7ca8 	add.w	ip, r7, #336	; 0x150
 8008cec:	f811 0b01 	ldrb.w	r0, [r1], #1
 8008cf0:	f80c 0002 	strb.w	r0, [ip, r2]
 8008cf4:	1c53      	adds	r3, r2, #1
 8008cf6:	6862      	ldr	r2, [r4, #4]
 8008cf8:	3a01      	subs	r2, #1
 8008cfa:	e9c4 1200 	strd	r1, r2, [r4]
 8008cfe:	6a3a      	ldr	r2, [r7, #32]
 8008d00:	2a03      	cmp	r2, #3
 8008d02:	d103      	bne.n	8008d0c <__ssvfscanf_r+0xa8c>
 8008d04:	f8db 2000 	ldr.w	r2, [fp]
 8008d08:	2a04      	cmp	r2, #4
 8008d0a:	d006      	beq.n	8008d1a <__ssvfscanf_r+0xa9a>
 8008d0c:	2208      	movs	r2, #8
 8008d0e:	2100      	movs	r1, #0
 8008d10:	4658      	mov	r0, fp
 8008d12:	623b      	str	r3, [r7, #32]
 8008d14:	f7ff f9ec 	bl	80080f0 <memset>
 8008d18:	6a3b      	ldr	r3, [r7, #32]
 8008d1a:	f8cd b000 	str.w	fp, [sp]
 8008d1e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8008d22:	ee18 0a10 	vmov	r0, s16
 8008d26:	4631      	mov	r1, r6
 8008d28:	613b      	str	r3, [r7, #16]
 8008d2a:	f001 f8cf 	bl	8009ecc <_mbrtowc_r>
 8008d2e:	1c42      	adds	r2, r0, #1
 8008d30:	6238      	str	r0, [r7, #32]
 8008d32:	f43f ab6d 	beq.w	8008410 <__ssvfscanf_r+0x190>
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	2800      	cmp	r0, #0
 8008d3a:	d133      	bne.n	8008da4 <__ssvfscanf_r+0xb24>
 8008d3c:	6030      	str	r0, [r6, #0]
 8008d3e:	6830      	ldr	r0, [r6, #0]
 8008d40:	613b      	str	r3, [r7, #16]
 8008d42:	f000 fe44 	bl	80099ce <iswspace>
 8008d46:	693b      	ldr	r3, [r7, #16]
 8008d48:	4602      	mov	r2, r0
 8008d4a:	2800      	cmp	r0, #0
 8008d4c:	d049      	beq.n	8008de2 <__ssvfscanf_r+0xb62>
 8008d4e:	f507 7ba8 	add.w	fp, r7, #336	; 0x150
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d13a      	bne.n	8008dcc <__ssvfscanf_r+0xb4c>
 8008d56:	f1b8 0f00 	cmp.w	r8, #0
 8008d5a:	d114      	bne.n	8008d86 <__ssvfscanf_r+0xb06>
 8008d5c:	f8c6 8000 	str.w	r8, [r6]
 8008d60:	f1ba 0f00 	cmp.w	sl, #0
 8008d64:	d00c      	beq.n	8008d80 <__ssvfscanf_r+0xb00>
 8008d66:	1b71      	subs	r1, r6, r5
 8008d68:	108b      	asrs	r3, r1, #2
 8008d6a:	3301      	adds	r3, #1
 8008d6c:	4599      	cmp	r9, r3
 8008d6e:	d907      	bls.n	8008d80 <__ssvfscanf_r+0xb00>
 8008d70:	f8da 0000 	ldr.w	r0, [sl]
 8008d74:	3104      	adds	r1, #4
 8008d76:	f001 f91b 	bl	8009fb0 <realloc>
 8008d7a:	b108      	cbz	r0, 8008d80 <__ssvfscanf_r+0xb00>
 8008d7c:	f8ca 0000 	str.w	r0, [sl]
 8008d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d82:	3301      	adds	r3, #1
 8008d84:	627b      	str	r3, [r7, #36]	; 0x24
 8008d86:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8008d88:	f7ff ba98 	b.w	80082bc <__ssvfscanf_r+0x3c>
 8008d8c:	f04f 0900 	mov.w	r9, #0
 8008d90:	62be      	str	r6, [r7, #40]	; 0x28
 8008d92:	464d      	mov	r5, r9
 8008d94:	46ca      	mov	sl, r9
 8008d96:	f107 063c 	add.w	r6, r7, #60	; 0x3c
 8008d9a:	e791      	b.n	8008cc0 <__ssvfscanf_r+0xa40>
 8008d9c:	46c1      	mov	r9, r8
 8008d9e:	4645      	mov	r5, r8
 8008da0:	46c2      	mov	sl, r8
 8008da2:	e78d      	b.n	8008cc0 <__ssvfscanf_r+0xa40>
 8008da4:	6a3a      	ldr	r2, [r7, #32]
 8008da6:	3202      	adds	r2, #2
 8008da8:	d1c9      	bne.n	8008d3e <__ssvfscanf_r+0xabe>
 8008daa:	461a      	mov	r2, r3
 8008dac:	6863      	ldr	r3, [r4, #4]
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	dc89      	bgt.n	8008cc6 <__ssvfscanf_r+0xa46>
 8008db2:	ee18 0a10 	vmov	r0, s16
 8008db6:	4621      	mov	r1, r4
 8008db8:	613a      	str	r2, [r7, #16]
 8008dba:	f002 fbba 	bl	800b532 <__ssrefill_r>
 8008dbe:	693a      	ldr	r2, [r7, #16]
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	d080      	beq.n	8008cc6 <__ssvfscanf_r+0xa46>
 8008dc4:	2a00      	cmp	r2, #0
 8008dc6:	f47f ab23 	bne.w	8008410 <__ssvfscanf_r+0x190>
 8008dca:	e7c4      	b.n	8008d56 <__ssvfscanf_r+0xad6>
 8008dcc:	3b01      	subs	r3, #1
 8008dce:	ee18 0a10 	vmov	r0, s16
 8008dd2:	f81b 1003 	ldrb.w	r1, [fp, r3]
 8008dd6:	633b      	str	r3, [r7, #48]	; 0x30
 8008dd8:	4622      	mov	r2, r4
 8008dda:	f002 fb6d 	bl	800b4b8 <_sungetc_r>
 8008dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008de0:	e7b7      	b.n	8008d52 <__ssvfscanf_r+0xad2>
 8008de2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008de4:	4419      	add	r1, r3
 8008de6:	6a3b      	ldr	r3, [r7, #32]
 8008de8:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008dea:	2b03      	cmp	r3, #3
 8008dec:	d103      	bne.n	8008df6 <__ssvfscanf_r+0xb76>
 8008dee:	f8db 3000 	ldr.w	r3, [fp]
 8008df2:	2b04      	cmp	r3, #4
 8008df4:	d002      	beq.n	8008dfc <__ssvfscanf_r+0xb7c>
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	3b01      	subs	r3, #1
 8008dfa:	633b      	str	r3, [r7, #48]	; 0x30
 8008dfc:	f1b8 0f00 	cmp.w	r8, #0
 8008e00:	d1d4      	bne.n	8008dac <__ssvfscanf_r+0xb2c>
 8008e02:	3604      	adds	r6, #4
 8008e04:	f1ba 0f00 	cmp.w	sl, #0
 8008e08:	d015      	beq.n	8008e36 <__ssvfscanf_r+0xbb6>
 8008e0a:	1b73      	subs	r3, r6, r5
 8008e0c:	ebb9 0fa3 	cmp.w	r9, r3, asr #2
 8008e10:	d80f      	bhi.n	8008e32 <__ssvfscanf_r+0xbb2>
 8008e12:	4628      	mov	r0, r5
 8008e14:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8008e18:	613b      	str	r3, [r7, #16]
 8008e1a:	f001 f8c9 	bl	8009fb0 <realloc>
 8008e1e:	4605      	mov	r5, r0
 8008e20:	2800      	cmp	r0, #0
 8008e22:	f43f abf0 	beq.w	8008606 <__ssvfscanf_r+0x386>
 8008e26:	693b      	ldr	r3, [r7, #16]
 8008e28:	f8ca 0000 	str.w	r0, [sl]
 8008e2c:	18c6      	adds	r6, r0, r3
 8008e2e:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8008e32:	4642      	mov	r2, r8
 8008e34:	e7ba      	b.n	8008dac <__ssvfscanf_r+0xb2c>
 8008e36:	4652      	mov	r2, sl
 8008e38:	e7b8      	b.n	8008dac <__ssvfscanf_r+0xb2c>
 8008e3a:	f1b8 0f00 	cmp.w	r8, #0
 8008e3e:	d01a      	beq.n	8008e76 <__ssvfscanf_r+0xbf6>
 8008e40:	6823      	ldr	r3, [r4, #0]
 8008e42:	494c      	ldr	r1, [pc, #304]	; (8008f74 <__ssvfscanf_r+0xcf4>)
 8008e44:	781a      	ldrb	r2, [r3, #0]
 8008e46:	5c52      	ldrb	r2, [r2, r1]
 8008e48:	0711      	lsls	r1, r2, #28
 8008e4a:	f53f ae63 	bmi.w	8008b14 <__ssvfscanf_r+0x894>
 8008e4e:	3301      	adds	r3, #1
 8008e50:	6862      	ldr	r2, [r4, #4]
 8008e52:	6023      	str	r3, [r4, #0]
 8008e54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e56:	3501      	adds	r5, #1
 8008e58:	3a01      	subs	r2, #1
 8008e5a:	42ab      	cmp	r3, r5
 8008e5c:	6062      	str	r2, [r4, #4]
 8008e5e:	f43f ae59 	beq.w	8008b14 <__ssvfscanf_r+0x894>
 8008e62:	2a00      	cmp	r2, #0
 8008e64:	dcec      	bgt.n	8008e40 <__ssvfscanf_r+0xbc0>
 8008e66:	ee18 0a10 	vmov	r0, s16
 8008e6a:	4621      	mov	r1, r4
 8008e6c:	f002 fb61 	bl	800b532 <__ssrefill_r>
 8008e70:	2800      	cmp	r0, #0
 8008e72:	d0e5      	beq.n	8008e40 <__ssvfscanf_r+0xbc0>
 8008e74:	e64e      	b.n	8008b14 <__ssvfscanf_r+0x894>
 8008e76:	46b3      	mov	fp, r6
 8008e78:	f019 0580 	ands.w	r5, r9, #128	; 0x80
 8008e7c:	f85b 6b04 	ldr.w	r6, [fp], #4
 8008e80:	d075      	beq.n	8008f6e <__ssvfscanf_r+0xcee>
 8008e82:	2e00      	cmp	r6, #0
 8008e84:	f43f aaf8 	beq.w	8008478 <__ssvfscanf_r+0x1f8>
 8008e88:	2020      	movs	r0, #32
 8008e8a:	f000 fdcd 	bl	8009a28 <malloc>
 8008e8e:	4680      	mov	r8, r0
 8008e90:	2800      	cmp	r0, #0
 8008e92:	f43f aac2 	beq.w	800841a <__ssvfscanf_r+0x19a>
 8008e96:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e98:	6030      	str	r0, [r6, #0]
 8008e9a:	f8b3 9006 	ldrh.w	r9, [r3, #6]
 8008e9e:	889d      	ldrh	r5, [r3, #4]
 8008ea0:	45a9      	cmp	r9, r5
 8008ea2:	d310      	bcc.n	8008ec6 <__ssvfscanf_r+0xc46>
 8008ea4:	f64f 73f6 	movw	r3, #65526	; 0xfff6
 8008ea8:	429d      	cmp	r5, r3
 8008eaa:	f63f abb4 	bhi.w	8008616 <__ssvfscanf_r+0x396>
 8008eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008eb0:	3508      	adds	r5, #8
 8008eb2:	6818      	ldr	r0, [r3, #0]
 8008eb4:	00a9      	lsls	r1, r5, #2
 8008eb6:	f001 f87b 	bl	8009fb0 <realloc>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f43f abab 	beq.w	8008616 <__ssvfscanf_r+0x396>
 8008ec0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec2:	6018      	str	r0, [r3, #0]
 8008ec4:	809d      	strh	r5, [r3, #4]
 8008ec6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ec8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008eca:	681b      	ldr	r3, [r3, #0]
 8008ecc:	f109 0201 	add.w	r2, r9, #1
 8008ed0:	f843 6029 	str.w	r6, [r3, r9, lsl #2]
 8008ed4:	80ca      	strh	r2, [r1, #6]
 8008ed6:	46b1      	mov	r9, r6
 8008ed8:	2520      	movs	r5, #32
 8008eda:	4646      	mov	r6, r8
 8008edc:	46b0      	mov	r8, r6
 8008ede:	6823      	ldr	r3, [r4, #0]
 8008ee0:	4924      	ldr	r1, [pc, #144]	; (8008f74 <__ssvfscanf_r+0xcf4>)
 8008ee2:	781a      	ldrb	r2, [r3, #0]
 8008ee4:	5c52      	ldrb	r2, [r2, r1]
 8008ee6:	0712      	lsls	r2, r2, #28
 8008ee8:	d429      	bmi.n	8008f3e <__ssvfscanf_r+0xcbe>
 8008eea:	6862      	ldr	r2, [r4, #4]
 8008eec:	3a01      	subs	r2, #1
 8008eee:	6062      	str	r2, [r4, #4]
 8008ef0:	1c5a      	adds	r2, r3, #1
 8008ef2:	6022      	str	r2, [r4, #0]
 8008ef4:	781b      	ldrb	r3, [r3, #0]
 8008ef6:	f806 3b01 	strb.w	r3, [r6], #1
 8008efa:	f1b9 0f00 	cmp.w	r9, #0
 8008efe:	d010      	beq.n	8008f22 <__ssvfscanf_r+0xca2>
 8008f00:	eba6 0a08 	sub.w	sl, r6, r8
 8008f04:	45aa      	cmp	sl, r5
 8008f06:	d30c      	bcc.n	8008f22 <__ssvfscanf_r+0xca2>
 8008f08:	006d      	lsls	r5, r5, #1
 8008f0a:	4640      	mov	r0, r8
 8008f0c:	4629      	mov	r1, r5
 8008f0e:	f001 f84f 	bl	8009fb0 <realloc>
 8008f12:	4680      	mov	r8, r0
 8008f14:	2800      	cmp	r0, #0
 8008f16:	f43f aa80 	beq.w	800841a <__ssvfscanf_r+0x19a>
 8008f1a:	eb00 060a 	add.w	r6, r0, sl
 8008f1e:	f8c9 0000 	str.w	r0, [r9]
 8008f22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f24:	3b01      	subs	r3, #1
 8008f26:	633b      	str	r3, [r7, #48]	; 0x30
 8008f28:	d009      	beq.n	8008f3e <__ssvfscanf_r+0xcbe>
 8008f2a:	6863      	ldr	r3, [r4, #4]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	dcd6      	bgt.n	8008ede <__ssvfscanf_r+0xc5e>
 8008f30:	ee18 0a10 	vmov	r0, s16
 8008f34:	4621      	mov	r1, r4
 8008f36:	f002 fafc 	bl	800b532 <__ssrefill_r>
 8008f3a:	2800      	cmp	r0, #0
 8008f3c:	d0cf      	beq.n	8008ede <__ssvfscanf_r+0xc5e>
 8008f3e:	2300      	movs	r3, #0
 8008f40:	7033      	strb	r3, [r6, #0]
 8008f42:	eba6 0608 	sub.w	r6, r6, r8
 8008f46:	f1b9 0f00 	cmp.w	r9, #0
 8008f4a:	d009      	beq.n	8008f60 <__ssvfscanf_r+0xce0>
 8008f4c:	1c71      	adds	r1, r6, #1
 8008f4e:	428d      	cmp	r5, r1
 8008f50:	d906      	bls.n	8008f60 <__ssvfscanf_r+0xce0>
 8008f52:	f8d9 0000 	ldr.w	r0, [r9]
 8008f56:	f001 f82b 	bl	8009fb0 <realloc>
 8008f5a:	b108      	cbz	r0, 8008f60 <__ssvfscanf_r+0xce0>
 8008f5c:	f8c9 0000 	str.w	r0, [r9]
 8008f60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f62:	4433      	add	r3, r6
 8008f64:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f68:	3301      	adds	r3, #1
 8008f6a:	627b      	str	r3, [r7, #36]	; 0x24
 8008f6c:	e657      	b.n	8008c1e <__ssvfscanf_r+0x99e>
 8008f6e:	46a9      	mov	r9, r5
 8008f70:	e7b4      	b.n	8008edc <__ssvfscanf_r+0xc5c>
 8008f72:	bf00      	nop
 8008f74:	080106ed 	.word	0x080106ed
 8008f78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f7a:	3b01      	subs	r3, #1
 8008f7c:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8008f80:	bf81      	itttt	hi
 8008f82:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8008f84:	f46f 70ae 	mvnhi.w	r0, #348	; 0x15c
 8008f88:	eb03 0b00 	addhi.w	fp, r3, r0
 8008f8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008f90:	bf88      	it	hi
 8008f92:	633b      	strhi	r3, [r7, #48]	; 0x30
 8008f94:	f449 6358 	orr.w	r3, r9, #3456	; 0xd80
 8008f98:	f8df 9488 	ldr.w	r9, [pc, #1160]	; 8009424 <__ssvfscanf_r+0x11a4>
 8008f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8008f9e:	bf98      	it	ls
 8008fa0:	f04f 0b00 	movls.w	fp, #0
 8008fa4:	f04f 0a00 	mov.w	sl, #0
 8008fa8:	f507 78a8 	add.w	r8, r7, #336	; 0x150
 8008fac:	6822      	ldr	r2, [r4, #0]
 8008fae:	7813      	ldrb	r3, [r2, #0]
 8008fb0:	2b39      	cmp	r3, #57	; 0x39
 8008fb2:	d80f      	bhi.n	8008fd4 <__ssvfscanf_r+0xd54>
 8008fb4:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb6:	d91a      	bls.n	8008fee <__ssvfscanf_r+0xd6e>
 8008fb8:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008fbc:	290e      	cmp	r1, #14
 8008fbe:	d816      	bhi.n	8008fee <__ssvfscanf_r+0xd6e>
 8008fc0:	e8df f001 	tbb	[pc, r1]
 8008fc4:	157f157f 	.word	0x157f157f
 8008fc8:	70704215 	.word	0x70704215
 8008fcc:	70707070 	.word	0x70707070
 8008fd0:	7870      	.short	0x7870
 8008fd2:	78          	.byte	0x78
 8008fd3:	00          	.byte	0x00
 8008fd4:	2b66      	cmp	r3, #102	; 0x66
 8008fd6:	d835      	bhi.n	8009044 <__ssvfscanf_r+0xdc4>
 8008fd8:	2b60      	cmp	r3, #96	; 0x60
 8008fda:	d803      	bhi.n	8008fe4 <__ssvfscanf_r+0xd64>
 8008fdc:	2b46      	cmp	r3, #70	; 0x46
 8008fde:	d804      	bhi.n	8008fea <__ssvfscanf_r+0xd6a>
 8008fe0:	2b40      	cmp	r3, #64	; 0x40
 8008fe2:	d904      	bls.n	8008fee <__ssvfscanf_r+0xd6e>
 8008fe4:	69f9      	ldr	r1, [r7, #28]
 8008fe6:	290a      	cmp	r1, #10
 8008fe8:	e069      	b.n	80090be <__ssvfscanf_r+0xe3e>
 8008fea:	2b58      	cmp	r3, #88	; 0x58
 8008fec:	d06f      	beq.n	80090ce <__ssvfscanf_r+0xe4e>
 8008fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ff0:	05db      	lsls	r3, r3, #23
 8008ff2:	d512      	bpl.n	800901a <__ssvfscanf_r+0xd9a>
 8008ff4:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8008ff8:	4598      	cmp	r8, r3
 8008ffa:	d909      	bls.n	8009010 <__ssvfscanf_r+0xd90>
 8008ffc:	f818 1c01 	ldrb.w	r1, [r8, #-1]
 8009000:	ee18 0a10 	vmov	r0, s16
 8009004:	4622      	mov	r2, r4
 8009006:	f002 fa57 	bl	800b4b8 <_sungetc_r>
 800900a:	f108 39ff 	add.w	r9, r8, #4294967295
 800900e:	46c8      	mov	r8, r9
 8009010:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009014:	4598      	cmp	r8, r3
 8009016:	f43f aa2f 	beq.w	8008478 <__ssvfscanf_r+0x1f8>
 800901a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800901c:	f013 0210 	ands.w	r2, r3, #16
 8009020:	d175      	bne.n	800910e <__ssvfscanf_r+0xe8e>
 8009022:	69fb      	ldr	r3, [r7, #28]
 8009024:	69bd      	ldr	r5, [r7, #24]
 8009026:	f888 2000 	strb.w	r2, [r8]
 800902a:	ee18 0a10 	vmov	r0, s16
 800902e:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 8009032:	47a8      	blx	r5
 8009034:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009036:	069d      	lsls	r5, r3, #26
 8009038:	f106 0904 	add.w	r9, r6, #4
 800903c:	d55e      	bpl.n	80090fc <__ssvfscanf_r+0xe7c>
 800903e:	6833      	ldr	r3, [r6, #0]
 8009040:	6018      	str	r0, [r3, #0]
 8009042:	e060      	b.n	8009106 <__ssvfscanf_r+0xe86>
 8009044:	2b78      	cmp	r3, #120	; 0x78
 8009046:	e7d1      	b.n	8008fec <__ssvfscanf_r+0xd6c>
 8009048:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800904a:	0509      	lsls	r1, r1, #20
 800904c:	d50d      	bpl.n	800906a <__ssvfscanf_r+0xdea>
 800904e:	69f9      	ldr	r1, [r7, #28]
 8009050:	b929      	cbnz	r1, 800905e <__ssvfscanf_r+0xdde>
 8009052:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009054:	f441 7100 	orr.w	r1, r1, #512	; 0x200
 8009058:	62b9      	str	r1, [r7, #40]	; 0x28
 800905a:	2108      	movs	r1, #8
 800905c:	61f9      	str	r1, [r7, #28]
 800905e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009060:	054d      	lsls	r5, r1, #21
 8009062:	d505      	bpl.n	8009070 <__ssvfscanf_r+0xdf0>
 8009064:	f421 61b0 	bic.w	r1, r1, #1408	; 0x580
 8009068:	62b9      	str	r1, [r7, #40]	; 0x28
 800906a:	f808 3b01 	strb.w	r3, [r8], #1
 800906e:	e00d      	b.n	800908c <__ssvfscanf_r+0xe0c>
 8009070:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009072:	f423 7360 	bic.w	r3, r3, #896	; 0x380
 8009076:	62bb      	str	r3, [r7, #40]	; 0x28
 8009078:	f1bb 0f00 	cmp.w	fp, #0
 800907c:	d004      	beq.n	8009088 <__ssvfscanf_r+0xe08>
 800907e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009080:	3301      	adds	r3, #1
 8009082:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009086:	633b      	str	r3, [r7, #48]	; 0x30
 8009088:	f10a 0a01 	add.w	sl, sl, #1
 800908c:	6863      	ldr	r3, [r4, #4]
 800908e:	3b01      	subs	r3, #1
 8009090:	2b00      	cmp	r3, #0
 8009092:	6063      	str	r3, [r4, #4]
 8009094:	dd2a      	ble.n	80090ec <__ssvfscanf_r+0xe6c>
 8009096:	3201      	adds	r2, #1
 8009098:	6022      	str	r2, [r4, #0]
 800909a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800909c:	3b01      	subs	r3, #1
 800909e:	633b      	str	r3, [r7, #48]	; 0x30
 80090a0:	d184      	bne.n	8008fac <__ssvfscanf_r+0xd2c>
 80090a2:	e7a4      	b.n	8008fee <__ssvfscanf_r+0xd6e>
 80090a4:	69f9      	ldr	r1, [r7, #28]
 80090a6:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 80090aa:	61f9      	str	r1, [r7, #28]
 80090ac:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090ae:	f421 6138 	bic.w	r1, r1, #2944	; 0xb80
 80090b2:	e7d9      	b.n	8009068 <__ssvfscanf_r+0xde8>
 80090b4:	69f9      	ldr	r1, [r7, #28]
 80090b6:	f939 1011 	ldrsh.w	r1, [r9, r1, lsl #1]
 80090ba:	61f9      	str	r1, [r7, #28]
 80090bc:	2908      	cmp	r1, #8
 80090be:	dcf5      	bgt.n	80090ac <__ssvfscanf_r+0xe2c>
 80090c0:	e795      	b.n	8008fee <__ssvfscanf_r+0xd6e>
 80090c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090c4:	0608      	lsls	r0, r1, #24
 80090c6:	d592      	bpl.n	8008fee <__ssvfscanf_r+0xd6e>
 80090c8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80090cc:	e7cc      	b.n	8009068 <__ssvfscanf_r+0xde8>
 80090ce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090d0:	f401 61c0 	and.w	r1, r1, #1536	; 0x600
 80090d4:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 80090d8:	d189      	bne.n	8008fee <__ssvfscanf_r+0xd6e>
 80090da:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80090dc:	f421 7500 	bic.w	r5, r1, #512	; 0x200
 80090e0:	f445 61a0 	orr.w	r1, r5, #1280	; 0x500
 80090e4:	62b9      	str	r1, [r7, #40]	; 0x28
 80090e6:	2110      	movs	r1, #16
 80090e8:	61f9      	str	r1, [r7, #28]
 80090ea:	e7be      	b.n	800906a <__ssvfscanf_r+0xdea>
 80090ec:	ee18 0a10 	vmov	r0, s16
 80090f0:	4621      	mov	r1, r4
 80090f2:	f002 fa1e 	bl	800b532 <__ssrefill_r>
 80090f6:	2800      	cmp	r0, #0
 80090f8:	d0cf      	beq.n	800909a <__ssvfscanf_r+0xe1a>
 80090fa:	e778      	b.n	8008fee <__ssvfscanf_r+0xd6e>
 80090fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090fe:	0719      	lsls	r1, r3, #28
 8009100:	d50e      	bpl.n	8009120 <__ssvfscanf_r+0xea0>
 8009102:	6833      	ldr	r3, [r6, #0]
 8009104:	7018      	strb	r0, [r3, #0]
 8009106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009108:	3301      	adds	r3, #1
 800910a:	627b      	str	r3, [r7, #36]	; 0x24
 800910c:	464e      	mov	r6, r9
 800910e:	f507 73a8 	add.w	r3, r7, #336	; 0x150
 8009112:	eba8 0803 	sub.w	r8, r8, r3
 8009116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009118:	44c2      	add	sl, r8
 800911a:	4453      	add	r3, sl
 800911c:	f7ff b96f 	b.w	80083fe <__ssvfscanf_r+0x17e>
 8009120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009122:	075a      	lsls	r2, r3, #29
 8009124:	d502      	bpl.n	800912c <__ssvfscanf_r+0xeac>
 8009126:	6833      	ldr	r3, [r6, #0]
 8009128:	8018      	strh	r0, [r3, #0]
 800912a:	e7ec      	b.n	8009106 <__ssvfscanf_r+0xe86>
 800912c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800912e:	f013 0201 	ands.w	r2, r3, #1
 8009132:	d184      	bne.n	800903e <__ssvfscanf_r+0xdbe>
 8009134:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009136:	079b      	lsls	r3, r3, #30
 8009138:	d581      	bpl.n	800903e <__ssvfscanf_r+0xdbe>
 800913a:	4bb9      	ldr	r3, [pc, #740]	; (8009420 <__ssvfscanf_r+0x11a0>)
 800913c:	69b9      	ldr	r1, [r7, #24]
 800913e:	4299      	cmp	r1, r3
 8009140:	ee18 0a10 	vmov	r0, s16
 8009144:	69fb      	ldr	r3, [r7, #28]
 8009146:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 800914a:	d105      	bne.n	8009158 <__ssvfscanf_r+0xed8>
 800914c:	f002 f9b2 	bl	800b4b4 <_strtoull_r>
 8009150:	6833      	ldr	r3, [r6, #0]
 8009152:	e9c3 0100 	strd	r0, r1, [r3]
 8009156:	e7d6      	b.n	8009106 <__ssvfscanf_r+0xe86>
 8009158:	f002 f892 	bl	800b280 <_strtoll_r>
 800915c:	e7f8      	b.n	8009150 <__ssvfscanf_r+0xed0>
 800915e:	ee18 0a10 	vmov	r0, s16
 8009162:	f000 fc47 	bl	80099f4 <_localeconv_r>
 8009166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009168:	6802      	ldr	r2, [r0, #0]
 800916a:	3b01      	subs	r3, #1
 800916c:	f5b3 7fae 	cmp.w	r3, #348	; 0x15c
 8009170:	f04f 0b00 	mov.w	fp, #0
 8009174:	bf88      	it	hi
 8009176:	6b3b      	ldrhi	r3, [r7, #48]	; 0x30
 8009178:	f8c7 b028 	str.w	fp, [r7, #40]	; 0x28
 800917c:	e9c7 bb03 	strd	fp, fp, [r7, #12]
 8009180:	bf81      	itttt	hi
 8009182:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009186:	f240 115d 	movwhi	r1, #349	; 0x15d
 800918a:	195b      	addhi	r3, r3, r5
 800918c:	6339      	strhi	r1, [r7, #48]	; 0x30
 800918e:	f449 65f0 	orr.w	r5, r9, #1920	; 0x780
 8009192:	bf98      	it	ls
 8009194:	2300      	movls	r3, #0
 8009196:	46da      	mov	sl, fp
 8009198:	f507 79a8 	add.w	r9, r7, #336	; 0x150
 800919c:	6821      	ldr	r1, [r4, #0]
 800919e:	60b9      	str	r1, [r7, #8]
 80091a0:	7809      	ldrb	r1, [r1, #0]
 80091a2:	294e      	cmp	r1, #78	; 0x4e
 80091a4:	d862      	bhi.n	800926c <__ssvfscanf_r+0xfec>
 80091a6:	2940      	cmp	r1, #64	; 0x40
 80091a8:	d838      	bhi.n	800921c <__ssvfscanf_r+0xf9c>
 80091aa:	f1a1 0c2b 	sub.w	ip, r1, #43	; 0x2b
 80091ae:	fa5f fe8c 	uxtb.w	lr, ip
 80091b2:	f1be 0f0e 	cmp.w	lr, #14
 80091b6:	d934      	bls.n	8009222 <__ssvfscanf_r+0xfa2>
 80091b8:	f892 c000 	ldrb.w	ip, [r2]
 80091bc:	458c      	cmp	ip, r1
 80091be:	f040 80b6 	bne.w	800932e <__ssvfscanf_r+0x10ae>
 80091c2:	05a8      	lsls	r0, r5, #22
 80091c4:	f140 80b3 	bpl.w	800932e <__ssvfscanf_r+0x10ae>
 80091c8:	f425 7520 	bic.w	r5, r5, #640	; 0x280
 80091cc:	f8c7 a028 	str.w	sl, [r7, #40]	; 0x28
 80091d0:	e084      	b.n	80092dc <__ssvfscanf_r+0x105c>
 80091d2:	f1a1 0c61 	sub.w	ip, r1, #97	; 0x61
 80091d6:	f1bc 0f0d 	cmp.w	ip, #13
 80091da:	d8ed      	bhi.n	80091b8 <__ssvfscanf_r+0xf38>
 80091dc:	a001      	add	r0, pc, #4	; (adr r0, 80091e4 <__ssvfscanf_r+0xf64>)
 80091de:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 80091e2:	bf00      	nop
 80091e4:	08009329 	.word	0x08009329
 80091e8:	080091b9 	.word	0x080091b9
 80091ec:	080091b9 	.word	0x080091b9
 80091f0:	080091b9 	.word	0x080091b9
 80091f4:	080093a1 	.word	0x080093a1
 80091f8:	08009389 	.word	0x08009389
 80091fc:	080091b9 	.word	0x080091b9
 8009200:	080091b9 	.word	0x080091b9
 8009204:	0800935d 	.word	0x0800935d
 8009208:	080091b9 	.word	0x080091b9
 800920c:	080091b9 	.word	0x080091b9
 8009210:	080091b9 	.word	0x080091b9
 8009214:	080091b9 	.word	0x080091b9
 8009218:	080092ed 	.word	0x080092ed
 800921c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
 8009220:	e7d9      	b.n	80091d6 <__ssvfscanf_r+0xf56>
 8009222:	f1bc 0f0e 	cmp.w	ip, #14
 8009226:	d8c7      	bhi.n	80091b8 <__ssvfscanf_r+0xf38>
 8009228:	a001      	add	r0, pc, #4	; (adr r0, 8009230 <__ssvfscanf_r+0xfb0>)
 800922a:	f850 f02c 	ldr.w	pc, [r0, ip, lsl #2]
 800922e:	bf00      	nop
 8009230:	080092e3 	.word	0x080092e3
 8009234:	080091b9 	.word	0x080091b9
 8009238:	080092e3 	.word	0x080092e3
 800923c:	080091b9 	.word	0x080091b9
 8009240:	080091b9 	.word	0x080091b9
 8009244:	08009295 	.word	0x08009295
 8009248:	080092d3 	.word	0x080092d3
 800924c:	080092d3 	.word	0x080092d3
 8009250:	080092d3 	.word	0x080092d3
 8009254:	080092d3 	.word	0x080092d3
 8009258:	080092d3 	.word	0x080092d3
 800925c:	080092d3 	.word	0x080092d3
 8009260:	080092d3 	.word	0x080092d3
 8009264:	080092d3 	.word	0x080092d3
 8009268:	080092d3 	.word	0x080092d3
 800926c:	296e      	cmp	r1, #110	; 0x6e
 800926e:	d80c      	bhi.n	800928a <__ssvfscanf_r+0x100a>
 8009270:	2960      	cmp	r1, #96	; 0x60
 8009272:	d8ae      	bhi.n	80091d2 <__ssvfscanf_r+0xf52>
 8009274:	2954      	cmp	r1, #84	; 0x54
 8009276:	f000 808d 	beq.w	8009394 <__ssvfscanf_r+0x1114>
 800927a:	2959      	cmp	r1, #89	; 0x59
 800927c:	d19c      	bne.n	80091b8 <__ssvfscanf_r+0xf38>
 800927e:	f1b8 0f07 	cmp.w	r8, #7
 8009282:	d154      	bne.n	800932e <__ssvfscanf_r+0x10ae>
 8009284:	f04f 0808 	mov.w	r8, #8
 8009288:	e028      	b.n	80092dc <__ssvfscanf_r+0x105c>
 800928a:	2974      	cmp	r1, #116	; 0x74
 800928c:	f000 8082 	beq.w	8009394 <__ssvfscanf_r+0x1114>
 8009290:	2979      	cmp	r1, #121	; 0x79
 8009292:	e7f3      	b.n	800927c <__ssvfscanf_r+0xffc>
 8009294:	05e8      	lsls	r0, r5, #23
 8009296:	d51c      	bpl.n	80092d2 <__ssvfscanf_r+0x1052>
 8009298:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 800929c:	f10a 0a01 	add.w	sl, sl, #1
 80092a0:	b11b      	cbz	r3, 80092aa <__ssvfscanf_r+0x102a>
 80092a2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092a4:	3101      	adds	r1, #1
 80092a6:	3b01      	subs	r3, #1
 80092a8:	6339      	str	r1, [r7, #48]	; 0x30
 80092aa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ac:	3901      	subs	r1, #1
 80092ae:	6339      	str	r1, [r7, #48]	; 0x30
 80092b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80092b2:	3101      	adds	r1, #1
 80092b4:	62f9      	str	r1, [r7, #44]	; 0x2c
 80092b6:	6861      	ldr	r1, [r4, #4]
 80092b8:	3901      	subs	r1, #1
 80092ba:	2900      	cmp	r1, #0
 80092bc:	6061      	str	r1, [r4, #4]
 80092be:	f340 808e 	ble.w	80093de <__ssvfscanf_r+0x115e>
 80092c2:	68b8      	ldr	r0, [r7, #8]
 80092c4:	3001      	adds	r0, #1
 80092c6:	6020      	str	r0, [r4, #0]
 80092c8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80092ca:	2900      	cmp	r1, #0
 80092cc:	f47f af66 	bne.w	800919c <__ssvfscanf_r+0xf1c>
 80092d0:	e02d      	b.n	800932e <__ssvfscanf_r+0x10ae>
 80092d2:	eb1b 0f08 	cmn.w	fp, r8
 80092d6:	d12a      	bne.n	800932e <__ssvfscanf_r+0x10ae>
 80092d8:	f425 75c0 	bic.w	r5, r5, #384	; 0x180
 80092dc:	f809 1b01 	strb.w	r1, [r9], #1
 80092e0:	e7e3      	b.n	80092aa <__ssvfscanf_r+0x102a>
 80092e2:	0628      	lsls	r0, r5, #24
 80092e4:	d523      	bpl.n	800932e <__ssvfscanf_r+0x10ae>
 80092e6:	f025 0580 	bic.w	r5, r5, #128	; 0x80
 80092ea:	e7f7      	b.n	80092dc <__ssvfscanf_r+0x105c>
 80092ec:	f1bb 0f00 	cmp.w	fp, #0
 80092f0:	d10c      	bne.n	800930c <__ssvfscanf_r+0x108c>
 80092f2:	f1ba 0f00 	cmp.w	sl, #0
 80092f6:	d10c      	bne.n	8009312 <__ssvfscanf_r+0x1092>
 80092f8:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 80092fc:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8009300:	d107      	bne.n	8009312 <__ssvfscanf_r+0x1092>
 8009302:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8009306:	f04f 0b01 	mov.w	fp, #1
 800930a:	e7e7      	b.n	80092dc <__ssvfscanf_r+0x105c>
 800930c:	f1bb 0f02 	cmp.w	fp, #2
 8009310:	d05f      	beq.n	80093d2 <__ssvfscanf_r+0x1152>
 8009312:	f1b8 0f01 	cmp.w	r8, #1
 8009316:	d002      	beq.n	800931e <__ssvfscanf_r+0x109e>
 8009318:	f1b8 0f04 	cmp.w	r8, #4
 800931c:	d107      	bne.n	800932e <__ssvfscanf_r+0x10ae>
 800931e:	f108 0801 	add.w	r8, r8, #1
 8009322:	fa5f f888 	uxtb.w	r8, r8
 8009326:	e7d9      	b.n	80092dc <__ssvfscanf_r+0x105c>
 8009328:	f1bb 0f01 	cmp.w	fp, #1
 800932c:	d054      	beq.n	80093d8 <__ssvfscanf_r+0x1158>
 800932e:	f1ba 0f00 	cmp.w	sl, #0
 8009332:	d001      	beq.n	8009338 <__ssvfscanf_r+0x10b8>
 8009334:	f425 7580 	bic.w	r5, r5, #256	; 0x100
 8009338:	f10b 3bff 	add.w	fp, fp, #4294967295
 800933c:	f1bb 0f01 	cmp.w	fp, #1
 8009340:	d85a      	bhi.n	80093f8 <__ssvfscanf_r+0x1178>
 8009342:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8009346:	45a9      	cmp	r9, r5
 8009348:	f67f a896 	bls.w	8008478 <__ssvfscanf_r+0x1f8>
 800934c:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8009350:	ee18 0a10 	vmov	r0, s16
 8009354:	4622      	mov	r2, r4
 8009356:	f002 f8af 	bl	800b4b8 <_sungetc_r>
 800935a:	e7f4      	b.n	8009346 <__ssvfscanf_r+0x10c6>
 800935c:	f1b8 0f00 	cmp.w	r8, #0
 8009360:	d10c      	bne.n	800937c <__ssvfscanf_r+0x10fc>
 8009362:	f1ba 0f00 	cmp.w	sl, #0
 8009366:	d1e5      	bne.n	8009334 <__ssvfscanf_r+0x10b4>
 8009368:	f405 6ce0 	and.w	ip, r5, #1792	; 0x700
 800936c:	f5bc 6fe0 	cmp.w	ip, #1792	; 0x700
 8009370:	d1e2      	bne.n	8009338 <__ssvfscanf_r+0x10b8>
 8009372:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 8009376:	f04f 0801 	mov.w	r8, #1
 800937a:	e7af      	b.n	80092dc <__ssvfscanf_r+0x105c>
 800937c:	f1b8 0f03 	cmp.w	r8, #3
 8009380:	d0cd      	beq.n	800931e <__ssvfscanf_r+0x109e>
 8009382:	f1b8 0f05 	cmp.w	r8, #5
 8009386:	e7c9      	b.n	800931c <__ssvfscanf_r+0x109c>
 8009388:	f1b8 0f02 	cmp.w	r8, #2
 800938c:	d1cf      	bne.n	800932e <__ssvfscanf_r+0x10ae>
 800938e:	f04f 0803 	mov.w	r8, #3
 8009392:	e7a3      	b.n	80092dc <__ssvfscanf_r+0x105c>
 8009394:	f1b8 0f06 	cmp.w	r8, #6
 8009398:	d1c9      	bne.n	800932e <__ssvfscanf_r+0x10ae>
 800939a:	f04f 0807 	mov.w	r8, #7
 800939e:	e79d      	b.n	80092dc <__ssvfscanf_r+0x105c>
 80093a0:	f405 6ca0 	and.w	ip, r5, #1280	; 0x500
 80093a4:	f5bc 6f80 	cmp.w	ip, #1024	; 0x400
 80093a8:	d004      	beq.n	80093b4 <__ssvfscanf_r+0x1134>
 80093aa:	0568      	lsls	r0, r5, #21
 80093ac:	d5bf      	bpl.n	800932e <__ssvfscanf_r+0x10ae>
 80093ae:	f1ba 0f00 	cmp.w	sl, #0
 80093b2:	d0c1      	beq.n	8009338 <__ssvfscanf_r+0x10b8>
 80093b4:	05a8      	lsls	r0, r5, #22
 80093b6:	bf58      	it	pl
 80093b8:	6ab8      	ldrpl	r0, [r7, #40]	; 0x28
 80093ba:	f425 65f0 	bic.w	r5, r5, #1920	; 0x780
 80093be:	bf5c      	itt	pl
 80093c0:	ebaa 0000 	subpl.w	r0, sl, r0
 80093c4:	e9c7 9003 	strdpl	r9, r0, [r7, #12]
 80093c8:	f445 75c0 	orr.w	r5, r5, #384	; 0x180
 80093cc:	f04f 0a00 	mov.w	sl, #0
 80093d0:	e784      	b.n	80092dc <__ssvfscanf_r+0x105c>
 80093d2:	f04f 0b03 	mov.w	fp, #3
 80093d6:	e781      	b.n	80092dc <__ssvfscanf_r+0x105c>
 80093d8:	f04f 0b02 	mov.w	fp, #2
 80093dc:	e77e      	b.n	80092dc <__ssvfscanf_r+0x105c>
 80093de:	ee18 0a10 	vmov	r0, s16
 80093e2:	4621      	mov	r1, r4
 80093e4:	e9c7 2301 	strd	r2, r3, [r7, #4]
 80093e8:	f002 f8a3 	bl	800b532 <__ssrefill_r>
 80093ec:	e9d7 2301 	ldrd	r2, r3, [r7, #4]
 80093f0:	2800      	cmp	r0, #0
 80093f2:	f43f af69 	beq.w	80092c8 <__ssvfscanf_r+0x1048>
 80093f6:	e79a      	b.n	800932e <__ssvfscanf_r+0x10ae>
 80093f8:	f108 33ff 	add.w	r3, r8, #4294967295
 80093fc:	2b06      	cmp	r3, #6
 80093fe:	d82d      	bhi.n	800945c <__ssvfscanf_r+0x11dc>
 8009400:	f1b8 0f02 	cmp.w	r8, #2
 8009404:	d83b      	bhi.n	800947e <__ssvfscanf_r+0x11fe>
 8009406:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 800940a:	45a9      	cmp	r9, r5
 800940c:	f67f a834 	bls.w	8008478 <__ssvfscanf_r+0x1f8>
 8009410:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8009414:	ee18 0a10 	vmov	r0, s16
 8009418:	4622      	mov	r2, r4
 800941a:	f002 f84d 	bl	800b4b8 <_sungetc_r>
 800941e:	e7f4      	b.n	800940a <__ssvfscanf_r+0x118a>
 8009420:	0800b37d 	.word	0x0800b37d
 8009424:	080106ca 	.word	0x080106ca
 8009428:	f813 1d01 	ldrb.w	r1, [r3, #-1]!
 800942c:	633b      	str	r3, [r7, #48]	; 0x30
 800942e:	ee18 0a10 	vmov	r0, s16
 8009432:	4622      	mov	r2, r4
 8009434:	f002 f840 	bl	800b4b8 <_sungetc_r>
 8009438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800943a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800943e:	fa5f fb8b 	uxtb.w	fp, fp
 8009442:	f1bb 0f02 	cmp.w	fp, #2
 8009446:	d1ef      	bne.n	8009428 <__ssvfscanf_r+0x11a8>
 8009448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800944a:	f1a8 0803 	sub.w	r8, r8, #3
 800944e:	fa5f f888 	uxtb.w	r8, r8
 8009452:	eba3 0308 	sub.w	r3, r3, r8
 8009456:	eba9 0908 	sub.w	r9, r9, r8
 800945a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800945c:	05eb      	lsls	r3, r5, #23
 800945e:	d530      	bpl.n	80094c2 <__ssvfscanf_r+0x1242>
 8009460:	0568      	lsls	r0, r5, #21
 8009462:	d50f      	bpl.n	8009484 <__ssvfscanf_r+0x1204>
 8009464:	f507 75a8 	add.w	r5, r7, #336	; 0x150
 8009468:	45a9      	cmp	r9, r5
 800946a:	f67f a805 	bls.w	8008478 <__ssvfscanf_r+0x1f8>
 800946e:	f819 1d01 	ldrb.w	r1, [r9, #-1]!
 8009472:	ee18 0a10 	vmov	r0, s16
 8009476:	4622      	mov	r2, r4
 8009478:	f002 f81e 	bl	800b4b8 <_sungetc_r>
 800947c:	e7f4      	b.n	8009468 <__ssvfscanf_r+0x11e8>
 800947e:	46c3      	mov	fp, r8
 8009480:	464b      	mov	r3, r9
 8009482:	e7da      	b.n	800943a <__ssvfscanf_r+0x11ba>
 8009484:	f819 1c01 	ldrb.w	r1, [r9, #-1]
 8009488:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800948a:	2965      	cmp	r1, #101	; 0x65
 800948c:	f109 38ff 	add.w	r8, r9, #4294967295
 8009490:	f103 3bff 	add.w	fp, r3, #4294967295
 8009494:	d00d      	beq.n	80094b2 <__ssvfscanf_r+0x1232>
 8009496:	2945      	cmp	r1, #69	; 0x45
 8009498:	d00b      	beq.n	80094b2 <__ssvfscanf_r+0x1232>
 800949a:	ee18 0a10 	vmov	r0, s16
 800949e:	4622      	mov	r2, r4
 80094a0:	f002 f80a 	bl	800b4b8 <_sungetc_r>
 80094a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80094a6:	f819 1c02 	ldrb.w	r1, [r9, #-2]
 80094aa:	f1a9 0802 	sub.w	r8, r9, #2
 80094ae:	f1a3 0b02 	sub.w	fp, r3, #2
 80094b2:	ee18 0a10 	vmov	r0, s16
 80094b6:	4622      	mov	r2, r4
 80094b8:	f001 fffe 	bl	800b4b8 <_sungetc_r>
 80094bc:	46c1      	mov	r9, r8
 80094be:	f8c7 b02c 	str.w	fp, [r7, #44]	; 0x2c
 80094c2:	f015 0210 	ands.w	r2, r5, #16
 80094c6:	f47e aef9 	bne.w	80082bc <__ssvfscanf_r+0x3c>
 80094ca:	f405 63c0 	and.w	r3, r5, #1536	; 0x600
 80094ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80094d2:	f889 2000 	strb.w	r2, [r9]
 80094d6:	d11a      	bne.n	800950e <__ssvfscanf_r+0x128e>
 80094d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094da:	4553      	cmp	r3, sl
 80094dc:	eba3 020a 	sub.w	r2, r3, sl
 80094e0:	d123      	bne.n	800952a <__ssvfscanf_r+0x12aa>
 80094e2:	f507 71a8 	add.w	r1, r7, #336	; 0x150
 80094e6:	ee18 0a10 	vmov	r0, s16
 80094ea:	2200      	movs	r2, #0
 80094ec:	f001 fda6 	bl	800b03c <_strtod_r>
 80094f0:	07e9      	lsls	r1, r5, #31
 80094f2:	ec59 8b10 	vmov	r8, r9, d0
 80094f6:	f106 0a04 	add.w	sl, r6, #4
 80094fa:	d521      	bpl.n	8009540 <__ssvfscanf_r+0x12c0>
 80094fc:	6833      	ldr	r3, [r6, #0]
 80094fe:	ed83 0b00 	vstr	d0, [r3]
 8009502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009504:	3301      	adds	r3, #1
 8009506:	627b      	str	r3, [r7, #36]	; 0x24
 8009508:	4656      	mov	r6, sl
 800950a:	f7fe bed7 	b.w	80082bc <__ssvfscanf_r+0x3c>
 800950e:	693b      	ldr	r3, [r7, #16]
 8009510:	2b00      	cmp	r3, #0
 8009512:	d0e6      	beq.n	80094e2 <__ssvfscanf_r+0x1262>
 8009514:	68f9      	ldr	r1, [r7, #12]
 8009516:	230a      	movs	r3, #10
 8009518:	ee18 0a10 	vmov	r0, s16
 800951c:	3101      	adds	r1, #1
 800951e:	f001 fe17 	bl	800b150 <_strtol_r>
 8009522:	693b      	ldr	r3, [r7, #16]
 8009524:	f8d7 900c 	ldr.w	r9, [r7, #12]
 8009528:	1ac2      	subs	r2, r0, r3
 800952a:	f207 23a3 	addw	r3, r7, #675	; 0x2a3
 800952e:	4599      	cmp	r9, r3
 8009530:	bf28      	it	cs
 8009532:	f207 29a2 	addwcs	r9, r7, #674	; 0x2a2
 8009536:	4915      	ldr	r1, [pc, #84]	; (800958c <__ssvfscanf_r+0x130c>)
 8009538:	4648      	mov	r0, r9
 800953a:	f000 ff37 	bl	800a3ac <sprintf>
 800953e:	e7d0      	b.n	80094e2 <__ssvfscanf_r+0x1262>
 8009540:	07aa      	lsls	r2, r5, #30
 8009542:	6836      	ldr	r6, [r6, #0]
 8009544:	d502      	bpl.n	800954c <__ssvfscanf_r+0x12cc>
 8009546:	ed86 0b00 	vstr	d0, [r6]
 800954a:	e7da      	b.n	8009502 <__ssvfscanf_r+0x1282>
 800954c:	ee10 2a10 	vmov	r2, s0
 8009550:	ee10 0a10 	vmov	r0, s0
 8009554:	464b      	mov	r3, r9
 8009556:	4649      	mov	r1, r9
 8009558:	f7f7 fae8 	bl	8000b2c <__aeabi_dcmpun>
 800955c:	b128      	cbz	r0, 800956a <__ssvfscanf_r+0x12ea>
 800955e:	480c      	ldr	r0, [pc, #48]	; (8009590 <__ssvfscanf_r+0x1310>)
 8009560:	f000 ff1e 	bl	800a3a0 <nanf>
 8009564:	ed86 0a00 	vstr	s0, [r6]
 8009568:	e7cb      	b.n	8009502 <__ssvfscanf_r+0x1282>
 800956a:	4640      	mov	r0, r8
 800956c:	4649      	mov	r1, r9
 800956e:	f7f7 fb3b 	bl	8000be8 <__aeabi_d2f>
 8009572:	6030      	str	r0, [r6, #0]
 8009574:	e7c5      	b.n	8009502 <__ssvfscanf_r+0x1282>
 8009576:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800957a:	6818      	ldr	r0, [r3, #0]
 800957c:	f000 fa5c 	bl	8009a38 <free>
 8009580:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8009584:	3401      	adds	r4, #1
 8009586:	601e      	str	r6, [r3, #0]
 8009588:	f7ff b847 	b.w	800861a <__ssvfscanf_r+0x39a>
 800958c:	080106c4 	.word	0x080106c4
 8009590:	08010b27 	.word	0x08010b27

08009594 <_write_r>:
 8009594:	b538      	push	{r3, r4, r5, lr}
 8009596:	4d07      	ldr	r5, [pc, #28]	; (80095b4 <_write_r+0x20>)
 8009598:	4604      	mov	r4, r0
 800959a:	4608      	mov	r0, r1
 800959c:	4611      	mov	r1, r2
 800959e:	2200      	movs	r2, #0
 80095a0:	602a      	str	r2, [r5, #0]
 80095a2:	461a      	mov	r2, r3
 80095a4:	f7f7 ff3c 	bl	8001420 <_write>
 80095a8:	1c43      	adds	r3, r0, #1
 80095aa:	d102      	bne.n	80095b2 <_write_r+0x1e>
 80095ac:	682b      	ldr	r3, [r5, #0]
 80095ae:	b103      	cbz	r3, 80095b2 <_write_r+0x1e>
 80095b0:	6023      	str	r3, [r4, #0]
 80095b2:	bd38      	pop	{r3, r4, r5, pc}
 80095b4:	20001770 	.word	0x20001770

080095b8 <register_fini>:
 80095b8:	4b02      	ldr	r3, [pc, #8]	; (80095c4 <register_fini+0xc>)
 80095ba:	b113      	cbz	r3, 80095c2 <register_fini+0xa>
 80095bc:	4802      	ldr	r0, [pc, #8]	; (80095c8 <register_fini+0x10>)
 80095be:	f000 b805 	b.w	80095cc <atexit>
 80095c2:	4770      	bx	lr
 80095c4:	00000000 	.word	0x00000000
 80095c8:	080096d5 	.word	0x080096d5

080095cc <atexit>:
 80095cc:	2300      	movs	r3, #0
 80095ce:	4601      	mov	r1, r0
 80095d0:	461a      	mov	r2, r3
 80095d2:	4618      	mov	r0, r3
 80095d4:	f003 ba90 	b.w	800caf8 <__register_exitproc>

080095d8 <_close_r>:
 80095d8:	b538      	push	{r3, r4, r5, lr}
 80095da:	4d06      	ldr	r5, [pc, #24]	; (80095f4 <_close_r+0x1c>)
 80095dc:	2300      	movs	r3, #0
 80095de:	4604      	mov	r4, r0
 80095e0:	4608      	mov	r0, r1
 80095e2:	602b      	str	r3, [r5, #0]
 80095e4:	f7fa fb2f 	bl	8003c46 <_close>
 80095e8:	1c43      	adds	r3, r0, #1
 80095ea:	d102      	bne.n	80095f2 <_close_r+0x1a>
 80095ec:	682b      	ldr	r3, [r5, #0]
 80095ee:	b103      	cbz	r3, 80095f2 <_close_r+0x1a>
 80095f0:	6023      	str	r3, [r4, #0]
 80095f2:	bd38      	pop	{r3, r4, r5, pc}
 80095f4:	20001770 	.word	0x20001770

080095f8 <std>:
 80095f8:	2300      	movs	r3, #0
 80095fa:	b510      	push	{r4, lr}
 80095fc:	4604      	mov	r4, r0
 80095fe:	e9c0 3300 	strd	r3, r3, [r0]
 8009602:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009606:	6083      	str	r3, [r0, #8]
 8009608:	8181      	strh	r1, [r0, #12]
 800960a:	6643      	str	r3, [r0, #100]	; 0x64
 800960c:	81c2      	strh	r2, [r0, #14]
 800960e:	6183      	str	r3, [r0, #24]
 8009610:	4619      	mov	r1, r3
 8009612:	2208      	movs	r2, #8
 8009614:	305c      	adds	r0, #92	; 0x5c
 8009616:	f7fe fd6b 	bl	80080f0 <memset>
 800961a:	4b07      	ldr	r3, [pc, #28]	; (8009638 <std+0x40>)
 800961c:	6223      	str	r3, [r4, #32]
 800961e:	4b07      	ldr	r3, [pc, #28]	; (800963c <std+0x44>)
 8009620:	6263      	str	r3, [r4, #36]	; 0x24
 8009622:	4b07      	ldr	r3, [pc, #28]	; (8009640 <std+0x48>)
 8009624:	62a3      	str	r3, [r4, #40]	; 0x28
 8009626:	4b07      	ldr	r3, [pc, #28]	; (8009644 <std+0x4c>)
 8009628:	61e4      	str	r4, [r4, #28]
 800962a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800962c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009634:	f000 b9e2 	b.w	80099fc <__retarget_lock_init_recursive>
 8009638:	080081f5 	.word	0x080081f5
 800963c:	0800821b 	.word	0x0800821b
 8009640:	08008253 	.word	0x08008253
 8009644:	08008277 	.word	0x08008277

08009648 <_cleanup_r>:
 8009648:	4901      	ldr	r1, [pc, #4]	; (8009650 <_cleanup_r+0x8>)
 800964a:	f000 b9a1 	b.w	8009990 <_fwalk_reent>
 800964e:	bf00      	nop
 8009650:	0800d839 	.word	0x0800d839

08009654 <__sfp_lock_acquire>:
 8009654:	4801      	ldr	r0, [pc, #4]	; (800965c <__sfp_lock_acquire+0x8>)
 8009656:	f000 b9d3 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 800965a:	bf00      	nop
 800965c:	2000176c 	.word	0x2000176c

08009660 <__sfp_lock_release>:
 8009660:	4801      	ldr	r0, [pc, #4]	; (8009668 <__sfp_lock_release+0x8>)
 8009662:	f000 b9ce 	b.w	8009a02 <__retarget_lock_release_recursive>
 8009666:	bf00      	nop
 8009668:	2000176c 	.word	0x2000176c

0800966c <__sinit_lock_acquire>:
 800966c:	4801      	ldr	r0, [pc, #4]	; (8009674 <__sinit_lock_acquire+0x8>)
 800966e:	f000 b9c7 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 8009672:	bf00      	nop
 8009674:	20001767 	.word	0x20001767

08009678 <__sinit_lock_release>:
 8009678:	4801      	ldr	r0, [pc, #4]	; (8009680 <__sinit_lock_release+0x8>)
 800967a:	f000 b9c2 	b.w	8009a02 <__retarget_lock_release_recursive>
 800967e:	bf00      	nop
 8009680:	20001767 	.word	0x20001767

08009684 <__sinit>:
 8009684:	b510      	push	{r4, lr}
 8009686:	4604      	mov	r4, r0
 8009688:	f7ff fff0 	bl	800966c <__sinit_lock_acquire>
 800968c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800968e:	b11a      	cbz	r2, 8009698 <__sinit+0x14>
 8009690:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009694:	f7ff bff0 	b.w	8009678 <__sinit_lock_release>
 8009698:	4b0d      	ldr	r3, [pc, #52]	; (80096d0 <__sinit+0x4c>)
 800969a:	63e3      	str	r3, [r4, #60]	; 0x3c
 800969c:	2303      	movs	r3, #3
 800969e:	f8c4 32e4 	str.w	r3, [r4, #740]	; 0x2e4
 80096a2:	f504 733b 	add.w	r3, r4, #748	; 0x2ec
 80096a6:	f8c4 32e8 	str.w	r3, [r4, #744]	; 0x2e8
 80096aa:	6860      	ldr	r0, [r4, #4]
 80096ac:	f8c4 22e0 	str.w	r2, [r4, #736]	; 0x2e0
 80096b0:	2104      	movs	r1, #4
 80096b2:	f7ff ffa1 	bl	80095f8 <std>
 80096b6:	68a0      	ldr	r0, [r4, #8]
 80096b8:	2201      	movs	r2, #1
 80096ba:	2109      	movs	r1, #9
 80096bc:	f7ff ff9c 	bl	80095f8 <std>
 80096c0:	68e0      	ldr	r0, [r4, #12]
 80096c2:	2202      	movs	r2, #2
 80096c4:	2112      	movs	r1, #18
 80096c6:	f7ff ff97 	bl	80095f8 <std>
 80096ca:	2301      	movs	r3, #1
 80096cc:	63a3      	str	r3, [r4, #56]	; 0x38
 80096ce:	e7df      	b.n	8009690 <__sinit+0xc>
 80096d0:	08009649 	.word	0x08009649

080096d4 <__libc_fini_array>:
 80096d4:	b538      	push	{r3, r4, r5, lr}
 80096d6:	4d07      	ldr	r5, [pc, #28]	; (80096f4 <__libc_fini_array+0x20>)
 80096d8:	4c07      	ldr	r4, [pc, #28]	; (80096f8 <__libc_fini_array+0x24>)
 80096da:	1b64      	subs	r4, r4, r5
 80096dc:	10a4      	asrs	r4, r4, #2
 80096de:	b91c      	cbnz	r4, 80096e8 <__libc_fini_array+0x14>
 80096e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80096e4:	f006 ba8c 	b.w	800fc00 <_fini>
 80096e8:	3c01      	subs	r4, #1
 80096ea:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 80096ee:	4798      	blx	r3
 80096f0:	e7f5      	b.n	80096de <__libc_fini_array+0xa>
 80096f2:	bf00      	nop
 80096f4:	08010b58 	.word	0x08010b58
 80096f8:	08010b5c 	.word	0x08010b5c

080096fc <__sfvwrite_r>:
 80096fc:	6893      	ldr	r3, [r2, #8]
 80096fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009702:	4606      	mov	r6, r0
 8009704:	460c      	mov	r4, r1
 8009706:	4690      	mov	r8, r2
 8009708:	b91b      	cbnz	r3, 8009712 <__sfvwrite_r+0x16>
 800970a:	2000      	movs	r0, #0
 800970c:	b003      	add	sp, #12
 800970e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009712:	898b      	ldrh	r3, [r1, #12]
 8009714:	0718      	lsls	r0, r3, #28
 8009716:	d550      	bpl.n	80097ba <__sfvwrite_r+0xbe>
 8009718:	690b      	ldr	r3, [r1, #16]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d04d      	beq.n	80097ba <__sfvwrite_r+0xbe>
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f8d8 7000 	ldr.w	r7, [r8]
 8009724:	f013 0902 	ands.w	r9, r3, #2
 8009728:	d16c      	bne.n	8009804 <__sfvwrite_r+0x108>
 800972a:	f013 0301 	ands.w	r3, r3, #1
 800972e:	f000 809c 	beq.w	800986a <__sfvwrite_r+0x16e>
 8009732:	4648      	mov	r0, r9
 8009734:	46ca      	mov	sl, r9
 8009736:	46cb      	mov	fp, r9
 8009738:	f1bb 0f00 	cmp.w	fp, #0
 800973c:	f000 8103 	beq.w	8009946 <__sfvwrite_r+0x24a>
 8009740:	b950      	cbnz	r0, 8009758 <__sfvwrite_r+0x5c>
 8009742:	465a      	mov	r2, fp
 8009744:	210a      	movs	r1, #10
 8009746:	4650      	mov	r0, sl
 8009748:	f7f6 fd4a 	bl	80001e0 <memchr>
 800974c:	2800      	cmp	r0, #0
 800974e:	f000 80ff 	beq.w	8009950 <__sfvwrite_r+0x254>
 8009752:	3001      	adds	r0, #1
 8009754:	eba0 090a 	sub.w	r9, r0, sl
 8009758:	6820      	ldr	r0, [r4, #0]
 800975a:	6921      	ldr	r1, [r4, #16]
 800975c:	6963      	ldr	r3, [r4, #20]
 800975e:	45d9      	cmp	r9, fp
 8009760:	464a      	mov	r2, r9
 8009762:	bf28      	it	cs
 8009764:	465a      	movcs	r2, fp
 8009766:	4288      	cmp	r0, r1
 8009768:	f240 80f5 	bls.w	8009956 <__sfvwrite_r+0x25a>
 800976c:	68a5      	ldr	r5, [r4, #8]
 800976e:	441d      	add	r5, r3
 8009770:	42aa      	cmp	r2, r5
 8009772:	f340 80f0 	ble.w	8009956 <__sfvwrite_r+0x25a>
 8009776:	4651      	mov	r1, sl
 8009778:	462a      	mov	r2, r5
 800977a:	f000 fbe1 	bl	8009f40 <memmove>
 800977e:	6823      	ldr	r3, [r4, #0]
 8009780:	442b      	add	r3, r5
 8009782:	6023      	str	r3, [r4, #0]
 8009784:	4621      	mov	r1, r4
 8009786:	4630      	mov	r0, r6
 8009788:	f004 f93c 	bl	800da04 <_fflush_r>
 800978c:	2800      	cmp	r0, #0
 800978e:	d167      	bne.n	8009860 <__sfvwrite_r+0x164>
 8009790:	ebb9 0905 	subs.w	r9, r9, r5
 8009794:	f040 80f7 	bne.w	8009986 <__sfvwrite_r+0x28a>
 8009798:	4621      	mov	r1, r4
 800979a:	4630      	mov	r0, r6
 800979c:	f004 f932 	bl	800da04 <_fflush_r>
 80097a0:	2800      	cmp	r0, #0
 80097a2:	d15d      	bne.n	8009860 <__sfvwrite_r+0x164>
 80097a4:	f8d8 2008 	ldr.w	r2, [r8, #8]
 80097a8:	44aa      	add	sl, r5
 80097aa:	ebab 0b05 	sub.w	fp, fp, r5
 80097ae:	1b55      	subs	r5, r2, r5
 80097b0:	f8c8 5008 	str.w	r5, [r8, #8]
 80097b4:	2d00      	cmp	r5, #0
 80097b6:	d1bf      	bne.n	8009738 <__sfvwrite_r+0x3c>
 80097b8:	e7a7      	b.n	800970a <__sfvwrite_r+0xe>
 80097ba:	4621      	mov	r1, r4
 80097bc:	4630      	mov	r0, r6
 80097be:	f003 f943 	bl	800ca48 <__swsetup_r>
 80097c2:	2800      	cmp	r0, #0
 80097c4:	d0ab      	beq.n	800971e <__sfvwrite_r+0x22>
 80097c6:	f04f 30ff 	mov.w	r0, #4294967295
 80097ca:	e79f      	b.n	800970c <__sfvwrite_r+0x10>
 80097cc:	e9d7 b900 	ldrd	fp, r9, [r7]
 80097d0:	3708      	adds	r7, #8
 80097d2:	f1b9 0f00 	cmp.w	r9, #0
 80097d6:	d0f9      	beq.n	80097cc <__sfvwrite_r+0xd0>
 80097d8:	45d1      	cmp	r9, sl
 80097da:	464b      	mov	r3, r9
 80097dc:	69e1      	ldr	r1, [r4, #28]
 80097de:	6a65      	ldr	r5, [r4, #36]	; 0x24
 80097e0:	bf28      	it	cs
 80097e2:	4653      	movcs	r3, sl
 80097e4:	465a      	mov	r2, fp
 80097e6:	4630      	mov	r0, r6
 80097e8:	47a8      	blx	r5
 80097ea:	2800      	cmp	r0, #0
 80097ec:	dd38      	ble.n	8009860 <__sfvwrite_r+0x164>
 80097ee:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80097f2:	4483      	add	fp, r0
 80097f4:	eba9 0900 	sub.w	r9, r9, r0
 80097f8:	1a18      	subs	r0, r3, r0
 80097fa:	f8c8 0008 	str.w	r0, [r8, #8]
 80097fe:	2800      	cmp	r0, #0
 8009800:	d1e7      	bne.n	80097d2 <__sfvwrite_r+0xd6>
 8009802:	e782      	b.n	800970a <__sfvwrite_r+0xe>
 8009804:	f04f 0b00 	mov.w	fp, #0
 8009808:	f8df a180 	ldr.w	sl, [pc, #384]	; 800998c <__sfvwrite_r+0x290>
 800980c:	46d9      	mov	r9, fp
 800980e:	e7e0      	b.n	80097d2 <__sfvwrite_r+0xd6>
 8009810:	e9d7 9a00 	ldrd	r9, sl, [r7]
 8009814:	3708      	adds	r7, #8
 8009816:	f1ba 0f00 	cmp.w	sl, #0
 800981a:	d0f9      	beq.n	8009810 <__sfvwrite_r+0x114>
 800981c:	89a3      	ldrh	r3, [r4, #12]
 800981e:	68a2      	ldr	r2, [r4, #8]
 8009820:	6820      	ldr	r0, [r4, #0]
 8009822:	0599      	lsls	r1, r3, #22
 8009824:	d563      	bpl.n	80098ee <__sfvwrite_r+0x1f2>
 8009826:	4552      	cmp	r2, sl
 8009828:	d836      	bhi.n	8009898 <__sfvwrite_r+0x19c>
 800982a:	f413 6f90 	tst.w	r3, #1152	; 0x480
 800982e:	d033      	beq.n	8009898 <__sfvwrite_r+0x19c>
 8009830:	6921      	ldr	r1, [r4, #16]
 8009832:	6965      	ldr	r5, [r4, #20]
 8009834:	eba0 0b01 	sub.w	fp, r0, r1
 8009838:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800983c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009840:	f10b 0201 	add.w	r2, fp, #1
 8009844:	106d      	asrs	r5, r5, #1
 8009846:	4452      	add	r2, sl
 8009848:	4295      	cmp	r5, r2
 800984a:	bf38      	it	cc
 800984c:	4615      	movcc	r5, r2
 800984e:	055b      	lsls	r3, r3, #21
 8009850:	d53d      	bpl.n	80098ce <__sfvwrite_r+0x1d2>
 8009852:	4629      	mov	r1, r5
 8009854:	4630      	mov	r0, r6
 8009856:	f000 f8f7 	bl	8009a48 <_malloc_r>
 800985a:	b948      	cbnz	r0, 8009870 <__sfvwrite_r+0x174>
 800985c:	230c      	movs	r3, #12
 800985e:	6033      	str	r3, [r6, #0]
 8009860:	89a3      	ldrh	r3, [r4, #12]
 8009862:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009866:	81a3      	strh	r3, [r4, #12]
 8009868:	e7ad      	b.n	80097c6 <__sfvwrite_r+0xca>
 800986a:	4699      	mov	r9, r3
 800986c:	469a      	mov	sl, r3
 800986e:	e7d2      	b.n	8009816 <__sfvwrite_r+0x11a>
 8009870:	465a      	mov	r2, fp
 8009872:	6921      	ldr	r1, [r4, #16]
 8009874:	9001      	str	r0, [sp, #4]
 8009876:	f000 fb55 	bl	8009f24 <memcpy>
 800987a:	89a2      	ldrh	r2, [r4, #12]
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 8009882:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8009886:	81a2      	strh	r2, [r4, #12]
 8009888:	6123      	str	r3, [r4, #16]
 800988a:	6165      	str	r5, [r4, #20]
 800988c:	445b      	add	r3, fp
 800988e:	eba5 050b 	sub.w	r5, r5, fp
 8009892:	6023      	str	r3, [r4, #0]
 8009894:	4652      	mov	r2, sl
 8009896:	60a5      	str	r5, [r4, #8]
 8009898:	4552      	cmp	r2, sl
 800989a:	bf28      	it	cs
 800989c:	4652      	movcs	r2, sl
 800989e:	6820      	ldr	r0, [r4, #0]
 80098a0:	9201      	str	r2, [sp, #4]
 80098a2:	4649      	mov	r1, r9
 80098a4:	f000 fb4c 	bl	8009f40 <memmove>
 80098a8:	68a3      	ldr	r3, [r4, #8]
 80098aa:	9a01      	ldr	r2, [sp, #4]
 80098ac:	1a9b      	subs	r3, r3, r2
 80098ae:	60a3      	str	r3, [r4, #8]
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	441a      	add	r2, r3
 80098b4:	4655      	mov	r5, sl
 80098b6:	6022      	str	r2, [r4, #0]
 80098b8:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80098bc:	44a9      	add	r9, r5
 80098be:	ebaa 0a05 	sub.w	sl, sl, r5
 80098c2:	1b45      	subs	r5, r0, r5
 80098c4:	f8c8 5008 	str.w	r5, [r8, #8]
 80098c8:	2d00      	cmp	r5, #0
 80098ca:	d1a4      	bne.n	8009816 <__sfvwrite_r+0x11a>
 80098cc:	e71d      	b.n	800970a <__sfvwrite_r+0xe>
 80098ce:	462a      	mov	r2, r5
 80098d0:	4630      	mov	r0, r6
 80098d2:	f000 fb75 	bl	8009fc0 <_realloc_r>
 80098d6:	4603      	mov	r3, r0
 80098d8:	2800      	cmp	r0, #0
 80098da:	d1d5      	bne.n	8009888 <__sfvwrite_r+0x18c>
 80098dc:	6921      	ldr	r1, [r4, #16]
 80098de:	4630      	mov	r0, r6
 80098e0:	f004 f90a 	bl	800daf8 <_free_r>
 80098e4:	89a3      	ldrh	r3, [r4, #12]
 80098e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80098ea:	81a3      	strh	r3, [r4, #12]
 80098ec:	e7b6      	b.n	800985c <__sfvwrite_r+0x160>
 80098ee:	6923      	ldr	r3, [r4, #16]
 80098f0:	4283      	cmp	r3, r0
 80098f2:	d302      	bcc.n	80098fa <__sfvwrite_r+0x1fe>
 80098f4:	6961      	ldr	r1, [r4, #20]
 80098f6:	4551      	cmp	r1, sl
 80098f8:	d915      	bls.n	8009926 <__sfvwrite_r+0x22a>
 80098fa:	4552      	cmp	r2, sl
 80098fc:	bf28      	it	cs
 80098fe:	4652      	movcs	r2, sl
 8009900:	4649      	mov	r1, r9
 8009902:	4615      	mov	r5, r2
 8009904:	f000 fb1c 	bl	8009f40 <memmove>
 8009908:	68a3      	ldr	r3, [r4, #8]
 800990a:	6822      	ldr	r2, [r4, #0]
 800990c:	1b5b      	subs	r3, r3, r5
 800990e:	442a      	add	r2, r5
 8009910:	60a3      	str	r3, [r4, #8]
 8009912:	6022      	str	r2, [r4, #0]
 8009914:	2b00      	cmp	r3, #0
 8009916:	d1cf      	bne.n	80098b8 <__sfvwrite_r+0x1bc>
 8009918:	4621      	mov	r1, r4
 800991a:	4630      	mov	r0, r6
 800991c:	f004 f872 	bl	800da04 <_fflush_r>
 8009920:	2800      	cmp	r0, #0
 8009922:	d0c9      	beq.n	80098b8 <__sfvwrite_r+0x1bc>
 8009924:	e79c      	b.n	8009860 <__sfvwrite_r+0x164>
 8009926:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800992a:	459a      	cmp	sl, r3
 800992c:	bf38      	it	cc
 800992e:	4653      	movcc	r3, sl
 8009930:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009932:	fb93 f3f1 	sdiv	r3, r3, r1
 8009936:	464a      	mov	r2, r9
 8009938:	434b      	muls	r3, r1
 800993a:	4630      	mov	r0, r6
 800993c:	69e1      	ldr	r1, [r4, #28]
 800993e:	47a8      	blx	r5
 8009940:	1e05      	subs	r5, r0, #0
 8009942:	dcb9      	bgt.n	80098b8 <__sfvwrite_r+0x1bc>
 8009944:	e78c      	b.n	8009860 <__sfvwrite_r+0x164>
 8009946:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800994a:	2000      	movs	r0, #0
 800994c:	3708      	adds	r7, #8
 800994e:	e6f3      	b.n	8009738 <__sfvwrite_r+0x3c>
 8009950:	f10b 0901 	add.w	r9, fp, #1
 8009954:	e700      	b.n	8009758 <__sfvwrite_r+0x5c>
 8009956:	4293      	cmp	r3, r2
 8009958:	dc08      	bgt.n	800996c <__sfvwrite_r+0x270>
 800995a:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800995c:	69e1      	ldr	r1, [r4, #28]
 800995e:	4652      	mov	r2, sl
 8009960:	4630      	mov	r0, r6
 8009962:	47a8      	blx	r5
 8009964:	1e05      	subs	r5, r0, #0
 8009966:	f73f af13 	bgt.w	8009790 <__sfvwrite_r+0x94>
 800996a:	e779      	b.n	8009860 <__sfvwrite_r+0x164>
 800996c:	4651      	mov	r1, sl
 800996e:	9201      	str	r2, [sp, #4]
 8009970:	f000 fae6 	bl	8009f40 <memmove>
 8009974:	9a01      	ldr	r2, [sp, #4]
 8009976:	68a3      	ldr	r3, [r4, #8]
 8009978:	1a9b      	subs	r3, r3, r2
 800997a:	60a3      	str	r3, [r4, #8]
 800997c:	6823      	ldr	r3, [r4, #0]
 800997e:	4413      	add	r3, r2
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	4615      	mov	r5, r2
 8009984:	e704      	b.n	8009790 <__sfvwrite_r+0x94>
 8009986:	2001      	movs	r0, #1
 8009988:	e70c      	b.n	80097a4 <__sfvwrite_r+0xa8>
 800998a:	bf00      	nop
 800998c:	7ffffc00 	.word	0x7ffffc00

08009990 <_fwalk_reent>:
 8009990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009994:	4606      	mov	r6, r0
 8009996:	4688      	mov	r8, r1
 8009998:	f500 7438 	add.w	r4, r0, #736	; 0x2e0
 800999c:	2700      	movs	r7, #0
 800999e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099a2:	f1b9 0901 	subs.w	r9, r9, #1
 80099a6:	d505      	bpl.n	80099b4 <_fwalk_reent+0x24>
 80099a8:	6824      	ldr	r4, [r4, #0]
 80099aa:	2c00      	cmp	r4, #0
 80099ac:	d1f7      	bne.n	800999e <_fwalk_reent+0xe>
 80099ae:	4638      	mov	r0, r7
 80099b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099b4:	89ab      	ldrh	r3, [r5, #12]
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d907      	bls.n	80099ca <_fwalk_reent+0x3a>
 80099ba:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099be:	3301      	adds	r3, #1
 80099c0:	d003      	beq.n	80099ca <_fwalk_reent+0x3a>
 80099c2:	4629      	mov	r1, r5
 80099c4:	4630      	mov	r0, r6
 80099c6:	47c0      	blx	r8
 80099c8:	4307      	orrs	r7, r0
 80099ca:	3568      	adds	r5, #104	; 0x68
 80099cc:	e7e9      	b.n	80099a2 <_fwalk_reent+0x12>

080099ce <iswspace>:
 80099ce:	2100      	movs	r1, #0
 80099d0:	f000 b800 	b.w	80099d4 <iswspace_l>

080099d4 <iswspace_l>:
 80099d4:	28ff      	cmp	r0, #255	; 0xff
 80099d6:	bf9d      	ittte	ls
 80099d8:	4b02      	ldrls	r3, [pc, #8]	; (80099e4 <iswspace_l+0x10>)
 80099da:	5cc0      	ldrbls	r0, [r0, r3]
 80099dc:	f000 0008 	andls.w	r0, r0, #8
 80099e0:	2000      	movhi	r0, #0
 80099e2:	4770      	bx	lr
 80099e4:	080106ed 	.word	0x080106ed

080099e8 <__locale_mb_cur_max>:
 80099e8:	4b01      	ldr	r3, [pc, #4]	; (80099f0 <__locale_mb_cur_max+0x8>)
 80099ea:	f893 0128 	ldrb.w	r0, [r3, #296]	; 0x128
 80099ee:	4770      	bx	lr
 80099f0:	2000062c 	.word	0x2000062c

080099f4 <_localeconv_r>:
 80099f4:	4800      	ldr	r0, [pc, #0]	; (80099f8 <_localeconv_r+0x4>)
 80099f6:	4770      	bx	lr
 80099f8:	2000071c 	.word	0x2000071c

080099fc <__retarget_lock_init_recursive>:
 80099fc:	4770      	bx	lr

080099fe <__retarget_lock_close_recursive>:
 80099fe:	4770      	bx	lr

08009a00 <__retarget_lock_acquire_recursive>:
 8009a00:	4770      	bx	lr

08009a02 <__retarget_lock_release_recursive>:
 8009a02:	4770      	bx	lr

08009a04 <_lseek_r>:
 8009a04:	b538      	push	{r3, r4, r5, lr}
 8009a06:	4d07      	ldr	r5, [pc, #28]	; (8009a24 <_lseek_r+0x20>)
 8009a08:	4604      	mov	r4, r0
 8009a0a:	4608      	mov	r0, r1
 8009a0c:	4611      	mov	r1, r2
 8009a0e:	2200      	movs	r2, #0
 8009a10:	602a      	str	r2, [r5, #0]
 8009a12:	461a      	mov	r2, r3
 8009a14:	f7fa f93e 	bl	8003c94 <_lseek>
 8009a18:	1c43      	adds	r3, r0, #1
 8009a1a:	d102      	bne.n	8009a22 <_lseek_r+0x1e>
 8009a1c:	682b      	ldr	r3, [r5, #0]
 8009a1e:	b103      	cbz	r3, 8009a22 <_lseek_r+0x1e>
 8009a20:	6023      	str	r3, [r4, #0]
 8009a22:	bd38      	pop	{r3, r4, r5, pc}
 8009a24:	20001770 	.word	0x20001770

08009a28 <malloc>:
 8009a28:	4b02      	ldr	r3, [pc, #8]	; (8009a34 <malloc+0xc>)
 8009a2a:	4601      	mov	r1, r0
 8009a2c:	6818      	ldr	r0, [r3, #0]
 8009a2e:	f000 b80b 	b.w	8009a48 <_malloc_r>
 8009a32:	bf00      	nop
 8009a34:	200001f8 	.word	0x200001f8

08009a38 <free>:
 8009a38:	4b02      	ldr	r3, [pc, #8]	; (8009a44 <free+0xc>)
 8009a3a:	4601      	mov	r1, r0
 8009a3c:	6818      	ldr	r0, [r3, #0]
 8009a3e:	f004 b85b 	b.w	800daf8 <_free_r>
 8009a42:	bf00      	nop
 8009a44:	200001f8 	.word	0x200001f8

08009a48 <_malloc_r>:
 8009a48:	f101 030b 	add.w	r3, r1, #11
 8009a4c:	2b16      	cmp	r3, #22
 8009a4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a52:	4605      	mov	r5, r0
 8009a54:	d906      	bls.n	8009a64 <_malloc_r+0x1c>
 8009a56:	f033 0707 	bics.w	r7, r3, #7
 8009a5a:	d504      	bpl.n	8009a66 <_malloc_r+0x1e>
 8009a5c:	230c      	movs	r3, #12
 8009a5e:	602b      	str	r3, [r5, #0]
 8009a60:	2400      	movs	r4, #0
 8009a62:	e1ae      	b.n	8009dc2 <_malloc_r+0x37a>
 8009a64:	2710      	movs	r7, #16
 8009a66:	42b9      	cmp	r1, r7
 8009a68:	d8f8      	bhi.n	8009a5c <_malloc_r+0x14>
 8009a6a:	4628      	mov	r0, r5
 8009a6c:	f000 fa82 	bl	8009f74 <__malloc_lock>
 8009a70:	f5b7 7ffc 	cmp.w	r7, #504	; 0x1f8
 8009a74:	4ec3      	ldr	r6, [pc, #780]	; (8009d84 <_malloc_r+0x33c>)
 8009a76:	d238      	bcs.n	8009aea <_malloc_r+0xa2>
 8009a78:	f107 0208 	add.w	r2, r7, #8
 8009a7c:	4432      	add	r2, r6
 8009a7e:	f1a2 0108 	sub.w	r1, r2, #8
 8009a82:	6854      	ldr	r4, [r2, #4]
 8009a84:	428c      	cmp	r4, r1
 8009a86:	ea4f 03d7 	mov.w	r3, r7, lsr #3
 8009a8a:	d102      	bne.n	8009a92 <_malloc_r+0x4a>
 8009a8c:	68d4      	ldr	r4, [r2, #12]
 8009a8e:	42a2      	cmp	r2, r4
 8009a90:	d010      	beq.n	8009ab4 <_malloc_r+0x6c>
 8009a92:	6863      	ldr	r3, [r4, #4]
 8009a94:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 8009a98:	f023 0303 	bic.w	r3, r3, #3
 8009a9c:	60ca      	str	r2, [r1, #12]
 8009a9e:	4423      	add	r3, r4
 8009aa0:	6091      	str	r1, [r2, #8]
 8009aa2:	685a      	ldr	r2, [r3, #4]
 8009aa4:	f042 0201 	orr.w	r2, r2, #1
 8009aa8:	605a      	str	r2, [r3, #4]
 8009aaa:	4628      	mov	r0, r5
 8009aac:	f000 fa68 	bl	8009f80 <__malloc_unlock>
 8009ab0:	3408      	adds	r4, #8
 8009ab2:	e186      	b.n	8009dc2 <_malloc_r+0x37a>
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	4ab4      	ldr	r2, [pc, #720]	; (8009d88 <_malloc_r+0x340>)
 8009ab8:	6934      	ldr	r4, [r6, #16]
 8009aba:	4294      	cmp	r4, r2
 8009abc:	4611      	mov	r1, r2
 8009abe:	d077      	beq.n	8009bb0 <_malloc_r+0x168>
 8009ac0:	6860      	ldr	r0, [r4, #4]
 8009ac2:	f020 0c03 	bic.w	ip, r0, #3
 8009ac6:	ebac 0007 	sub.w	r0, ip, r7
 8009aca:	280f      	cmp	r0, #15
 8009acc:	dd48      	ble.n	8009b60 <_malloc_r+0x118>
 8009ace:	19e1      	adds	r1, r4, r7
 8009ad0:	f040 0301 	orr.w	r3, r0, #1
 8009ad4:	f047 0701 	orr.w	r7, r7, #1
 8009ad8:	6067      	str	r7, [r4, #4]
 8009ada:	e9c6 1104 	strd	r1, r1, [r6, #16]
 8009ade:	e9c1 2202 	strd	r2, r2, [r1, #8]
 8009ae2:	604b      	str	r3, [r1, #4]
 8009ae4:	f844 000c 	str.w	r0, [r4, ip]
 8009ae8:	e7df      	b.n	8009aaa <_malloc_r+0x62>
 8009aea:	0a7b      	lsrs	r3, r7, #9
 8009aec:	d02a      	beq.n	8009b44 <_malloc_r+0xfc>
 8009aee:	2b04      	cmp	r3, #4
 8009af0:	d812      	bhi.n	8009b18 <_malloc_r+0xd0>
 8009af2:	09bb      	lsrs	r3, r7, #6
 8009af4:	3338      	adds	r3, #56	; 0x38
 8009af6:	1c5a      	adds	r2, r3, #1
 8009af8:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8009afc:	f1a2 0c08 	sub.w	ip, r2, #8
 8009b00:	6854      	ldr	r4, [r2, #4]
 8009b02:	4564      	cmp	r4, ip
 8009b04:	d006      	beq.n	8009b14 <_malloc_r+0xcc>
 8009b06:	6862      	ldr	r2, [r4, #4]
 8009b08:	f022 0203 	bic.w	r2, r2, #3
 8009b0c:	1bd0      	subs	r0, r2, r7
 8009b0e:	280f      	cmp	r0, #15
 8009b10:	dd1c      	ble.n	8009b4c <_malloc_r+0x104>
 8009b12:	3b01      	subs	r3, #1
 8009b14:	3301      	adds	r3, #1
 8009b16:	e7ce      	b.n	8009ab6 <_malloc_r+0x6e>
 8009b18:	2b14      	cmp	r3, #20
 8009b1a:	d801      	bhi.n	8009b20 <_malloc_r+0xd8>
 8009b1c:	335b      	adds	r3, #91	; 0x5b
 8009b1e:	e7ea      	b.n	8009af6 <_malloc_r+0xae>
 8009b20:	2b54      	cmp	r3, #84	; 0x54
 8009b22:	d802      	bhi.n	8009b2a <_malloc_r+0xe2>
 8009b24:	0b3b      	lsrs	r3, r7, #12
 8009b26:	336e      	adds	r3, #110	; 0x6e
 8009b28:	e7e5      	b.n	8009af6 <_malloc_r+0xae>
 8009b2a:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
 8009b2e:	d802      	bhi.n	8009b36 <_malloc_r+0xee>
 8009b30:	0bfb      	lsrs	r3, r7, #15
 8009b32:	3377      	adds	r3, #119	; 0x77
 8009b34:	e7df      	b.n	8009af6 <_malloc_r+0xae>
 8009b36:	f240 5254 	movw	r2, #1364	; 0x554
 8009b3a:	4293      	cmp	r3, r2
 8009b3c:	d804      	bhi.n	8009b48 <_malloc_r+0x100>
 8009b3e:	0cbb      	lsrs	r3, r7, #18
 8009b40:	337c      	adds	r3, #124	; 0x7c
 8009b42:	e7d8      	b.n	8009af6 <_malloc_r+0xae>
 8009b44:	233f      	movs	r3, #63	; 0x3f
 8009b46:	e7d6      	b.n	8009af6 <_malloc_r+0xae>
 8009b48:	237e      	movs	r3, #126	; 0x7e
 8009b4a:	e7d4      	b.n	8009af6 <_malloc_r+0xae>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	68e1      	ldr	r1, [r4, #12]
 8009b50:	db04      	blt.n	8009b5c <_malloc_r+0x114>
 8009b52:	68a3      	ldr	r3, [r4, #8]
 8009b54:	60d9      	str	r1, [r3, #12]
 8009b56:	608b      	str	r3, [r1, #8]
 8009b58:	18a3      	adds	r3, r4, r2
 8009b5a:	e7a2      	b.n	8009aa2 <_malloc_r+0x5a>
 8009b5c:	460c      	mov	r4, r1
 8009b5e:	e7d0      	b.n	8009b02 <_malloc_r+0xba>
 8009b60:	2800      	cmp	r0, #0
 8009b62:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009b66:	db07      	blt.n	8009b78 <_malloc_r+0x130>
 8009b68:	44a4      	add	ip, r4
 8009b6a:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8009b6e:	f043 0301 	orr.w	r3, r3, #1
 8009b72:	f8cc 3004 	str.w	r3, [ip, #4]
 8009b76:	e798      	b.n	8009aaa <_malloc_r+0x62>
 8009b78:	f5bc 7f00 	cmp.w	ip, #512	; 0x200
 8009b7c:	6870      	ldr	r0, [r6, #4]
 8009b7e:	f080 809e 	bcs.w	8009cbe <_malloc_r+0x276>
 8009b82:	ea4f 02dc 	mov.w	r2, ip, lsr #3
 8009b86:	ea4f 1e5c 	mov.w	lr, ip, lsr #5
 8009b8a:	f04f 0c01 	mov.w	ip, #1
 8009b8e:	3201      	adds	r2, #1
 8009b90:	fa0c fc0e 	lsl.w	ip, ip, lr
 8009b94:	ea4c 0000 	orr.w	r0, ip, r0
 8009b98:	6070      	str	r0, [r6, #4]
 8009b9a:	f856 c032 	ldr.w	ip, [r6, r2, lsl #3]
 8009b9e:	eb06 00c2 	add.w	r0, r6, r2, lsl #3
 8009ba2:	3808      	subs	r0, #8
 8009ba4:	e9c4 c002 	strd	ip, r0, [r4, #8]
 8009ba8:	f846 4032 	str.w	r4, [r6, r2, lsl #3]
 8009bac:	f8cc 400c 	str.w	r4, [ip, #12]
 8009bb0:	2001      	movs	r0, #1
 8009bb2:	109a      	asrs	r2, r3, #2
 8009bb4:	fa00 f202 	lsl.w	r2, r0, r2
 8009bb8:	6870      	ldr	r0, [r6, #4]
 8009bba:	4290      	cmp	r0, r2
 8009bbc:	d326      	bcc.n	8009c0c <_malloc_r+0x1c4>
 8009bbe:	4210      	tst	r0, r2
 8009bc0:	d106      	bne.n	8009bd0 <_malloc_r+0x188>
 8009bc2:	f023 0303 	bic.w	r3, r3, #3
 8009bc6:	0052      	lsls	r2, r2, #1
 8009bc8:	4210      	tst	r0, r2
 8009bca:	f103 0304 	add.w	r3, r3, #4
 8009bce:	d0fa      	beq.n	8009bc6 <_malloc_r+0x17e>
 8009bd0:	eb06 08c3 	add.w	r8, r6, r3, lsl #3
 8009bd4:	46c1      	mov	r9, r8
 8009bd6:	469e      	mov	lr, r3
 8009bd8:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8009bdc:	454c      	cmp	r4, r9
 8009bde:	f040 80b3 	bne.w	8009d48 <_malloc_r+0x300>
 8009be2:	f10e 0e01 	add.w	lr, lr, #1
 8009be6:	f01e 0f03 	tst.w	lr, #3
 8009bea:	f109 0908 	add.w	r9, r9, #8
 8009bee:	d1f3      	bne.n	8009bd8 <_malloc_r+0x190>
 8009bf0:	0798      	lsls	r0, r3, #30
 8009bf2:	f040 80ec 	bne.w	8009dce <_malloc_r+0x386>
 8009bf6:	6873      	ldr	r3, [r6, #4]
 8009bf8:	ea23 0302 	bic.w	r3, r3, r2
 8009bfc:	6073      	str	r3, [r6, #4]
 8009bfe:	6870      	ldr	r0, [r6, #4]
 8009c00:	0052      	lsls	r2, r2, #1
 8009c02:	4290      	cmp	r0, r2
 8009c04:	d302      	bcc.n	8009c0c <_malloc_r+0x1c4>
 8009c06:	2a00      	cmp	r2, #0
 8009c08:	f040 80ee 	bne.w	8009de8 <_malloc_r+0x3a0>
 8009c0c:	f8d6 b008 	ldr.w	fp, [r6, #8]
 8009c10:	f8db 1004 	ldr.w	r1, [fp, #4]
 8009c14:	f021 0903 	bic.w	r9, r1, #3
 8009c18:	45b9      	cmp	r9, r7
 8009c1a:	d304      	bcc.n	8009c26 <_malloc_r+0x1de>
 8009c1c:	eba9 0207 	sub.w	r2, r9, r7
 8009c20:	2a0f      	cmp	r2, #15
 8009c22:	f300 8149 	bgt.w	8009eb8 <_malloc_r+0x470>
 8009c26:	4a59      	ldr	r2, [pc, #356]	; (8009d8c <_malloc_r+0x344>)
 8009c28:	6811      	ldr	r1, [r2, #0]
 8009c2a:	3110      	adds	r1, #16
 8009c2c:	eb0b 0309 	add.w	r3, fp, r9
 8009c30:	4439      	add	r1, r7
 8009c32:	2008      	movs	r0, #8
 8009c34:	9301      	str	r3, [sp, #4]
 8009c36:	9100      	str	r1, [sp, #0]
 8009c38:	f002 feb2 	bl	800c9a0 <sysconf>
 8009c3c:	4a54      	ldr	r2, [pc, #336]	; (8009d90 <_malloc_r+0x348>)
 8009c3e:	e9dd 1300 	ldrd	r1, r3, [sp]
 8009c42:	4680      	mov	r8, r0
 8009c44:	6810      	ldr	r0, [r2, #0]
 8009c46:	3001      	adds	r0, #1
 8009c48:	bf1f      	itttt	ne
 8009c4a:	f101 31ff 	addne.w	r1, r1, #4294967295
 8009c4e:	4441      	addne	r1, r8
 8009c50:	f1c8 0000 	rsbne	r0, r8, #0
 8009c54:	4001      	andne	r1, r0
 8009c56:	4628      	mov	r0, r5
 8009c58:	e9cd 1300 	strd	r1, r3, [sp]
 8009c5c:	f000 fb56 	bl	800a30c <_sbrk_r>
 8009c60:	1c42      	adds	r2, r0, #1
 8009c62:	4604      	mov	r4, r0
 8009c64:	f000 80fc 	beq.w	8009e60 <_malloc_r+0x418>
 8009c68:	9b01      	ldr	r3, [sp, #4]
 8009c6a:	9900      	ldr	r1, [sp, #0]
 8009c6c:	4a48      	ldr	r2, [pc, #288]	; (8009d90 <_malloc_r+0x348>)
 8009c6e:	4283      	cmp	r3, r0
 8009c70:	d902      	bls.n	8009c78 <_malloc_r+0x230>
 8009c72:	45b3      	cmp	fp, r6
 8009c74:	f040 80f4 	bne.w	8009e60 <_malloc_r+0x418>
 8009c78:	f8df a120 	ldr.w	sl, [pc, #288]	; 8009d9c <_malloc_r+0x354>
 8009c7c:	f8da 0000 	ldr.w	r0, [sl]
 8009c80:	42a3      	cmp	r3, r4
 8009c82:	eb00 0e01 	add.w	lr, r0, r1
 8009c86:	f8ca e000 	str.w	lr, [sl]
 8009c8a:	f108 3cff 	add.w	ip, r8, #4294967295
 8009c8e:	f040 80ad 	bne.w	8009dec <_malloc_r+0x3a4>
 8009c92:	ea13 0f0c 	tst.w	r3, ip
 8009c96:	f040 80a9 	bne.w	8009dec <_malloc_r+0x3a4>
 8009c9a:	68b3      	ldr	r3, [r6, #8]
 8009c9c:	4449      	add	r1, r9
 8009c9e:	f041 0101 	orr.w	r1, r1, #1
 8009ca2:	6059      	str	r1, [r3, #4]
 8009ca4:	4a3b      	ldr	r2, [pc, #236]	; (8009d94 <_malloc_r+0x34c>)
 8009ca6:	f8da 3000 	ldr.w	r3, [sl]
 8009caa:	6811      	ldr	r1, [r2, #0]
 8009cac:	428b      	cmp	r3, r1
 8009cae:	bf88      	it	hi
 8009cb0:	6013      	strhi	r3, [r2, #0]
 8009cb2:	4a39      	ldr	r2, [pc, #228]	; (8009d98 <_malloc_r+0x350>)
 8009cb4:	6811      	ldr	r1, [r2, #0]
 8009cb6:	428b      	cmp	r3, r1
 8009cb8:	bf88      	it	hi
 8009cba:	6013      	strhi	r3, [r2, #0]
 8009cbc:	e0d0      	b.n	8009e60 <_malloc_r+0x418>
 8009cbe:	f5bc 6f20 	cmp.w	ip, #2560	; 0xa00
 8009cc2:	ea4f 225c 	mov.w	r2, ip, lsr #9
 8009cc6:	d218      	bcs.n	8009cfa <_malloc_r+0x2b2>
 8009cc8:	ea4f 129c 	mov.w	r2, ip, lsr #6
 8009ccc:	3238      	adds	r2, #56	; 0x38
 8009cce:	f102 0e01 	add.w	lr, r2, #1
 8009cd2:	eb06 08c2 	add.w	r8, r6, r2, lsl #3
 8009cd6:	f856 e03e 	ldr.w	lr, [r6, lr, lsl #3]
 8009cda:	45f0      	cmp	r8, lr
 8009cdc:	d12b      	bne.n	8009d36 <_malloc_r+0x2ee>
 8009cde:	1092      	asrs	r2, r2, #2
 8009ce0:	f04f 0c01 	mov.w	ip, #1
 8009ce4:	fa0c f202 	lsl.w	r2, ip, r2
 8009ce8:	4310      	orrs	r0, r2
 8009cea:	6070      	str	r0, [r6, #4]
 8009cec:	e9c4 e802 	strd	lr, r8, [r4, #8]
 8009cf0:	f8c8 4008 	str.w	r4, [r8, #8]
 8009cf4:	f8ce 400c 	str.w	r4, [lr, #12]
 8009cf8:	e75a      	b.n	8009bb0 <_malloc_r+0x168>
 8009cfa:	2a14      	cmp	r2, #20
 8009cfc:	d801      	bhi.n	8009d02 <_malloc_r+0x2ba>
 8009cfe:	325b      	adds	r2, #91	; 0x5b
 8009d00:	e7e5      	b.n	8009cce <_malloc_r+0x286>
 8009d02:	2a54      	cmp	r2, #84	; 0x54
 8009d04:	d803      	bhi.n	8009d0e <_malloc_r+0x2c6>
 8009d06:	ea4f 321c 	mov.w	r2, ip, lsr #12
 8009d0a:	326e      	adds	r2, #110	; 0x6e
 8009d0c:	e7df      	b.n	8009cce <_malloc_r+0x286>
 8009d0e:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 8009d12:	d803      	bhi.n	8009d1c <_malloc_r+0x2d4>
 8009d14:	ea4f 32dc 	mov.w	r2, ip, lsr #15
 8009d18:	3277      	adds	r2, #119	; 0x77
 8009d1a:	e7d8      	b.n	8009cce <_malloc_r+0x286>
 8009d1c:	f240 5e54 	movw	lr, #1364	; 0x554
 8009d20:	4572      	cmp	r2, lr
 8009d22:	bf9a      	itte	ls
 8009d24:	ea4f 429c 	movls.w	r2, ip, lsr #18
 8009d28:	327c      	addls	r2, #124	; 0x7c
 8009d2a:	227e      	movhi	r2, #126	; 0x7e
 8009d2c:	e7cf      	b.n	8009cce <_malloc_r+0x286>
 8009d2e:	f8de e008 	ldr.w	lr, [lr, #8]
 8009d32:	45f0      	cmp	r8, lr
 8009d34:	d005      	beq.n	8009d42 <_malloc_r+0x2fa>
 8009d36:	f8de 2004 	ldr.w	r2, [lr, #4]
 8009d3a:	f022 0203 	bic.w	r2, r2, #3
 8009d3e:	4562      	cmp	r2, ip
 8009d40:	d8f5      	bhi.n	8009d2e <_malloc_r+0x2e6>
 8009d42:	f8de 800c 	ldr.w	r8, [lr, #12]
 8009d46:	e7d1      	b.n	8009cec <_malloc_r+0x2a4>
 8009d48:	6860      	ldr	r0, [r4, #4]
 8009d4a:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8009d4e:	f020 0003 	bic.w	r0, r0, #3
 8009d52:	eba0 0a07 	sub.w	sl, r0, r7
 8009d56:	f1ba 0f0f 	cmp.w	sl, #15
 8009d5a:	dd21      	ble.n	8009da0 <_malloc_r+0x358>
 8009d5c:	68a3      	ldr	r3, [r4, #8]
 8009d5e:	19e2      	adds	r2, r4, r7
 8009d60:	f047 0701 	orr.w	r7, r7, #1
 8009d64:	6067      	str	r7, [r4, #4]
 8009d66:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009d6a:	f8cc 3008 	str.w	r3, [ip, #8]
 8009d6e:	f04a 0301 	orr.w	r3, sl, #1
 8009d72:	e9c6 2204 	strd	r2, r2, [r6, #16]
 8009d76:	e9c2 1102 	strd	r1, r1, [r2, #8]
 8009d7a:	6053      	str	r3, [r2, #4]
 8009d7c:	f844 a000 	str.w	sl, [r4, r0]
 8009d80:	e693      	b.n	8009aaa <_malloc_r+0x62>
 8009d82:	bf00      	nop
 8009d84:	20000798 	.word	0x20000798
 8009d88:	200007a0 	.word	0x200007a0
 8009d8c:	20000c8c 	.word	0x20000c8c
 8009d90:	20000ba0 	.word	0x20000ba0
 8009d94:	20000c84 	.word	0x20000c84
 8009d98:	20000c88 	.word	0x20000c88
 8009d9c:	20000c5c 	.word	0x20000c5c
 8009da0:	f1ba 0f00 	cmp.w	sl, #0
 8009da4:	db11      	blt.n	8009dca <_malloc_r+0x382>
 8009da6:	4420      	add	r0, r4
 8009da8:	6843      	ldr	r3, [r0, #4]
 8009daa:	f043 0301 	orr.w	r3, r3, #1
 8009dae:	6043      	str	r3, [r0, #4]
 8009db0:	f854 3f08 	ldr.w	r3, [r4, #8]!
 8009db4:	4628      	mov	r0, r5
 8009db6:	f8c3 c00c 	str.w	ip, [r3, #12]
 8009dba:	f8cc 3008 	str.w	r3, [ip, #8]
 8009dbe:	f000 f8df 	bl	8009f80 <__malloc_unlock>
 8009dc2:	4620      	mov	r0, r4
 8009dc4:	b003      	add	sp, #12
 8009dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dca:	4664      	mov	r4, ip
 8009dcc:	e706      	b.n	8009bdc <_malloc_r+0x194>
 8009dce:	f858 0908 	ldr.w	r0, [r8], #-8
 8009dd2:	4540      	cmp	r0, r8
 8009dd4:	f103 33ff 	add.w	r3, r3, #4294967295
 8009dd8:	f43f af0a 	beq.w	8009bf0 <_malloc_r+0x1a8>
 8009ddc:	e70f      	b.n	8009bfe <_malloc_r+0x1b6>
 8009dde:	3304      	adds	r3, #4
 8009de0:	0052      	lsls	r2, r2, #1
 8009de2:	4210      	tst	r0, r2
 8009de4:	d0fb      	beq.n	8009dde <_malloc_r+0x396>
 8009de6:	e6f3      	b.n	8009bd0 <_malloc_r+0x188>
 8009de8:	4673      	mov	r3, lr
 8009dea:	e7fa      	b.n	8009de2 <_malloc_r+0x39a>
 8009dec:	6810      	ldr	r0, [r2, #0]
 8009dee:	3001      	adds	r0, #1
 8009df0:	bf1b      	ittet	ne
 8009df2:	1ae3      	subne	r3, r4, r3
 8009df4:	4473      	addne	r3, lr
 8009df6:	6014      	streq	r4, [r2, #0]
 8009df8:	f8ca 3000 	strne.w	r3, [sl]
 8009dfc:	f014 0307 	ands.w	r3, r4, #7
 8009e00:	bf1a      	itte	ne
 8009e02:	f1c3 0008 	rsbne	r0, r3, #8
 8009e06:	1824      	addne	r4, r4, r0
 8009e08:	4618      	moveq	r0, r3
 8009e0a:	1862      	adds	r2, r4, r1
 8009e0c:	ea02 010c 	and.w	r1, r2, ip
 8009e10:	4480      	add	r8, r0
 8009e12:	eba8 0801 	sub.w	r8, r8, r1
 8009e16:	ea08 080c 	and.w	r8, r8, ip
 8009e1a:	4641      	mov	r1, r8
 8009e1c:	4628      	mov	r0, r5
 8009e1e:	9301      	str	r3, [sp, #4]
 8009e20:	9200      	str	r2, [sp, #0]
 8009e22:	f000 fa73 	bl	800a30c <_sbrk_r>
 8009e26:	1c43      	adds	r3, r0, #1
 8009e28:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e2c:	d105      	bne.n	8009e3a <_malloc_r+0x3f2>
 8009e2e:	b32b      	cbz	r3, 8009e7c <_malloc_r+0x434>
 8009e30:	f1a3 0008 	sub.w	r0, r3, #8
 8009e34:	4410      	add	r0, r2
 8009e36:	f04f 0800 	mov.w	r8, #0
 8009e3a:	f8da 2000 	ldr.w	r2, [sl]
 8009e3e:	60b4      	str	r4, [r6, #8]
 8009e40:	1b00      	subs	r0, r0, r4
 8009e42:	4440      	add	r0, r8
 8009e44:	4442      	add	r2, r8
 8009e46:	f040 0001 	orr.w	r0, r0, #1
 8009e4a:	45b3      	cmp	fp, r6
 8009e4c:	f8ca 2000 	str.w	r2, [sl]
 8009e50:	6060      	str	r0, [r4, #4]
 8009e52:	f43f af27 	beq.w	8009ca4 <_malloc_r+0x25c>
 8009e56:	f1b9 0f0f 	cmp.w	r9, #15
 8009e5a:	d812      	bhi.n	8009e82 <_malloc_r+0x43a>
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	6063      	str	r3, [r4, #4]
 8009e60:	68b3      	ldr	r3, [r6, #8]
 8009e62:	685b      	ldr	r3, [r3, #4]
 8009e64:	f023 0303 	bic.w	r3, r3, #3
 8009e68:	42bb      	cmp	r3, r7
 8009e6a:	eba3 0207 	sub.w	r2, r3, r7
 8009e6e:	d301      	bcc.n	8009e74 <_malloc_r+0x42c>
 8009e70:	2a0f      	cmp	r2, #15
 8009e72:	dc21      	bgt.n	8009eb8 <_malloc_r+0x470>
 8009e74:	4628      	mov	r0, r5
 8009e76:	f000 f883 	bl	8009f80 <__malloc_unlock>
 8009e7a:	e5f1      	b.n	8009a60 <_malloc_r+0x18>
 8009e7c:	4610      	mov	r0, r2
 8009e7e:	4698      	mov	r8, r3
 8009e80:	e7db      	b.n	8009e3a <_malloc_r+0x3f2>
 8009e82:	f8db 3004 	ldr.w	r3, [fp, #4]
 8009e86:	f1a9 090c 	sub.w	r9, r9, #12
 8009e8a:	f029 0907 	bic.w	r9, r9, #7
 8009e8e:	f003 0301 	and.w	r3, r3, #1
 8009e92:	ea43 0309 	orr.w	r3, r3, r9
 8009e96:	f8cb 3004 	str.w	r3, [fp, #4]
 8009e9a:	2205      	movs	r2, #5
 8009e9c:	eb0b 0309 	add.w	r3, fp, r9
 8009ea0:	f1b9 0f0f 	cmp.w	r9, #15
 8009ea4:	e9c3 2201 	strd	r2, r2, [r3, #4]
 8009ea8:	f67f aefc 	bls.w	8009ca4 <_malloc_r+0x25c>
 8009eac:	f10b 0108 	add.w	r1, fp, #8
 8009eb0:	4628      	mov	r0, r5
 8009eb2:	f003 fe21 	bl	800daf8 <_free_r>
 8009eb6:	e6f5      	b.n	8009ca4 <_malloc_r+0x25c>
 8009eb8:	68b4      	ldr	r4, [r6, #8]
 8009eba:	f047 0301 	orr.w	r3, r7, #1
 8009ebe:	4427      	add	r7, r4
 8009ec0:	f042 0201 	orr.w	r2, r2, #1
 8009ec4:	6063      	str	r3, [r4, #4]
 8009ec6:	60b7      	str	r7, [r6, #8]
 8009ec8:	607a      	str	r2, [r7, #4]
 8009eca:	e5ee      	b.n	8009aaa <_malloc_r+0x62>

08009ecc <_mbrtowc_r>:
 8009ecc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009ece:	4c0a      	ldr	r4, [pc, #40]	; (8009ef8 <_mbrtowc_r+0x2c>)
 8009ed0:	9e08      	ldr	r6, [sp, #32]
 8009ed2:	f8d4 70e4 	ldr.w	r7, [r4, #228]	; 0xe4
 8009ed6:	9600      	str	r6, [sp, #0]
 8009ed8:	4605      	mov	r5, r0
 8009eda:	4614      	mov	r4, r2
 8009edc:	b912      	cbnz	r2, 8009ee4 <_mbrtowc_r+0x18>
 8009ede:	4a07      	ldr	r2, [pc, #28]	; (8009efc <_mbrtowc_r+0x30>)
 8009ee0:	2301      	movs	r3, #1
 8009ee2:	4621      	mov	r1, r4
 8009ee4:	47b8      	blx	r7
 8009ee6:	1c43      	adds	r3, r0, #1
 8009ee8:	bf01      	itttt	eq
 8009eea:	2300      	moveq	r3, #0
 8009eec:	6033      	streq	r3, [r6, #0]
 8009eee:	238a      	moveq	r3, #138	; 0x8a
 8009ef0:	602b      	streq	r3, [r5, #0]
 8009ef2:	b003      	add	sp, #12
 8009ef4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009ef6:	bf00      	nop
 8009ef8:	2000062c 	.word	0x2000062c
 8009efc:	08010b27 	.word	0x08010b27

08009f00 <__ascii_mbtowc>:
 8009f00:	b082      	sub	sp, #8
 8009f02:	b901      	cbnz	r1, 8009f06 <__ascii_mbtowc+0x6>
 8009f04:	a901      	add	r1, sp, #4
 8009f06:	b142      	cbz	r2, 8009f1a <__ascii_mbtowc+0x1a>
 8009f08:	b14b      	cbz	r3, 8009f1e <__ascii_mbtowc+0x1e>
 8009f0a:	7813      	ldrb	r3, [r2, #0]
 8009f0c:	600b      	str	r3, [r1, #0]
 8009f0e:	7812      	ldrb	r2, [r2, #0]
 8009f10:	1e10      	subs	r0, r2, #0
 8009f12:	bf18      	it	ne
 8009f14:	2001      	movne	r0, #1
 8009f16:	b002      	add	sp, #8
 8009f18:	4770      	bx	lr
 8009f1a:	4610      	mov	r0, r2
 8009f1c:	e7fb      	b.n	8009f16 <__ascii_mbtowc+0x16>
 8009f1e:	f06f 0001 	mvn.w	r0, #1
 8009f22:	e7f8      	b.n	8009f16 <__ascii_mbtowc+0x16>

08009f24 <memcpy>:
 8009f24:	440a      	add	r2, r1
 8009f26:	4291      	cmp	r1, r2
 8009f28:	f100 33ff 	add.w	r3, r0, #4294967295
 8009f2c:	d100      	bne.n	8009f30 <memcpy+0xc>
 8009f2e:	4770      	bx	lr
 8009f30:	b510      	push	{r4, lr}
 8009f32:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f36:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009f3a:	4291      	cmp	r1, r2
 8009f3c:	d1f9      	bne.n	8009f32 <memcpy+0xe>
 8009f3e:	bd10      	pop	{r4, pc}

08009f40 <memmove>:
 8009f40:	4288      	cmp	r0, r1
 8009f42:	b510      	push	{r4, lr}
 8009f44:	eb01 0402 	add.w	r4, r1, r2
 8009f48:	d902      	bls.n	8009f50 <memmove+0x10>
 8009f4a:	4284      	cmp	r4, r0
 8009f4c:	4623      	mov	r3, r4
 8009f4e:	d807      	bhi.n	8009f60 <memmove+0x20>
 8009f50:	1e43      	subs	r3, r0, #1
 8009f52:	42a1      	cmp	r1, r4
 8009f54:	d008      	beq.n	8009f68 <memmove+0x28>
 8009f56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009f5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8009f5e:	e7f8      	b.n	8009f52 <memmove+0x12>
 8009f60:	4402      	add	r2, r0
 8009f62:	4601      	mov	r1, r0
 8009f64:	428a      	cmp	r2, r1
 8009f66:	d100      	bne.n	8009f6a <memmove+0x2a>
 8009f68:	bd10      	pop	{r4, pc}
 8009f6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009f6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009f72:	e7f7      	b.n	8009f64 <memmove+0x24>

08009f74 <__malloc_lock>:
 8009f74:	4801      	ldr	r0, [pc, #4]	; (8009f7c <__malloc_lock+0x8>)
 8009f76:	f7ff bd43 	b.w	8009a00 <__retarget_lock_acquire_recursive>
 8009f7a:	bf00      	nop
 8009f7c:	20001768 	.word	0x20001768

08009f80 <__malloc_unlock>:
 8009f80:	4801      	ldr	r0, [pc, #4]	; (8009f88 <__malloc_unlock+0x8>)
 8009f82:	f7ff bd3e 	b.w	8009a02 <__retarget_lock_release_recursive>
 8009f86:	bf00      	nop
 8009f88:	20001768 	.word	0x20001768

08009f8c <_read_r>:
 8009f8c:	b538      	push	{r3, r4, r5, lr}
 8009f8e:	4d07      	ldr	r5, [pc, #28]	; (8009fac <_read_r+0x20>)
 8009f90:	4604      	mov	r4, r0
 8009f92:	4608      	mov	r0, r1
 8009f94:	4611      	mov	r1, r2
 8009f96:	2200      	movs	r2, #0
 8009f98:	602a      	str	r2, [r5, #0]
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	f7f9 fe36 	bl	8003c0c <_read>
 8009fa0:	1c43      	adds	r3, r0, #1
 8009fa2:	d102      	bne.n	8009faa <_read_r+0x1e>
 8009fa4:	682b      	ldr	r3, [r5, #0]
 8009fa6:	b103      	cbz	r3, 8009faa <_read_r+0x1e>
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	bd38      	pop	{r3, r4, r5, pc}
 8009fac:	20001770 	.word	0x20001770

08009fb0 <realloc>:
 8009fb0:	4b02      	ldr	r3, [pc, #8]	; (8009fbc <realloc+0xc>)
 8009fb2:	460a      	mov	r2, r1
 8009fb4:	4601      	mov	r1, r0
 8009fb6:	6818      	ldr	r0, [r3, #0]
 8009fb8:	f000 b802 	b.w	8009fc0 <_realloc_r>
 8009fbc:	200001f8 	.word	0x200001f8

08009fc0 <_realloc_r>:
 8009fc0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fc4:	4681      	mov	r9, r0
 8009fc6:	460c      	mov	r4, r1
 8009fc8:	b929      	cbnz	r1, 8009fd6 <_realloc_r+0x16>
 8009fca:	4611      	mov	r1, r2
 8009fcc:	b003      	add	sp, #12
 8009fce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd2:	f7ff bd39 	b.w	8009a48 <_malloc_r>
 8009fd6:	9201      	str	r2, [sp, #4]
 8009fd8:	f7ff ffcc 	bl	8009f74 <__malloc_lock>
 8009fdc:	9a01      	ldr	r2, [sp, #4]
 8009fde:	f102 080b 	add.w	r8, r2, #11
 8009fe2:	f1b8 0f16 	cmp.w	r8, #22
 8009fe6:	d90b      	bls.n	800a000 <_realloc_r+0x40>
 8009fe8:	f038 0807 	bics.w	r8, r8, #7
 8009fec:	d50a      	bpl.n	800a004 <_realloc_r+0x44>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	f8c9 3000 	str.w	r3, [r9]
 8009ff4:	f04f 0b00 	mov.w	fp, #0
 8009ff8:	4658      	mov	r0, fp
 8009ffa:	b003      	add	sp, #12
 8009ffc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a000:	f04f 0810 	mov.w	r8, #16
 800a004:	4590      	cmp	r8, r2
 800a006:	d3f2      	bcc.n	8009fee <_realloc_r+0x2e>
 800a008:	f854 5c04 	ldr.w	r5, [r4, #-4]
 800a00c:	f025 0603 	bic.w	r6, r5, #3
 800a010:	45b0      	cmp	r8, r6
 800a012:	f1a4 0a08 	sub.w	sl, r4, #8
 800a016:	f340 8170 	ble.w	800a2fa <_realloc_r+0x33a>
 800a01a:	48a9      	ldr	r0, [pc, #676]	; (800a2c0 <_realloc_r+0x300>)
 800a01c:	9001      	str	r0, [sp, #4]
 800a01e:	f8d0 c008 	ldr.w	ip, [r0, #8]
 800a022:	eb0a 0306 	add.w	r3, sl, r6
 800a026:	459c      	cmp	ip, r3
 800a028:	6859      	ldr	r1, [r3, #4]
 800a02a:	d005      	beq.n	800a038 <_realloc_r+0x78>
 800a02c:	f021 0001 	bic.w	r0, r1, #1
 800a030:	4418      	add	r0, r3
 800a032:	6840      	ldr	r0, [r0, #4]
 800a034:	07c7      	lsls	r7, r0, #31
 800a036:	d427      	bmi.n	800a088 <_realloc_r+0xc8>
 800a038:	f021 0103 	bic.w	r1, r1, #3
 800a03c:	459c      	cmp	ip, r3
 800a03e:	eb06 0701 	add.w	r7, r6, r1
 800a042:	d119      	bne.n	800a078 <_realloc_r+0xb8>
 800a044:	f108 0010 	add.w	r0, r8, #16
 800a048:	42b8      	cmp	r0, r7
 800a04a:	dc1f      	bgt.n	800a08c <_realloc_r+0xcc>
 800a04c:	eb0a 0308 	add.w	r3, sl, r8
 800a050:	9a01      	ldr	r2, [sp, #4]
 800a052:	eba7 0708 	sub.w	r7, r7, r8
 800a056:	f047 0701 	orr.w	r7, r7, #1
 800a05a:	6093      	str	r3, [r2, #8]
 800a05c:	605f      	str	r7, [r3, #4]
 800a05e:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a062:	f003 0301 	and.w	r3, r3, #1
 800a066:	ea43 0308 	orr.w	r3, r3, r8
 800a06a:	f844 3c04 	str.w	r3, [r4, #-4]
 800a06e:	4648      	mov	r0, r9
 800a070:	f7ff ff86 	bl	8009f80 <__malloc_unlock>
 800a074:	46a3      	mov	fp, r4
 800a076:	e7bf      	b.n	8009ff8 <_realloc_r+0x38>
 800a078:	45b8      	cmp	r8, r7
 800a07a:	dc07      	bgt.n	800a08c <_realloc_r+0xcc>
 800a07c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a080:	60da      	str	r2, [r3, #12]
 800a082:	6093      	str	r3, [r2, #8]
 800a084:	4655      	mov	r5, sl
 800a086:	e07f      	b.n	800a188 <_realloc_r+0x1c8>
 800a088:	2100      	movs	r1, #0
 800a08a:	460b      	mov	r3, r1
 800a08c:	07e8      	lsls	r0, r5, #31
 800a08e:	f100 80e5 	bmi.w	800a25c <_realloc_r+0x29c>
 800a092:	f854 5c08 	ldr.w	r5, [r4, #-8]
 800a096:	ebaa 0505 	sub.w	r5, sl, r5
 800a09a:	6868      	ldr	r0, [r5, #4]
 800a09c:	f020 0003 	bic.w	r0, r0, #3
 800a0a0:	eb00 0b06 	add.w	fp, r0, r6
 800a0a4:	2b00      	cmp	r3, #0
 800a0a6:	f000 80a5 	beq.w	800a1f4 <_realloc_r+0x234>
 800a0aa:	459c      	cmp	ip, r3
 800a0ac:	eb01 070b 	add.w	r7, r1, fp
 800a0b0:	d14a      	bne.n	800a148 <_realloc_r+0x188>
 800a0b2:	f108 0310 	add.w	r3, r8, #16
 800a0b6:	42bb      	cmp	r3, r7
 800a0b8:	f300 809c 	bgt.w	800a1f4 <_realloc_r+0x234>
 800a0bc:	46ab      	mov	fp, r5
 800a0be:	68eb      	ldr	r3, [r5, #12]
 800a0c0:	f85b 2f08 	ldr.w	r2, [fp, #8]!
 800a0c4:	60d3      	str	r3, [r2, #12]
 800a0c6:	609a      	str	r2, [r3, #8]
 800a0c8:	1f32      	subs	r2, r6, #4
 800a0ca:	2a24      	cmp	r2, #36	; 0x24
 800a0cc:	d837      	bhi.n	800a13e <_realloc_r+0x17e>
 800a0ce:	2a13      	cmp	r2, #19
 800a0d0:	d933      	bls.n	800a13a <_realloc_r+0x17a>
 800a0d2:	6823      	ldr	r3, [r4, #0]
 800a0d4:	60ab      	str	r3, [r5, #8]
 800a0d6:	6863      	ldr	r3, [r4, #4]
 800a0d8:	60eb      	str	r3, [r5, #12]
 800a0da:	2a1b      	cmp	r2, #27
 800a0dc:	d81b      	bhi.n	800a116 <_realloc_r+0x156>
 800a0de:	3408      	adds	r4, #8
 800a0e0:	f105 0310 	add.w	r3, r5, #16
 800a0e4:	6822      	ldr	r2, [r4, #0]
 800a0e6:	601a      	str	r2, [r3, #0]
 800a0e8:	6862      	ldr	r2, [r4, #4]
 800a0ea:	605a      	str	r2, [r3, #4]
 800a0ec:	68a2      	ldr	r2, [r4, #8]
 800a0ee:	609a      	str	r2, [r3, #8]
 800a0f0:	eb05 0308 	add.w	r3, r5, r8
 800a0f4:	9a01      	ldr	r2, [sp, #4]
 800a0f6:	eba7 0708 	sub.w	r7, r7, r8
 800a0fa:	f047 0701 	orr.w	r7, r7, #1
 800a0fe:	6093      	str	r3, [r2, #8]
 800a100:	605f      	str	r7, [r3, #4]
 800a102:	686b      	ldr	r3, [r5, #4]
 800a104:	f003 0301 	and.w	r3, r3, #1
 800a108:	ea43 0308 	orr.w	r3, r3, r8
 800a10c:	606b      	str	r3, [r5, #4]
 800a10e:	4648      	mov	r0, r9
 800a110:	f7ff ff36 	bl	8009f80 <__malloc_unlock>
 800a114:	e770      	b.n	8009ff8 <_realloc_r+0x38>
 800a116:	68a3      	ldr	r3, [r4, #8]
 800a118:	612b      	str	r3, [r5, #16]
 800a11a:	68e3      	ldr	r3, [r4, #12]
 800a11c:	616b      	str	r3, [r5, #20]
 800a11e:	2a24      	cmp	r2, #36	; 0x24
 800a120:	bf01      	itttt	eq
 800a122:	6923      	ldreq	r3, [r4, #16]
 800a124:	61ab      	streq	r3, [r5, #24]
 800a126:	6962      	ldreq	r2, [r4, #20]
 800a128:	61ea      	streq	r2, [r5, #28]
 800a12a:	bf19      	ittee	ne
 800a12c:	3410      	addne	r4, #16
 800a12e:	f105 0318 	addne.w	r3, r5, #24
 800a132:	f105 0320 	addeq.w	r3, r5, #32
 800a136:	3418      	addeq	r4, #24
 800a138:	e7d4      	b.n	800a0e4 <_realloc_r+0x124>
 800a13a:	465b      	mov	r3, fp
 800a13c:	e7d2      	b.n	800a0e4 <_realloc_r+0x124>
 800a13e:	4621      	mov	r1, r4
 800a140:	4658      	mov	r0, fp
 800a142:	f7ff fefd 	bl	8009f40 <memmove>
 800a146:	e7d3      	b.n	800a0f0 <_realloc_r+0x130>
 800a148:	45b8      	cmp	r8, r7
 800a14a:	dc53      	bgt.n	800a1f4 <_realloc_r+0x234>
 800a14c:	e9d3 3202 	ldrd	r3, r2, [r3, #8]
 800a150:	4628      	mov	r0, r5
 800a152:	60da      	str	r2, [r3, #12]
 800a154:	6093      	str	r3, [r2, #8]
 800a156:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a15a:	68eb      	ldr	r3, [r5, #12]
 800a15c:	60d3      	str	r3, [r2, #12]
 800a15e:	609a      	str	r2, [r3, #8]
 800a160:	1f32      	subs	r2, r6, #4
 800a162:	2a24      	cmp	r2, #36	; 0x24
 800a164:	d842      	bhi.n	800a1ec <_realloc_r+0x22c>
 800a166:	2a13      	cmp	r2, #19
 800a168:	d908      	bls.n	800a17c <_realloc_r+0x1bc>
 800a16a:	6823      	ldr	r3, [r4, #0]
 800a16c:	60ab      	str	r3, [r5, #8]
 800a16e:	6863      	ldr	r3, [r4, #4]
 800a170:	60eb      	str	r3, [r5, #12]
 800a172:	2a1b      	cmp	r2, #27
 800a174:	d828      	bhi.n	800a1c8 <_realloc_r+0x208>
 800a176:	3408      	adds	r4, #8
 800a178:	f105 0010 	add.w	r0, r5, #16
 800a17c:	6823      	ldr	r3, [r4, #0]
 800a17e:	6003      	str	r3, [r0, #0]
 800a180:	6863      	ldr	r3, [r4, #4]
 800a182:	6043      	str	r3, [r0, #4]
 800a184:	68a3      	ldr	r3, [r4, #8]
 800a186:	6083      	str	r3, [r0, #8]
 800a188:	686a      	ldr	r2, [r5, #4]
 800a18a:	eba7 0008 	sub.w	r0, r7, r8
 800a18e:	280f      	cmp	r0, #15
 800a190:	f002 0201 	and.w	r2, r2, #1
 800a194:	eb05 0307 	add.w	r3, r5, r7
 800a198:	f240 80b1 	bls.w	800a2fe <_realloc_r+0x33e>
 800a19c:	eb05 0108 	add.w	r1, r5, r8
 800a1a0:	ea48 0202 	orr.w	r2, r8, r2
 800a1a4:	f040 0001 	orr.w	r0, r0, #1
 800a1a8:	606a      	str	r2, [r5, #4]
 800a1aa:	6048      	str	r0, [r1, #4]
 800a1ac:	685a      	ldr	r2, [r3, #4]
 800a1ae:	f042 0201 	orr.w	r2, r2, #1
 800a1b2:	605a      	str	r2, [r3, #4]
 800a1b4:	3108      	adds	r1, #8
 800a1b6:	4648      	mov	r0, r9
 800a1b8:	f003 fc9e 	bl	800daf8 <_free_r>
 800a1bc:	4648      	mov	r0, r9
 800a1be:	f7ff fedf 	bl	8009f80 <__malloc_unlock>
 800a1c2:	f105 0b08 	add.w	fp, r5, #8
 800a1c6:	e717      	b.n	8009ff8 <_realloc_r+0x38>
 800a1c8:	68a3      	ldr	r3, [r4, #8]
 800a1ca:	612b      	str	r3, [r5, #16]
 800a1cc:	68e3      	ldr	r3, [r4, #12]
 800a1ce:	616b      	str	r3, [r5, #20]
 800a1d0:	2a24      	cmp	r2, #36	; 0x24
 800a1d2:	bf01      	itttt	eq
 800a1d4:	6923      	ldreq	r3, [r4, #16]
 800a1d6:	61ab      	streq	r3, [r5, #24]
 800a1d8:	6963      	ldreq	r3, [r4, #20]
 800a1da:	61eb      	streq	r3, [r5, #28]
 800a1dc:	bf19      	ittee	ne
 800a1de:	3410      	addne	r4, #16
 800a1e0:	f105 0018 	addne.w	r0, r5, #24
 800a1e4:	f105 0020 	addeq.w	r0, r5, #32
 800a1e8:	3418      	addeq	r4, #24
 800a1ea:	e7c7      	b.n	800a17c <_realloc_r+0x1bc>
 800a1ec:	4621      	mov	r1, r4
 800a1ee:	f7ff fea7 	bl	8009f40 <memmove>
 800a1f2:	e7c9      	b.n	800a188 <_realloc_r+0x1c8>
 800a1f4:	45d8      	cmp	r8, fp
 800a1f6:	dc31      	bgt.n	800a25c <_realloc_r+0x29c>
 800a1f8:	4628      	mov	r0, r5
 800a1fa:	68eb      	ldr	r3, [r5, #12]
 800a1fc:	f850 2f08 	ldr.w	r2, [r0, #8]!
 800a200:	60d3      	str	r3, [r2, #12]
 800a202:	609a      	str	r2, [r3, #8]
 800a204:	1f32      	subs	r2, r6, #4
 800a206:	2a24      	cmp	r2, #36	; 0x24
 800a208:	d824      	bhi.n	800a254 <_realloc_r+0x294>
 800a20a:	2a13      	cmp	r2, #19
 800a20c:	d908      	bls.n	800a220 <_realloc_r+0x260>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	60ab      	str	r3, [r5, #8]
 800a212:	6863      	ldr	r3, [r4, #4]
 800a214:	60eb      	str	r3, [r5, #12]
 800a216:	2a1b      	cmp	r2, #27
 800a218:	d80a      	bhi.n	800a230 <_realloc_r+0x270>
 800a21a:	3408      	adds	r4, #8
 800a21c:	f105 0010 	add.w	r0, r5, #16
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	6003      	str	r3, [r0, #0]
 800a224:	6863      	ldr	r3, [r4, #4]
 800a226:	6043      	str	r3, [r0, #4]
 800a228:	68a3      	ldr	r3, [r4, #8]
 800a22a:	6083      	str	r3, [r0, #8]
 800a22c:	465f      	mov	r7, fp
 800a22e:	e7ab      	b.n	800a188 <_realloc_r+0x1c8>
 800a230:	68a3      	ldr	r3, [r4, #8]
 800a232:	612b      	str	r3, [r5, #16]
 800a234:	68e3      	ldr	r3, [r4, #12]
 800a236:	616b      	str	r3, [r5, #20]
 800a238:	2a24      	cmp	r2, #36	; 0x24
 800a23a:	bf01      	itttt	eq
 800a23c:	6923      	ldreq	r3, [r4, #16]
 800a23e:	61ab      	streq	r3, [r5, #24]
 800a240:	6963      	ldreq	r3, [r4, #20]
 800a242:	61eb      	streq	r3, [r5, #28]
 800a244:	bf19      	ittee	ne
 800a246:	3410      	addne	r4, #16
 800a248:	f105 0018 	addne.w	r0, r5, #24
 800a24c:	f105 0020 	addeq.w	r0, r5, #32
 800a250:	3418      	addeq	r4, #24
 800a252:	e7e5      	b.n	800a220 <_realloc_r+0x260>
 800a254:	4621      	mov	r1, r4
 800a256:	f7ff fe73 	bl	8009f40 <memmove>
 800a25a:	e7e7      	b.n	800a22c <_realloc_r+0x26c>
 800a25c:	4611      	mov	r1, r2
 800a25e:	4648      	mov	r0, r9
 800a260:	f7ff fbf2 	bl	8009a48 <_malloc_r>
 800a264:	4683      	mov	fp, r0
 800a266:	2800      	cmp	r0, #0
 800a268:	f43f af51 	beq.w	800a10e <_realloc_r+0x14e>
 800a26c:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800a270:	f023 0301 	bic.w	r3, r3, #1
 800a274:	4453      	add	r3, sl
 800a276:	f1a0 0208 	sub.w	r2, r0, #8
 800a27a:	4293      	cmp	r3, r2
 800a27c:	d105      	bne.n	800a28a <_realloc_r+0x2ca>
 800a27e:	f850 7c04 	ldr.w	r7, [r0, #-4]
 800a282:	f027 0703 	bic.w	r7, r7, #3
 800a286:	4437      	add	r7, r6
 800a288:	e6fc      	b.n	800a084 <_realloc_r+0xc4>
 800a28a:	1f32      	subs	r2, r6, #4
 800a28c:	2a24      	cmp	r2, #36	; 0x24
 800a28e:	d830      	bhi.n	800a2f2 <_realloc_r+0x332>
 800a290:	2a13      	cmp	r2, #19
 800a292:	d92b      	bls.n	800a2ec <_realloc_r+0x32c>
 800a294:	6823      	ldr	r3, [r4, #0]
 800a296:	6003      	str	r3, [r0, #0]
 800a298:	6863      	ldr	r3, [r4, #4]
 800a29a:	6043      	str	r3, [r0, #4]
 800a29c:	2a1b      	cmp	r2, #27
 800a29e:	d811      	bhi.n	800a2c4 <_realloc_r+0x304>
 800a2a0:	f104 0208 	add.w	r2, r4, #8
 800a2a4:	f100 0308 	add.w	r3, r0, #8
 800a2a8:	6811      	ldr	r1, [r2, #0]
 800a2aa:	6019      	str	r1, [r3, #0]
 800a2ac:	6851      	ldr	r1, [r2, #4]
 800a2ae:	6059      	str	r1, [r3, #4]
 800a2b0:	6892      	ldr	r2, [r2, #8]
 800a2b2:	609a      	str	r2, [r3, #8]
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	4648      	mov	r0, r9
 800a2b8:	f003 fc1e 	bl	800daf8 <_free_r>
 800a2bc:	e727      	b.n	800a10e <_realloc_r+0x14e>
 800a2be:	bf00      	nop
 800a2c0:	20000798 	.word	0x20000798
 800a2c4:	68a3      	ldr	r3, [r4, #8]
 800a2c6:	6083      	str	r3, [r0, #8]
 800a2c8:	68e3      	ldr	r3, [r4, #12]
 800a2ca:	60c3      	str	r3, [r0, #12]
 800a2cc:	2a24      	cmp	r2, #36	; 0x24
 800a2ce:	bf01      	itttt	eq
 800a2d0:	6923      	ldreq	r3, [r4, #16]
 800a2d2:	6103      	streq	r3, [r0, #16]
 800a2d4:	6961      	ldreq	r1, [r4, #20]
 800a2d6:	6141      	streq	r1, [r0, #20]
 800a2d8:	bf19      	ittee	ne
 800a2da:	f104 0210 	addne.w	r2, r4, #16
 800a2de:	f100 0310 	addne.w	r3, r0, #16
 800a2e2:	f104 0218 	addeq.w	r2, r4, #24
 800a2e6:	f100 0318 	addeq.w	r3, r0, #24
 800a2ea:	e7dd      	b.n	800a2a8 <_realloc_r+0x2e8>
 800a2ec:	4603      	mov	r3, r0
 800a2ee:	4622      	mov	r2, r4
 800a2f0:	e7da      	b.n	800a2a8 <_realloc_r+0x2e8>
 800a2f2:	4621      	mov	r1, r4
 800a2f4:	f7ff fe24 	bl	8009f40 <memmove>
 800a2f8:	e7dc      	b.n	800a2b4 <_realloc_r+0x2f4>
 800a2fa:	4637      	mov	r7, r6
 800a2fc:	e6c2      	b.n	800a084 <_realloc_r+0xc4>
 800a2fe:	4317      	orrs	r7, r2
 800a300:	606f      	str	r7, [r5, #4]
 800a302:	685a      	ldr	r2, [r3, #4]
 800a304:	f042 0201 	orr.w	r2, r2, #1
 800a308:	605a      	str	r2, [r3, #4]
 800a30a:	e757      	b.n	800a1bc <_realloc_r+0x1fc>

0800a30c <_sbrk_r>:
 800a30c:	b538      	push	{r3, r4, r5, lr}
 800a30e:	4d06      	ldr	r5, [pc, #24]	; (800a328 <_sbrk_r+0x1c>)
 800a310:	2300      	movs	r3, #0
 800a312:	4604      	mov	r4, r0
 800a314:	4608      	mov	r0, r1
 800a316:	602b      	str	r3, [r5, #0]
 800a318:	f7f9 fcca 	bl	8003cb0 <_sbrk>
 800a31c:	1c43      	adds	r3, r0, #1
 800a31e:	d102      	bne.n	800a326 <_sbrk_r+0x1a>
 800a320:	682b      	ldr	r3, [r5, #0]
 800a322:	b103      	cbz	r3, 800a326 <_sbrk_r+0x1a>
 800a324:	6023      	str	r3, [r4, #0]
 800a326:	bd38      	pop	{r3, r4, r5, pc}
 800a328:	20001770 	.word	0x20001770

0800a32c <__sccl>:
 800a32c:	b570      	push	{r4, r5, r6, lr}
 800a32e:	780b      	ldrb	r3, [r1, #0]
 800a330:	4604      	mov	r4, r0
 800a332:	2b5e      	cmp	r3, #94	; 0x5e
 800a334:	bf0b      	itete	eq
 800a336:	784b      	ldrbeq	r3, [r1, #1]
 800a338:	1c48      	addne	r0, r1, #1
 800a33a:	1c88      	addeq	r0, r1, #2
 800a33c:	2200      	movne	r2, #0
 800a33e:	bf08      	it	eq
 800a340:	2201      	moveq	r2, #1
 800a342:	1e61      	subs	r1, r4, #1
 800a344:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a348:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a34c:	42a9      	cmp	r1, r5
 800a34e:	d1fb      	bne.n	800a348 <__sccl+0x1c>
 800a350:	b90b      	cbnz	r3, 800a356 <__sccl+0x2a>
 800a352:	3801      	subs	r0, #1
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	f082 0101 	eor.w	r1, r2, #1
 800a35a:	54e1      	strb	r1, [r4, r3]
 800a35c:	1c42      	adds	r2, r0, #1
 800a35e:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800a362:	2d2d      	cmp	r5, #45	; 0x2d
 800a364:	f102 36ff 	add.w	r6, r2, #4294967295
 800a368:	4610      	mov	r0, r2
 800a36a:	d006      	beq.n	800a37a <__sccl+0x4e>
 800a36c:	2d5d      	cmp	r5, #93	; 0x5d
 800a36e:	d0f1      	beq.n	800a354 <__sccl+0x28>
 800a370:	b90d      	cbnz	r5, 800a376 <__sccl+0x4a>
 800a372:	4630      	mov	r0, r6
 800a374:	e7ee      	b.n	800a354 <__sccl+0x28>
 800a376:	462b      	mov	r3, r5
 800a378:	e7ef      	b.n	800a35a <__sccl+0x2e>
 800a37a:	7816      	ldrb	r6, [r2, #0]
 800a37c:	2e5d      	cmp	r6, #93	; 0x5d
 800a37e:	d0fa      	beq.n	800a376 <__sccl+0x4a>
 800a380:	42b3      	cmp	r3, r6
 800a382:	dcf8      	bgt.n	800a376 <__sccl+0x4a>
 800a384:	4618      	mov	r0, r3
 800a386:	3001      	adds	r0, #1
 800a388:	4286      	cmp	r6, r0
 800a38a:	5421      	strb	r1, [r4, r0]
 800a38c:	dcfb      	bgt.n	800a386 <__sccl+0x5a>
 800a38e:	43d8      	mvns	r0, r3
 800a390:	4430      	add	r0, r6
 800a392:	1c5d      	adds	r5, r3, #1
 800a394:	42b3      	cmp	r3, r6
 800a396:	bfa8      	it	ge
 800a398:	2000      	movge	r0, #0
 800a39a:	182b      	adds	r3, r5, r0
 800a39c:	3202      	adds	r2, #2
 800a39e:	e7de      	b.n	800a35e <__sccl+0x32>

0800a3a0 <nanf>:
 800a3a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a3a8 <nanf+0x8>
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	7fc00000 	.word	0x7fc00000

0800a3ac <sprintf>:
 800a3ac:	b40e      	push	{r1, r2, r3}
 800a3ae:	b500      	push	{lr}
 800a3b0:	b09c      	sub	sp, #112	; 0x70
 800a3b2:	ab1d      	add	r3, sp, #116	; 0x74
 800a3b4:	9002      	str	r0, [sp, #8]
 800a3b6:	9006      	str	r0, [sp, #24]
 800a3b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a3bc:	4809      	ldr	r0, [pc, #36]	; (800a3e4 <sprintf+0x38>)
 800a3be:	9107      	str	r1, [sp, #28]
 800a3c0:	9104      	str	r1, [sp, #16]
 800a3c2:	4909      	ldr	r1, [pc, #36]	; (800a3e8 <sprintf+0x3c>)
 800a3c4:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3c8:	9105      	str	r1, [sp, #20]
 800a3ca:	6800      	ldr	r0, [r0, #0]
 800a3cc:	9301      	str	r3, [sp, #4]
 800a3ce:	a902      	add	r1, sp, #8
 800a3d0:	f001 f906 	bl	800b5e0 <_svfprintf_r>
 800a3d4:	9b02      	ldr	r3, [sp, #8]
 800a3d6:	2200      	movs	r2, #0
 800a3d8:	701a      	strb	r2, [r3, #0]
 800a3da:	b01c      	add	sp, #112	; 0x70
 800a3dc:	f85d eb04 	ldr.w	lr, [sp], #4
 800a3e0:	b003      	add	sp, #12
 800a3e2:	4770      	bx	lr
 800a3e4:	200001f8 	.word	0x200001f8
 800a3e8:	ffff0208 	.word	0xffff0208

0800a3ec <sulp>:
 800a3ec:	b570      	push	{r4, r5, r6, lr}
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	460d      	mov	r5, r1
 800a3f2:	ec45 4b10 	vmov	d0, r4, r5
 800a3f6:	4616      	mov	r6, r2
 800a3f8:	f004 fb38 	bl	800ea6c <__ulp>
 800a3fc:	ec51 0b10 	vmov	r0, r1, d0
 800a400:	b17e      	cbz	r6, 800a422 <sulp+0x36>
 800a402:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a406:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a40a:	2b00      	cmp	r3, #0
 800a40c:	dd09      	ble.n	800a422 <sulp+0x36>
 800a40e:	051b      	lsls	r3, r3, #20
 800a410:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a414:	2400      	movs	r4, #0
 800a416:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a41a:	4622      	mov	r2, r4
 800a41c:	462b      	mov	r3, r5
 800a41e:	f7f6 f8eb 	bl	80005f8 <__aeabi_dmul>
 800a422:	bd70      	pop	{r4, r5, r6, pc}
 800a424:	0000      	movs	r0, r0
	...

0800a428 <_strtod_l>:
 800a428:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a42c:	b0a3      	sub	sp, #140	; 0x8c
 800a42e:	461f      	mov	r7, r3
 800a430:	2300      	movs	r3, #0
 800a432:	931e      	str	r3, [sp, #120]	; 0x78
 800a434:	4ba4      	ldr	r3, [pc, #656]	; (800a6c8 <_strtod_l+0x2a0>)
 800a436:	9219      	str	r2, [sp, #100]	; 0x64
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	9307      	str	r3, [sp, #28]
 800a43c:	4604      	mov	r4, r0
 800a43e:	4618      	mov	r0, r3
 800a440:	4688      	mov	r8, r1
 800a442:	f7f5 fec5 	bl	80001d0 <strlen>
 800a446:	f04f 0a00 	mov.w	sl, #0
 800a44a:	4605      	mov	r5, r0
 800a44c:	f04f 0b00 	mov.w	fp, #0
 800a450:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a454:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a456:	781a      	ldrb	r2, [r3, #0]
 800a458:	2a2b      	cmp	r2, #43	; 0x2b
 800a45a:	d04c      	beq.n	800a4f6 <_strtod_l+0xce>
 800a45c:	d839      	bhi.n	800a4d2 <_strtod_l+0xaa>
 800a45e:	2a0d      	cmp	r2, #13
 800a460:	d832      	bhi.n	800a4c8 <_strtod_l+0xa0>
 800a462:	2a08      	cmp	r2, #8
 800a464:	d832      	bhi.n	800a4cc <_strtod_l+0xa4>
 800a466:	2a00      	cmp	r2, #0
 800a468:	d03c      	beq.n	800a4e4 <_strtod_l+0xbc>
 800a46a:	2300      	movs	r3, #0
 800a46c:	930e      	str	r3, [sp, #56]	; 0x38
 800a46e:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800a470:	7833      	ldrb	r3, [r6, #0]
 800a472:	2b30      	cmp	r3, #48	; 0x30
 800a474:	f040 80b4 	bne.w	800a5e0 <_strtod_l+0x1b8>
 800a478:	7873      	ldrb	r3, [r6, #1]
 800a47a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a47e:	2b58      	cmp	r3, #88	; 0x58
 800a480:	d16c      	bne.n	800a55c <_strtod_l+0x134>
 800a482:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a484:	9301      	str	r3, [sp, #4]
 800a486:	ab1e      	add	r3, sp, #120	; 0x78
 800a488:	9702      	str	r7, [sp, #8]
 800a48a:	9300      	str	r3, [sp, #0]
 800a48c:	4a8f      	ldr	r2, [pc, #572]	; (800a6cc <_strtod_l+0x2a4>)
 800a48e:	ab1f      	add	r3, sp, #124	; 0x7c
 800a490:	a91d      	add	r1, sp, #116	; 0x74
 800a492:	4620      	mov	r0, r4
 800a494:	f003 fc58 	bl	800dd48 <__gethex>
 800a498:	f010 0707 	ands.w	r7, r0, #7
 800a49c:	4605      	mov	r5, r0
 800a49e:	d005      	beq.n	800a4ac <_strtod_l+0x84>
 800a4a0:	2f06      	cmp	r7, #6
 800a4a2:	d12a      	bne.n	800a4fa <_strtod_l+0xd2>
 800a4a4:	3601      	adds	r6, #1
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	961d      	str	r6, [sp, #116]	; 0x74
 800a4aa:	930e      	str	r3, [sp, #56]	; 0x38
 800a4ac:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4ae:	2b00      	cmp	r3, #0
 800a4b0:	f040 8596 	bne.w	800afe0 <_strtod_l+0xbb8>
 800a4b4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a4b6:	b1db      	cbz	r3, 800a4f0 <_strtod_l+0xc8>
 800a4b8:	4652      	mov	r2, sl
 800a4ba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a4be:	ec43 2b10 	vmov	d0, r2, r3
 800a4c2:	b023      	add	sp, #140	; 0x8c
 800a4c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a4c8:	2a20      	cmp	r2, #32
 800a4ca:	d1ce      	bne.n	800a46a <_strtod_l+0x42>
 800a4cc:	3301      	adds	r3, #1
 800a4ce:	931d      	str	r3, [sp, #116]	; 0x74
 800a4d0:	e7c0      	b.n	800a454 <_strtod_l+0x2c>
 800a4d2:	2a2d      	cmp	r2, #45	; 0x2d
 800a4d4:	d1c9      	bne.n	800a46a <_strtod_l+0x42>
 800a4d6:	2201      	movs	r2, #1
 800a4d8:	920e      	str	r2, [sp, #56]	; 0x38
 800a4da:	1c5a      	adds	r2, r3, #1
 800a4dc:	921d      	str	r2, [sp, #116]	; 0x74
 800a4de:	785b      	ldrb	r3, [r3, #1]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d1c4      	bne.n	800a46e <_strtod_l+0x46>
 800a4e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4e6:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	f040 8576 	bne.w	800afdc <_strtod_l+0xbb4>
 800a4f0:	4652      	mov	r2, sl
 800a4f2:	465b      	mov	r3, fp
 800a4f4:	e7e3      	b.n	800a4be <_strtod_l+0x96>
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	e7ee      	b.n	800a4d8 <_strtod_l+0xb0>
 800a4fa:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a4fc:	b13a      	cbz	r2, 800a50e <_strtod_l+0xe6>
 800a4fe:	2135      	movs	r1, #53	; 0x35
 800a500:	a820      	add	r0, sp, #128	; 0x80
 800a502:	f004 fbbe 	bl	800ec82 <__copybits>
 800a506:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a508:	4620      	mov	r0, r4
 800a50a:	f003 ffb6 	bl	800e47a <_Bfree>
 800a50e:	3f01      	subs	r7, #1
 800a510:	2f05      	cmp	r7, #5
 800a512:	d807      	bhi.n	800a524 <_strtod_l+0xfc>
 800a514:	e8df f007 	tbb	[pc, r7]
 800a518:	1d180b0e 	.word	0x1d180b0e
 800a51c:	030e      	.short	0x030e
 800a51e:	f04f 0b00 	mov.w	fp, #0
 800a522:	46da      	mov	sl, fp
 800a524:	0728      	lsls	r0, r5, #28
 800a526:	d5c1      	bpl.n	800a4ac <_strtod_l+0x84>
 800a528:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a52c:	e7be      	b.n	800a4ac <_strtod_l+0x84>
 800a52e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 800a532:	e7f7      	b.n	800a524 <_strtod_l+0xfc>
 800a534:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 800a538:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a53a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a53e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a542:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a546:	e7ed      	b.n	800a524 <_strtod_l+0xfc>
 800a548:	f8df b184 	ldr.w	fp, [pc, #388]	; 800a6d0 <_strtod_l+0x2a8>
 800a54c:	f04f 0a00 	mov.w	sl, #0
 800a550:	e7e8      	b.n	800a524 <_strtod_l+0xfc>
 800a552:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a556:	f04f 3aff 	mov.w	sl, #4294967295
 800a55a:	e7e3      	b.n	800a524 <_strtod_l+0xfc>
 800a55c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a55e:	1c5a      	adds	r2, r3, #1
 800a560:	921d      	str	r2, [sp, #116]	; 0x74
 800a562:	785b      	ldrb	r3, [r3, #1]
 800a564:	2b30      	cmp	r3, #48	; 0x30
 800a566:	d0f9      	beq.n	800a55c <_strtod_l+0x134>
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d09f      	beq.n	800a4ac <_strtod_l+0x84>
 800a56c:	2301      	movs	r3, #1
 800a56e:	f04f 0900 	mov.w	r9, #0
 800a572:	9304      	str	r3, [sp, #16]
 800a574:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a576:	930a      	str	r3, [sp, #40]	; 0x28
 800a578:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800a57c:	464f      	mov	r7, r9
 800a57e:	220a      	movs	r2, #10
 800a580:	981d      	ldr	r0, [sp, #116]	; 0x74
 800a582:	7806      	ldrb	r6, [r0, #0]
 800a584:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a588:	b2d9      	uxtb	r1, r3
 800a58a:	2909      	cmp	r1, #9
 800a58c:	d92a      	bls.n	800a5e4 <_strtod_l+0x1bc>
 800a58e:	9907      	ldr	r1, [sp, #28]
 800a590:	462a      	mov	r2, r5
 800a592:	f004 fbfd 	bl	800ed90 <strncmp>
 800a596:	b398      	cbz	r0, 800a600 <_strtod_l+0x1d8>
 800a598:	2000      	movs	r0, #0
 800a59a:	4633      	mov	r3, r6
 800a59c:	463d      	mov	r5, r7
 800a59e:	9007      	str	r0, [sp, #28]
 800a5a0:	4602      	mov	r2, r0
 800a5a2:	2b65      	cmp	r3, #101	; 0x65
 800a5a4:	d001      	beq.n	800a5aa <_strtod_l+0x182>
 800a5a6:	2b45      	cmp	r3, #69	; 0x45
 800a5a8:	d118      	bne.n	800a5dc <_strtod_l+0x1b4>
 800a5aa:	b91d      	cbnz	r5, 800a5b4 <_strtod_l+0x18c>
 800a5ac:	9b04      	ldr	r3, [sp, #16]
 800a5ae:	4303      	orrs	r3, r0
 800a5b0:	d098      	beq.n	800a4e4 <_strtod_l+0xbc>
 800a5b2:	2500      	movs	r5, #0
 800a5b4:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 800a5b8:	f108 0301 	add.w	r3, r8, #1
 800a5bc:	931d      	str	r3, [sp, #116]	; 0x74
 800a5be:	f898 3001 	ldrb.w	r3, [r8, #1]
 800a5c2:	2b2b      	cmp	r3, #43	; 0x2b
 800a5c4:	d075      	beq.n	800a6b2 <_strtod_l+0x28a>
 800a5c6:	2b2d      	cmp	r3, #45	; 0x2d
 800a5c8:	d07b      	beq.n	800a6c2 <_strtod_l+0x29a>
 800a5ca:	f04f 0c00 	mov.w	ip, #0
 800a5ce:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800a5d2:	2909      	cmp	r1, #9
 800a5d4:	f240 8082 	bls.w	800a6dc <_strtod_l+0x2b4>
 800a5d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800a5dc:	2600      	movs	r6, #0
 800a5de:	e09d      	b.n	800a71c <_strtod_l+0x2f4>
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e7c4      	b.n	800a56e <_strtod_l+0x146>
 800a5e4:	2f08      	cmp	r7, #8
 800a5e6:	bfd8      	it	le
 800a5e8:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800a5ea:	f100 0001 	add.w	r0, r0, #1
 800a5ee:	bfda      	itte	le
 800a5f0:	fb02 3301 	mlale	r3, r2, r1, r3
 800a5f4:	9309      	strle	r3, [sp, #36]	; 0x24
 800a5f6:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a5fa:	3701      	adds	r7, #1
 800a5fc:	901d      	str	r0, [sp, #116]	; 0x74
 800a5fe:	e7bf      	b.n	800a580 <_strtod_l+0x158>
 800a600:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a602:	195a      	adds	r2, r3, r5
 800a604:	921d      	str	r2, [sp, #116]	; 0x74
 800a606:	5d5b      	ldrb	r3, [r3, r5]
 800a608:	2f00      	cmp	r7, #0
 800a60a:	d037      	beq.n	800a67c <_strtod_l+0x254>
 800a60c:	9007      	str	r0, [sp, #28]
 800a60e:	463d      	mov	r5, r7
 800a610:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800a614:	2a09      	cmp	r2, #9
 800a616:	d912      	bls.n	800a63e <_strtod_l+0x216>
 800a618:	2201      	movs	r2, #1
 800a61a:	e7c2      	b.n	800a5a2 <_strtod_l+0x17a>
 800a61c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a61e:	1c5a      	adds	r2, r3, #1
 800a620:	921d      	str	r2, [sp, #116]	; 0x74
 800a622:	785b      	ldrb	r3, [r3, #1]
 800a624:	3001      	adds	r0, #1
 800a626:	2b30      	cmp	r3, #48	; 0x30
 800a628:	d0f8      	beq.n	800a61c <_strtod_l+0x1f4>
 800a62a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800a62e:	2a08      	cmp	r2, #8
 800a630:	f200 84db 	bhi.w	800afea <_strtod_l+0xbc2>
 800a634:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800a636:	9007      	str	r0, [sp, #28]
 800a638:	2000      	movs	r0, #0
 800a63a:	920a      	str	r2, [sp, #40]	; 0x28
 800a63c:	4605      	mov	r5, r0
 800a63e:	3b30      	subs	r3, #48	; 0x30
 800a640:	f100 0201 	add.w	r2, r0, #1
 800a644:	d014      	beq.n	800a670 <_strtod_l+0x248>
 800a646:	9907      	ldr	r1, [sp, #28]
 800a648:	4411      	add	r1, r2
 800a64a:	9107      	str	r1, [sp, #28]
 800a64c:	462a      	mov	r2, r5
 800a64e:	eb00 0e05 	add.w	lr, r0, r5
 800a652:	210a      	movs	r1, #10
 800a654:	4572      	cmp	r2, lr
 800a656:	d113      	bne.n	800a680 <_strtod_l+0x258>
 800a658:	182a      	adds	r2, r5, r0
 800a65a:	2a08      	cmp	r2, #8
 800a65c:	f105 0501 	add.w	r5, r5, #1
 800a660:	4405      	add	r5, r0
 800a662:	dc1c      	bgt.n	800a69e <_strtod_l+0x276>
 800a664:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a666:	220a      	movs	r2, #10
 800a668:	fb02 3301 	mla	r3, r2, r1, r3
 800a66c:	9309      	str	r3, [sp, #36]	; 0x24
 800a66e:	2200      	movs	r2, #0
 800a670:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a672:	1c59      	adds	r1, r3, #1
 800a674:	911d      	str	r1, [sp, #116]	; 0x74
 800a676:	785b      	ldrb	r3, [r3, #1]
 800a678:	4610      	mov	r0, r2
 800a67a:	e7c9      	b.n	800a610 <_strtod_l+0x1e8>
 800a67c:	4638      	mov	r0, r7
 800a67e:	e7d2      	b.n	800a626 <_strtod_l+0x1fe>
 800a680:	2a08      	cmp	r2, #8
 800a682:	dc04      	bgt.n	800a68e <_strtod_l+0x266>
 800a684:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800a686:	434e      	muls	r6, r1
 800a688:	9609      	str	r6, [sp, #36]	; 0x24
 800a68a:	3201      	adds	r2, #1
 800a68c:	e7e2      	b.n	800a654 <_strtod_l+0x22c>
 800a68e:	f102 0c01 	add.w	ip, r2, #1
 800a692:	f1bc 0f10 	cmp.w	ip, #16
 800a696:	bfd8      	it	le
 800a698:	fb01 f909 	mulle.w	r9, r1, r9
 800a69c:	e7f5      	b.n	800a68a <_strtod_l+0x262>
 800a69e:	2d10      	cmp	r5, #16
 800a6a0:	bfdc      	itt	le
 800a6a2:	220a      	movle	r2, #10
 800a6a4:	fb02 3909 	mlale	r9, r2, r9, r3
 800a6a8:	e7e1      	b.n	800a66e <_strtod_l+0x246>
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	9307      	str	r3, [sp, #28]
 800a6ae:	2201      	movs	r2, #1
 800a6b0:	e77c      	b.n	800a5ac <_strtod_l+0x184>
 800a6b2:	f04f 0c00 	mov.w	ip, #0
 800a6b6:	f108 0302 	add.w	r3, r8, #2
 800a6ba:	931d      	str	r3, [sp, #116]	; 0x74
 800a6bc:	f898 3002 	ldrb.w	r3, [r8, #2]
 800a6c0:	e785      	b.n	800a5ce <_strtod_l+0x1a6>
 800a6c2:	f04f 0c01 	mov.w	ip, #1
 800a6c6:	e7f6      	b.n	800a6b6 <_strtod_l+0x28e>
 800a6c8:	08010980 	.word	0x08010980
 800a6cc:	080107f8 	.word	0x080107f8
 800a6d0:	7ff00000 	.word	0x7ff00000
 800a6d4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6d6:	1c59      	adds	r1, r3, #1
 800a6d8:	911d      	str	r1, [sp, #116]	; 0x74
 800a6da:	785b      	ldrb	r3, [r3, #1]
 800a6dc:	2b30      	cmp	r3, #48	; 0x30
 800a6de:	d0f9      	beq.n	800a6d4 <_strtod_l+0x2ac>
 800a6e0:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 800a6e4:	2908      	cmp	r1, #8
 800a6e6:	f63f af79 	bhi.w	800a5dc <_strtod_l+0x1b4>
 800a6ea:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800a6ee:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6f0:	9308      	str	r3, [sp, #32]
 800a6f2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a6f4:	1c59      	adds	r1, r3, #1
 800a6f6:	911d      	str	r1, [sp, #116]	; 0x74
 800a6f8:	785b      	ldrb	r3, [r3, #1]
 800a6fa:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 800a6fe:	2e09      	cmp	r6, #9
 800a700:	d937      	bls.n	800a772 <_strtod_l+0x34a>
 800a702:	9e08      	ldr	r6, [sp, #32]
 800a704:	1b89      	subs	r1, r1, r6
 800a706:	2908      	cmp	r1, #8
 800a708:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a70c:	dc02      	bgt.n	800a714 <_strtod_l+0x2ec>
 800a70e:	4576      	cmp	r6, lr
 800a710:	bfa8      	it	ge
 800a712:	4676      	movge	r6, lr
 800a714:	f1bc 0f00 	cmp.w	ip, #0
 800a718:	d000      	beq.n	800a71c <_strtod_l+0x2f4>
 800a71a:	4276      	negs	r6, r6
 800a71c:	2d00      	cmp	r5, #0
 800a71e:	d14f      	bne.n	800a7c0 <_strtod_l+0x398>
 800a720:	9904      	ldr	r1, [sp, #16]
 800a722:	4301      	orrs	r1, r0
 800a724:	f47f aec2 	bne.w	800a4ac <_strtod_l+0x84>
 800a728:	2a00      	cmp	r2, #0
 800a72a:	f47f aedb 	bne.w	800a4e4 <_strtod_l+0xbc>
 800a72e:	2b69      	cmp	r3, #105	; 0x69
 800a730:	d027      	beq.n	800a782 <_strtod_l+0x35a>
 800a732:	dc24      	bgt.n	800a77e <_strtod_l+0x356>
 800a734:	2b49      	cmp	r3, #73	; 0x49
 800a736:	d024      	beq.n	800a782 <_strtod_l+0x35a>
 800a738:	2b4e      	cmp	r3, #78	; 0x4e
 800a73a:	f47f aed3 	bne.w	800a4e4 <_strtod_l+0xbc>
 800a73e:	499e      	ldr	r1, [pc, #632]	; (800a9b8 <_strtod_l+0x590>)
 800a740:	a81d      	add	r0, sp, #116	; 0x74
 800a742:	f003 fd59 	bl	800e1f8 <__match>
 800a746:	2800      	cmp	r0, #0
 800a748:	f43f aecc 	beq.w	800a4e4 <_strtod_l+0xbc>
 800a74c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a74e:	781b      	ldrb	r3, [r3, #0]
 800a750:	2b28      	cmp	r3, #40	; 0x28
 800a752:	d12d      	bne.n	800a7b0 <_strtod_l+0x388>
 800a754:	4999      	ldr	r1, [pc, #612]	; (800a9bc <_strtod_l+0x594>)
 800a756:	aa20      	add	r2, sp, #128	; 0x80
 800a758:	a81d      	add	r0, sp, #116	; 0x74
 800a75a:	f003 fd61 	bl	800e220 <__hexnan>
 800a75e:	2805      	cmp	r0, #5
 800a760:	d126      	bne.n	800a7b0 <_strtod_l+0x388>
 800a762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a764:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 800a768:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a76c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a770:	e69c      	b.n	800a4ac <_strtod_l+0x84>
 800a772:	210a      	movs	r1, #10
 800a774:	fb01 3e0e 	mla	lr, r1, lr, r3
 800a778:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a77c:	e7b9      	b.n	800a6f2 <_strtod_l+0x2ca>
 800a77e:	2b6e      	cmp	r3, #110	; 0x6e
 800a780:	e7db      	b.n	800a73a <_strtod_l+0x312>
 800a782:	498f      	ldr	r1, [pc, #572]	; (800a9c0 <_strtod_l+0x598>)
 800a784:	a81d      	add	r0, sp, #116	; 0x74
 800a786:	f003 fd37 	bl	800e1f8 <__match>
 800a78a:	2800      	cmp	r0, #0
 800a78c:	f43f aeaa 	beq.w	800a4e4 <_strtod_l+0xbc>
 800a790:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a792:	498c      	ldr	r1, [pc, #560]	; (800a9c4 <_strtod_l+0x59c>)
 800a794:	3b01      	subs	r3, #1
 800a796:	a81d      	add	r0, sp, #116	; 0x74
 800a798:	931d      	str	r3, [sp, #116]	; 0x74
 800a79a:	f003 fd2d 	bl	800e1f8 <__match>
 800a79e:	b910      	cbnz	r0, 800a7a6 <_strtod_l+0x37e>
 800a7a0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a7a2:	3301      	adds	r3, #1
 800a7a4:	931d      	str	r3, [sp, #116]	; 0x74
 800a7a6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 800a9d4 <_strtod_l+0x5ac>
 800a7aa:	f04f 0a00 	mov.w	sl, #0
 800a7ae:	e67d      	b.n	800a4ac <_strtod_l+0x84>
 800a7b0:	4885      	ldr	r0, [pc, #532]	; (800a9c8 <_strtod_l+0x5a0>)
 800a7b2:	f004 fae5 	bl	800ed80 <nan>
 800a7b6:	ed8d 0b04 	vstr	d0, [sp, #16]
 800a7ba:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800a7be:	e675      	b.n	800a4ac <_strtod_l+0x84>
 800a7c0:	9b07      	ldr	r3, [sp, #28]
 800a7c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a7c4:	1af3      	subs	r3, r6, r3
 800a7c6:	2f00      	cmp	r7, #0
 800a7c8:	bf08      	it	eq
 800a7ca:	462f      	moveq	r7, r5
 800a7cc:	2d10      	cmp	r5, #16
 800a7ce:	9308      	str	r3, [sp, #32]
 800a7d0:	46a8      	mov	r8, r5
 800a7d2:	bfa8      	it	ge
 800a7d4:	f04f 0810 	movge.w	r8, #16
 800a7d8:	f7f5 fe94 	bl	8000504 <__aeabi_ui2d>
 800a7dc:	2d09      	cmp	r5, #9
 800a7de:	4682      	mov	sl, r0
 800a7e0:	468b      	mov	fp, r1
 800a7e2:	dd13      	ble.n	800a80c <_strtod_l+0x3e4>
 800a7e4:	4b79      	ldr	r3, [pc, #484]	; (800a9cc <_strtod_l+0x5a4>)
 800a7e6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a7ea:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a7ee:	f7f5 ff03 	bl	80005f8 <__aeabi_dmul>
 800a7f2:	4682      	mov	sl, r0
 800a7f4:	4648      	mov	r0, r9
 800a7f6:	468b      	mov	fp, r1
 800a7f8:	f7f5 fe84 	bl	8000504 <__aeabi_ui2d>
 800a7fc:	4602      	mov	r2, r0
 800a7fe:	460b      	mov	r3, r1
 800a800:	4650      	mov	r0, sl
 800a802:	4659      	mov	r1, fp
 800a804:	f7f5 fd42 	bl	800028c <__adddf3>
 800a808:	4682      	mov	sl, r0
 800a80a:	468b      	mov	fp, r1
 800a80c:	2d0f      	cmp	r5, #15
 800a80e:	dc38      	bgt.n	800a882 <_strtod_l+0x45a>
 800a810:	9b08      	ldr	r3, [sp, #32]
 800a812:	2b00      	cmp	r3, #0
 800a814:	f43f ae4a 	beq.w	800a4ac <_strtod_l+0x84>
 800a818:	dd24      	ble.n	800a864 <_strtod_l+0x43c>
 800a81a:	2b16      	cmp	r3, #22
 800a81c:	dc0b      	bgt.n	800a836 <_strtod_l+0x40e>
 800a81e:	4d6b      	ldr	r5, [pc, #428]	; (800a9cc <_strtod_l+0x5a4>)
 800a820:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 800a824:	e9d5 0100 	ldrd	r0, r1, [r5]
 800a828:	4652      	mov	r2, sl
 800a82a:	465b      	mov	r3, fp
 800a82c:	f7f5 fee4 	bl	80005f8 <__aeabi_dmul>
 800a830:	4682      	mov	sl, r0
 800a832:	468b      	mov	fp, r1
 800a834:	e63a      	b.n	800a4ac <_strtod_l+0x84>
 800a836:	9a08      	ldr	r2, [sp, #32]
 800a838:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a83c:	4293      	cmp	r3, r2
 800a83e:	db20      	blt.n	800a882 <_strtod_l+0x45a>
 800a840:	4c62      	ldr	r4, [pc, #392]	; (800a9cc <_strtod_l+0x5a4>)
 800a842:	f1c5 050f 	rsb	r5, r5, #15
 800a846:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a84a:	4652      	mov	r2, sl
 800a84c:	465b      	mov	r3, fp
 800a84e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a852:	f7f5 fed1 	bl	80005f8 <__aeabi_dmul>
 800a856:	9b08      	ldr	r3, [sp, #32]
 800a858:	1b5d      	subs	r5, r3, r5
 800a85a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a85e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a862:	e7e3      	b.n	800a82c <_strtod_l+0x404>
 800a864:	9b08      	ldr	r3, [sp, #32]
 800a866:	3316      	adds	r3, #22
 800a868:	db0b      	blt.n	800a882 <_strtod_l+0x45a>
 800a86a:	9b07      	ldr	r3, [sp, #28]
 800a86c:	4a57      	ldr	r2, [pc, #348]	; (800a9cc <_strtod_l+0x5a4>)
 800a86e:	1b9e      	subs	r6, r3, r6
 800a870:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 800a874:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a878:	4650      	mov	r0, sl
 800a87a:	4659      	mov	r1, fp
 800a87c:	f7f5 ffe6 	bl	800084c <__aeabi_ddiv>
 800a880:	e7d6      	b.n	800a830 <_strtod_l+0x408>
 800a882:	9b08      	ldr	r3, [sp, #32]
 800a884:	eba5 0808 	sub.w	r8, r5, r8
 800a888:	4498      	add	r8, r3
 800a88a:	f1b8 0f00 	cmp.w	r8, #0
 800a88e:	dd71      	ble.n	800a974 <_strtod_l+0x54c>
 800a890:	f018 030f 	ands.w	r3, r8, #15
 800a894:	d00a      	beq.n	800a8ac <_strtod_l+0x484>
 800a896:	494d      	ldr	r1, [pc, #308]	; (800a9cc <_strtod_l+0x5a4>)
 800a898:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a89c:	4652      	mov	r2, sl
 800a89e:	465b      	mov	r3, fp
 800a8a0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a8a4:	f7f5 fea8 	bl	80005f8 <__aeabi_dmul>
 800a8a8:	4682      	mov	sl, r0
 800a8aa:	468b      	mov	fp, r1
 800a8ac:	f038 080f 	bics.w	r8, r8, #15
 800a8b0:	d04d      	beq.n	800a94e <_strtod_l+0x526>
 800a8b2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a8b6:	dd22      	ble.n	800a8fe <_strtod_l+0x4d6>
 800a8b8:	2500      	movs	r5, #0
 800a8ba:	462e      	mov	r6, r5
 800a8bc:	9509      	str	r5, [sp, #36]	; 0x24
 800a8be:	9507      	str	r5, [sp, #28]
 800a8c0:	2322      	movs	r3, #34	; 0x22
 800a8c2:	f8df b110 	ldr.w	fp, [pc, #272]	; 800a9d4 <_strtod_l+0x5ac>
 800a8c6:	6023      	str	r3, [r4, #0]
 800a8c8:	f04f 0a00 	mov.w	sl, #0
 800a8cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	f43f adec 	beq.w	800a4ac <_strtod_l+0x84>
 800a8d4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f003 fdcf 	bl	800e47a <_Bfree>
 800a8dc:	9907      	ldr	r1, [sp, #28]
 800a8de:	4620      	mov	r0, r4
 800a8e0:	f003 fdcb 	bl	800e47a <_Bfree>
 800a8e4:	4631      	mov	r1, r6
 800a8e6:	4620      	mov	r0, r4
 800a8e8:	f003 fdc7 	bl	800e47a <_Bfree>
 800a8ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	f003 fdc3 	bl	800e47a <_Bfree>
 800a8f4:	4629      	mov	r1, r5
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	f003 fdbf 	bl	800e47a <_Bfree>
 800a8fc:	e5d6      	b.n	800a4ac <_strtod_l+0x84>
 800a8fe:	2300      	movs	r3, #0
 800a900:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a904:	4650      	mov	r0, sl
 800a906:	4659      	mov	r1, fp
 800a908:	4699      	mov	r9, r3
 800a90a:	f1b8 0f01 	cmp.w	r8, #1
 800a90e:	dc21      	bgt.n	800a954 <_strtod_l+0x52c>
 800a910:	b10b      	cbz	r3, 800a916 <_strtod_l+0x4ee>
 800a912:	4682      	mov	sl, r0
 800a914:	468b      	mov	fp, r1
 800a916:	4b2e      	ldr	r3, [pc, #184]	; (800a9d0 <_strtod_l+0x5a8>)
 800a918:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a91c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a920:	4652      	mov	r2, sl
 800a922:	465b      	mov	r3, fp
 800a924:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a928:	f7f5 fe66 	bl	80005f8 <__aeabi_dmul>
 800a92c:	4b29      	ldr	r3, [pc, #164]	; (800a9d4 <_strtod_l+0x5ac>)
 800a92e:	460a      	mov	r2, r1
 800a930:	400b      	ands	r3, r1
 800a932:	4929      	ldr	r1, [pc, #164]	; (800a9d8 <_strtod_l+0x5b0>)
 800a934:	428b      	cmp	r3, r1
 800a936:	4682      	mov	sl, r0
 800a938:	d8be      	bhi.n	800a8b8 <_strtod_l+0x490>
 800a93a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a93e:	428b      	cmp	r3, r1
 800a940:	bf86      	itte	hi
 800a942:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800a9dc <_strtod_l+0x5b4>
 800a946:	f04f 3aff 	movhi.w	sl, #4294967295
 800a94a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a94e:	2300      	movs	r3, #0
 800a950:	9304      	str	r3, [sp, #16]
 800a952:	e081      	b.n	800aa58 <_strtod_l+0x630>
 800a954:	f018 0f01 	tst.w	r8, #1
 800a958:	d007      	beq.n	800a96a <_strtod_l+0x542>
 800a95a:	4b1d      	ldr	r3, [pc, #116]	; (800a9d0 <_strtod_l+0x5a8>)
 800a95c:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800a960:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a964:	f7f5 fe48 	bl	80005f8 <__aeabi_dmul>
 800a968:	2301      	movs	r3, #1
 800a96a:	f109 0901 	add.w	r9, r9, #1
 800a96e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a972:	e7ca      	b.n	800a90a <_strtod_l+0x4e2>
 800a974:	d0eb      	beq.n	800a94e <_strtod_l+0x526>
 800a976:	f1c8 0800 	rsb	r8, r8, #0
 800a97a:	f018 020f 	ands.w	r2, r8, #15
 800a97e:	d00a      	beq.n	800a996 <_strtod_l+0x56e>
 800a980:	4b12      	ldr	r3, [pc, #72]	; (800a9cc <_strtod_l+0x5a4>)
 800a982:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a986:	4650      	mov	r0, sl
 800a988:	4659      	mov	r1, fp
 800a98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a98e:	f7f5 ff5d 	bl	800084c <__aeabi_ddiv>
 800a992:	4682      	mov	sl, r0
 800a994:	468b      	mov	fp, r1
 800a996:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a99a:	d0d8      	beq.n	800a94e <_strtod_l+0x526>
 800a99c:	f1b8 0f1f 	cmp.w	r8, #31
 800a9a0:	dd1e      	ble.n	800a9e0 <_strtod_l+0x5b8>
 800a9a2:	2500      	movs	r5, #0
 800a9a4:	462e      	mov	r6, r5
 800a9a6:	9509      	str	r5, [sp, #36]	; 0x24
 800a9a8:	9507      	str	r5, [sp, #28]
 800a9aa:	2322      	movs	r3, #34	; 0x22
 800a9ac:	f04f 0a00 	mov.w	sl, #0
 800a9b0:	f04f 0b00 	mov.w	fp, #0
 800a9b4:	6023      	str	r3, [r4, #0]
 800a9b6:	e789      	b.n	800a8cc <_strtod_l+0x4a4>
 800a9b8:	08010855 	.word	0x08010855
 800a9bc:	0801080c 	.word	0x0801080c
 800a9c0:	0801084d 	.word	0x0801084d
 800a9c4:	080108a3 	.word	0x080108a3
 800a9c8:	08010b27 	.word	0x08010b27
 800a9cc:	08010a18 	.word	0x08010a18
 800a9d0:	080109f0 	.word	0x080109f0
 800a9d4:	7ff00000 	.word	0x7ff00000
 800a9d8:	7ca00000 	.word	0x7ca00000
 800a9dc:	7fefffff 	.word	0x7fefffff
 800a9e0:	f018 0310 	ands.w	r3, r8, #16
 800a9e4:	bf18      	it	ne
 800a9e6:	236a      	movne	r3, #106	; 0x6a
 800a9e8:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 800ada0 <_strtod_l+0x978>
 800a9ec:	9304      	str	r3, [sp, #16]
 800a9ee:	4650      	mov	r0, sl
 800a9f0:	4659      	mov	r1, fp
 800a9f2:	2300      	movs	r3, #0
 800a9f4:	f018 0f01 	tst.w	r8, #1
 800a9f8:	d004      	beq.n	800aa04 <_strtod_l+0x5dc>
 800a9fa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a9fe:	f7f5 fdfb 	bl	80005f8 <__aeabi_dmul>
 800aa02:	2301      	movs	r3, #1
 800aa04:	ea5f 0868 	movs.w	r8, r8, asr #1
 800aa08:	f109 0908 	add.w	r9, r9, #8
 800aa0c:	d1f2      	bne.n	800a9f4 <_strtod_l+0x5cc>
 800aa0e:	b10b      	cbz	r3, 800aa14 <_strtod_l+0x5ec>
 800aa10:	4682      	mov	sl, r0
 800aa12:	468b      	mov	fp, r1
 800aa14:	9b04      	ldr	r3, [sp, #16]
 800aa16:	b1bb      	cbz	r3, 800aa48 <_strtod_l+0x620>
 800aa18:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800aa1c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa20:	2b00      	cmp	r3, #0
 800aa22:	4659      	mov	r1, fp
 800aa24:	dd10      	ble.n	800aa48 <_strtod_l+0x620>
 800aa26:	2b1f      	cmp	r3, #31
 800aa28:	f340 8128 	ble.w	800ac7c <_strtod_l+0x854>
 800aa2c:	2b34      	cmp	r3, #52	; 0x34
 800aa2e:	bfde      	ittt	le
 800aa30:	3b20      	suble	r3, #32
 800aa32:	f04f 32ff 	movle.w	r2, #4294967295
 800aa36:	fa02 f303 	lslle.w	r3, r2, r3
 800aa3a:	f04f 0a00 	mov.w	sl, #0
 800aa3e:	bfcc      	ite	gt
 800aa40:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800aa44:	ea03 0b01 	andle.w	fp, r3, r1
 800aa48:	2200      	movs	r2, #0
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	4650      	mov	r0, sl
 800aa4e:	4659      	mov	r1, fp
 800aa50:	f7f6 f83a 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa54:	2800      	cmp	r0, #0
 800aa56:	d1a4      	bne.n	800a9a2 <_strtod_l+0x57a>
 800aa58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	990a      	ldr	r1, [sp, #40]	; 0x28
 800aa5e:	462b      	mov	r3, r5
 800aa60:	463a      	mov	r2, r7
 800aa62:	4620      	mov	r0, r4
 800aa64:	f003 fd5c 	bl	800e520 <__s2b>
 800aa68:	9009      	str	r0, [sp, #36]	; 0x24
 800aa6a:	2800      	cmp	r0, #0
 800aa6c:	f43f af24 	beq.w	800a8b8 <_strtod_l+0x490>
 800aa70:	9b07      	ldr	r3, [sp, #28]
 800aa72:	1b9e      	subs	r6, r3, r6
 800aa74:	9b08      	ldr	r3, [sp, #32]
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	bfb4      	ite	lt
 800aa7a:	4633      	movlt	r3, r6
 800aa7c:	2300      	movge	r3, #0
 800aa7e:	9310      	str	r3, [sp, #64]	; 0x40
 800aa80:	9b08      	ldr	r3, [sp, #32]
 800aa82:	2500      	movs	r5, #0
 800aa84:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800aa88:	9318      	str	r3, [sp, #96]	; 0x60
 800aa8a:	462e      	mov	r6, r5
 800aa8c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa8e:	4620      	mov	r0, r4
 800aa90:	6859      	ldr	r1, [r3, #4]
 800aa92:	f003 fccd 	bl	800e430 <_Balloc>
 800aa96:	9007      	str	r0, [sp, #28]
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	f43f af11 	beq.w	800a8c0 <_strtod_l+0x498>
 800aa9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aaa0:	691a      	ldr	r2, [r3, #16]
 800aaa2:	3202      	adds	r2, #2
 800aaa4:	f103 010c 	add.w	r1, r3, #12
 800aaa8:	0092      	lsls	r2, r2, #2
 800aaaa:	300c      	adds	r0, #12
 800aaac:	f7ff fa3a 	bl	8009f24 <memcpy>
 800aab0:	ec4b ab10 	vmov	d0, sl, fp
 800aab4:	aa20      	add	r2, sp, #128	; 0x80
 800aab6:	a91f      	add	r1, sp, #124	; 0x7c
 800aab8:	4620      	mov	r0, r4
 800aaba:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 800aabe:	f004 f851 	bl	800eb64 <__d2b>
 800aac2:	901e      	str	r0, [sp, #120]	; 0x78
 800aac4:	2800      	cmp	r0, #0
 800aac6:	f43f aefb 	beq.w	800a8c0 <_strtod_l+0x498>
 800aaca:	2101      	movs	r1, #1
 800aacc:	4620      	mov	r0, r4
 800aace:	f003 fdc1 	bl	800e654 <__i2b>
 800aad2:	4606      	mov	r6, r0
 800aad4:	2800      	cmp	r0, #0
 800aad6:	f43f aef3 	beq.w	800a8c0 <_strtod_l+0x498>
 800aada:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800aadc:	9904      	ldr	r1, [sp, #16]
 800aade:	2b00      	cmp	r3, #0
 800aae0:	bfab      	itete	ge
 800aae2:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 800aae4:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 800aae6:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 800aae8:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 800aaec:	bfac      	ite	ge
 800aaee:	eb03 0902 	addge.w	r9, r3, r2
 800aaf2:	1ad7      	sublt	r7, r2, r3
 800aaf4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800aaf6:	eba3 0801 	sub.w	r8, r3, r1
 800aafa:	4490      	add	r8, r2
 800aafc:	4ba3      	ldr	r3, [pc, #652]	; (800ad8c <_strtod_l+0x964>)
 800aafe:	f108 38ff 	add.w	r8, r8, #4294967295
 800ab02:	4598      	cmp	r8, r3
 800ab04:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ab08:	f280 80cc 	bge.w	800aca4 <_strtod_l+0x87c>
 800ab0c:	eba3 0308 	sub.w	r3, r3, r8
 800ab10:	2b1f      	cmp	r3, #31
 800ab12:	eba2 0203 	sub.w	r2, r2, r3
 800ab16:	f04f 0101 	mov.w	r1, #1
 800ab1a:	f300 80b6 	bgt.w	800ac8a <_strtod_l+0x862>
 800ab1e:	fa01 f303 	lsl.w	r3, r1, r3
 800ab22:	9311      	str	r3, [sp, #68]	; 0x44
 800ab24:	2300      	movs	r3, #0
 800ab26:	930c      	str	r3, [sp, #48]	; 0x30
 800ab28:	eb09 0802 	add.w	r8, r9, r2
 800ab2c:	9b04      	ldr	r3, [sp, #16]
 800ab2e:	45c1      	cmp	r9, r8
 800ab30:	4417      	add	r7, r2
 800ab32:	441f      	add	r7, r3
 800ab34:	464b      	mov	r3, r9
 800ab36:	bfa8      	it	ge
 800ab38:	4643      	movge	r3, r8
 800ab3a:	42bb      	cmp	r3, r7
 800ab3c:	bfa8      	it	ge
 800ab3e:	463b      	movge	r3, r7
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	bfc2      	ittt	gt
 800ab44:	eba8 0803 	subgt.w	r8, r8, r3
 800ab48:	1aff      	subgt	r7, r7, r3
 800ab4a:	eba9 0903 	subgt.w	r9, r9, r3
 800ab4e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ab50:	2b00      	cmp	r3, #0
 800ab52:	dd17      	ble.n	800ab84 <_strtod_l+0x75c>
 800ab54:	4631      	mov	r1, r6
 800ab56:	461a      	mov	r2, r3
 800ab58:	4620      	mov	r0, r4
 800ab5a:	f003 fe37 	bl	800e7cc <__pow5mult>
 800ab5e:	4606      	mov	r6, r0
 800ab60:	2800      	cmp	r0, #0
 800ab62:	f43f aead 	beq.w	800a8c0 <_strtod_l+0x498>
 800ab66:	4601      	mov	r1, r0
 800ab68:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ab6a:	4620      	mov	r0, r4
 800ab6c:	f003 fd88 	bl	800e680 <__multiply>
 800ab70:	900f      	str	r0, [sp, #60]	; 0x3c
 800ab72:	2800      	cmp	r0, #0
 800ab74:	f43f aea4 	beq.w	800a8c0 <_strtod_l+0x498>
 800ab78:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ab7a:	4620      	mov	r0, r4
 800ab7c:	f003 fc7d 	bl	800e47a <_Bfree>
 800ab80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ab82:	931e      	str	r3, [sp, #120]	; 0x78
 800ab84:	f1b8 0f00 	cmp.w	r8, #0
 800ab88:	f300 8091 	bgt.w	800acae <_strtod_l+0x886>
 800ab8c:	9b08      	ldr	r3, [sp, #32]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	dd08      	ble.n	800aba4 <_strtod_l+0x77c>
 800ab92:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ab94:	9907      	ldr	r1, [sp, #28]
 800ab96:	4620      	mov	r0, r4
 800ab98:	f003 fe18 	bl	800e7cc <__pow5mult>
 800ab9c:	9007      	str	r0, [sp, #28]
 800ab9e:	2800      	cmp	r0, #0
 800aba0:	f43f ae8e 	beq.w	800a8c0 <_strtod_l+0x498>
 800aba4:	2f00      	cmp	r7, #0
 800aba6:	dd08      	ble.n	800abba <_strtod_l+0x792>
 800aba8:	9907      	ldr	r1, [sp, #28]
 800abaa:	463a      	mov	r2, r7
 800abac:	4620      	mov	r0, r4
 800abae:	f003 fe4d 	bl	800e84c <__lshift>
 800abb2:	9007      	str	r0, [sp, #28]
 800abb4:	2800      	cmp	r0, #0
 800abb6:	f43f ae83 	beq.w	800a8c0 <_strtod_l+0x498>
 800abba:	f1b9 0f00 	cmp.w	r9, #0
 800abbe:	dd08      	ble.n	800abd2 <_strtod_l+0x7aa>
 800abc0:	4631      	mov	r1, r6
 800abc2:	464a      	mov	r2, r9
 800abc4:	4620      	mov	r0, r4
 800abc6:	f003 fe41 	bl	800e84c <__lshift>
 800abca:	4606      	mov	r6, r0
 800abcc:	2800      	cmp	r0, #0
 800abce:	f43f ae77 	beq.w	800a8c0 <_strtod_l+0x498>
 800abd2:	9a07      	ldr	r2, [sp, #28]
 800abd4:	991e      	ldr	r1, [sp, #120]	; 0x78
 800abd6:	4620      	mov	r0, r4
 800abd8:	f003 fec0 	bl	800e95c <__mdiff>
 800abdc:	4605      	mov	r5, r0
 800abde:	2800      	cmp	r0, #0
 800abe0:	f43f ae6e 	beq.w	800a8c0 <_strtod_l+0x498>
 800abe4:	68c3      	ldr	r3, [r0, #12]
 800abe6:	930f      	str	r3, [sp, #60]	; 0x3c
 800abe8:	2300      	movs	r3, #0
 800abea:	60c3      	str	r3, [r0, #12]
 800abec:	4631      	mov	r1, r6
 800abee:	f003 fe99 	bl	800e924 <__mcmp>
 800abf2:	2800      	cmp	r0, #0
 800abf4:	da65      	bge.n	800acc2 <_strtod_l+0x89a>
 800abf6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800abf8:	ea53 030a 	orrs.w	r3, r3, sl
 800abfc:	f040 8087 	bne.w	800ad0e <_strtod_l+0x8e6>
 800ac00:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	f040 8082 	bne.w	800ad0e <_strtod_l+0x8e6>
 800ac0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac0e:	0d1b      	lsrs	r3, r3, #20
 800ac10:	051b      	lsls	r3, r3, #20
 800ac12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800ac16:	d97a      	bls.n	800ad0e <_strtod_l+0x8e6>
 800ac18:	696b      	ldr	r3, [r5, #20]
 800ac1a:	b913      	cbnz	r3, 800ac22 <_strtod_l+0x7fa>
 800ac1c:	692b      	ldr	r3, [r5, #16]
 800ac1e:	2b01      	cmp	r3, #1
 800ac20:	dd75      	ble.n	800ad0e <_strtod_l+0x8e6>
 800ac22:	4629      	mov	r1, r5
 800ac24:	2201      	movs	r2, #1
 800ac26:	4620      	mov	r0, r4
 800ac28:	f003 fe10 	bl	800e84c <__lshift>
 800ac2c:	4631      	mov	r1, r6
 800ac2e:	4605      	mov	r5, r0
 800ac30:	f003 fe78 	bl	800e924 <__mcmp>
 800ac34:	2800      	cmp	r0, #0
 800ac36:	dd6a      	ble.n	800ad0e <_strtod_l+0x8e6>
 800ac38:	9904      	ldr	r1, [sp, #16]
 800ac3a:	4a55      	ldr	r2, [pc, #340]	; (800ad90 <_strtod_l+0x968>)
 800ac3c:	465b      	mov	r3, fp
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	f000 8085 	beq.w	800ad4e <_strtod_l+0x926>
 800ac44:	ea02 010b 	and.w	r1, r2, fp
 800ac48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ac4c:	dc7f      	bgt.n	800ad4e <_strtod_l+0x926>
 800ac4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ac52:	f77f aeaa 	ble.w	800a9aa <_strtod_l+0x582>
 800ac56:	4a4f      	ldr	r2, [pc, #316]	; (800ad94 <_strtod_l+0x96c>)
 800ac58:	2300      	movs	r3, #0
 800ac5a:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 800ac5e:	4650      	mov	r0, sl
 800ac60:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 800ac64:	4659      	mov	r1, fp
 800ac66:	f7f5 fcc7 	bl	80005f8 <__aeabi_dmul>
 800ac6a:	460b      	mov	r3, r1
 800ac6c:	4303      	orrs	r3, r0
 800ac6e:	bf08      	it	eq
 800ac70:	2322      	moveq	r3, #34	; 0x22
 800ac72:	4682      	mov	sl, r0
 800ac74:	468b      	mov	fp, r1
 800ac76:	bf08      	it	eq
 800ac78:	6023      	streq	r3, [r4, #0]
 800ac7a:	e62b      	b.n	800a8d4 <_strtod_l+0x4ac>
 800ac7c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac80:	fa02 f303 	lsl.w	r3, r2, r3
 800ac84:	ea03 0a0a 	and.w	sl, r3, sl
 800ac88:	e6de      	b.n	800aa48 <_strtod_l+0x620>
 800ac8a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800ac8e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800ac92:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800ac96:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800ac9a:	fa01 f308 	lsl.w	r3, r1, r8
 800ac9e:	930c      	str	r3, [sp, #48]	; 0x30
 800aca0:	9111      	str	r1, [sp, #68]	; 0x44
 800aca2:	e741      	b.n	800ab28 <_strtod_l+0x700>
 800aca4:	2300      	movs	r3, #0
 800aca6:	930c      	str	r3, [sp, #48]	; 0x30
 800aca8:	2301      	movs	r3, #1
 800acaa:	9311      	str	r3, [sp, #68]	; 0x44
 800acac:	e73c      	b.n	800ab28 <_strtod_l+0x700>
 800acae:	991e      	ldr	r1, [sp, #120]	; 0x78
 800acb0:	4642      	mov	r2, r8
 800acb2:	4620      	mov	r0, r4
 800acb4:	f003 fdca 	bl	800e84c <__lshift>
 800acb8:	901e      	str	r0, [sp, #120]	; 0x78
 800acba:	2800      	cmp	r0, #0
 800acbc:	f47f af66 	bne.w	800ab8c <_strtod_l+0x764>
 800acc0:	e5fe      	b.n	800a8c0 <_strtod_l+0x498>
 800acc2:	465f      	mov	r7, fp
 800acc4:	d16e      	bne.n	800ada4 <_strtod_l+0x97c>
 800acc6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acc8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800accc:	b342      	cbz	r2, 800ad20 <_strtod_l+0x8f8>
 800acce:	4a32      	ldr	r2, [pc, #200]	; (800ad98 <_strtod_l+0x970>)
 800acd0:	4293      	cmp	r3, r2
 800acd2:	d128      	bne.n	800ad26 <_strtod_l+0x8fe>
 800acd4:	9b04      	ldr	r3, [sp, #16]
 800acd6:	4650      	mov	r0, sl
 800acd8:	b1eb      	cbz	r3, 800ad16 <_strtod_l+0x8ee>
 800acda:	4a2d      	ldr	r2, [pc, #180]	; (800ad90 <_strtod_l+0x968>)
 800acdc:	403a      	ands	r2, r7
 800acde:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ace2:	f04f 31ff 	mov.w	r1, #4294967295
 800ace6:	d819      	bhi.n	800ad1c <_strtod_l+0x8f4>
 800ace8:	0d12      	lsrs	r2, r2, #20
 800acea:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800acee:	fa01 f303 	lsl.w	r3, r1, r3
 800acf2:	4298      	cmp	r0, r3
 800acf4:	d117      	bne.n	800ad26 <_strtod_l+0x8fe>
 800acf6:	4b29      	ldr	r3, [pc, #164]	; (800ad9c <_strtod_l+0x974>)
 800acf8:	429f      	cmp	r7, r3
 800acfa:	d102      	bne.n	800ad02 <_strtod_l+0x8da>
 800acfc:	3001      	adds	r0, #1
 800acfe:	f43f addf 	beq.w	800a8c0 <_strtod_l+0x498>
 800ad02:	4b23      	ldr	r3, [pc, #140]	; (800ad90 <_strtod_l+0x968>)
 800ad04:	403b      	ands	r3, r7
 800ad06:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ad0a:	f04f 0a00 	mov.w	sl, #0
 800ad0e:	9b04      	ldr	r3, [sp, #16]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1a0      	bne.n	800ac56 <_strtod_l+0x82e>
 800ad14:	e5de      	b.n	800a8d4 <_strtod_l+0x4ac>
 800ad16:	f04f 33ff 	mov.w	r3, #4294967295
 800ad1a:	e7ea      	b.n	800acf2 <_strtod_l+0x8ca>
 800ad1c:	460b      	mov	r3, r1
 800ad1e:	e7e8      	b.n	800acf2 <_strtod_l+0x8ca>
 800ad20:	ea53 030a 	orrs.w	r3, r3, sl
 800ad24:	d088      	beq.n	800ac38 <_strtod_l+0x810>
 800ad26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ad28:	b1db      	cbz	r3, 800ad62 <_strtod_l+0x93a>
 800ad2a:	423b      	tst	r3, r7
 800ad2c:	d0ef      	beq.n	800ad0e <_strtod_l+0x8e6>
 800ad2e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ad30:	9a04      	ldr	r2, [sp, #16]
 800ad32:	4650      	mov	r0, sl
 800ad34:	4659      	mov	r1, fp
 800ad36:	b1c3      	cbz	r3, 800ad6a <_strtod_l+0x942>
 800ad38:	f7ff fb58 	bl	800a3ec <sulp>
 800ad3c:	4602      	mov	r2, r0
 800ad3e:	460b      	mov	r3, r1
 800ad40:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad44:	f7f5 faa2 	bl	800028c <__adddf3>
 800ad48:	4682      	mov	sl, r0
 800ad4a:	468b      	mov	fp, r1
 800ad4c:	e7df      	b.n	800ad0e <_strtod_l+0x8e6>
 800ad4e:	4013      	ands	r3, r2
 800ad50:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ad54:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ad58:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ad5c:	f04f 3aff 	mov.w	sl, #4294967295
 800ad60:	e7d5      	b.n	800ad0e <_strtod_l+0x8e6>
 800ad62:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ad64:	ea13 0f0a 	tst.w	r3, sl
 800ad68:	e7e0      	b.n	800ad2c <_strtod_l+0x904>
 800ad6a:	f7ff fb3f 	bl	800a3ec <sulp>
 800ad6e:	4602      	mov	r2, r0
 800ad70:	460b      	mov	r3, r1
 800ad72:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ad76:	f7f5 fa87 	bl	8000288 <__aeabi_dsub>
 800ad7a:	2200      	movs	r2, #0
 800ad7c:	2300      	movs	r3, #0
 800ad7e:	4682      	mov	sl, r0
 800ad80:	468b      	mov	fp, r1
 800ad82:	f7f5 fea1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d0c1      	beq.n	800ad0e <_strtod_l+0x8e6>
 800ad8a:	e60e      	b.n	800a9aa <_strtod_l+0x582>
 800ad8c:	fffffc02 	.word	0xfffffc02
 800ad90:	7ff00000 	.word	0x7ff00000
 800ad94:	39500000 	.word	0x39500000
 800ad98:	000fffff 	.word	0x000fffff
 800ad9c:	7fefffff 	.word	0x7fefffff
 800ada0:	08010820 	.word	0x08010820
 800ada4:	4631      	mov	r1, r6
 800ada6:	4628      	mov	r0, r5
 800ada8:	f003 ff38 	bl	800ec1c <__ratio>
 800adac:	ec59 8b10 	vmov	r8, r9, d0
 800adb0:	ee10 0a10 	vmov	r0, s0
 800adb4:	2200      	movs	r2, #0
 800adb6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800adba:	4649      	mov	r1, r9
 800adbc:	f7f5 fe98 	bl	8000af0 <__aeabi_dcmple>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d07c      	beq.n	800aebe <_strtod_l+0xa96>
 800adc4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d04c      	beq.n	800ae64 <_strtod_l+0xa3c>
 800adca:	4b95      	ldr	r3, [pc, #596]	; (800b020 <_strtod_l+0xbf8>)
 800adcc:	2200      	movs	r2, #0
 800adce:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800add2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b020 <_strtod_l+0xbf8>
 800add6:	f04f 0800 	mov.w	r8, #0
 800adda:	4b92      	ldr	r3, [pc, #584]	; (800b024 <_strtod_l+0xbfc>)
 800addc:	403b      	ands	r3, r7
 800adde:	9311      	str	r3, [sp, #68]	; 0x44
 800ade0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800ade2:	4b91      	ldr	r3, [pc, #580]	; (800b028 <_strtod_l+0xc00>)
 800ade4:	429a      	cmp	r2, r3
 800ade6:	f040 80b2 	bne.w	800af4e <_strtod_l+0xb26>
 800adea:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800adee:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800adf2:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800adf6:	ec4b ab10 	vmov	d0, sl, fp
 800adfa:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800adfe:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800ae02:	f003 fe33 	bl	800ea6c <__ulp>
 800ae06:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae0a:	ec53 2b10 	vmov	r2, r3, d0
 800ae0e:	f7f5 fbf3 	bl	80005f8 <__aeabi_dmul>
 800ae12:	4652      	mov	r2, sl
 800ae14:	465b      	mov	r3, fp
 800ae16:	f7f5 fa39 	bl	800028c <__adddf3>
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4981      	ldr	r1, [pc, #516]	; (800b024 <_strtod_l+0xbfc>)
 800ae1e:	4a83      	ldr	r2, [pc, #524]	; (800b02c <_strtod_l+0xc04>)
 800ae20:	4019      	ands	r1, r3
 800ae22:	4291      	cmp	r1, r2
 800ae24:	4682      	mov	sl, r0
 800ae26:	d95e      	bls.n	800aee6 <_strtod_l+0xabe>
 800ae28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae2a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ae2e:	4293      	cmp	r3, r2
 800ae30:	d103      	bne.n	800ae3a <_strtod_l+0xa12>
 800ae32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ae34:	3301      	adds	r3, #1
 800ae36:	f43f ad43 	beq.w	800a8c0 <_strtod_l+0x498>
 800ae3a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 800b038 <_strtod_l+0xc10>
 800ae3e:	f04f 3aff 	mov.w	sl, #4294967295
 800ae42:	991e      	ldr	r1, [sp, #120]	; 0x78
 800ae44:	4620      	mov	r0, r4
 800ae46:	f003 fb18 	bl	800e47a <_Bfree>
 800ae4a:	9907      	ldr	r1, [sp, #28]
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f003 fb14 	bl	800e47a <_Bfree>
 800ae52:	4631      	mov	r1, r6
 800ae54:	4620      	mov	r0, r4
 800ae56:	f003 fb10 	bl	800e47a <_Bfree>
 800ae5a:	4629      	mov	r1, r5
 800ae5c:	4620      	mov	r0, r4
 800ae5e:	f003 fb0c 	bl	800e47a <_Bfree>
 800ae62:	e613      	b.n	800aa8c <_strtod_l+0x664>
 800ae64:	f1ba 0f00 	cmp.w	sl, #0
 800ae68:	d11b      	bne.n	800aea2 <_strtod_l+0xa7a>
 800ae6a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ae6e:	b9f3      	cbnz	r3, 800aeae <_strtod_l+0xa86>
 800ae70:	4b6b      	ldr	r3, [pc, #428]	; (800b020 <_strtod_l+0xbf8>)
 800ae72:	2200      	movs	r2, #0
 800ae74:	4640      	mov	r0, r8
 800ae76:	4649      	mov	r1, r9
 800ae78:	f7f5 fe30 	bl	8000adc <__aeabi_dcmplt>
 800ae7c:	b9d0      	cbnz	r0, 800aeb4 <_strtod_l+0xa8c>
 800ae7e:	4640      	mov	r0, r8
 800ae80:	4649      	mov	r1, r9
 800ae82:	4b6b      	ldr	r3, [pc, #428]	; (800b030 <_strtod_l+0xc08>)
 800ae84:	2200      	movs	r2, #0
 800ae86:	f7f5 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ae8a:	4680      	mov	r8, r0
 800ae8c:	4689      	mov	r9, r1
 800ae8e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ae92:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800ae96:	931b      	str	r3, [sp, #108]	; 0x6c
 800ae98:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 800ae9c:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800aea0:	e79b      	b.n	800adda <_strtod_l+0x9b2>
 800aea2:	f1ba 0f01 	cmp.w	sl, #1
 800aea6:	d102      	bne.n	800aeae <_strtod_l+0xa86>
 800aea8:	2f00      	cmp	r7, #0
 800aeaa:	f43f ad7e 	beq.w	800a9aa <_strtod_l+0x582>
 800aeae:	4b61      	ldr	r3, [pc, #388]	; (800b034 <_strtod_l+0xc0c>)
 800aeb0:	2200      	movs	r2, #0
 800aeb2:	e78c      	b.n	800adce <_strtod_l+0x9a6>
 800aeb4:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800b030 <_strtod_l+0xc08>
 800aeb8:	f04f 0800 	mov.w	r8, #0
 800aebc:	e7e7      	b.n	800ae8e <_strtod_l+0xa66>
 800aebe:	4b5c      	ldr	r3, [pc, #368]	; (800b030 <_strtod_l+0xc08>)
 800aec0:	4640      	mov	r0, r8
 800aec2:	4649      	mov	r1, r9
 800aec4:	2200      	movs	r2, #0
 800aec6:	f7f5 fb97 	bl	80005f8 <__aeabi_dmul>
 800aeca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800aecc:	4680      	mov	r8, r0
 800aece:	4689      	mov	r9, r1
 800aed0:	b933      	cbnz	r3, 800aee0 <_strtod_l+0xab8>
 800aed2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aed6:	9012      	str	r0, [sp, #72]	; 0x48
 800aed8:	9313      	str	r3, [sp, #76]	; 0x4c
 800aeda:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800aede:	e7dd      	b.n	800ae9c <_strtod_l+0xa74>
 800aee0:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800aee4:	e7f9      	b.n	800aeda <_strtod_l+0xab2>
 800aee6:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800aeea:	9b04      	ldr	r3, [sp, #16]
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d1a8      	bne.n	800ae42 <_strtod_l+0xa1a>
 800aef0:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800aef4:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800aef6:	0d1b      	lsrs	r3, r3, #20
 800aef8:	051b      	lsls	r3, r3, #20
 800aefa:	429a      	cmp	r2, r3
 800aefc:	d1a1      	bne.n	800ae42 <_strtod_l+0xa1a>
 800aefe:	4640      	mov	r0, r8
 800af00:	4649      	mov	r1, r9
 800af02:	f7f5 fed9 	bl	8000cb8 <__aeabi_d2lz>
 800af06:	f7f5 fb49 	bl	800059c <__aeabi_l2d>
 800af0a:	4602      	mov	r2, r0
 800af0c:	460b      	mov	r3, r1
 800af0e:	4640      	mov	r0, r8
 800af10:	4649      	mov	r1, r9
 800af12:	f7f5 f9b9 	bl	8000288 <__aeabi_dsub>
 800af16:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800af18:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af1c:	ea43 030a 	orr.w	r3, r3, sl
 800af20:	4313      	orrs	r3, r2
 800af22:	4680      	mov	r8, r0
 800af24:	4689      	mov	r9, r1
 800af26:	d053      	beq.n	800afd0 <_strtod_l+0xba8>
 800af28:	a335      	add	r3, pc, #212	; (adr r3, 800b000 <_strtod_l+0xbd8>)
 800af2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af2e:	f7f5 fdd5 	bl	8000adc <__aeabi_dcmplt>
 800af32:	2800      	cmp	r0, #0
 800af34:	f47f acce 	bne.w	800a8d4 <_strtod_l+0x4ac>
 800af38:	a333      	add	r3, pc, #204	; (adr r3, 800b008 <_strtod_l+0xbe0>)
 800af3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af3e:	4640      	mov	r0, r8
 800af40:	4649      	mov	r1, r9
 800af42:	f7f5 fde9 	bl	8000b18 <__aeabi_dcmpgt>
 800af46:	2800      	cmp	r0, #0
 800af48:	f43f af7b 	beq.w	800ae42 <_strtod_l+0xa1a>
 800af4c:	e4c2      	b.n	800a8d4 <_strtod_l+0x4ac>
 800af4e:	9b04      	ldr	r3, [sp, #16]
 800af50:	b333      	cbz	r3, 800afa0 <_strtod_l+0xb78>
 800af52:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800af54:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800af58:	d822      	bhi.n	800afa0 <_strtod_l+0xb78>
 800af5a:	a32d      	add	r3, pc, #180	; (adr r3, 800b010 <_strtod_l+0xbe8>)
 800af5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af60:	4640      	mov	r0, r8
 800af62:	4649      	mov	r1, r9
 800af64:	f7f5 fdc4 	bl	8000af0 <__aeabi_dcmple>
 800af68:	b1a0      	cbz	r0, 800af94 <_strtod_l+0xb6c>
 800af6a:	4649      	mov	r1, r9
 800af6c:	4640      	mov	r0, r8
 800af6e:	f7f5 fe1b 	bl	8000ba8 <__aeabi_d2uiz>
 800af72:	2801      	cmp	r0, #1
 800af74:	bf38      	it	cc
 800af76:	2001      	movcc	r0, #1
 800af78:	f7f5 fac4 	bl	8000504 <__aeabi_ui2d>
 800af7c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800af7e:	4680      	mov	r8, r0
 800af80:	4689      	mov	r9, r1
 800af82:	bb13      	cbnz	r3, 800afca <_strtod_l+0xba2>
 800af84:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800af88:	9014      	str	r0, [sp, #80]	; 0x50
 800af8a:	9315      	str	r3, [sp, #84]	; 0x54
 800af8c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800af90:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800af94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800af96:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800af98:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800af9c:	1a9b      	subs	r3, r3, r2
 800af9e:	930d      	str	r3, [sp, #52]	; 0x34
 800afa0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afa4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800afa8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800afac:	f003 fd5e 	bl	800ea6c <__ulp>
 800afb0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800afb4:	ec53 2b10 	vmov	r2, r3, d0
 800afb8:	f7f5 fb1e 	bl	80005f8 <__aeabi_dmul>
 800afbc:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800afc0:	f7f5 f964 	bl	800028c <__adddf3>
 800afc4:	4682      	mov	sl, r0
 800afc6:	468b      	mov	fp, r1
 800afc8:	e78f      	b.n	800aeea <_strtod_l+0xac2>
 800afca:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800afce:	e7dd      	b.n	800af8c <_strtod_l+0xb64>
 800afd0:	a311      	add	r3, pc, #68	; (adr r3, 800b018 <_strtod_l+0xbf0>)
 800afd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd6:	f7f5 fd81 	bl	8000adc <__aeabi_dcmplt>
 800afda:	e7b4      	b.n	800af46 <_strtod_l+0xb1e>
 800afdc:	2300      	movs	r3, #0
 800afde:	930e      	str	r3, [sp, #56]	; 0x38
 800afe0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800afe2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800afe4:	6013      	str	r3, [r2, #0]
 800afe6:	f7ff ba65 	b.w	800a4b4 <_strtod_l+0x8c>
 800afea:	2b65      	cmp	r3, #101	; 0x65
 800afec:	f43f ab5d 	beq.w	800a6aa <_strtod_l+0x282>
 800aff0:	2b45      	cmp	r3, #69	; 0x45
 800aff2:	f43f ab5a 	beq.w	800a6aa <_strtod_l+0x282>
 800aff6:	2201      	movs	r2, #1
 800aff8:	f7ff bb92 	b.w	800a720 <_strtod_l+0x2f8>
 800affc:	f3af 8000 	nop.w
 800b000:	94a03595 	.word	0x94a03595
 800b004:	3fdfffff 	.word	0x3fdfffff
 800b008:	35afe535 	.word	0x35afe535
 800b00c:	3fe00000 	.word	0x3fe00000
 800b010:	ffc00000 	.word	0xffc00000
 800b014:	41dfffff 	.word	0x41dfffff
 800b018:	94a03595 	.word	0x94a03595
 800b01c:	3fcfffff 	.word	0x3fcfffff
 800b020:	3ff00000 	.word	0x3ff00000
 800b024:	7ff00000 	.word	0x7ff00000
 800b028:	7fe00000 	.word	0x7fe00000
 800b02c:	7c9fffff 	.word	0x7c9fffff
 800b030:	3fe00000 	.word	0x3fe00000
 800b034:	bff00000 	.word	0xbff00000
 800b038:	7fefffff 	.word	0x7fefffff

0800b03c <_strtod_r>:
 800b03c:	4b01      	ldr	r3, [pc, #4]	; (800b044 <_strtod_r+0x8>)
 800b03e:	f7ff b9f3 	b.w	800a428 <_strtod_l>
 800b042:	bf00      	nop
 800b044:	2000062c 	.word	0x2000062c

0800b048 <_strtol_l.isra.0>:
 800b048:	2b01      	cmp	r3, #1
 800b04a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b04e:	d001      	beq.n	800b054 <_strtol_l.isra.0+0xc>
 800b050:	2b24      	cmp	r3, #36	; 0x24
 800b052:	d906      	bls.n	800b062 <_strtol_l.isra.0+0x1a>
 800b054:	f7fd f822 	bl	800809c <__errno>
 800b058:	2316      	movs	r3, #22
 800b05a:	6003      	str	r3, [r0, #0]
 800b05c:	2000      	movs	r0, #0
 800b05e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b062:	4f3a      	ldr	r7, [pc, #232]	; (800b14c <_strtol_l.isra.0+0x104>)
 800b064:	468e      	mov	lr, r1
 800b066:	4676      	mov	r6, lr
 800b068:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b06c:	5de5      	ldrb	r5, [r4, r7]
 800b06e:	f015 0508 	ands.w	r5, r5, #8
 800b072:	d1f8      	bne.n	800b066 <_strtol_l.isra.0+0x1e>
 800b074:	2c2d      	cmp	r4, #45	; 0x2d
 800b076:	d134      	bne.n	800b0e2 <_strtol_l.isra.0+0x9a>
 800b078:	f89e 4000 	ldrb.w	r4, [lr]
 800b07c:	f04f 0801 	mov.w	r8, #1
 800b080:	f106 0e02 	add.w	lr, r6, #2
 800b084:	2b00      	cmp	r3, #0
 800b086:	d05c      	beq.n	800b142 <_strtol_l.isra.0+0xfa>
 800b088:	2b10      	cmp	r3, #16
 800b08a:	d10c      	bne.n	800b0a6 <_strtol_l.isra.0+0x5e>
 800b08c:	2c30      	cmp	r4, #48	; 0x30
 800b08e:	d10a      	bne.n	800b0a6 <_strtol_l.isra.0+0x5e>
 800b090:	f89e 4000 	ldrb.w	r4, [lr]
 800b094:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b098:	2c58      	cmp	r4, #88	; 0x58
 800b09a:	d14d      	bne.n	800b138 <_strtol_l.isra.0+0xf0>
 800b09c:	f89e 4001 	ldrb.w	r4, [lr, #1]
 800b0a0:	2310      	movs	r3, #16
 800b0a2:	f10e 0e02 	add.w	lr, lr, #2
 800b0a6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 800b0aa:	f10c 3cff 	add.w	ip, ip, #4294967295
 800b0ae:	2600      	movs	r6, #0
 800b0b0:	fbbc f9f3 	udiv	r9, ip, r3
 800b0b4:	4635      	mov	r5, r6
 800b0b6:	fb03 ca19 	mls	sl, r3, r9, ip
 800b0ba:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800b0be:	2f09      	cmp	r7, #9
 800b0c0:	d818      	bhi.n	800b0f4 <_strtol_l.isra.0+0xac>
 800b0c2:	463c      	mov	r4, r7
 800b0c4:	42a3      	cmp	r3, r4
 800b0c6:	dd24      	ble.n	800b112 <_strtol_l.isra.0+0xca>
 800b0c8:	2e00      	cmp	r6, #0
 800b0ca:	db1f      	blt.n	800b10c <_strtol_l.isra.0+0xc4>
 800b0cc:	45a9      	cmp	r9, r5
 800b0ce:	d31d      	bcc.n	800b10c <_strtol_l.isra.0+0xc4>
 800b0d0:	d101      	bne.n	800b0d6 <_strtol_l.isra.0+0x8e>
 800b0d2:	45a2      	cmp	sl, r4
 800b0d4:	db1a      	blt.n	800b10c <_strtol_l.isra.0+0xc4>
 800b0d6:	fb05 4503 	mla	r5, r5, r3, r4
 800b0da:	2601      	movs	r6, #1
 800b0dc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 800b0e0:	e7eb      	b.n	800b0ba <_strtol_l.isra.0+0x72>
 800b0e2:	2c2b      	cmp	r4, #43	; 0x2b
 800b0e4:	bf08      	it	eq
 800b0e6:	f89e 4000 	ldrbeq.w	r4, [lr]
 800b0ea:	46a8      	mov	r8, r5
 800b0ec:	bf08      	it	eq
 800b0ee:	f106 0e02 	addeq.w	lr, r6, #2
 800b0f2:	e7c7      	b.n	800b084 <_strtol_l.isra.0+0x3c>
 800b0f4:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 800b0f8:	2f19      	cmp	r7, #25
 800b0fa:	d801      	bhi.n	800b100 <_strtol_l.isra.0+0xb8>
 800b0fc:	3c37      	subs	r4, #55	; 0x37
 800b0fe:	e7e1      	b.n	800b0c4 <_strtol_l.isra.0+0x7c>
 800b100:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800b104:	2f19      	cmp	r7, #25
 800b106:	d804      	bhi.n	800b112 <_strtol_l.isra.0+0xca>
 800b108:	3c57      	subs	r4, #87	; 0x57
 800b10a:	e7db      	b.n	800b0c4 <_strtol_l.isra.0+0x7c>
 800b10c:	f04f 36ff 	mov.w	r6, #4294967295
 800b110:	e7e4      	b.n	800b0dc <_strtol_l.isra.0+0x94>
 800b112:	2e00      	cmp	r6, #0
 800b114:	da05      	bge.n	800b122 <_strtol_l.isra.0+0xda>
 800b116:	2322      	movs	r3, #34	; 0x22
 800b118:	6003      	str	r3, [r0, #0]
 800b11a:	4665      	mov	r5, ip
 800b11c:	b942      	cbnz	r2, 800b130 <_strtol_l.isra.0+0xe8>
 800b11e:	4628      	mov	r0, r5
 800b120:	e79d      	b.n	800b05e <_strtol_l.isra.0+0x16>
 800b122:	f1b8 0f00 	cmp.w	r8, #0
 800b126:	d000      	beq.n	800b12a <_strtol_l.isra.0+0xe2>
 800b128:	426d      	negs	r5, r5
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	d0f7      	beq.n	800b11e <_strtol_l.isra.0+0xd6>
 800b12e:	b10e      	cbz	r6, 800b134 <_strtol_l.isra.0+0xec>
 800b130:	f10e 31ff 	add.w	r1, lr, #4294967295
 800b134:	6011      	str	r1, [r2, #0]
 800b136:	e7f2      	b.n	800b11e <_strtol_l.isra.0+0xd6>
 800b138:	2430      	movs	r4, #48	; 0x30
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d1b3      	bne.n	800b0a6 <_strtol_l.isra.0+0x5e>
 800b13e:	2308      	movs	r3, #8
 800b140:	e7b1      	b.n	800b0a6 <_strtol_l.isra.0+0x5e>
 800b142:	2c30      	cmp	r4, #48	; 0x30
 800b144:	d0a4      	beq.n	800b090 <_strtol_l.isra.0+0x48>
 800b146:	230a      	movs	r3, #10
 800b148:	e7ad      	b.n	800b0a6 <_strtol_l.isra.0+0x5e>
 800b14a:	bf00      	nop
 800b14c:	080106ed 	.word	0x080106ed

0800b150 <_strtol_r>:
 800b150:	f7ff bf7a 	b.w	800b048 <_strtol_l.isra.0>

0800b154 <_strtoll_l.isra.0>:
 800b154:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b158:	b087      	sub	sp, #28
 800b15a:	4691      	mov	r9, r2
 800b15c:	4a47      	ldr	r2, [pc, #284]	; (800b27c <_strtoll_l.isra.0+0x128>)
 800b15e:	9005      	str	r0, [sp, #20]
 800b160:	4688      	mov	r8, r1
 800b162:	461f      	mov	r7, r3
 800b164:	460d      	mov	r5, r1
 800b166:	462b      	mov	r3, r5
 800b168:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b16c:	5ca6      	ldrb	r6, [r4, r2]
 800b16e:	f016 0608 	ands.w	r6, r6, #8
 800b172:	d1f8      	bne.n	800b166 <_strtoll_l.isra.0+0x12>
 800b174:	2c2d      	cmp	r4, #45	; 0x2d
 800b176:	d147      	bne.n	800b208 <_strtoll_l.isra.0+0xb4>
 800b178:	782c      	ldrb	r4, [r5, #0]
 800b17a:	2601      	movs	r6, #1
 800b17c:	1c9d      	adds	r5, r3, #2
 800b17e:	2f00      	cmp	r7, #0
 800b180:	d077      	beq.n	800b272 <_strtoll_l.isra.0+0x11e>
 800b182:	2f10      	cmp	r7, #16
 800b184:	d109      	bne.n	800b19a <_strtoll_l.isra.0+0x46>
 800b186:	2c30      	cmp	r4, #48	; 0x30
 800b188:	d107      	bne.n	800b19a <_strtoll_l.isra.0+0x46>
 800b18a:	782b      	ldrb	r3, [r5, #0]
 800b18c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b190:	2b58      	cmp	r3, #88	; 0x58
 800b192:	d169      	bne.n	800b268 <_strtoll_l.isra.0+0x114>
 800b194:	786c      	ldrb	r4, [r5, #1]
 800b196:	2710      	movs	r7, #16
 800b198:	3502      	adds	r5, #2
 800b19a:	f04f 32ff 	mov.w	r2, #4294967295
 800b19e:	1990      	adds	r0, r2, r6
 800b1a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800b1a4:	ea4f 7be7 	mov.w	fp, r7, asr #31
 800b1a8:	eb43 71e6 	adc.w	r1, r3, r6, asr #31
 800b1ac:	463a      	mov	r2, r7
 800b1ae:	465b      	mov	r3, fp
 800b1b0:	e9cd 0100 	strd	r0, r1, [sp]
 800b1b4:	f7f5 fd68 	bl	8000c88 <__aeabi_uldivmod>
 800b1b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b1bc:	46ba      	mov	sl, r7
 800b1be:	4696      	mov	lr, r2
 800b1c0:	2300      	movs	r3, #0
 800b1c2:	2000      	movs	r0, #0
 800b1c4:	2100      	movs	r1, #0
 800b1c6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b1ca:	f1bc 0f09 	cmp.w	ip, #9
 800b1ce:	d820      	bhi.n	800b212 <_strtoll_l.isra.0+0xbe>
 800b1d0:	4664      	mov	r4, ip
 800b1d2:	42a7      	cmp	r7, r4
 800b1d4:	dd2e      	ble.n	800b234 <_strtoll_l.isra.0+0xe0>
 800b1d6:	1c5a      	adds	r2, r3, #1
 800b1d8:	d013      	beq.n	800b202 <_strtoll_l.isra.0+0xae>
 800b1da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b1de:	428b      	cmp	r3, r1
 800b1e0:	bf08      	it	eq
 800b1e2:	4282      	cmpeq	r2, r0
 800b1e4:	d323      	bcc.n	800b22e <_strtoll_l.isra.0+0xda>
 800b1e6:	d101      	bne.n	800b1ec <_strtoll_l.isra.0+0x98>
 800b1e8:	45a6      	cmp	lr, r4
 800b1ea:	db20      	blt.n	800b22e <_strtoll_l.isra.0+0xda>
 800b1ec:	fb0a f301 	mul.w	r3, sl, r1
 800b1f0:	fb00 330b 	mla	r3, r0, fp, r3
 800b1f4:	fbaa 0100 	umull	r0, r1, sl, r0
 800b1f8:	4419      	add	r1, r3
 800b1fa:	1900      	adds	r0, r0, r4
 800b1fc:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b200:	2301      	movs	r3, #1
 800b202:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b206:	e7de      	b.n	800b1c6 <_strtoll_l.isra.0+0x72>
 800b208:	2c2b      	cmp	r4, #43	; 0x2b
 800b20a:	bf04      	itt	eq
 800b20c:	782c      	ldrbeq	r4, [r5, #0]
 800b20e:	1c9d      	addeq	r5, r3, #2
 800b210:	e7b5      	b.n	800b17e <_strtoll_l.isra.0+0x2a>
 800b212:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b216:	f1bc 0f19 	cmp.w	ip, #25
 800b21a:	d801      	bhi.n	800b220 <_strtoll_l.isra.0+0xcc>
 800b21c:	3c37      	subs	r4, #55	; 0x37
 800b21e:	e7d8      	b.n	800b1d2 <_strtoll_l.isra.0+0x7e>
 800b220:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b224:	f1bc 0f19 	cmp.w	ip, #25
 800b228:	d804      	bhi.n	800b234 <_strtoll_l.isra.0+0xe0>
 800b22a:	3c57      	subs	r4, #87	; 0x57
 800b22c:	e7d1      	b.n	800b1d2 <_strtoll_l.isra.0+0x7e>
 800b22e:	f04f 33ff 	mov.w	r3, #4294967295
 800b232:	e7e6      	b.n	800b202 <_strtoll_l.isra.0+0xae>
 800b234:	1c5a      	adds	r2, r3, #1
 800b236:	d10a      	bne.n	800b24e <_strtoll_l.isra.0+0xfa>
 800b238:	9a05      	ldr	r2, [sp, #20]
 800b23a:	2322      	movs	r3, #34	; 0x22
 800b23c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b240:	6013      	str	r3, [r2, #0]
 800b242:	f1b9 0f00 	cmp.w	r9, #0
 800b246:	d10a      	bne.n	800b25e <_strtoll_l.isra.0+0x10a>
 800b248:	b007      	add	sp, #28
 800b24a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b24e:	b116      	cbz	r6, 800b256 <_strtoll_l.isra.0+0x102>
 800b250:	4240      	negs	r0, r0
 800b252:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b256:	f1b9 0f00 	cmp.w	r9, #0
 800b25a:	d0f5      	beq.n	800b248 <_strtoll_l.isra.0+0xf4>
 800b25c:	b10b      	cbz	r3, 800b262 <_strtoll_l.isra.0+0x10e>
 800b25e:	f105 38ff 	add.w	r8, r5, #4294967295
 800b262:	f8c9 8000 	str.w	r8, [r9]
 800b266:	e7ef      	b.n	800b248 <_strtoll_l.isra.0+0xf4>
 800b268:	2430      	movs	r4, #48	; 0x30
 800b26a:	2f00      	cmp	r7, #0
 800b26c:	d195      	bne.n	800b19a <_strtoll_l.isra.0+0x46>
 800b26e:	2708      	movs	r7, #8
 800b270:	e793      	b.n	800b19a <_strtoll_l.isra.0+0x46>
 800b272:	2c30      	cmp	r4, #48	; 0x30
 800b274:	d089      	beq.n	800b18a <_strtoll_l.isra.0+0x36>
 800b276:	270a      	movs	r7, #10
 800b278:	e78f      	b.n	800b19a <_strtoll_l.isra.0+0x46>
 800b27a:	bf00      	nop
 800b27c:	080106ed 	.word	0x080106ed

0800b280 <_strtoll_r>:
 800b280:	f7ff bf68 	b.w	800b154 <_strtoll_l.isra.0>

0800b284 <_strtoul_l.isra.0>:
 800b284:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b288:	4e3b      	ldr	r6, [pc, #236]	; (800b378 <_strtoul_l.isra.0+0xf4>)
 800b28a:	4686      	mov	lr, r0
 800b28c:	468c      	mov	ip, r1
 800b28e:	4660      	mov	r0, ip
 800b290:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b294:	5da5      	ldrb	r5, [r4, r6]
 800b296:	f015 0508 	ands.w	r5, r5, #8
 800b29a:	d1f8      	bne.n	800b28e <_strtoul_l.isra.0+0xa>
 800b29c:	2c2d      	cmp	r4, #45	; 0x2d
 800b29e:	d134      	bne.n	800b30a <_strtoul_l.isra.0+0x86>
 800b2a0:	f89c 4000 	ldrb.w	r4, [ip]
 800b2a4:	f04f 0801 	mov.w	r8, #1
 800b2a8:	f100 0c02 	add.w	ip, r0, #2
 800b2ac:	2b00      	cmp	r3, #0
 800b2ae:	d05e      	beq.n	800b36e <_strtoul_l.isra.0+0xea>
 800b2b0:	2b10      	cmp	r3, #16
 800b2b2:	d10c      	bne.n	800b2ce <_strtoul_l.isra.0+0x4a>
 800b2b4:	2c30      	cmp	r4, #48	; 0x30
 800b2b6:	d10a      	bne.n	800b2ce <_strtoul_l.isra.0+0x4a>
 800b2b8:	f89c 0000 	ldrb.w	r0, [ip]
 800b2bc:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800b2c0:	2858      	cmp	r0, #88	; 0x58
 800b2c2:	d14f      	bne.n	800b364 <_strtoul_l.isra.0+0xe0>
 800b2c4:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800b2c8:	2310      	movs	r3, #16
 800b2ca:	f10c 0c02 	add.w	ip, ip, #2
 800b2ce:	f04f 37ff 	mov.w	r7, #4294967295
 800b2d2:	2500      	movs	r5, #0
 800b2d4:	fbb7 f7f3 	udiv	r7, r7, r3
 800b2d8:	fb03 f907 	mul.w	r9, r3, r7
 800b2dc:	ea6f 0909 	mvn.w	r9, r9
 800b2e0:	4628      	mov	r0, r5
 800b2e2:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800b2e6:	2e09      	cmp	r6, #9
 800b2e8:	d818      	bhi.n	800b31c <_strtoul_l.isra.0+0x98>
 800b2ea:	4634      	mov	r4, r6
 800b2ec:	42a3      	cmp	r3, r4
 800b2ee:	dd24      	ble.n	800b33a <_strtoul_l.isra.0+0xb6>
 800b2f0:	2d00      	cmp	r5, #0
 800b2f2:	db1f      	blt.n	800b334 <_strtoul_l.isra.0+0xb0>
 800b2f4:	4287      	cmp	r7, r0
 800b2f6:	d31d      	bcc.n	800b334 <_strtoul_l.isra.0+0xb0>
 800b2f8:	d101      	bne.n	800b2fe <_strtoul_l.isra.0+0x7a>
 800b2fa:	45a1      	cmp	r9, r4
 800b2fc:	db1a      	blt.n	800b334 <_strtoul_l.isra.0+0xb0>
 800b2fe:	fb00 4003 	mla	r0, r0, r3, r4
 800b302:	2501      	movs	r5, #1
 800b304:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b308:	e7eb      	b.n	800b2e2 <_strtoul_l.isra.0+0x5e>
 800b30a:	2c2b      	cmp	r4, #43	; 0x2b
 800b30c:	bf08      	it	eq
 800b30e:	f89c 4000 	ldrbeq.w	r4, [ip]
 800b312:	46a8      	mov	r8, r5
 800b314:	bf08      	it	eq
 800b316:	f100 0c02 	addeq.w	ip, r0, #2
 800b31a:	e7c7      	b.n	800b2ac <_strtoul_l.isra.0+0x28>
 800b31c:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800b320:	2e19      	cmp	r6, #25
 800b322:	d801      	bhi.n	800b328 <_strtoul_l.isra.0+0xa4>
 800b324:	3c37      	subs	r4, #55	; 0x37
 800b326:	e7e1      	b.n	800b2ec <_strtoul_l.isra.0+0x68>
 800b328:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800b32c:	2e19      	cmp	r6, #25
 800b32e:	d804      	bhi.n	800b33a <_strtoul_l.isra.0+0xb6>
 800b330:	3c57      	subs	r4, #87	; 0x57
 800b332:	e7db      	b.n	800b2ec <_strtoul_l.isra.0+0x68>
 800b334:	f04f 35ff 	mov.w	r5, #4294967295
 800b338:	e7e4      	b.n	800b304 <_strtoul_l.isra.0+0x80>
 800b33a:	2d00      	cmp	r5, #0
 800b33c:	da07      	bge.n	800b34e <_strtoul_l.isra.0+0xca>
 800b33e:	2322      	movs	r3, #34	; 0x22
 800b340:	f8ce 3000 	str.w	r3, [lr]
 800b344:	f04f 30ff 	mov.w	r0, #4294967295
 800b348:	b942      	cbnz	r2, 800b35c <_strtoul_l.isra.0+0xd8>
 800b34a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b34e:	f1b8 0f00 	cmp.w	r8, #0
 800b352:	d000      	beq.n	800b356 <_strtoul_l.isra.0+0xd2>
 800b354:	4240      	negs	r0, r0
 800b356:	2a00      	cmp	r2, #0
 800b358:	d0f7      	beq.n	800b34a <_strtoul_l.isra.0+0xc6>
 800b35a:	b10d      	cbz	r5, 800b360 <_strtoul_l.isra.0+0xdc>
 800b35c:	f10c 31ff 	add.w	r1, ip, #4294967295
 800b360:	6011      	str	r1, [r2, #0]
 800b362:	e7f2      	b.n	800b34a <_strtoul_l.isra.0+0xc6>
 800b364:	2430      	movs	r4, #48	; 0x30
 800b366:	2b00      	cmp	r3, #0
 800b368:	d1b1      	bne.n	800b2ce <_strtoul_l.isra.0+0x4a>
 800b36a:	2308      	movs	r3, #8
 800b36c:	e7af      	b.n	800b2ce <_strtoul_l.isra.0+0x4a>
 800b36e:	2c30      	cmp	r4, #48	; 0x30
 800b370:	d0a2      	beq.n	800b2b8 <_strtoul_l.isra.0+0x34>
 800b372:	230a      	movs	r3, #10
 800b374:	e7ab      	b.n	800b2ce <_strtoul_l.isra.0+0x4a>
 800b376:	bf00      	nop
 800b378:	080106ed 	.word	0x080106ed

0800b37c <_strtoul_r>:
 800b37c:	f7ff bf82 	b.w	800b284 <_strtoul_l.isra.0>

0800b380 <_strtoull_l.isra.0>:
 800b380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b384:	b085      	sub	sp, #20
 800b386:	4691      	mov	r9, r2
 800b388:	4a49      	ldr	r2, [pc, #292]	; (800b4b0 <_strtoull_l.isra.0+0x130>)
 800b38a:	9003      	str	r0, [sp, #12]
 800b38c:	4688      	mov	r8, r1
 800b38e:	461e      	mov	r6, r3
 800b390:	460d      	mov	r5, r1
 800b392:	462b      	mov	r3, r5
 800b394:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b398:	5ca7      	ldrb	r7, [r4, r2]
 800b39a:	f017 0708 	ands.w	r7, r7, #8
 800b39e:	d1f8      	bne.n	800b392 <_strtoull_l.isra.0+0x12>
 800b3a0:	2c2d      	cmp	r4, #45	; 0x2d
 800b3a2:	d14a      	bne.n	800b43a <_strtoull_l.isra.0+0xba>
 800b3a4:	782c      	ldrb	r4, [r5, #0]
 800b3a6:	2701      	movs	r7, #1
 800b3a8:	1c9d      	adds	r5, r3, #2
 800b3aa:	2e00      	cmp	r6, #0
 800b3ac:	d07c      	beq.n	800b4a8 <_strtoull_l.isra.0+0x128>
 800b3ae:	2e10      	cmp	r6, #16
 800b3b0:	d109      	bne.n	800b3c6 <_strtoull_l.isra.0+0x46>
 800b3b2:	2c30      	cmp	r4, #48	; 0x30
 800b3b4:	d107      	bne.n	800b3c6 <_strtoull_l.isra.0+0x46>
 800b3b6:	782b      	ldrb	r3, [r5, #0]
 800b3b8:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800b3bc:	2b58      	cmp	r3, #88	; 0x58
 800b3be:	d16e      	bne.n	800b49e <_strtoull_l.isra.0+0x11e>
 800b3c0:	786c      	ldrb	r4, [r5, #1]
 800b3c2:	2610      	movs	r6, #16
 800b3c4:	3502      	adds	r5, #2
 800b3c6:	ea4f 7be6 	mov.w	fp, r6, asr #31
 800b3ca:	4632      	mov	r2, r6
 800b3cc:	465b      	mov	r3, fp
 800b3ce:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d2:	f04f 31ff 	mov.w	r1, #4294967295
 800b3d6:	f7f5 fc57 	bl	8000c88 <__aeabi_uldivmod>
 800b3da:	e9cd 0100 	strd	r0, r1, [sp]
 800b3de:	4632      	mov	r2, r6
 800b3e0:	465b      	mov	r3, fp
 800b3e2:	f04f 30ff 	mov.w	r0, #4294967295
 800b3e6:	f04f 31ff 	mov.w	r1, #4294967295
 800b3ea:	f7f5 fc4d 	bl	8000c88 <__aeabi_uldivmod>
 800b3ee:	46b2      	mov	sl, r6
 800b3f0:	4696      	mov	lr, r2
 800b3f2:	2300      	movs	r3, #0
 800b3f4:	2000      	movs	r0, #0
 800b3f6:	2100      	movs	r1, #0
 800b3f8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b3fc:	f1bc 0f09 	cmp.w	ip, #9
 800b400:	d820      	bhi.n	800b444 <_strtoull_l.isra.0+0xc4>
 800b402:	4664      	mov	r4, ip
 800b404:	42a6      	cmp	r6, r4
 800b406:	dd2e      	ble.n	800b466 <_strtoull_l.isra.0+0xe6>
 800b408:	2b00      	cmp	r3, #0
 800b40a:	db29      	blt.n	800b460 <_strtoull_l.isra.0+0xe0>
 800b40c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b410:	428b      	cmp	r3, r1
 800b412:	bf08      	it	eq
 800b414:	4282      	cmpeq	r2, r0
 800b416:	d323      	bcc.n	800b460 <_strtoull_l.isra.0+0xe0>
 800b418:	d101      	bne.n	800b41e <_strtoull_l.isra.0+0x9e>
 800b41a:	45a6      	cmp	lr, r4
 800b41c:	db20      	blt.n	800b460 <_strtoull_l.isra.0+0xe0>
 800b41e:	fb0a f301 	mul.w	r3, sl, r1
 800b422:	fb00 330b 	mla	r3, r0, fp, r3
 800b426:	fbaa 0100 	umull	r0, r1, sl, r0
 800b42a:	4419      	add	r1, r3
 800b42c:	1900      	adds	r0, r0, r4
 800b42e:	eb41 71e4 	adc.w	r1, r1, r4, asr #31
 800b432:	2301      	movs	r3, #1
 800b434:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b438:	e7de      	b.n	800b3f8 <_strtoull_l.isra.0+0x78>
 800b43a:	2c2b      	cmp	r4, #43	; 0x2b
 800b43c:	bf04      	itt	eq
 800b43e:	782c      	ldrbeq	r4, [r5, #0]
 800b440:	1c9d      	addeq	r5, r3, #2
 800b442:	e7b2      	b.n	800b3aa <_strtoull_l.isra.0+0x2a>
 800b444:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b448:	f1bc 0f19 	cmp.w	ip, #25
 800b44c:	d801      	bhi.n	800b452 <_strtoull_l.isra.0+0xd2>
 800b44e:	3c37      	subs	r4, #55	; 0x37
 800b450:	e7d8      	b.n	800b404 <_strtoull_l.isra.0+0x84>
 800b452:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b456:	f1bc 0f19 	cmp.w	ip, #25
 800b45a:	d804      	bhi.n	800b466 <_strtoull_l.isra.0+0xe6>
 800b45c:	3c57      	subs	r4, #87	; 0x57
 800b45e:	e7d1      	b.n	800b404 <_strtoull_l.isra.0+0x84>
 800b460:	f04f 33ff 	mov.w	r3, #4294967295
 800b464:	e7e6      	b.n	800b434 <_strtoull_l.isra.0+0xb4>
 800b466:	2b00      	cmp	r3, #0
 800b468:	da0c      	bge.n	800b484 <_strtoull_l.isra.0+0x104>
 800b46a:	9a03      	ldr	r2, [sp, #12]
 800b46c:	2322      	movs	r3, #34	; 0x22
 800b46e:	6013      	str	r3, [r2, #0]
 800b470:	f04f 30ff 	mov.w	r0, #4294967295
 800b474:	f04f 31ff 	mov.w	r1, #4294967295
 800b478:	f1b9 0f00 	cmp.w	r9, #0
 800b47c:	d10a      	bne.n	800b494 <_strtoull_l.isra.0+0x114>
 800b47e:	b005      	add	sp, #20
 800b480:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b484:	b117      	cbz	r7, 800b48c <_strtoull_l.isra.0+0x10c>
 800b486:	4240      	negs	r0, r0
 800b488:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800b48c:	f1b9 0f00 	cmp.w	r9, #0
 800b490:	d0f5      	beq.n	800b47e <_strtoull_l.isra.0+0xfe>
 800b492:	b10b      	cbz	r3, 800b498 <_strtoull_l.isra.0+0x118>
 800b494:	f105 38ff 	add.w	r8, r5, #4294967295
 800b498:	f8c9 8000 	str.w	r8, [r9]
 800b49c:	e7ef      	b.n	800b47e <_strtoull_l.isra.0+0xfe>
 800b49e:	2430      	movs	r4, #48	; 0x30
 800b4a0:	2e00      	cmp	r6, #0
 800b4a2:	d190      	bne.n	800b3c6 <_strtoull_l.isra.0+0x46>
 800b4a4:	2608      	movs	r6, #8
 800b4a6:	e78e      	b.n	800b3c6 <_strtoull_l.isra.0+0x46>
 800b4a8:	2c30      	cmp	r4, #48	; 0x30
 800b4aa:	d084      	beq.n	800b3b6 <_strtoull_l.isra.0+0x36>
 800b4ac:	260a      	movs	r6, #10
 800b4ae:	e78a      	b.n	800b3c6 <_strtoull_l.isra.0+0x46>
 800b4b0:	080106ed 	.word	0x080106ed

0800b4b4 <_strtoull_r>:
 800b4b4:	f7ff bf64 	b.w	800b380 <_strtoull_l.isra.0>

0800b4b8 <_sungetc_r>:
 800b4b8:	b538      	push	{r3, r4, r5, lr}
 800b4ba:	1c4b      	adds	r3, r1, #1
 800b4bc:	4614      	mov	r4, r2
 800b4be:	d103      	bne.n	800b4c8 <_sungetc_r+0x10>
 800b4c0:	f04f 35ff 	mov.w	r5, #4294967295
 800b4c4:	4628      	mov	r0, r5
 800b4c6:	bd38      	pop	{r3, r4, r5, pc}
 800b4c8:	8993      	ldrh	r3, [r2, #12]
 800b4ca:	f023 0320 	bic.w	r3, r3, #32
 800b4ce:	8193      	strh	r3, [r2, #12]
 800b4d0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800b4d2:	6852      	ldr	r2, [r2, #4]
 800b4d4:	b2cd      	uxtb	r5, r1
 800b4d6:	b18b      	cbz	r3, 800b4fc <_sungetc_r+0x44>
 800b4d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b4da:	4293      	cmp	r3, r2
 800b4dc:	dd08      	ble.n	800b4f0 <_sungetc_r+0x38>
 800b4de:	6823      	ldr	r3, [r4, #0]
 800b4e0:	1e5a      	subs	r2, r3, #1
 800b4e2:	6022      	str	r2, [r4, #0]
 800b4e4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800b4e8:	6863      	ldr	r3, [r4, #4]
 800b4ea:	3301      	adds	r3, #1
 800b4ec:	6063      	str	r3, [r4, #4]
 800b4ee:	e7e9      	b.n	800b4c4 <_sungetc_r+0xc>
 800b4f0:	4621      	mov	r1, r4
 800b4f2:	f001 fa62 	bl	800c9ba <__submore>
 800b4f6:	2800      	cmp	r0, #0
 800b4f8:	d0f1      	beq.n	800b4de <_sungetc_r+0x26>
 800b4fa:	e7e1      	b.n	800b4c0 <_sungetc_r+0x8>
 800b4fc:	6921      	ldr	r1, [r4, #16]
 800b4fe:	6823      	ldr	r3, [r4, #0]
 800b500:	b151      	cbz	r1, 800b518 <_sungetc_r+0x60>
 800b502:	4299      	cmp	r1, r3
 800b504:	d208      	bcs.n	800b518 <_sungetc_r+0x60>
 800b506:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b50a:	42a9      	cmp	r1, r5
 800b50c:	d104      	bne.n	800b518 <_sungetc_r+0x60>
 800b50e:	3b01      	subs	r3, #1
 800b510:	3201      	adds	r2, #1
 800b512:	6023      	str	r3, [r4, #0]
 800b514:	6062      	str	r2, [r4, #4]
 800b516:	e7d5      	b.n	800b4c4 <_sungetc_r+0xc>
 800b518:	e9c4 320e 	strd	r3, r2, [r4, #56]	; 0x38
 800b51c:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b520:	6323      	str	r3, [r4, #48]	; 0x30
 800b522:	2303      	movs	r3, #3
 800b524:	6363      	str	r3, [r4, #52]	; 0x34
 800b526:	4623      	mov	r3, r4
 800b528:	f803 5f42 	strb.w	r5, [r3, #66]!
 800b52c:	6023      	str	r3, [r4, #0]
 800b52e:	2301      	movs	r3, #1
 800b530:	e7dc      	b.n	800b4ec <_sungetc_r+0x34>

0800b532 <__ssrefill_r>:
 800b532:	b510      	push	{r4, lr}
 800b534:	460c      	mov	r4, r1
 800b536:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800b538:	b169      	cbz	r1, 800b556 <__ssrefill_r+0x24>
 800b53a:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800b53e:	4299      	cmp	r1, r3
 800b540:	d001      	beq.n	800b546 <__ssrefill_r+0x14>
 800b542:	f002 fad9 	bl	800daf8 <_free_r>
 800b546:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b548:	6063      	str	r3, [r4, #4]
 800b54a:	2000      	movs	r0, #0
 800b54c:	6320      	str	r0, [r4, #48]	; 0x30
 800b54e:	b113      	cbz	r3, 800b556 <__ssrefill_r+0x24>
 800b550:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800b552:	6023      	str	r3, [r4, #0]
 800b554:	bd10      	pop	{r4, pc}
 800b556:	6923      	ldr	r3, [r4, #16]
 800b558:	6023      	str	r3, [r4, #0]
 800b55a:	2300      	movs	r3, #0
 800b55c:	6063      	str	r3, [r4, #4]
 800b55e:	89a3      	ldrh	r3, [r4, #12]
 800b560:	f043 0320 	orr.w	r3, r3, #32
 800b564:	81a3      	strh	r3, [r4, #12]
 800b566:	f04f 30ff 	mov.w	r0, #4294967295
 800b56a:	e7f3      	b.n	800b554 <__ssrefill_r+0x22>

0800b56c <_sfread_r>:
 800b56c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b570:	461f      	mov	r7, r3
 800b572:	4613      	mov	r3, r2
 800b574:	437b      	muls	r3, r7
 800b576:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800b578:	4682      	mov	sl, r0
 800b57a:	4688      	mov	r8, r1
 800b57c:	4691      	mov	r9, r2
 800b57e:	d027      	beq.n	800b5d0 <_sfread_r+0x64>
 800b580:	461e      	mov	r6, r3
 800b582:	e9d4 1500 	ldrd	r1, r5, [r4]
 800b586:	42b5      	cmp	r5, r6
 800b588:	d30b      	bcc.n	800b5a2 <_sfread_r+0x36>
 800b58a:	4632      	mov	r2, r6
 800b58c:	4640      	mov	r0, r8
 800b58e:	f7fe fcc9 	bl	8009f24 <memcpy>
 800b592:	6862      	ldr	r2, [r4, #4]
 800b594:	1b92      	subs	r2, r2, r6
 800b596:	6062      	str	r2, [r4, #4]
 800b598:	6822      	ldr	r2, [r4, #0]
 800b59a:	4432      	add	r2, r6
 800b59c:	6022      	str	r2, [r4, #0]
 800b59e:	463b      	mov	r3, r7
 800b5a0:	e016      	b.n	800b5d0 <_sfread_r+0x64>
 800b5a2:	462a      	mov	r2, r5
 800b5a4:	4640      	mov	r0, r8
 800b5a6:	9301      	str	r3, [sp, #4]
 800b5a8:	f7fe fcbc 	bl	8009f24 <memcpy>
 800b5ac:	6822      	ldr	r2, [r4, #0]
 800b5ae:	2300      	movs	r3, #0
 800b5b0:	442a      	add	r2, r5
 800b5b2:	6063      	str	r3, [r4, #4]
 800b5b4:	6022      	str	r2, [r4, #0]
 800b5b6:	4621      	mov	r1, r4
 800b5b8:	4650      	mov	r0, sl
 800b5ba:	f7ff ffba 	bl	800b532 <__ssrefill_r>
 800b5be:	44a8      	add	r8, r5
 800b5c0:	9b01      	ldr	r3, [sp, #4]
 800b5c2:	eba6 0b05 	sub.w	fp, r6, r5
 800b5c6:	b138      	cbz	r0, 800b5d8 <_sfread_r+0x6c>
 800b5c8:	441d      	add	r5, r3
 800b5ca:	1bad      	subs	r5, r5, r6
 800b5cc:	fbb5 f3f9 	udiv	r3, r5, r9
 800b5d0:	4618      	mov	r0, r3
 800b5d2:	b003      	add	sp, #12
 800b5d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5d8:	465e      	mov	r6, fp
 800b5da:	e7d2      	b.n	800b582 <_sfread_r+0x16>
 800b5dc:	0000      	movs	r0, r0
	...

0800b5e0 <_svfprintf_r>:
 800b5e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5e4:	ed2d 8b04 	vpush	{d8-d9}
 800b5e8:	b0cf      	sub	sp, #316	; 0x13c
 800b5ea:	4689      	mov	r9, r1
 800b5ec:	4693      	mov	fp, r2
 800b5ee:	461e      	mov	r6, r3
 800b5f0:	4682      	mov	sl, r0
 800b5f2:	f7fe f9ff 	bl	80099f4 <_localeconv_r>
 800b5f6:	6803      	ldr	r3, [r0, #0]
 800b5f8:	9313      	str	r3, [sp, #76]	; 0x4c
 800b5fa:	4618      	mov	r0, r3
 800b5fc:	f7f4 fde8 	bl	80001d0 <strlen>
 800b600:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b604:	900e      	str	r0, [sp, #56]	; 0x38
 800b606:	0618      	lsls	r0, r3, #24
 800b608:	d51a      	bpl.n	800b640 <_svfprintf_r+0x60>
 800b60a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b60e:	b9bb      	cbnz	r3, 800b640 <_svfprintf_r+0x60>
 800b610:	2140      	movs	r1, #64	; 0x40
 800b612:	4650      	mov	r0, sl
 800b614:	f7fe fa18 	bl	8009a48 <_malloc_r>
 800b618:	f8c9 0000 	str.w	r0, [r9]
 800b61c:	f8c9 0010 	str.w	r0, [r9, #16]
 800b620:	b958      	cbnz	r0, 800b63a <_svfprintf_r+0x5a>
 800b622:	230c      	movs	r3, #12
 800b624:	f8ca 3000 	str.w	r3, [sl]
 800b628:	f04f 33ff 	mov.w	r3, #4294967295
 800b62c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b62e:	980f      	ldr	r0, [sp, #60]	; 0x3c
 800b630:	b04f      	add	sp, #316	; 0x13c
 800b632:	ecbd 8b04 	vpop	{d8-d9}
 800b636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b63a:	2340      	movs	r3, #64	; 0x40
 800b63c:	f8c9 3014 	str.w	r3, [r9, #20]
 800b640:	ed9f 7b93 	vldr	d7, [pc, #588]	; 800b890 <_svfprintf_r+0x2b0>
 800b644:	2500      	movs	r5, #0
 800b646:	e9cd 5523 	strd	r5, r5, [sp, #140]	; 0x8c
 800b64a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b64e:	e9cd 5515 	strd	r5, r5, [sp, #84]	; 0x54
 800b652:	ac25      	add	r4, sp, #148	; 0x94
 800b654:	9422      	str	r4, [sp, #136]	; 0x88
 800b656:	9505      	str	r5, [sp, #20]
 800b658:	950a      	str	r5, [sp, #40]	; 0x28
 800b65a:	9512      	str	r5, [sp, #72]	; 0x48
 800b65c:	9514      	str	r5, [sp, #80]	; 0x50
 800b65e:	950f      	str	r5, [sp, #60]	; 0x3c
 800b660:	465b      	mov	r3, fp
 800b662:	461d      	mov	r5, r3
 800b664:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b668:	b10a      	cbz	r2, 800b66e <_svfprintf_r+0x8e>
 800b66a:	2a25      	cmp	r2, #37	; 0x25
 800b66c:	d1f9      	bne.n	800b662 <_svfprintf_r+0x82>
 800b66e:	ebb5 070b 	subs.w	r7, r5, fp
 800b672:	d00d      	beq.n	800b690 <_svfprintf_r+0xb0>
 800b674:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b676:	443b      	add	r3, r7
 800b678:	9324      	str	r3, [sp, #144]	; 0x90
 800b67a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b67c:	3301      	adds	r3, #1
 800b67e:	2b07      	cmp	r3, #7
 800b680:	e9c4 b700 	strd	fp, r7, [r4]
 800b684:	9323      	str	r3, [sp, #140]	; 0x8c
 800b686:	dc79      	bgt.n	800b77c <_svfprintf_r+0x19c>
 800b688:	3408      	adds	r4, #8
 800b68a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b68c:	443b      	add	r3, r7
 800b68e:	930f      	str	r3, [sp, #60]	; 0x3c
 800b690:	782b      	ldrb	r3, [r5, #0]
 800b692:	2b00      	cmp	r3, #0
 800b694:	f001 8140 	beq.w	800c918 <_svfprintf_r+0x1338>
 800b698:	2300      	movs	r3, #0
 800b69a:	f04f 32ff 	mov.w	r2, #4294967295
 800b69e:	3501      	adds	r5, #1
 800b6a0:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b6a4:	9204      	str	r2, [sp, #16]
 800b6a6:	9310      	str	r3, [sp, #64]	; 0x40
 800b6a8:	4698      	mov	r8, r3
 800b6aa:	270a      	movs	r7, #10
 800b6ac:	212b      	movs	r1, #43	; 0x2b
 800b6ae:	462a      	mov	r2, r5
 800b6b0:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b6b4:	9307      	str	r3, [sp, #28]
 800b6b6:	920b      	str	r2, [sp, #44]	; 0x2c
 800b6b8:	9b07      	ldr	r3, [sp, #28]
 800b6ba:	3b20      	subs	r3, #32
 800b6bc:	2b5a      	cmp	r3, #90	; 0x5a
 800b6be:	f200 85b4 	bhi.w	800c22a <_svfprintf_r+0xc4a>
 800b6c2:	e8df f013 	tbh	[pc, r3, lsl #1]
 800b6c6:	007e      	.short	0x007e
 800b6c8:	05b205b2 	.word	0x05b205b2
 800b6cc:	05b20086 	.word	0x05b20086
 800b6d0:	05b205b2 	.word	0x05b205b2
 800b6d4:	05b20065 	.word	0x05b20065
 800b6d8:	008905b2 	.word	0x008905b2
 800b6dc:	05b20093 	.word	0x05b20093
 800b6e0:	00960090 	.word	0x00960090
 800b6e4:	00b305b2 	.word	0x00b305b2
 800b6e8:	00b600b6 	.word	0x00b600b6
 800b6ec:	00b600b6 	.word	0x00b600b6
 800b6f0:	00b600b6 	.word	0x00b600b6
 800b6f4:	00b600b6 	.word	0x00b600b6
 800b6f8:	05b200b6 	.word	0x05b200b6
 800b6fc:	05b205b2 	.word	0x05b205b2
 800b700:	05b205b2 	.word	0x05b205b2
 800b704:	05b205b2 	.word	0x05b205b2
 800b708:	05b20127 	.word	0x05b20127
 800b70c:	00fc00e9 	.word	0x00fc00e9
 800b710:	01270127 	.word	0x01270127
 800b714:	05b20127 	.word	0x05b20127
 800b718:	05b205b2 	.word	0x05b205b2
 800b71c:	00c605b2 	.word	0x00c605b2
 800b720:	05b205b2 	.word	0x05b205b2
 800b724:	05b20492 	.word	0x05b20492
 800b728:	05b205b2 	.word	0x05b205b2
 800b72c:	05b204d9 	.word	0x05b204d9
 800b730:	05b204fa 	.word	0x05b204fa
 800b734:	051905b2 	.word	0x051905b2
 800b738:	05b205b2 	.word	0x05b205b2
 800b73c:	05b205b2 	.word	0x05b205b2
 800b740:	05b205b2 	.word	0x05b205b2
 800b744:	05b205b2 	.word	0x05b205b2
 800b748:	05b20127 	.word	0x05b20127
 800b74c:	00fe00e9 	.word	0x00fe00e9
 800b750:	01270127 	.word	0x01270127
 800b754:	00c90127 	.word	0x00c90127
 800b758:	00dd00fe 	.word	0x00dd00fe
 800b75c:	00d605b2 	.word	0x00d605b2
 800b760:	046f05b2 	.word	0x046f05b2
 800b764:	04c80494 	.word	0x04c80494
 800b768:	05b200dd 	.word	0x05b200dd
 800b76c:	007c04d9 	.word	0x007c04d9
 800b770:	05b204fc 	.word	0x05b204fc
 800b774:	053605b2 	.word	0x053605b2
 800b778:	007c05b2 	.word	0x007c05b2
 800b77c:	aa22      	add	r2, sp, #136	; 0x88
 800b77e:	4649      	mov	r1, r9
 800b780:	4650      	mov	r0, sl
 800b782:	f003 fb2a 	bl	800edda <__ssprint_r>
 800b786:	2800      	cmp	r0, #0
 800b788:	f040 8132 	bne.w	800b9f0 <_svfprintf_r+0x410>
 800b78c:	ac25      	add	r4, sp, #148	; 0x94
 800b78e:	e77c      	b.n	800b68a <_svfprintf_r+0xaa>
 800b790:	4650      	mov	r0, sl
 800b792:	f7fe f92f 	bl	80099f4 <_localeconv_r>
 800b796:	6843      	ldr	r3, [r0, #4]
 800b798:	9314      	str	r3, [sp, #80]	; 0x50
 800b79a:	4618      	mov	r0, r3
 800b79c:	f7f4 fd18 	bl	80001d0 <strlen>
 800b7a0:	9012      	str	r0, [sp, #72]	; 0x48
 800b7a2:	4650      	mov	r0, sl
 800b7a4:	f7fe f926 	bl	80099f4 <_localeconv_r>
 800b7a8:	6883      	ldr	r3, [r0, #8]
 800b7aa:	930a      	str	r3, [sp, #40]	; 0x28
 800b7ac:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b7ae:	212b      	movs	r1, #43	; 0x2b
 800b7b0:	b12b      	cbz	r3, 800b7be <_svfprintf_r+0x1de>
 800b7b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7b4:	b11b      	cbz	r3, 800b7be <_svfprintf_r+0x1de>
 800b7b6:	781b      	ldrb	r3, [r3, #0]
 800b7b8:	b10b      	cbz	r3, 800b7be <_svfprintf_r+0x1de>
 800b7ba:	f448 6880 	orr.w	r8, r8, #1024	; 0x400
 800b7be:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 800b7c0:	e775      	b.n	800b6ae <_svfprintf_r+0xce>
 800b7c2:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800b7c6:	2b00      	cmp	r3, #0
 800b7c8:	d1f9      	bne.n	800b7be <_svfprintf_r+0x1de>
 800b7ca:	2320      	movs	r3, #32
 800b7cc:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b7d0:	e7f5      	b.n	800b7be <_svfprintf_r+0x1de>
 800b7d2:	f048 0801 	orr.w	r8, r8, #1
 800b7d6:	e7f2      	b.n	800b7be <_svfprintf_r+0x1de>
 800b7d8:	f856 3b04 	ldr.w	r3, [r6], #4
 800b7dc:	9310      	str	r3, [sp, #64]	; 0x40
 800b7de:	2b00      	cmp	r3, #0
 800b7e0:	daed      	bge.n	800b7be <_svfprintf_r+0x1de>
 800b7e2:	425b      	negs	r3, r3
 800b7e4:	9310      	str	r3, [sp, #64]	; 0x40
 800b7e6:	f048 0804 	orr.w	r8, r8, #4
 800b7ea:	e7e8      	b.n	800b7be <_svfprintf_r+0x1de>
 800b7ec:	f88d 106b 	strb.w	r1, [sp, #107]	; 0x6b
 800b7f0:	e7e5      	b.n	800b7be <_svfprintf_r+0x1de>
 800b7f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7f4:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b7f8:	9307      	str	r3, [sp, #28]
 800b7fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b7fc:	d113      	bne.n	800b826 <_svfprintf_r+0x246>
 800b7fe:	f856 0b04 	ldr.w	r0, [r6], #4
 800b802:	920b      	str	r2, [sp, #44]	; 0x2c
 800b804:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800b808:	9304      	str	r3, [sp, #16]
 800b80a:	e7d8      	b.n	800b7be <_svfprintf_r+0x1de>
 800b80c:	9804      	ldr	r0, [sp, #16]
 800b80e:	fb07 3300 	mla	r3, r7, r0, r3
 800b812:	9304      	str	r3, [sp, #16]
 800b814:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b818:	9307      	str	r3, [sp, #28]
 800b81a:	9b07      	ldr	r3, [sp, #28]
 800b81c:	3b30      	subs	r3, #48	; 0x30
 800b81e:	2b09      	cmp	r3, #9
 800b820:	d9f4      	bls.n	800b80c <_svfprintf_r+0x22c>
 800b822:	920b      	str	r2, [sp, #44]	; 0x2c
 800b824:	e748      	b.n	800b6b8 <_svfprintf_r+0xd8>
 800b826:	2300      	movs	r3, #0
 800b828:	9304      	str	r3, [sp, #16]
 800b82a:	e7f6      	b.n	800b81a <_svfprintf_r+0x23a>
 800b82c:	f048 0880 	orr.w	r8, r8, #128	; 0x80
 800b830:	e7c5      	b.n	800b7be <_svfprintf_r+0x1de>
 800b832:	2300      	movs	r3, #0
 800b834:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b836:	9310      	str	r3, [sp, #64]	; 0x40
 800b838:	9b07      	ldr	r3, [sp, #28]
 800b83a:	9810      	ldr	r0, [sp, #64]	; 0x40
 800b83c:	3b30      	subs	r3, #48	; 0x30
 800b83e:	fb07 3300 	mla	r3, r7, r0, r3
 800b842:	9310      	str	r3, [sp, #64]	; 0x40
 800b844:	f812 3b01 	ldrb.w	r3, [r2], #1
 800b848:	9307      	str	r3, [sp, #28]
 800b84a:	3b30      	subs	r3, #48	; 0x30
 800b84c:	2b09      	cmp	r3, #9
 800b84e:	d9f3      	bls.n	800b838 <_svfprintf_r+0x258>
 800b850:	e7e7      	b.n	800b822 <_svfprintf_r+0x242>
 800b852:	f048 0808 	orr.w	r8, r8, #8
 800b856:	e7b2      	b.n	800b7be <_svfprintf_r+0x1de>
 800b858:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b85a:	781b      	ldrb	r3, [r3, #0]
 800b85c:	2b68      	cmp	r3, #104	; 0x68
 800b85e:	bf01      	itttt	eq
 800b860:	9b0b      	ldreq	r3, [sp, #44]	; 0x2c
 800b862:	3301      	addeq	r3, #1
 800b864:	930b      	streq	r3, [sp, #44]	; 0x2c
 800b866:	f448 7800 	orreq.w	r8, r8, #512	; 0x200
 800b86a:	bf18      	it	ne
 800b86c:	f048 0840 	orrne.w	r8, r8, #64	; 0x40
 800b870:	e7a5      	b.n	800b7be <_svfprintf_r+0x1de>
 800b872:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	2b6c      	cmp	r3, #108	; 0x6c
 800b878:	d105      	bne.n	800b886 <_svfprintf_r+0x2a6>
 800b87a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b87c:	3301      	adds	r3, #1
 800b87e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b880:	f048 0820 	orr.w	r8, r8, #32
 800b884:	e79b      	b.n	800b7be <_svfprintf_r+0x1de>
 800b886:	f048 0810 	orr.w	r8, r8, #16
 800b88a:	e798      	b.n	800b7be <_svfprintf_r+0x1de>
 800b88c:	f3af 8000 	nop.w
	...
 800b898:	4632      	mov	r2, r6
 800b89a:	2000      	movs	r0, #0
 800b89c:	f852 3b04 	ldr.w	r3, [r2], #4
 800b8a0:	9206      	str	r2, [sp, #24]
 800b8a2:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800b8a6:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800b8aa:	2301      	movs	r3, #1
 800b8ac:	e9cd 0008 	strd	r0, r0, [sp, #32]
 800b8b0:	9003      	str	r0, [sp, #12]
 800b8b2:	9304      	str	r3, [sp, #16]
 800b8b4:	4606      	mov	r6, r0
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800b8bc:	e1b8      	b.n	800bc30 <_svfprintf_r+0x650>
 800b8be:	f048 0810 	orr.w	r8, r8, #16
 800b8c2:	f018 0f20 	tst.w	r8, #32
 800b8c6:	d012      	beq.n	800b8ee <_svfprintf_r+0x30e>
 800b8c8:	3607      	adds	r6, #7
 800b8ca:	f026 0307 	bic.w	r3, r6, #7
 800b8ce:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800b8d2:	9306      	str	r3, [sp, #24]
 800b8d4:	2e00      	cmp	r6, #0
 800b8d6:	f177 0300 	sbcs.w	r3, r7, #0
 800b8da:	da06      	bge.n	800b8ea <_svfprintf_r+0x30a>
 800b8dc:	4276      	negs	r6, r6
 800b8de:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800b8e2:	eb67 0747 	sbc.w	r7, r7, r7, lsl #1
 800b8e6:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b8ea:	2301      	movs	r3, #1
 800b8ec:	e38e      	b.n	800c00c <_svfprintf_r+0xa2c>
 800b8ee:	1d33      	adds	r3, r6, #4
 800b8f0:	f018 0f10 	tst.w	r8, #16
 800b8f4:	9306      	str	r3, [sp, #24]
 800b8f6:	d002      	beq.n	800b8fe <_svfprintf_r+0x31e>
 800b8f8:	6836      	ldr	r6, [r6, #0]
 800b8fa:	17f7      	asrs	r7, r6, #31
 800b8fc:	e7ea      	b.n	800b8d4 <_svfprintf_r+0x2f4>
 800b8fe:	f018 0f40 	tst.w	r8, #64	; 0x40
 800b902:	6836      	ldr	r6, [r6, #0]
 800b904:	d001      	beq.n	800b90a <_svfprintf_r+0x32a>
 800b906:	b236      	sxth	r6, r6
 800b908:	e7f7      	b.n	800b8fa <_svfprintf_r+0x31a>
 800b90a:	f418 7f00 	tst.w	r8, #512	; 0x200
 800b90e:	bf18      	it	ne
 800b910:	b276      	sxtbne	r6, r6
 800b912:	e7f2      	b.n	800b8fa <_svfprintf_r+0x31a>
 800b914:	3607      	adds	r6, #7
 800b916:	f026 0307 	bic.w	r3, r6, #7
 800b91a:	ecb3 7b02 	vldmia	r3!, {d7}
 800b91e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800b922:	9306      	str	r3, [sp, #24]
 800b924:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b926:	ee09 3a10 	vmov	s18, r3
 800b92a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b92c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b930:	ee09 3a90 	vmov	s19, r3
 800b934:	f04f 32ff 	mov.w	r2, #4294967295
 800b938:	4b3a      	ldr	r3, [pc, #232]	; (800ba24 <_svfprintf_r+0x444>)
 800b93a:	ec51 0b19 	vmov	r0, r1, d9
 800b93e:	f7f5 f8f5 	bl	8000b2c <__aeabi_dcmpun>
 800b942:	bb10      	cbnz	r0, 800b98a <_svfprintf_r+0x3aa>
 800b944:	4b37      	ldr	r3, [pc, #220]	; (800ba24 <_svfprintf_r+0x444>)
 800b946:	ec51 0b19 	vmov	r0, r1, d9
 800b94a:	f04f 32ff 	mov.w	r2, #4294967295
 800b94e:	f7f5 f8cf 	bl	8000af0 <__aeabi_dcmple>
 800b952:	b9d0      	cbnz	r0, 800b98a <_svfprintf_r+0x3aa>
 800b954:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b958:	2200      	movs	r2, #0
 800b95a:	2300      	movs	r3, #0
 800b95c:	f7f5 f8be 	bl	8000adc <__aeabi_dcmplt>
 800b960:	b110      	cbz	r0, 800b968 <_svfprintf_r+0x388>
 800b962:	232d      	movs	r3, #45	; 0x2d
 800b964:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800b968:	4a2f      	ldr	r2, [pc, #188]	; (800ba28 <_svfprintf_r+0x448>)
 800b96a:	4830      	ldr	r0, [pc, #192]	; (800ba2c <_svfprintf_r+0x44c>)
 800b96c:	9b07      	ldr	r3, [sp, #28]
 800b96e:	2100      	movs	r1, #0
 800b970:	2b47      	cmp	r3, #71	; 0x47
 800b972:	bfd4      	ite	le
 800b974:	4693      	movle	fp, r2
 800b976:	4683      	movgt	fp, r0
 800b978:	2303      	movs	r3, #3
 800b97a:	e9cd 1303 	strd	r1, r3, [sp, #12]
 800b97e:	f028 0880 	bic.w	r8, r8, #128	; 0x80
 800b982:	2600      	movs	r6, #0
 800b984:	4633      	mov	r3, r6
 800b986:	f001 b802 	b.w	800c98e <_svfprintf_r+0x13ae>
 800b98a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b98e:	4610      	mov	r0, r2
 800b990:	4619      	mov	r1, r3
 800b992:	f7f5 f8cb 	bl	8000b2c <__aeabi_dcmpun>
 800b996:	b140      	cbz	r0, 800b9aa <_svfprintf_r+0x3ca>
 800b998:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b99a:	4a25      	ldr	r2, [pc, #148]	; (800ba30 <_svfprintf_r+0x450>)
 800b99c:	4825      	ldr	r0, [pc, #148]	; (800ba34 <_svfprintf_r+0x454>)
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	bfbc      	itt	lt
 800b9a2:	232d      	movlt	r3, #45	; 0x2d
 800b9a4:	f88d 306b 	strblt.w	r3, [sp, #107]	; 0x6b
 800b9a8:	e7e0      	b.n	800b96c <_svfprintf_r+0x38c>
 800b9aa:	9b07      	ldr	r3, [sp, #28]
 800b9ac:	f023 0320 	bic.w	r3, r3, #32
 800b9b0:	2b41      	cmp	r3, #65	; 0x41
 800b9b2:	9308      	str	r3, [sp, #32]
 800b9b4:	d125      	bne.n	800ba02 <_svfprintf_r+0x422>
 800b9b6:	2330      	movs	r3, #48	; 0x30
 800b9b8:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800b9bc:	9b07      	ldr	r3, [sp, #28]
 800b9be:	2b61      	cmp	r3, #97	; 0x61
 800b9c0:	bf0c      	ite	eq
 800b9c2:	2378      	moveq	r3, #120	; 0x78
 800b9c4:	2358      	movne	r3, #88	; 0x58
 800b9c6:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800b9ca:	9b04      	ldr	r3, [sp, #16]
 800b9cc:	2b63      	cmp	r3, #99	; 0x63
 800b9ce:	f048 0802 	orr.w	r8, r8, #2
 800b9d2:	dd31      	ble.n	800ba38 <_svfprintf_r+0x458>
 800b9d4:	1c59      	adds	r1, r3, #1
 800b9d6:	4650      	mov	r0, sl
 800b9d8:	f7fe f836 	bl	8009a48 <_malloc_r>
 800b9dc:	4683      	mov	fp, r0
 800b9de:	2800      	cmp	r0, #0
 800b9e0:	f040 81fe 	bne.w	800bde0 <_svfprintf_r+0x800>
 800b9e4:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b9e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9ec:	f8a9 300c 	strh.w	r3, [r9, #12]
 800b9f0:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800b9f4:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b9f8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b9fa:	bf18      	it	ne
 800b9fc:	f04f 33ff 	movne.w	r3, #4294967295
 800ba00:	e614      	b.n	800b62c <_svfprintf_r+0x4c>
 800ba02:	9b04      	ldr	r3, [sp, #16]
 800ba04:	3301      	adds	r3, #1
 800ba06:	f000 81ed 	beq.w	800bde4 <_svfprintf_r+0x804>
 800ba0a:	9b08      	ldr	r3, [sp, #32]
 800ba0c:	2b47      	cmp	r3, #71	; 0x47
 800ba0e:	f040 81ec 	bne.w	800bdea <_svfprintf_r+0x80a>
 800ba12:	9b04      	ldr	r3, [sp, #16]
 800ba14:	2b00      	cmp	r3, #0
 800ba16:	f040 81e8 	bne.w	800bdea <_svfprintf_r+0x80a>
 800ba1a:	9303      	str	r3, [sp, #12]
 800ba1c:	2301      	movs	r3, #1
 800ba1e:	9304      	str	r3, [sp, #16]
 800ba20:	e00d      	b.n	800ba3e <_svfprintf_r+0x45e>
 800ba22:	bf00      	nop
 800ba24:	7fefffff 	.word	0x7fefffff
 800ba28:	08010848 	.word	0x08010848
 800ba2c:	0801084c 	.word	0x0801084c
 800ba30:	08010850 	.word	0x08010850
 800ba34:	08010854 	.word	0x08010854
 800ba38:	9003      	str	r0, [sp, #12]
 800ba3a:	f10d 0bd4 	add.w	fp, sp, #212	; 0xd4
 800ba3e:	f448 7380 	orr.w	r3, r8, #256	; 0x100
 800ba42:	9311      	str	r3, [sp, #68]	; 0x44
 800ba44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	f280 81d1 	bge.w	800bdee <_svfprintf_r+0x80e>
 800ba4c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ba4e:	ee08 3a10 	vmov	s16, r3
 800ba52:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ba54:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800ba58:	ee08 3a90 	vmov	s17, r3
 800ba5c:	232d      	movs	r3, #45	; 0x2d
 800ba5e:	9318      	str	r3, [sp, #96]	; 0x60
 800ba60:	9b08      	ldr	r3, [sp, #32]
 800ba62:	2b41      	cmp	r3, #65	; 0x41
 800ba64:	f040 81e1 	bne.w	800be2a <_svfprintf_r+0x84a>
 800ba68:	eeb0 0a48 	vmov.f32	s0, s16
 800ba6c:	eef0 0a68 	vmov.f32	s1, s17
 800ba70:	a81c      	add	r0, sp, #112	; 0x70
 800ba72:	f003 f94b 	bl	800ed0c <frexp>
 800ba76:	2200      	movs	r2, #0
 800ba78:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ba7c:	ec51 0b10 	vmov	r0, r1, d0
 800ba80:	f7f4 fdba 	bl	80005f8 <__aeabi_dmul>
 800ba84:	2200      	movs	r2, #0
 800ba86:	2300      	movs	r3, #0
 800ba88:	4606      	mov	r6, r0
 800ba8a:	460f      	mov	r7, r1
 800ba8c:	f7f5 f81c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ba90:	b108      	cbz	r0, 800ba96 <_svfprintf_r+0x4b6>
 800ba92:	2301      	movs	r3, #1
 800ba94:	931c      	str	r3, [sp, #112]	; 0x70
 800ba96:	4bb4      	ldr	r3, [pc, #720]	; (800bd68 <_svfprintf_r+0x788>)
 800ba98:	4ab4      	ldr	r2, [pc, #720]	; (800bd6c <_svfprintf_r+0x78c>)
 800ba9a:	9907      	ldr	r1, [sp, #28]
 800ba9c:	2961      	cmp	r1, #97	; 0x61
 800ba9e:	bf18      	it	ne
 800baa0:	461a      	movne	r2, r3
 800baa2:	9b04      	ldr	r3, [sp, #16]
 800baa4:	9217      	str	r2, [sp, #92]	; 0x5c
 800baa6:	3b01      	subs	r3, #1
 800baa8:	9305      	str	r3, [sp, #20]
 800baaa:	465d      	mov	r5, fp
 800baac:	4bb0      	ldr	r3, [pc, #704]	; (800bd70 <_svfprintf_r+0x790>)
 800baae:	2200      	movs	r2, #0
 800bab0:	4630      	mov	r0, r6
 800bab2:	4639      	mov	r1, r7
 800bab4:	f7f4 fda0 	bl	80005f8 <__aeabi_dmul>
 800bab8:	460f      	mov	r7, r1
 800baba:	4606      	mov	r6, r0
 800babc:	f7f5 f84c 	bl	8000b58 <__aeabi_d2iz>
 800bac0:	9019      	str	r0, [sp, #100]	; 0x64
 800bac2:	f7f4 fd2f 	bl	8000524 <__aeabi_i2d>
 800bac6:	4602      	mov	r2, r0
 800bac8:	460b      	mov	r3, r1
 800baca:	4630      	mov	r0, r6
 800bacc:	4639      	mov	r1, r7
 800bace:	f7f4 fbdb 	bl	8000288 <__aeabi_dsub>
 800bad2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bad4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bad6:	5c9b      	ldrb	r3, [r3, r2]
 800bad8:	f805 3b01 	strb.w	r3, [r5], #1
 800badc:	9b05      	ldr	r3, [sp, #20]
 800bade:	9309      	str	r3, [sp, #36]	; 0x24
 800bae0:	1c5a      	adds	r2, r3, #1
 800bae2:	4606      	mov	r6, r0
 800bae4:	460f      	mov	r7, r1
 800bae6:	d007      	beq.n	800baf8 <_svfprintf_r+0x518>
 800bae8:	3b01      	subs	r3, #1
 800baea:	9305      	str	r3, [sp, #20]
 800baec:	2200      	movs	r2, #0
 800baee:	2300      	movs	r3, #0
 800baf0:	f7f4 ffea 	bl	8000ac8 <__aeabi_dcmpeq>
 800baf4:	2800      	cmp	r0, #0
 800baf6:	d0d9      	beq.n	800baac <_svfprintf_r+0x4cc>
 800baf8:	4b9e      	ldr	r3, [pc, #632]	; (800bd74 <_svfprintf_r+0x794>)
 800bafa:	2200      	movs	r2, #0
 800bafc:	4630      	mov	r0, r6
 800bafe:	4639      	mov	r1, r7
 800bb00:	f7f5 f80a 	bl	8000b18 <__aeabi_dcmpgt>
 800bb04:	b960      	cbnz	r0, 800bb20 <_svfprintf_r+0x540>
 800bb06:	4b9b      	ldr	r3, [pc, #620]	; (800bd74 <_svfprintf_r+0x794>)
 800bb08:	2200      	movs	r2, #0
 800bb0a:	4630      	mov	r0, r6
 800bb0c:	4639      	mov	r1, r7
 800bb0e:	f7f4 ffdb 	bl	8000ac8 <__aeabi_dcmpeq>
 800bb12:	2800      	cmp	r0, #0
 800bb14:	f000 8184 	beq.w	800be20 <_svfprintf_r+0x840>
 800bb18:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb1a:	07df      	lsls	r7, r3, #31
 800bb1c:	f140 8180 	bpl.w	800be20 <_svfprintf_r+0x840>
 800bb20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb22:	9520      	str	r5, [sp, #128]	; 0x80
 800bb24:	7bd9      	ldrb	r1, [r3, #15]
 800bb26:	2030      	movs	r0, #48	; 0x30
 800bb28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800bb2a:	1e53      	subs	r3, r2, #1
 800bb2c:	9320      	str	r3, [sp, #128]	; 0x80
 800bb2e:	f812 3c01 	ldrb.w	r3, [r2, #-1]
 800bb32:	428b      	cmp	r3, r1
 800bb34:	f000 8163 	beq.w	800bdfe <_svfprintf_r+0x81e>
 800bb38:	2b39      	cmp	r3, #57	; 0x39
 800bb3a:	bf0b      	itete	eq
 800bb3c:	9b17      	ldreq	r3, [sp, #92]	; 0x5c
 800bb3e:	3301      	addne	r3, #1
 800bb40:	7a9b      	ldrbeq	r3, [r3, #10]
 800bb42:	b2db      	uxtbne	r3, r3
 800bb44:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bb48:	eba5 030b 	sub.w	r3, r5, fp
 800bb4c:	9305      	str	r3, [sp, #20]
 800bb4e:	9b08      	ldr	r3, [sp, #32]
 800bb50:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800bb52:	2b47      	cmp	r3, #71	; 0x47
 800bb54:	f040 81b1 	bne.w	800beba <_svfprintf_r+0x8da>
 800bb58:	1cee      	adds	r6, r5, #3
 800bb5a:	db03      	blt.n	800bb64 <_svfprintf_r+0x584>
 800bb5c:	9b04      	ldr	r3, [sp, #16]
 800bb5e:	42ab      	cmp	r3, r5
 800bb60:	f280 81d6 	bge.w	800bf10 <_svfprintf_r+0x930>
 800bb64:	9b07      	ldr	r3, [sp, #28]
 800bb66:	3b02      	subs	r3, #2
 800bb68:	9307      	str	r3, [sp, #28]
 800bb6a:	9907      	ldr	r1, [sp, #28]
 800bb6c:	f89d 201c 	ldrb.w	r2, [sp, #28]
 800bb70:	f021 0120 	bic.w	r1, r1, #32
 800bb74:	2941      	cmp	r1, #65	; 0x41
 800bb76:	bf08      	it	eq
 800bb78:	320f      	addeq	r2, #15
 800bb7a:	f105 33ff 	add.w	r3, r5, #4294967295
 800bb7e:	bf06      	itte	eq
 800bb80:	b2d2      	uxtbeq	r2, r2
 800bb82:	2101      	moveq	r1, #1
 800bb84:	2100      	movne	r1, #0
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	931c      	str	r3, [sp, #112]	; 0x70
 800bb8a:	bfb8      	it	lt
 800bb8c:	f1c5 0301 	rsblt	r3, r5, #1
 800bb90:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
 800bb94:	bfb4      	ite	lt
 800bb96:	222d      	movlt	r2, #45	; 0x2d
 800bb98:	222b      	movge	r2, #43	; 0x2b
 800bb9a:	2b09      	cmp	r3, #9
 800bb9c:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
 800bba0:	f340 81a4 	ble.w	800beec <_svfprintf_r+0x90c>
 800bba4:	f10d 0287 	add.w	r2, sp, #135	; 0x87
 800bba8:	260a      	movs	r6, #10
 800bbaa:	4611      	mov	r1, r2
 800bbac:	fb93 f5f6 	sdiv	r5, r3, r6
 800bbb0:	fb06 3015 	mls	r0, r6, r5, r3
 800bbb4:	3030      	adds	r0, #48	; 0x30
 800bbb6:	f801 0c01 	strb.w	r0, [r1, #-1]
 800bbba:	4618      	mov	r0, r3
 800bbbc:	2863      	cmp	r0, #99	; 0x63
 800bbbe:	f102 32ff 	add.w	r2, r2, #4294967295
 800bbc2:	462b      	mov	r3, r5
 800bbc4:	dcf1      	bgt.n	800bbaa <_svfprintf_r+0x5ca>
 800bbc6:	3330      	adds	r3, #48	; 0x30
 800bbc8:	1e88      	subs	r0, r1, #2
 800bbca:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bbce:	f10d 0587 	add.w	r5, sp, #135	; 0x87
 800bbd2:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800bbd6:	4603      	mov	r3, r0
 800bbd8:	42ab      	cmp	r3, r5
 800bbda:	f0c0 8182 	bcc.w	800bee2 <_svfprintf_r+0x902>
 800bbde:	f10d 0289 	add.w	r2, sp, #137	; 0x89
 800bbe2:	1a52      	subs	r2, r2, r1
 800bbe4:	42a8      	cmp	r0, r5
 800bbe6:	bf88      	it	hi
 800bbe8:	2200      	movhi	r2, #0
 800bbea:	f10d 037a 	add.w	r3, sp, #122	; 0x7a
 800bbee:	441a      	add	r2, r3
 800bbf0:	ab1e      	add	r3, sp, #120	; 0x78
 800bbf2:	1ad3      	subs	r3, r2, r3
 800bbf4:	9a05      	ldr	r2, [sp, #20]
 800bbf6:	9315      	str	r3, [sp, #84]	; 0x54
 800bbf8:	2a01      	cmp	r2, #1
 800bbfa:	4413      	add	r3, r2
 800bbfc:	9304      	str	r3, [sp, #16]
 800bbfe:	dc02      	bgt.n	800bc06 <_svfprintf_r+0x626>
 800bc00:	f018 0f01 	tst.w	r8, #1
 800bc04:	d003      	beq.n	800bc0e <_svfprintf_r+0x62e>
 800bc06:	9b04      	ldr	r3, [sp, #16]
 800bc08:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bc0a:	4413      	add	r3, r2
 800bc0c:	9304      	str	r3, [sp, #16]
 800bc0e:	f428 6380 	bic.w	r3, r8, #1024	; 0x400
 800bc12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800bc16:	9311      	str	r3, [sp, #68]	; 0x44
 800bc18:	2300      	movs	r3, #0
 800bc1a:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bc1e:	461d      	mov	r5, r3
 800bc20:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bc22:	b113      	cbz	r3, 800bc2a <_svfprintf_r+0x64a>
 800bc24:	232d      	movs	r3, #45	; 0x2d
 800bc26:	f88d 306b 	strb.w	r3, [sp, #107]	; 0x6b
 800bc2a:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 800bc2e:	2600      	movs	r6, #0
 800bc30:	9b04      	ldr	r3, [sp, #16]
 800bc32:	42b3      	cmp	r3, r6
 800bc34:	bfb8      	it	lt
 800bc36:	4633      	movlt	r3, r6
 800bc38:	9311      	str	r3, [sp, #68]	; 0x44
 800bc3a:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bc3e:	b113      	cbz	r3, 800bc46 <_svfprintf_r+0x666>
 800bc40:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800bc42:	3301      	adds	r3, #1
 800bc44:	9311      	str	r3, [sp, #68]	; 0x44
 800bc46:	f018 0302 	ands.w	r3, r8, #2
 800bc4a:	9317      	str	r3, [sp, #92]	; 0x5c
 800bc4c:	bf1e      	ittt	ne
 800bc4e:	9b11      	ldrne	r3, [sp, #68]	; 0x44
 800bc50:	3302      	addne	r3, #2
 800bc52:	9311      	strne	r3, [sp, #68]	; 0x44
 800bc54:	f018 0384 	ands.w	r3, r8, #132	; 0x84
 800bc58:	9318      	str	r3, [sp, #96]	; 0x60
 800bc5a:	d11f      	bne.n	800bc9c <_svfprintf_r+0x6bc>
 800bc5c:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bc60:	1a9f      	subs	r7, r3, r2
 800bc62:	2f00      	cmp	r7, #0
 800bc64:	dd1a      	ble.n	800bc9c <_svfprintf_r+0x6bc>
 800bc66:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bc6a:	4843      	ldr	r0, [pc, #268]	; (800bd78 <_svfprintf_r+0x798>)
 800bc6c:	6020      	str	r0, [r4, #0]
 800bc6e:	2f10      	cmp	r7, #16
 800bc70:	f103 0301 	add.w	r3, r3, #1
 800bc74:	f104 0108 	add.w	r1, r4, #8
 800bc78:	f300 82e6 	bgt.w	800c248 <_svfprintf_r+0xc68>
 800bc7c:	6067      	str	r7, [r4, #4]
 800bc7e:	2b07      	cmp	r3, #7
 800bc80:	4417      	add	r7, r2
 800bc82:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bc86:	f340 82f2 	ble.w	800c26e <_svfprintf_r+0xc8e>
 800bc8a:	aa22      	add	r2, sp, #136	; 0x88
 800bc8c:	4649      	mov	r1, r9
 800bc8e:	4650      	mov	r0, sl
 800bc90:	f003 f8a3 	bl	800edda <__ssprint_r>
 800bc94:	2800      	cmp	r0, #0
 800bc96:	f040 861d 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800bc9a:	ac25      	add	r4, sp, #148	; 0x94
 800bc9c:	f89d 306b 	ldrb.w	r3, [sp, #107]	; 0x6b
 800bca0:	b173      	cbz	r3, 800bcc0 <_svfprintf_r+0x6e0>
 800bca2:	f10d 036b 	add.w	r3, sp, #107	; 0x6b
 800bca6:	6023      	str	r3, [r4, #0]
 800bca8:	2301      	movs	r3, #1
 800bcaa:	6063      	str	r3, [r4, #4]
 800bcac:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bcae:	3301      	adds	r3, #1
 800bcb0:	9324      	str	r3, [sp, #144]	; 0x90
 800bcb2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	2b07      	cmp	r3, #7
 800bcb8:	9323      	str	r3, [sp, #140]	; 0x8c
 800bcba:	f300 82da 	bgt.w	800c272 <_svfprintf_r+0xc92>
 800bcbe:	3408      	adds	r4, #8
 800bcc0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bcc2:	b16b      	cbz	r3, 800bce0 <_svfprintf_r+0x700>
 800bcc4:	ab1b      	add	r3, sp, #108	; 0x6c
 800bcc6:	6023      	str	r3, [r4, #0]
 800bcc8:	2302      	movs	r3, #2
 800bcca:	6063      	str	r3, [r4, #4]
 800bccc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bcce:	3302      	adds	r3, #2
 800bcd0:	9324      	str	r3, [sp, #144]	; 0x90
 800bcd2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bcd4:	3301      	adds	r3, #1
 800bcd6:	2b07      	cmp	r3, #7
 800bcd8:	9323      	str	r3, [sp, #140]	; 0x8c
 800bcda:	f300 82d4 	bgt.w	800c286 <_svfprintf_r+0xca6>
 800bcde:	3408      	adds	r4, #8
 800bce0:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800bce2:	2b80      	cmp	r3, #128	; 0x80
 800bce4:	d11f      	bne.n	800bd26 <_svfprintf_r+0x746>
 800bce6:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800bcea:	1a9f      	subs	r7, r3, r2
 800bcec:	2f00      	cmp	r7, #0
 800bcee:	dd1a      	ble.n	800bd26 <_svfprintf_r+0x746>
 800bcf0:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bcf4:	4821      	ldr	r0, [pc, #132]	; (800bd7c <_svfprintf_r+0x79c>)
 800bcf6:	6020      	str	r0, [r4, #0]
 800bcf8:	2f10      	cmp	r7, #16
 800bcfa:	f103 0301 	add.w	r3, r3, #1
 800bcfe:	f104 0108 	add.w	r1, r4, #8
 800bd02:	f300 82ca 	bgt.w	800c29a <_svfprintf_r+0xcba>
 800bd06:	6067      	str	r7, [r4, #4]
 800bd08:	2b07      	cmp	r3, #7
 800bd0a:	4417      	add	r7, r2
 800bd0c:	e9cd 3723 	strd	r3, r7, [sp, #140]	; 0x8c
 800bd10:	f340 82d6 	ble.w	800c2c0 <_svfprintf_r+0xce0>
 800bd14:	aa22      	add	r2, sp, #136	; 0x88
 800bd16:	4649      	mov	r1, r9
 800bd18:	4650      	mov	r0, sl
 800bd1a:	f003 f85e 	bl	800edda <__ssprint_r>
 800bd1e:	2800      	cmp	r0, #0
 800bd20:	f040 85d8 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800bd24:	ac25      	add	r4, sp, #148	; 0x94
 800bd26:	9b04      	ldr	r3, [sp, #16]
 800bd28:	1af6      	subs	r6, r6, r3
 800bd2a:	2e00      	cmp	r6, #0
 800bd2c:	dd28      	ble.n	800bd80 <_svfprintf_r+0x7a0>
 800bd2e:	4f13      	ldr	r7, [pc, #76]	; (800bd7c <_svfprintf_r+0x79c>)
 800bd30:	6027      	str	r7, [r4, #0]
 800bd32:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800bd36:	2e10      	cmp	r6, #16
 800bd38:	f103 0301 	add.w	r3, r3, #1
 800bd3c:	f104 0108 	add.w	r1, r4, #8
 800bd40:	f300 82c0 	bgt.w	800c2c4 <_svfprintf_r+0xce4>
 800bd44:	6066      	str	r6, [r4, #4]
 800bd46:	2b07      	cmp	r3, #7
 800bd48:	4416      	add	r6, r2
 800bd4a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800bd4e:	f340 82cc 	ble.w	800c2ea <_svfprintf_r+0xd0a>
 800bd52:	aa22      	add	r2, sp, #136	; 0x88
 800bd54:	4649      	mov	r1, r9
 800bd56:	4650      	mov	r0, sl
 800bd58:	f003 f83f 	bl	800edda <__ssprint_r>
 800bd5c:	2800      	cmp	r0, #0
 800bd5e:	f040 85b9 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800bd62:	ac25      	add	r4, sp, #148	; 0x94
 800bd64:	e00c      	b.n	800bd80 <_svfprintf_r+0x7a0>
 800bd66:	bf00      	nop
 800bd68:	08010869 	.word	0x08010869
 800bd6c:	08010858 	.word	0x08010858
 800bd70:	40300000 	.word	0x40300000
 800bd74:	3fe00000 	.word	0x3fe00000
 800bd78:	0801087c 	.word	0x0801087c
 800bd7c:	0801088c 	.word	0x0801088c
 800bd80:	f418 7f80 	tst.w	r8, #256	; 0x100
 800bd84:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800bd86:	f040 82b7 	bne.w	800c2f8 <_svfprintf_r+0xd18>
 800bd8a:	9b04      	ldr	r3, [sp, #16]
 800bd8c:	f8c4 b000 	str.w	fp, [r4]
 800bd90:	441e      	add	r6, r3
 800bd92:	6063      	str	r3, [r4, #4]
 800bd94:	9624      	str	r6, [sp, #144]	; 0x90
 800bd96:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bd98:	3301      	adds	r3, #1
 800bd9a:	2b07      	cmp	r3, #7
 800bd9c:	9323      	str	r3, [sp, #140]	; 0x8c
 800bd9e:	f300 82f0 	bgt.w	800c382 <_svfprintf_r+0xda2>
 800bda2:	3408      	adds	r4, #8
 800bda4:	f018 0f04 	tst.w	r8, #4
 800bda8:	f040 8576 	bne.w	800c898 <_svfprintf_r+0x12b8>
 800bdac:	e9dd 320f 	ldrd	r3, r2, [sp, #60]	; 0x3c
 800bdb0:	9911      	ldr	r1, [sp, #68]	; 0x44
 800bdb2:	428a      	cmp	r2, r1
 800bdb4:	bfac      	ite	ge
 800bdb6:	189b      	addge	r3, r3, r2
 800bdb8:	185b      	addlt	r3, r3, r1
 800bdba:	930f      	str	r3, [sp, #60]	; 0x3c
 800bdbc:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800bdbe:	b13b      	cbz	r3, 800bdd0 <_svfprintf_r+0x7f0>
 800bdc0:	aa22      	add	r2, sp, #136	; 0x88
 800bdc2:	4649      	mov	r1, r9
 800bdc4:	4650      	mov	r0, sl
 800bdc6:	f003 f808 	bl	800edda <__ssprint_r>
 800bdca:	2800      	cmp	r0, #0
 800bdcc:	f040 8582 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800bdd0:	2300      	movs	r3, #0
 800bdd2:	9323      	str	r3, [sp, #140]	; 0x8c
 800bdd4:	9b03      	ldr	r3, [sp, #12]
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	f040 8598 	bne.w	800c90c <_svfprintf_r+0x132c>
 800bddc:	ac25      	add	r4, sp, #148	; 0x94
 800bdde:	e0ed      	b.n	800bfbc <_svfprintf_r+0x9dc>
 800bde0:	9003      	str	r0, [sp, #12]
 800bde2:	e62c      	b.n	800ba3e <_svfprintf_r+0x45e>
 800bde4:	9003      	str	r0, [sp, #12]
 800bde6:	2306      	movs	r3, #6
 800bde8:	e619      	b.n	800ba1e <_svfprintf_r+0x43e>
 800bdea:	9003      	str	r0, [sp, #12]
 800bdec:	e627      	b.n	800ba3e <_svfprintf_r+0x45e>
 800bdee:	ed9d 7b0c 	vldr	d7, [sp, #48]	; 0x30
 800bdf2:	2300      	movs	r3, #0
 800bdf4:	eeb0 8a47 	vmov.f32	s16, s14
 800bdf8:	eef0 8a67 	vmov.f32	s17, s15
 800bdfc:	e62f      	b.n	800ba5e <_svfprintf_r+0x47e>
 800bdfe:	f802 0c01 	strb.w	r0, [r2, #-1]
 800be02:	e691      	b.n	800bb28 <_svfprintf_r+0x548>
 800be04:	f803 0b01 	strb.w	r0, [r3], #1
 800be08:	1aca      	subs	r2, r1, r3
 800be0a:	2a00      	cmp	r2, #0
 800be0c:	dafa      	bge.n	800be04 <_svfprintf_r+0x824>
 800be0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be12:	3201      	adds	r2, #1
 800be14:	f103 0301 	add.w	r3, r3, #1
 800be18:	bfb8      	it	lt
 800be1a:	2300      	movlt	r3, #0
 800be1c:	441d      	add	r5, r3
 800be1e:	e693      	b.n	800bb48 <_svfprintf_r+0x568>
 800be20:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be22:	462b      	mov	r3, r5
 800be24:	18a9      	adds	r1, r5, r2
 800be26:	2030      	movs	r0, #48	; 0x30
 800be28:	e7ee      	b.n	800be08 <_svfprintf_r+0x828>
 800be2a:	9b08      	ldr	r3, [sp, #32]
 800be2c:	2b46      	cmp	r3, #70	; 0x46
 800be2e:	d005      	beq.n	800be3c <_svfprintf_r+0x85c>
 800be30:	2b45      	cmp	r3, #69	; 0x45
 800be32:	d11b      	bne.n	800be6c <_svfprintf_r+0x88c>
 800be34:	9b04      	ldr	r3, [sp, #16]
 800be36:	1c5d      	adds	r5, r3, #1
 800be38:	2102      	movs	r1, #2
 800be3a:	e001      	b.n	800be40 <_svfprintf_r+0x860>
 800be3c:	9d04      	ldr	r5, [sp, #16]
 800be3e:	2103      	movs	r1, #3
 800be40:	ab20      	add	r3, sp, #128	; 0x80
 800be42:	9301      	str	r3, [sp, #4]
 800be44:	ab1d      	add	r3, sp, #116	; 0x74
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	462a      	mov	r2, r5
 800be4a:	ab1c      	add	r3, sp, #112	; 0x70
 800be4c:	4650      	mov	r0, sl
 800be4e:	eeb0 0a48 	vmov.f32	s0, s16
 800be52:	eef0 0a68 	vmov.f32	s1, s17
 800be56:	f000 ff1b 	bl	800cc90 <_dtoa_r>
 800be5a:	9b08      	ldr	r3, [sp, #32]
 800be5c:	2b47      	cmp	r3, #71	; 0x47
 800be5e:	4683      	mov	fp, r0
 800be60:	d106      	bne.n	800be70 <_svfprintf_r+0x890>
 800be62:	f018 0f01 	tst.w	r8, #1
 800be66:	d103      	bne.n	800be70 <_svfprintf_r+0x890>
 800be68:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800be6a:	e66d      	b.n	800bb48 <_svfprintf_r+0x568>
 800be6c:	9d04      	ldr	r5, [sp, #16]
 800be6e:	e7e3      	b.n	800be38 <_svfprintf_r+0x858>
 800be70:	9b08      	ldr	r3, [sp, #32]
 800be72:	2b46      	cmp	r3, #70	; 0x46
 800be74:	eb0b 0605 	add.w	r6, fp, r5
 800be78:	d10f      	bne.n	800be9a <_svfprintf_r+0x8ba>
 800be7a:	f89b 3000 	ldrb.w	r3, [fp]
 800be7e:	2b30      	cmp	r3, #48	; 0x30
 800be80:	d109      	bne.n	800be96 <_svfprintf_r+0x8b6>
 800be82:	ec51 0b18 	vmov	r0, r1, d8
 800be86:	2200      	movs	r2, #0
 800be88:	2300      	movs	r3, #0
 800be8a:	f7f4 fe1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800be8e:	b910      	cbnz	r0, 800be96 <_svfprintf_r+0x8b6>
 800be90:	f1c5 0501 	rsb	r5, r5, #1
 800be94:	951c      	str	r5, [sp, #112]	; 0x70
 800be96:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800be98:	441e      	add	r6, r3
 800be9a:	ec51 0b18 	vmov	r0, r1, d8
 800be9e:	2200      	movs	r2, #0
 800bea0:	2300      	movs	r3, #0
 800bea2:	f7f4 fe11 	bl	8000ac8 <__aeabi_dcmpeq>
 800bea6:	b100      	cbz	r0, 800beaa <_svfprintf_r+0x8ca>
 800bea8:	9620      	str	r6, [sp, #128]	; 0x80
 800beaa:	2230      	movs	r2, #48	; 0x30
 800beac:	9b20      	ldr	r3, [sp, #128]	; 0x80
 800beae:	429e      	cmp	r6, r3
 800beb0:	d9da      	bls.n	800be68 <_svfprintf_r+0x888>
 800beb2:	1c59      	adds	r1, r3, #1
 800beb4:	9120      	str	r1, [sp, #128]	; 0x80
 800beb6:	701a      	strb	r2, [r3, #0]
 800beb8:	e7f8      	b.n	800beac <_svfprintf_r+0x8cc>
 800beba:	9b08      	ldr	r3, [sp, #32]
 800bebc:	2b46      	cmp	r3, #70	; 0x46
 800bebe:	f47f ae54 	bne.w	800bb6a <_svfprintf_r+0x58a>
 800bec2:	9a04      	ldr	r2, [sp, #16]
 800bec4:	f008 0301 	and.w	r3, r8, #1
 800bec8:	2d00      	cmp	r5, #0
 800beca:	ea43 0302 	orr.w	r3, r3, r2
 800bece:	dd1a      	ble.n	800bf06 <_svfprintf_r+0x926>
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d034      	beq.n	800bf3e <_svfprintf_r+0x95e>
 800bed4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bed6:	18eb      	adds	r3, r5, r3
 800bed8:	441a      	add	r2, r3
 800beda:	9204      	str	r2, [sp, #16]
 800bedc:	2366      	movs	r3, #102	; 0x66
 800bede:	9307      	str	r3, [sp, #28]
 800bee0:	e033      	b.n	800bf4a <_svfprintf_r+0x96a>
 800bee2:	f813 6b01 	ldrb.w	r6, [r3], #1
 800bee6:	f802 6b01 	strb.w	r6, [r2], #1
 800beea:	e675      	b.n	800bbd8 <_svfprintf_r+0x5f8>
 800beec:	b941      	cbnz	r1, 800bf00 <_svfprintf_r+0x920>
 800beee:	2230      	movs	r2, #48	; 0x30
 800bef0:	f88d 207a 	strb.w	r2, [sp, #122]	; 0x7a
 800bef4:	f10d 027b 	add.w	r2, sp, #123	; 0x7b
 800bef8:	3330      	adds	r3, #48	; 0x30
 800befa:	f802 3b01 	strb.w	r3, [r2], #1
 800befe:	e677      	b.n	800bbf0 <_svfprintf_r+0x610>
 800bf00:	f10d 027a 	add.w	r2, sp, #122	; 0x7a
 800bf04:	e7f8      	b.n	800bef8 <_svfprintf_r+0x918>
 800bf06:	b1e3      	cbz	r3, 800bf42 <_svfprintf_r+0x962>
 800bf08:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf0a:	9a04      	ldr	r2, [sp, #16]
 800bf0c:	3301      	adds	r3, #1
 800bf0e:	e7e3      	b.n	800bed8 <_svfprintf_r+0x8f8>
 800bf10:	9b05      	ldr	r3, [sp, #20]
 800bf12:	429d      	cmp	r5, r3
 800bf14:	db07      	blt.n	800bf26 <_svfprintf_r+0x946>
 800bf16:	f018 0f01 	tst.w	r8, #1
 800bf1a:	d02d      	beq.n	800bf78 <_svfprintf_r+0x998>
 800bf1c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bf1e:	18eb      	adds	r3, r5, r3
 800bf20:	9304      	str	r3, [sp, #16]
 800bf22:	2367      	movs	r3, #103	; 0x67
 800bf24:	e7db      	b.n	800bede <_svfprintf_r+0x8fe>
 800bf26:	9b05      	ldr	r3, [sp, #20]
 800bf28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf2a:	2d00      	cmp	r5, #0
 800bf2c:	4413      	add	r3, r2
 800bf2e:	9304      	str	r3, [sp, #16]
 800bf30:	dcf7      	bgt.n	800bf22 <_svfprintf_r+0x942>
 800bf32:	9a04      	ldr	r2, [sp, #16]
 800bf34:	f1c5 0301 	rsb	r3, r5, #1
 800bf38:	441a      	add	r2, r3
 800bf3a:	4613      	mov	r3, r2
 800bf3c:	e7f0      	b.n	800bf20 <_svfprintf_r+0x940>
 800bf3e:	9504      	str	r5, [sp, #16]
 800bf40:	e7cc      	b.n	800bedc <_svfprintf_r+0x8fc>
 800bf42:	2366      	movs	r3, #102	; 0x66
 800bf44:	9307      	str	r3, [sp, #28]
 800bf46:	2301      	movs	r3, #1
 800bf48:	9304      	str	r3, [sp, #16]
 800bf4a:	f418 6380 	ands.w	r3, r8, #1024	; 0x400
 800bf4e:	9309      	str	r3, [sp, #36]	; 0x24
 800bf50:	d025      	beq.n	800bf9e <_svfprintf_r+0x9be>
 800bf52:	2300      	movs	r3, #0
 800bf54:	2d00      	cmp	r5, #0
 800bf56:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800bf5a:	f77f ae61 	ble.w	800bc20 <_svfprintf_r+0x640>
 800bf5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf60:	781b      	ldrb	r3, [r3, #0]
 800bf62:	2bff      	cmp	r3, #255	; 0xff
 800bf64:	d10a      	bne.n	800bf7c <_svfprintf_r+0x99c>
 800bf66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf6a:	9904      	ldr	r1, [sp, #16]
 800bf6c:	4413      	add	r3, r2
 800bf6e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf70:	fb02 1303 	mla	r3, r2, r3, r1
 800bf74:	9304      	str	r3, [sp, #16]
 800bf76:	e653      	b.n	800bc20 <_svfprintf_r+0x640>
 800bf78:	9504      	str	r5, [sp, #16]
 800bf7a:	e7d2      	b.n	800bf22 <_svfprintf_r+0x942>
 800bf7c:	42ab      	cmp	r3, r5
 800bf7e:	daf2      	bge.n	800bf66 <_svfprintf_r+0x986>
 800bf80:	1aed      	subs	r5, r5, r3
 800bf82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf84:	785b      	ldrb	r3, [r3, #1]
 800bf86:	b133      	cbz	r3, 800bf96 <_svfprintf_r+0x9b6>
 800bf88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf8a:	3301      	adds	r3, #1
 800bf8c:	9309      	str	r3, [sp, #36]	; 0x24
 800bf8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bf90:	3301      	adds	r3, #1
 800bf92:	930a      	str	r3, [sp, #40]	; 0x28
 800bf94:	e7e3      	b.n	800bf5e <_svfprintf_r+0x97e>
 800bf96:	9b08      	ldr	r3, [sp, #32]
 800bf98:	3301      	adds	r3, #1
 800bf9a:	9308      	str	r3, [sp, #32]
 800bf9c:	e7df      	b.n	800bf5e <_svfprintf_r+0x97e>
 800bf9e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bfa0:	9308      	str	r3, [sp, #32]
 800bfa2:	e63d      	b.n	800bc20 <_svfprintf_r+0x640>
 800bfa4:	4632      	mov	r2, r6
 800bfa6:	f018 0f20 	tst.w	r8, #32
 800bfaa:	f852 3b04 	ldr.w	r3, [r2], #4
 800bfae:	9206      	str	r2, [sp, #24]
 800bfb0:	d009      	beq.n	800bfc6 <_svfprintf_r+0x9e6>
 800bfb2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfb4:	4610      	mov	r0, r2
 800bfb6:	17d1      	asrs	r1, r2, #31
 800bfb8:	e9c3 0100 	strd	r0, r1, [r3]
 800bfbc:	9e06      	ldr	r6, [sp, #24]
 800bfbe:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
 800bfc2:	f7ff bb4d 	b.w	800b660 <_svfprintf_r+0x80>
 800bfc6:	f018 0f10 	tst.w	r8, #16
 800bfca:	d002      	beq.n	800bfd2 <_svfprintf_r+0x9f2>
 800bfcc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	e7f4      	b.n	800bfbc <_svfprintf_r+0x9dc>
 800bfd2:	f018 0f40 	tst.w	r8, #64	; 0x40
 800bfd6:	d002      	beq.n	800bfde <_svfprintf_r+0x9fe>
 800bfd8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfda:	801a      	strh	r2, [r3, #0]
 800bfdc:	e7ee      	b.n	800bfbc <_svfprintf_r+0x9dc>
 800bfde:	f418 7f00 	tst.w	r8, #512	; 0x200
 800bfe2:	d0f3      	beq.n	800bfcc <_svfprintf_r+0x9ec>
 800bfe4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800bfe6:	701a      	strb	r2, [r3, #0]
 800bfe8:	e7e8      	b.n	800bfbc <_svfprintf_r+0x9dc>
 800bfea:	f048 0810 	orr.w	r8, r8, #16
 800bfee:	f018 0f20 	tst.w	r8, #32
 800bff2:	d01e      	beq.n	800c032 <_svfprintf_r+0xa52>
 800bff4:	3607      	adds	r6, #7
 800bff6:	f026 0307 	bic.w	r3, r6, #7
 800bffa:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800bffe:	9306      	str	r3, [sp, #24]
 800c000:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800c004:	2300      	movs	r3, #0
 800c006:	2200      	movs	r2, #0
 800c008:	f88d 206b 	strb.w	r2, [sp, #107]	; 0x6b
 800c00c:	9a04      	ldr	r2, [sp, #16]
 800c00e:	3201      	adds	r2, #1
 800c010:	f000 848d 	beq.w	800c92e <_svfprintf_r+0x134e>
 800c014:	f028 0280 	bic.w	r2, r8, #128	; 0x80
 800c018:	9203      	str	r2, [sp, #12]
 800c01a:	ea56 0207 	orrs.w	r2, r6, r7
 800c01e:	f040 848c 	bne.w	800c93a <_svfprintf_r+0x135a>
 800c022:	9a04      	ldr	r2, [sp, #16]
 800c024:	2a00      	cmp	r2, #0
 800c026:	f000 80f5 	beq.w	800c214 <_svfprintf_r+0xc34>
 800c02a:	2b01      	cmp	r3, #1
 800c02c:	f040 8488 	bne.w	800c940 <_svfprintf_r+0x1360>
 800c030:	e097      	b.n	800c162 <_svfprintf_r+0xb82>
 800c032:	1d33      	adds	r3, r6, #4
 800c034:	f018 0f10 	tst.w	r8, #16
 800c038:	9306      	str	r3, [sp, #24]
 800c03a:	d001      	beq.n	800c040 <_svfprintf_r+0xa60>
 800c03c:	6836      	ldr	r6, [r6, #0]
 800c03e:	e003      	b.n	800c048 <_svfprintf_r+0xa68>
 800c040:	f018 0f40 	tst.w	r8, #64	; 0x40
 800c044:	d002      	beq.n	800c04c <_svfprintf_r+0xa6c>
 800c046:	8836      	ldrh	r6, [r6, #0]
 800c048:	2700      	movs	r7, #0
 800c04a:	e7d9      	b.n	800c000 <_svfprintf_r+0xa20>
 800c04c:	f418 7f00 	tst.w	r8, #512	; 0x200
 800c050:	d0f4      	beq.n	800c03c <_svfprintf_r+0xa5c>
 800c052:	7836      	ldrb	r6, [r6, #0]
 800c054:	e7f8      	b.n	800c048 <_svfprintf_r+0xa68>
 800c056:	4633      	mov	r3, r6
 800c058:	2278      	movs	r2, #120	; 0x78
 800c05a:	f853 6b04 	ldr.w	r6, [r3], #4
 800c05e:	9306      	str	r3, [sp, #24]
 800c060:	f647 0330 	movw	r3, #30768	; 0x7830
 800c064:	f8ad 306c 	strh.w	r3, [sp, #108]	; 0x6c
 800c068:	4ba1      	ldr	r3, [pc, #644]	; (800c2f0 <_svfprintf_r+0xd10>)
 800c06a:	9316      	str	r3, [sp, #88]	; 0x58
 800c06c:	2700      	movs	r7, #0
 800c06e:	f048 0802 	orr.w	r8, r8, #2
 800c072:	2302      	movs	r3, #2
 800c074:	9207      	str	r2, [sp, #28]
 800c076:	e7c6      	b.n	800c006 <_svfprintf_r+0xa26>
 800c078:	4633      	mov	r3, r6
 800c07a:	2500      	movs	r5, #0
 800c07c:	f853 bb04 	ldr.w	fp, [r3], #4
 800c080:	9306      	str	r3, [sp, #24]
 800c082:	9b04      	ldr	r3, [sp, #16]
 800c084:	f88d 506b 	strb.w	r5, [sp, #107]	; 0x6b
 800c088:	1c59      	adds	r1, r3, #1
 800c08a:	d010      	beq.n	800c0ae <_svfprintf_r+0xace>
 800c08c:	461a      	mov	r2, r3
 800c08e:	4629      	mov	r1, r5
 800c090:	4658      	mov	r0, fp
 800c092:	f7f4 f8a5 	bl	80001e0 <memchr>
 800c096:	9003      	str	r0, [sp, #12]
 800c098:	2800      	cmp	r0, #0
 800c09a:	f000 80d2 	beq.w	800c242 <_svfprintf_r+0xc62>
 800c09e:	eba0 030b 	sub.w	r3, r0, fp
 800c0a2:	e9cd 5303 	strd	r5, r3, [sp, #12]
 800c0a6:	e9cd 5508 	strd	r5, r5, [sp, #32]
 800c0aa:	462e      	mov	r6, r5
 800c0ac:	e5c0      	b.n	800bc30 <_svfprintf_r+0x650>
 800c0ae:	4658      	mov	r0, fp
 800c0b0:	f7f4 f88e 	bl	80001d0 <strlen>
 800c0b4:	e9cd 5003 	strd	r5, r0, [sp, #12]
 800c0b8:	e463      	b.n	800b982 <_svfprintf_r+0x3a2>
 800c0ba:	f048 0810 	orr.w	r8, r8, #16
 800c0be:	f018 0f20 	tst.w	r8, #32
 800c0c2:	d007      	beq.n	800c0d4 <_svfprintf_r+0xaf4>
 800c0c4:	3607      	adds	r6, #7
 800c0c6:	f026 0307 	bic.w	r3, r6, #7
 800c0ca:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800c0ce:	9306      	str	r3, [sp, #24]
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	e798      	b.n	800c006 <_svfprintf_r+0xa26>
 800c0d4:	1d33      	adds	r3, r6, #4
 800c0d6:	f018 0f10 	tst.w	r8, #16
 800c0da:	9306      	str	r3, [sp, #24]
 800c0dc:	d001      	beq.n	800c0e2 <_svfprintf_r+0xb02>
 800c0de:	6836      	ldr	r6, [r6, #0]
 800c0e0:	e003      	b.n	800c0ea <_svfprintf_r+0xb0a>
 800c0e2:	f018 0f40 	tst.w	r8, #64	; 0x40
 800c0e6:	d002      	beq.n	800c0ee <_svfprintf_r+0xb0e>
 800c0e8:	8836      	ldrh	r6, [r6, #0]
 800c0ea:	2700      	movs	r7, #0
 800c0ec:	e7f0      	b.n	800c0d0 <_svfprintf_r+0xaf0>
 800c0ee:	f418 7f00 	tst.w	r8, #512	; 0x200
 800c0f2:	d0f4      	beq.n	800c0de <_svfprintf_r+0xafe>
 800c0f4:	7836      	ldrb	r6, [r6, #0]
 800c0f6:	e7f8      	b.n	800c0ea <_svfprintf_r+0xb0a>
 800c0f8:	4b7e      	ldr	r3, [pc, #504]	; (800c2f4 <_svfprintf_r+0xd14>)
 800c0fa:	9316      	str	r3, [sp, #88]	; 0x58
 800c0fc:	f018 0f20 	tst.w	r8, #32
 800c100:	d019      	beq.n	800c136 <_svfprintf_r+0xb56>
 800c102:	3607      	adds	r6, #7
 800c104:	f026 0307 	bic.w	r3, r6, #7
 800c108:	e8f3 6702 	ldrd	r6, r7, [r3], #8
 800c10c:	9306      	str	r3, [sp, #24]
 800c10e:	f018 0f01 	tst.w	r8, #1
 800c112:	d00a      	beq.n	800c12a <_svfprintf_r+0xb4a>
 800c114:	ea56 0307 	orrs.w	r3, r6, r7
 800c118:	d007      	beq.n	800c12a <_svfprintf_r+0xb4a>
 800c11a:	2330      	movs	r3, #48	; 0x30
 800c11c:	f88d 306c 	strb.w	r3, [sp, #108]	; 0x6c
 800c120:	9b07      	ldr	r3, [sp, #28]
 800c122:	f88d 306d 	strb.w	r3, [sp, #109]	; 0x6d
 800c126:	f048 0802 	orr.w	r8, r8, #2
 800c12a:	f428 6880 	bic.w	r8, r8, #1024	; 0x400
 800c12e:	2302      	movs	r3, #2
 800c130:	e769      	b.n	800c006 <_svfprintf_r+0xa26>
 800c132:	4b6f      	ldr	r3, [pc, #444]	; (800c2f0 <_svfprintf_r+0xd10>)
 800c134:	e7e1      	b.n	800c0fa <_svfprintf_r+0xb1a>
 800c136:	1d33      	adds	r3, r6, #4
 800c138:	f018 0f10 	tst.w	r8, #16
 800c13c:	9306      	str	r3, [sp, #24]
 800c13e:	d001      	beq.n	800c144 <_svfprintf_r+0xb64>
 800c140:	6836      	ldr	r6, [r6, #0]
 800c142:	e003      	b.n	800c14c <_svfprintf_r+0xb6c>
 800c144:	f018 0f40 	tst.w	r8, #64	; 0x40
 800c148:	d002      	beq.n	800c150 <_svfprintf_r+0xb70>
 800c14a:	8836      	ldrh	r6, [r6, #0]
 800c14c:	2700      	movs	r7, #0
 800c14e:	e7de      	b.n	800c10e <_svfprintf_r+0xb2e>
 800c150:	f418 7f00 	tst.w	r8, #512	; 0x200
 800c154:	d0f4      	beq.n	800c140 <_svfprintf_r+0xb60>
 800c156:	7836      	ldrb	r6, [r6, #0]
 800c158:	e7f8      	b.n	800c14c <_svfprintf_r+0xb6c>
 800c15a:	2f00      	cmp	r7, #0
 800c15c:	bf08      	it	eq
 800c15e:	2e0a      	cmpeq	r6, #10
 800c160:	d206      	bcs.n	800c170 <_svfprintf_r+0xb90>
 800c162:	3630      	adds	r6, #48	; 0x30
 800c164:	f88d 6137 	strb.w	r6, [sp, #311]	; 0x137
 800c168:	f20d 1b37 	addw	fp, sp, #311	; 0x137
 800c16c:	f000 bc06 	b.w	800c97c <_svfprintf_r+0x139c>
 800c170:	2300      	movs	r3, #0
 800c172:	9305      	str	r3, [sp, #20]
 800c174:	9b03      	ldr	r3, [sp, #12]
 800c176:	ad4e      	add	r5, sp, #312	; 0x138
 800c178:	f403 6880 	and.w	r8, r3, #1024	; 0x400
 800c17c:	220a      	movs	r2, #10
 800c17e:	2300      	movs	r3, #0
 800c180:	4630      	mov	r0, r6
 800c182:	4639      	mov	r1, r7
 800c184:	f7f4 fd80 	bl	8000c88 <__aeabi_uldivmod>
 800c188:	9b05      	ldr	r3, [sp, #20]
 800c18a:	3230      	adds	r2, #48	; 0x30
 800c18c:	3301      	adds	r3, #1
 800c18e:	f105 3bff 	add.w	fp, r5, #4294967295
 800c192:	f805 2c01 	strb.w	r2, [r5, #-1]
 800c196:	9305      	str	r3, [sp, #20]
 800c198:	f1b8 0f00 	cmp.w	r8, #0
 800c19c:	d019      	beq.n	800c1d2 <_svfprintf_r+0xbf2>
 800c19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1a0:	9a05      	ldr	r2, [sp, #20]
 800c1a2:	781b      	ldrb	r3, [r3, #0]
 800c1a4:	429a      	cmp	r2, r3
 800c1a6:	d114      	bne.n	800c1d2 <_svfprintf_r+0xbf2>
 800c1a8:	2aff      	cmp	r2, #255	; 0xff
 800c1aa:	d012      	beq.n	800c1d2 <_svfprintf_r+0xbf2>
 800c1ac:	2f00      	cmp	r7, #0
 800c1ae:	bf08      	it	eq
 800c1b0:	2e0a      	cmpeq	r6, #10
 800c1b2:	d30e      	bcc.n	800c1d2 <_svfprintf_r+0xbf2>
 800c1b4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c1b6:	9914      	ldr	r1, [sp, #80]	; 0x50
 800c1b8:	ebab 0b03 	sub.w	fp, fp, r3
 800c1bc:	461a      	mov	r2, r3
 800c1be:	4658      	mov	r0, fp
 800c1c0:	f002 fdf8 	bl	800edb4 <strncpy>
 800c1c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c1c6:	785d      	ldrb	r5, [r3, #1]
 800c1c8:	b195      	cbz	r5, 800c1f0 <_svfprintf_r+0xc10>
 800c1ca:	3301      	adds	r3, #1
 800c1cc:	930a      	str	r3, [sp, #40]	; 0x28
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	9305      	str	r3, [sp, #20]
 800c1d2:	220a      	movs	r2, #10
 800c1d4:	2300      	movs	r3, #0
 800c1d6:	4630      	mov	r0, r6
 800c1d8:	4639      	mov	r1, r7
 800c1da:	f7f4 fd55 	bl	8000c88 <__aeabi_uldivmod>
 800c1de:	2f00      	cmp	r7, #0
 800c1e0:	bf08      	it	eq
 800c1e2:	2e0a      	cmpeq	r6, #10
 800c1e4:	f0c0 83ca 	bcc.w	800c97c <_svfprintf_r+0x139c>
 800c1e8:	4606      	mov	r6, r0
 800c1ea:	460f      	mov	r7, r1
 800c1ec:	465d      	mov	r5, fp
 800c1ee:	e7c5      	b.n	800c17c <_svfprintf_r+0xb9c>
 800c1f0:	9505      	str	r5, [sp, #20]
 800c1f2:	e7ee      	b.n	800c1d2 <_svfprintf_r+0xbf2>
 800c1f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800c1f6:	f006 030f 	and.w	r3, r6, #15
 800c1fa:	5cd3      	ldrb	r3, [r2, r3]
 800c1fc:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800c200:	0933      	lsrs	r3, r6, #4
 800c202:	ea43 7307 	orr.w	r3, r3, r7, lsl #28
 800c206:	093a      	lsrs	r2, r7, #4
 800c208:	461e      	mov	r6, r3
 800c20a:	4617      	mov	r7, r2
 800c20c:	ea56 0307 	orrs.w	r3, r6, r7
 800c210:	d1f0      	bne.n	800c1f4 <_svfprintf_r+0xc14>
 800c212:	e3b3      	b.n	800c97c <_svfprintf_r+0x139c>
 800c214:	b933      	cbnz	r3, 800c224 <_svfprintf_r+0xc44>
 800c216:	f018 0f01 	tst.w	r8, #1
 800c21a:	d003      	beq.n	800c224 <_svfprintf_r+0xc44>
 800c21c:	2330      	movs	r3, #48	; 0x30
 800c21e:	f88d 3137 	strb.w	r3, [sp, #311]	; 0x137
 800c222:	e7a1      	b.n	800c168 <_svfprintf_r+0xb88>
 800c224:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800c228:	e3a8      	b.n	800c97c <_svfprintf_r+0x139c>
 800c22a:	9b07      	ldr	r3, [sp, #28]
 800c22c:	2b00      	cmp	r3, #0
 800c22e:	f000 8373 	beq.w	800c918 <_svfprintf_r+0x1338>
 800c232:	2000      	movs	r0, #0
 800c234:	f88d 30d4 	strb.w	r3, [sp, #212]	; 0xd4
 800c238:	f88d 006b 	strb.w	r0, [sp, #107]	; 0x6b
 800c23c:	9606      	str	r6, [sp, #24]
 800c23e:	f7ff bb34 	b.w	800b8aa <_svfprintf_r+0x2ca>
 800c242:	9e03      	ldr	r6, [sp, #12]
 800c244:	f7ff bb9e 	b.w	800b984 <_svfprintf_r+0x3a4>
 800c248:	2010      	movs	r0, #16
 800c24a:	4402      	add	r2, r0
 800c24c:	2b07      	cmp	r3, #7
 800c24e:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c252:	6060      	str	r0, [r4, #4]
 800c254:	dd08      	ble.n	800c268 <_svfprintf_r+0xc88>
 800c256:	aa22      	add	r2, sp, #136	; 0x88
 800c258:	4649      	mov	r1, r9
 800c25a:	4650      	mov	r0, sl
 800c25c:	f002 fdbd 	bl	800edda <__ssprint_r>
 800c260:	2800      	cmp	r0, #0
 800c262:	f040 8337 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c266:	a925      	add	r1, sp, #148	; 0x94
 800c268:	3f10      	subs	r7, #16
 800c26a:	460c      	mov	r4, r1
 800c26c:	e4fb      	b.n	800bc66 <_svfprintf_r+0x686>
 800c26e:	460c      	mov	r4, r1
 800c270:	e514      	b.n	800bc9c <_svfprintf_r+0x6bc>
 800c272:	aa22      	add	r2, sp, #136	; 0x88
 800c274:	4649      	mov	r1, r9
 800c276:	4650      	mov	r0, sl
 800c278:	f002 fdaf 	bl	800edda <__ssprint_r>
 800c27c:	2800      	cmp	r0, #0
 800c27e:	f040 8329 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c282:	ac25      	add	r4, sp, #148	; 0x94
 800c284:	e51c      	b.n	800bcc0 <_svfprintf_r+0x6e0>
 800c286:	aa22      	add	r2, sp, #136	; 0x88
 800c288:	4649      	mov	r1, r9
 800c28a:	4650      	mov	r0, sl
 800c28c:	f002 fda5 	bl	800edda <__ssprint_r>
 800c290:	2800      	cmp	r0, #0
 800c292:	f040 831f 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c296:	ac25      	add	r4, sp, #148	; 0x94
 800c298:	e522      	b.n	800bce0 <_svfprintf_r+0x700>
 800c29a:	2010      	movs	r0, #16
 800c29c:	4402      	add	r2, r0
 800c29e:	2b07      	cmp	r3, #7
 800c2a0:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c2a4:	6060      	str	r0, [r4, #4]
 800c2a6:	dd08      	ble.n	800c2ba <_svfprintf_r+0xcda>
 800c2a8:	aa22      	add	r2, sp, #136	; 0x88
 800c2aa:	4649      	mov	r1, r9
 800c2ac:	4650      	mov	r0, sl
 800c2ae:	f002 fd94 	bl	800edda <__ssprint_r>
 800c2b2:	2800      	cmp	r0, #0
 800c2b4:	f040 830e 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c2b8:	a925      	add	r1, sp, #148	; 0x94
 800c2ba:	3f10      	subs	r7, #16
 800c2bc:	460c      	mov	r4, r1
 800c2be:	e517      	b.n	800bcf0 <_svfprintf_r+0x710>
 800c2c0:	460c      	mov	r4, r1
 800c2c2:	e530      	b.n	800bd26 <_svfprintf_r+0x746>
 800c2c4:	2010      	movs	r0, #16
 800c2c6:	4402      	add	r2, r0
 800c2c8:	2b07      	cmp	r3, #7
 800c2ca:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c2ce:	6060      	str	r0, [r4, #4]
 800c2d0:	dd08      	ble.n	800c2e4 <_svfprintf_r+0xd04>
 800c2d2:	aa22      	add	r2, sp, #136	; 0x88
 800c2d4:	4649      	mov	r1, r9
 800c2d6:	4650      	mov	r0, sl
 800c2d8:	f002 fd7f 	bl	800edda <__ssprint_r>
 800c2dc:	2800      	cmp	r0, #0
 800c2de:	f040 82f9 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c2e2:	a925      	add	r1, sp, #148	; 0x94
 800c2e4:	3e10      	subs	r6, #16
 800c2e6:	460c      	mov	r4, r1
 800c2e8:	e522      	b.n	800bd30 <_svfprintf_r+0x750>
 800c2ea:	460c      	mov	r4, r1
 800c2ec:	e548      	b.n	800bd80 <_svfprintf_r+0x7a0>
 800c2ee:	bf00      	nop
 800c2f0:	08010858 	.word	0x08010858
 800c2f4:	08010869 	.word	0x08010869
 800c2f8:	9b07      	ldr	r3, [sp, #28]
 800c2fa:	2b65      	cmp	r3, #101	; 0x65
 800c2fc:	f340 8232 	ble.w	800c764 <_svfprintf_r+0x1184>
 800c300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c304:	2200      	movs	r2, #0
 800c306:	2300      	movs	r3, #0
 800c308:	f7f4 fbde 	bl	8000ac8 <__aeabi_dcmpeq>
 800c30c:	2800      	cmp	r0, #0
 800c30e:	d068      	beq.n	800c3e2 <_svfprintf_r+0xe02>
 800c310:	4b6d      	ldr	r3, [pc, #436]	; (800c4c8 <_svfprintf_r+0xee8>)
 800c312:	6023      	str	r3, [r4, #0]
 800c314:	2301      	movs	r3, #1
 800c316:	441e      	add	r6, r3
 800c318:	6063      	str	r3, [r4, #4]
 800c31a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c31c:	9624      	str	r6, [sp, #144]	; 0x90
 800c31e:	3301      	adds	r3, #1
 800c320:	2b07      	cmp	r3, #7
 800c322:	9323      	str	r3, [sp, #140]	; 0x8c
 800c324:	dc37      	bgt.n	800c396 <_svfprintf_r+0xdb6>
 800c326:	3408      	adds	r4, #8
 800c328:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c32a:	9a05      	ldr	r2, [sp, #20]
 800c32c:	4293      	cmp	r3, r2
 800c32e:	db03      	blt.n	800c338 <_svfprintf_r+0xd58>
 800c330:	f018 0f01 	tst.w	r8, #1
 800c334:	f43f ad36 	beq.w	800bda4 <_svfprintf_r+0x7c4>
 800c338:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c33a:	6023      	str	r3, [r4, #0]
 800c33c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c33e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c340:	6063      	str	r3, [r4, #4]
 800c342:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c344:	4413      	add	r3, r2
 800c346:	9324      	str	r3, [sp, #144]	; 0x90
 800c348:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c34a:	3301      	adds	r3, #1
 800c34c:	2b07      	cmp	r3, #7
 800c34e:	9323      	str	r3, [sp, #140]	; 0x8c
 800c350:	dc2b      	bgt.n	800c3aa <_svfprintf_r+0xdca>
 800c352:	3408      	adds	r4, #8
 800c354:	9b05      	ldr	r3, [sp, #20]
 800c356:	1e5d      	subs	r5, r3, #1
 800c358:	2d00      	cmp	r5, #0
 800c35a:	f77f ad23 	ble.w	800bda4 <_svfprintf_r+0x7c4>
 800c35e:	4e5b      	ldr	r6, [pc, #364]	; (800c4cc <_svfprintf_r+0xeec>)
 800c360:	2710      	movs	r7, #16
 800c362:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c366:	2d10      	cmp	r5, #16
 800c368:	f103 0301 	add.w	r3, r3, #1
 800c36c:	f104 0108 	add.w	r1, r4, #8
 800c370:	6026      	str	r6, [r4, #0]
 800c372:	dc24      	bgt.n	800c3be <_svfprintf_r+0xdde>
 800c374:	6065      	str	r5, [r4, #4]
 800c376:	2b07      	cmp	r3, #7
 800c378:	4415      	add	r5, r2
 800c37a:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800c37e:	f340 8288 	ble.w	800c892 <_svfprintf_r+0x12b2>
 800c382:	aa22      	add	r2, sp, #136	; 0x88
 800c384:	4649      	mov	r1, r9
 800c386:	4650      	mov	r0, sl
 800c388:	f002 fd27 	bl	800edda <__ssprint_r>
 800c38c:	2800      	cmp	r0, #0
 800c38e:	f040 82a1 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c392:	ac25      	add	r4, sp, #148	; 0x94
 800c394:	e506      	b.n	800bda4 <_svfprintf_r+0x7c4>
 800c396:	aa22      	add	r2, sp, #136	; 0x88
 800c398:	4649      	mov	r1, r9
 800c39a:	4650      	mov	r0, sl
 800c39c:	f002 fd1d 	bl	800edda <__ssprint_r>
 800c3a0:	2800      	cmp	r0, #0
 800c3a2:	f040 8297 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c3a6:	ac25      	add	r4, sp, #148	; 0x94
 800c3a8:	e7be      	b.n	800c328 <_svfprintf_r+0xd48>
 800c3aa:	aa22      	add	r2, sp, #136	; 0x88
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	4650      	mov	r0, sl
 800c3b0:	f002 fd13 	bl	800edda <__ssprint_r>
 800c3b4:	2800      	cmp	r0, #0
 800c3b6:	f040 828d 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c3ba:	ac25      	add	r4, sp, #148	; 0x94
 800c3bc:	e7ca      	b.n	800c354 <_svfprintf_r+0xd74>
 800c3be:	3210      	adds	r2, #16
 800c3c0:	2b07      	cmp	r3, #7
 800c3c2:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c3c6:	6067      	str	r7, [r4, #4]
 800c3c8:	dd08      	ble.n	800c3dc <_svfprintf_r+0xdfc>
 800c3ca:	aa22      	add	r2, sp, #136	; 0x88
 800c3cc:	4649      	mov	r1, r9
 800c3ce:	4650      	mov	r0, sl
 800c3d0:	f002 fd03 	bl	800edda <__ssprint_r>
 800c3d4:	2800      	cmp	r0, #0
 800c3d6:	f040 827d 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c3da:	a925      	add	r1, sp, #148	; 0x94
 800c3dc:	3d10      	subs	r5, #16
 800c3de:	460c      	mov	r4, r1
 800c3e0:	e7bf      	b.n	800c362 <_svfprintf_r+0xd82>
 800c3e2:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	dc73      	bgt.n	800c4d0 <_svfprintf_r+0xef0>
 800c3e8:	4b37      	ldr	r3, [pc, #220]	; (800c4c8 <_svfprintf_r+0xee8>)
 800c3ea:	6023      	str	r3, [r4, #0]
 800c3ec:	2301      	movs	r3, #1
 800c3ee:	441e      	add	r6, r3
 800c3f0:	6063      	str	r3, [r4, #4]
 800c3f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c3f4:	9624      	str	r6, [sp, #144]	; 0x90
 800c3f6:	3301      	adds	r3, #1
 800c3f8:	2b07      	cmp	r3, #7
 800c3fa:	9323      	str	r3, [sp, #140]	; 0x8c
 800c3fc:	dc3d      	bgt.n	800c47a <_svfprintf_r+0xe9a>
 800c3fe:	3408      	adds	r4, #8
 800c400:	9905      	ldr	r1, [sp, #20]
 800c402:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c404:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c406:	430a      	orrs	r2, r1
 800c408:	f008 0101 	and.w	r1, r8, #1
 800c40c:	430a      	orrs	r2, r1
 800c40e:	f43f acc9 	beq.w	800bda4 <_svfprintf_r+0x7c4>
 800c412:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c414:	6022      	str	r2, [r4, #0]
 800c416:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c418:	6062      	str	r2, [r4, #4]
 800c41a:	4413      	add	r3, r2
 800c41c:	9324      	str	r3, [sp, #144]	; 0x90
 800c41e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c420:	3301      	adds	r3, #1
 800c422:	2b07      	cmp	r3, #7
 800c424:	9323      	str	r3, [sp, #140]	; 0x8c
 800c426:	dc32      	bgt.n	800c48e <_svfprintf_r+0xeae>
 800c428:	3408      	adds	r4, #8
 800c42a:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c42c:	2d00      	cmp	r5, #0
 800c42e:	da1b      	bge.n	800c468 <_svfprintf_r+0xe88>
 800c430:	4e26      	ldr	r6, [pc, #152]	; (800c4cc <_svfprintf_r+0xeec>)
 800c432:	426d      	negs	r5, r5
 800c434:	4623      	mov	r3, r4
 800c436:	2710      	movs	r7, #16
 800c438:	e9dd 2123 	ldrd	r2, r1, [sp, #140]	; 0x8c
 800c43c:	2d10      	cmp	r5, #16
 800c43e:	f102 0201 	add.w	r2, r2, #1
 800c442:	f104 0408 	add.w	r4, r4, #8
 800c446:	601e      	str	r6, [r3, #0]
 800c448:	dc2b      	bgt.n	800c4a2 <_svfprintf_r+0xec2>
 800c44a:	605d      	str	r5, [r3, #4]
 800c44c:	2a07      	cmp	r2, #7
 800c44e:	440d      	add	r5, r1
 800c450:	e9cd 2523 	strd	r2, r5, [sp, #140]	; 0x8c
 800c454:	dd08      	ble.n	800c468 <_svfprintf_r+0xe88>
 800c456:	aa22      	add	r2, sp, #136	; 0x88
 800c458:	4649      	mov	r1, r9
 800c45a:	4650      	mov	r0, sl
 800c45c:	f002 fcbd 	bl	800edda <__ssprint_r>
 800c460:	2800      	cmp	r0, #0
 800c462:	f040 8237 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c466:	ac25      	add	r4, sp, #148	; 0x94
 800c468:	9b05      	ldr	r3, [sp, #20]
 800c46a:	9a05      	ldr	r2, [sp, #20]
 800c46c:	6063      	str	r3, [r4, #4]
 800c46e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c470:	f8c4 b000 	str.w	fp, [r4]
 800c474:	4413      	add	r3, r2
 800c476:	9324      	str	r3, [sp, #144]	; 0x90
 800c478:	e48d      	b.n	800bd96 <_svfprintf_r+0x7b6>
 800c47a:	aa22      	add	r2, sp, #136	; 0x88
 800c47c:	4649      	mov	r1, r9
 800c47e:	4650      	mov	r0, sl
 800c480:	f002 fcab 	bl	800edda <__ssprint_r>
 800c484:	2800      	cmp	r0, #0
 800c486:	f040 8225 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c48a:	ac25      	add	r4, sp, #148	; 0x94
 800c48c:	e7b8      	b.n	800c400 <_svfprintf_r+0xe20>
 800c48e:	aa22      	add	r2, sp, #136	; 0x88
 800c490:	4649      	mov	r1, r9
 800c492:	4650      	mov	r0, sl
 800c494:	f002 fca1 	bl	800edda <__ssprint_r>
 800c498:	2800      	cmp	r0, #0
 800c49a:	f040 821b 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c49e:	ac25      	add	r4, sp, #148	; 0x94
 800c4a0:	e7c3      	b.n	800c42a <_svfprintf_r+0xe4a>
 800c4a2:	3110      	adds	r1, #16
 800c4a4:	2a07      	cmp	r2, #7
 800c4a6:	e9cd 2123 	strd	r2, r1, [sp, #140]	; 0x8c
 800c4aa:	605f      	str	r7, [r3, #4]
 800c4ac:	dd08      	ble.n	800c4c0 <_svfprintf_r+0xee0>
 800c4ae:	aa22      	add	r2, sp, #136	; 0x88
 800c4b0:	4649      	mov	r1, r9
 800c4b2:	4650      	mov	r0, sl
 800c4b4:	f002 fc91 	bl	800edda <__ssprint_r>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f040 820b 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c4be:	ac25      	add	r4, sp, #148	; 0x94
 800c4c0:	3d10      	subs	r5, #16
 800c4c2:	4623      	mov	r3, r4
 800c4c4:	e7b8      	b.n	800c438 <_svfprintf_r+0xe58>
 800c4c6:	bf00      	nop
 800c4c8:	0801087a 	.word	0x0801087a
 800c4cc:	0801088c 	.word	0x0801088c
 800c4d0:	9b05      	ldr	r3, [sp, #20]
 800c4d2:	42ab      	cmp	r3, r5
 800c4d4:	bfa8      	it	ge
 800c4d6:	462b      	movge	r3, r5
 800c4d8:	2b00      	cmp	r3, #0
 800c4da:	461f      	mov	r7, r3
 800c4dc:	dd0a      	ble.n	800c4f4 <_svfprintf_r+0xf14>
 800c4de:	441e      	add	r6, r3
 800c4e0:	e9c4 b300 	strd	fp, r3, [r4]
 800c4e4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c4e6:	9624      	str	r6, [sp, #144]	; 0x90
 800c4e8:	3301      	adds	r3, #1
 800c4ea:	2b07      	cmp	r3, #7
 800c4ec:	9323      	str	r3, [sp, #140]	; 0x8c
 800c4ee:	f300 8086 	bgt.w	800c5fe <_svfprintf_r+0x101e>
 800c4f2:	3408      	adds	r4, #8
 800c4f4:	2f00      	cmp	r7, #0
 800c4f6:	bfac      	ite	ge
 800c4f8:	1bee      	subge	r6, r5, r7
 800c4fa:	462e      	movlt	r6, r5
 800c4fc:	2e00      	cmp	r6, #0
 800c4fe:	dd19      	ble.n	800c534 <_svfprintf_r+0xf54>
 800c500:	4f97      	ldr	r7, [pc, #604]	; (800c760 <_svfprintf_r+0x1180>)
 800c502:	6027      	str	r7, [r4, #0]
 800c504:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c508:	2e10      	cmp	r6, #16
 800c50a:	f103 0301 	add.w	r3, r3, #1
 800c50e:	f104 0108 	add.w	r1, r4, #8
 800c512:	dc7e      	bgt.n	800c612 <_svfprintf_r+0x1032>
 800c514:	6066      	str	r6, [r4, #4]
 800c516:	2b07      	cmp	r3, #7
 800c518:	4416      	add	r6, r2
 800c51a:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c51e:	f340 808b 	ble.w	800c638 <_svfprintf_r+0x1058>
 800c522:	aa22      	add	r2, sp, #136	; 0x88
 800c524:	4649      	mov	r1, r9
 800c526:	4650      	mov	r0, sl
 800c528:	f002 fc57 	bl	800edda <__ssprint_r>
 800c52c:	2800      	cmp	r0, #0
 800c52e:	f040 81d1 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c532:	ac25      	add	r4, sp, #148	; 0x94
 800c534:	f418 6f80 	tst.w	r8, #1024	; 0x400
 800c538:	445d      	add	r5, fp
 800c53a:	d00b      	beq.n	800c554 <_svfprintf_r+0xf74>
 800c53c:	4e88      	ldr	r6, [pc, #544]	; (800c760 <_svfprintf_r+0x1180>)
 800c53e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c540:	2b00      	cmp	r3, #0
 800c542:	d17b      	bne.n	800c63c <_svfprintf_r+0x105c>
 800c544:	9b08      	ldr	r3, [sp, #32]
 800c546:	2b00      	cmp	r3, #0
 800c548:	d17b      	bne.n	800c642 <_svfprintf_r+0x1062>
 800c54a:	9b05      	ldr	r3, [sp, #20]
 800c54c:	445b      	add	r3, fp
 800c54e:	429d      	cmp	r5, r3
 800c550:	bf28      	it	cs
 800c552:	461d      	movcs	r5, r3
 800c554:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 800c556:	9a05      	ldr	r2, [sp, #20]
 800c558:	4293      	cmp	r3, r2
 800c55a:	db02      	blt.n	800c562 <_svfprintf_r+0xf82>
 800c55c:	f018 0f01 	tst.w	r8, #1
 800c560:	d00e      	beq.n	800c580 <_svfprintf_r+0xfa0>
 800c562:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c564:	6023      	str	r3, [r4, #0]
 800c566:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c568:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c56a:	6063      	str	r3, [r4, #4]
 800c56c:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c56e:	4413      	add	r3, r2
 800c570:	9324      	str	r3, [sp, #144]	; 0x90
 800c572:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c574:	3301      	adds	r3, #1
 800c576:	2b07      	cmp	r3, #7
 800c578:	9323      	str	r3, [sp, #140]	; 0x8c
 800c57a:	f300 80dd 	bgt.w	800c738 <_svfprintf_r+0x1158>
 800c57e:	3408      	adds	r4, #8
 800c580:	9b05      	ldr	r3, [sp, #20]
 800c582:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800c584:	eb0b 0203 	add.w	r2, fp, r3
 800c588:	1b9e      	subs	r6, r3, r6
 800c58a:	1b52      	subs	r2, r2, r5
 800c58c:	4296      	cmp	r6, r2
 800c58e:	bfa8      	it	ge
 800c590:	4616      	movge	r6, r2
 800c592:	2e00      	cmp	r6, #0
 800c594:	dd0b      	ble.n	800c5ae <_svfprintf_r+0xfce>
 800c596:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c598:	4433      	add	r3, r6
 800c59a:	9324      	str	r3, [sp, #144]	; 0x90
 800c59c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c59e:	3301      	adds	r3, #1
 800c5a0:	2b07      	cmp	r3, #7
 800c5a2:	e9c4 5600 	strd	r5, r6, [r4]
 800c5a6:	9323      	str	r3, [sp, #140]	; 0x8c
 800c5a8:	f300 80d0 	bgt.w	800c74c <_svfprintf_r+0x116c>
 800c5ac:	3408      	adds	r4, #8
 800c5ae:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 800c5b0:	9b05      	ldr	r3, [sp, #20]
 800c5b2:	2e00      	cmp	r6, #0
 800c5b4:	eba3 0505 	sub.w	r5, r3, r5
 800c5b8:	bfa8      	it	ge
 800c5ba:	1bad      	subge	r5, r5, r6
 800c5bc:	2d00      	cmp	r5, #0
 800c5be:	f77f abf1 	ble.w	800bda4 <_svfprintf_r+0x7c4>
 800c5c2:	4e67      	ldr	r6, [pc, #412]	; (800c760 <_svfprintf_r+0x1180>)
 800c5c4:	2710      	movs	r7, #16
 800c5c6:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c5ca:	2d10      	cmp	r5, #16
 800c5cc:	f103 0301 	add.w	r3, r3, #1
 800c5d0:	f104 0108 	add.w	r1, r4, #8
 800c5d4:	6026      	str	r6, [r4, #0]
 800c5d6:	f77f aecd 	ble.w	800c374 <_svfprintf_r+0xd94>
 800c5da:	3210      	adds	r2, #16
 800c5dc:	2b07      	cmp	r3, #7
 800c5de:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c5e2:	6067      	str	r7, [r4, #4]
 800c5e4:	dd08      	ble.n	800c5f8 <_svfprintf_r+0x1018>
 800c5e6:	aa22      	add	r2, sp, #136	; 0x88
 800c5e8:	4649      	mov	r1, r9
 800c5ea:	4650      	mov	r0, sl
 800c5ec:	f002 fbf5 	bl	800edda <__ssprint_r>
 800c5f0:	2800      	cmp	r0, #0
 800c5f2:	f040 816f 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c5f6:	a925      	add	r1, sp, #148	; 0x94
 800c5f8:	3d10      	subs	r5, #16
 800c5fa:	460c      	mov	r4, r1
 800c5fc:	e7e3      	b.n	800c5c6 <_svfprintf_r+0xfe6>
 800c5fe:	aa22      	add	r2, sp, #136	; 0x88
 800c600:	4649      	mov	r1, r9
 800c602:	4650      	mov	r0, sl
 800c604:	f002 fbe9 	bl	800edda <__ssprint_r>
 800c608:	2800      	cmp	r0, #0
 800c60a:	f040 8163 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c60e:	ac25      	add	r4, sp, #148	; 0x94
 800c610:	e770      	b.n	800c4f4 <_svfprintf_r+0xf14>
 800c612:	2010      	movs	r0, #16
 800c614:	4402      	add	r2, r0
 800c616:	2b07      	cmp	r3, #7
 800c618:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c61c:	6060      	str	r0, [r4, #4]
 800c61e:	dd08      	ble.n	800c632 <_svfprintf_r+0x1052>
 800c620:	aa22      	add	r2, sp, #136	; 0x88
 800c622:	4649      	mov	r1, r9
 800c624:	4650      	mov	r0, sl
 800c626:	f002 fbd8 	bl	800edda <__ssprint_r>
 800c62a:	2800      	cmp	r0, #0
 800c62c:	f040 8152 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c630:	a925      	add	r1, sp, #148	; 0x94
 800c632:	3e10      	subs	r6, #16
 800c634:	460c      	mov	r4, r1
 800c636:	e764      	b.n	800c502 <_svfprintf_r+0xf22>
 800c638:	460c      	mov	r4, r1
 800c63a:	e77b      	b.n	800c534 <_svfprintf_r+0xf54>
 800c63c:	9b08      	ldr	r3, [sp, #32]
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d04a      	beq.n	800c6d8 <_svfprintf_r+0x10f8>
 800c642:	9b08      	ldr	r3, [sp, #32]
 800c644:	3b01      	subs	r3, #1
 800c646:	9308      	str	r3, [sp, #32]
 800c648:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c64a:	6023      	str	r3, [r4, #0]
 800c64c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800c64e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c650:	6063      	str	r3, [r4, #4]
 800c652:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c654:	4413      	add	r3, r2
 800c656:	9324      	str	r3, [sp, #144]	; 0x90
 800c658:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c65a:	3301      	adds	r3, #1
 800c65c:	2b07      	cmp	r3, #7
 800c65e:	9323      	str	r3, [sp, #140]	; 0x8c
 800c660:	dc41      	bgt.n	800c6e6 <_svfprintf_r+0x1106>
 800c662:	3408      	adds	r4, #8
 800c664:	9b05      	ldr	r3, [sp, #20]
 800c666:	445b      	add	r3, fp
 800c668:	1b5a      	subs	r2, r3, r5
 800c66a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c66c:	781b      	ldrb	r3, [r3, #0]
 800c66e:	4293      	cmp	r3, r2
 800c670:	bfa8      	it	ge
 800c672:	4613      	movge	r3, r2
 800c674:	2b00      	cmp	r3, #0
 800c676:	461f      	mov	r7, r3
 800c678:	dd0a      	ble.n	800c690 <_svfprintf_r+0x10b0>
 800c67a:	e9c4 5300 	strd	r5, r3, [r4]
 800c67e:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c680:	443b      	add	r3, r7
 800c682:	9324      	str	r3, [sp, #144]	; 0x90
 800c684:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c686:	3301      	adds	r3, #1
 800c688:	2b07      	cmp	r3, #7
 800c68a:	9323      	str	r3, [sp, #140]	; 0x8c
 800c68c:	dc35      	bgt.n	800c6fa <_svfprintf_r+0x111a>
 800c68e:	3408      	adds	r4, #8
 800c690:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c692:	781b      	ldrb	r3, [r3, #0]
 800c694:	2f00      	cmp	r7, #0
 800c696:	bfac      	ite	ge
 800c698:	1bdf      	subge	r7, r3, r7
 800c69a:	461f      	movlt	r7, r3
 800c69c:	2f00      	cmp	r7, #0
 800c69e:	dd17      	ble.n	800c6d0 <_svfprintf_r+0x10f0>
 800c6a0:	e9dd 2323 	ldrd	r2, r3, [sp, #140]	; 0x8c
 800c6a4:	2f10      	cmp	r7, #16
 800c6a6:	f102 0201 	add.w	r2, r2, #1
 800c6aa:	f104 0108 	add.w	r1, r4, #8
 800c6ae:	6026      	str	r6, [r4, #0]
 800c6b0:	dc2d      	bgt.n	800c70e <_svfprintf_r+0x112e>
 800c6b2:	443b      	add	r3, r7
 800c6b4:	2a07      	cmp	r2, #7
 800c6b6:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800c6ba:	6067      	str	r7, [r4, #4]
 800c6bc:	dd3a      	ble.n	800c734 <_svfprintf_r+0x1154>
 800c6be:	aa22      	add	r2, sp, #136	; 0x88
 800c6c0:	4649      	mov	r1, r9
 800c6c2:	4650      	mov	r0, sl
 800c6c4:	f002 fb89 	bl	800edda <__ssprint_r>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	f040 8103 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c6ce:	ac25      	add	r4, sp, #148	; 0x94
 800c6d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6d2:	781b      	ldrb	r3, [r3, #0]
 800c6d4:	441d      	add	r5, r3
 800c6d6:	e732      	b.n	800c53e <_svfprintf_r+0xf5e>
 800c6d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c6da:	3b01      	subs	r3, #1
 800c6dc:	930a      	str	r3, [sp, #40]	; 0x28
 800c6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6e0:	3b01      	subs	r3, #1
 800c6e2:	9309      	str	r3, [sp, #36]	; 0x24
 800c6e4:	e7b0      	b.n	800c648 <_svfprintf_r+0x1068>
 800c6e6:	aa22      	add	r2, sp, #136	; 0x88
 800c6e8:	4649      	mov	r1, r9
 800c6ea:	4650      	mov	r0, sl
 800c6ec:	f002 fb75 	bl	800edda <__ssprint_r>
 800c6f0:	2800      	cmp	r0, #0
 800c6f2:	f040 80ef 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c6f6:	ac25      	add	r4, sp, #148	; 0x94
 800c6f8:	e7b4      	b.n	800c664 <_svfprintf_r+0x1084>
 800c6fa:	aa22      	add	r2, sp, #136	; 0x88
 800c6fc:	4649      	mov	r1, r9
 800c6fe:	4650      	mov	r0, sl
 800c700:	f002 fb6b 	bl	800edda <__ssprint_r>
 800c704:	2800      	cmp	r0, #0
 800c706:	f040 80e5 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c70a:	ac25      	add	r4, sp, #148	; 0x94
 800c70c:	e7c0      	b.n	800c690 <_svfprintf_r+0x10b0>
 800c70e:	2010      	movs	r0, #16
 800c710:	4403      	add	r3, r0
 800c712:	2a07      	cmp	r2, #7
 800c714:	e9cd 2323 	strd	r2, r3, [sp, #140]	; 0x8c
 800c718:	6060      	str	r0, [r4, #4]
 800c71a:	dd08      	ble.n	800c72e <_svfprintf_r+0x114e>
 800c71c:	aa22      	add	r2, sp, #136	; 0x88
 800c71e:	4649      	mov	r1, r9
 800c720:	4650      	mov	r0, sl
 800c722:	f002 fb5a 	bl	800edda <__ssprint_r>
 800c726:	2800      	cmp	r0, #0
 800c728:	f040 80d4 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c72c:	a925      	add	r1, sp, #148	; 0x94
 800c72e:	3f10      	subs	r7, #16
 800c730:	460c      	mov	r4, r1
 800c732:	e7b5      	b.n	800c6a0 <_svfprintf_r+0x10c0>
 800c734:	460c      	mov	r4, r1
 800c736:	e7cb      	b.n	800c6d0 <_svfprintf_r+0x10f0>
 800c738:	aa22      	add	r2, sp, #136	; 0x88
 800c73a:	4649      	mov	r1, r9
 800c73c:	4650      	mov	r0, sl
 800c73e:	f002 fb4c 	bl	800edda <__ssprint_r>
 800c742:	2800      	cmp	r0, #0
 800c744:	f040 80c6 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c748:	ac25      	add	r4, sp, #148	; 0x94
 800c74a:	e719      	b.n	800c580 <_svfprintf_r+0xfa0>
 800c74c:	aa22      	add	r2, sp, #136	; 0x88
 800c74e:	4649      	mov	r1, r9
 800c750:	4650      	mov	r0, sl
 800c752:	f002 fb42 	bl	800edda <__ssprint_r>
 800c756:	2800      	cmp	r0, #0
 800c758:	f040 80bc 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c75c:	ac25      	add	r4, sp, #148	; 0x94
 800c75e:	e726      	b.n	800c5ae <_svfprintf_r+0xfce>
 800c760:	0801088c 	.word	0x0801088c
 800c764:	9a05      	ldr	r2, [sp, #20]
 800c766:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c768:	2a01      	cmp	r2, #1
 800c76a:	f106 0601 	add.w	r6, r6, #1
 800c76e:	f103 0301 	add.w	r3, r3, #1
 800c772:	f104 0508 	add.w	r5, r4, #8
 800c776:	dc02      	bgt.n	800c77e <_svfprintf_r+0x119e>
 800c778:	f018 0f01 	tst.w	r8, #1
 800c77c:	d07e      	beq.n	800c87c <_svfprintf_r+0x129c>
 800c77e:	2201      	movs	r2, #1
 800c780:	2b07      	cmp	r3, #7
 800c782:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c786:	f8c4 b000 	str.w	fp, [r4]
 800c78a:	6062      	str	r2, [r4, #4]
 800c78c:	dd08      	ble.n	800c7a0 <_svfprintf_r+0x11c0>
 800c78e:	aa22      	add	r2, sp, #136	; 0x88
 800c790:	4649      	mov	r1, r9
 800c792:	4650      	mov	r0, sl
 800c794:	f002 fb21 	bl	800edda <__ssprint_r>
 800c798:	2800      	cmp	r0, #0
 800c79a:	f040 809b 	bne.w	800c8d4 <_svfprintf_r+0x12f4>
 800c79e:	ad25      	add	r5, sp, #148	; 0x94
 800c7a0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800c7a2:	602b      	str	r3, [r5, #0]
 800c7a4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c7a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7a8:	606b      	str	r3, [r5, #4]
 800c7aa:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c7ac:	4413      	add	r3, r2
 800c7ae:	9324      	str	r3, [sp, #144]	; 0x90
 800c7b0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c7b2:	3301      	adds	r3, #1
 800c7b4:	2b07      	cmp	r3, #7
 800c7b6:	9323      	str	r3, [sp, #140]	; 0x8c
 800c7b8:	dc32      	bgt.n	800c820 <_svfprintf_r+0x1240>
 800c7ba:	3508      	adds	r5, #8
 800c7bc:	9b05      	ldr	r3, [sp, #20]
 800c7be:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800c7c2:	1e5c      	subs	r4, r3, #1
 800c7c4:	2200      	movs	r2, #0
 800c7c6:	2300      	movs	r3, #0
 800c7c8:	f7f4 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 800c7cc:	2800      	cmp	r0, #0
 800c7ce:	d130      	bne.n	800c832 <_svfprintf_r+0x1252>
 800c7d0:	9923      	ldr	r1, [sp, #140]	; 0x8c
 800c7d2:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c7d4:	9a05      	ldr	r2, [sp, #20]
 800c7d6:	3101      	adds	r1, #1
 800c7d8:	3b01      	subs	r3, #1
 800c7da:	f10b 0001 	add.w	r0, fp, #1
 800c7de:	4413      	add	r3, r2
 800c7e0:	2907      	cmp	r1, #7
 800c7e2:	e9c5 0400 	strd	r0, r4, [r5]
 800c7e6:	e9cd 1323 	strd	r1, r3, [sp, #140]	; 0x8c
 800c7ea:	dd50      	ble.n	800c88e <_svfprintf_r+0x12ae>
 800c7ec:	aa22      	add	r2, sp, #136	; 0x88
 800c7ee:	4649      	mov	r1, r9
 800c7f0:	4650      	mov	r0, sl
 800c7f2:	f002 faf2 	bl	800edda <__ssprint_r>
 800c7f6:	2800      	cmp	r0, #0
 800c7f8:	d16c      	bne.n	800c8d4 <_svfprintf_r+0x12f4>
 800c7fa:	ad25      	add	r5, sp, #148	; 0x94
 800c7fc:	ab1e      	add	r3, sp, #120	; 0x78
 800c7fe:	602b      	str	r3, [r5, #0]
 800c800:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c802:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800c804:	606b      	str	r3, [r5, #4]
 800c806:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c808:	4413      	add	r3, r2
 800c80a:	9324      	str	r3, [sp, #144]	; 0x90
 800c80c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800c80e:	3301      	adds	r3, #1
 800c810:	2b07      	cmp	r3, #7
 800c812:	9323      	str	r3, [sp, #140]	; 0x8c
 800c814:	f73f adb5 	bgt.w	800c382 <_svfprintf_r+0xda2>
 800c818:	f105 0408 	add.w	r4, r5, #8
 800c81c:	f7ff bac2 	b.w	800bda4 <_svfprintf_r+0x7c4>
 800c820:	aa22      	add	r2, sp, #136	; 0x88
 800c822:	4649      	mov	r1, r9
 800c824:	4650      	mov	r0, sl
 800c826:	f002 fad8 	bl	800edda <__ssprint_r>
 800c82a:	2800      	cmp	r0, #0
 800c82c:	d152      	bne.n	800c8d4 <_svfprintf_r+0x12f4>
 800c82e:	ad25      	add	r5, sp, #148	; 0x94
 800c830:	e7c4      	b.n	800c7bc <_svfprintf_r+0x11dc>
 800c832:	2c00      	cmp	r4, #0
 800c834:	dde2      	ble.n	800c7fc <_svfprintf_r+0x121c>
 800c836:	4e58      	ldr	r6, [pc, #352]	; (800c998 <_svfprintf_r+0x13b8>)
 800c838:	2710      	movs	r7, #16
 800c83a:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c83e:	2c10      	cmp	r4, #16
 800c840:	f103 0301 	add.w	r3, r3, #1
 800c844:	f105 0108 	add.w	r1, r5, #8
 800c848:	602e      	str	r6, [r5, #0]
 800c84a:	dc07      	bgt.n	800c85c <_svfprintf_r+0x127c>
 800c84c:	606c      	str	r4, [r5, #4]
 800c84e:	2b07      	cmp	r3, #7
 800c850:	4414      	add	r4, r2
 800c852:	e9cd 3423 	strd	r3, r4, [sp, #140]	; 0x8c
 800c856:	dcc9      	bgt.n	800c7ec <_svfprintf_r+0x120c>
 800c858:	460d      	mov	r5, r1
 800c85a:	e7cf      	b.n	800c7fc <_svfprintf_r+0x121c>
 800c85c:	3210      	adds	r2, #16
 800c85e:	2b07      	cmp	r3, #7
 800c860:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c864:	606f      	str	r7, [r5, #4]
 800c866:	dd06      	ble.n	800c876 <_svfprintf_r+0x1296>
 800c868:	aa22      	add	r2, sp, #136	; 0x88
 800c86a:	4649      	mov	r1, r9
 800c86c:	4650      	mov	r0, sl
 800c86e:	f002 fab4 	bl	800edda <__ssprint_r>
 800c872:	bb78      	cbnz	r0, 800c8d4 <_svfprintf_r+0x12f4>
 800c874:	a925      	add	r1, sp, #148	; 0x94
 800c876:	3c10      	subs	r4, #16
 800c878:	460d      	mov	r5, r1
 800c87a:	e7de      	b.n	800c83a <_svfprintf_r+0x125a>
 800c87c:	2201      	movs	r2, #1
 800c87e:	2b07      	cmp	r3, #7
 800c880:	e9cd 3623 	strd	r3, r6, [sp, #140]	; 0x8c
 800c884:	f8c4 b000 	str.w	fp, [r4]
 800c888:	6062      	str	r2, [r4, #4]
 800c88a:	ddb7      	ble.n	800c7fc <_svfprintf_r+0x121c>
 800c88c:	e7ae      	b.n	800c7ec <_svfprintf_r+0x120c>
 800c88e:	3508      	adds	r5, #8
 800c890:	e7b4      	b.n	800c7fc <_svfprintf_r+0x121c>
 800c892:	460c      	mov	r4, r1
 800c894:	f7ff ba86 	b.w	800bda4 <_svfprintf_r+0x7c4>
 800c898:	e9dd 3210 	ldrd	r3, r2, [sp, #64]	; 0x40
 800c89c:	1a9d      	subs	r5, r3, r2
 800c89e:	2d00      	cmp	r5, #0
 800c8a0:	f77f aa84 	ble.w	800bdac <_svfprintf_r+0x7cc>
 800c8a4:	4e3d      	ldr	r6, [pc, #244]	; (800c99c <_svfprintf_r+0x13bc>)
 800c8a6:	2710      	movs	r7, #16
 800c8a8:	e9dd 3223 	ldrd	r3, r2, [sp, #140]	; 0x8c
 800c8ac:	2d10      	cmp	r5, #16
 800c8ae:	f103 0301 	add.w	r3, r3, #1
 800c8b2:	6026      	str	r6, [r4, #0]
 800c8b4:	dc18      	bgt.n	800c8e8 <_svfprintf_r+0x1308>
 800c8b6:	6065      	str	r5, [r4, #4]
 800c8b8:	2b07      	cmp	r3, #7
 800c8ba:	4415      	add	r5, r2
 800c8bc:	e9cd 3523 	strd	r3, r5, [sp, #140]	; 0x8c
 800c8c0:	f77f aa74 	ble.w	800bdac <_svfprintf_r+0x7cc>
 800c8c4:	aa22      	add	r2, sp, #136	; 0x88
 800c8c6:	4649      	mov	r1, r9
 800c8c8:	4650      	mov	r0, sl
 800c8ca:	f002 fa86 	bl	800edda <__ssprint_r>
 800c8ce:	2800      	cmp	r0, #0
 800c8d0:	f43f aa6c 	beq.w	800bdac <_svfprintf_r+0x7cc>
 800c8d4:	9b03      	ldr	r3, [sp, #12]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	f43f a88a 	beq.w	800b9f0 <_svfprintf_r+0x410>
 800c8dc:	4619      	mov	r1, r3
 800c8de:	4650      	mov	r0, sl
 800c8e0:	f001 f90a 	bl	800daf8 <_free_r>
 800c8e4:	f7ff b884 	b.w	800b9f0 <_svfprintf_r+0x410>
 800c8e8:	3210      	adds	r2, #16
 800c8ea:	2b07      	cmp	r3, #7
 800c8ec:	e9cd 3223 	strd	r3, r2, [sp, #140]	; 0x8c
 800c8f0:	6067      	str	r7, [r4, #4]
 800c8f2:	dc02      	bgt.n	800c8fa <_svfprintf_r+0x131a>
 800c8f4:	3408      	adds	r4, #8
 800c8f6:	3d10      	subs	r5, #16
 800c8f8:	e7d6      	b.n	800c8a8 <_svfprintf_r+0x12c8>
 800c8fa:	aa22      	add	r2, sp, #136	; 0x88
 800c8fc:	4649      	mov	r1, r9
 800c8fe:	4650      	mov	r0, sl
 800c900:	f002 fa6b 	bl	800edda <__ssprint_r>
 800c904:	2800      	cmp	r0, #0
 800c906:	d1e5      	bne.n	800c8d4 <_svfprintf_r+0x12f4>
 800c908:	ac25      	add	r4, sp, #148	; 0x94
 800c90a:	e7f4      	b.n	800c8f6 <_svfprintf_r+0x1316>
 800c90c:	9903      	ldr	r1, [sp, #12]
 800c90e:	4650      	mov	r0, sl
 800c910:	f001 f8f2 	bl	800daf8 <_free_r>
 800c914:	f7ff ba62 	b.w	800bddc <_svfprintf_r+0x7fc>
 800c918:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	f43f a868 	beq.w	800b9f0 <_svfprintf_r+0x410>
 800c920:	aa22      	add	r2, sp, #136	; 0x88
 800c922:	4649      	mov	r1, r9
 800c924:	4650      	mov	r0, sl
 800c926:	f002 fa58 	bl	800edda <__ssprint_r>
 800c92a:	f7ff b861 	b.w	800b9f0 <_svfprintf_r+0x410>
 800c92e:	ea56 0207 	orrs.w	r2, r6, r7
 800c932:	f8cd 800c 	str.w	r8, [sp, #12]
 800c936:	f43f ab78 	beq.w	800c02a <_svfprintf_r+0xa4a>
 800c93a:	2b01      	cmp	r3, #1
 800c93c:	f43f ac0d 	beq.w	800c15a <_svfprintf_r+0xb7a>
 800c940:	2b02      	cmp	r3, #2
 800c942:	f50d 7b9c 	add.w	fp, sp, #312	; 0x138
 800c946:	f43f ac55 	beq.w	800c1f4 <_svfprintf_r+0xc14>
 800c94a:	08f2      	lsrs	r2, r6, #3
 800c94c:	ea42 7247 	orr.w	r2, r2, r7, lsl #29
 800c950:	08f8      	lsrs	r0, r7, #3
 800c952:	f006 0307 	and.w	r3, r6, #7
 800c956:	4607      	mov	r7, r0
 800c958:	4616      	mov	r6, r2
 800c95a:	3330      	adds	r3, #48	; 0x30
 800c95c:	ea56 0207 	orrs.w	r2, r6, r7
 800c960:	4659      	mov	r1, fp
 800c962:	f80b 3d01 	strb.w	r3, [fp, #-1]!
 800c966:	d1f0      	bne.n	800c94a <_svfprintf_r+0x136a>
 800c968:	9a03      	ldr	r2, [sp, #12]
 800c96a:	07d2      	lsls	r2, r2, #31
 800c96c:	d506      	bpl.n	800c97c <_svfprintf_r+0x139c>
 800c96e:	2b30      	cmp	r3, #48	; 0x30
 800c970:	d004      	beq.n	800c97c <_svfprintf_r+0x139c>
 800c972:	2330      	movs	r3, #48	; 0x30
 800c974:	f80b 3c01 	strb.w	r3, [fp, #-1]
 800c978:	f1a1 0b02 	sub.w	fp, r1, #2
 800c97c:	ab4e      	add	r3, sp, #312	; 0x138
 800c97e:	eba3 030b 	sub.w	r3, r3, fp
 800c982:	9e04      	ldr	r6, [sp, #16]
 800c984:	9304      	str	r3, [sp, #16]
 800c986:	2300      	movs	r3, #0
 800c988:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800c98c:	9303      	str	r3, [sp, #12]
 800c98e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 800c992:	461d      	mov	r5, r3
 800c994:	f7ff b94c 	b.w	800bc30 <_svfprintf_r+0x650>
 800c998:	0801088c 	.word	0x0801088c
 800c99c:	0801087c 	.word	0x0801087c

0800c9a0 <sysconf>:
 800c9a0:	2808      	cmp	r0, #8
 800c9a2:	b508      	push	{r3, lr}
 800c9a4:	d006      	beq.n	800c9b4 <sysconf+0x14>
 800c9a6:	f7fb fb79 	bl	800809c <__errno>
 800c9aa:	2316      	movs	r3, #22
 800c9ac:	6003      	str	r3, [r0, #0]
 800c9ae:	f04f 30ff 	mov.w	r0, #4294967295
 800c9b2:	bd08      	pop	{r3, pc}
 800c9b4:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 800c9b8:	e7fb      	b.n	800c9b2 <sysconf+0x12>

0800c9ba <__submore>:
 800c9ba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c9be:	460c      	mov	r4, r1
 800c9c0:	6b09      	ldr	r1, [r1, #48]	; 0x30
 800c9c2:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800c9c6:	4299      	cmp	r1, r3
 800c9c8:	d11d      	bne.n	800ca06 <__submore+0x4c>
 800c9ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c9ce:	f7fd f83b 	bl	8009a48 <_malloc_r>
 800c9d2:	b918      	cbnz	r0, 800c9dc <__submore+0x22>
 800c9d4:	f04f 30ff 	mov.w	r0, #4294967295
 800c9d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c9dc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c9e0:	6363      	str	r3, [r4, #52]	; 0x34
 800c9e2:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
 800c9e6:	6320      	str	r0, [r4, #48]	; 0x30
 800c9e8:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800c9ec:	f894 3041 	ldrb.w	r3, [r4, #65]	; 0x41
 800c9f0:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800c9f4:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 800c9f8:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800c9fc:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800ca00:	6020      	str	r0, [r4, #0]
 800ca02:	2000      	movs	r0, #0
 800ca04:	e7e8      	b.n	800c9d8 <__submore+0x1e>
 800ca06:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800ca08:	0077      	lsls	r7, r6, #1
 800ca0a:	463a      	mov	r2, r7
 800ca0c:	f7fd fad8 	bl	8009fc0 <_realloc_r>
 800ca10:	4605      	mov	r5, r0
 800ca12:	2800      	cmp	r0, #0
 800ca14:	d0de      	beq.n	800c9d4 <__submore+0x1a>
 800ca16:	eb00 0806 	add.w	r8, r0, r6
 800ca1a:	4601      	mov	r1, r0
 800ca1c:	4632      	mov	r2, r6
 800ca1e:	4640      	mov	r0, r8
 800ca20:	f7fd fa80 	bl	8009f24 <memcpy>
 800ca24:	e9c4 570c 	strd	r5, r7, [r4, #48]	; 0x30
 800ca28:	f8c4 8000 	str.w	r8, [r4]
 800ca2c:	e7e9      	b.n	800ca02 <__submore+0x48>

0800ca2e <__ascii_wctomb>:
 800ca2e:	b149      	cbz	r1, 800ca44 <__ascii_wctomb+0x16>
 800ca30:	2aff      	cmp	r2, #255	; 0xff
 800ca32:	bf85      	ittet	hi
 800ca34:	238a      	movhi	r3, #138	; 0x8a
 800ca36:	6003      	strhi	r3, [r0, #0]
 800ca38:	700a      	strbls	r2, [r1, #0]
 800ca3a:	f04f 30ff 	movhi.w	r0, #4294967295
 800ca3e:	bf98      	it	ls
 800ca40:	2001      	movls	r0, #1
 800ca42:	4770      	bx	lr
 800ca44:	4608      	mov	r0, r1
 800ca46:	4770      	bx	lr

0800ca48 <__swsetup_r>:
 800ca48:	b538      	push	{r3, r4, r5, lr}
 800ca4a:	4b2a      	ldr	r3, [pc, #168]	; (800caf4 <__swsetup_r+0xac>)
 800ca4c:	4605      	mov	r5, r0
 800ca4e:	6818      	ldr	r0, [r3, #0]
 800ca50:	460c      	mov	r4, r1
 800ca52:	b118      	cbz	r0, 800ca5c <__swsetup_r+0x14>
 800ca54:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800ca56:	b90b      	cbnz	r3, 800ca5c <__swsetup_r+0x14>
 800ca58:	f7fc fe14 	bl	8009684 <__sinit>
 800ca5c:	89a3      	ldrh	r3, [r4, #12]
 800ca5e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca62:	0718      	lsls	r0, r3, #28
 800ca64:	d422      	bmi.n	800caac <__swsetup_r+0x64>
 800ca66:	06d9      	lsls	r1, r3, #27
 800ca68:	d407      	bmi.n	800ca7a <__swsetup_r+0x32>
 800ca6a:	2309      	movs	r3, #9
 800ca6c:	602b      	str	r3, [r5, #0]
 800ca6e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca72:	81a3      	strh	r3, [r4, #12]
 800ca74:	f04f 30ff 	mov.w	r0, #4294967295
 800ca78:	e034      	b.n	800cae4 <__swsetup_r+0x9c>
 800ca7a:	0758      	lsls	r0, r3, #29
 800ca7c:	d512      	bpl.n	800caa4 <__swsetup_r+0x5c>
 800ca7e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800ca80:	b141      	cbz	r1, 800ca94 <__swsetup_r+0x4c>
 800ca82:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800ca86:	4299      	cmp	r1, r3
 800ca88:	d002      	beq.n	800ca90 <__swsetup_r+0x48>
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f001 f834 	bl	800daf8 <_free_r>
 800ca90:	2300      	movs	r3, #0
 800ca92:	6323      	str	r3, [r4, #48]	; 0x30
 800ca94:	89a3      	ldrh	r3, [r4, #12]
 800ca96:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca9a:	81a3      	strh	r3, [r4, #12]
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	6063      	str	r3, [r4, #4]
 800caa0:	6923      	ldr	r3, [r4, #16]
 800caa2:	6023      	str	r3, [r4, #0]
 800caa4:	89a3      	ldrh	r3, [r4, #12]
 800caa6:	f043 0308 	orr.w	r3, r3, #8
 800caaa:	81a3      	strh	r3, [r4, #12]
 800caac:	6923      	ldr	r3, [r4, #16]
 800caae:	b94b      	cbnz	r3, 800cac4 <__swsetup_r+0x7c>
 800cab0:	89a3      	ldrh	r3, [r4, #12]
 800cab2:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800cab6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caba:	d003      	beq.n	800cac4 <__swsetup_r+0x7c>
 800cabc:	4621      	mov	r1, r4
 800cabe:	4628      	mov	r0, r5
 800cac0:	f001 fc76 	bl	800e3b0 <__smakebuf_r>
 800cac4:	89a0      	ldrh	r0, [r4, #12]
 800cac6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800caca:	f010 0301 	ands.w	r3, r0, #1
 800cace:	d00a      	beq.n	800cae6 <__swsetup_r+0x9e>
 800cad0:	2300      	movs	r3, #0
 800cad2:	60a3      	str	r3, [r4, #8]
 800cad4:	6963      	ldr	r3, [r4, #20]
 800cad6:	425b      	negs	r3, r3
 800cad8:	61a3      	str	r3, [r4, #24]
 800cada:	6923      	ldr	r3, [r4, #16]
 800cadc:	b943      	cbnz	r3, 800caf0 <__swsetup_r+0xa8>
 800cade:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800cae2:	d1c4      	bne.n	800ca6e <__swsetup_r+0x26>
 800cae4:	bd38      	pop	{r3, r4, r5, pc}
 800cae6:	0781      	lsls	r1, r0, #30
 800cae8:	bf58      	it	pl
 800caea:	6963      	ldrpl	r3, [r4, #20]
 800caec:	60a3      	str	r3, [r4, #8]
 800caee:	e7f4      	b.n	800cada <__swsetup_r+0x92>
 800caf0:	2000      	movs	r0, #0
 800caf2:	e7f7      	b.n	800cae4 <__swsetup_r+0x9c>
 800caf4:	200001f8 	.word	0x200001f8

0800caf8 <__register_exitproc>:
 800caf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cafc:	4d1c      	ldr	r5, [pc, #112]	; (800cb70 <__register_exitproc+0x78>)
 800cafe:	4606      	mov	r6, r0
 800cb00:	6828      	ldr	r0, [r5, #0]
 800cb02:	4698      	mov	r8, r3
 800cb04:	460f      	mov	r7, r1
 800cb06:	4691      	mov	r9, r2
 800cb08:	f7fc ff7a 	bl	8009a00 <__retarget_lock_acquire_recursive>
 800cb0c:	4b19      	ldr	r3, [pc, #100]	; (800cb74 <__register_exitproc+0x7c>)
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
 800cb14:	4628      	mov	r0, r5
 800cb16:	b91c      	cbnz	r4, 800cb20 <__register_exitproc+0x28>
 800cb18:	f503 74a6 	add.w	r4, r3, #332	; 0x14c
 800cb1c:	f8c3 4148 	str.w	r4, [r3, #328]	; 0x148
 800cb20:	6865      	ldr	r5, [r4, #4]
 800cb22:	6800      	ldr	r0, [r0, #0]
 800cb24:	2d1f      	cmp	r5, #31
 800cb26:	dd05      	ble.n	800cb34 <__register_exitproc+0x3c>
 800cb28:	f7fc ff6b 	bl	8009a02 <__retarget_lock_release_recursive>
 800cb2c:	f04f 30ff 	mov.w	r0, #4294967295
 800cb30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cb34:	b19e      	cbz	r6, 800cb5e <__register_exitproc+0x66>
 800cb36:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 800cb3a:	2201      	movs	r2, #1
 800cb3c:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
 800cb40:	f8d4 3188 	ldr.w	r3, [r4, #392]	; 0x188
 800cb44:	40aa      	lsls	r2, r5
 800cb46:	4313      	orrs	r3, r2
 800cb48:	2e02      	cmp	r6, #2
 800cb4a:	f8c4 3188 	str.w	r3, [r4, #392]	; 0x188
 800cb4e:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
 800cb52:	bf02      	ittt	eq
 800cb54:	f8d4 318c 	ldreq.w	r3, [r4, #396]	; 0x18c
 800cb58:	431a      	orreq	r2, r3
 800cb5a:	f8c4 218c 	streq.w	r2, [r4, #396]	; 0x18c
 800cb5e:	1c6b      	adds	r3, r5, #1
 800cb60:	3502      	adds	r5, #2
 800cb62:	6063      	str	r3, [r4, #4]
 800cb64:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 800cb68:	f7fc ff4b 	bl	8009a02 <__retarget_lock_release_recursive>
 800cb6c:	2000      	movs	r0, #0
 800cb6e:	e7df      	b.n	800cb30 <__register_exitproc+0x38>
 800cb70:	20000628 	.word	0x20000628
 800cb74:	080106c0 	.word	0x080106c0

0800cb78 <quorem>:
 800cb78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb7c:	6903      	ldr	r3, [r0, #16]
 800cb7e:	690c      	ldr	r4, [r1, #16]
 800cb80:	42a3      	cmp	r3, r4
 800cb82:	4607      	mov	r7, r0
 800cb84:	f2c0 8081 	blt.w	800cc8a <quorem+0x112>
 800cb88:	3c01      	subs	r4, #1
 800cb8a:	f101 0814 	add.w	r8, r1, #20
 800cb8e:	f100 0514 	add.w	r5, r0, #20
 800cb92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cb96:	9301      	str	r3, [sp, #4]
 800cb98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800cb9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cba0:	3301      	adds	r3, #1
 800cba2:	429a      	cmp	r2, r3
 800cba4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800cba8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800cbac:	fbb2 f6f3 	udiv	r6, r2, r3
 800cbb0:	d331      	bcc.n	800cc16 <quorem+0x9e>
 800cbb2:	f04f 0e00 	mov.w	lr, #0
 800cbb6:	4640      	mov	r0, r8
 800cbb8:	46ac      	mov	ip, r5
 800cbba:	46f2      	mov	sl, lr
 800cbbc:	f850 2b04 	ldr.w	r2, [r0], #4
 800cbc0:	b293      	uxth	r3, r2
 800cbc2:	fb06 e303 	mla	r3, r6, r3, lr
 800cbc6:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800cbca:	b29b      	uxth	r3, r3
 800cbcc:	ebaa 0303 	sub.w	r3, sl, r3
 800cbd0:	0c12      	lsrs	r2, r2, #16
 800cbd2:	f8dc a000 	ldr.w	sl, [ip]
 800cbd6:	fb06 e202 	mla	r2, r6, r2, lr
 800cbda:	fa13 f38a 	uxtah	r3, r3, sl
 800cbde:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800cbe2:	fa1f fa82 	uxth.w	sl, r2
 800cbe6:	f8dc 2000 	ldr.w	r2, [ip]
 800cbea:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 800cbee:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cbf2:	b29b      	uxth	r3, r3
 800cbf4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cbf8:	4581      	cmp	r9, r0
 800cbfa:	f84c 3b04 	str.w	r3, [ip], #4
 800cbfe:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800cc02:	d2db      	bcs.n	800cbbc <quorem+0x44>
 800cc04:	f855 300b 	ldr.w	r3, [r5, fp]
 800cc08:	b92b      	cbnz	r3, 800cc16 <quorem+0x9e>
 800cc0a:	9b01      	ldr	r3, [sp, #4]
 800cc0c:	3b04      	subs	r3, #4
 800cc0e:	429d      	cmp	r5, r3
 800cc10:	461a      	mov	r2, r3
 800cc12:	d32e      	bcc.n	800cc72 <quorem+0xfa>
 800cc14:	613c      	str	r4, [r7, #16]
 800cc16:	4638      	mov	r0, r7
 800cc18:	f001 fe84 	bl	800e924 <__mcmp>
 800cc1c:	2800      	cmp	r0, #0
 800cc1e:	db24      	blt.n	800cc6a <quorem+0xf2>
 800cc20:	3601      	adds	r6, #1
 800cc22:	4628      	mov	r0, r5
 800cc24:	f04f 0c00 	mov.w	ip, #0
 800cc28:	f858 2b04 	ldr.w	r2, [r8], #4
 800cc2c:	f8d0 e000 	ldr.w	lr, [r0]
 800cc30:	b293      	uxth	r3, r2
 800cc32:	ebac 0303 	sub.w	r3, ip, r3
 800cc36:	0c12      	lsrs	r2, r2, #16
 800cc38:	fa13 f38e 	uxtah	r3, r3, lr
 800cc3c:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800cc40:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800cc44:	b29b      	uxth	r3, r3
 800cc46:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800cc4a:	45c1      	cmp	r9, r8
 800cc4c:	f840 3b04 	str.w	r3, [r0], #4
 800cc50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800cc54:	d2e8      	bcs.n	800cc28 <quorem+0xb0>
 800cc56:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800cc5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800cc5e:	b922      	cbnz	r2, 800cc6a <quorem+0xf2>
 800cc60:	3b04      	subs	r3, #4
 800cc62:	429d      	cmp	r5, r3
 800cc64:	461a      	mov	r2, r3
 800cc66:	d30a      	bcc.n	800cc7e <quorem+0x106>
 800cc68:	613c      	str	r4, [r7, #16]
 800cc6a:	4630      	mov	r0, r6
 800cc6c:	b003      	add	sp, #12
 800cc6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc72:	6812      	ldr	r2, [r2, #0]
 800cc74:	3b04      	subs	r3, #4
 800cc76:	2a00      	cmp	r2, #0
 800cc78:	d1cc      	bne.n	800cc14 <quorem+0x9c>
 800cc7a:	3c01      	subs	r4, #1
 800cc7c:	e7c7      	b.n	800cc0e <quorem+0x96>
 800cc7e:	6812      	ldr	r2, [r2, #0]
 800cc80:	3b04      	subs	r3, #4
 800cc82:	2a00      	cmp	r2, #0
 800cc84:	d1f0      	bne.n	800cc68 <quorem+0xf0>
 800cc86:	3c01      	subs	r4, #1
 800cc88:	e7eb      	b.n	800cc62 <quorem+0xea>
 800cc8a:	2000      	movs	r0, #0
 800cc8c:	e7ee      	b.n	800cc6c <quorem+0xf4>
	...

0800cc90 <_dtoa_r>:
 800cc90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cc94:	ed2d 8b02 	vpush	{d8}
 800cc98:	b095      	sub	sp, #84	; 0x54
 800cc9a:	ec57 6b10 	vmov	r6, r7, d0
 800cc9e:	9105      	str	r1, [sp, #20]
 800cca0:	6c01      	ldr	r1, [r0, #64]	; 0x40
 800cca2:	9d20      	ldr	r5, [sp, #128]	; 0x80
 800cca4:	9209      	str	r2, [sp, #36]	; 0x24
 800cca6:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800ccaa:	4604      	mov	r4, r0
 800ccac:	930f      	str	r3, [sp, #60]	; 0x3c
 800ccae:	b141      	cbz	r1, 800ccc2 <_dtoa_r+0x32>
 800ccb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800ccb2:	604a      	str	r2, [r1, #4]
 800ccb4:	2301      	movs	r3, #1
 800ccb6:	4093      	lsls	r3, r2
 800ccb8:	608b      	str	r3, [r1, #8]
 800ccba:	f001 fbde 	bl	800e47a <_Bfree>
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	6423      	str	r3, [r4, #64]	; 0x40
 800ccc2:	1e3b      	subs	r3, r7, #0
 800ccc4:	bfb9      	ittee	lt
 800ccc6:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ccca:	9303      	strlt	r3, [sp, #12]
 800cccc:	2300      	movge	r3, #0
 800ccce:	602b      	strge	r3, [r5, #0]
 800ccd0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800ccd4:	4ba2      	ldr	r3, [pc, #648]	; (800cf60 <_dtoa_r+0x2d0>)
 800ccd6:	bfbc      	itt	lt
 800ccd8:	2201      	movlt	r2, #1
 800ccda:	602a      	strlt	r2, [r5, #0]
 800ccdc:	ea33 0309 	bics.w	r3, r3, r9
 800cce0:	d11b      	bne.n	800cd1a <_dtoa_r+0x8a>
 800cce2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cce4:	f242 730f 	movw	r3, #9999	; 0x270f
 800cce8:	6013      	str	r3, [r2, #0]
 800ccea:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800ccee:	4333      	orrs	r3, r6
 800ccf0:	f000 8578 	beq.w	800d7e4 <_dtoa_r+0xb54>
 800ccf4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ccf6:	b90b      	cbnz	r3, 800ccfc <_dtoa_r+0x6c>
 800ccf8:	4b9a      	ldr	r3, [pc, #616]	; (800cf64 <_dtoa_r+0x2d4>)
 800ccfa:	e024      	b.n	800cd46 <_dtoa_r+0xb6>
 800ccfc:	4b99      	ldr	r3, [pc, #612]	; (800cf64 <_dtoa_r+0x2d4>)
 800ccfe:	9300      	str	r3, [sp, #0]
 800cd00:	3303      	adds	r3, #3
 800cd02:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cd04:	6013      	str	r3, [r2, #0]
 800cd06:	9800      	ldr	r0, [sp, #0]
 800cd08:	b015      	add	sp, #84	; 0x54
 800cd0a:	ecbd 8b02 	vpop	{d8}
 800cd0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd12:	4b95      	ldr	r3, [pc, #596]	; (800cf68 <_dtoa_r+0x2d8>)
 800cd14:	9300      	str	r3, [sp, #0]
 800cd16:	3308      	adds	r3, #8
 800cd18:	e7f3      	b.n	800cd02 <_dtoa_r+0x72>
 800cd1a:	ed9d 7b02 	vldr	d7, [sp, #8]
 800cd1e:	2200      	movs	r2, #0
 800cd20:	ec51 0b17 	vmov	r0, r1, d7
 800cd24:	2300      	movs	r3, #0
 800cd26:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800cd2a:	f7f3 fecd 	bl	8000ac8 <__aeabi_dcmpeq>
 800cd2e:	4680      	mov	r8, r0
 800cd30:	b158      	cbz	r0, 800cd4a <_dtoa_r+0xba>
 800cd32:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800cd34:	2301      	movs	r3, #1
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cd3a:	2b00      	cmp	r3, #0
 800cd3c:	f000 854f 	beq.w	800d7de <_dtoa_r+0xb4e>
 800cd40:	488a      	ldr	r0, [pc, #552]	; (800cf6c <_dtoa_r+0x2dc>)
 800cd42:	6018      	str	r0, [r3, #0]
 800cd44:	1e43      	subs	r3, r0, #1
 800cd46:	9300      	str	r3, [sp, #0]
 800cd48:	e7dd      	b.n	800cd06 <_dtoa_r+0x76>
 800cd4a:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 800cd4e:	aa12      	add	r2, sp, #72	; 0x48
 800cd50:	a913      	add	r1, sp, #76	; 0x4c
 800cd52:	4620      	mov	r0, r4
 800cd54:	f001 ff06 	bl	800eb64 <__d2b>
 800cd58:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cd5c:	4683      	mov	fp, r0
 800cd5e:	2d00      	cmp	r5, #0
 800cd60:	d07c      	beq.n	800ce5c <_dtoa_r+0x1cc>
 800cd62:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd64:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800cd68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cd6c:	e9dd 670a 	ldrd	r6, r7, [sp, #40]	; 0x28
 800cd70:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cd74:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cd78:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cd7c:	4b7c      	ldr	r3, [pc, #496]	; (800cf70 <_dtoa_r+0x2e0>)
 800cd7e:	2200      	movs	r2, #0
 800cd80:	4630      	mov	r0, r6
 800cd82:	4639      	mov	r1, r7
 800cd84:	f7f3 fa80 	bl	8000288 <__aeabi_dsub>
 800cd88:	a36f      	add	r3, pc, #444	; (adr r3, 800cf48 <_dtoa_r+0x2b8>)
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	f7f3 fc33 	bl	80005f8 <__aeabi_dmul>
 800cd92:	a36f      	add	r3, pc, #444	; (adr r3, 800cf50 <_dtoa_r+0x2c0>)
 800cd94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd98:	f7f3 fa78 	bl	800028c <__adddf3>
 800cd9c:	4606      	mov	r6, r0
 800cd9e:	4628      	mov	r0, r5
 800cda0:	460f      	mov	r7, r1
 800cda2:	f7f3 fbbf 	bl	8000524 <__aeabi_i2d>
 800cda6:	a36c      	add	r3, pc, #432	; (adr r3, 800cf58 <_dtoa_r+0x2c8>)
 800cda8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdac:	f7f3 fc24 	bl	80005f8 <__aeabi_dmul>
 800cdb0:	4602      	mov	r2, r0
 800cdb2:	460b      	mov	r3, r1
 800cdb4:	4630      	mov	r0, r6
 800cdb6:	4639      	mov	r1, r7
 800cdb8:	f7f3 fa68 	bl	800028c <__adddf3>
 800cdbc:	4606      	mov	r6, r0
 800cdbe:	460f      	mov	r7, r1
 800cdc0:	f7f3 feca 	bl	8000b58 <__aeabi_d2iz>
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	4682      	mov	sl, r0
 800cdc8:	2300      	movs	r3, #0
 800cdca:	4630      	mov	r0, r6
 800cdcc:	4639      	mov	r1, r7
 800cdce:	f7f3 fe85 	bl	8000adc <__aeabi_dcmplt>
 800cdd2:	b148      	cbz	r0, 800cde8 <_dtoa_r+0x158>
 800cdd4:	4650      	mov	r0, sl
 800cdd6:	f7f3 fba5 	bl	8000524 <__aeabi_i2d>
 800cdda:	4632      	mov	r2, r6
 800cddc:	463b      	mov	r3, r7
 800cdde:	f7f3 fe73 	bl	8000ac8 <__aeabi_dcmpeq>
 800cde2:	b908      	cbnz	r0, 800cde8 <_dtoa_r+0x158>
 800cde4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800cde8:	f1ba 0f16 	cmp.w	sl, #22
 800cdec:	d854      	bhi.n	800ce98 <_dtoa_r+0x208>
 800cdee:	4b61      	ldr	r3, [pc, #388]	; (800cf74 <_dtoa_r+0x2e4>)
 800cdf0:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800cdf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cdf8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cdfc:	f7f3 fe6e 	bl	8000adc <__aeabi_dcmplt>
 800ce00:	2800      	cmp	r0, #0
 800ce02:	d04b      	beq.n	800ce9c <_dtoa_r+0x20c>
 800ce04:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ce08:	2300      	movs	r3, #0
 800ce0a:	930e      	str	r3, [sp, #56]	; 0x38
 800ce0c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce0e:	1b5d      	subs	r5, r3, r5
 800ce10:	1e6b      	subs	r3, r5, #1
 800ce12:	9304      	str	r3, [sp, #16]
 800ce14:	bf43      	ittte	mi
 800ce16:	2300      	movmi	r3, #0
 800ce18:	f1c5 0801 	rsbmi	r8, r5, #1
 800ce1c:	9304      	strmi	r3, [sp, #16]
 800ce1e:	f04f 0800 	movpl.w	r8, #0
 800ce22:	f1ba 0f00 	cmp.w	sl, #0
 800ce26:	db3b      	blt.n	800cea0 <_dtoa_r+0x210>
 800ce28:	9b04      	ldr	r3, [sp, #16]
 800ce2a:	f8cd a034 	str.w	sl, [sp, #52]	; 0x34
 800ce2e:	4453      	add	r3, sl
 800ce30:	9304      	str	r3, [sp, #16]
 800ce32:	2300      	movs	r3, #0
 800ce34:	9306      	str	r3, [sp, #24]
 800ce36:	9b05      	ldr	r3, [sp, #20]
 800ce38:	2b09      	cmp	r3, #9
 800ce3a:	d86a      	bhi.n	800cf12 <_dtoa_r+0x282>
 800ce3c:	2b05      	cmp	r3, #5
 800ce3e:	bfc4      	itt	gt
 800ce40:	3b04      	subgt	r3, #4
 800ce42:	9305      	strgt	r3, [sp, #20]
 800ce44:	9b05      	ldr	r3, [sp, #20]
 800ce46:	f1a3 0302 	sub.w	r3, r3, #2
 800ce4a:	bfcc      	ite	gt
 800ce4c:	2500      	movgt	r5, #0
 800ce4e:	2501      	movle	r5, #1
 800ce50:	2b03      	cmp	r3, #3
 800ce52:	d86a      	bhi.n	800cf2a <_dtoa_r+0x29a>
 800ce54:	e8df f003 	tbb	[pc, r3]
 800ce58:	5b4d4f2c 	.word	0x5b4d4f2c
 800ce5c:	e9dd 5312 	ldrd	r5, r3, [sp, #72]	; 0x48
 800ce60:	441d      	add	r5, r3
 800ce62:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800ce66:	2b20      	cmp	r3, #32
 800ce68:	bfc1      	itttt	gt
 800ce6a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800ce6e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800ce72:	fa09 f303 	lslgt.w	r3, r9, r3
 800ce76:	fa26 f000 	lsrgt.w	r0, r6, r0
 800ce7a:	bfda      	itte	le
 800ce7c:	f1c3 0320 	rsble	r3, r3, #32
 800ce80:	fa06 f003 	lslle.w	r0, r6, r3
 800ce84:	4318      	orrgt	r0, r3
 800ce86:	f7f3 fb3d 	bl	8000504 <__aeabi_ui2d>
 800ce8a:	2301      	movs	r3, #1
 800ce8c:	4606      	mov	r6, r0
 800ce8e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800ce92:	3d01      	subs	r5, #1
 800ce94:	9310      	str	r3, [sp, #64]	; 0x40
 800ce96:	e771      	b.n	800cd7c <_dtoa_r+0xec>
 800ce98:	2301      	movs	r3, #1
 800ce9a:	e7b6      	b.n	800ce0a <_dtoa_r+0x17a>
 800ce9c:	900e      	str	r0, [sp, #56]	; 0x38
 800ce9e:	e7b5      	b.n	800ce0c <_dtoa_r+0x17c>
 800cea0:	f1ca 0300 	rsb	r3, sl, #0
 800cea4:	9306      	str	r3, [sp, #24]
 800cea6:	2300      	movs	r3, #0
 800cea8:	eba8 080a 	sub.w	r8, r8, sl
 800ceac:	930d      	str	r3, [sp, #52]	; 0x34
 800ceae:	e7c2      	b.n	800ce36 <_dtoa_r+0x1a6>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	9308      	str	r3, [sp, #32]
 800ceb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	dc3a      	bgt.n	800cf30 <_dtoa_r+0x2a0>
 800ceba:	f04f 0901 	mov.w	r9, #1
 800cebe:	f8cd 9004 	str.w	r9, [sp, #4]
 800cec2:	464b      	mov	r3, r9
 800cec4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800cec8:	2200      	movs	r2, #0
 800ceca:	6462      	str	r2, [r4, #68]	; 0x44
 800cecc:	2204      	movs	r2, #4
 800cece:	f102 0014 	add.w	r0, r2, #20
 800ced2:	4298      	cmp	r0, r3
 800ced4:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800ced6:	d931      	bls.n	800cf3c <_dtoa_r+0x2ac>
 800ced8:	4620      	mov	r0, r4
 800ceda:	f001 faa9 	bl	800e430 <_Balloc>
 800cede:	9000      	str	r0, [sp, #0]
 800cee0:	2800      	cmp	r0, #0
 800cee2:	d14d      	bne.n	800cf80 <_dtoa_r+0x2f0>
 800cee4:	4b24      	ldr	r3, [pc, #144]	; (800cf78 <_dtoa_r+0x2e8>)
 800cee6:	4602      	mov	r2, r0
 800cee8:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800ceec:	4823      	ldr	r0, [pc, #140]	; (800cf7c <_dtoa_r+0x2ec>)
 800ceee:	f001 ffef 	bl	800eed0 <__assert_func>
 800cef2:	2301      	movs	r3, #1
 800cef4:	e7dd      	b.n	800ceb2 <_dtoa_r+0x222>
 800cef6:	2300      	movs	r3, #0
 800cef8:	9308      	str	r3, [sp, #32]
 800cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cefc:	eb0a 0903 	add.w	r9, sl, r3
 800cf00:	f109 0301 	add.w	r3, r9, #1
 800cf04:	2b01      	cmp	r3, #1
 800cf06:	9301      	str	r3, [sp, #4]
 800cf08:	bfb8      	it	lt
 800cf0a:	2301      	movlt	r3, #1
 800cf0c:	e7dc      	b.n	800cec8 <_dtoa_r+0x238>
 800cf0e:	2301      	movs	r3, #1
 800cf10:	e7f2      	b.n	800cef8 <_dtoa_r+0x268>
 800cf12:	2501      	movs	r5, #1
 800cf14:	2300      	movs	r3, #0
 800cf16:	9305      	str	r3, [sp, #20]
 800cf18:	9508      	str	r5, [sp, #32]
 800cf1a:	f04f 39ff 	mov.w	r9, #4294967295
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf24:	2312      	movs	r3, #18
 800cf26:	9209      	str	r2, [sp, #36]	; 0x24
 800cf28:	e7ce      	b.n	800cec8 <_dtoa_r+0x238>
 800cf2a:	2301      	movs	r3, #1
 800cf2c:	9308      	str	r3, [sp, #32]
 800cf2e:	e7f4      	b.n	800cf1a <_dtoa_r+0x28a>
 800cf30:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 800cf34:	f8cd 9004 	str.w	r9, [sp, #4]
 800cf38:	464b      	mov	r3, r9
 800cf3a:	e7c5      	b.n	800cec8 <_dtoa_r+0x238>
 800cf3c:	3101      	adds	r1, #1
 800cf3e:	6461      	str	r1, [r4, #68]	; 0x44
 800cf40:	0052      	lsls	r2, r2, #1
 800cf42:	e7c4      	b.n	800cece <_dtoa_r+0x23e>
 800cf44:	f3af 8000 	nop.w
 800cf48:	636f4361 	.word	0x636f4361
 800cf4c:	3fd287a7 	.word	0x3fd287a7
 800cf50:	8b60c8b3 	.word	0x8b60c8b3
 800cf54:	3fc68a28 	.word	0x3fc68a28
 800cf58:	509f79fb 	.word	0x509f79fb
 800cf5c:	3fd34413 	.word	0x3fd34413
 800cf60:	7ff00000 	.word	0x7ff00000
 800cf64:	0801089c 	.word	0x0801089c
 800cf68:	080108a0 	.word	0x080108a0
 800cf6c:	0801087b 	.word	0x0801087b
 800cf70:	3ff80000 	.word	0x3ff80000
 800cf74:	08010a18 	.word	0x08010a18
 800cf78:	080108a9 	.word	0x080108a9
 800cf7c:	080108ba 	.word	0x080108ba
 800cf80:	9b00      	ldr	r3, [sp, #0]
 800cf82:	6423      	str	r3, [r4, #64]	; 0x40
 800cf84:	9b01      	ldr	r3, [sp, #4]
 800cf86:	2b0e      	cmp	r3, #14
 800cf88:	f200 80ad 	bhi.w	800d0e6 <_dtoa_r+0x456>
 800cf8c:	2d00      	cmp	r5, #0
 800cf8e:	f000 80aa 	beq.w	800d0e6 <_dtoa_r+0x456>
 800cf92:	f1ba 0f00 	cmp.w	sl, #0
 800cf96:	dd36      	ble.n	800d006 <_dtoa_r+0x376>
 800cf98:	4ac2      	ldr	r2, [pc, #776]	; (800d2a4 <_dtoa_r+0x614>)
 800cf9a:	f00a 030f 	and.w	r3, sl, #15
 800cf9e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cfa2:	ed93 7b00 	vldr	d7, [r3]
 800cfa6:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800cfaa:	ea4f 172a 	mov.w	r7, sl, asr #4
 800cfae:	eeb0 8a47 	vmov.f32	s16, s14
 800cfb2:	eef0 8a67 	vmov.f32	s17, s15
 800cfb6:	d016      	beq.n	800cfe6 <_dtoa_r+0x356>
 800cfb8:	4bbb      	ldr	r3, [pc, #748]	; (800d2a8 <_dtoa_r+0x618>)
 800cfba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800cfbe:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cfc2:	f7f3 fc43 	bl	800084c <__aeabi_ddiv>
 800cfc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfca:	f007 070f 	and.w	r7, r7, #15
 800cfce:	2503      	movs	r5, #3
 800cfd0:	4eb5      	ldr	r6, [pc, #724]	; (800d2a8 <_dtoa_r+0x618>)
 800cfd2:	b957      	cbnz	r7, 800cfea <_dtoa_r+0x35a>
 800cfd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800cfd8:	ec53 2b18 	vmov	r2, r3, d8
 800cfdc:	f7f3 fc36 	bl	800084c <__aeabi_ddiv>
 800cfe0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cfe4:	e029      	b.n	800d03a <_dtoa_r+0x3aa>
 800cfe6:	2502      	movs	r5, #2
 800cfe8:	e7f2      	b.n	800cfd0 <_dtoa_r+0x340>
 800cfea:	07f9      	lsls	r1, r7, #31
 800cfec:	d508      	bpl.n	800d000 <_dtoa_r+0x370>
 800cfee:	ec51 0b18 	vmov	r0, r1, d8
 800cff2:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cff6:	f7f3 faff 	bl	80005f8 <__aeabi_dmul>
 800cffa:	ec41 0b18 	vmov	d8, r0, r1
 800cffe:	3501      	adds	r5, #1
 800d000:	107f      	asrs	r7, r7, #1
 800d002:	3608      	adds	r6, #8
 800d004:	e7e5      	b.n	800cfd2 <_dtoa_r+0x342>
 800d006:	f000 80a6 	beq.w	800d156 <_dtoa_r+0x4c6>
 800d00a:	f1ca 0600 	rsb	r6, sl, #0
 800d00e:	4ba5      	ldr	r3, [pc, #660]	; (800d2a4 <_dtoa_r+0x614>)
 800d010:	4fa5      	ldr	r7, [pc, #660]	; (800d2a8 <_dtoa_r+0x618>)
 800d012:	f006 020f 	and.w	r2, r6, #15
 800d016:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d01e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800d022:	f7f3 fae9 	bl	80005f8 <__aeabi_dmul>
 800d026:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d02a:	1136      	asrs	r6, r6, #4
 800d02c:	2300      	movs	r3, #0
 800d02e:	2502      	movs	r5, #2
 800d030:	2e00      	cmp	r6, #0
 800d032:	f040 8085 	bne.w	800d140 <_dtoa_r+0x4b0>
 800d036:	2b00      	cmp	r3, #0
 800d038:	d1d2      	bne.n	800cfe0 <_dtoa_r+0x350>
 800d03a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	f000 808c 	beq.w	800d15a <_dtoa_r+0x4ca>
 800d042:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d046:	4b99      	ldr	r3, [pc, #612]	; (800d2ac <_dtoa_r+0x61c>)
 800d048:	2200      	movs	r2, #0
 800d04a:	4630      	mov	r0, r6
 800d04c:	4639      	mov	r1, r7
 800d04e:	f7f3 fd45 	bl	8000adc <__aeabi_dcmplt>
 800d052:	2800      	cmp	r0, #0
 800d054:	f000 8081 	beq.w	800d15a <_dtoa_r+0x4ca>
 800d058:	9b01      	ldr	r3, [sp, #4]
 800d05a:	2b00      	cmp	r3, #0
 800d05c:	d07d      	beq.n	800d15a <_dtoa_r+0x4ca>
 800d05e:	f1b9 0f00 	cmp.w	r9, #0
 800d062:	dd3c      	ble.n	800d0de <_dtoa_r+0x44e>
 800d064:	f10a 33ff 	add.w	r3, sl, #4294967295
 800d068:	9307      	str	r3, [sp, #28]
 800d06a:	2200      	movs	r2, #0
 800d06c:	4b90      	ldr	r3, [pc, #576]	; (800d2b0 <_dtoa_r+0x620>)
 800d06e:	4630      	mov	r0, r6
 800d070:	4639      	mov	r1, r7
 800d072:	f7f3 fac1 	bl	80005f8 <__aeabi_dmul>
 800d076:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d07a:	3501      	adds	r5, #1
 800d07c:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
 800d080:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d084:	4628      	mov	r0, r5
 800d086:	f7f3 fa4d 	bl	8000524 <__aeabi_i2d>
 800d08a:	4632      	mov	r2, r6
 800d08c:	463b      	mov	r3, r7
 800d08e:	f7f3 fab3 	bl	80005f8 <__aeabi_dmul>
 800d092:	4b88      	ldr	r3, [pc, #544]	; (800d2b4 <_dtoa_r+0x624>)
 800d094:	2200      	movs	r2, #0
 800d096:	f7f3 f8f9 	bl	800028c <__adddf3>
 800d09a:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800d09e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800d0a2:	9303      	str	r3, [sp, #12]
 800d0a4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d0a6:	2b00      	cmp	r3, #0
 800d0a8:	d15c      	bne.n	800d164 <_dtoa_r+0x4d4>
 800d0aa:	4b83      	ldr	r3, [pc, #524]	; (800d2b8 <_dtoa_r+0x628>)
 800d0ac:	2200      	movs	r2, #0
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	4639      	mov	r1, r7
 800d0b2:	f7f3 f8e9 	bl	8000288 <__aeabi_dsub>
 800d0b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d0ba:	4606      	mov	r6, r0
 800d0bc:	460f      	mov	r7, r1
 800d0be:	f7f3 fd2b 	bl	8000b18 <__aeabi_dcmpgt>
 800d0c2:	2800      	cmp	r0, #0
 800d0c4:	f040 8295 	bne.w	800d5f2 <_dtoa_r+0x962>
 800d0c8:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800d0cc:	4630      	mov	r0, r6
 800d0ce:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d0d2:	4639      	mov	r1, r7
 800d0d4:	f7f3 fd02 	bl	8000adc <__aeabi_dcmplt>
 800d0d8:	2800      	cmp	r0, #0
 800d0da:	f040 8287 	bne.w	800d5ec <_dtoa_r+0x95c>
 800d0de:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800d0e2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800d0e6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	f2c0 8157 	blt.w	800d39c <_dtoa_r+0x70c>
 800d0ee:	f1ba 0f0e 	cmp.w	sl, #14
 800d0f2:	f300 8153 	bgt.w	800d39c <_dtoa_r+0x70c>
 800d0f6:	4b6b      	ldr	r3, [pc, #428]	; (800d2a4 <_dtoa_r+0x614>)
 800d0f8:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800d0fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800d100:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d102:	2b00      	cmp	r3, #0
 800d104:	f280 80e2 	bge.w	800d2cc <_dtoa_r+0x63c>
 800d108:	9b01      	ldr	r3, [sp, #4]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f300 80de 	bgt.w	800d2cc <_dtoa_r+0x63c>
 800d110:	f040 826c 	bne.w	800d5ec <_dtoa_r+0x95c>
 800d114:	4b68      	ldr	r3, [pc, #416]	; (800d2b8 <_dtoa_r+0x628>)
 800d116:	2200      	movs	r2, #0
 800d118:	4640      	mov	r0, r8
 800d11a:	4649      	mov	r1, r9
 800d11c:	f7f3 fa6c 	bl	80005f8 <__aeabi_dmul>
 800d120:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800d124:	f7f3 fcee 	bl	8000b04 <__aeabi_dcmpge>
 800d128:	9e01      	ldr	r6, [sp, #4]
 800d12a:	4637      	mov	r7, r6
 800d12c:	2800      	cmp	r0, #0
 800d12e:	f040 8242 	bne.w	800d5b6 <_dtoa_r+0x926>
 800d132:	9d00      	ldr	r5, [sp, #0]
 800d134:	2331      	movs	r3, #49	; 0x31
 800d136:	f805 3b01 	strb.w	r3, [r5], #1
 800d13a:	f10a 0a01 	add.w	sl, sl, #1
 800d13e:	e23e      	b.n	800d5be <_dtoa_r+0x92e>
 800d140:	07f2      	lsls	r2, r6, #31
 800d142:	d505      	bpl.n	800d150 <_dtoa_r+0x4c0>
 800d144:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d148:	f7f3 fa56 	bl	80005f8 <__aeabi_dmul>
 800d14c:	3501      	adds	r5, #1
 800d14e:	2301      	movs	r3, #1
 800d150:	1076      	asrs	r6, r6, #1
 800d152:	3708      	adds	r7, #8
 800d154:	e76c      	b.n	800d030 <_dtoa_r+0x3a0>
 800d156:	2502      	movs	r5, #2
 800d158:	e76f      	b.n	800d03a <_dtoa_r+0x3aa>
 800d15a:	9b01      	ldr	r3, [sp, #4]
 800d15c:	f8cd a01c 	str.w	sl, [sp, #28]
 800d160:	930c      	str	r3, [sp, #48]	; 0x30
 800d162:	e78d      	b.n	800d080 <_dtoa_r+0x3f0>
 800d164:	9900      	ldr	r1, [sp, #0]
 800d166:	980c      	ldr	r0, [sp, #48]	; 0x30
 800d168:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d16a:	4b4e      	ldr	r3, [pc, #312]	; (800d2a4 <_dtoa_r+0x614>)
 800d16c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800d170:	4401      	add	r1, r0
 800d172:	9102      	str	r1, [sp, #8]
 800d174:	9908      	ldr	r1, [sp, #32]
 800d176:	eeb0 8a47 	vmov.f32	s16, s14
 800d17a:	eef0 8a67 	vmov.f32	s17, s15
 800d17e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800d182:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800d186:	2900      	cmp	r1, #0
 800d188:	d045      	beq.n	800d216 <_dtoa_r+0x586>
 800d18a:	494c      	ldr	r1, [pc, #304]	; (800d2bc <_dtoa_r+0x62c>)
 800d18c:	2000      	movs	r0, #0
 800d18e:	f7f3 fb5d 	bl	800084c <__aeabi_ddiv>
 800d192:	ec53 2b18 	vmov	r2, r3, d8
 800d196:	f7f3 f877 	bl	8000288 <__aeabi_dsub>
 800d19a:	9d00      	ldr	r5, [sp, #0]
 800d19c:	ec41 0b18 	vmov	d8, r0, r1
 800d1a0:	4639      	mov	r1, r7
 800d1a2:	4630      	mov	r0, r6
 800d1a4:	f7f3 fcd8 	bl	8000b58 <__aeabi_d2iz>
 800d1a8:	900c      	str	r0, [sp, #48]	; 0x30
 800d1aa:	f7f3 f9bb 	bl	8000524 <__aeabi_i2d>
 800d1ae:	4602      	mov	r2, r0
 800d1b0:	460b      	mov	r3, r1
 800d1b2:	4630      	mov	r0, r6
 800d1b4:	4639      	mov	r1, r7
 800d1b6:	f7f3 f867 	bl	8000288 <__aeabi_dsub>
 800d1ba:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d1bc:	3330      	adds	r3, #48	; 0x30
 800d1be:	f805 3b01 	strb.w	r3, [r5], #1
 800d1c2:	ec53 2b18 	vmov	r2, r3, d8
 800d1c6:	4606      	mov	r6, r0
 800d1c8:	460f      	mov	r7, r1
 800d1ca:	f7f3 fc87 	bl	8000adc <__aeabi_dcmplt>
 800d1ce:	2800      	cmp	r0, #0
 800d1d0:	d165      	bne.n	800d29e <_dtoa_r+0x60e>
 800d1d2:	4632      	mov	r2, r6
 800d1d4:	463b      	mov	r3, r7
 800d1d6:	4935      	ldr	r1, [pc, #212]	; (800d2ac <_dtoa_r+0x61c>)
 800d1d8:	2000      	movs	r0, #0
 800d1da:	f7f3 f855 	bl	8000288 <__aeabi_dsub>
 800d1de:	ec53 2b18 	vmov	r2, r3, d8
 800d1e2:	f7f3 fc7b 	bl	8000adc <__aeabi_dcmplt>
 800d1e6:	2800      	cmp	r0, #0
 800d1e8:	f040 80b8 	bne.w	800d35c <_dtoa_r+0x6cc>
 800d1ec:	9b02      	ldr	r3, [sp, #8]
 800d1ee:	429d      	cmp	r5, r3
 800d1f0:	f43f af75 	beq.w	800d0de <_dtoa_r+0x44e>
 800d1f4:	4b2e      	ldr	r3, [pc, #184]	; (800d2b0 <_dtoa_r+0x620>)
 800d1f6:	ec51 0b18 	vmov	r0, r1, d8
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f7f3 f9fc 	bl	80005f8 <__aeabi_dmul>
 800d200:	4b2b      	ldr	r3, [pc, #172]	; (800d2b0 <_dtoa_r+0x620>)
 800d202:	ec41 0b18 	vmov	d8, r0, r1
 800d206:	2200      	movs	r2, #0
 800d208:	4630      	mov	r0, r6
 800d20a:	4639      	mov	r1, r7
 800d20c:	f7f3 f9f4 	bl	80005f8 <__aeabi_dmul>
 800d210:	4606      	mov	r6, r0
 800d212:	460f      	mov	r7, r1
 800d214:	e7c4      	b.n	800d1a0 <_dtoa_r+0x510>
 800d216:	ec51 0b17 	vmov	r0, r1, d7
 800d21a:	f7f3 f9ed 	bl	80005f8 <__aeabi_dmul>
 800d21e:	9b02      	ldr	r3, [sp, #8]
 800d220:	9d00      	ldr	r5, [sp, #0]
 800d222:	930c      	str	r3, [sp, #48]	; 0x30
 800d224:	ec41 0b18 	vmov	d8, r0, r1
 800d228:	4639      	mov	r1, r7
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7f3 fc94 	bl	8000b58 <__aeabi_d2iz>
 800d230:	9011      	str	r0, [sp, #68]	; 0x44
 800d232:	f7f3 f977 	bl	8000524 <__aeabi_i2d>
 800d236:	4602      	mov	r2, r0
 800d238:	460b      	mov	r3, r1
 800d23a:	4630      	mov	r0, r6
 800d23c:	4639      	mov	r1, r7
 800d23e:	f7f3 f823 	bl	8000288 <__aeabi_dsub>
 800d242:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d244:	3330      	adds	r3, #48	; 0x30
 800d246:	f805 3b01 	strb.w	r3, [r5], #1
 800d24a:	9b02      	ldr	r3, [sp, #8]
 800d24c:	429d      	cmp	r5, r3
 800d24e:	4606      	mov	r6, r0
 800d250:	460f      	mov	r7, r1
 800d252:	f04f 0200 	mov.w	r2, #0
 800d256:	d133      	bne.n	800d2c0 <_dtoa_r+0x630>
 800d258:	4b18      	ldr	r3, [pc, #96]	; (800d2bc <_dtoa_r+0x62c>)
 800d25a:	ec51 0b18 	vmov	r0, r1, d8
 800d25e:	f7f3 f815 	bl	800028c <__adddf3>
 800d262:	4602      	mov	r2, r0
 800d264:	460b      	mov	r3, r1
 800d266:	4630      	mov	r0, r6
 800d268:	4639      	mov	r1, r7
 800d26a:	f7f3 fc55 	bl	8000b18 <__aeabi_dcmpgt>
 800d26e:	2800      	cmp	r0, #0
 800d270:	d174      	bne.n	800d35c <_dtoa_r+0x6cc>
 800d272:	ec53 2b18 	vmov	r2, r3, d8
 800d276:	4911      	ldr	r1, [pc, #68]	; (800d2bc <_dtoa_r+0x62c>)
 800d278:	2000      	movs	r0, #0
 800d27a:	f7f3 f805 	bl	8000288 <__aeabi_dsub>
 800d27e:	4602      	mov	r2, r0
 800d280:	460b      	mov	r3, r1
 800d282:	4630      	mov	r0, r6
 800d284:	4639      	mov	r1, r7
 800d286:	f7f3 fc29 	bl	8000adc <__aeabi_dcmplt>
 800d28a:	2800      	cmp	r0, #0
 800d28c:	f43f af27 	beq.w	800d0de <_dtoa_r+0x44e>
 800d290:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d292:	1e6b      	subs	r3, r5, #1
 800d294:	930c      	str	r3, [sp, #48]	; 0x30
 800d296:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d29a:	2b30      	cmp	r3, #48	; 0x30
 800d29c:	d0f8      	beq.n	800d290 <_dtoa_r+0x600>
 800d29e:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d2a2:	e049      	b.n	800d338 <_dtoa_r+0x6a8>
 800d2a4:	08010a18 	.word	0x08010a18
 800d2a8:	080109f0 	.word	0x080109f0
 800d2ac:	3ff00000 	.word	0x3ff00000
 800d2b0:	40240000 	.word	0x40240000
 800d2b4:	401c0000 	.word	0x401c0000
 800d2b8:	40140000 	.word	0x40140000
 800d2bc:	3fe00000 	.word	0x3fe00000
 800d2c0:	4baf      	ldr	r3, [pc, #700]	; (800d580 <_dtoa_r+0x8f0>)
 800d2c2:	f7f3 f999 	bl	80005f8 <__aeabi_dmul>
 800d2c6:	4606      	mov	r6, r0
 800d2c8:	460f      	mov	r7, r1
 800d2ca:	e7ad      	b.n	800d228 <_dtoa_r+0x598>
 800d2cc:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800d2d0:	9d00      	ldr	r5, [sp, #0]
 800d2d2:	4642      	mov	r2, r8
 800d2d4:	464b      	mov	r3, r9
 800d2d6:	4630      	mov	r0, r6
 800d2d8:	4639      	mov	r1, r7
 800d2da:	f7f3 fab7 	bl	800084c <__aeabi_ddiv>
 800d2de:	f7f3 fc3b 	bl	8000b58 <__aeabi_d2iz>
 800d2e2:	9002      	str	r0, [sp, #8]
 800d2e4:	f7f3 f91e 	bl	8000524 <__aeabi_i2d>
 800d2e8:	4642      	mov	r2, r8
 800d2ea:	464b      	mov	r3, r9
 800d2ec:	f7f3 f984 	bl	80005f8 <__aeabi_dmul>
 800d2f0:	4602      	mov	r2, r0
 800d2f2:	460b      	mov	r3, r1
 800d2f4:	4630      	mov	r0, r6
 800d2f6:	4639      	mov	r1, r7
 800d2f8:	f7f2 ffc6 	bl	8000288 <__aeabi_dsub>
 800d2fc:	9e02      	ldr	r6, [sp, #8]
 800d2fe:	9f01      	ldr	r7, [sp, #4]
 800d300:	3630      	adds	r6, #48	; 0x30
 800d302:	f805 6b01 	strb.w	r6, [r5], #1
 800d306:	9e00      	ldr	r6, [sp, #0]
 800d308:	1bae      	subs	r6, r5, r6
 800d30a:	42b7      	cmp	r7, r6
 800d30c:	4602      	mov	r2, r0
 800d30e:	460b      	mov	r3, r1
 800d310:	d137      	bne.n	800d382 <_dtoa_r+0x6f2>
 800d312:	f7f2 ffbb 	bl	800028c <__adddf3>
 800d316:	4642      	mov	r2, r8
 800d318:	464b      	mov	r3, r9
 800d31a:	4606      	mov	r6, r0
 800d31c:	460f      	mov	r7, r1
 800d31e:	f7f3 fbfb 	bl	8000b18 <__aeabi_dcmpgt>
 800d322:	b9c8      	cbnz	r0, 800d358 <_dtoa_r+0x6c8>
 800d324:	4642      	mov	r2, r8
 800d326:	464b      	mov	r3, r9
 800d328:	4630      	mov	r0, r6
 800d32a:	4639      	mov	r1, r7
 800d32c:	f7f3 fbcc 	bl	8000ac8 <__aeabi_dcmpeq>
 800d330:	b110      	cbz	r0, 800d338 <_dtoa_r+0x6a8>
 800d332:	9b02      	ldr	r3, [sp, #8]
 800d334:	07d9      	lsls	r1, r3, #31
 800d336:	d40f      	bmi.n	800d358 <_dtoa_r+0x6c8>
 800d338:	4620      	mov	r0, r4
 800d33a:	4659      	mov	r1, fp
 800d33c:	f001 f89d 	bl	800e47a <_Bfree>
 800d340:	2300      	movs	r3, #0
 800d342:	702b      	strb	r3, [r5, #0]
 800d344:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d346:	f10a 0001 	add.w	r0, sl, #1
 800d34a:	6018      	str	r0, [r3, #0]
 800d34c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d34e:	2b00      	cmp	r3, #0
 800d350:	f43f acd9 	beq.w	800cd06 <_dtoa_r+0x76>
 800d354:	601d      	str	r5, [r3, #0]
 800d356:	e4d6      	b.n	800cd06 <_dtoa_r+0x76>
 800d358:	f8cd a01c 	str.w	sl, [sp, #28]
 800d35c:	462b      	mov	r3, r5
 800d35e:	461d      	mov	r5, r3
 800d360:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d364:	2a39      	cmp	r2, #57	; 0x39
 800d366:	d108      	bne.n	800d37a <_dtoa_r+0x6ea>
 800d368:	9a00      	ldr	r2, [sp, #0]
 800d36a:	429a      	cmp	r2, r3
 800d36c:	d1f7      	bne.n	800d35e <_dtoa_r+0x6ce>
 800d36e:	9a07      	ldr	r2, [sp, #28]
 800d370:	9900      	ldr	r1, [sp, #0]
 800d372:	3201      	adds	r2, #1
 800d374:	9207      	str	r2, [sp, #28]
 800d376:	2230      	movs	r2, #48	; 0x30
 800d378:	700a      	strb	r2, [r1, #0]
 800d37a:	781a      	ldrb	r2, [r3, #0]
 800d37c:	3201      	adds	r2, #1
 800d37e:	701a      	strb	r2, [r3, #0]
 800d380:	e78d      	b.n	800d29e <_dtoa_r+0x60e>
 800d382:	4b7f      	ldr	r3, [pc, #508]	; (800d580 <_dtoa_r+0x8f0>)
 800d384:	2200      	movs	r2, #0
 800d386:	f7f3 f937 	bl	80005f8 <__aeabi_dmul>
 800d38a:	2200      	movs	r2, #0
 800d38c:	2300      	movs	r3, #0
 800d38e:	4606      	mov	r6, r0
 800d390:	460f      	mov	r7, r1
 800d392:	f7f3 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 800d396:	2800      	cmp	r0, #0
 800d398:	d09b      	beq.n	800d2d2 <_dtoa_r+0x642>
 800d39a:	e7cd      	b.n	800d338 <_dtoa_r+0x6a8>
 800d39c:	9a08      	ldr	r2, [sp, #32]
 800d39e:	2a00      	cmp	r2, #0
 800d3a0:	f000 80c4 	beq.w	800d52c <_dtoa_r+0x89c>
 800d3a4:	9a05      	ldr	r2, [sp, #20]
 800d3a6:	2a01      	cmp	r2, #1
 800d3a8:	f300 80a8 	bgt.w	800d4fc <_dtoa_r+0x86c>
 800d3ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d3ae:	2a00      	cmp	r2, #0
 800d3b0:	f000 80a0 	beq.w	800d4f4 <_dtoa_r+0x864>
 800d3b4:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d3b8:	9e06      	ldr	r6, [sp, #24]
 800d3ba:	4645      	mov	r5, r8
 800d3bc:	9a04      	ldr	r2, [sp, #16]
 800d3be:	2101      	movs	r1, #1
 800d3c0:	441a      	add	r2, r3
 800d3c2:	4620      	mov	r0, r4
 800d3c4:	4498      	add	r8, r3
 800d3c6:	9204      	str	r2, [sp, #16]
 800d3c8:	f001 f944 	bl	800e654 <__i2b>
 800d3cc:	4607      	mov	r7, r0
 800d3ce:	2d00      	cmp	r5, #0
 800d3d0:	dd0b      	ble.n	800d3ea <_dtoa_r+0x75a>
 800d3d2:	9b04      	ldr	r3, [sp, #16]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	dd08      	ble.n	800d3ea <_dtoa_r+0x75a>
 800d3d8:	42ab      	cmp	r3, r5
 800d3da:	9a04      	ldr	r2, [sp, #16]
 800d3dc:	bfa8      	it	ge
 800d3de:	462b      	movge	r3, r5
 800d3e0:	eba8 0803 	sub.w	r8, r8, r3
 800d3e4:	1aed      	subs	r5, r5, r3
 800d3e6:	1ad3      	subs	r3, r2, r3
 800d3e8:	9304      	str	r3, [sp, #16]
 800d3ea:	9b06      	ldr	r3, [sp, #24]
 800d3ec:	b1fb      	cbz	r3, 800d42e <_dtoa_r+0x79e>
 800d3ee:	9b08      	ldr	r3, [sp, #32]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	f000 809f 	beq.w	800d534 <_dtoa_r+0x8a4>
 800d3f6:	2e00      	cmp	r6, #0
 800d3f8:	dd11      	ble.n	800d41e <_dtoa_r+0x78e>
 800d3fa:	4639      	mov	r1, r7
 800d3fc:	4632      	mov	r2, r6
 800d3fe:	4620      	mov	r0, r4
 800d400:	f001 f9e4 	bl	800e7cc <__pow5mult>
 800d404:	465a      	mov	r2, fp
 800d406:	4601      	mov	r1, r0
 800d408:	4607      	mov	r7, r0
 800d40a:	4620      	mov	r0, r4
 800d40c:	f001 f938 	bl	800e680 <__multiply>
 800d410:	4659      	mov	r1, fp
 800d412:	9007      	str	r0, [sp, #28]
 800d414:	4620      	mov	r0, r4
 800d416:	f001 f830 	bl	800e47a <_Bfree>
 800d41a:	9b07      	ldr	r3, [sp, #28]
 800d41c:	469b      	mov	fp, r3
 800d41e:	9b06      	ldr	r3, [sp, #24]
 800d420:	1b9a      	subs	r2, r3, r6
 800d422:	d004      	beq.n	800d42e <_dtoa_r+0x79e>
 800d424:	4659      	mov	r1, fp
 800d426:	4620      	mov	r0, r4
 800d428:	f001 f9d0 	bl	800e7cc <__pow5mult>
 800d42c:	4683      	mov	fp, r0
 800d42e:	2101      	movs	r1, #1
 800d430:	4620      	mov	r0, r4
 800d432:	f001 f90f 	bl	800e654 <__i2b>
 800d436:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d438:	2b00      	cmp	r3, #0
 800d43a:	4606      	mov	r6, r0
 800d43c:	dd7c      	ble.n	800d538 <_dtoa_r+0x8a8>
 800d43e:	461a      	mov	r2, r3
 800d440:	4601      	mov	r1, r0
 800d442:	4620      	mov	r0, r4
 800d444:	f001 f9c2 	bl	800e7cc <__pow5mult>
 800d448:	9b05      	ldr	r3, [sp, #20]
 800d44a:	2b01      	cmp	r3, #1
 800d44c:	4606      	mov	r6, r0
 800d44e:	dd76      	ble.n	800d53e <_dtoa_r+0x8ae>
 800d450:	2300      	movs	r3, #0
 800d452:	9306      	str	r3, [sp, #24]
 800d454:	6933      	ldr	r3, [r6, #16]
 800d456:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d45a:	6918      	ldr	r0, [r3, #16]
 800d45c:	f001 f8aa 	bl	800e5b4 <__hi0bits>
 800d460:	f1c0 0020 	rsb	r0, r0, #32
 800d464:	9b04      	ldr	r3, [sp, #16]
 800d466:	4418      	add	r0, r3
 800d468:	f010 001f 	ands.w	r0, r0, #31
 800d46c:	f000 8086 	beq.w	800d57c <_dtoa_r+0x8ec>
 800d470:	f1c0 0320 	rsb	r3, r0, #32
 800d474:	2b04      	cmp	r3, #4
 800d476:	dd7f      	ble.n	800d578 <_dtoa_r+0x8e8>
 800d478:	f1c0 001c 	rsb	r0, r0, #28
 800d47c:	9b04      	ldr	r3, [sp, #16]
 800d47e:	4403      	add	r3, r0
 800d480:	4480      	add	r8, r0
 800d482:	4405      	add	r5, r0
 800d484:	9304      	str	r3, [sp, #16]
 800d486:	f1b8 0f00 	cmp.w	r8, #0
 800d48a:	dd05      	ble.n	800d498 <_dtoa_r+0x808>
 800d48c:	4659      	mov	r1, fp
 800d48e:	4642      	mov	r2, r8
 800d490:	4620      	mov	r0, r4
 800d492:	f001 f9db 	bl	800e84c <__lshift>
 800d496:	4683      	mov	fp, r0
 800d498:	9b04      	ldr	r3, [sp, #16]
 800d49a:	2b00      	cmp	r3, #0
 800d49c:	dd05      	ble.n	800d4aa <_dtoa_r+0x81a>
 800d49e:	4631      	mov	r1, r6
 800d4a0:	461a      	mov	r2, r3
 800d4a2:	4620      	mov	r0, r4
 800d4a4:	f001 f9d2 	bl	800e84c <__lshift>
 800d4a8:	4606      	mov	r6, r0
 800d4aa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ac:	2b00      	cmp	r3, #0
 800d4ae:	d069      	beq.n	800d584 <_dtoa_r+0x8f4>
 800d4b0:	4631      	mov	r1, r6
 800d4b2:	4658      	mov	r0, fp
 800d4b4:	f001 fa36 	bl	800e924 <__mcmp>
 800d4b8:	2800      	cmp	r0, #0
 800d4ba:	da63      	bge.n	800d584 <_dtoa_r+0x8f4>
 800d4bc:	2300      	movs	r3, #0
 800d4be:	4659      	mov	r1, fp
 800d4c0:	220a      	movs	r2, #10
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	f000 ffe2 	bl	800e48c <__multadd>
 800d4c8:	9b08      	ldr	r3, [sp, #32]
 800d4ca:	f10a 3aff 	add.w	sl, sl, #4294967295
 800d4ce:	4683      	mov	fp, r0
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	f000 818e 	beq.w	800d7f2 <_dtoa_r+0xb62>
 800d4d6:	4639      	mov	r1, r7
 800d4d8:	2300      	movs	r3, #0
 800d4da:	220a      	movs	r2, #10
 800d4dc:	4620      	mov	r0, r4
 800d4de:	f000 ffd5 	bl	800e48c <__multadd>
 800d4e2:	f1b9 0f00 	cmp.w	r9, #0
 800d4e6:	4607      	mov	r7, r0
 800d4e8:	f300 808e 	bgt.w	800d608 <_dtoa_r+0x978>
 800d4ec:	9b05      	ldr	r3, [sp, #20]
 800d4ee:	2b02      	cmp	r3, #2
 800d4f0:	dc50      	bgt.n	800d594 <_dtoa_r+0x904>
 800d4f2:	e089      	b.n	800d608 <_dtoa_r+0x978>
 800d4f4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d4f6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d4fa:	e75d      	b.n	800d3b8 <_dtoa_r+0x728>
 800d4fc:	9b01      	ldr	r3, [sp, #4]
 800d4fe:	1e5e      	subs	r6, r3, #1
 800d500:	9b06      	ldr	r3, [sp, #24]
 800d502:	42b3      	cmp	r3, r6
 800d504:	bfbf      	itttt	lt
 800d506:	9b06      	ldrlt	r3, [sp, #24]
 800d508:	9606      	strlt	r6, [sp, #24]
 800d50a:	1af2      	sublt	r2, r6, r3
 800d50c:	9b0d      	ldrlt	r3, [sp, #52]	; 0x34
 800d50e:	bfb6      	itet	lt
 800d510:	189b      	addlt	r3, r3, r2
 800d512:	1b9e      	subge	r6, r3, r6
 800d514:	930d      	strlt	r3, [sp, #52]	; 0x34
 800d516:	9b01      	ldr	r3, [sp, #4]
 800d518:	bfb8      	it	lt
 800d51a:	2600      	movlt	r6, #0
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	bfb5      	itete	lt
 800d520:	eba8 0503 	sublt.w	r5, r8, r3
 800d524:	9b01      	ldrge	r3, [sp, #4]
 800d526:	2300      	movlt	r3, #0
 800d528:	4645      	movge	r5, r8
 800d52a:	e747      	b.n	800d3bc <_dtoa_r+0x72c>
 800d52c:	9e06      	ldr	r6, [sp, #24]
 800d52e:	9f08      	ldr	r7, [sp, #32]
 800d530:	4645      	mov	r5, r8
 800d532:	e74c      	b.n	800d3ce <_dtoa_r+0x73e>
 800d534:	9a06      	ldr	r2, [sp, #24]
 800d536:	e775      	b.n	800d424 <_dtoa_r+0x794>
 800d538:	9b05      	ldr	r3, [sp, #20]
 800d53a:	2b01      	cmp	r3, #1
 800d53c:	dc18      	bgt.n	800d570 <_dtoa_r+0x8e0>
 800d53e:	9b02      	ldr	r3, [sp, #8]
 800d540:	b9b3      	cbnz	r3, 800d570 <_dtoa_r+0x8e0>
 800d542:	9b03      	ldr	r3, [sp, #12]
 800d544:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800d548:	b9a3      	cbnz	r3, 800d574 <_dtoa_r+0x8e4>
 800d54a:	9b03      	ldr	r3, [sp, #12]
 800d54c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d550:	0d1b      	lsrs	r3, r3, #20
 800d552:	051b      	lsls	r3, r3, #20
 800d554:	b12b      	cbz	r3, 800d562 <_dtoa_r+0x8d2>
 800d556:	9b04      	ldr	r3, [sp, #16]
 800d558:	3301      	adds	r3, #1
 800d55a:	9304      	str	r3, [sp, #16]
 800d55c:	f108 0801 	add.w	r8, r8, #1
 800d560:	2301      	movs	r3, #1
 800d562:	9306      	str	r3, [sp, #24]
 800d564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d566:	2b00      	cmp	r3, #0
 800d568:	f47f af74 	bne.w	800d454 <_dtoa_r+0x7c4>
 800d56c:	2001      	movs	r0, #1
 800d56e:	e779      	b.n	800d464 <_dtoa_r+0x7d4>
 800d570:	2300      	movs	r3, #0
 800d572:	e7f6      	b.n	800d562 <_dtoa_r+0x8d2>
 800d574:	9b02      	ldr	r3, [sp, #8]
 800d576:	e7f4      	b.n	800d562 <_dtoa_r+0x8d2>
 800d578:	d085      	beq.n	800d486 <_dtoa_r+0x7f6>
 800d57a:	4618      	mov	r0, r3
 800d57c:	301c      	adds	r0, #28
 800d57e:	e77d      	b.n	800d47c <_dtoa_r+0x7ec>
 800d580:	40240000 	.word	0x40240000
 800d584:	9b01      	ldr	r3, [sp, #4]
 800d586:	2b00      	cmp	r3, #0
 800d588:	dc38      	bgt.n	800d5fc <_dtoa_r+0x96c>
 800d58a:	9b05      	ldr	r3, [sp, #20]
 800d58c:	2b02      	cmp	r3, #2
 800d58e:	dd35      	ble.n	800d5fc <_dtoa_r+0x96c>
 800d590:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d594:	f1b9 0f00 	cmp.w	r9, #0
 800d598:	d10d      	bne.n	800d5b6 <_dtoa_r+0x926>
 800d59a:	4631      	mov	r1, r6
 800d59c:	464b      	mov	r3, r9
 800d59e:	2205      	movs	r2, #5
 800d5a0:	4620      	mov	r0, r4
 800d5a2:	f000 ff73 	bl	800e48c <__multadd>
 800d5a6:	4601      	mov	r1, r0
 800d5a8:	4606      	mov	r6, r0
 800d5aa:	4658      	mov	r0, fp
 800d5ac:	f001 f9ba 	bl	800e924 <__mcmp>
 800d5b0:	2800      	cmp	r0, #0
 800d5b2:	f73f adbe 	bgt.w	800d132 <_dtoa_r+0x4a2>
 800d5b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5b8:	9d00      	ldr	r5, [sp, #0]
 800d5ba:	ea6f 0a03 	mvn.w	sl, r3
 800d5be:	f04f 0800 	mov.w	r8, #0
 800d5c2:	4631      	mov	r1, r6
 800d5c4:	4620      	mov	r0, r4
 800d5c6:	f000 ff58 	bl	800e47a <_Bfree>
 800d5ca:	2f00      	cmp	r7, #0
 800d5cc:	f43f aeb4 	beq.w	800d338 <_dtoa_r+0x6a8>
 800d5d0:	f1b8 0f00 	cmp.w	r8, #0
 800d5d4:	d005      	beq.n	800d5e2 <_dtoa_r+0x952>
 800d5d6:	45b8      	cmp	r8, r7
 800d5d8:	d003      	beq.n	800d5e2 <_dtoa_r+0x952>
 800d5da:	4641      	mov	r1, r8
 800d5dc:	4620      	mov	r0, r4
 800d5de:	f000 ff4c 	bl	800e47a <_Bfree>
 800d5e2:	4639      	mov	r1, r7
 800d5e4:	4620      	mov	r0, r4
 800d5e6:	f000 ff48 	bl	800e47a <_Bfree>
 800d5ea:	e6a5      	b.n	800d338 <_dtoa_r+0x6a8>
 800d5ec:	2600      	movs	r6, #0
 800d5ee:	4637      	mov	r7, r6
 800d5f0:	e7e1      	b.n	800d5b6 <_dtoa_r+0x926>
 800d5f2:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 800d5f4:	f8dd a01c 	ldr.w	sl, [sp, #28]
 800d5f8:	4637      	mov	r7, r6
 800d5fa:	e59a      	b.n	800d132 <_dtoa_r+0x4a2>
 800d5fc:	9b08      	ldr	r3, [sp, #32]
 800d5fe:	f8dd 9004 	ldr.w	r9, [sp, #4]
 800d602:	2b00      	cmp	r3, #0
 800d604:	f000 80fc 	beq.w	800d800 <_dtoa_r+0xb70>
 800d608:	2d00      	cmp	r5, #0
 800d60a:	dd05      	ble.n	800d618 <_dtoa_r+0x988>
 800d60c:	4639      	mov	r1, r7
 800d60e:	462a      	mov	r2, r5
 800d610:	4620      	mov	r0, r4
 800d612:	f001 f91b 	bl	800e84c <__lshift>
 800d616:	4607      	mov	r7, r0
 800d618:	9b06      	ldr	r3, [sp, #24]
 800d61a:	2b00      	cmp	r3, #0
 800d61c:	d05b      	beq.n	800d6d6 <_dtoa_r+0xa46>
 800d61e:	6879      	ldr	r1, [r7, #4]
 800d620:	4620      	mov	r0, r4
 800d622:	f000 ff05 	bl	800e430 <_Balloc>
 800d626:	4605      	mov	r5, r0
 800d628:	b920      	cbnz	r0, 800d634 <_dtoa_r+0x9a4>
 800d62a:	4b80      	ldr	r3, [pc, #512]	; (800d82c <_dtoa_r+0xb9c>)
 800d62c:	4602      	mov	r2, r0
 800d62e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d632:	e45b      	b.n	800ceec <_dtoa_r+0x25c>
 800d634:	693a      	ldr	r2, [r7, #16]
 800d636:	3202      	adds	r2, #2
 800d638:	0092      	lsls	r2, r2, #2
 800d63a:	f107 010c 	add.w	r1, r7, #12
 800d63e:	300c      	adds	r0, #12
 800d640:	f7fc fc70 	bl	8009f24 <memcpy>
 800d644:	2201      	movs	r2, #1
 800d646:	4629      	mov	r1, r5
 800d648:	4620      	mov	r0, r4
 800d64a:	f001 f8ff 	bl	800e84c <__lshift>
 800d64e:	9b00      	ldr	r3, [sp, #0]
 800d650:	3301      	adds	r3, #1
 800d652:	9301      	str	r3, [sp, #4]
 800d654:	9b00      	ldr	r3, [sp, #0]
 800d656:	444b      	add	r3, r9
 800d658:	9307      	str	r3, [sp, #28]
 800d65a:	9b02      	ldr	r3, [sp, #8]
 800d65c:	f003 0301 	and.w	r3, r3, #1
 800d660:	46b8      	mov	r8, r7
 800d662:	9306      	str	r3, [sp, #24]
 800d664:	4607      	mov	r7, r0
 800d666:	9b01      	ldr	r3, [sp, #4]
 800d668:	4631      	mov	r1, r6
 800d66a:	3b01      	subs	r3, #1
 800d66c:	4658      	mov	r0, fp
 800d66e:	9302      	str	r3, [sp, #8]
 800d670:	f7ff fa82 	bl	800cb78 <quorem>
 800d674:	4603      	mov	r3, r0
 800d676:	3330      	adds	r3, #48	; 0x30
 800d678:	9004      	str	r0, [sp, #16]
 800d67a:	4641      	mov	r1, r8
 800d67c:	4658      	mov	r0, fp
 800d67e:	9308      	str	r3, [sp, #32]
 800d680:	f001 f950 	bl	800e924 <__mcmp>
 800d684:	463a      	mov	r2, r7
 800d686:	4681      	mov	r9, r0
 800d688:	4631      	mov	r1, r6
 800d68a:	4620      	mov	r0, r4
 800d68c:	f001 f966 	bl	800e95c <__mdiff>
 800d690:	68c2      	ldr	r2, [r0, #12]
 800d692:	9b08      	ldr	r3, [sp, #32]
 800d694:	4605      	mov	r5, r0
 800d696:	bb02      	cbnz	r2, 800d6da <_dtoa_r+0xa4a>
 800d698:	4601      	mov	r1, r0
 800d69a:	4658      	mov	r0, fp
 800d69c:	f001 f942 	bl	800e924 <__mcmp>
 800d6a0:	9b08      	ldr	r3, [sp, #32]
 800d6a2:	4602      	mov	r2, r0
 800d6a4:	4629      	mov	r1, r5
 800d6a6:	4620      	mov	r0, r4
 800d6a8:	e9cd 3208 	strd	r3, r2, [sp, #32]
 800d6ac:	f000 fee5 	bl	800e47a <_Bfree>
 800d6b0:	9b05      	ldr	r3, [sp, #20]
 800d6b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d6b4:	9d01      	ldr	r5, [sp, #4]
 800d6b6:	ea43 0102 	orr.w	r1, r3, r2
 800d6ba:	9b06      	ldr	r3, [sp, #24]
 800d6bc:	430b      	orrs	r3, r1
 800d6be:	9b08      	ldr	r3, [sp, #32]
 800d6c0:	d10d      	bne.n	800d6de <_dtoa_r+0xa4e>
 800d6c2:	2b39      	cmp	r3, #57	; 0x39
 800d6c4:	d029      	beq.n	800d71a <_dtoa_r+0xa8a>
 800d6c6:	f1b9 0f00 	cmp.w	r9, #0
 800d6ca:	dd01      	ble.n	800d6d0 <_dtoa_r+0xa40>
 800d6cc:	9b04      	ldr	r3, [sp, #16]
 800d6ce:	3331      	adds	r3, #49	; 0x31
 800d6d0:	9a02      	ldr	r2, [sp, #8]
 800d6d2:	7013      	strb	r3, [r2, #0]
 800d6d4:	e775      	b.n	800d5c2 <_dtoa_r+0x932>
 800d6d6:	4638      	mov	r0, r7
 800d6d8:	e7b9      	b.n	800d64e <_dtoa_r+0x9be>
 800d6da:	2201      	movs	r2, #1
 800d6dc:	e7e2      	b.n	800d6a4 <_dtoa_r+0xa14>
 800d6de:	f1b9 0f00 	cmp.w	r9, #0
 800d6e2:	db06      	blt.n	800d6f2 <_dtoa_r+0xa62>
 800d6e4:	9905      	ldr	r1, [sp, #20]
 800d6e6:	ea41 0909 	orr.w	r9, r1, r9
 800d6ea:	9906      	ldr	r1, [sp, #24]
 800d6ec:	ea59 0101 	orrs.w	r1, r9, r1
 800d6f0:	d120      	bne.n	800d734 <_dtoa_r+0xaa4>
 800d6f2:	2a00      	cmp	r2, #0
 800d6f4:	ddec      	ble.n	800d6d0 <_dtoa_r+0xa40>
 800d6f6:	4659      	mov	r1, fp
 800d6f8:	2201      	movs	r2, #1
 800d6fa:	4620      	mov	r0, r4
 800d6fc:	9301      	str	r3, [sp, #4]
 800d6fe:	f001 f8a5 	bl	800e84c <__lshift>
 800d702:	4631      	mov	r1, r6
 800d704:	4683      	mov	fp, r0
 800d706:	f001 f90d 	bl	800e924 <__mcmp>
 800d70a:	2800      	cmp	r0, #0
 800d70c:	9b01      	ldr	r3, [sp, #4]
 800d70e:	dc02      	bgt.n	800d716 <_dtoa_r+0xa86>
 800d710:	d1de      	bne.n	800d6d0 <_dtoa_r+0xa40>
 800d712:	07da      	lsls	r2, r3, #31
 800d714:	d5dc      	bpl.n	800d6d0 <_dtoa_r+0xa40>
 800d716:	2b39      	cmp	r3, #57	; 0x39
 800d718:	d1d8      	bne.n	800d6cc <_dtoa_r+0xa3c>
 800d71a:	9a02      	ldr	r2, [sp, #8]
 800d71c:	2339      	movs	r3, #57	; 0x39
 800d71e:	7013      	strb	r3, [r2, #0]
 800d720:	462b      	mov	r3, r5
 800d722:	461d      	mov	r5, r3
 800d724:	3b01      	subs	r3, #1
 800d726:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d72a:	2a39      	cmp	r2, #57	; 0x39
 800d72c:	d050      	beq.n	800d7d0 <_dtoa_r+0xb40>
 800d72e:	3201      	adds	r2, #1
 800d730:	701a      	strb	r2, [r3, #0]
 800d732:	e746      	b.n	800d5c2 <_dtoa_r+0x932>
 800d734:	2a00      	cmp	r2, #0
 800d736:	dd03      	ble.n	800d740 <_dtoa_r+0xab0>
 800d738:	2b39      	cmp	r3, #57	; 0x39
 800d73a:	d0ee      	beq.n	800d71a <_dtoa_r+0xa8a>
 800d73c:	3301      	adds	r3, #1
 800d73e:	e7c7      	b.n	800d6d0 <_dtoa_r+0xa40>
 800d740:	9a01      	ldr	r2, [sp, #4]
 800d742:	9907      	ldr	r1, [sp, #28]
 800d744:	f802 3c01 	strb.w	r3, [r2, #-1]
 800d748:	428a      	cmp	r2, r1
 800d74a:	d02a      	beq.n	800d7a2 <_dtoa_r+0xb12>
 800d74c:	4659      	mov	r1, fp
 800d74e:	2300      	movs	r3, #0
 800d750:	220a      	movs	r2, #10
 800d752:	4620      	mov	r0, r4
 800d754:	f000 fe9a 	bl	800e48c <__multadd>
 800d758:	45b8      	cmp	r8, r7
 800d75a:	4683      	mov	fp, r0
 800d75c:	f04f 0300 	mov.w	r3, #0
 800d760:	f04f 020a 	mov.w	r2, #10
 800d764:	4641      	mov	r1, r8
 800d766:	4620      	mov	r0, r4
 800d768:	d107      	bne.n	800d77a <_dtoa_r+0xaea>
 800d76a:	f000 fe8f 	bl	800e48c <__multadd>
 800d76e:	4680      	mov	r8, r0
 800d770:	4607      	mov	r7, r0
 800d772:	9b01      	ldr	r3, [sp, #4]
 800d774:	3301      	adds	r3, #1
 800d776:	9301      	str	r3, [sp, #4]
 800d778:	e775      	b.n	800d666 <_dtoa_r+0x9d6>
 800d77a:	f000 fe87 	bl	800e48c <__multadd>
 800d77e:	4639      	mov	r1, r7
 800d780:	4680      	mov	r8, r0
 800d782:	2300      	movs	r3, #0
 800d784:	220a      	movs	r2, #10
 800d786:	4620      	mov	r0, r4
 800d788:	f000 fe80 	bl	800e48c <__multadd>
 800d78c:	4607      	mov	r7, r0
 800d78e:	e7f0      	b.n	800d772 <_dtoa_r+0xae2>
 800d790:	f1b9 0f00 	cmp.w	r9, #0
 800d794:	9a00      	ldr	r2, [sp, #0]
 800d796:	bfcc      	ite	gt
 800d798:	464d      	movgt	r5, r9
 800d79a:	2501      	movle	r5, #1
 800d79c:	4415      	add	r5, r2
 800d79e:	f04f 0800 	mov.w	r8, #0
 800d7a2:	4659      	mov	r1, fp
 800d7a4:	2201      	movs	r2, #1
 800d7a6:	4620      	mov	r0, r4
 800d7a8:	9301      	str	r3, [sp, #4]
 800d7aa:	f001 f84f 	bl	800e84c <__lshift>
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	4683      	mov	fp, r0
 800d7b2:	f001 f8b7 	bl	800e924 <__mcmp>
 800d7b6:	2800      	cmp	r0, #0
 800d7b8:	dcb2      	bgt.n	800d720 <_dtoa_r+0xa90>
 800d7ba:	d102      	bne.n	800d7c2 <_dtoa_r+0xb32>
 800d7bc:	9b01      	ldr	r3, [sp, #4]
 800d7be:	07db      	lsls	r3, r3, #31
 800d7c0:	d4ae      	bmi.n	800d720 <_dtoa_r+0xa90>
 800d7c2:	462b      	mov	r3, r5
 800d7c4:	461d      	mov	r5, r3
 800d7c6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d7ca:	2a30      	cmp	r2, #48	; 0x30
 800d7cc:	d0fa      	beq.n	800d7c4 <_dtoa_r+0xb34>
 800d7ce:	e6f8      	b.n	800d5c2 <_dtoa_r+0x932>
 800d7d0:	9a00      	ldr	r2, [sp, #0]
 800d7d2:	429a      	cmp	r2, r3
 800d7d4:	d1a5      	bne.n	800d722 <_dtoa_r+0xa92>
 800d7d6:	f10a 0a01 	add.w	sl, sl, #1
 800d7da:	2331      	movs	r3, #49	; 0x31
 800d7dc:	e779      	b.n	800d6d2 <_dtoa_r+0xa42>
 800d7de:	4b14      	ldr	r3, [pc, #80]	; (800d830 <_dtoa_r+0xba0>)
 800d7e0:	f7ff bab1 	b.w	800cd46 <_dtoa_r+0xb6>
 800d7e4:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	f47f aa93 	bne.w	800cd12 <_dtoa_r+0x82>
 800d7ec:	4b11      	ldr	r3, [pc, #68]	; (800d834 <_dtoa_r+0xba4>)
 800d7ee:	f7ff baaa 	b.w	800cd46 <_dtoa_r+0xb6>
 800d7f2:	f1b9 0f00 	cmp.w	r9, #0
 800d7f6:	dc03      	bgt.n	800d800 <_dtoa_r+0xb70>
 800d7f8:	9b05      	ldr	r3, [sp, #20]
 800d7fa:	2b02      	cmp	r3, #2
 800d7fc:	f73f aeca 	bgt.w	800d594 <_dtoa_r+0x904>
 800d800:	9d00      	ldr	r5, [sp, #0]
 800d802:	4631      	mov	r1, r6
 800d804:	4658      	mov	r0, fp
 800d806:	f7ff f9b7 	bl	800cb78 <quorem>
 800d80a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800d80e:	f805 3b01 	strb.w	r3, [r5], #1
 800d812:	9a00      	ldr	r2, [sp, #0]
 800d814:	1aaa      	subs	r2, r5, r2
 800d816:	4591      	cmp	r9, r2
 800d818:	ddba      	ble.n	800d790 <_dtoa_r+0xb00>
 800d81a:	4659      	mov	r1, fp
 800d81c:	2300      	movs	r3, #0
 800d81e:	220a      	movs	r2, #10
 800d820:	4620      	mov	r0, r4
 800d822:	f000 fe33 	bl	800e48c <__multadd>
 800d826:	4683      	mov	fp, r0
 800d828:	e7eb      	b.n	800d802 <_dtoa_r+0xb72>
 800d82a:	bf00      	nop
 800d82c:	080108a9 	.word	0x080108a9
 800d830:	0801087a 	.word	0x0801087a
 800d834:	080108a0 	.word	0x080108a0

0800d838 <_fclose_r>:
 800d838:	b570      	push	{r4, r5, r6, lr}
 800d83a:	4606      	mov	r6, r0
 800d83c:	460c      	mov	r4, r1
 800d83e:	b911      	cbnz	r1, 800d846 <_fclose_r+0xe>
 800d840:	2500      	movs	r5, #0
 800d842:	4628      	mov	r0, r5
 800d844:	bd70      	pop	{r4, r5, r6, pc}
 800d846:	b118      	cbz	r0, 800d850 <_fclose_r+0x18>
 800d848:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800d84a:	b90b      	cbnz	r3, 800d850 <_fclose_r+0x18>
 800d84c:	f7fb ff1a 	bl	8009684 <__sinit>
 800d850:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d852:	07d8      	lsls	r0, r3, #31
 800d854:	d405      	bmi.n	800d862 <_fclose_r+0x2a>
 800d856:	89a3      	ldrh	r3, [r4, #12]
 800d858:	0599      	lsls	r1, r3, #22
 800d85a:	d402      	bmi.n	800d862 <_fclose_r+0x2a>
 800d85c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d85e:	f7fc f8cf 	bl	8009a00 <__retarget_lock_acquire_recursive>
 800d862:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d866:	b93b      	cbnz	r3, 800d878 <_fclose_r+0x40>
 800d868:	6e65      	ldr	r5, [r4, #100]	; 0x64
 800d86a:	f015 0501 	ands.w	r5, r5, #1
 800d86e:	d1e7      	bne.n	800d840 <_fclose_r+0x8>
 800d870:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d872:	f7fc f8c6 	bl	8009a02 <__retarget_lock_release_recursive>
 800d876:	e7e4      	b.n	800d842 <_fclose_r+0xa>
 800d878:	4621      	mov	r1, r4
 800d87a:	4630      	mov	r0, r6
 800d87c:	f000 f834 	bl	800d8e8 <__sflush_r>
 800d880:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800d882:	4605      	mov	r5, r0
 800d884:	b133      	cbz	r3, 800d894 <_fclose_r+0x5c>
 800d886:	69e1      	ldr	r1, [r4, #28]
 800d888:	4630      	mov	r0, r6
 800d88a:	4798      	blx	r3
 800d88c:	2800      	cmp	r0, #0
 800d88e:	bfb8      	it	lt
 800d890:	f04f 35ff 	movlt.w	r5, #4294967295
 800d894:	89a3      	ldrh	r3, [r4, #12]
 800d896:	061a      	lsls	r2, r3, #24
 800d898:	d503      	bpl.n	800d8a2 <_fclose_r+0x6a>
 800d89a:	6921      	ldr	r1, [r4, #16]
 800d89c:	4630      	mov	r0, r6
 800d89e:	f000 f92b 	bl	800daf8 <_free_r>
 800d8a2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d8a4:	b141      	cbz	r1, 800d8b8 <_fclose_r+0x80>
 800d8a6:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d8aa:	4299      	cmp	r1, r3
 800d8ac:	d002      	beq.n	800d8b4 <_fclose_r+0x7c>
 800d8ae:	4630      	mov	r0, r6
 800d8b0:	f000 f922 	bl	800daf8 <_free_r>
 800d8b4:	2300      	movs	r3, #0
 800d8b6:	6323      	str	r3, [r4, #48]	; 0x30
 800d8b8:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800d8ba:	b121      	cbz	r1, 800d8c6 <_fclose_r+0x8e>
 800d8bc:	4630      	mov	r0, r6
 800d8be:	f000 f91b 	bl	800daf8 <_free_r>
 800d8c2:	2300      	movs	r3, #0
 800d8c4:	6463      	str	r3, [r4, #68]	; 0x44
 800d8c6:	f7fb fec5 	bl	8009654 <__sfp_lock_acquire>
 800d8ca:	2300      	movs	r3, #0
 800d8cc:	81a3      	strh	r3, [r4, #12]
 800d8ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d8d0:	07db      	lsls	r3, r3, #31
 800d8d2:	d402      	bmi.n	800d8da <_fclose_r+0xa2>
 800d8d4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8d6:	f7fc f894 	bl	8009a02 <__retarget_lock_release_recursive>
 800d8da:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d8dc:	f7fc f88f 	bl	80099fe <__retarget_lock_close_recursive>
 800d8e0:	f7fb febe 	bl	8009660 <__sfp_lock_release>
 800d8e4:	e7ad      	b.n	800d842 <_fclose_r+0xa>
	...

0800d8e8 <__sflush_r>:
 800d8e8:	898b      	ldrh	r3, [r1, #12]
 800d8ea:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d8ee:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f2:	4605      	mov	r5, r0
 800d8f4:	0718      	lsls	r0, r3, #28
 800d8f6:	460c      	mov	r4, r1
 800d8f8:	d45f      	bmi.n	800d9ba <__sflush_r+0xd2>
 800d8fa:	684b      	ldr	r3, [r1, #4]
 800d8fc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d900:	2b00      	cmp	r3, #0
 800d902:	818a      	strh	r2, [r1, #12]
 800d904:	dc05      	bgt.n	800d912 <__sflush_r+0x2a>
 800d906:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
 800d908:	2b00      	cmp	r3, #0
 800d90a:	dc02      	bgt.n	800d912 <__sflush_r+0x2a>
 800d90c:	2000      	movs	r0, #0
 800d90e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d912:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d914:	2e00      	cmp	r6, #0
 800d916:	d0f9      	beq.n	800d90c <__sflush_r+0x24>
 800d918:	2300      	movs	r3, #0
 800d91a:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d91e:	682f      	ldr	r7, [r5, #0]
 800d920:	602b      	str	r3, [r5, #0]
 800d922:	d036      	beq.n	800d992 <__sflush_r+0xaa>
 800d924:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800d926:	89a3      	ldrh	r3, [r4, #12]
 800d928:	075a      	lsls	r2, r3, #29
 800d92a:	d505      	bpl.n	800d938 <__sflush_r+0x50>
 800d92c:	6863      	ldr	r3, [r4, #4]
 800d92e:	1ac0      	subs	r0, r0, r3
 800d930:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800d932:	b10b      	cbz	r3, 800d938 <__sflush_r+0x50>
 800d934:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d936:	1ac0      	subs	r0, r0, r3
 800d938:	2300      	movs	r3, #0
 800d93a:	4602      	mov	r2, r0
 800d93c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d93e:	69e1      	ldr	r1, [r4, #28]
 800d940:	4628      	mov	r0, r5
 800d942:	47b0      	blx	r6
 800d944:	1c43      	adds	r3, r0, #1
 800d946:	89a3      	ldrh	r3, [r4, #12]
 800d948:	d106      	bne.n	800d958 <__sflush_r+0x70>
 800d94a:	6829      	ldr	r1, [r5, #0]
 800d94c:	291d      	cmp	r1, #29
 800d94e:	d830      	bhi.n	800d9b2 <__sflush_r+0xca>
 800d950:	4a2b      	ldr	r2, [pc, #172]	; (800da00 <__sflush_r+0x118>)
 800d952:	40ca      	lsrs	r2, r1
 800d954:	07d6      	lsls	r6, r2, #31
 800d956:	d52c      	bpl.n	800d9b2 <__sflush_r+0xca>
 800d958:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d95c:	b21b      	sxth	r3, r3
 800d95e:	2200      	movs	r2, #0
 800d960:	6062      	str	r2, [r4, #4]
 800d962:	04d9      	lsls	r1, r3, #19
 800d964:	6922      	ldr	r2, [r4, #16]
 800d966:	81a3      	strh	r3, [r4, #12]
 800d968:	6022      	str	r2, [r4, #0]
 800d96a:	d504      	bpl.n	800d976 <__sflush_r+0x8e>
 800d96c:	1c42      	adds	r2, r0, #1
 800d96e:	d101      	bne.n	800d974 <__sflush_r+0x8c>
 800d970:	682b      	ldr	r3, [r5, #0]
 800d972:	b903      	cbnz	r3, 800d976 <__sflush_r+0x8e>
 800d974:	6520      	str	r0, [r4, #80]	; 0x50
 800d976:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800d978:	602f      	str	r7, [r5, #0]
 800d97a:	2900      	cmp	r1, #0
 800d97c:	d0c6      	beq.n	800d90c <__sflush_r+0x24>
 800d97e:	f104 0340 	add.w	r3, r4, #64	; 0x40
 800d982:	4299      	cmp	r1, r3
 800d984:	d002      	beq.n	800d98c <__sflush_r+0xa4>
 800d986:	4628      	mov	r0, r5
 800d988:	f000 f8b6 	bl	800daf8 <_free_r>
 800d98c:	2000      	movs	r0, #0
 800d98e:	6320      	str	r0, [r4, #48]	; 0x30
 800d990:	e7bd      	b.n	800d90e <__sflush_r+0x26>
 800d992:	69e1      	ldr	r1, [r4, #28]
 800d994:	2301      	movs	r3, #1
 800d996:	4628      	mov	r0, r5
 800d998:	47b0      	blx	r6
 800d99a:	1c41      	adds	r1, r0, #1
 800d99c:	d1c3      	bne.n	800d926 <__sflush_r+0x3e>
 800d99e:	682b      	ldr	r3, [r5, #0]
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d0c0      	beq.n	800d926 <__sflush_r+0x3e>
 800d9a4:	2b1d      	cmp	r3, #29
 800d9a6:	d001      	beq.n	800d9ac <__sflush_r+0xc4>
 800d9a8:	2b16      	cmp	r3, #22
 800d9aa:	d101      	bne.n	800d9b0 <__sflush_r+0xc8>
 800d9ac:	602f      	str	r7, [r5, #0]
 800d9ae:	e7ad      	b.n	800d90c <__sflush_r+0x24>
 800d9b0:	89a3      	ldrh	r3, [r4, #12]
 800d9b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9b6:	81a3      	strh	r3, [r4, #12]
 800d9b8:	e7a9      	b.n	800d90e <__sflush_r+0x26>
 800d9ba:	690f      	ldr	r7, [r1, #16]
 800d9bc:	2f00      	cmp	r7, #0
 800d9be:	d0a5      	beq.n	800d90c <__sflush_r+0x24>
 800d9c0:	079b      	lsls	r3, r3, #30
 800d9c2:	680e      	ldr	r6, [r1, #0]
 800d9c4:	bf08      	it	eq
 800d9c6:	694b      	ldreq	r3, [r1, #20]
 800d9c8:	600f      	str	r7, [r1, #0]
 800d9ca:	bf18      	it	ne
 800d9cc:	2300      	movne	r3, #0
 800d9ce:	eba6 0807 	sub.w	r8, r6, r7
 800d9d2:	608b      	str	r3, [r1, #8]
 800d9d4:	f1b8 0f00 	cmp.w	r8, #0
 800d9d8:	dd98      	ble.n	800d90c <__sflush_r+0x24>
 800d9da:	69e1      	ldr	r1, [r4, #28]
 800d9dc:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d9de:	4643      	mov	r3, r8
 800d9e0:	463a      	mov	r2, r7
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	47b0      	blx	r6
 800d9e6:	2800      	cmp	r0, #0
 800d9e8:	dc06      	bgt.n	800d9f8 <__sflush_r+0x110>
 800d9ea:	89a3      	ldrh	r3, [r4, #12]
 800d9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d9f0:	81a3      	strh	r3, [r4, #12]
 800d9f2:	f04f 30ff 	mov.w	r0, #4294967295
 800d9f6:	e78a      	b.n	800d90e <__sflush_r+0x26>
 800d9f8:	4407      	add	r7, r0
 800d9fa:	eba8 0800 	sub.w	r8, r8, r0
 800d9fe:	e7e9      	b.n	800d9d4 <__sflush_r+0xec>
 800da00:	20400001 	.word	0x20400001

0800da04 <_fflush_r>:
 800da04:	b538      	push	{r3, r4, r5, lr}
 800da06:	460c      	mov	r4, r1
 800da08:	4605      	mov	r5, r0
 800da0a:	b118      	cbz	r0, 800da14 <_fflush_r+0x10>
 800da0c:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800da0e:	b90b      	cbnz	r3, 800da14 <_fflush_r+0x10>
 800da10:	f7fb fe38 	bl	8009684 <__sinit>
 800da14:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da18:	b1bb      	cbz	r3, 800da4a <_fflush_r+0x46>
 800da1a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800da1c:	07d0      	lsls	r0, r2, #31
 800da1e:	d404      	bmi.n	800da2a <_fflush_r+0x26>
 800da20:	0599      	lsls	r1, r3, #22
 800da22:	d402      	bmi.n	800da2a <_fflush_r+0x26>
 800da24:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da26:	f7fb ffeb 	bl	8009a00 <__retarget_lock_acquire_recursive>
 800da2a:	4628      	mov	r0, r5
 800da2c:	4621      	mov	r1, r4
 800da2e:	f7ff ff5b 	bl	800d8e8 <__sflush_r>
 800da32:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800da34:	07da      	lsls	r2, r3, #31
 800da36:	4605      	mov	r5, r0
 800da38:	d405      	bmi.n	800da46 <_fflush_r+0x42>
 800da3a:	89a3      	ldrh	r3, [r4, #12]
 800da3c:	059b      	lsls	r3, r3, #22
 800da3e:	d402      	bmi.n	800da46 <_fflush_r+0x42>
 800da40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800da42:	f7fb ffde 	bl	8009a02 <__retarget_lock_release_recursive>
 800da46:	4628      	mov	r0, r5
 800da48:	bd38      	pop	{r3, r4, r5, pc}
 800da4a:	461d      	mov	r5, r3
 800da4c:	e7fb      	b.n	800da46 <_fflush_r+0x42>
	...

0800da50 <_malloc_trim_r>:
 800da50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da54:	4606      	mov	r6, r0
 800da56:	2008      	movs	r0, #8
 800da58:	460c      	mov	r4, r1
 800da5a:	f7fe ffa1 	bl	800c9a0 <sysconf>
 800da5e:	4f23      	ldr	r7, [pc, #140]	; (800daec <_malloc_trim_r+0x9c>)
 800da60:	4680      	mov	r8, r0
 800da62:	4630      	mov	r0, r6
 800da64:	f7fc fa86 	bl	8009f74 <__malloc_lock>
 800da68:	68bb      	ldr	r3, [r7, #8]
 800da6a:	685d      	ldr	r5, [r3, #4]
 800da6c:	f025 0503 	bic.w	r5, r5, #3
 800da70:	1b2c      	subs	r4, r5, r4
 800da72:	3c11      	subs	r4, #17
 800da74:	4444      	add	r4, r8
 800da76:	fbb4 f4f8 	udiv	r4, r4, r8
 800da7a:	3c01      	subs	r4, #1
 800da7c:	fb08 f404 	mul.w	r4, r8, r4
 800da80:	45a0      	cmp	r8, r4
 800da82:	dd05      	ble.n	800da90 <_malloc_trim_r+0x40>
 800da84:	4630      	mov	r0, r6
 800da86:	f7fc fa7b 	bl	8009f80 <__malloc_unlock>
 800da8a:	2000      	movs	r0, #0
 800da8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da90:	2100      	movs	r1, #0
 800da92:	4630      	mov	r0, r6
 800da94:	f7fc fc3a 	bl	800a30c <_sbrk_r>
 800da98:	68bb      	ldr	r3, [r7, #8]
 800da9a:	442b      	add	r3, r5
 800da9c:	4298      	cmp	r0, r3
 800da9e:	d1f1      	bne.n	800da84 <_malloc_trim_r+0x34>
 800daa0:	4261      	negs	r1, r4
 800daa2:	4630      	mov	r0, r6
 800daa4:	f7fc fc32 	bl	800a30c <_sbrk_r>
 800daa8:	3001      	adds	r0, #1
 800daaa:	d110      	bne.n	800dace <_malloc_trim_r+0x7e>
 800daac:	2100      	movs	r1, #0
 800daae:	4630      	mov	r0, r6
 800dab0:	f7fc fc2c 	bl	800a30c <_sbrk_r>
 800dab4:	68ba      	ldr	r2, [r7, #8]
 800dab6:	1a83      	subs	r3, r0, r2
 800dab8:	2b0f      	cmp	r3, #15
 800daba:	dde3      	ble.n	800da84 <_malloc_trim_r+0x34>
 800dabc:	490c      	ldr	r1, [pc, #48]	; (800daf0 <_malloc_trim_r+0xa0>)
 800dabe:	6809      	ldr	r1, [r1, #0]
 800dac0:	1a40      	subs	r0, r0, r1
 800dac2:	490c      	ldr	r1, [pc, #48]	; (800daf4 <_malloc_trim_r+0xa4>)
 800dac4:	f043 0301 	orr.w	r3, r3, #1
 800dac8:	6008      	str	r0, [r1, #0]
 800daca:	6053      	str	r3, [r2, #4]
 800dacc:	e7da      	b.n	800da84 <_malloc_trim_r+0x34>
 800dace:	68bb      	ldr	r3, [r7, #8]
 800dad0:	4a08      	ldr	r2, [pc, #32]	; (800daf4 <_malloc_trim_r+0xa4>)
 800dad2:	1b2d      	subs	r5, r5, r4
 800dad4:	f045 0501 	orr.w	r5, r5, #1
 800dad8:	605d      	str	r5, [r3, #4]
 800dada:	6813      	ldr	r3, [r2, #0]
 800dadc:	4630      	mov	r0, r6
 800dade:	1b1c      	subs	r4, r3, r4
 800dae0:	6014      	str	r4, [r2, #0]
 800dae2:	f7fc fa4d 	bl	8009f80 <__malloc_unlock>
 800dae6:	2001      	movs	r0, #1
 800dae8:	e7d0      	b.n	800da8c <_malloc_trim_r+0x3c>
 800daea:	bf00      	nop
 800daec:	20000798 	.word	0x20000798
 800daf0:	20000ba0 	.word	0x20000ba0
 800daf4:	20000c5c 	.word	0x20000c5c

0800daf8 <_free_r>:
 800daf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dafa:	4605      	mov	r5, r0
 800dafc:	460f      	mov	r7, r1
 800dafe:	2900      	cmp	r1, #0
 800db00:	f000 80b1 	beq.w	800dc66 <_free_r+0x16e>
 800db04:	f7fc fa36 	bl	8009f74 <__malloc_lock>
 800db08:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800db0c:	4856      	ldr	r0, [pc, #344]	; (800dc68 <_free_r+0x170>)
 800db0e:	f022 0401 	bic.w	r4, r2, #1
 800db12:	f1a7 0308 	sub.w	r3, r7, #8
 800db16:	eb03 0c04 	add.w	ip, r3, r4
 800db1a:	6881      	ldr	r1, [r0, #8]
 800db1c:	f8dc 6004 	ldr.w	r6, [ip, #4]
 800db20:	4561      	cmp	r1, ip
 800db22:	f026 0603 	bic.w	r6, r6, #3
 800db26:	f002 0201 	and.w	r2, r2, #1
 800db2a:	d11b      	bne.n	800db64 <_free_r+0x6c>
 800db2c:	4434      	add	r4, r6
 800db2e:	b93a      	cbnz	r2, 800db40 <_free_r+0x48>
 800db30:	f857 2c08 	ldr.w	r2, [r7, #-8]
 800db34:	1a9b      	subs	r3, r3, r2
 800db36:	4414      	add	r4, r2
 800db38:	e9d3 1202 	ldrd	r1, r2, [r3, #8]
 800db3c:	60ca      	str	r2, [r1, #12]
 800db3e:	6091      	str	r1, [r2, #8]
 800db40:	f044 0201 	orr.w	r2, r4, #1
 800db44:	605a      	str	r2, [r3, #4]
 800db46:	6083      	str	r3, [r0, #8]
 800db48:	4b48      	ldr	r3, [pc, #288]	; (800dc6c <_free_r+0x174>)
 800db4a:	681b      	ldr	r3, [r3, #0]
 800db4c:	42a3      	cmp	r3, r4
 800db4e:	d804      	bhi.n	800db5a <_free_r+0x62>
 800db50:	4b47      	ldr	r3, [pc, #284]	; (800dc70 <_free_r+0x178>)
 800db52:	4628      	mov	r0, r5
 800db54:	6819      	ldr	r1, [r3, #0]
 800db56:	f7ff ff7b 	bl	800da50 <_malloc_trim_r>
 800db5a:	4628      	mov	r0, r5
 800db5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800db60:	f7fc ba0e 	b.w	8009f80 <__malloc_unlock>
 800db64:	f8cc 6004 	str.w	r6, [ip, #4]
 800db68:	2a00      	cmp	r2, #0
 800db6a:	d138      	bne.n	800dbde <_free_r+0xe6>
 800db6c:	f857 1c08 	ldr.w	r1, [r7, #-8]
 800db70:	1a5b      	subs	r3, r3, r1
 800db72:	440c      	add	r4, r1
 800db74:	6899      	ldr	r1, [r3, #8]
 800db76:	f100 0708 	add.w	r7, r0, #8
 800db7a:	42b9      	cmp	r1, r7
 800db7c:	d031      	beq.n	800dbe2 <_free_r+0xea>
 800db7e:	68df      	ldr	r7, [r3, #12]
 800db80:	60cf      	str	r7, [r1, #12]
 800db82:	60b9      	str	r1, [r7, #8]
 800db84:	eb0c 0106 	add.w	r1, ip, r6
 800db88:	6849      	ldr	r1, [r1, #4]
 800db8a:	07c9      	lsls	r1, r1, #31
 800db8c:	d40b      	bmi.n	800dba6 <_free_r+0xae>
 800db8e:	f8dc 1008 	ldr.w	r1, [ip, #8]
 800db92:	4434      	add	r4, r6
 800db94:	bb3a      	cbnz	r2, 800dbe6 <_free_r+0xee>
 800db96:	4e37      	ldr	r6, [pc, #220]	; (800dc74 <_free_r+0x17c>)
 800db98:	42b1      	cmp	r1, r6
 800db9a:	d124      	bne.n	800dbe6 <_free_r+0xee>
 800db9c:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800dba0:	e9c3 1102 	strd	r1, r1, [r3, #8]
 800dba4:	2201      	movs	r2, #1
 800dba6:	f044 0101 	orr.w	r1, r4, #1
 800dbaa:	6059      	str	r1, [r3, #4]
 800dbac:	511c      	str	r4, [r3, r4]
 800dbae:	2a00      	cmp	r2, #0
 800dbb0:	d1d3      	bne.n	800db5a <_free_r+0x62>
 800dbb2:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
 800dbb6:	d21b      	bcs.n	800dbf0 <_free_r+0xf8>
 800dbb8:	0961      	lsrs	r1, r4, #5
 800dbba:	08e2      	lsrs	r2, r4, #3
 800dbbc:	2401      	movs	r4, #1
 800dbbe:	408c      	lsls	r4, r1
 800dbc0:	6841      	ldr	r1, [r0, #4]
 800dbc2:	3201      	adds	r2, #1
 800dbc4:	430c      	orrs	r4, r1
 800dbc6:	6044      	str	r4, [r0, #4]
 800dbc8:	eb00 01c2 	add.w	r1, r0, r2, lsl #3
 800dbcc:	f850 4032 	ldr.w	r4, [r0, r2, lsl #3]
 800dbd0:	3908      	subs	r1, #8
 800dbd2:	e9c3 4102 	strd	r4, r1, [r3, #8]
 800dbd6:	f840 3032 	str.w	r3, [r0, r2, lsl #3]
 800dbda:	60e3      	str	r3, [r4, #12]
 800dbdc:	e7bd      	b.n	800db5a <_free_r+0x62>
 800dbde:	2200      	movs	r2, #0
 800dbe0:	e7d0      	b.n	800db84 <_free_r+0x8c>
 800dbe2:	2201      	movs	r2, #1
 800dbe4:	e7ce      	b.n	800db84 <_free_r+0x8c>
 800dbe6:	f8dc 600c 	ldr.w	r6, [ip, #12]
 800dbea:	60ce      	str	r6, [r1, #12]
 800dbec:	60b1      	str	r1, [r6, #8]
 800dbee:	e7da      	b.n	800dba6 <_free_r+0xae>
 800dbf0:	f5b4 6f20 	cmp.w	r4, #2560	; 0xa00
 800dbf4:	ea4f 2254 	mov.w	r2, r4, lsr #9
 800dbf8:	d214      	bcs.n	800dc24 <_free_r+0x12c>
 800dbfa:	09a2      	lsrs	r2, r4, #6
 800dbfc:	3238      	adds	r2, #56	; 0x38
 800dbfe:	1c51      	adds	r1, r2, #1
 800dc00:	eb00 06c2 	add.w	r6, r0, r2, lsl #3
 800dc04:	f850 1031 	ldr.w	r1, [r0, r1, lsl #3]
 800dc08:	428e      	cmp	r6, r1
 800dc0a:	d125      	bne.n	800dc58 <_free_r+0x160>
 800dc0c:	2401      	movs	r4, #1
 800dc0e:	1092      	asrs	r2, r2, #2
 800dc10:	fa04 f202 	lsl.w	r2, r4, r2
 800dc14:	6844      	ldr	r4, [r0, #4]
 800dc16:	4322      	orrs	r2, r4
 800dc18:	6042      	str	r2, [r0, #4]
 800dc1a:	e9c3 1602 	strd	r1, r6, [r3, #8]
 800dc1e:	60b3      	str	r3, [r6, #8]
 800dc20:	60cb      	str	r3, [r1, #12]
 800dc22:	e79a      	b.n	800db5a <_free_r+0x62>
 800dc24:	2a14      	cmp	r2, #20
 800dc26:	d801      	bhi.n	800dc2c <_free_r+0x134>
 800dc28:	325b      	adds	r2, #91	; 0x5b
 800dc2a:	e7e8      	b.n	800dbfe <_free_r+0x106>
 800dc2c:	2a54      	cmp	r2, #84	; 0x54
 800dc2e:	d802      	bhi.n	800dc36 <_free_r+0x13e>
 800dc30:	0b22      	lsrs	r2, r4, #12
 800dc32:	326e      	adds	r2, #110	; 0x6e
 800dc34:	e7e3      	b.n	800dbfe <_free_r+0x106>
 800dc36:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
 800dc3a:	d802      	bhi.n	800dc42 <_free_r+0x14a>
 800dc3c:	0be2      	lsrs	r2, r4, #15
 800dc3e:	3277      	adds	r2, #119	; 0x77
 800dc40:	e7dd      	b.n	800dbfe <_free_r+0x106>
 800dc42:	f240 5154 	movw	r1, #1364	; 0x554
 800dc46:	428a      	cmp	r2, r1
 800dc48:	bf9a      	itte	ls
 800dc4a:	0ca2      	lsrls	r2, r4, #18
 800dc4c:	327c      	addls	r2, #124	; 0x7c
 800dc4e:	227e      	movhi	r2, #126	; 0x7e
 800dc50:	e7d5      	b.n	800dbfe <_free_r+0x106>
 800dc52:	6889      	ldr	r1, [r1, #8]
 800dc54:	428e      	cmp	r6, r1
 800dc56:	d004      	beq.n	800dc62 <_free_r+0x16a>
 800dc58:	684a      	ldr	r2, [r1, #4]
 800dc5a:	f022 0203 	bic.w	r2, r2, #3
 800dc5e:	42a2      	cmp	r2, r4
 800dc60:	d8f7      	bhi.n	800dc52 <_free_r+0x15a>
 800dc62:	68ce      	ldr	r6, [r1, #12]
 800dc64:	e7d9      	b.n	800dc1a <_free_r+0x122>
 800dc66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dc68:	20000798 	.word	0x20000798
 800dc6c:	20000ba4 	.word	0x20000ba4
 800dc70:	20000c8c 	.word	0x20000c8c
 800dc74:	200007a0 	.word	0x200007a0

0800dc78 <rshift>:
 800dc78:	6903      	ldr	r3, [r0, #16]
 800dc7a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800dc7e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dc82:	ea4f 1261 	mov.w	r2, r1, asr #5
 800dc86:	f100 0414 	add.w	r4, r0, #20
 800dc8a:	dd45      	ble.n	800dd18 <rshift+0xa0>
 800dc8c:	f011 011f 	ands.w	r1, r1, #31
 800dc90:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800dc94:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800dc98:	d10c      	bne.n	800dcb4 <rshift+0x3c>
 800dc9a:	f100 0710 	add.w	r7, r0, #16
 800dc9e:	4629      	mov	r1, r5
 800dca0:	42b1      	cmp	r1, r6
 800dca2:	d334      	bcc.n	800dd0e <rshift+0x96>
 800dca4:	1a9b      	subs	r3, r3, r2
 800dca6:	009b      	lsls	r3, r3, #2
 800dca8:	1eea      	subs	r2, r5, #3
 800dcaa:	4296      	cmp	r6, r2
 800dcac:	bf38      	it	cc
 800dcae:	2300      	movcc	r3, #0
 800dcb0:	4423      	add	r3, r4
 800dcb2:	e015      	b.n	800dce0 <rshift+0x68>
 800dcb4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800dcb8:	f1c1 0820 	rsb	r8, r1, #32
 800dcbc:	40cf      	lsrs	r7, r1
 800dcbe:	f105 0e04 	add.w	lr, r5, #4
 800dcc2:	46a1      	mov	r9, r4
 800dcc4:	4576      	cmp	r6, lr
 800dcc6:	46f4      	mov	ip, lr
 800dcc8:	d815      	bhi.n	800dcf6 <rshift+0x7e>
 800dcca:	1a9b      	subs	r3, r3, r2
 800dccc:	009a      	lsls	r2, r3, #2
 800dcce:	3a04      	subs	r2, #4
 800dcd0:	3501      	adds	r5, #1
 800dcd2:	42ae      	cmp	r6, r5
 800dcd4:	bf38      	it	cc
 800dcd6:	2200      	movcc	r2, #0
 800dcd8:	18a3      	adds	r3, r4, r2
 800dcda:	50a7      	str	r7, [r4, r2]
 800dcdc:	b107      	cbz	r7, 800dce0 <rshift+0x68>
 800dcde:	3304      	adds	r3, #4
 800dce0:	1b1a      	subs	r2, r3, r4
 800dce2:	42a3      	cmp	r3, r4
 800dce4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800dce8:	bf08      	it	eq
 800dcea:	2300      	moveq	r3, #0
 800dcec:	6102      	str	r2, [r0, #16]
 800dcee:	bf08      	it	eq
 800dcf0:	6143      	streq	r3, [r0, #20]
 800dcf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dcf6:	f8dc c000 	ldr.w	ip, [ip]
 800dcfa:	fa0c fc08 	lsl.w	ip, ip, r8
 800dcfe:	ea4c 0707 	orr.w	r7, ip, r7
 800dd02:	f849 7b04 	str.w	r7, [r9], #4
 800dd06:	f85e 7b04 	ldr.w	r7, [lr], #4
 800dd0a:	40cf      	lsrs	r7, r1
 800dd0c:	e7da      	b.n	800dcc4 <rshift+0x4c>
 800dd0e:	f851 cb04 	ldr.w	ip, [r1], #4
 800dd12:	f847 cf04 	str.w	ip, [r7, #4]!
 800dd16:	e7c3      	b.n	800dca0 <rshift+0x28>
 800dd18:	4623      	mov	r3, r4
 800dd1a:	e7e1      	b.n	800dce0 <rshift+0x68>

0800dd1c <__hexdig_fun>:
 800dd1c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800dd20:	2b09      	cmp	r3, #9
 800dd22:	d802      	bhi.n	800dd2a <__hexdig_fun+0xe>
 800dd24:	3820      	subs	r0, #32
 800dd26:	b2c0      	uxtb	r0, r0
 800dd28:	4770      	bx	lr
 800dd2a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800dd2e:	2b05      	cmp	r3, #5
 800dd30:	d801      	bhi.n	800dd36 <__hexdig_fun+0x1a>
 800dd32:	3847      	subs	r0, #71	; 0x47
 800dd34:	e7f7      	b.n	800dd26 <__hexdig_fun+0xa>
 800dd36:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800dd3a:	2b05      	cmp	r3, #5
 800dd3c:	d801      	bhi.n	800dd42 <__hexdig_fun+0x26>
 800dd3e:	3827      	subs	r0, #39	; 0x27
 800dd40:	e7f1      	b.n	800dd26 <__hexdig_fun+0xa>
 800dd42:	2000      	movs	r0, #0
 800dd44:	4770      	bx	lr
	...

0800dd48 <__gethex>:
 800dd48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd4c:	ed2d 8b02 	vpush	{d8}
 800dd50:	b089      	sub	sp, #36	; 0x24
 800dd52:	ee08 0a10 	vmov	s16, r0
 800dd56:	9304      	str	r3, [sp, #16]
 800dd58:	4bbc      	ldr	r3, [pc, #752]	; (800e04c <__gethex+0x304>)
 800dd5a:	681b      	ldr	r3, [r3, #0]
 800dd5c:	9301      	str	r3, [sp, #4]
 800dd5e:	4618      	mov	r0, r3
 800dd60:	468b      	mov	fp, r1
 800dd62:	4690      	mov	r8, r2
 800dd64:	f7f2 fa34 	bl	80001d0 <strlen>
 800dd68:	9b01      	ldr	r3, [sp, #4]
 800dd6a:	f8db 2000 	ldr.w	r2, [fp]
 800dd6e:	4403      	add	r3, r0
 800dd70:	4682      	mov	sl, r0
 800dd72:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800dd76:	9305      	str	r3, [sp, #20]
 800dd78:	1c93      	adds	r3, r2, #2
 800dd7a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800dd7e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800dd82:	32fe      	adds	r2, #254	; 0xfe
 800dd84:	18d1      	adds	r1, r2, r3
 800dd86:	461f      	mov	r7, r3
 800dd88:	f813 0b01 	ldrb.w	r0, [r3], #1
 800dd8c:	9100      	str	r1, [sp, #0]
 800dd8e:	2830      	cmp	r0, #48	; 0x30
 800dd90:	d0f8      	beq.n	800dd84 <__gethex+0x3c>
 800dd92:	f7ff ffc3 	bl	800dd1c <__hexdig_fun>
 800dd96:	4604      	mov	r4, r0
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d13a      	bne.n	800de12 <__gethex+0xca>
 800dd9c:	9901      	ldr	r1, [sp, #4]
 800dd9e:	4652      	mov	r2, sl
 800dda0:	4638      	mov	r0, r7
 800dda2:	f000 fff5 	bl	800ed90 <strncmp>
 800dda6:	4605      	mov	r5, r0
 800dda8:	2800      	cmp	r0, #0
 800ddaa:	d168      	bne.n	800de7e <__gethex+0x136>
 800ddac:	f817 000a 	ldrb.w	r0, [r7, sl]
 800ddb0:	eb07 060a 	add.w	r6, r7, sl
 800ddb4:	f7ff ffb2 	bl	800dd1c <__hexdig_fun>
 800ddb8:	2800      	cmp	r0, #0
 800ddba:	d062      	beq.n	800de82 <__gethex+0x13a>
 800ddbc:	4633      	mov	r3, r6
 800ddbe:	7818      	ldrb	r0, [r3, #0]
 800ddc0:	2830      	cmp	r0, #48	; 0x30
 800ddc2:	461f      	mov	r7, r3
 800ddc4:	f103 0301 	add.w	r3, r3, #1
 800ddc8:	d0f9      	beq.n	800ddbe <__gethex+0x76>
 800ddca:	f7ff ffa7 	bl	800dd1c <__hexdig_fun>
 800ddce:	2301      	movs	r3, #1
 800ddd0:	fab0 f480 	clz	r4, r0
 800ddd4:	0964      	lsrs	r4, r4, #5
 800ddd6:	4635      	mov	r5, r6
 800ddd8:	9300      	str	r3, [sp, #0]
 800ddda:	463a      	mov	r2, r7
 800dddc:	4616      	mov	r6, r2
 800ddde:	3201      	adds	r2, #1
 800dde0:	7830      	ldrb	r0, [r6, #0]
 800dde2:	f7ff ff9b 	bl	800dd1c <__hexdig_fun>
 800dde6:	2800      	cmp	r0, #0
 800dde8:	d1f8      	bne.n	800dddc <__gethex+0x94>
 800ddea:	9901      	ldr	r1, [sp, #4]
 800ddec:	4652      	mov	r2, sl
 800ddee:	4630      	mov	r0, r6
 800ddf0:	f000 ffce 	bl	800ed90 <strncmp>
 800ddf4:	b980      	cbnz	r0, 800de18 <__gethex+0xd0>
 800ddf6:	b94d      	cbnz	r5, 800de0c <__gethex+0xc4>
 800ddf8:	eb06 050a 	add.w	r5, r6, sl
 800ddfc:	462a      	mov	r2, r5
 800ddfe:	4616      	mov	r6, r2
 800de00:	3201      	adds	r2, #1
 800de02:	7830      	ldrb	r0, [r6, #0]
 800de04:	f7ff ff8a 	bl	800dd1c <__hexdig_fun>
 800de08:	2800      	cmp	r0, #0
 800de0a:	d1f8      	bne.n	800ddfe <__gethex+0xb6>
 800de0c:	1bad      	subs	r5, r5, r6
 800de0e:	00ad      	lsls	r5, r5, #2
 800de10:	e004      	b.n	800de1c <__gethex+0xd4>
 800de12:	2400      	movs	r4, #0
 800de14:	4625      	mov	r5, r4
 800de16:	e7e0      	b.n	800ddda <__gethex+0x92>
 800de18:	2d00      	cmp	r5, #0
 800de1a:	d1f7      	bne.n	800de0c <__gethex+0xc4>
 800de1c:	7833      	ldrb	r3, [r6, #0]
 800de1e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800de22:	2b50      	cmp	r3, #80	; 0x50
 800de24:	d13b      	bne.n	800de9e <__gethex+0x156>
 800de26:	7873      	ldrb	r3, [r6, #1]
 800de28:	2b2b      	cmp	r3, #43	; 0x2b
 800de2a:	d02c      	beq.n	800de86 <__gethex+0x13e>
 800de2c:	2b2d      	cmp	r3, #45	; 0x2d
 800de2e:	d02e      	beq.n	800de8e <__gethex+0x146>
 800de30:	1c71      	adds	r1, r6, #1
 800de32:	f04f 0900 	mov.w	r9, #0
 800de36:	7808      	ldrb	r0, [r1, #0]
 800de38:	f7ff ff70 	bl	800dd1c <__hexdig_fun>
 800de3c:	1e43      	subs	r3, r0, #1
 800de3e:	b2db      	uxtb	r3, r3
 800de40:	2b18      	cmp	r3, #24
 800de42:	d82c      	bhi.n	800de9e <__gethex+0x156>
 800de44:	f1a0 0210 	sub.w	r2, r0, #16
 800de48:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800de4c:	f7ff ff66 	bl	800dd1c <__hexdig_fun>
 800de50:	1e43      	subs	r3, r0, #1
 800de52:	b2db      	uxtb	r3, r3
 800de54:	2b18      	cmp	r3, #24
 800de56:	d91d      	bls.n	800de94 <__gethex+0x14c>
 800de58:	f1b9 0f00 	cmp.w	r9, #0
 800de5c:	d000      	beq.n	800de60 <__gethex+0x118>
 800de5e:	4252      	negs	r2, r2
 800de60:	4415      	add	r5, r2
 800de62:	f8cb 1000 	str.w	r1, [fp]
 800de66:	b1e4      	cbz	r4, 800dea2 <__gethex+0x15a>
 800de68:	9b00      	ldr	r3, [sp, #0]
 800de6a:	2b00      	cmp	r3, #0
 800de6c:	bf14      	ite	ne
 800de6e:	2700      	movne	r7, #0
 800de70:	2706      	moveq	r7, #6
 800de72:	4638      	mov	r0, r7
 800de74:	b009      	add	sp, #36	; 0x24
 800de76:	ecbd 8b02 	vpop	{d8}
 800de7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de7e:	463e      	mov	r6, r7
 800de80:	4625      	mov	r5, r4
 800de82:	2401      	movs	r4, #1
 800de84:	e7ca      	b.n	800de1c <__gethex+0xd4>
 800de86:	f04f 0900 	mov.w	r9, #0
 800de8a:	1cb1      	adds	r1, r6, #2
 800de8c:	e7d3      	b.n	800de36 <__gethex+0xee>
 800de8e:	f04f 0901 	mov.w	r9, #1
 800de92:	e7fa      	b.n	800de8a <__gethex+0x142>
 800de94:	230a      	movs	r3, #10
 800de96:	fb03 0202 	mla	r2, r3, r2, r0
 800de9a:	3a10      	subs	r2, #16
 800de9c:	e7d4      	b.n	800de48 <__gethex+0x100>
 800de9e:	4631      	mov	r1, r6
 800dea0:	e7df      	b.n	800de62 <__gethex+0x11a>
 800dea2:	1bf3      	subs	r3, r6, r7
 800dea4:	3b01      	subs	r3, #1
 800dea6:	4621      	mov	r1, r4
 800dea8:	2b07      	cmp	r3, #7
 800deaa:	dc0b      	bgt.n	800dec4 <__gethex+0x17c>
 800deac:	ee18 0a10 	vmov	r0, s16
 800deb0:	f000 fabe 	bl	800e430 <_Balloc>
 800deb4:	4604      	mov	r4, r0
 800deb6:	b940      	cbnz	r0, 800deca <__gethex+0x182>
 800deb8:	4b65      	ldr	r3, [pc, #404]	; (800e050 <__gethex+0x308>)
 800deba:	4602      	mov	r2, r0
 800debc:	21de      	movs	r1, #222	; 0xde
 800debe:	4865      	ldr	r0, [pc, #404]	; (800e054 <__gethex+0x30c>)
 800dec0:	f001 f806 	bl	800eed0 <__assert_func>
 800dec4:	3101      	adds	r1, #1
 800dec6:	105b      	asrs	r3, r3, #1
 800dec8:	e7ee      	b.n	800dea8 <__gethex+0x160>
 800deca:	f100 0914 	add.w	r9, r0, #20
 800dece:	f04f 0b00 	mov.w	fp, #0
 800ded2:	f1ca 0301 	rsb	r3, sl, #1
 800ded6:	f8cd 9008 	str.w	r9, [sp, #8]
 800deda:	f8cd b000 	str.w	fp, [sp]
 800dede:	9306      	str	r3, [sp, #24]
 800dee0:	42b7      	cmp	r7, r6
 800dee2:	d340      	bcc.n	800df66 <__gethex+0x21e>
 800dee4:	9802      	ldr	r0, [sp, #8]
 800dee6:	9b00      	ldr	r3, [sp, #0]
 800dee8:	f840 3b04 	str.w	r3, [r0], #4
 800deec:	eba0 0009 	sub.w	r0, r0, r9
 800def0:	1080      	asrs	r0, r0, #2
 800def2:	0146      	lsls	r6, r0, #5
 800def4:	6120      	str	r0, [r4, #16]
 800def6:	4618      	mov	r0, r3
 800def8:	f000 fb5c 	bl	800e5b4 <__hi0bits>
 800defc:	1a30      	subs	r0, r6, r0
 800defe:	f8d8 6000 	ldr.w	r6, [r8]
 800df02:	42b0      	cmp	r0, r6
 800df04:	dd63      	ble.n	800dfce <__gethex+0x286>
 800df06:	1b87      	subs	r7, r0, r6
 800df08:	4639      	mov	r1, r7
 800df0a:	4620      	mov	r0, r4
 800df0c:	f000 fedc 	bl	800ecc8 <__any_on>
 800df10:	4682      	mov	sl, r0
 800df12:	b1a8      	cbz	r0, 800df40 <__gethex+0x1f8>
 800df14:	1e7b      	subs	r3, r7, #1
 800df16:	1159      	asrs	r1, r3, #5
 800df18:	f003 021f 	and.w	r2, r3, #31
 800df1c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800df20:	f04f 0a01 	mov.w	sl, #1
 800df24:	fa0a f202 	lsl.w	r2, sl, r2
 800df28:	420a      	tst	r2, r1
 800df2a:	d009      	beq.n	800df40 <__gethex+0x1f8>
 800df2c:	4553      	cmp	r3, sl
 800df2e:	dd05      	ble.n	800df3c <__gethex+0x1f4>
 800df30:	1eb9      	subs	r1, r7, #2
 800df32:	4620      	mov	r0, r4
 800df34:	f000 fec8 	bl	800ecc8 <__any_on>
 800df38:	2800      	cmp	r0, #0
 800df3a:	d145      	bne.n	800dfc8 <__gethex+0x280>
 800df3c:	f04f 0a02 	mov.w	sl, #2
 800df40:	4639      	mov	r1, r7
 800df42:	4620      	mov	r0, r4
 800df44:	f7ff fe98 	bl	800dc78 <rshift>
 800df48:	443d      	add	r5, r7
 800df4a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800df4e:	42ab      	cmp	r3, r5
 800df50:	da4c      	bge.n	800dfec <__gethex+0x2a4>
 800df52:	ee18 0a10 	vmov	r0, s16
 800df56:	4621      	mov	r1, r4
 800df58:	f000 fa8f 	bl	800e47a <_Bfree>
 800df5c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800df5e:	2300      	movs	r3, #0
 800df60:	6013      	str	r3, [r2, #0]
 800df62:	27a3      	movs	r7, #163	; 0xa3
 800df64:	e785      	b.n	800de72 <__gethex+0x12a>
 800df66:	1e73      	subs	r3, r6, #1
 800df68:	9a05      	ldr	r2, [sp, #20]
 800df6a:	9303      	str	r3, [sp, #12]
 800df6c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800df70:	4293      	cmp	r3, r2
 800df72:	d019      	beq.n	800dfa8 <__gethex+0x260>
 800df74:	f1bb 0f20 	cmp.w	fp, #32
 800df78:	d107      	bne.n	800df8a <__gethex+0x242>
 800df7a:	9b02      	ldr	r3, [sp, #8]
 800df7c:	9a00      	ldr	r2, [sp, #0]
 800df7e:	f843 2b04 	str.w	r2, [r3], #4
 800df82:	9302      	str	r3, [sp, #8]
 800df84:	2300      	movs	r3, #0
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	469b      	mov	fp, r3
 800df8a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800df8e:	f7ff fec5 	bl	800dd1c <__hexdig_fun>
 800df92:	9b00      	ldr	r3, [sp, #0]
 800df94:	f000 000f 	and.w	r0, r0, #15
 800df98:	fa00 f00b 	lsl.w	r0, r0, fp
 800df9c:	4303      	orrs	r3, r0
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	f10b 0b04 	add.w	fp, fp, #4
 800dfa4:	9b03      	ldr	r3, [sp, #12]
 800dfa6:	e00d      	b.n	800dfc4 <__gethex+0x27c>
 800dfa8:	9b03      	ldr	r3, [sp, #12]
 800dfaa:	9a06      	ldr	r2, [sp, #24]
 800dfac:	4413      	add	r3, r2
 800dfae:	42bb      	cmp	r3, r7
 800dfb0:	d3e0      	bcc.n	800df74 <__gethex+0x22c>
 800dfb2:	4618      	mov	r0, r3
 800dfb4:	9901      	ldr	r1, [sp, #4]
 800dfb6:	9307      	str	r3, [sp, #28]
 800dfb8:	4652      	mov	r2, sl
 800dfba:	f000 fee9 	bl	800ed90 <strncmp>
 800dfbe:	9b07      	ldr	r3, [sp, #28]
 800dfc0:	2800      	cmp	r0, #0
 800dfc2:	d1d7      	bne.n	800df74 <__gethex+0x22c>
 800dfc4:	461e      	mov	r6, r3
 800dfc6:	e78b      	b.n	800dee0 <__gethex+0x198>
 800dfc8:	f04f 0a03 	mov.w	sl, #3
 800dfcc:	e7b8      	b.n	800df40 <__gethex+0x1f8>
 800dfce:	da0a      	bge.n	800dfe6 <__gethex+0x29e>
 800dfd0:	1a37      	subs	r7, r6, r0
 800dfd2:	4621      	mov	r1, r4
 800dfd4:	ee18 0a10 	vmov	r0, s16
 800dfd8:	463a      	mov	r2, r7
 800dfda:	f000 fc37 	bl	800e84c <__lshift>
 800dfde:	1bed      	subs	r5, r5, r7
 800dfe0:	4604      	mov	r4, r0
 800dfe2:	f100 0914 	add.w	r9, r0, #20
 800dfe6:	f04f 0a00 	mov.w	sl, #0
 800dfea:	e7ae      	b.n	800df4a <__gethex+0x202>
 800dfec:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800dff0:	42a8      	cmp	r0, r5
 800dff2:	dd72      	ble.n	800e0da <__gethex+0x392>
 800dff4:	1b45      	subs	r5, r0, r5
 800dff6:	42ae      	cmp	r6, r5
 800dff8:	dc36      	bgt.n	800e068 <__gethex+0x320>
 800dffa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800dffe:	2b02      	cmp	r3, #2
 800e000:	d02a      	beq.n	800e058 <__gethex+0x310>
 800e002:	2b03      	cmp	r3, #3
 800e004:	d02c      	beq.n	800e060 <__gethex+0x318>
 800e006:	2b01      	cmp	r3, #1
 800e008:	d115      	bne.n	800e036 <__gethex+0x2ee>
 800e00a:	42ae      	cmp	r6, r5
 800e00c:	d113      	bne.n	800e036 <__gethex+0x2ee>
 800e00e:	2e01      	cmp	r6, #1
 800e010:	d10b      	bne.n	800e02a <__gethex+0x2e2>
 800e012:	9a04      	ldr	r2, [sp, #16]
 800e014:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800e018:	6013      	str	r3, [r2, #0]
 800e01a:	2301      	movs	r3, #1
 800e01c:	6123      	str	r3, [r4, #16]
 800e01e:	f8c9 3000 	str.w	r3, [r9]
 800e022:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e024:	2762      	movs	r7, #98	; 0x62
 800e026:	601c      	str	r4, [r3, #0]
 800e028:	e723      	b.n	800de72 <__gethex+0x12a>
 800e02a:	1e71      	subs	r1, r6, #1
 800e02c:	4620      	mov	r0, r4
 800e02e:	f000 fe4b 	bl	800ecc8 <__any_on>
 800e032:	2800      	cmp	r0, #0
 800e034:	d1ed      	bne.n	800e012 <__gethex+0x2ca>
 800e036:	ee18 0a10 	vmov	r0, s16
 800e03a:	4621      	mov	r1, r4
 800e03c:	f000 fa1d 	bl	800e47a <_Bfree>
 800e040:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e042:	2300      	movs	r3, #0
 800e044:	6013      	str	r3, [r2, #0]
 800e046:	2750      	movs	r7, #80	; 0x50
 800e048:	e713      	b.n	800de72 <__gethex+0x12a>
 800e04a:	bf00      	nop
 800e04c:	08010980 	.word	0x08010980
 800e050:	080108a9 	.word	0x080108a9
 800e054:	08010919 	.word	0x08010919
 800e058:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d1eb      	bne.n	800e036 <__gethex+0x2ee>
 800e05e:	e7d8      	b.n	800e012 <__gethex+0x2ca>
 800e060:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e062:	2b00      	cmp	r3, #0
 800e064:	d1d5      	bne.n	800e012 <__gethex+0x2ca>
 800e066:	e7e6      	b.n	800e036 <__gethex+0x2ee>
 800e068:	1e6f      	subs	r7, r5, #1
 800e06a:	f1ba 0f00 	cmp.w	sl, #0
 800e06e:	d131      	bne.n	800e0d4 <__gethex+0x38c>
 800e070:	b127      	cbz	r7, 800e07c <__gethex+0x334>
 800e072:	4639      	mov	r1, r7
 800e074:	4620      	mov	r0, r4
 800e076:	f000 fe27 	bl	800ecc8 <__any_on>
 800e07a:	4682      	mov	sl, r0
 800e07c:	117b      	asrs	r3, r7, #5
 800e07e:	2101      	movs	r1, #1
 800e080:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800e084:	f007 071f 	and.w	r7, r7, #31
 800e088:	fa01 f707 	lsl.w	r7, r1, r7
 800e08c:	421f      	tst	r7, r3
 800e08e:	4629      	mov	r1, r5
 800e090:	4620      	mov	r0, r4
 800e092:	bf18      	it	ne
 800e094:	f04a 0a02 	orrne.w	sl, sl, #2
 800e098:	1b76      	subs	r6, r6, r5
 800e09a:	f7ff fded 	bl	800dc78 <rshift>
 800e09e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800e0a2:	2702      	movs	r7, #2
 800e0a4:	f1ba 0f00 	cmp.w	sl, #0
 800e0a8:	d048      	beq.n	800e13c <__gethex+0x3f4>
 800e0aa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800e0ae:	2b02      	cmp	r3, #2
 800e0b0:	d015      	beq.n	800e0de <__gethex+0x396>
 800e0b2:	2b03      	cmp	r3, #3
 800e0b4:	d017      	beq.n	800e0e6 <__gethex+0x39e>
 800e0b6:	2b01      	cmp	r3, #1
 800e0b8:	d109      	bne.n	800e0ce <__gethex+0x386>
 800e0ba:	f01a 0f02 	tst.w	sl, #2
 800e0be:	d006      	beq.n	800e0ce <__gethex+0x386>
 800e0c0:	f8d9 0000 	ldr.w	r0, [r9]
 800e0c4:	ea4a 0a00 	orr.w	sl, sl, r0
 800e0c8:	f01a 0f01 	tst.w	sl, #1
 800e0cc:	d10e      	bne.n	800e0ec <__gethex+0x3a4>
 800e0ce:	f047 0710 	orr.w	r7, r7, #16
 800e0d2:	e033      	b.n	800e13c <__gethex+0x3f4>
 800e0d4:	f04f 0a01 	mov.w	sl, #1
 800e0d8:	e7d0      	b.n	800e07c <__gethex+0x334>
 800e0da:	2701      	movs	r7, #1
 800e0dc:	e7e2      	b.n	800e0a4 <__gethex+0x35c>
 800e0de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0e0:	f1c3 0301 	rsb	r3, r3, #1
 800e0e4:	9315      	str	r3, [sp, #84]	; 0x54
 800e0e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d0f0      	beq.n	800e0ce <__gethex+0x386>
 800e0ec:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800e0f0:	f104 0314 	add.w	r3, r4, #20
 800e0f4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800e0f8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800e0fc:	f04f 0c00 	mov.w	ip, #0
 800e100:	4618      	mov	r0, r3
 800e102:	f853 2b04 	ldr.w	r2, [r3], #4
 800e106:	f1b2 3fff 	cmp.w	r2, #4294967295
 800e10a:	d01c      	beq.n	800e146 <__gethex+0x3fe>
 800e10c:	3201      	adds	r2, #1
 800e10e:	6002      	str	r2, [r0, #0]
 800e110:	2f02      	cmp	r7, #2
 800e112:	f104 0314 	add.w	r3, r4, #20
 800e116:	d13f      	bne.n	800e198 <__gethex+0x450>
 800e118:	f8d8 2000 	ldr.w	r2, [r8]
 800e11c:	3a01      	subs	r2, #1
 800e11e:	42b2      	cmp	r2, r6
 800e120:	d10a      	bne.n	800e138 <__gethex+0x3f0>
 800e122:	1171      	asrs	r1, r6, #5
 800e124:	2201      	movs	r2, #1
 800e126:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800e12a:	f006 061f 	and.w	r6, r6, #31
 800e12e:	fa02 f606 	lsl.w	r6, r2, r6
 800e132:	421e      	tst	r6, r3
 800e134:	bf18      	it	ne
 800e136:	4617      	movne	r7, r2
 800e138:	f047 0720 	orr.w	r7, r7, #32
 800e13c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e13e:	601c      	str	r4, [r3, #0]
 800e140:	9b04      	ldr	r3, [sp, #16]
 800e142:	601d      	str	r5, [r3, #0]
 800e144:	e695      	b.n	800de72 <__gethex+0x12a>
 800e146:	4299      	cmp	r1, r3
 800e148:	f843 cc04 	str.w	ip, [r3, #-4]
 800e14c:	d8d8      	bhi.n	800e100 <__gethex+0x3b8>
 800e14e:	68a3      	ldr	r3, [r4, #8]
 800e150:	459b      	cmp	fp, r3
 800e152:	db19      	blt.n	800e188 <__gethex+0x440>
 800e154:	6861      	ldr	r1, [r4, #4]
 800e156:	ee18 0a10 	vmov	r0, s16
 800e15a:	3101      	adds	r1, #1
 800e15c:	f000 f968 	bl	800e430 <_Balloc>
 800e160:	4681      	mov	r9, r0
 800e162:	b918      	cbnz	r0, 800e16c <__gethex+0x424>
 800e164:	4b1a      	ldr	r3, [pc, #104]	; (800e1d0 <__gethex+0x488>)
 800e166:	4602      	mov	r2, r0
 800e168:	2184      	movs	r1, #132	; 0x84
 800e16a:	e6a8      	b.n	800debe <__gethex+0x176>
 800e16c:	6922      	ldr	r2, [r4, #16]
 800e16e:	3202      	adds	r2, #2
 800e170:	f104 010c 	add.w	r1, r4, #12
 800e174:	0092      	lsls	r2, r2, #2
 800e176:	300c      	adds	r0, #12
 800e178:	f7fb fed4 	bl	8009f24 <memcpy>
 800e17c:	4621      	mov	r1, r4
 800e17e:	ee18 0a10 	vmov	r0, s16
 800e182:	f000 f97a 	bl	800e47a <_Bfree>
 800e186:	464c      	mov	r4, r9
 800e188:	6923      	ldr	r3, [r4, #16]
 800e18a:	1c5a      	adds	r2, r3, #1
 800e18c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e190:	6122      	str	r2, [r4, #16]
 800e192:	2201      	movs	r2, #1
 800e194:	615a      	str	r2, [r3, #20]
 800e196:	e7bb      	b.n	800e110 <__gethex+0x3c8>
 800e198:	6922      	ldr	r2, [r4, #16]
 800e19a:	455a      	cmp	r2, fp
 800e19c:	dd0b      	ble.n	800e1b6 <__gethex+0x46e>
 800e19e:	2101      	movs	r1, #1
 800e1a0:	4620      	mov	r0, r4
 800e1a2:	f7ff fd69 	bl	800dc78 <rshift>
 800e1a6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800e1aa:	3501      	adds	r5, #1
 800e1ac:	42ab      	cmp	r3, r5
 800e1ae:	f6ff aed0 	blt.w	800df52 <__gethex+0x20a>
 800e1b2:	2701      	movs	r7, #1
 800e1b4:	e7c0      	b.n	800e138 <__gethex+0x3f0>
 800e1b6:	f016 061f 	ands.w	r6, r6, #31
 800e1ba:	d0fa      	beq.n	800e1b2 <__gethex+0x46a>
 800e1bc:	449a      	add	sl, r3
 800e1be:	f1c6 0620 	rsb	r6, r6, #32
 800e1c2:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800e1c6:	f000 f9f5 	bl	800e5b4 <__hi0bits>
 800e1ca:	42b0      	cmp	r0, r6
 800e1cc:	dbe7      	blt.n	800e19e <__gethex+0x456>
 800e1ce:	e7f0      	b.n	800e1b2 <__gethex+0x46a>
 800e1d0:	080108a9 	.word	0x080108a9

0800e1d4 <L_shift>:
 800e1d4:	f1c2 0208 	rsb	r2, r2, #8
 800e1d8:	0092      	lsls	r2, r2, #2
 800e1da:	b570      	push	{r4, r5, r6, lr}
 800e1dc:	f1c2 0620 	rsb	r6, r2, #32
 800e1e0:	6843      	ldr	r3, [r0, #4]
 800e1e2:	6804      	ldr	r4, [r0, #0]
 800e1e4:	fa03 f506 	lsl.w	r5, r3, r6
 800e1e8:	432c      	orrs	r4, r5
 800e1ea:	40d3      	lsrs	r3, r2
 800e1ec:	6004      	str	r4, [r0, #0]
 800e1ee:	f840 3f04 	str.w	r3, [r0, #4]!
 800e1f2:	4288      	cmp	r0, r1
 800e1f4:	d3f4      	bcc.n	800e1e0 <L_shift+0xc>
 800e1f6:	bd70      	pop	{r4, r5, r6, pc}

0800e1f8 <__match>:
 800e1f8:	b530      	push	{r4, r5, lr}
 800e1fa:	6803      	ldr	r3, [r0, #0]
 800e1fc:	3301      	adds	r3, #1
 800e1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e202:	b914      	cbnz	r4, 800e20a <__match+0x12>
 800e204:	6003      	str	r3, [r0, #0]
 800e206:	2001      	movs	r0, #1
 800e208:	bd30      	pop	{r4, r5, pc}
 800e20a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e20e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800e212:	2d19      	cmp	r5, #25
 800e214:	bf98      	it	ls
 800e216:	3220      	addls	r2, #32
 800e218:	42a2      	cmp	r2, r4
 800e21a:	d0f0      	beq.n	800e1fe <__match+0x6>
 800e21c:	2000      	movs	r0, #0
 800e21e:	e7f3      	b.n	800e208 <__match+0x10>

0800e220 <__hexnan>:
 800e220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e224:	680b      	ldr	r3, [r1, #0]
 800e226:	6801      	ldr	r1, [r0, #0]
 800e228:	115e      	asrs	r6, r3, #5
 800e22a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800e22e:	f013 031f 	ands.w	r3, r3, #31
 800e232:	b087      	sub	sp, #28
 800e234:	bf18      	it	ne
 800e236:	3604      	addne	r6, #4
 800e238:	2500      	movs	r5, #0
 800e23a:	1f37      	subs	r7, r6, #4
 800e23c:	4682      	mov	sl, r0
 800e23e:	4690      	mov	r8, r2
 800e240:	9301      	str	r3, [sp, #4]
 800e242:	f846 5c04 	str.w	r5, [r6, #-4]
 800e246:	46b9      	mov	r9, r7
 800e248:	463c      	mov	r4, r7
 800e24a:	9502      	str	r5, [sp, #8]
 800e24c:	46ab      	mov	fp, r5
 800e24e:	784a      	ldrb	r2, [r1, #1]
 800e250:	1c4b      	adds	r3, r1, #1
 800e252:	9303      	str	r3, [sp, #12]
 800e254:	b342      	cbz	r2, 800e2a8 <__hexnan+0x88>
 800e256:	4610      	mov	r0, r2
 800e258:	9105      	str	r1, [sp, #20]
 800e25a:	9204      	str	r2, [sp, #16]
 800e25c:	f7ff fd5e 	bl	800dd1c <__hexdig_fun>
 800e260:	2800      	cmp	r0, #0
 800e262:	d14f      	bne.n	800e304 <__hexnan+0xe4>
 800e264:	9a04      	ldr	r2, [sp, #16]
 800e266:	9905      	ldr	r1, [sp, #20]
 800e268:	2a20      	cmp	r2, #32
 800e26a:	d818      	bhi.n	800e29e <__hexnan+0x7e>
 800e26c:	9b02      	ldr	r3, [sp, #8]
 800e26e:	459b      	cmp	fp, r3
 800e270:	dd13      	ble.n	800e29a <__hexnan+0x7a>
 800e272:	454c      	cmp	r4, r9
 800e274:	d206      	bcs.n	800e284 <__hexnan+0x64>
 800e276:	2d07      	cmp	r5, #7
 800e278:	dc04      	bgt.n	800e284 <__hexnan+0x64>
 800e27a:	462a      	mov	r2, r5
 800e27c:	4649      	mov	r1, r9
 800e27e:	4620      	mov	r0, r4
 800e280:	f7ff ffa8 	bl	800e1d4 <L_shift>
 800e284:	4544      	cmp	r4, r8
 800e286:	d950      	bls.n	800e32a <__hexnan+0x10a>
 800e288:	2300      	movs	r3, #0
 800e28a:	f1a4 0904 	sub.w	r9, r4, #4
 800e28e:	f844 3c04 	str.w	r3, [r4, #-4]
 800e292:	f8cd b008 	str.w	fp, [sp, #8]
 800e296:	464c      	mov	r4, r9
 800e298:	461d      	mov	r5, r3
 800e29a:	9903      	ldr	r1, [sp, #12]
 800e29c:	e7d7      	b.n	800e24e <__hexnan+0x2e>
 800e29e:	2a29      	cmp	r2, #41	; 0x29
 800e2a0:	d156      	bne.n	800e350 <__hexnan+0x130>
 800e2a2:	3102      	adds	r1, #2
 800e2a4:	f8ca 1000 	str.w	r1, [sl]
 800e2a8:	f1bb 0f00 	cmp.w	fp, #0
 800e2ac:	d050      	beq.n	800e350 <__hexnan+0x130>
 800e2ae:	454c      	cmp	r4, r9
 800e2b0:	d206      	bcs.n	800e2c0 <__hexnan+0xa0>
 800e2b2:	2d07      	cmp	r5, #7
 800e2b4:	dc04      	bgt.n	800e2c0 <__hexnan+0xa0>
 800e2b6:	462a      	mov	r2, r5
 800e2b8:	4649      	mov	r1, r9
 800e2ba:	4620      	mov	r0, r4
 800e2bc:	f7ff ff8a 	bl	800e1d4 <L_shift>
 800e2c0:	4544      	cmp	r4, r8
 800e2c2:	d934      	bls.n	800e32e <__hexnan+0x10e>
 800e2c4:	f1a8 0204 	sub.w	r2, r8, #4
 800e2c8:	4623      	mov	r3, r4
 800e2ca:	f853 1b04 	ldr.w	r1, [r3], #4
 800e2ce:	f842 1f04 	str.w	r1, [r2, #4]!
 800e2d2:	429f      	cmp	r7, r3
 800e2d4:	d2f9      	bcs.n	800e2ca <__hexnan+0xaa>
 800e2d6:	1b3b      	subs	r3, r7, r4
 800e2d8:	f023 0303 	bic.w	r3, r3, #3
 800e2dc:	3304      	adds	r3, #4
 800e2de:	3401      	adds	r4, #1
 800e2e0:	3e03      	subs	r6, #3
 800e2e2:	42b4      	cmp	r4, r6
 800e2e4:	bf88      	it	hi
 800e2e6:	2304      	movhi	r3, #4
 800e2e8:	4443      	add	r3, r8
 800e2ea:	2200      	movs	r2, #0
 800e2ec:	f843 2b04 	str.w	r2, [r3], #4
 800e2f0:	429f      	cmp	r7, r3
 800e2f2:	d2fb      	bcs.n	800e2ec <__hexnan+0xcc>
 800e2f4:	683b      	ldr	r3, [r7, #0]
 800e2f6:	b91b      	cbnz	r3, 800e300 <__hexnan+0xe0>
 800e2f8:	4547      	cmp	r7, r8
 800e2fa:	d127      	bne.n	800e34c <__hexnan+0x12c>
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	603b      	str	r3, [r7, #0]
 800e300:	2005      	movs	r0, #5
 800e302:	e026      	b.n	800e352 <__hexnan+0x132>
 800e304:	3501      	adds	r5, #1
 800e306:	2d08      	cmp	r5, #8
 800e308:	f10b 0b01 	add.w	fp, fp, #1
 800e30c:	dd06      	ble.n	800e31c <__hexnan+0xfc>
 800e30e:	4544      	cmp	r4, r8
 800e310:	d9c3      	bls.n	800e29a <__hexnan+0x7a>
 800e312:	2300      	movs	r3, #0
 800e314:	f844 3c04 	str.w	r3, [r4, #-4]
 800e318:	2501      	movs	r5, #1
 800e31a:	3c04      	subs	r4, #4
 800e31c:	6822      	ldr	r2, [r4, #0]
 800e31e:	f000 000f 	and.w	r0, r0, #15
 800e322:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800e326:	6022      	str	r2, [r4, #0]
 800e328:	e7b7      	b.n	800e29a <__hexnan+0x7a>
 800e32a:	2508      	movs	r5, #8
 800e32c:	e7b5      	b.n	800e29a <__hexnan+0x7a>
 800e32e:	9b01      	ldr	r3, [sp, #4]
 800e330:	2b00      	cmp	r3, #0
 800e332:	d0df      	beq.n	800e2f4 <__hexnan+0xd4>
 800e334:	f04f 32ff 	mov.w	r2, #4294967295
 800e338:	f1c3 0320 	rsb	r3, r3, #32
 800e33c:	fa22 f303 	lsr.w	r3, r2, r3
 800e340:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800e344:	401a      	ands	r2, r3
 800e346:	f846 2c04 	str.w	r2, [r6, #-4]
 800e34a:	e7d3      	b.n	800e2f4 <__hexnan+0xd4>
 800e34c:	3f04      	subs	r7, #4
 800e34e:	e7d1      	b.n	800e2f4 <__hexnan+0xd4>
 800e350:	2004      	movs	r0, #4
 800e352:	b007      	add	sp, #28
 800e354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e358 <__swhatbuf_r>:
 800e358:	b570      	push	{r4, r5, r6, lr}
 800e35a:	460e      	mov	r6, r1
 800e35c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e360:	2900      	cmp	r1, #0
 800e362:	b096      	sub	sp, #88	; 0x58
 800e364:	4614      	mov	r4, r2
 800e366:	461d      	mov	r5, r3
 800e368:	da09      	bge.n	800e37e <__swhatbuf_r+0x26>
 800e36a:	89b3      	ldrh	r3, [r6, #12]
 800e36c:	2200      	movs	r2, #0
 800e36e:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800e372:	602a      	str	r2, [r5, #0]
 800e374:	d116      	bne.n	800e3a4 <__swhatbuf_r+0x4c>
 800e376:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e37a:	6023      	str	r3, [r4, #0]
 800e37c:	e015      	b.n	800e3aa <__swhatbuf_r+0x52>
 800e37e:	466a      	mov	r2, sp
 800e380:	f000 fe04 	bl	800ef8c <_fstat_r>
 800e384:	2800      	cmp	r0, #0
 800e386:	dbf0      	blt.n	800e36a <__swhatbuf_r+0x12>
 800e388:	9a01      	ldr	r2, [sp, #4]
 800e38a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e38e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e392:	425a      	negs	r2, r3
 800e394:	415a      	adcs	r2, r3
 800e396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e39a:	602a      	str	r2, [r5, #0]
 800e39c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800e3a0:	6023      	str	r3, [r4, #0]
 800e3a2:	e002      	b.n	800e3aa <__swhatbuf_r+0x52>
 800e3a4:	2340      	movs	r3, #64	; 0x40
 800e3a6:	6023      	str	r3, [r4, #0]
 800e3a8:	4610      	mov	r0, r2
 800e3aa:	b016      	add	sp, #88	; 0x58
 800e3ac:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3b0 <__smakebuf_r>:
 800e3b0:	898b      	ldrh	r3, [r1, #12]
 800e3b2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e3b4:	079d      	lsls	r5, r3, #30
 800e3b6:	4606      	mov	r6, r0
 800e3b8:	460c      	mov	r4, r1
 800e3ba:	d507      	bpl.n	800e3cc <__smakebuf_r+0x1c>
 800e3bc:	f104 0343 	add.w	r3, r4, #67	; 0x43
 800e3c0:	6023      	str	r3, [r4, #0]
 800e3c2:	6123      	str	r3, [r4, #16]
 800e3c4:	2301      	movs	r3, #1
 800e3c6:	6163      	str	r3, [r4, #20]
 800e3c8:	b002      	add	sp, #8
 800e3ca:	bd70      	pop	{r4, r5, r6, pc}
 800e3cc:	ab01      	add	r3, sp, #4
 800e3ce:	466a      	mov	r2, sp
 800e3d0:	f7ff ffc2 	bl	800e358 <__swhatbuf_r>
 800e3d4:	9900      	ldr	r1, [sp, #0]
 800e3d6:	4605      	mov	r5, r0
 800e3d8:	4630      	mov	r0, r6
 800e3da:	f7fb fb35 	bl	8009a48 <_malloc_r>
 800e3de:	b948      	cbnz	r0, 800e3f4 <__smakebuf_r+0x44>
 800e3e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e3e4:	059a      	lsls	r2, r3, #22
 800e3e6:	d4ef      	bmi.n	800e3c8 <__smakebuf_r+0x18>
 800e3e8:	f023 0303 	bic.w	r3, r3, #3
 800e3ec:	f043 0302 	orr.w	r3, r3, #2
 800e3f0:	81a3      	strh	r3, [r4, #12]
 800e3f2:	e7e3      	b.n	800e3bc <__smakebuf_r+0xc>
 800e3f4:	4b0d      	ldr	r3, [pc, #52]	; (800e42c <__smakebuf_r+0x7c>)
 800e3f6:	63f3      	str	r3, [r6, #60]	; 0x3c
 800e3f8:	89a3      	ldrh	r3, [r4, #12]
 800e3fa:	6020      	str	r0, [r4, #0]
 800e3fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e400:	81a3      	strh	r3, [r4, #12]
 800e402:	9b00      	ldr	r3, [sp, #0]
 800e404:	6163      	str	r3, [r4, #20]
 800e406:	9b01      	ldr	r3, [sp, #4]
 800e408:	6120      	str	r0, [r4, #16]
 800e40a:	b15b      	cbz	r3, 800e424 <__smakebuf_r+0x74>
 800e40c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e410:	4630      	mov	r0, r6
 800e412:	f000 fdcd 	bl	800efb0 <_isatty_r>
 800e416:	b128      	cbz	r0, 800e424 <__smakebuf_r+0x74>
 800e418:	89a3      	ldrh	r3, [r4, #12]
 800e41a:	f023 0303 	bic.w	r3, r3, #3
 800e41e:	f043 0301 	orr.w	r3, r3, #1
 800e422:	81a3      	strh	r3, [r4, #12]
 800e424:	89a0      	ldrh	r0, [r4, #12]
 800e426:	4305      	orrs	r5, r0
 800e428:	81a5      	strh	r5, [r4, #12]
 800e42a:	e7cd      	b.n	800e3c8 <__smakebuf_r+0x18>
 800e42c:	08009649 	.word	0x08009649

0800e430 <_Balloc>:
 800e430:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e432:	b570      	push	{r4, r5, r6, lr}
 800e434:	4605      	mov	r5, r0
 800e436:	460c      	mov	r4, r1
 800e438:	b17b      	cbz	r3, 800e45a <_Balloc+0x2a>
 800e43a:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 800e43c:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800e440:	b9a0      	cbnz	r0, 800e46c <_Balloc+0x3c>
 800e442:	2101      	movs	r1, #1
 800e444:	fa01 f604 	lsl.w	r6, r1, r4
 800e448:	1d72      	adds	r2, r6, #5
 800e44a:	0092      	lsls	r2, r2, #2
 800e44c:	4628      	mov	r0, r5
 800e44e:	f000 fd5d 	bl	800ef0c <_calloc_r>
 800e452:	b148      	cbz	r0, 800e468 <_Balloc+0x38>
 800e454:	e9c0 4601 	strd	r4, r6, [r0, #4]
 800e458:	e00b      	b.n	800e472 <_Balloc+0x42>
 800e45a:	2221      	movs	r2, #33	; 0x21
 800e45c:	2104      	movs	r1, #4
 800e45e:	f000 fd55 	bl	800ef0c <_calloc_r>
 800e462:	64e8      	str	r0, [r5, #76]	; 0x4c
 800e464:	2800      	cmp	r0, #0
 800e466:	d1e8      	bne.n	800e43a <_Balloc+0xa>
 800e468:	2000      	movs	r0, #0
 800e46a:	bd70      	pop	{r4, r5, r6, pc}
 800e46c:	6802      	ldr	r2, [r0, #0]
 800e46e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
 800e472:	2300      	movs	r3, #0
 800e474:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800e478:	e7f7      	b.n	800e46a <_Balloc+0x3a>

0800e47a <_Bfree>:
 800e47a:	b131      	cbz	r1, 800e48a <_Bfree+0x10>
 800e47c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800e47e:	684a      	ldr	r2, [r1, #4]
 800e480:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800e484:	6008      	str	r0, [r1, #0]
 800e486:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800e48a:	4770      	bx	lr

0800e48c <__multadd>:
 800e48c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e490:	690e      	ldr	r6, [r1, #16]
 800e492:	4607      	mov	r7, r0
 800e494:	4698      	mov	r8, r3
 800e496:	460c      	mov	r4, r1
 800e498:	f101 0014 	add.w	r0, r1, #20
 800e49c:	2300      	movs	r3, #0
 800e49e:	6805      	ldr	r5, [r0, #0]
 800e4a0:	b2a9      	uxth	r1, r5
 800e4a2:	fb02 8101 	mla	r1, r2, r1, r8
 800e4a6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800e4aa:	0c2d      	lsrs	r5, r5, #16
 800e4ac:	fb02 c505 	mla	r5, r2, r5, ip
 800e4b0:	b289      	uxth	r1, r1
 800e4b2:	3301      	adds	r3, #1
 800e4b4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800e4b8:	429e      	cmp	r6, r3
 800e4ba:	f840 1b04 	str.w	r1, [r0], #4
 800e4be:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800e4c2:	dcec      	bgt.n	800e49e <__multadd+0x12>
 800e4c4:	f1b8 0f00 	cmp.w	r8, #0
 800e4c8:	d022      	beq.n	800e510 <__multadd+0x84>
 800e4ca:	68a3      	ldr	r3, [r4, #8]
 800e4cc:	42b3      	cmp	r3, r6
 800e4ce:	dc19      	bgt.n	800e504 <__multadd+0x78>
 800e4d0:	6861      	ldr	r1, [r4, #4]
 800e4d2:	4638      	mov	r0, r7
 800e4d4:	3101      	adds	r1, #1
 800e4d6:	f7ff ffab 	bl	800e430 <_Balloc>
 800e4da:	4605      	mov	r5, r0
 800e4dc:	b928      	cbnz	r0, 800e4ea <__multadd+0x5e>
 800e4de:	4602      	mov	r2, r0
 800e4e0:	4b0d      	ldr	r3, [pc, #52]	; (800e518 <__multadd+0x8c>)
 800e4e2:	480e      	ldr	r0, [pc, #56]	; (800e51c <__multadd+0x90>)
 800e4e4:	21b5      	movs	r1, #181	; 0xb5
 800e4e6:	f000 fcf3 	bl	800eed0 <__assert_func>
 800e4ea:	6922      	ldr	r2, [r4, #16]
 800e4ec:	3202      	adds	r2, #2
 800e4ee:	f104 010c 	add.w	r1, r4, #12
 800e4f2:	0092      	lsls	r2, r2, #2
 800e4f4:	300c      	adds	r0, #12
 800e4f6:	f7fb fd15 	bl	8009f24 <memcpy>
 800e4fa:	4621      	mov	r1, r4
 800e4fc:	4638      	mov	r0, r7
 800e4fe:	f7ff ffbc 	bl	800e47a <_Bfree>
 800e502:	462c      	mov	r4, r5
 800e504:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800e508:	3601      	adds	r6, #1
 800e50a:	f8c3 8014 	str.w	r8, [r3, #20]
 800e50e:	6126      	str	r6, [r4, #16]
 800e510:	4620      	mov	r0, r4
 800e512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e516:	bf00      	nop
 800e518:	080108a9 	.word	0x080108a9
 800e51c:	0801098c 	.word	0x0801098c

0800e520 <__s2b>:
 800e520:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e524:	460c      	mov	r4, r1
 800e526:	4615      	mov	r5, r2
 800e528:	461f      	mov	r7, r3
 800e52a:	2209      	movs	r2, #9
 800e52c:	3308      	adds	r3, #8
 800e52e:	4606      	mov	r6, r0
 800e530:	fb93 f3f2 	sdiv	r3, r3, r2
 800e534:	2100      	movs	r1, #0
 800e536:	2201      	movs	r2, #1
 800e538:	429a      	cmp	r2, r3
 800e53a:	db09      	blt.n	800e550 <__s2b+0x30>
 800e53c:	4630      	mov	r0, r6
 800e53e:	f7ff ff77 	bl	800e430 <_Balloc>
 800e542:	b940      	cbnz	r0, 800e556 <__s2b+0x36>
 800e544:	4602      	mov	r2, r0
 800e546:	4b19      	ldr	r3, [pc, #100]	; (800e5ac <__s2b+0x8c>)
 800e548:	4819      	ldr	r0, [pc, #100]	; (800e5b0 <__s2b+0x90>)
 800e54a:	21ce      	movs	r1, #206	; 0xce
 800e54c:	f000 fcc0 	bl	800eed0 <__assert_func>
 800e550:	0052      	lsls	r2, r2, #1
 800e552:	3101      	adds	r1, #1
 800e554:	e7f0      	b.n	800e538 <__s2b+0x18>
 800e556:	9b08      	ldr	r3, [sp, #32]
 800e558:	6143      	str	r3, [r0, #20]
 800e55a:	2d09      	cmp	r5, #9
 800e55c:	f04f 0301 	mov.w	r3, #1
 800e560:	6103      	str	r3, [r0, #16]
 800e562:	dd16      	ble.n	800e592 <__s2b+0x72>
 800e564:	f104 0909 	add.w	r9, r4, #9
 800e568:	46c8      	mov	r8, r9
 800e56a:	442c      	add	r4, r5
 800e56c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800e570:	4601      	mov	r1, r0
 800e572:	3b30      	subs	r3, #48	; 0x30
 800e574:	220a      	movs	r2, #10
 800e576:	4630      	mov	r0, r6
 800e578:	f7ff ff88 	bl	800e48c <__multadd>
 800e57c:	45a0      	cmp	r8, r4
 800e57e:	d1f5      	bne.n	800e56c <__s2b+0x4c>
 800e580:	f1a5 0408 	sub.w	r4, r5, #8
 800e584:	444c      	add	r4, r9
 800e586:	1b2d      	subs	r5, r5, r4
 800e588:	1963      	adds	r3, r4, r5
 800e58a:	42bb      	cmp	r3, r7
 800e58c:	db04      	blt.n	800e598 <__s2b+0x78>
 800e58e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e592:	340a      	adds	r4, #10
 800e594:	2509      	movs	r5, #9
 800e596:	e7f6      	b.n	800e586 <__s2b+0x66>
 800e598:	f814 3b01 	ldrb.w	r3, [r4], #1
 800e59c:	4601      	mov	r1, r0
 800e59e:	3b30      	subs	r3, #48	; 0x30
 800e5a0:	220a      	movs	r2, #10
 800e5a2:	4630      	mov	r0, r6
 800e5a4:	f7ff ff72 	bl	800e48c <__multadd>
 800e5a8:	e7ee      	b.n	800e588 <__s2b+0x68>
 800e5aa:	bf00      	nop
 800e5ac:	080108a9 	.word	0x080108a9
 800e5b0:	0801098c 	.word	0x0801098c

0800e5b4 <__hi0bits>:
 800e5b4:	0c03      	lsrs	r3, r0, #16
 800e5b6:	041b      	lsls	r3, r3, #16
 800e5b8:	b9d3      	cbnz	r3, 800e5f0 <__hi0bits+0x3c>
 800e5ba:	0400      	lsls	r0, r0, #16
 800e5bc:	2310      	movs	r3, #16
 800e5be:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800e5c2:	bf04      	itt	eq
 800e5c4:	0200      	lsleq	r0, r0, #8
 800e5c6:	3308      	addeq	r3, #8
 800e5c8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800e5cc:	bf04      	itt	eq
 800e5ce:	0100      	lsleq	r0, r0, #4
 800e5d0:	3304      	addeq	r3, #4
 800e5d2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800e5d6:	bf04      	itt	eq
 800e5d8:	0080      	lsleq	r0, r0, #2
 800e5da:	3302      	addeq	r3, #2
 800e5dc:	2800      	cmp	r0, #0
 800e5de:	db05      	blt.n	800e5ec <__hi0bits+0x38>
 800e5e0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800e5e4:	f103 0301 	add.w	r3, r3, #1
 800e5e8:	bf08      	it	eq
 800e5ea:	2320      	moveq	r3, #32
 800e5ec:	4618      	mov	r0, r3
 800e5ee:	4770      	bx	lr
 800e5f0:	2300      	movs	r3, #0
 800e5f2:	e7e4      	b.n	800e5be <__hi0bits+0xa>

0800e5f4 <__lo0bits>:
 800e5f4:	6803      	ldr	r3, [r0, #0]
 800e5f6:	f013 0207 	ands.w	r2, r3, #7
 800e5fa:	4601      	mov	r1, r0
 800e5fc:	d00b      	beq.n	800e616 <__lo0bits+0x22>
 800e5fe:	07da      	lsls	r2, r3, #31
 800e600:	d424      	bmi.n	800e64c <__lo0bits+0x58>
 800e602:	0798      	lsls	r0, r3, #30
 800e604:	bf49      	itett	mi
 800e606:	085b      	lsrmi	r3, r3, #1
 800e608:	089b      	lsrpl	r3, r3, #2
 800e60a:	2001      	movmi	r0, #1
 800e60c:	600b      	strmi	r3, [r1, #0]
 800e60e:	bf5c      	itt	pl
 800e610:	600b      	strpl	r3, [r1, #0]
 800e612:	2002      	movpl	r0, #2
 800e614:	4770      	bx	lr
 800e616:	b298      	uxth	r0, r3
 800e618:	b9b0      	cbnz	r0, 800e648 <__lo0bits+0x54>
 800e61a:	0c1b      	lsrs	r3, r3, #16
 800e61c:	2010      	movs	r0, #16
 800e61e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800e622:	bf04      	itt	eq
 800e624:	0a1b      	lsreq	r3, r3, #8
 800e626:	3008      	addeq	r0, #8
 800e628:	071a      	lsls	r2, r3, #28
 800e62a:	bf04      	itt	eq
 800e62c:	091b      	lsreq	r3, r3, #4
 800e62e:	3004      	addeq	r0, #4
 800e630:	079a      	lsls	r2, r3, #30
 800e632:	bf04      	itt	eq
 800e634:	089b      	lsreq	r3, r3, #2
 800e636:	3002      	addeq	r0, #2
 800e638:	07da      	lsls	r2, r3, #31
 800e63a:	d403      	bmi.n	800e644 <__lo0bits+0x50>
 800e63c:	085b      	lsrs	r3, r3, #1
 800e63e:	f100 0001 	add.w	r0, r0, #1
 800e642:	d005      	beq.n	800e650 <__lo0bits+0x5c>
 800e644:	600b      	str	r3, [r1, #0]
 800e646:	4770      	bx	lr
 800e648:	4610      	mov	r0, r2
 800e64a:	e7e8      	b.n	800e61e <__lo0bits+0x2a>
 800e64c:	2000      	movs	r0, #0
 800e64e:	4770      	bx	lr
 800e650:	2020      	movs	r0, #32
 800e652:	4770      	bx	lr

0800e654 <__i2b>:
 800e654:	b510      	push	{r4, lr}
 800e656:	460c      	mov	r4, r1
 800e658:	2101      	movs	r1, #1
 800e65a:	f7ff fee9 	bl	800e430 <_Balloc>
 800e65e:	4602      	mov	r2, r0
 800e660:	b928      	cbnz	r0, 800e66e <__i2b+0x1a>
 800e662:	4b05      	ldr	r3, [pc, #20]	; (800e678 <__i2b+0x24>)
 800e664:	4805      	ldr	r0, [pc, #20]	; (800e67c <__i2b+0x28>)
 800e666:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800e66a:	f000 fc31 	bl	800eed0 <__assert_func>
 800e66e:	2301      	movs	r3, #1
 800e670:	6144      	str	r4, [r0, #20]
 800e672:	6103      	str	r3, [r0, #16]
 800e674:	bd10      	pop	{r4, pc}
 800e676:	bf00      	nop
 800e678:	080108a9 	.word	0x080108a9
 800e67c:	0801098c 	.word	0x0801098c

0800e680 <__multiply>:
 800e680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e684:	4614      	mov	r4, r2
 800e686:	690a      	ldr	r2, [r1, #16]
 800e688:	6923      	ldr	r3, [r4, #16]
 800e68a:	429a      	cmp	r2, r3
 800e68c:	bfb8      	it	lt
 800e68e:	460b      	movlt	r3, r1
 800e690:	460d      	mov	r5, r1
 800e692:	bfbc      	itt	lt
 800e694:	4625      	movlt	r5, r4
 800e696:	461c      	movlt	r4, r3
 800e698:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800e69c:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800e6a0:	68ab      	ldr	r3, [r5, #8]
 800e6a2:	6869      	ldr	r1, [r5, #4]
 800e6a4:	eb0a 0709 	add.w	r7, sl, r9
 800e6a8:	42bb      	cmp	r3, r7
 800e6aa:	b085      	sub	sp, #20
 800e6ac:	bfb8      	it	lt
 800e6ae:	3101      	addlt	r1, #1
 800e6b0:	f7ff febe 	bl	800e430 <_Balloc>
 800e6b4:	b930      	cbnz	r0, 800e6c4 <__multiply+0x44>
 800e6b6:	4602      	mov	r2, r0
 800e6b8:	4b42      	ldr	r3, [pc, #264]	; (800e7c4 <__multiply+0x144>)
 800e6ba:	4843      	ldr	r0, [pc, #268]	; (800e7c8 <__multiply+0x148>)
 800e6bc:	f240 115d 	movw	r1, #349	; 0x15d
 800e6c0:	f000 fc06 	bl	800eed0 <__assert_func>
 800e6c4:	f100 0614 	add.w	r6, r0, #20
 800e6c8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800e6cc:	4633      	mov	r3, r6
 800e6ce:	2200      	movs	r2, #0
 800e6d0:	4543      	cmp	r3, r8
 800e6d2:	d31e      	bcc.n	800e712 <__multiply+0x92>
 800e6d4:	f105 0c14 	add.w	ip, r5, #20
 800e6d8:	f104 0314 	add.w	r3, r4, #20
 800e6dc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800e6e0:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800e6e4:	9202      	str	r2, [sp, #8]
 800e6e6:	ebac 0205 	sub.w	r2, ip, r5
 800e6ea:	3a15      	subs	r2, #21
 800e6ec:	f022 0203 	bic.w	r2, r2, #3
 800e6f0:	3204      	adds	r2, #4
 800e6f2:	f105 0115 	add.w	r1, r5, #21
 800e6f6:	458c      	cmp	ip, r1
 800e6f8:	bf38      	it	cc
 800e6fa:	2204      	movcc	r2, #4
 800e6fc:	9201      	str	r2, [sp, #4]
 800e6fe:	9a02      	ldr	r2, [sp, #8]
 800e700:	9303      	str	r3, [sp, #12]
 800e702:	429a      	cmp	r2, r3
 800e704:	d808      	bhi.n	800e718 <__multiply+0x98>
 800e706:	2f00      	cmp	r7, #0
 800e708:	dc55      	bgt.n	800e7b6 <__multiply+0x136>
 800e70a:	6107      	str	r7, [r0, #16]
 800e70c:	b005      	add	sp, #20
 800e70e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e712:	f843 2b04 	str.w	r2, [r3], #4
 800e716:	e7db      	b.n	800e6d0 <__multiply+0x50>
 800e718:	f8b3 a000 	ldrh.w	sl, [r3]
 800e71c:	f1ba 0f00 	cmp.w	sl, #0
 800e720:	d020      	beq.n	800e764 <__multiply+0xe4>
 800e722:	f105 0e14 	add.w	lr, r5, #20
 800e726:	46b1      	mov	r9, r6
 800e728:	2200      	movs	r2, #0
 800e72a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800e72e:	f8d9 b000 	ldr.w	fp, [r9]
 800e732:	b2a1      	uxth	r1, r4
 800e734:	fa1f fb8b 	uxth.w	fp, fp
 800e738:	fb0a b101 	mla	r1, sl, r1, fp
 800e73c:	4411      	add	r1, r2
 800e73e:	f8d9 2000 	ldr.w	r2, [r9]
 800e742:	0c24      	lsrs	r4, r4, #16
 800e744:	0c12      	lsrs	r2, r2, #16
 800e746:	fb0a 2404 	mla	r4, sl, r4, r2
 800e74a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800e74e:	b289      	uxth	r1, r1
 800e750:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800e754:	45f4      	cmp	ip, lr
 800e756:	f849 1b04 	str.w	r1, [r9], #4
 800e75a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800e75e:	d8e4      	bhi.n	800e72a <__multiply+0xaa>
 800e760:	9901      	ldr	r1, [sp, #4]
 800e762:	5072      	str	r2, [r6, r1]
 800e764:	9a03      	ldr	r2, [sp, #12]
 800e766:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e76a:	3304      	adds	r3, #4
 800e76c:	f1b9 0f00 	cmp.w	r9, #0
 800e770:	d01f      	beq.n	800e7b2 <__multiply+0x132>
 800e772:	6834      	ldr	r4, [r6, #0]
 800e774:	f105 0114 	add.w	r1, r5, #20
 800e778:	46b6      	mov	lr, r6
 800e77a:	f04f 0a00 	mov.w	sl, #0
 800e77e:	880a      	ldrh	r2, [r1, #0]
 800e780:	f8be b002 	ldrh.w	fp, [lr, #2]
 800e784:	fb09 b202 	mla	r2, r9, r2, fp
 800e788:	4492      	add	sl, r2
 800e78a:	b2a4      	uxth	r4, r4
 800e78c:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800e790:	f84e 4b04 	str.w	r4, [lr], #4
 800e794:	f851 4b04 	ldr.w	r4, [r1], #4
 800e798:	f8be 2000 	ldrh.w	r2, [lr]
 800e79c:	0c24      	lsrs	r4, r4, #16
 800e79e:	fb09 2404 	mla	r4, r9, r4, r2
 800e7a2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800e7a6:	458c      	cmp	ip, r1
 800e7a8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800e7ac:	d8e7      	bhi.n	800e77e <__multiply+0xfe>
 800e7ae:	9a01      	ldr	r2, [sp, #4]
 800e7b0:	50b4      	str	r4, [r6, r2]
 800e7b2:	3604      	adds	r6, #4
 800e7b4:	e7a3      	b.n	800e6fe <__multiply+0x7e>
 800e7b6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d1a5      	bne.n	800e70a <__multiply+0x8a>
 800e7be:	3f01      	subs	r7, #1
 800e7c0:	e7a1      	b.n	800e706 <__multiply+0x86>
 800e7c2:	bf00      	nop
 800e7c4:	080108a9 	.word	0x080108a9
 800e7c8:	0801098c 	.word	0x0801098c

0800e7cc <__pow5mult>:
 800e7cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e7d0:	4615      	mov	r5, r2
 800e7d2:	f012 0203 	ands.w	r2, r2, #3
 800e7d6:	4606      	mov	r6, r0
 800e7d8:	460f      	mov	r7, r1
 800e7da:	d007      	beq.n	800e7ec <__pow5mult+0x20>
 800e7dc:	4c1a      	ldr	r4, [pc, #104]	; (800e848 <__pow5mult+0x7c>)
 800e7de:	3a01      	subs	r2, #1
 800e7e0:	2300      	movs	r3, #0
 800e7e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e7e6:	f7ff fe51 	bl	800e48c <__multadd>
 800e7ea:	4607      	mov	r7, r0
 800e7ec:	10ad      	asrs	r5, r5, #2
 800e7ee:	d027      	beq.n	800e840 <__pow5mult+0x74>
 800e7f0:	6cb4      	ldr	r4, [r6, #72]	; 0x48
 800e7f2:	b944      	cbnz	r4, 800e806 <__pow5mult+0x3a>
 800e7f4:	f240 2171 	movw	r1, #625	; 0x271
 800e7f8:	4630      	mov	r0, r6
 800e7fa:	f7ff ff2b 	bl	800e654 <__i2b>
 800e7fe:	2300      	movs	r3, #0
 800e800:	64b0      	str	r0, [r6, #72]	; 0x48
 800e802:	4604      	mov	r4, r0
 800e804:	6003      	str	r3, [r0, #0]
 800e806:	f04f 0900 	mov.w	r9, #0
 800e80a:	07eb      	lsls	r3, r5, #31
 800e80c:	d50a      	bpl.n	800e824 <__pow5mult+0x58>
 800e80e:	4639      	mov	r1, r7
 800e810:	4622      	mov	r2, r4
 800e812:	4630      	mov	r0, r6
 800e814:	f7ff ff34 	bl	800e680 <__multiply>
 800e818:	4639      	mov	r1, r7
 800e81a:	4680      	mov	r8, r0
 800e81c:	4630      	mov	r0, r6
 800e81e:	f7ff fe2c 	bl	800e47a <_Bfree>
 800e822:	4647      	mov	r7, r8
 800e824:	106d      	asrs	r5, r5, #1
 800e826:	d00b      	beq.n	800e840 <__pow5mult+0x74>
 800e828:	6820      	ldr	r0, [r4, #0]
 800e82a:	b938      	cbnz	r0, 800e83c <__pow5mult+0x70>
 800e82c:	4622      	mov	r2, r4
 800e82e:	4621      	mov	r1, r4
 800e830:	4630      	mov	r0, r6
 800e832:	f7ff ff25 	bl	800e680 <__multiply>
 800e836:	6020      	str	r0, [r4, #0]
 800e838:	f8c0 9000 	str.w	r9, [r0]
 800e83c:	4604      	mov	r4, r0
 800e83e:	e7e4      	b.n	800e80a <__pow5mult+0x3e>
 800e840:	4638      	mov	r0, r7
 800e842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e846:	bf00      	nop
 800e848:	08010ae0 	.word	0x08010ae0

0800e84c <__lshift>:
 800e84c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e850:	460c      	mov	r4, r1
 800e852:	6849      	ldr	r1, [r1, #4]
 800e854:	6923      	ldr	r3, [r4, #16]
 800e856:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e85a:	68a3      	ldr	r3, [r4, #8]
 800e85c:	4607      	mov	r7, r0
 800e85e:	4691      	mov	r9, r2
 800e860:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e864:	f108 0601 	add.w	r6, r8, #1
 800e868:	42b3      	cmp	r3, r6
 800e86a:	db0b      	blt.n	800e884 <__lshift+0x38>
 800e86c:	4638      	mov	r0, r7
 800e86e:	f7ff fddf 	bl	800e430 <_Balloc>
 800e872:	4605      	mov	r5, r0
 800e874:	b948      	cbnz	r0, 800e88a <__lshift+0x3e>
 800e876:	4602      	mov	r2, r0
 800e878:	4b28      	ldr	r3, [pc, #160]	; (800e91c <__lshift+0xd0>)
 800e87a:	4829      	ldr	r0, [pc, #164]	; (800e920 <__lshift+0xd4>)
 800e87c:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e880:	f000 fb26 	bl	800eed0 <__assert_func>
 800e884:	3101      	adds	r1, #1
 800e886:	005b      	lsls	r3, r3, #1
 800e888:	e7ee      	b.n	800e868 <__lshift+0x1c>
 800e88a:	2300      	movs	r3, #0
 800e88c:	f100 0114 	add.w	r1, r0, #20
 800e890:	f100 0210 	add.w	r2, r0, #16
 800e894:	4618      	mov	r0, r3
 800e896:	4553      	cmp	r3, sl
 800e898:	db33      	blt.n	800e902 <__lshift+0xb6>
 800e89a:	6920      	ldr	r0, [r4, #16]
 800e89c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e8a0:	f104 0314 	add.w	r3, r4, #20
 800e8a4:	f019 091f 	ands.w	r9, r9, #31
 800e8a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e8ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800e8b0:	d02b      	beq.n	800e90a <__lshift+0xbe>
 800e8b2:	f1c9 0e20 	rsb	lr, r9, #32
 800e8b6:	468a      	mov	sl, r1
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	6818      	ldr	r0, [r3, #0]
 800e8bc:	fa00 f009 	lsl.w	r0, r0, r9
 800e8c0:	4302      	orrs	r2, r0
 800e8c2:	f84a 2b04 	str.w	r2, [sl], #4
 800e8c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e8ca:	459c      	cmp	ip, r3
 800e8cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800e8d0:	d8f3      	bhi.n	800e8ba <__lshift+0x6e>
 800e8d2:	ebac 0304 	sub.w	r3, ip, r4
 800e8d6:	3b15      	subs	r3, #21
 800e8d8:	f023 0303 	bic.w	r3, r3, #3
 800e8dc:	3304      	adds	r3, #4
 800e8de:	f104 0015 	add.w	r0, r4, #21
 800e8e2:	4584      	cmp	ip, r0
 800e8e4:	bf38      	it	cc
 800e8e6:	2304      	movcc	r3, #4
 800e8e8:	50ca      	str	r2, [r1, r3]
 800e8ea:	b10a      	cbz	r2, 800e8f0 <__lshift+0xa4>
 800e8ec:	f108 0602 	add.w	r6, r8, #2
 800e8f0:	3e01      	subs	r6, #1
 800e8f2:	4638      	mov	r0, r7
 800e8f4:	612e      	str	r6, [r5, #16]
 800e8f6:	4621      	mov	r1, r4
 800e8f8:	f7ff fdbf 	bl	800e47a <_Bfree>
 800e8fc:	4628      	mov	r0, r5
 800e8fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e902:	f842 0f04 	str.w	r0, [r2, #4]!
 800e906:	3301      	adds	r3, #1
 800e908:	e7c5      	b.n	800e896 <__lshift+0x4a>
 800e90a:	3904      	subs	r1, #4
 800e90c:	f853 2b04 	ldr.w	r2, [r3], #4
 800e910:	f841 2f04 	str.w	r2, [r1, #4]!
 800e914:	459c      	cmp	ip, r3
 800e916:	d8f9      	bhi.n	800e90c <__lshift+0xc0>
 800e918:	e7ea      	b.n	800e8f0 <__lshift+0xa4>
 800e91a:	bf00      	nop
 800e91c:	080108a9 	.word	0x080108a9
 800e920:	0801098c 	.word	0x0801098c

0800e924 <__mcmp>:
 800e924:	b530      	push	{r4, r5, lr}
 800e926:	6902      	ldr	r2, [r0, #16]
 800e928:	690c      	ldr	r4, [r1, #16]
 800e92a:	1b12      	subs	r2, r2, r4
 800e92c:	d10e      	bne.n	800e94c <__mcmp+0x28>
 800e92e:	f100 0314 	add.w	r3, r0, #20
 800e932:	3114      	adds	r1, #20
 800e934:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e938:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e93c:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e940:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e944:	42a5      	cmp	r5, r4
 800e946:	d003      	beq.n	800e950 <__mcmp+0x2c>
 800e948:	d305      	bcc.n	800e956 <__mcmp+0x32>
 800e94a:	2201      	movs	r2, #1
 800e94c:	4610      	mov	r0, r2
 800e94e:	bd30      	pop	{r4, r5, pc}
 800e950:	4283      	cmp	r3, r0
 800e952:	d3f3      	bcc.n	800e93c <__mcmp+0x18>
 800e954:	e7fa      	b.n	800e94c <__mcmp+0x28>
 800e956:	f04f 32ff 	mov.w	r2, #4294967295
 800e95a:	e7f7      	b.n	800e94c <__mcmp+0x28>

0800e95c <__mdiff>:
 800e95c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e960:	460c      	mov	r4, r1
 800e962:	4606      	mov	r6, r0
 800e964:	4611      	mov	r1, r2
 800e966:	4620      	mov	r0, r4
 800e968:	4617      	mov	r7, r2
 800e96a:	f7ff ffdb 	bl	800e924 <__mcmp>
 800e96e:	1e05      	subs	r5, r0, #0
 800e970:	d110      	bne.n	800e994 <__mdiff+0x38>
 800e972:	4629      	mov	r1, r5
 800e974:	4630      	mov	r0, r6
 800e976:	f7ff fd5b 	bl	800e430 <_Balloc>
 800e97a:	b930      	cbnz	r0, 800e98a <__mdiff+0x2e>
 800e97c:	4b39      	ldr	r3, [pc, #228]	; (800ea64 <__mdiff+0x108>)
 800e97e:	4602      	mov	r2, r0
 800e980:	f240 2132 	movw	r1, #562	; 0x232
 800e984:	4838      	ldr	r0, [pc, #224]	; (800ea68 <__mdiff+0x10c>)
 800e986:	f000 faa3 	bl	800eed0 <__assert_func>
 800e98a:	2301      	movs	r3, #1
 800e98c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e994:	bfa4      	itt	ge
 800e996:	463b      	movge	r3, r7
 800e998:	4627      	movge	r7, r4
 800e99a:	4630      	mov	r0, r6
 800e99c:	6879      	ldr	r1, [r7, #4]
 800e99e:	bfa6      	itte	ge
 800e9a0:	461c      	movge	r4, r3
 800e9a2:	2500      	movge	r5, #0
 800e9a4:	2501      	movlt	r5, #1
 800e9a6:	f7ff fd43 	bl	800e430 <_Balloc>
 800e9aa:	b920      	cbnz	r0, 800e9b6 <__mdiff+0x5a>
 800e9ac:	4b2d      	ldr	r3, [pc, #180]	; (800ea64 <__mdiff+0x108>)
 800e9ae:	4602      	mov	r2, r0
 800e9b0:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e9b4:	e7e6      	b.n	800e984 <__mdiff+0x28>
 800e9b6:	693e      	ldr	r6, [r7, #16]
 800e9b8:	60c5      	str	r5, [r0, #12]
 800e9ba:	6925      	ldr	r5, [r4, #16]
 800e9bc:	f107 0114 	add.w	r1, r7, #20
 800e9c0:	f104 0914 	add.w	r9, r4, #20
 800e9c4:	f100 0e14 	add.w	lr, r0, #20
 800e9c8:	f107 0210 	add.w	r2, r7, #16
 800e9cc:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800e9d0:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800e9d4:	46f2      	mov	sl, lr
 800e9d6:	2700      	movs	r7, #0
 800e9d8:	f859 3b04 	ldr.w	r3, [r9], #4
 800e9dc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e9e0:	fa1f f883 	uxth.w	r8, r3
 800e9e4:	fa17 f78b 	uxtah	r7, r7, fp
 800e9e8:	0c1b      	lsrs	r3, r3, #16
 800e9ea:	eba7 0808 	sub.w	r8, r7, r8
 800e9ee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e9f2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e9f6:	fa1f f888 	uxth.w	r8, r8
 800e9fa:	141f      	asrs	r7, r3, #16
 800e9fc:	454d      	cmp	r5, r9
 800e9fe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800ea02:	f84a 3b04 	str.w	r3, [sl], #4
 800ea06:	d8e7      	bhi.n	800e9d8 <__mdiff+0x7c>
 800ea08:	1b2b      	subs	r3, r5, r4
 800ea0a:	3b15      	subs	r3, #21
 800ea0c:	f023 0303 	bic.w	r3, r3, #3
 800ea10:	3304      	adds	r3, #4
 800ea12:	3415      	adds	r4, #21
 800ea14:	42a5      	cmp	r5, r4
 800ea16:	bf38      	it	cc
 800ea18:	2304      	movcc	r3, #4
 800ea1a:	4419      	add	r1, r3
 800ea1c:	4473      	add	r3, lr
 800ea1e:	469e      	mov	lr, r3
 800ea20:	460d      	mov	r5, r1
 800ea22:	4565      	cmp	r5, ip
 800ea24:	d30e      	bcc.n	800ea44 <__mdiff+0xe8>
 800ea26:	f10c 0203 	add.w	r2, ip, #3
 800ea2a:	1a52      	subs	r2, r2, r1
 800ea2c:	f022 0203 	bic.w	r2, r2, #3
 800ea30:	3903      	subs	r1, #3
 800ea32:	458c      	cmp	ip, r1
 800ea34:	bf38      	it	cc
 800ea36:	2200      	movcc	r2, #0
 800ea38:	441a      	add	r2, r3
 800ea3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ea3e:	b17b      	cbz	r3, 800ea60 <__mdiff+0x104>
 800ea40:	6106      	str	r6, [r0, #16]
 800ea42:	e7a5      	b.n	800e990 <__mdiff+0x34>
 800ea44:	f855 8b04 	ldr.w	r8, [r5], #4
 800ea48:	fa17 f488 	uxtah	r4, r7, r8
 800ea4c:	1422      	asrs	r2, r4, #16
 800ea4e:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800ea52:	b2a4      	uxth	r4, r4
 800ea54:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800ea58:	f84e 4b04 	str.w	r4, [lr], #4
 800ea5c:	1417      	asrs	r7, r2, #16
 800ea5e:	e7e0      	b.n	800ea22 <__mdiff+0xc6>
 800ea60:	3e01      	subs	r6, #1
 800ea62:	e7ea      	b.n	800ea3a <__mdiff+0xde>
 800ea64:	080108a9 	.word	0x080108a9
 800ea68:	0801098c 	.word	0x0801098c

0800ea6c <__ulp>:
 800ea6c:	b082      	sub	sp, #8
 800ea6e:	ed8d 0b00 	vstr	d0, [sp]
 800ea72:	9b01      	ldr	r3, [sp, #4]
 800ea74:	4912      	ldr	r1, [pc, #72]	; (800eac0 <__ulp+0x54>)
 800ea76:	4019      	ands	r1, r3
 800ea78:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ea7c:	2900      	cmp	r1, #0
 800ea7e:	dd05      	ble.n	800ea8c <__ulp+0x20>
 800ea80:	2200      	movs	r2, #0
 800ea82:	460b      	mov	r3, r1
 800ea84:	ec43 2b10 	vmov	d0, r2, r3
 800ea88:	b002      	add	sp, #8
 800ea8a:	4770      	bx	lr
 800ea8c:	4249      	negs	r1, r1
 800ea8e:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ea92:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ea96:	f04f 0200 	mov.w	r2, #0
 800ea9a:	f04f 0300 	mov.w	r3, #0
 800ea9e:	da04      	bge.n	800eaaa <__ulp+0x3e>
 800eaa0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800eaa4:	fa41 f300 	asr.w	r3, r1, r0
 800eaa8:	e7ec      	b.n	800ea84 <__ulp+0x18>
 800eaaa:	f1a0 0114 	sub.w	r1, r0, #20
 800eaae:	291e      	cmp	r1, #30
 800eab0:	bfda      	itte	le
 800eab2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800eab6:	fa20 f101 	lsrle.w	r1, r0, r1
 800eaba:	2101      	movgt	r1, #1
 800eabc:	460a      	mov	r2, r1
 800eabe:	e7e1      	b.n	800ea84 <__ulp+0x18>
 800eac0:	7ff00000 	.word	0x7ff00000

0800eac4 <__b2d>:
 800eac4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eac6:	6905      	ldr	r5, [r0, #16]
 800eac8:	f100 0714 	add.w	r7, r0, #20
 800eacc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ead0:	1f2e      	subs	r6, r5, #4
 800ead2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ead6:	4620      	mov	r0, r4
 800ead8:	f7ff fd6c 	bl	800e5b4 <__hi0bits>
 800eadc:	f1c0 0320 	rsb	r3, r0, #32
 800eae0:	280a      	cmp	r0, #10
 800eae2:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800eb60 <__b2d+0x9c>
 800eae6:	600b      	str	r3, [r1, #0]
 800eae8:	dc14      	bgt.n	800eb14 <__b2d+0x50>
 800eaea:	f1c0 0e0b 	rsb	lr, r0, #11
 800eaee:	fa24 f10e 	lsr.w	r1, r4, lr
 800eaf2:	42b7      	cmp	r7, r6
 800eaf4:	ea41 030c 	orr.w	r3, r1, ip
 800eaf8:	bf34      	ite	cc
 800eafa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eafe:	2100      	movcs	r1, #0
 800eb00:	3015      	adds	r0, #21
 800eb02:	fa04 f000 	lsl.w	r0, r4, r0
 800eb06:	fa21 f10e 	lsr.w	r1, r1, lr
 800eb0a:	ea40 0201 	orr.w	r2, r0, r1
 800eb0e:	ec43 2b10 	vmov	d0, r2, r3
 800eb12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800eb14:	42b7      	cmp	r7, r6
 800eb16:	bf3a      	itte	cc
 800eb18:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800eb1c:	f1a5 0608 	subcc.w	r6, r5, #8
 800eb20:	2100      	movcs	r1, #0
 800eb22:	380b      	subs	r0, #11
 800eb24:	d017      	beq.n	800eb56 <__b2d+0x92>
 800eb26:	f1c0 0c20 	rsb	ip, r0, #32
 800eb2a:	fa04 f500 	lsl.w	r5, r4, r0
 800eb2e:	42be      	cmp	r6, r7
 800eb30:	fa21 f40c 	lsr.w	r4, r1, ip
 800eb34:	ea45 0504 	orr.w	r5, r5, r4
 800eb38:	bf8c      	ite	hi
 800eb3a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800eb3e:	2400      	movls	r4, #0
 800eb40:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800eb44:	fa01 f000 	lsl.w	r0, r1, r0
 800eb48:	fa24 f40c 	lsr.w	r4, r4, ip
 800eb4c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800eb50:	ea40 0204 	orr.w	r2, r0, r4
 800eb54:	e7db      	b.n	800eb0e <__b2d+0x4a>
 800eb56:	ea44 030c 	orr.w	r3, r4, ip
 800eb5a:	460a      	mov	r2, r1
 800eb5c:	e7d7      	b.n	800eb0e <__b2d+0x4a>
 800eb5e:	bf00      	nop
 800eb60:	3ff00000 	.word	0x3ff00000

0800eb64 <__d2b>:
 800eb64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800eb68:	4689      	mov	r9, r1
 800eb6a:	2101      	movs	r1, #1
 800eb6c:	ec57 6b10 	vmov	r6, r7, d0
 800eb70:	4690      	mov	r8, r2
 800eb72:	f7ff fc5d 	bl	800e430 <_Balloc>
 800eb76:	4604      	mov	r4, r0
 800eb78:	b930      	cbnz	r0, 800eb88 <__d2b+0x24>
 800eb7a:	4602      	mov	r2, r0
 800eb7c:	4b25      	ldr	r3, [pc, #148]	; (800ec14 <__d2b+0xb0>)
 800eb7e:	4826      	ldr	r0, [pc, #152]	; (800ec18 <__d2b+0xb4>)
 800eb80:	f240 310a 	movw	r1, #778	; 0x30a
 800eb84:	f000 f9a4 	bl	800eed0 <__assert_func>
 800eb88:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800eb8c:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800eb90:	bb35      	cbnz	r5, 800ebe0 <__d2b+0x7c>
 800eb92:	2e00      	cmp	r6, #0
 800eb94:	9301      	str	r3, [sp, #4]
 800eb96:	d028      	beq.n	800ebea <__d2b+0x86>
 800eb98:	4668      	mov	r0, sp
 800eb9a:	9600      	str	r6, [sp, #0]
 800eb9c:	f7ff fd2a 	bl	800e5f4 <__lo0bits>
 800eba0:	9900      	ldr	r1, [sp, #0]
 800eba2:	b300      	cbz	r0, 800ebe6 <__d2b+0x82>
 800eba4:	9a01      	ldr	r2, [sp, #4]
 800eba6:	f1c0 0320 	rsb	r3, r0, #32
 800ebaa:	fa02 f303 	lsl.w	r3, r2, r3
 800ebae:	430b      	orrs	r3, r1
 800ebb0:	40c2      	lsrs	r2, r0
 800ebb2:	6163      	str	r3, [r4, #20]
 800ebb4:	9201      	str	r2, [sp, #4]
 800ebb6:	9b01      	ldr	r3, [sp, #4]
 800ebb8:	61a3      	str	r3, [r4, #24]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	bf14      	ite	ne
 800ebbe:	2202      	movne	r2, #2
 800ebc0:	2201      	moveq	r2, #1
 800ebc2:	6122      	str	r2, [r4, #16]
 800ebc4:	b1d5      	cbz	r5, 800ebfc <__d2b+0x98>
 800ebc6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ebca:	4405      	add	r5, r0
 800ebcc:	f8c9 5000 	str.w	r5, [r9]
 800ebd0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ebd4:	f8c8 0000 	str.w	r0, [r8]
 800ebd8:	4620      	mov	r0, r4
 800ebda:	b003      	add	sp, #12
 800ebdc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ebe0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ebe4:	e7d5      	b.n	800eb92 <__d2b+0x2e>
 800ebe6:	6161      	str	r1, [r4, #20]
 800ebe8:	e7e5      	b.n	800ebb6 <__d2b+0x52>
 800ebea:	a801      	add	r0, sp, #4
 800ebec:	f7ff fd02 	bl	800e5f4 <__lo0bits>
 800ebf0:	9b01      	ldr	r3, [sp, #4]
 800ebf2:	6163      	str	r3, [r4, #20]
 800ebf4:	2201      	movs	r2, #1
 800ebf6:	6122      	str	r2, [r4, #16]
 800ebf8:	3020      	adds	r0, #32
 800ebfa:	e7e3      	b.n	800ebc4 <__d2b+0x60>
 800ebfc:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ec00:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ec04:	f8c9 0000 	str.w	r0, [r9]
 800ec08:	6918      	ldr	r0, [r3, #16]
 800ec0a:	f7ff fcd3 	bl	800e5b4 <__hi0bits>
 800ec0e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ec12:	e7df      	b.n	800ebd4 <__d2b+0x70>
 800ec14:	080108a9 	.word	0x080108a9
 800ec18:	0801098c 	.word	0x0801098c

0800ec1c <__ratio>:
 800ec1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec20:	4688      	mov	r8, r1
 800ec22:	4669      	mov	r1, sp
 800ec24:	4681      	mov	r9, r0
 800ec26:	f7ff ff4d 	bl	800eac4 <__b2d>
 800ec2a:	a901      	add	r1, sp, #4
 800ec2c:	4640      	mov	r0, r8
 800ec2e:	ec55 4b10 	vmov	r4, r5, d0
 800ec32:	f7ff ff47 	bl	800eac4 <__b2d>
 800ec36:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ec3a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ec3e:	eba3 0c02 	sub.w	ip, r3, r2
 800ec42:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ec46:	1a9b      	subs	r3, r3, r2
 800ec48:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ec4c:	ec51 0b10 	vmov	r0, r1, d0
 800ec50:	2b00      	cmp	r3, #0
 800ec52:	bfd6      	itet	le
 800ec54:	460a      	movle	r2, r1
 800ec56:	462a      	movgt	r2, r5
 800ec58:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ec5c:	468b      	mov	fp, r1
 800ec5e:	462f      	mov	r7, r5
 800ec60:	bfd4      	ite	le
 800ec62:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ec66:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ec6a:	4620      	mov	r0, r4
 800ec6c:	ee10 2a10 	vmov	r2, s0
 800ec70:	465b      	mov	r3, fp
 800ec72:	4639      	mov	r1, r7
 800ec74:	f7f1 fdea 	bl	800084c <__aeabi_ddiv>
 800ec78:	ec41 0b10 	vmov	d0, r0, r1
 800ec7c:	b003      	add	sp, #12
 800ec7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ec82 <__copybits>:
 800ec82:	3901      	subs	r1, #1
 800ec84:	b570      	push	{r4, r5, r6, lr}
 800ec86:	1149      	asrs	r1, r1, #5
 800ec88:	6914      	ldr	r4, [r2, #16]
 800ec8a:	3101      	adds	r1, #1
 800ec8c:	f102 0314 	add.w	r3, r2, #20
 800ec90:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ec94:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ec98:	1f05      	subs	r5, r0, #4
 800ec9a:	42a3      	cmp	r3, r4
 800ec9c:	d30c      	bcc.n	800ecb8 <__copybits+0x36>
 800ec9e:	1aa3      	subs	r3, r4, r2
 800eca0:	3b11      	subs	r3, #17
 800eca2:	f023 0303 	bic.w	r3, r3, #3
 800eca6:	3211      	adds	r2, #17
 800eca8:	42a2      	cmp	r2, r4
 800ecaa:	bf88      	it	hi
 800ecac:	2300      	movhi	r3, #0
 800ecae:	4418      	add	r0, r3
 800ecb0:	2300      	movs	r3, #0
 800ecb2:	4288      	cmp	r0, r1
 800ecb4:	d305      	bcc.n	800ecc2 <__copybits+0x40>
 800ecb6:	bd70      	pop	{r4, r5, r6, pc}
 800ecb8:	f853 6b04 	ldr.w	r6, [r3], #4
 800ecbc:	f845 6f04 	str.w	r6, [r5, #4]!
 800ecc0:	e7eb      	b.n	800ec9a <__copybits+0x18>
 800ecc2:	f840 3b04 	str.w	r3, [r0], #4
 800ecc6:	e7f4      	b.n	800ecb2 <__copybits+0x30>

0800ecc8 <__any_on>:
 800ecc8:	f100 0214 	add.w	r2, r0, #20
 800eccc:	6900      	ldr	r0, [r0, #16]
 800ecce:	114b      	asrs	r3, r1, #5
 800ecd0:	4298      	cmp	r0, r3
 800ecd2:	b510      	push	{r4, lr}
 800ecd4:	db11      	blt.n	800ecfa <__any_on+0x32>
 800ecd6:	dd0a      	ble.n	800ecee <__any_on+0x26>
 800ecd8:	f011 011f 	ands.w	r1, r1, #31
 800ecdc:	d007      	beq.n	800ecee <__any_on+0x26>
 800ecde:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ece2:	fa24 f001 	lsr.w	r0, r4, r1
 800ece6:	fa00 f101 	lsl.w	r1, r0, r1
 800ecea:	428c      	cmp	r4, r1
 800ecec:	d10b      	bne.n	800ed06 <__any_on+0x3e>
 800ecee:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ecf2:	4293      	cmp	r3, r2
 800ecf4:	d803      	bhi.n	800ecfe <__any_on+0x36>
 800ecf6:	2000      	movs	r0, #0
 800ecf8:	bd10      	pop	{r4, pc}
 800ecfa:	4603      	mov	r3, r0
 800ecfc:	e7f7      	b.n	800ecee <__any_on+0x26>
 800ecfe:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ed02:	2900      	cmp	r1, #0
 800ed04:	d0f5      	beq.n	800ecf2 <__any_on+0x2a>
 800ed06:	2001      	movs	r0, #1
 800ed08:	e7f6      	b.n	800ecf8 <__any_on+0x30>
	...

0800ed0c <frexp>:
 800ed0c:	b570      	push	{r4, r5, r6, lr}
 800ed0e:	2100      	movs	r1, #0
 800ed10:	ec55 4b10 	vmov	r4, r5, d0
 800ed14:	6001      	str	r1, [r0, #0]
 800ed16:	4916      	ldr	r1, [pc, #88]	; (800ed70 <frexp+0x64>)
 800ed18:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800ed1c:	428a      	cmp	r2, r1
 800ed1e:	4606      	mov	r6, r0
 800ed20:	462b      	mov	r3, r5
 800ed22:	dc22      	bgt.n	800ed6a <frexp+0x5e>
 800ed24:	ee10 1a10 	vmov	r1, s0
 800ed28:	4311      	orrs	r1, r2
 800ed2a:	d01e      	beq.n	800ed6a <frexp+0x5e>
 800ed2c:	4911      	ldr	r1, [pc, #68]	; (800ed74 <frexp+0x68>)
 800ed2e:	4029      	ands	r1, r5
 800ed30:	b969      	cbnz	r1, 800ed4e <frexp+0x42>
 800ed32:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <frexp+0x6c>)
 800ed34:	2200      	movs	r2, #0
 800ed36:	ee10 0a10 	vmov	r0, s0
 800ed3a:	4629      	mov	r1, r5
 800ed3c:	f7f1 fc5c 	bl	80005f8 <__aeabi_dmul>
 800ed40:	460b      	mov	r3, r1
 800ed42:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800ed46:	f06f 0135 	mvn.w	r1, #53	; 0x35
 800ed4a:	4604      	mov	r4, r0
 800ed4c:	6031      	str	r1, [r6, #0]
 800ed4e:	6831      	ldr	r1, [r6, #0]
 800ed50:	1512      	asrs	r2, r2, #20
 800ed52:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800ed56:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 800ed5a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800ed5e:	440a      	add	r2, r1
 800ed60:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 800ed64:	6032      	str	r2, [r6, #0]
 800ed66:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 800ed6a:	ec45 4b10 	vmov	d0, r4, r5
 800ed6e:	bd70      	pop	{r4, r5, r6, pc}
 800ed70:	7fefffff 	.word	0x7fefffff
 800ed74:	7ff00000 	.word	0x7ff00000
 800ed78:	43500000 	.word	0x43500000
 800ed7c:	00000000 	.word	0x00000000

0800ed80 <nan>:
 800ed80:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ed88 <nan+0x8>
 800ed84:	4770      	bx	lr
 800ed86:	bf00      	nop
 800ed88:	00000000 	.word	0x00000000
 800ed8c:	7ff80000 	.word	0x7ff80000

0800ed90 <strncmp>:
 800ed90:	b510      	push	{r4, lr}
 800ed92:	b16a      	cbz	r2, 800edb0 <strncmp+0x20>
 800ed94:	3901      	subs	r1, #1
 800ed96:	1884      	adds	r4, r0, r2
 800ed98:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ed9c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800eda0:	4293      	cmp	r3, r2
 800eda2:	d103      	bne.n	800edac <strncmp+0x1c>
 800eda4:	42a0      	cmp	r0, r4
 800eda6:	d001      	beq.n	800edac <strncmp+0x1c>
 800eda8:	2b00      	cmp	r3, #0
 800edaa:	d1f5      	bne.n	800ed98 <strncmp+0x8>
 800edac:	1a98      	subs	r0, r3, r2
 800edae:	bd10      	pop	{r4, pc}
 800edb0:	4610      	mov	r0, r2
 800edb2:	e7fc      	b.n	800edae <strncmp+0x1e>

0800edb4 <strncpy>:
 800edb4:	b510      	push	{r4, lr}
 800edb6:	3901      	subs	r1, #1
 800edb8:	4603      	mov	r3, r0
 800edba:	b132      	cbz	r2, 800edca <strncpy+0x16>
 800edbc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800edc0:	f803 4b01 	strb.w	r4, [r3], #1
 800edc4:	3a01      	subs	r2, #1
 800edc6:	2c00      	cmp	r4, #0
 800edc8:	d1f7      	bne.n	800edba <strncpy+0x6>
 800edca:	441a      	add	r2, r3
 800edcc:	2100      	movs	r1, #0
 800edce:	4293      	cmp	r3, r2
 800edd0:	d100      	bne.n	800edd4 <strncpy+0x20>
 800edd2:	bd10      	pop	{r4, pc}
 800edd4:	f803 1b01 	strb.w	r1, [r3], #1
 800edd8:	e7f9      	b.n	800edce <strncpy+0x1a>

0800edda <__ssprint_r>:
 800edda:	6893      	ldr	r3, [r2, #8]
 800eddc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ede0:	4680      	mov	r8, r0
 800ede2:	460c      	mov	r4, r1
 800ede4:	4617      	mov	r7, r2
 800ede6:	2b00      	cmp	r3, #0
 800ede8:	d061      	beq.n	800eeae <__ssprint_r+0xd4>
 800edea:	2300      	movs	r3, #0
 800edec:	f8d2 a000 	ldr.w	sl, [r2]
 800edf0:	9301      	str	r3, [sp, #4]
 800edf2:	469b      	mov	fp, r3
 800edf4:	f1bb 0f00 	cmp.w	fp, #0
 800edf8:	d02b      	beq.n	800ee52 <__ssprint_r+0x78>
 800edfa:	68a6      	ldr	r6, [r4, #8]
 800edfc:	45b3      	cmp	fp, r6
 800edfe:	d342      	bcc.n	800ee86 <__ssprint_r+0xac>
 800ee00:	89a2      	ldrh	r2, [r4, #12]
 800ee02:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee06:	d03e      	beq.n	800ee86 <__ssprint_r+0xac>
 800ee08:	6825      	ldr	r5, [r4, #0]
 800ee0a:	6921      	ldr	r1, [r4, #16]
 800ee0c:	eba5 0901 	sub.w	r9, r5, r1
 800ee10:	6965      	ldr	r5, [r4, #20]
 800ee12:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee16:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee1a:	f109 0001 	add.w	r0, r9, #1
 800ee1e:	106d      	asrs	r5, r5, #1
 800ee20:	4458      	add	r0, fp
 800ee22:	4285      	cmp	r5, r0
 800ee24:	bf38      	it	cc
 800ee26:	4605      	movcc	r5, r0
 800ee28:	0553      	lsls	r3, r2, #21
 800ee2a:	d545      	bpl.n	800eeb8 <__ssprint_r+0xde>
 800ee2c:	4629      	mov	r1, r5
 800ee2e:	4640      	mov	r0, r8
 800ee30:	f7fa fe0a 	bl	8009a48 <_malloc_r>
 800ee34:	4606      	mov	r6, r0
 800ee36:	b9a0      	cbnz	r0, 800ee62 <__ssprint_r+0x88>
 800ee38:	230c      	movs	r3, #12
 800ee3a:	f8c8 3000 	str.w	r3, [r8]
 800ee3e:	89a3      	ldrh	r3, [r4, #12]
 800ee40:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee44:	81a3      	strh	r3, [r4, #12]
 800ee46:	2300      	movs	r3, #0
 800ee48:	e9c7 3301 	strd	r3, r3, [r7, #4]
 800ee4c:	f04f 30ff 	mov.w	r0, #4294967295
 800ee50:	e02f      	b.n	800eeb2 <__ssprint_r+0xd8>
 800ee52:	f8da 3000 	ldr.w	r3, [sl]
 800ee56:	f8da b004 	ldr.w	fp, [sl, #4]
 800ee5a:	9301      	str	r3, [sp, #4]
 800ee5c:	f10a 0a08 	add.w	sl, sl, #8
 800ee60:	e7c8      	b.n	800edf4 <__ssprint_r+0x1a>
 800ee62:	464a      	mov	r2, r9
 800ee64:	6921      	ldr	r1, [r4, #16]
 800ee66:	f7fb f85d 	bl	8009f24 <memcpy>
 800ee6a:	89a2      	ldrh	r2, [r4, #12]
 800ee6c:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
 800ee70:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800ee74:	81a2      	strh	r2, [r4, #12]
 800ee76:	6126      	str	r6, [r4, #16]
 800ee78:	6165      	str	r5, [r4, #20]
 800ee7a:	444e      	add	r6, r9
 800ee7c:	eba5 0509 	sub.w	r5, r5, r9
 800ee80:	6026      	str	r6, [r4, #0]
 800ee82:	60a5      	str	r5, [r4, #8]
 800ee84:	465e      	mov	r6, fp
 800ee86:	455e      	cmp	r6, fp
 800ee88:	bf28      	it	cs
 800ee8a:	465e      	movcs	r6, fp
 800ee8c:	4632      	mov	r2, r6
 800ee8e:	9901      	ldr	r1, [sp, #4]
 800ee90:	6820      	ldr	r0, [r4, #0]
 800ee92:	f7fb f855 	bl	8009f40 <memmove>
 800ee96:	68a2      	ldr	r2, [r4, #8]
 800ee98:	1b92      	subs	r2, r2, r6
 800ee9a:	60a2      	str	r2, [r4, #8]
 800ee9c:	6822      	ldr	r2, [r4, #0]
 800ee9e:	4432      	add	r2, r6
 800eea0:	6022      	str	r2, [r4, #0]
 800eea2:	68ba      	ldr	r2, [r7, #8]
 800eea4:	eba2 030b 	sub.w	r3, r2, fp
 800eea8:	60bb      	str	r3, [r7, #8]
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d1d1      	bne.n	800ee52 <__ssprint_r+0x78>
 800eeae:	2000      	movs	r0, #0
 800eeb0:	6078      	str	r0, [r7, #4]
 800eeb2:	b003      	add	sp, #12
 800eeb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb8:	462a      	mov	r2, r5
 800eeba:	4640      	mov	r0, r8
 800eebc:	f7fb f880 	bl	8009fc0 <_realloc_r>
 800eec0:	4606      	mov	r6, r0
 800eec2:	2800      	cmp	r0, #0
 800eec4:	d1d7      	bne.n	800ee76 <__ssprint_r+0x9c>
 800eec6:	6921      	ldr	r1, [r4, #16]
 800eec8:	4640      	mov	r0, r8
 800eeca:	f7fe fe15 	bl	800daf8 <_free_r>
 800eece:	e7b3      	b.n	800ee38 <__ssprint_r+0x5e>

0800eed0 <__assert_func>:
 800eed0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800eed2:	4614      	mov	r4, r2
 800eed4:	461a      	mov	r2, r3
 800eed6:	4b09      	ldr	r3, [pc, #36]	; (800eefc <__assert_func+0x2c>)
 800eed8:	681b      	ldr	r3, [r3, #0]
 800eeda:	4605      	mov	r5, r0
 800eedc:	68d8      	ldr	r0, [r3, #12]
 800eede:	b14c      	cbz	r4, 800eef4 <__assert_func+0x24>
 800eee0:	4b07      	ldr	r3, [pc, #28]	; (800ef00 <__assert_func+0x30>)
 800eee2:	9100      	str	r1, [sp, #0]
 800eee4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eee8:	4906      	ldr	r1, [pc, #24]	; (800ef04 <__assert_func+0x34>)
 800eeea:	462b      	mov	r3, r5
 800eeec:	f000 f83c 	bl	800ef68 <fiprintf>
 800eef0:	f000 fd68 	bl	800f9c4 <abort>
 800eef4:	4b04      	ldr	r3, [pc, #16]	; (800ef08 <__assert_func+0x38>)
 800eef6:	461c      	mov	r4, r3
 800eef8:	e7f3      	b.n	800eee2 <__assert_func+0x12>
 800eefa:	bf00      	nop
 800eefc:	200001f8 	.word	0x200001f8
 800ef00:	08010aec 	.word	0x08010aec
 800ef04:	08010af9 	.word	0x08010af9
 800ef08:	08010b27 	.word	0x08010b27

0800ef0c <_calloc_r>:
 800ef0c:	b510      	push	{r4, lr}
 800ef0e:	4351      	muls	r1, r2
 800ef10:	f7fa fd9a 	bl	8009a48 <_malloc_r>
 800ef14:	4604      	mov	r4, r0
 800ef16:	b198      	cbz	r0, 800ef40 <_calloc_r+0x34>
 800ef18:	f850 2c04 	ldr.w	r2, [r0, #-4]
 800ef1c:	f022 0203 	bic.w	r2, r2, #3
 800ef20:	3a04      	subs	r2, #4
 800ef22:	2a24      	cmp	r2, #36	; 0x24
 800ef24:	d81b      	bhi.n	800ef5e <_calloc_r+0x52>
 800ef26:	2a13      	cmp	r2, #19
 800ef28:	d917      	bls.n	800ef5a <_calloc_r+0x4e>
 800ef2a:	2100      	movs	r1, #0
 800ef2c:	2a1b      	cmp	r2, #27
 800ef2e:	e9c0 1100 	strd	r1, r1, [r0]
 800ef32:	d807      	bhi.n	800ef44 <_calloc_r+0x38>
 800ef34:	f100 0308 	add.w	r3, r0, #8
 800ef38:	2200      	movs	r2, #0
 800ef3a:	e9c3 2200 	strd	r2, r2, [r3]
 800ef3e:	609a      	str	r2, [r3, #8]
 800ef40:	4620      	mov	r0, r4
 800ef42:	bd10      	pop	{r4, pc}
 800ef44:	2a24      	cmp	r2, #36	; 0x24
 800ef46:	e9c0 1102 	strd	r1, r1, [r0, #8]
 800ef4a:	bf11      	iteee	ne
 800ef4c:	f100 0310 	addne.w	r3, r0, #16
 800ef50:	6101      	streq	r1, [r0, #16]
 800ef52:	f100 0318 	addeq.w	r3, r0, #24
 800ef56:	6141      	streq	r1, [r0, #20]
 800ef58:	e7ee      	b.n	800ef38 <_calloc_r+0x2c>
 800ef5a:	4603      	mov	r3, r0
 800ef5c:	e7ec      	b.n	800ef38 <_calloc_r+0x2c>
 800ef5e:	2100      	movs	r1, #0
 800ef60:	f7f9 f8c6 	bl	80080f0 <memset>
 800ef64:	e7ec      	b.n	800ef40 <_calloc_r+0x34>
	...

0800ef68 <fiprintf>:
 800ef68:	b40e      	push	{r1, r2, r3}
 800ef6a:	b503      	push	{r0, r1, lr}
 800ef6c:	4601      	mov	r1, r0
 800ef6e:	ab03      	add	r3, sp, #12
 800ef70:	4805      	ldr	r0, [pc, #20]	; (800ef88 <fiprintf+0x20>)
 800ef72:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef76:	6800      	ldr	r0, [r0, #0]
 800ef78:	9301      	str	r3, [sp, #4]
 800ef7a:	f000 f85b 	bl	800f034 <_vfiprintf_r>
 800ef7e:	b002      	add	sp, #8
 800ef80:	f85d eb04 	ldr.w	lr, [sp], #4
 800ef84:	b003      	add	sp, #12
 800ef86:	4770      	bx	lr
 800ef88:	200001f8 	.word	0x200001f8

0800ef8c <_fstat_r>:
 800ef8c:	b538      	push	{r3, r4, r5, lr}
 800ef8e:	4d07      	ldr	r5, [pc, #28]	; (800efac <_fstat_r+0x20>)
 800ef90:	2300      	movs	r3, #0
 800ef92:	4604      	mov	r4, r0
 800ef94:	4608      	mov	r0, r1
 800ef96:	4611      	mov	r1, r2
 800ef98:	602b      	str	r3, [r5, #0]
 800ef9a:	f7f4 fe60 	bl	8003c5e <_fstat>
 800ef9e:	1c43      	adds	r3, r0, #1
 800efa0:	d102      	bne.n	800efa8 <_fstat_r+0x1c>
 800efa2:	682b      	ldr	r3, [r5, #0]
 800efa4:	b103      	cbz	r3, 800efa8 <_fstat_r+0x1c>
 800efa6:	6023      	str	r3, [r4, #0]
 800efa8:	bd38      	pop	{r3, r4, r5, pc}
 800efaa:	bf00      	nop
 800efac:	20001770 	.word	0x20001770

0800efb0 <_isatty_r>:
 800efb0:	b538      	push	{r3, r4, r5, lr}
 800efb2:	4d06      	ldr	r5, [pc, #24]	; (800efcc <_isatty_r+0x1c>)
 800efb4:	2300      	movs	r3, #0
 800efb6:	4604      	mov	r4, r0
 800efb8:	4608      	mov	r0, r1
 800efba:	602b      	str	r3, [r5, #0]
 800efbc:	f7f4 fe5f 	bl	8003c7e <_isatty>
 800efc0:	1c43      	adds	r3, r0, #1
 800efc2:	d102      	bne.n	800efca <_isatty_r+0x1a>
 800efc4:	682b      	ldr	r3, [r5, #0]
 800efc6:	b103      	cbz	r3, 800efca <_isatty_r+0x1a>
 800efc8:	6023      	str	r3, [r4, #0]
 800efca:	bd38      	pop	{r3, r4, r5, pc}
 800efcc:	20001770 	.word	0x20001770

0800efd0 <__sprint_r>:
 800efd0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800efd4:	6893      	ldr	r3, [r2, #8]
 800efd6:	4680      	mov	r8, r0
 800efd8:	460f      	mov	r7, r1
 800efda:	4614      	mov	r4, r2
 800efdc:	b91b      	cbnz	r3, 800efe6 <__sprint_r+0x16>
 800efde:	6053      	str	r3, [r2, #4]
 800efe0:	4618      	mov	r0, r3
 800efe2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800efe6:	6e4b      	ldr	r3, [r1, #100]	; 0x64
 800efe8:	049d      	lsls	r5, r3, #18
 800efea:	d520      	bpl.n	800f02e <__sprint_r+0x5e>
 800efec:	6815      	ldr	r5, [r2, #0]
 800efee:	3508      	adds	r5, #8
 800eff0:	e955 b602 	ldrd	fp, r6, [r5, #-8]
 800eff4:	f04f 0900 	mov.w	r9, #0
 800eff8:	ea4f 0a96 	mov.w	sl, r6, lsr #2
 800effc:	45ca      	cmp	sl, r9
 800effe:	dc0b      	bgt.n	800f018 <__sprint_r+0x48>
 800f000:	68a3      	ldr	r3, [r4, #8]
 800f002:	f026 0003 	bic.w	r0, r6, #3
 800f006:	1a18      	subs	r0, r3, r0
 800f008:	60a0      	str	r0, [r4, #8]
 800f00a:	3508      	adds	r5, #8
 800f00c:	2800      	cmp	r0, #0
 800f00e:	d1ef      	bne.n	800eff0 <__sprint_r+0x20>
 800f010:	2300      	movs	r3, #0
 800f012:	e9c4 3301 	strd	r3, r3, [r4, #4]
 800f016:	e7e4      	b.n	800efe2 <__sprint_r+0x12>
 800f018:	f85b 1029 	ldr.w	r1, [fp, r9, lsl #2]
 800f01c:	463a      	mov	r2, r7
 800f01e:	4640      	mov	r0, r8
 800f020:	f000 fd18 	bl	800fa54 <_fputwc_r>
 800f024:	1c43      	adds	r3, r0, #1
 800f026:	d0f3      	beq.n	800f010 <__sprint_r+0x40>
 800f028:	f109 0901 	add.w	r9, r9, #1
 800f02c:	e7e6      	b.n	800effc <__sprint_r+0x2c>
 800f02e:	f7fa fb65 	bl	80096fc <__sfvwrite_r>
 800f032:	e7ed      	b.n	800f010 <__sprint_r+0x40>

0800f034 <_vfiprintf_r>:
 800f034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f038:	ed2d 8b02 	vpush	{d8}
 800f03c:	b0b9      	sub	sp, #228	; 0xe4
 800f03e:	460f      	mov	r7, r1
 800f040:	9201      	str	r2, [sp, #4]
 800f042:	461d      	mov	r5, r3
 800f044:	461c      	mov	r4, r3
 800f046:	4681      	mov	r9, r0
 800f048:	b118      	cbz	r0, 800f052 <_vfiprintf_r+0x1e>
 800f04a:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800f04c:	b90b      	cbnz	r3, 800f052 <_vfiprintf_r+0x1e>
 800f04e:	f7fa fb19 	bl	8009684 <__sinit>
 800f052:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f054:	07d8      	lsls	r0, r3, #31
 800f056:	d405      	bmi.n	800f064 <_vfiprintf_r+0x30>
 800f058:	89bb      	ldrh	r3, [r7, #12]
 800f05a:	0599      	lsls	r1, r3, #22
 800f05c:	d402      	bmi.n	800f064 <_vfiprintf_r+0x30>
 800f05e:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f060:	f7fa fcce 	bl	8009a00 <__retarget_lock_acquire_recursive>
 800f064:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800f068:	049a      	lsls	r2, r3, #18
 800f06a:	d406      	bmi.n	800f07a <_vfiprintf_r+0x46>
 800f06c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f070:	81bb      	strh	r3, [r7, #12]
 800f072:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f074:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800f078:	667b      	str	r3, [r7, #100]	; 0x64
 800f07a:	89bb      	ldrh	r3, [r7, #12]
 800f07c:	071e      	lsls	r6, r3, #28
 800f07e:	d501      	bpl.n	800f084 <_vfiprintf_r+0x50>
 800f080:	693b      	ldr	r3, [r7, #16]
 800f082:	b9bb      	cbnz	r3, 800f0b4 <_vfiprintf_r+0x80>
 800f084:	4639      	mov	r1, r7
 800f086:	4648      	mov	r0, r9
 800f088:	f7fd fcde 	bl	800ca48 <__swsetup_r>
 800f08c:	b190      	cbz	r0, 800f0b4 <_vfiprintf_r+0x80>
 800f08e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f090:	07d8      	lsls	r0, r3, #31
 800f092:	d508      	bpl.n	800f0a6 <_vfiprintf_r+0x72>
 800f094:	f04f 33ff 	mov.w	r3, #4294967295
 800f098:	9302      	str	r3, [sp, #8]
 800f09a:	9802      	ldr	r0, [sp, #8]
 800f09c:	b039      	add	sp, #228	; 0xe4
 800f09e:	ecbd 8b02 	vpop	{d8}
 800f0a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f0a6:	89bb      	ldrh	r3, [r7, #12]
 800f0a8:	0599      	lsls	r1, r3, #22
 800f0aa:	d4f3      	bmi.n	800f094 <_vfiprintf_r+0x60>
 800f0ac:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f0ae:	f7fa fca8 	bl	8009a02 <__retarget_lock_release_recursive>
 800f0b2:	e7ef      	b.n	800f094 <_vfiprintf_r+0x60>
 800f0b4:	89bb      	ldrh	r3, [r7, #12]
 800f0b6:	f003 021a 	and.w	r2, r3, #26
 800f0ba:	2a0a      	cmp	r2, #10
 800f0bc:	d113      	bne.n	800f0e6 <_vfiprintf_r+0xb2>
 800f0be:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 800f0c2:	2a00      	cmp	r2, #0
 800f0c4:	db0f      	blt.n	800f0e6 <_vfiprintf_r+0xb2>
 800f0c6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800f0c8:	07d2      	lsls	r2, r2, #31
 800f0ca:	d404      	bmi.n	800f0d6 <_vfiprintf_r+0xa2>
 800f0cc:	059e      	lsls	r6, r3, #22
 800f0ce:	d402      	bmi.n	800f0d6 <_vfiprintf_r+0xa2>
 800f0d0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f0d2:	f7fa fc96 	bl	8009a02 <__retarget_lock_release_recursive>
 800f0d6:	9a01      	ldr	r2, [sp, #4]
 800f0d8:	462b      	mov	r3, r5
 800f0da:	4639      	mov	r1, r7
 800f0dc:	4648      	mov	r0, r9
 800f0de:	f000 fc31 	bl	800f944 <__sbprintf>
 800f0e2:	9002      	str	r0, [sp, #8]
 800f0e4:	e7d9      	b.n	800f09a <_vfiprintf_r+0x66>
 800f0e6:	2300      	movs	r3, #0
 800f0e8:	e9cd 330d 	strd	r3, r3, [sp, #52]	; 0x34
 800f0ec:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800f0f0:	ae0f      	add	r6, sp, #60	; 0x3c
 800f0f2:	ee08 3a10 	vmov	s16, r3
 800f0f6:	960c      	str	r6, [sp, #48]	; 0x30
 800f0f8:	9307      	str	r3, [sp, #28]
 800f0fa:	9302      	str	r3, [sp, #8]
 800f0fc:	9b01      	ldr	r3, [sp, #4]
 800f0fe:	461d      	mov	r5, r3
 800f100:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f104:	b10a      	cbz	r2, 800f10a <_vfiprintf_r+0xd6>
 800f106:	2a25      	cmp	r2, #37	; 0x25
 800f108:	d1f9      	bne.n	800f0fe <_vfiprintf_r+0xca>
 800f10a:	9b01      	ldr	r3, [sp, #4]
 800f10c:	ebb5 0803 	subs.w	r8, r5, r3
 800f110:	d00d      	beq.n	800f12e <_vfiprintf_r+0xfa>
 800f112:	e9c6 3800 	strd	r3, r8, [r6]
 800f116:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f118:	4443      	add	r3, r8
 800f11a:	930e      	str	r3, [sp, #56]	; 0x38
 800f11c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f11e:	3301      	adds	r3, #1
 800f120:	2b07      	cmp	r3, #7
 800f122:	930d      	str	r3, [sp, #52]	; 0x34
 800f124:	dc75      	bgt.n	800f212 <_vfiprintf_r+0x1de>
 800f126:	3608      	adds	r6, #8
 800f128:	9b02      	ldr	r3, [sp, #8]
 800f12a:	4443      	add	r3, r8
 800f12c:	9302      	str	r3, [sp, #8]
 800f12e:	782b      	ldrb	r3, [r5, #0]
 800f130:	2b00      	cmp	r3, #0
 800f132:	f000 83c8 	beq.w	800f8c6 <_vfiprintf_r+0x892>
 800f136:	2300      	movs	r3, #0
 800f138:	f04f 31ff 	mov.w	r1, #4294967295
 800f13c:	1c6a      	adds	r2, r5, #1
 800f13e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f142:	9100      	str	r1, [sp, #0]
 800f144:	9303      	str	r3, [sp, #12]
 800f146:	469a      	mov	sl, r3
 800f148:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f14c:	9201      	str	r2, [sp, #4]
 800f14e:	f1a3 0220 	sub.w	r2, r3, #32
 800f152:	2a5a      	cmp	r2, #90	; 0x5a
 800f154:	f200 8310 	bhi.w	800f778 <_vfiprintf_r+0x744>
 800f158:	e8df f012 	tbh	[pc, r2, lsl #1]
 800f15c:	030e0099 	.word	0x030e0099
 800f160:	00a1030e 	.word	0x00a1030e
 800f164:	030e030e 	.word	0x030e030e
 800f168:	0080030e 	.word	0x0080030e
 800f16c:	030e030e 	.word	0x030e030e
 800f170:	00ae00a4 	.word	0x00ae00a4
 800f174:	00ab030e 	.word	0x00ab030e
 800f178:	030e00b0 	.word	0x030e00b0
 800f17c:	00ce00cb 	.word	0x00ce00cb
 800f180:	00ce00ce 	.word	0x00ce00ce
 800f184:	00ce00ce 	.word	0x00ce00ce
 800f188:	00ce00ce 	.word	0x00ce00ce
 800f18c:	00ce00ce 	.word	0x00ce00ce
 800f190:	030e030e 	.word	0x030e030e
 800f194:	030e030e 	.word	0x030e030e
 800f198:	030e030e 	.word	0x030e030e
 800f19c:	030e030e 	.word	0x030e030e
 800f1a0:	00f8030e 	.word	0x00f8030e
 800f1a4:	030e0106 	.word	0x030e0106
 800f1a8:	030e030e 	.word	0x030e030e
 800f1ac:	030e030e 	.word	0x030e030e
 800f1b0:	030e030e 	.word	0x030e030e
 800f1b4:	030e030e 	.word	0x030e030e
 800f1b8:	014d030e 	.word	0x014d030e
 800f1bc:	030e030e 	.word	0x030e030e
 800f1c0:	0192030e 	.word	0x0192030e
 800f1c4:	0270030e 	.word	0x0270030e
 800f1c8:	030e030e 	.word	0x030e030e
 800f1cc:	030e028e 	.word	0x030e028e
 800f1d0:	030e030e 	.word	0x030e030e
 800f1d4:	030e030e 	.word	0x030e030e
 800f1d8:	030e030e 	.word	0x030e030e
 800f1dc:	030e030e 	.word	0x030e030e
 800f1e0:	00f8030e 	.word	0x00f8030e
 800f1e4:	030e0108 	.word	0x030e0108
 800f1e8:	030e030e 	.word	0x030e030e
 800f1ec:	010800de 	.word	0x010800de
 800f1f0:	030e00f2 	.word	0x030e00f2
 800f1f4:	030e00eb 	.word	0x030e00eb
 800f1f8:	014f0130 	.word	0x014f0130
 800f1fc:	00f20182 	.word	0x00f20182
 800f200:	0192030e 	.word	0x0192030e
 800f204:	02720097 	.word	0x02720097
 800f208:	030e030e 	.word	0x030e030e
 800f20c:	030e0065 	.word	0x030e0065
 800f210:	0097      	.short	0x0097
 800f212:	aa0c      	add	r2, sp, #48	; 0x30
 800f214:	4639      	mov	r1, r7
 800f216:	4648      	mov	r0, r9
 800f218:	f7ff feda 	bl	800efd0 <__sprint_r>
 800f21c:	2800      	cmp	r0, #0
 800f21e:	f040 8331 	bne.w	800f884 <_vfiprintf_r+0x850>
 800f222:	ae0f      	add	r6, sp, #60	; 0x3c
 800f224:	e780      	b.n	800f128 <_vfiprintf_r+0xf4>
 800f226:	4a95      	ldr	r2, [pc, #596]	; (800f47c <_vfiprintf_r+0x448>)
 800f228:	9205      	str	r2, [sp, #20]
 800f22a:	f01a 0f20 	tst.w	sl, #32
 800f22e:	f000 8225 	beq.w	800f67c <_vfiprintf_r+0x648>
 800f232:	3407      	adds	r4, #7
 800f234:	f024 0b07 	bic.w	fp, r4, #7
 800f238:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800f23c:	f01a 0f01 	tst.w	sl, #1
 800f240:	d009      	beq.n	800f256 <_vfiprintf_r+0x222>
 800f242:	ea54 0205 	orrs.w	r2, r4, r5
 800f246:	bf1f      	itttt	ne
 800f248:	2230      	movne	r2, #48	; 0x30
 800f24a:	f88d 202c 	strbne.w	r2, [sp, #44]	; 0x2c
 800f24e:	f88d 302d 	strbne.w	r3, [sp, #45]	; 0x2d
 800f252:	f04a 0a02 	orrne.w	sl, sl, #2
 800f256:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f25a:	e10d      	b.n	800f478 <_vfiprintf_r+0x444>
 800f25c:	4648      	mov	r0, r9
 800f25e:	f7fa fbc9 	bl	80099f4 <_localeconv_r>
 800f262:	6843      	ldr	r3, [r0, #4]
 800f264:	4618      	mov	r0, r3
 800f266:	ee08 3a10 	vmov	s16, r3
 800f26a:	f7f0 ffb1 	bl	80001d0 <strlen>
 800f26e:	9007      	str	r0, [sp, #28]
 800f270:	4648      	mov	r0, r9
 800f272:	f7fa fbbf 	bl	80099f4 <_localeconv_r>
 800f276:	6883      	ldr	r3, [r0, #8]
 800f278:	9306      	str	r3, [sp, #24]
 800f27a:	9b07      	ldr	r3, [sp, #28]
 800f27c:	b12b      	cbz	r3, 800f28a <_vfiprintf_r+0x256>
 800f27e:	9b06      	ldr	r3, [sp, #24]
 800f280:	b11b      	cbz	r3, 800f28a <_vfiprintf_r+0x256>
 800f282:	781b      	ldrb	r3, [r3, #0]
 800f284:	b10b      	cbz	r3, 800f28a <_vfiprintf_r+0x256>
 800f286:	f44a 6a80 	orr.w	sl, sl, #1024	; 0x400
 800f28a:	9a01      	ldr	r2, [sp, #4]
 800f28c:	e75c      	b.n	800f148 <_vfiprintf_r+0x114>
 800f28e:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f292:	2b00      	cmp	r3, #0
 800f294:	d1f9      	bne.n	800f28a <_vfiprintf_r+0x256>
 800f296:	2320      	movs	r3, #32
 800f298:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f29c:	e7f5      	b.n	800f28a <_vfiprintf_r+0x256>
 800f29e:	f04a 0a01 	orr.w	sl, sl, #1
 800f2a2:	e7f2      	b.n	800f28a <_vfiprintf_r+0x256>
 800f2a4:	f854 3b04 	ldr.w	r3, [r4], #4
 800f2a8:	9303      	str	r3, [sp, #12]
 800f2aa:	2b00      	cmp	r3, #0
 800f2ac:	daed      	bge.n	800f28a <_vfiprintf_r+0x256>
 800f2ae:	425b      	negs	r3, r3
 800f2b0:	9303      	str	r3, [sp, #12]
 800f2b2:	f04a 0a04 	orr.w	sl, sl, #4
 800f2b6:	e7e8      	b.n	800f28a <_vfiprintf_r+0x256>
 800f2b8:	232b      	movs	r3, #43	; 0x2b
 800f2ba:	e7ed      	b.n	800f298 <_vfiprintf_r+0x264>
 800f2bc:	9a01      	ldr	r2, [sp, #4]
 800f2be:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f2c2:	2b2a      	cmp	r3, #42	; 0x2a
 800f2c4:	d112      	bne.n	800f2ec <_vfiprintf_r+0x2b8>
 800f2c6:	f854 0b04 	ldr.w	r0, [r4], #4
 800f2ca:	ea40 73e0 	orr.w	r3, r0, r0, asr #31
 800f2ce:	e9cd 3200 	strd	r3, r2, [sp]
 800f2d2:	e7da      	b.n	800f28a <_vfiprintf_r+0x256>
 800f2d4:	9b00      	ldr	r3, [sp, #0]
 800f2d6:	200a      	movs	r0, #10
 800f2d8:	fb00 1303 	mla	r3, r0, r3, r1
 800f2dc:	9300      	str	r3, [sp, #0]
 800f2de:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f2e2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f2e6:	2909      	cmp	r1, #9
 800f2e8:	d9f4      	bls.n	800f2d4 <_vfiprintf_r+0x2a0>
 800f2ea:	e72f      	b.n	800f14c <_vfiprintf_r+0x118>
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	9100      	str	r1, [sp, #0]
 800f2f0:	e7f7      	b.n	800f2e2 <_vfiprintf_r+0x2ae>
 800f2f2:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
 800f2f6:	e7c8      	b.n	800f28a <_vfiprintf_r+0x256>
 800f2f8:	2100      	movs	r1, #0
 800f2fa:	9a01      	ldr	r2, [sp, #4]
 800f2fc:	9103      	str	r1, [sp, #12]
 800f2fe:	9903      	ldr	r1, [sp, #12]
 800f300:	3b30      	subs	r3, #48	; 0x30
 800f302:	200a      	movs	r0, #10
 800f304:	fb00 3301 	mla	r3, r0, r1, r3
 800f308:	9303      	str	r3, [sp, #12]
 800f30a:	f812 3b01 	ldrb.w	r3, [r2], #1
 800f30e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800f312:	2909      	cmp	r1, #9
 800f314:	d9f3      	bls.n	800f2fe <_vfiprintf_r+0x2ca>
 800f316:	e719      	b.n	800f14c <_vfiprintf_r+0x118>
 800f318:	9b01      	ldr	r3, [sp, #4]
 800f31a:	781b      	ldrb	r3, [r3, #0]
 800f31c:	2b68      	cmp	r3, #104	; 0x68
 800f31e:	bf01      	itttt	eq
 800f320:	9b01      	ldreq	r3, [sp, #4]
 800f322:	3301      	addeq	r3, #1
 800f324:	9301      	streq	r3, [sp, #4]
 800f326:	f44a 7a00 	orreq.w	sl, sl, #512	; 0x200
 800f32a:	bf18      	it	ne
 800f32c:	f04a 0a40 	orrne.w	sl, sl, #64	; 0x40
 800f330:	e7ab      	b.n	800f28a <_vfiprintf_r+0x256>
 800f332:	9b01      	ldr	r3, [sp, #4]
 800f334:	781b      	ldrb	r3, [r3, #0]
 800f336:	2b6c      	cmp	r3, #108	; 0x6c
 800f338:	d105      	bne.n	800f346 <_vfiprintf_r+0x312>
 800f33a:	9b01      	ldr	r3, [sp, #4]
 800f33c:	3301      	adds	r3, #1
 800f33e:	9301      	str	r3, [sp, #4]
 800f340:	f04a 0a20 	orr.w	sl, sl, #32
 800f344:	e7a1      	b.n	800f28a <_vfiprintf_r+0x256>
 800f346:	f04a 0a10 	orr.w	sl, sl, #16
 800f34a:	e79e      	b.n	800f28a <_vfiprintf_r+0x256>
 800f34c:	46a3      	mov	fp, r4
 800f34e:	2100      	movs	r1, #0
 800f350:	f85b 3b04 	ldr.w	r3, [fp], #4
 800f354:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800f358:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800f35c:	2301      	movs	r3, #1
 800f35e:	9300      	str	r3, [sp, #0]
 800f360:	460d      	mov	r5, r1
 800f362:	f10d 087c 	add.w	r8, sp, #124	; 0x7c
 800f366:	e0a0      	b.n	800f4aa <_vfiprintf_r+0x476>
 800f368:	f04a 0a10 	orr.w	sl, sl, #16
 800f36c:	f01a 0f20 	tst.w	sl, #32
 800f370:	d011      	beq.n	800f396 <_vfiprintf_r+0x362>
 800f372:	3407      	adds	r4, #7
 800f374:	f024 0b07 	bic.w	fp, r4, #7
 800f378:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800f37c:	2c00      	cmp	r4, #0
 800f37e:	f175 0300 	sbcs.w	r3, r5, #0
 800f382:	da06      	bge.n	800f392 <_vfiprintf_r+0x35e>
 800f384:	4264      	negs	r4, r4
 800f386:	f04f 032d 	mov.w	r3, #45	; 0x2d
 800f38a:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
 800f38e:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
 800f392:	2301      	movs	r3, #1
 800f394:	e03f      	b.n	800f416 <_vfiprintf_r+0x3e2>
 800f396:	f01a 0f10 	tst.w	sl, #16
 800f39a:	f104 0b04 	add.w	fp, r4, #4
 800f39e:	d002      	beq.n	800f3a6 <_vfiprintf_r+0x372>
 800f3a0:	6824      	ldr	r4, [r4, #0]
 800f3a2:	17e5      	asrs	r5, r4, #31
 800f3a4:	e7ea      	b.n	800f37c <_vfiprintf_r+0x348>
 800f3a6:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f3aa:	6824      	ldr	r4, [r4, #0]
 800f3ac:	d001      	beq.n	800f3b2 <_vfiprintf_r+0x37e>
 800f3ae:	b224      	sxth	r4, r4
 800f3b0:	e7f7      	b.n	800f3a2 <_vfiprintf_r+0x36e>
 800f3b2:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f3b6:	bf18      	it	ne
 800f3b8:	b264      	sxtbne	r4, r4
 800f3ba:	e7f2      	b.n	800f3a2 <_vfiprintf_r+0x36e>
 800f3bc:	f01a 0f20 	tst.w	sl, #32
 800f3c0:	f854 3b04 	ldr.w	r3, [r4], #4
 800f3c4:	d005      	beq.n	800f3d2 <_vfiprintf_r+0x39e>
 800f3c6:	9a02      	ldr	r2, [sp, #8]
 800f3c8:	4610      	mov	r0, r2
 800f3ca:	17d1      	asrs	r1, r2, #31
 800f3cc:	e9c3 0100 	strd	r0, r1, [r3]
 800f3d0:	e694      	b.n	800f0fc <_vfiprintf_r+0xc8>
 800f3d2:	f01a 0f10 	tst.w	sl, #16
 800f3d6:	d002      	beq.n	800f3de <_vfiprintf_r+0x3aa>
 800f3d8:	9a02      	ldr	r2, [sp, #8]
 800f3da:	601a      	str	r2, [r3, #0]
 800f3dc:	e68e      	b.n	800f0fc <_vfiprintf_r+0xc8>
 800f3de:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f3e2:	d002      	beq.n	800f3ea <_vfiprintf_r+0x3b6>
 800f3e4:	9a02      	ldr	r2, [sp, #8]
 800f3e6:	801a      	strh	r2, [r3, #0]
 800f3e8:	e688      	b.n	800f0fc <_vfiprintf_r+0xc8>
 800f3ea:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f3ee:	d0f3      	beq.n	800f3d8 <_vfiprintf_r+0x3a4>
 800f3f0:	9a02      	ldr	r2, [sp, #8]
 800f3f2:	701a      	strb	r2, [r3, #0]
 800f3f4:	e682      	b.n	800f0fc <_vfiprintf_r+0xc8>
 800f3f6:	f04a 0a10 	orr.w	sl, sl, #16
 800f3fa:	f01a 0f20 	tst.w	sl, #32
 800f3fe:	d01d      	beq.n	800f43c <_vfiprintf_r+0x408>
 800f400:	3407      	adds	r4, #7
 800f402:	f024 0b07 	bic.w	fp, r4, #7
 800f406:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800f40a:	f42a 6a80 	bic.w	sl, sl, #1024	; 0x400
 800f40e:	2300      	movs	r3, #0
 800f410:	2200      	movs	r2, #0
 800f412:	f88d 202b 	strb.w	r2, [sp, #43]	; 0x2b
 800f416:	9a00      	ldr	r2, [sp, #0]
 800f418:	3201      	adds	r2, #1
 800f41a:	f000 8261 	beq.w	800f8e0 <_vfiprintf_r+0x8ac>
 800f41e:	f02a 0280 	bic.w	r2, sl, #128	; 0x80
 800f422:	9204      	str	r2, [sp, #16]
 800f424:	ea54 0205 	orrs.w	r2, r4, r5
 800f428:	f040 8260 	bne.w	800f8ec <_vfiprintf_r+0x8b8>
 800f42c:	9a00      	ldr	r2, [sp, #0]
 800f42e:	2a00      	cmp	r2, #0
 800f430:	f000 8197 	beq.w	800f762 <_vfiprintf_r+0x72e>
 800f434:	2b01      	cmp	r3, #1
 800f436:	f040 825c 	bne.w	800f8f2 <_vfiprintf_r+0x8be>
 800f43a:	e135      	b.n	800f6a8 <_vfiprintf_r+0x674>
 800f43c:	f01a 0f10 	tst.w	sl, #16
 800f440:	f104 0b04 	add.w	fp, r4, #4
 800f444:	d001      	beq.n	800f44a <_vfiprintf_r+0x416>
 800f446:	6824      	ldr	r4, [r4, #0]
 800f448:	e003      	b.n	800f452 <_vfiprintf_r+0x41e>
 800f44a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f44e:	d002      	beq.n	800f456 <_vfiprintf_r+0x422>
 800f450:	8824      	ldrh	r4, [r4, #0]
 800f452:	2500      	movs	r5, #0
 800f454:	e7d9      	b.n	800f40a <_vfiprintf_r+0x3d6>
 800f456:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f45a:	d0f4      	beq.n	800f446 <_vfiprintf_r+0x412>
 800f45c:	7824      	ldrb	r4, [r4, #0]
 800f45e:	e7f8      	b.n	800f452 <_vfiprintf_r+0x41e>
 800f460:	46a3      	mov	fp, r4
 800f462:	f647 0330 	movw	r3, #30768	; 0x7830
 800f466:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
 800f46a:	f85b 4b04 	ldr.w	r4, [fp], #4
 800f46e:	4b03      	ldr	r3, [pc, #12]	; (800f47c <_vfiprintf_r+0x448>)
 800f470:	9305      	str	r3, [sp, #20]
 800f472:	2500      	movs	r5, #0
 800f474:	f04a 0a02 	orr.w	sl, sl, #2
 800f478:	2302      	movs	r3, #2
 800f47a:	e7c9      	b.n	800f410 <_vfiprintf_r+0x3dc>
 800f47c:	08010858 	.word	0x08010858
 800f480:	9b00      	ldr	r3, [sp, #0]
 800f482:	46a3      	mov	fp, r4
 800f484:	2500      	movs	r5, #0
 800f486:	1c5c      	adds	r4, r3, #1
 800f488:	f85b 8b04 	ldr.w	r8, [fp], #4
 800f48c:	f88d 502b 	strb.w	r5, [sp, #43]	; 0x2b
 800f490:	f000 80cf 	beq.w	800f632 <_vfiprintf_r+0x5fe>
 800f494:	461a      	mov	r2, r3
 800f496:	4629      	mov	r1, r5
 800f498:	4640      	mov	r0, r8
 800f49a:	f7f0 fea1 	bl	80001e0 <memchr>
 800f49e:	2800      	cmp	r0, #0
 800f4a0:	f000 8174 	beq.w	800f78c <_vfiprintf_r+0x758>
 800f4a4:	eba0 0308 	sub.w	r3, r0, r8
 800f4a8:	9300      	str	r3, [sp, #0]
 800f4aa:	9b00      	ldr	r3, [sp, #0]
 800f4ac:	42ab      	cmp	r3, r5
 800f4ae:	bfb8      	it	lt
 800f4b0:	462b      	movlt	r3, r5
 800f4b2:	9304      	str	r3, [sp, #16]
 800f4b4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f4b8:	b113      	cbz	r3, 800f4c0 <_vfiprintf_r+0x48c>
 800f4ba:	9b04      	ldr	r3, [sp, #16]
 800f4bc:	3301      	adds	r3, #1
 800f4be:	9304      	str	r3, [sp, #16]
 800f4c0:	f01a 0302 	ands.w	r3, sl, #2
 800f4c4:	9308      	str	r3, [sp, #32]
 800f4c6:	bf1e      	ittt	ne
 800f4c8:	9b04      	ldrne	r3, [sp, #16]
 800f4ca:	3302      	addne	r3, #2
 800f4cc:	9304      	strne	r3, [sp, #16]
 800f4ce:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
 800f4d2:	9309      	str	r3, [sp, #36]	; 0x24
 800f4d4:	d11f      	bne.n	800f516 <_vfiprintf_r+0x4e2>
 800f4d6:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f4da:	1a9c      	subs	r4, r3, r2
 800f4dc:	2c00      	cmp	r4, #0
 800f4de:	dd1a      	ble.n	800f516 <_vfiprintf_r+0x4e2>
 800f4e0:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f4e4:	48b9      	ldr	r0, [pc, #740]	; (800f7cc <_vfiprintf_r+0x798>)
 800f4e6:	6030      	str	r0, [r6, #0]
 800f4e8:	2c10      	cmp	r4, #16
 800f4ea:	f103 0301 	add.w	r3, r3, #1
 800f4ee:	f106 0108 	add.w	r1, r6, #8
 800f4f2:	f300 814d 	bgt.w	800f790 <_vfiprintf_r+0x75c>
 800f4f6:	6074      	str	r4, [r6, #4]
 800f4f8:	2b07      	cmp	r3, #7
 800f4fa:	4414      	add	r4, r2
 800f4fc:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f500:	f340 8158 	ble.w	800f7b4 <_vfiprintf_r+0x780>
 800f504:	aa0c      	add	r2, sp, #48	; 0x30
 800f506:	4639      	mov	r1, r7
 800f508:	4648      	mov	r0, r9
 800f50a:	f7ff fd61 	bl	800efd0 <__sprint_r>
 800f50e:	2800      	cmp	r0, #0
 800f510:	f040 81b8 	bne.w	800f884 <_vfiprintf_r+0x850>
 800f514:	ae0f      	add	r6, sp, #60	; 0x3c
 800f516:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
 800f51a:	b173      	cbz	r3, 800f53a <_vfiprintf_r+0x506>
 800f51c:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
 800f520:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f522:	6032      	str	r2, [r6, #0]
 800f524:	2201      	movs	r2, #1
 800f526:	6072      	str	r2, [r6, #4]
 800f528:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f52a:	3301      	adds	r3, #1
 800f52c:	3201      	adds	r2, #1
 800f52e:	2b07      	cmp	r3, #7
 800f530:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f534:	f300 8140 	bgt.w	800f7b8 <_vfiprintf_r+0x784>
 800f538:	3608      	adds	r6, #8
 800f53a:	9b08      	ldr	r3, [sp, #32]
 800f53c:	b16b      	cbz	r3, 800f55a <_vfiprintf_r+0x526>
 800f53e:	aa0b      	add	r2, sp, #44	; 0x2c
 800f540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f542:	6032      	str	r2, [r6, #0]
 800f544:	2202      	movs	r2, #2
 800f546:	6072      	str	r2, [r6, #4]
 800f548:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f54a:	3301      	adds	r3, #1
 800f54c:	3202      	adds	r2, #2
 800f54e:	2b07      	cmp	r3, #7
 800f550:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f554:	f300 8140 	bgt.w	800f7d8 <_vfiprintf_r+0x7a4>
 800f558:	3608      	adds	r6, #8
 800f55a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f55c:	2b80      	cmp	r3, #128	; 0x80
 800f55e:	d11f      	bne.n	800f5a0 <_vfiprintf_r+0x56c>
 800f560:	e9dd 3203 	ldrd	r3, r2, [sp, #12]
 800f564:	1a9c      	subs	r4, r3, r2
 800f566:	2c00      	cmp	r4, #0
 800f568:	dd1a      	ble.n	800f5a0 <_vfiprintf_r+0x56c>
 800f56a:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 800f56e:	4898      	ldr	r0, [pc, #608]	; (800f7d0 <_vfiprintf_r+0x79c>)
 800f570:	6030      	str	r0, [r6, #0]
 800f572:	2c10      	cmp	r4, #16
 800f574:	f103 0301 	add.w	r3, r3, #1
 800f578:	f106 0108 	add.w	r1, r6, #8
 800f57c:	f300 8135 	bgt.w	800f7ea <_vfiprintf_r+0x7b6>
 800f580:	6074      	str	r4, [r6, #4]
 800f582:	2b07      	cmp	r3, #7
 800f584:	4414      	add	r4, r2
 800f586:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f58a:	f340 8140 	ble.w	800f80e <_vfiprintf_r+0x7da>
 800f58e:	aa0c      	add	r2, sp, #48	; 0x30
 800f590:	4639      	mov	r1, r7
 800f592:	4648      	mov	r0, r9
 800f594:	f7ff fd1c 	bl	800efd0 <__sprint_r>
 800f598:	2800      	cmp	r0, #0
 800f59a:	f040 8173 	bne.w	800f884 <_vfiprintf_r+0x850>
 800f59e:	ae0f      	add	r6, sp, #60	; 0x3c
 800f5a0:	9b00      	ldr	r3, [sp, #0]
 800f5a2:	1aec      	subs	r4, r5, r3
 800f5a4:	2c00      	cmp	r4, #0
 800f5a6:	dd1a      	ble.n	800f5de <_vfiprintf_r+0x5aa>
 800f5a8:	4d89      	ldr	r5, [pc, #548]	; (800f7d0 <_vfiprintf_r+0x79c>)
 800f5aa:	6035      	str	r5, [r6, #0]
 800f5ac:	e9dd 310d 	ldrd	r3, r1, [sp, #52]	; 0x34
 800f5b0:	2c10      	cmp	r4, #16
 800f5b2:	f103 0301 	add.w	r3, r3, #1
 800f5b6:	f106 0208 	add.w	r2, r6, #8
 800f5ba:	f300 812a 	bgt.w	800f812 <_vfiprintf_r+0x7de>
 800f5be:	6074      	str	r4, [r6, #4]
 800f5c0:	2b07      	cmp	r3, #7
 800f5c2:	440c      	add	r4, r1
 800f5c4:	e9cd 340d 	strd	r3, r4, [sp, #52]	; 0x34
 800f5c8:	f340 8134 	ble.w	800f834 <_vfiprintf_r+0x800>
 800f5cc:	aa0c      	add	r2, sp, #48	; 0x30
 800f5ce:	4639      	mov	r1, r7
 800f5d0:	4648      	mov	r0, r9
 800f5d2:	f7ff fcfd 	bl	800efd0 <__sprint_r>
 800f5d6:	2800      	cmp	r0, #0
 800f5d8:	f040 8154 	bne.w	800f884 <_vfiprintf_r+0x850>
 800f5dc:	ae0f      	add	r6, sp, #60	; 0x3c
 800f5de:	9b00      	ldr	r3, [sp, #0]
 800f5e0:	980e      	ldr	r0, [sp, #56]	; 0x38
 800f5e2:	6073      	str	r3, [r6, #4]
 800f5e4:	4418      	add	r0, r3
 800f5e6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f5e8:	f8c6 8000 	str.w	r8, [r6]
 800f5ec:	3301      	adds	r3, #1
 800f5ee:	2b07      	cmp	r3, #7
 800f5f0:	900e      	str	r0, [sp, #56]	; 0x38
 800f5f2:	930d      	str	r3, [sp, #52]	; 0x34
 800f5f4:	f300 8120 	bgt.w	800f838 <_vfiprintf_r+0x804>
 800f5f8:	f106 0308 	add.w	r3, r6, #8
 800f5fc:	f01a 0f04 	tst.w	sl, #4
 800f600:	f040 8122 	bne.w	800f848 <_vfiprintf_r+0x814>
 800f604:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 800f608:	9904      	ldr	r1, [sp, #16]
 800f60a:	428a      	cmp	r2, r1
 800f60c:	bfac      	ite	ge
 800f60e:	189b      	addge	r3, r3, r2
 800f610:	185b      	addlt	r3, r3, r1
 800f612:	9302      	str	r3, [sp, #8]
 800f614:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f616:	b13b      	cbz	r3, 800f628 <_vfiprintf_r+0x5f4>
 800f618:	aa0c      	add	r2, sp, #48	; 0x30
 800f61a:	4639      	mov	r1, r7
 800f61c:	4648      	mov	r0, r9
 800f61e:	f7ff fcd7 	bl	800efd0 <__sprint_r>
 800f622:	2800      	cmp	r0, #0
 800f624:	f040 812e 	bne.w	800f884 <_vfiprintf_r+0x850>
 800f628:	2300      	movs	r3, #0
 800f62a:	930d      	str	r3, [sp, #52]	; 0x34
 800f62c:	465c      	mov	r4, fp
 800f62e:	ae0f      	add	r6, sp, #60	; 0x3c
 800f630:	e564      	b.n	800f0fc <_vfiprintf_r+0xc8>
 800f632:	4640      	mov	r0, r8
 800f634:	f7f0 fdcc 	bl	80001d0 <strlen>
 800f638:	9000      	str	r0, [sp, #0]
 800f63a:	e736      	b.n	800f4aa <_vfiprintf_r+0x476>
 800f63c:	f04a 0a10 	orr.w	sl, sl, #16
 800f640:	f01a 0f20 	tst.w	sl, #32
 800f644:	d006      	beq.n	800f654 <_vfiprintf_r+0x620>
 800f646:	3407      	adds	r4, #7
 800f648:	f024 0b07 	bic.w	fp, r4, #7
 800f64c:	e8fb 4502 	ldrd	r4, r5, [fp], #8
 800f650:	2301      	movs	r3, #1
 800f652:	e6dd      	b.n	800f410 <_vfiprintf_r+0x3dc>
 800f654:	f01a 0f10 	tst.w	sl, #16
 800f658:	f104 0b04 	add.w	fp, r4, #4
 800f65c:	d001      	beq.n	800f662 <_vfiprintf_r+0x62e>
 800f65e:	6824      	ldr	r4, [r4, #0]
 800f660:	e003      	b.n	800f66a <_vfiprintf_r+0x636>
 800f662:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f666:	d002      	beq.n	800f66e <_vfiprintf_r+0x63a>
 800f668:	8824      	ldrh	r4, [r4, #0]
 800f66a:	2500      	movs	r5, #0
 800f66c:	e7f0      	b.n	800f650 <_vfiprintf_r+0x61c>
 800f66e:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f672:	d0f4      	beq.n	800f65e <_vfiprintf_r+0x62a>
 800f674:	7824      	ldrb	r4, [r4, #0]
 800f676:	e7f8      	b.n	800f66a <_vfiprintf_r+0x636>
 800f678:	4a56      	ldr	r2, [pc, #344]	; (800f7d4 <_vfiprintf_r+0x7a0>)
 800f67a:	e5d5      	b.n	800f228 <_vfiprintf_r+0x1f4>
 800f67c:	f01a 0f10 	tst.w	sl, #16
 800f680:	f104 0b04 	add.w	fp, r4, #4
 800f684:	d001      	beq.n	800f68a <_vfiprintf_r+0x656>
 800f686:	6824      	ldr	r4, [r4, #0]
 800f688:	e003      	b.n	800f692 <_vfiprintf_r+0x65e>
 800f68a:	f01a 0f40 	tst.w	sl, #64	; 0x40
 800f68e:	d002      	beq.n	800f696 <_vfiprintf_r+0x662>
 800f690:	8824      	ldrh	r4, [r4, #0]
 800f692:	2500      	movs	r5, #0
 800f694:	e5d2      	b.n	800f23c <_vfiprintf_r+0x208>
 800f696:	f41a 7f00 	tst.w	sl, #512	; 0x200
 800f69a:	d0f4      	beq.n	800f686 <_vfiprintf_r+0x652>
 800f69c:	7824      	ldrb	r4, [r4, #0]
 800f69e:	e7f8      	b.n	800f692 <_vfiprintf_r+0x65e>
 800f6a0:	2d00      	cmp	r5, #0
 800f6a2:	bf08      	it	eq
 800f6a4:	2c0a      	cmpeq	r4, #10
 800f6a6:	d205      	bcs.n	800f6b4 <_vfiprintf_r+0x680>
 800f6a8:	3430      	adds	r4, #48	; 0x30
 800f6aa:	f88d 40df 	strb.w	r4, [sp, #223]	; 0xdf
 800f6ae:	f10d 08df 	add.w	r8, sp, #223	; 0xdf
 800f6b2:	e13c      	b.n	800f92e <_vfiprintf_r+0x8fa>
 800f6b4:	ab38      	add	r3, sp, #224	; 0xe0
 800f6b6:	9308      	str	r3, [sp, #32]
 800f6b8:	9b04      	ldr	r3, [sp, #16]
 800f6ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800f6be:	f04f 0a00 	mov.w	sl, #0
 800f6c2:	9309      	str	r3, [sp, #36]	; 0x24
 800f6c4:	9b08      	ldr	r3, [sp, #32]
 800f6c6:	220a      	movs	r2, #10
 800f6c8:	f103 38ff 	add.w	r8, r3, #4294967295
 800f6cc:	4620      	mov	r0, r4
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	4629      	mov	r1, r5
 800f6d2:	f7f1 fad9 	bl	8000c88 <__aeabi_uldivmod>
 800f6d6:	9b08      	ldr	r3, [sp, #32]
 800f6d8:	3230      	adds	r2, #48	; 0x30
 800f6da:	f803 2c01 	strb.w	r2, [r3, #-1]
 800f6de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f6e0:	f10a 0a01 	add.w	sl, sl, #1
 800f6e4:	b1db      	cbz	r3, 800f71e <_vfiprintf_r+0x6ea>
 800f6e6:	9b06      	ldr	r3, [sp, #24]
 800f6e8:	781b      	ldrb	r3, [r3, #0]
 800f6ea:	4553      	cmp	r3, sl
 800f6ec:	d117      	bne.n	800f71e <_vfiprintf_r+0x6ea>
 800f6ee:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
 800f6f2:	d014      	beq.n	800f71e <_vfiprintf_r+0x6ea>
 800f6f4:	2d00      	cmp	r5, #0
 800f6f6:	bf08      	it	eq
 800f6f8:	2c0a      	cmpeq	r4, #10
 800f6fa:	d310      	bcc.n	800f71e <_vfiprintf_r+0x6ea>
 800f6fc:	9b07      	ldr	r3, [sp, #28]
 800f6fe:	eba8 0803 	sub.w	r8, r8, r3
 800f702:	461a      	mov	r2, r3
 800f704:	ee18 1a10 	vmov	r1, s16
 800f708:	4640      	mov	r0, r8
 800f70a:	f7ff fb53 	bl	800edb4 <strncpy>
 800f70e:	9b06      	ldr	r3, [sp, #24]
 800f710:	785b      	ldrb	r3, [r3, #1]
 800f712:	b1a3      	cbz	r3, 800f73e <_vfiprintf_r+0x70a>
 800f714:	9b06      	ldr	r3, [sp, #24]
 800f716:	3301      	adds	r3, #1
 800f718:	9306      	str	r3, [sp, #24]
 800f71a:	f04f 0a00 	mov.w	sl, #0
 800f71e:	220a      	movs	r2, #10
 800f720:	2300      	movs	r3, #0
 800f722:	4620      	mov	r0, r4
 800f724:	4629      	mov	r1, r5
 800f726:	f7f1 faaf 	bl	8000c88 <__aeabi_uldivmod>
 800f72a:	2d00      	cmp	r5, #0
 800f72c:	bf08      	it	eq
 800f72e:	2c0a      	cmpeq	r4, #10
 800f730:	f0c0 80fd 	bcc.w	800f92e <_vfiprintf_r+0x8fa>
 800f734:	4604      	mov	r4, r0
 800f736:	460d      	mov	r5, r1
 800f738:	f8cd 8020 	str.w	r8, [sp, #32]
 800f73c:	e7c2      	b.n	800f6c4 <_vfiprintf_r+0x690>
 800f73e:	469a      	mov	sl, r3
 800f740:	e7ed      	b.n	800f71e <_vfiprintf_r+0x6ea>
 800f742:	9a05      	ldr	r2, [sp, #20]
 800f744:	f004 030f 	and.w	r3, r4, #15
 800f748:	5cd3      	ldrb	r3, [r2, r3]
 800f74a:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f74e:	0923      	lsrs	r3, r4, #4
 800f750:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
 800f754:	092a      	lsrs	r2, r5, #4
 800f756:	461c      	mov	r4, r3
 800f758:	4615      	mov	r5, r2
 800f75a:	ea54 0305 	orrs.w	r3, r4, r5
 800f75e:	d1f0      	bne.n	800f742 <_vfiprintf_r+0x70e>
 800f760:	e0e5      	b.n	800f92e <_vfiprintf_r+0x8fa>
 800f762:	b933      	cbnz	r3, 800f772 <_vfiprintf_r+0x73e>
 800f764:	f01a 0f01 	tst.w	sl, #1
 800f768:	d003      	beq.n	800f772 <_vfiprintf_r+0x73e>
 800f76a:	2330      	movs	r3, #48	; 0x30
 800f76c:	f88d 30df 	strb.w	r3, [sp, #223]	; 0xdf
 800f770:	e79d      	b.n	800f6ae <_vfiprintf_r+0x67a>
 800f772:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f776:	e0da      	b.n	800f92e <_vfiprintf_r+0x8fa>
 800f778:	2b00      	cmp	r3, #0
 800f77a:	f000 80a4 	beq.w	800f8c6 <_vfiprintf_r+0x892>
 800f77e:	2100      	movs	r1, #0
 800f780:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
 800f784:	f88d 102b 	strb.w	r1, [sp, #43]	; 0x2b
 800f788:	46a3      	mov	fp, r4
 800f78a:	e5e7      	b.n	800f35c <_vfiprintf_r+0x328>
 800f78c:	4605      	mov	r5, r0
 800f78e:	e68c      	b.n	800f4aa <_vfiprintf_r+0x476>
 800f790:	2010      	movs	r0, #16
 800f792:	4402      	add	r2, r0
 800f794:	2b07      	cmp	r3, #7
 800f796:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f79a:	6070      	str	r0, [r6, #4]
 800f79c:	dd07      	ble.n	800f7ae <_vfiprintf_r+0x77a>
 800f79e:	aa0c      	add	r2, sp, #48	; 0x30
 800f7a0:	4639      	mov	r1, r7
 800f7a2:	4648      	mov	r0, r9
 800f7a4:	f7ff fc14 	bl	800efd0 <__sprint_r>
 800f7a8:	2800      	cmp	r0, #0
 800f7aa:	d16b      	bne.n	800f884 <_vfiprintf_r+0x850>
 800f7ac:	a90f      	add	r1, sp, #60	; 0x3c
 800f7ae:	3c10      	subs	r4, #16
 800f7b0:	460e      	mov	r6, r1
 800f7b2:	e695      	b.n	800f4e0 <_vfiprintf_r+0x4ac>
 800f7b4:	460e      	mov	r6, r1
 800f7b6:	e6ae      	b.n	800f516 <_vfiprintf_r+0x4e2>
 800f7b8:	aa0c      	add	r2, sp, #48	; 0x30
 800f7ba:	4639      	mov	r1, r7
 800f7bc:	4648      	mov	r0, r9
 800f7be:	f7ff fc07 	bl	800efd0 <__sprint_r>
 800f7c2:	2800      	cmp	r0, #0
 800f7c4:	d15e      	bne.n	800f884 <_vfiprintf_r+0x850>
 800f7c6:	ae0f      	add	r6, sp, #60	; 0x3c
 800f7c8:	e6b7      	b.n	800f53a <_vfiprintf_r+0x506>
 800f7ca:	bf00      	nop
 800f7cc:	08010b28 	.word	0x08010b28
 800f7d0:	08010b38 	.word	0x08010b38
 800f7d4:	08010869 	.word	0x08010869
 800f7d8:	aa0c      	add	r2, sp, #48	; 0x30
 800f7da:	4639      	mov	r1, r7
 800f7dc:	4648      	mov	r0, r9
 800f7de:	f7ff fbf7 	bl	800efd0 <__sprint_r>
 800f7e2:	2800      	cmp	r0, #0
 800f7e4:	d14e      	bne.n	800f884 <_vfiprintf_r+0x850>
 800f7e6:	ae0f      	add	r6, sp, #60	; 0x3c
 800f7e8:	e6b7      	b.n	800f55a <_vfiprintf_r+0x526>
 800f7ea:	2010      	movs	r0, #16
 800f7ec:	4402      	add	r2, r0
 800f7ee:	2b07      	cmp	r3, #7
 800f7f0:	e9cd 320d 	strd	r3, r2, [sp, #52]	; 0x34
 800f7f4:	6070      	str	r0, [r6, #4]
 800f7f6:	dd07      	ble.n	800f808 <_vfiprintf_r+0x7d4>
 800f7f8:	aa0c      	add	r2, sp, #48	; 0x30
 800f7fa:	4639      	mov	r1, r7
 800f7fc:	4648      	mov	r0, r9
 800f7fe:	f7ff fbe7 	bl	800efd0 <__sprint_r>
 800f802:	2800      	cmp	r0, #0
 800f804:	d13e      	bne.n	800f884 <_vfiprintf_r+0x850>
 800f806:	a90f      	add	r1, sp, #60	; 0x3c
 800f808:	3c10      	subs	r4, #16
 800f80a:	460e      	mov	r6, r1
 800f80c:	e6ad      	b.n	800f56a <_vfiprintf_r+0x536>
 800f80e:	460e      	mov	r6, r1
 800f810:	e6c6      	b.n	800f5a0 <_vfiprintf_r+0x56c>
 800f812:	2010      	movs	r0, #16
 800f814:	4401      	add	r1, r0
 800f816:	2b07      	cmp	r3, #7
 800f818:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800f81c:	6070      	str	r0, [r6, #4]
 800f81e:	dd06      	ble.n	800f82e <_vfiprintf_r+0x7fa>
 800f820:	aa0c      	add	r2, sp, #48	; 0x30
 800f822:	4639      	mov	r1, r7
 800f824:	4648      	mov	r0, r9
 800f826:	f7ff fbd3 	bl	800efd0 <__sprint_r>
 800f82a:	bb58      	cbnz	r0, 800f884 <_vfiprintf_r+0x850>
 800f82c:	aa0f      	add	r2, sp, #60	; 0x3c
 800f82e:	3c10      	subs	r4, #16
 800f830:	4616      	mov	r6, r2
 800f832:	e6ba      	b.n	800f5aa <_vfiprintf_r+0x576>
 800f834:	4616      	mov	r6, r2
 800f836:	e6d2      	b.n	800f5de <_vfiprintf_r+0x5aa>
 800f838:	aa0c      	add	r2, sp, #48	; 0x30
 800f83a:	4639      	mov	r1, r7
 800f83c:	4648      	mov	r0, r9
 800f83e:	f7ff fbc7 	bl	800efd0 <__sprint_r>
 800f842:	b9f8      	cbnz	r0, 800f884 <_vfiprintf_r+0x850>
 800f844:	ab0f      	add	r3, sp, #60	; 0x3c
 800f846:	e6d9      	b.n	800f5fc <_vfiprintf_r+0x5c8>
 800f848:	e9dd 2103 	ldrd	r2, r1, [sp, #12]
 800f84c:	1a54      	subs	r4, r2, r1
 800f84e:	2c00      	cmp	r4, #0
 800f850:	f77f aed8 	ble.w	800f604 <_vfiprintf_r+0x5d0>
 800f854:	4d3a      	ldr	r5, [pc, #232]	; (800f940 <_vfiprintf_r+0x90c>)
 800f856:	2610      	movs	r6, #16
 800f858:	e9dd 210d 	ldrd	r2, r1, [sp, #52]	; 0x34
 800f85c:	2c10      	cmp	r4, #16
 800f85e:	f102 0201 	add.w	r2, r2, #1
 800f862:	601d      	str	r5, [r3, #0]
 800f864:	dc1d      	bgt.n	800f8a2 <_vfiprintf_r+0x86e>
 800f866:	605c      	str	r4, [r3, #4]
 800f868:	2a07      	cmp	r2, #7
 800f86a:	440c      	add	r4, r1
 800f86c:	e9cd 240d 	strd	r2, r4, [sp, #52]	; 0x34
 800f870:	f77f aec8 	ble.w	800f604 <_vfiprintf_r+0x5d0>
 800f874:	aa0c      	add	r2, sp, #48	; 0x30
 800f876:	4639      	mov	r1, r7
 800f878:	4648      	mov	r0, r9
 800f87a:	f7ff fba9 	bl	800efd0 <__sprint_r>
 800f87e:	2800      	cmp	r0, #0
 800f880:	f43f aec0 	beq.w	800f604 <_vfiprintf_r+0x5d0>
 800f884:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800f886:	07d9      	lsls	r1, r3, #31
 800f888:	d405      	bmi.n	800f896 <_vfiprintf_r+0x862>
 800f88a:	89bb      	ldrh	r3, [r7, #12]
 800f88c:	059a      	lsls	r2, r3, #22
 800f88e:	d402      	bmi.n	800f896 <_vfiprintf_r+0x862>
 800f890:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800f892:	f7fa f8b6 	bl	8009a02 <__retarget_lock_release_recursive>
 800f896:	89bb      	ldrh	r3, [r7, #12]
 800f898:	065b      	lsls	r3, r3, #25
 800f89a:	f57f abfe 	bpl.w	800f09a <_vfiprintf_r+0x66>
 800f89e:	f7ff bbf9 	b.w	800f094 <_vfiprintf_r+0x60>
 800f8a2:	3110      	adds	r1, #16
 800f8a4:	2a07      	cmp	r2, #7
 800f8a6:	e9cd 210d 	strd	r2, r1, [sp, #52]	; 0x34
 800f8aa:	605e      	str	r6, [r3, #4]
 800f8ac:	dc02      	bgt.n	800f8b4 <_vfiprintf_r+0x880>
 800f8ae:	3308      	adds	r3, #8
 800f8b0:	3c10      	subs	r4, #16
 800f8b2:	e7d1      	b.n	800f858 <_vfiprintf_r+0x824>
 800f8b4:	aa0c      	add	r2, sp, #48	; 0x30
 800f8b6:	4639      	mov	r1, r7
 800f8b8:	4648      	mov	r0, r9
 800f8ba:	f7ff fb89 	bl	800efd0 <__sprint_r>
 800f8be:	2800      	cmp	r0, #0
 800f8c0:	d1e0      	bne.n	800f884 <_vfiprintf_r+0x850>
 800f8c2:	ab0f      	add	r3, sp, #60	; 0x3c
 800f8c4:	e7f4      	b.n	800f8b0 <_vfiprintf_r+0x87c>
 800f8c6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f8c8:	b913      	cbnz	r3, 800f8d0 <_vfiprintf_r+0x89c>
 800f8ca:	2300      	movs	r3, #0
 800f8cc:	930d      	str	r3, [sp, #52]	; 0x34
 800f8ce:	e7d9      	b.n	800f884 <_vfiprintf_r+0x850>
 800f8d0:	aa0c      	add	r2, sp, #48	; 0x30
 800f8d2:	4639      	mov	r1, r7
 800f8d4:	4648      	mov	r0, r9
 800f8d6:	f7ff fb7b 	bl	800efd0 <__sprint_r>
 800f8da:	2800      	cmp	r0, #0
 800f8dc:	d0f5      	beq.n	800f8ca <_vfiprintf_r+0x896>
 800f8de:	e7d1      	b.n	800f884 <_vfiprintf_r+0x850>
 800f8e0:	ea54 0205 	orrs.w	r2, r4, r5
 800f8e4:	f8cd a010 	str.w	sl, [sp, #16]
 800f8e8:	f43f ada4 	beq.w	800f434 <_vfiprintf_r+0x400>
 800f8ec:	2b01      	cmp	r3, #1
 800f8ee:	f43f aed7 	beq.w	800f6a0 <_vfiprintf_r+0x66c>
 800f8f2:	2b02      	cmp	r3, #2
 800f8f4:	f10d 08e0 	add.w	r8, sp, #224	; 0xe0
 800f8f8:	f43f af23 	beq.w	800f742 <_vfiprintf_r+0x70e>
 800f8fc:	08e2      	lsrs	r2, r4, #3
 800f8fe:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
 800f902:	08e8      	lsrs	r0, r5, #3
 800f904:	f004 0307 	and.w	r3, r4, #7
 800f908:	4605      	mov	r5, r0
 800f90a:	4614      	mov	r4, r2
 800f90c:	3330      	adds	r3, #48	; 0x30
 800f90e:	ea54 0205 	orrs.w	r2, r4, r5
 800f912:	4641      	mov	r1, r8
 800f914:	f808 3d01 	strb.w	r3, [r8, #-1]!
 800f918:	d1f0      	bne.n	800f8fc <_vfiprintf_r+0x8c8>
 800f91a:	9a04      	ldr	r2, [sp, #16]
 800f91c:	07d0      	lsls	r0, r2, #31
 800f91e:	d506      	bpl.n	800f92e <_vfiprintf_r+0x8fa>
 800f920:	2b30      	cmp	r3, #48	; 0x30
 800f922:	d004      	beq.n	800f92e <_vfiprintf_r+0x8fa>
 800f924:	2330      	movs	r3, #48	; 0x30
 800f926:	f808 3c01 	strb.w	r3, [r8, #-1]
 800f92a:	f1a1 0802 	sub.w	r8, r1, #2
 800f92e:	ab38      	add	r3, sp, #224	; 0xe0
 800f930:	eba3 0308 	sub.w	r3, r3, r8
 800f934:	9d00      	ldr	r5, [sp, #0]
 800f936:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f93a:	9300      	str	r3, [sp, #0]
 800f93c:	e5b5      	b.n	800f4aa <_vfiprintf_r+0x476>
 800f93e:	bf00      	nop
 800f940:	08010b28 	.word	0x08010b28

0800f944 <__sbprintf>:
 800f944:	b570      	push	{r4, r5, r6, lr}
 800f946:	460c      	mov	r4, r1
 800f948:	8989      	ldrh	r1, [r1, #12]
 800f94a:	f5ad 6d8e 	sub.w	sp, sp, #1136	; 0x470
 800f94e:	f021 0102 	bic.w	r1, r1, #2
 800f952:	f8ad 1014 	strh.w	r1, [sp, #20]
 800f956:	6e61      	ldr	r1, [r4, #100]	; 0x64
 800f958:	911b      	str	r1, [sp, #108]	; 0x6c
 800f95a:	89e1      	ldrh	r1, [r4, #14]
 800f95c:	f8ad 1016 	strh.w	r1, [sp, #22]
 800f960:	69e1      	ldr	r1, [r4, #28]
 800f962:	9109      	str	r1, [sp, #36]	; 0x24
 800f964:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800f966:	910b      	str	r1, [sp, #44]	; 0x2c
 800f968:	a91c      	add	r1, sp, #112	; 0x70
 800f96a:	9102      	str	r1, [sp, #8]
 800f96c:	9106      	str	r1, [sp, #24]
 800f96e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800f972:	4606      	mov	r6, r0
 800f974:	9104      	str	r1, [sp, #16]
 800f976:	9107      	str	r1, [sp, #28]
 800f978:	a818      	add	r0, sp, #96	; 0x60
 800f97a:	2100      	movs	r1, #0
 800f97c:	e9cd 3200 	strd	r3, r2, [sp]
 800f980:	9108      	str	r1, [sp, #32]
 800f982:	f7fa f83b 	bl	80099fc <__retarget_lock_init_recursive>
 800f986:	e9dd 3200 	ldrd	r3, r2, [sp]
 800f98a:	a902      	add	r1, sp, #8
 800f98c:	4630      	mov	r0, r6
 800f98e:	f7ff fb51 	bl	800f034 <_vfiprintf_r>
 800f992:	1e05      	subs	r5, r0, #0
 800f994:	db07      	blt.n	800f9a6 <__sbprintf+0x62>
 800f996:	a902      	add	r1, sp, #8
 800f998:	4630      	mov	r0, r6
 800f99a:	f7fe f833 	bl	800da04 <_fflush_r>
 800f99e:	2800      	cmp	r0, #0
 800f9a0:	bf18      	it	ne
 800f9a2:	f04f 35ff 	movne.w	r5, #4294967295
 800f9a6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 800f9aa:	9818      	ldr	r0, [sp, #96]	; 0x60
 800f9ac:	065b      	lsls	r3, r3, #25
 800f9ae:	bf42      	ittt	mi
 800f9b0:	89a3      	ldrhmi	r3, [r4, #12]
 800f9b2:	f043 0340 	orrmi.w	r3, r3, #64	; 0x40
 800f9b6:	81a3      	strhmi	r3, [r4, #12]
 800f9b8:	f7fa f821 	bl	80099fe <__retarget_lock_close_recursive>
 800f9bc:	4628      	mov	r0, r5
 800f9be:	f50d 6d8e 	add.w	sp, sp, #1136	; 0x470
 800f9c2:	bd70      	pop	{r4, r5, r6, pc}

0800f9c4 <abort>:
 800f9c4:	b508      	push	{r3, lr}
 800f9c6:	2006      	movs	r0, #6
 800f9c8:	f000 f898 	bl	800fafc <raise>
 800f9cc:	2001      	movs	r0, #1
 800f9ce:	f7f4 f913 	bl	8003bf8 <_exit>

0800f9d2 <__fputwc>:
 800f9d2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f9d6:	4680      	mov	r8, r0
 800f9d8:	460e      	mov	r6, r1
 800f9da:	4615      	mov	r5, r2
 800f9dc:	f7fa f804 	bl	80099e8 <__locale_mb_cur_max>
 800f9e0:	2801      	cmp	r0, #1
 800f9e2:	d11c      	bne.n	800fa1e <__fputwc+0x4c>
 800f9e4:	1e73      	subs	r3, r6, #1
 800f9e6:	2bfe      	cmp	r3, #254	; 0xfe
 800f9e8:	d819      	bhi.n	800fa1e <__fputwc+0x4c>
 800f9ea:	f88d 6004 	strb.w	r6, [sp, #4]
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	2700      	movs	r7, #0
 800f9f2:	f10d 0904 	add.w	r9, sp, #4
 800f9f6:	42a7      	cmp	r7, r4
 800f9f8:	d020      	beq.n	800fa3c <__fputwc+0x6a>
 800f9fa:	68ab      	ldr	r3, [r5, #8]
 800f9fc:	f817 1009 	ldrb.w	r1, [r7, r9]
 800fa00:	3b01      	subs	r3, #1
 800fa02:	2b00      	cmp	r3, #0
 800fa04:	60ab      	str	r3, [r5, #8]
 800fa06:	da04      	bge.n	800fa12 <__fputwc+0x40>
 800fa08:	69aa      	ldr	r2, [r5, #24]
 800fa0a:	4293      	cmp	r3, r2
 800fa0c:	db1a      	blt.n	800fa44 <__fputwc+0x72>
 800fa0e:	290a      	cmp	r1, #10
 800fa10:	d018      	beq.n	800fa44 <__fputwc+0x72>
 800fa12:	682b      	ldr	r3, [r5, #0]
 800fa14:	1c5a      	adds	r2, r3, #1
 800fa16:	602a      	str	r2, [r5, #0]
 800fa18:	7019      	strb	r1, [r3, #0]
 800fa1a:	3701      	adds	r7, #1
 800fa1c:	e7eb      	b.n	800f9f6 <__fputwc+0x24>
 800fa1e:	4632      	mov	r2, r6
 800fa20:	f105 035c 	add.w	r3, r5, #92	; 0x5c
 800fa24:	a901      	add	r1, sp, #4
 800fa26:	4640      	mov	r0, r8
 800fa28:	f000 f8ce 	bl	800fbc8 <_wcrtomb_r>
 800fa2c:	1c42      	adds	r2, r0, #1
 800fa2e:	4604      	mov	r4, r0
 800fa30:	d1de      	bne.n	800f9f0 <__fputwc+0x1e>
 800fa32:	89ab      	ldrh	r3, [r5, #12]
 800fa34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800fa38:	81ab      	strh	r3, [r5, #12]
 800fa3a:	4606      	mov	r6, r0
 800fa3c:	4630      	mov	r0, r6
 800fa3e:	b003      	add	sp, #12
 800fa40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fa44:	462a      	mov	r2, r5
 800fa46:	4640      	mov	r0, r8
 800fa48:	f000 f874 	bl	800fb34 <__swbuf_r>
 800fa4c:	1c43      	adds	r3, r0, #1
 800fa4e:	d1e4      	bne.n	800fa1a <__fputwc+0x48>
 800fa50:	4606      	mov	r6, r0
 800fa52:	e7f3      	b.n	800fa3c <__fputwc+0x6a>

0800fa54 <_fputwc_r>:
 800fa54:	6e53      	ldr	r3, [r2, #100]	; 0x64
 800fa56:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800fa58:	4614      	mov	r4, r2
 800fa5a:	07da      	lsls	r2, r3, #31
 800fa5c:	4605      	mov	r5, r0
 800fa5e:	d407      	bmi.n	800fa70 <_fputwc_r+0x1c>
 800fa60:	89a3      	ldrh	r3, [r4, #12]
 800fa62:	059b      	lsls	r3, r3, #22
 800fa64:	d404      	bmi.n	800fa70 <_fputwc_r+0x1c>
 800fa66:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa68:	9101      	str	r1, [sp, #4]
 800fa6a:	f7f9 ffc9 	bl	8009a00 <__retarget_lock_acquire_recursive>
 800fa6e:	9901      	ldr	r1, [sp, #4]
 800fa70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fa74:	0498      	lsls	r0, r3, #18
 800fa76:	d406      	bmi.n	800fa86 <_fputwc_r+0x32>
 800fa78:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa7c:	81a3      	strh	r3, [r4, #12]
 800fa7e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa80:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fa84:	6663      	str	r3, [r4, #100]	; 0x64
 800fa86:	4622      	mov	r2, r4
 800fa88:	4628      	mov	r0, r5
 800fa8a:	f7ff ffa2 	bl	800f9d2 <__fputwc>
 800fa8e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fa90:	07da      	lsls	r2, r3, #31
 800fa92:	4605      	mov	r5, r0
 800fa94:	d405      	bmi.n	800faa2 <_fputwc_r+0x4e>
 800fa96:	89a3      	ldrh	r3, [r4, #12]
 800fa98:	059b      	lsls	r3, r3, #22
 800fa9a:	d402      	bmi.n	800faa2 <_fputwc_r+0x4e>
 800fa9c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800fa9e:	f7f9 ffb0 	bl	8009a02 <__retarget_lock_release_recursive>
 800faa2:	4628      	mov	r0, r5
 800faa4:	b003      	add	sp, #12
 800faa6:	bd30      	pop	{r4, r5, pc}

0800faa8 <_raise_r>:
 800faa8:	291f      	cmp	r1, #31
 800faaa:	b538      	push	{r3, r4, r5, lr}
 800faac:	4604      	mov	r4, r0
 800faae:	460d      	mov	r5, r1
 800fab0:	d904      	bls.n	800fabc <_raise_r+0x14>
 800fab2:	2316      	movs	r3, #22
 800fab4:	6003      	str	r3, [r0, #0]
 800fab6:	f04f 30ff 	mov.w	r0, #4294967295
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	f8d0 22dc 	ldr.w	r2, [r0, #732]	; 0x2dc
 800fac0:	b112      	cbz	r2, 800fac8 <_raise_r+0x20>
 800fac2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fac6:	b94b      	cbnz	r3, 800fadc <_raise_r+0x34>
 800fac8:	4620      	mov	r0, r4
 800faca:	f000 f831 	bl	800fb30 <_getpid_r>
 800face:	462a      	mov	r2, r5
 800fad0:	4601      	mov	r1, r0
 800fad2:	4620      	mov	r0, r4
 800fad4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fad8:	f000 b818 	b.w	800fb0c <_kill_r>
 800fadc:	2b01      	cmp	r3, #1
 800fade:	d00a      	beq.n	800faf6 <_raise_r+0x4e>
 800fae0:	1c59      	adds	r1, r3, #1
 800fae2:	d103      	bne.n	800faec <_raise_r+0x44>
 800fae4:	2316      	movs	r3, #22
 800fae6:	6003      	str	r3, [r0, #0]
 800fae8:	2001      	movs	r0, #1
 800faea:	e7e6      	b.n	800faba <_raise_r+0x12>
 800faec:	2400      	movs	r4, #0
 800faee:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800faf2:	4628      	mov	r0, r5
 800faf4:	4798      	blx	r3
 800faf6:	2000      	movs	r0, #0
 800faf8:	e7df      	b.n	800faba <_raise_r+0x12>
	...

0800fafc <raise>:
 800fafc:	4b02      	ldr	r3, [pc, #8]	; (800fb08 <raise+0xc>)
 800fafe:	4601      	mov	r1, r0
 800fb00:	6818      	ldr	r0, [r3, #0]
 800fb02:	f7ff bfd1 	b.w	800faa8 <_raise_r>
 800fb06:	bf00      	nop
 800fb08:	200001f8 	.word	0x200001f8

0800fb0c <_kill_r>:
 800fb0c:	b538      	push	{r3, r4, r5, lr}
 800fb0e:	4d07      	ldr	r5, [pc, #28]	; (800fb2c <_kill_r+0x20>)
 800fb10:	2300      	movs	r3, #0
 800fb12:	4604      	mov	r4, r0
 800fb14:	4608      	mov	r0, r1
 800fb16:	4611      	mov	r1, r2
 800fb18:	602b      	str	r3, [r5, #0]
 800fb1a:	f7f4 f85d 	bl	8003bd8 <_kill>
 800fb1e:	1c43      	adds	r3, r0, #1
 800fb20:	d102      	bne.n	800fb28 <_kill_r+0x1c>
 800fb22:	682b      	ldr	r3, [r5, #0]
 800fb24:	b103      	cbz	r3, 800fb28 <_kill_r+0x1c>
 800fb26:	6023      	str	r3, [r4, #0]
 800fb28:	bd38      	pop	{r3, r4, r5, pc}
 800fb2a:	bf00      	nop
 800fb2c:	20001770 	.word	0x20001770

0800fb30 <_getpid_r>:
 800fb30:	f7f4 b84a 	b.w	8003bc8 <_getpid>

0800fb34 <__swbuf_r>:
 800fb34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fb36:	460e      	mov	r6, r1
 800fb38:	4614      	mov	r4, r2
 800fb3a:	4605      	mov	r5, r0
 800fb3c:	b118      	cbz	r0, 800fb46 <__swbuf_r+0x12>
 800fb3e:	6b83      	ldr	r3, [r0, #56]	; 0x38
 800fb40:	b90b      	cbnz	r3, 800fb46 <__swbuf_r+0x12>
 800fb42:	f7f9 fd9f 	bl	8009684 <__sinit>
 800fb46:	69a3      	ldr	r3, [r4, #24]
 800fb48:	60a3      	str	r3, [r4, #8]
 800fb4a:	89a3      	ldrh	r3, [r4, #12]
 800fb4c:	0719      	lsls	r1, r3, #28
 800fb4e:	d529      	bpl.n	800fba4 <__swbuf_r+0x70>
 800fb50:	6923      	ldr	r3, [r4, #16]
 800fb52:	b33b      	cbz	r3, 800fba4 <__swbuf_r+0x70>
 800fb54:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800fb58:	b2f6      	uxtb	r6, r6
 800fb5a:	049a      	lsls	r2, r3, #18
 800fb5c:	4637      	mov	r7, r6
 800fb5e:	d52a      	bpl.n	800fbb6 <__swbuf_r+0x82>
 800fb60:	6823      	ldr	r3, [r4, #0]
 800fb62:	6920      	ldr	r0, [r4, #16]
 800fb64:	1a18      	subs	r0, r3, r0
 800fb66:	6963      	ldr	r3, [r4, #20]
 800fb68:	4283      	cmp	r3, r0
 800fb6a:	dc04      	bgt.n	800fb76 <__swbuf_r+0x42>
 800fb6c:	4621      	mov	r1, r4
 800fb6e:	4628      	mov	r0, r5
 800fb70:	f7fd ff48 	bl	800da04 <_fflush_r>
 800fb74:	b9e0      	cbnz	r0, 800fbb0 <__swbuf_r+0x7c>
 800fb76:	68a3      	ldr	r3, [r4, #8]
 800fb78:	3b01      	subs	r3, #1
 800fb7a:	60a3      	str	r3, [r4, #8]
 800fb7c:	6823      	ldr	r3, [r4, #0]
 800fb7e:	1c5a      	adds	r2, r3, #1
 800fb80:	6022      	str	r2, [r4, #0]
 800fb82:	701e      	strb	r6, [r3, #0]
 800fb84:	6962      	ldr	r2, [r4, #20]
 800fb86:	1c43      	adds	r3, r0, #1
 800fb88:	429a      	cmp	r2, r3
 800fb8a:	d004      	beq.n	800fb96 <__swbuf_r+0x62>
 800fb8c:	89a3      	ldrh	r3, [r4, #12]
 800fb8e:	07db      	lsls	r3, r3, #31
 800fb90:	d506      	bpl.n	800fba0 <__swbuf_r+0x6c>
 800fb92:	2e0a      	cmp	r6, #10
 800fb94:	d104      	bne.n	800fba0 <__swbuf_r+0x6c>
 800fb96:	4621      	mov	r1, r4
 800fb98:	4628      	mov	r0, r5
 800fb9a:	f7fd ff33 	bl	800da04 <_fflush_r>
 800fb9e:	b938      	cbnz	r0, 800fbb0 <__swbuf_r+0x7c>
 800fba0:	4638      	mov	r0, r7
 800fba2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fba4:	4621      	mov	r1, r4
 800fba6:	4628      	mov	r0, r5
 800fba8:	f7fc ff4e 	bl	800ca48 <__swsetup_r>
 800fbac:	2800      	cmp	r0, #0
 800fbae:	d0d1      	beq.n	800fb54 <__swbuf_r+0x20>
 800fbb0:	f04f 37ff 	mov.w	r7, #4294967295
 800fbb4:	e7f4      	b.n	800fba0 <__swbuf_r+0x6c>
 800fbb6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800fbba:	81a3      	strh	r3, [r4, #12]
 800fbbc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800fbbe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800fbc2:	6663      	str	r3, [r4, #100]	; 0x64
 800fbc4:	e7cc      	b.n	800fb60 <__swbuf_r+0x2c>
	...

0800fbc8 <_wcrtomb_r>:
 800fbc8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbca:	4c09      	ldr	r4, [pc, #36]	; (800fbf0 <_wcrtomb_r+0x28>)
 800fbcc:	b085      	sub	sp, #20
 800fbce:	f8d4 70e0 	ldr.w	r7, [r4, #224]	; 0xe0
 800fbd2:	4605      	mov	r5, r0
 800fbd4:	461e      	mov	r6, r3
 800fbd6:	b909      	cbnz	r1, 800fbdc <_wcrtomb_r+0x14>
 800fbd8:	460a      	mov	r2, r1
 800fbda:	a901      	add	r1, sp, #4
 800fbdc:	47b8      	blx	r7
 800fbde:	1c43      	adds	r3, r0, #1
 800fbe0:	bf01      	itttt	eq
 800fbe2:	2300      	moveq	r3, #0
 800fbe4:	6033      	streq	r3, [r6, #0]
 800fbe6:	238a      	moveq	r3, #138	; 0x8a
 800fbe8:	602b      	streq	r3, [r5, #0]
 800fbea:	b005      	add	sp, #20
 800fbec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fbee:	bf00      	nop
 800fbf0:	2000062c 	.word	0x2000062c

0800fbf4 <_init>:
 800fbf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fbf6:	bf00      	nop
 800fbf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fbfa:	bc08      	pop	{r3}
 800fbfc:	469e      	mov	lr, r3
 800fbfe:	4770      	bx	lr

0800fc00 <_fini>:
 800fc00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc02:	bf00      	nop
 800fc04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800fc06:	bc08      	pop	{r3}
 800fc08:	469e      	mov	lr, r3
 800fc0a:	4770      	bx	lr
