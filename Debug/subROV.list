
subROV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be94  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f10  0800c028  0800c028  0001c028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf38  0800cf38  000203cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf38  0800cf38  0001cf38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf40  0800cf40  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf40  0800cf40  0001cf40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf44  0800cf44  0001cf44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800cf48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  200003cc  0800d314  000203cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f6c  0800d314  00020f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173bf  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003422  00000000  00000000  000377bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0003abe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003be28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022f51  00000000  00000000  0003cf18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015909  00000000  00000000  0005fe69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0258  00000000  00000000  00075772  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001459ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006190  00000000  00000000  00145a20  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003cc 	.word	0x200003cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c00c 	.word	0x0800c00c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d0 	.word	0x200003d0
 80001cc:	0800c00c 	.word	0x0800c00c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a4 	b.w	8000f98 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 8083 	bne.w	8000dea <__udivmoddi4+0x116>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	d947      	bls.n	8000d7a <__udivmoddi4+0xa6>
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	b142      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	f1c2 0020 	rsb	r0, r2, #32
 8000cf4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	4097      	lsls	r7, r2
 8000cfc:	ea40 0c01 	orr.w	ip, r0, r1
 8000d00:	4094      	lsls	r4, r2
 8000d02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d06:	0c23      	lsrs	r3, r4, #16
 8000d08:	fbbc f6f8 	udiv	r6, ip, r8
 8000d0c:	fa1f fe87 	uxth.w	lr, r7
 8000d10:	fb08 c116 	mls	r1, r8, r6, ip
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f10e 	mul.w	r1, r6, lr
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x60>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d26:	f080 8119 	bcs.w	8000f5c <__udivmoddi4+0x288>
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	f240 8116 	bls.w	8000f5c <__udivmoddi4+0x288>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	443b      	add	r3, r7
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x8c>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	f080 8105 	bcs.w	8000f60 <__udivmoddi4+0x28c>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f240 8102 	bls.w	8000f60 <__udivmoddi4+0x28c>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	443c      	add	r4, r7
 8000d60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d64:	eba4 040e 	sub.w	r4, r4, lr
 8000d68:	2600      	movs	r6, #0
 8000d6a:	b11d      	cbz	r5, 8000d74 <__udivmoddi4+0xa0>
 8000d6c:	40d4      	lsrs	r4, r2
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e9c5 4300 	strd	r4, r3, [r5]
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xaa>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d150      	bne.n	8000e28 <__udivmoddi4+0x154>
 8000d86:	1bcb      	subs	r3, r1, r7
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa1f f887 	uxth.w	r8, r7
 8000d90:	2601      	movs	r6, #1
 8000d92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d96:	0c21      	lsrs	r1, r4, #16
 8000d98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da0:	fb08 f30c 	mul.w	r3, r8, ip
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0xe4>
 8000da8:	1879      	adds	r1, r7, r1
 8000daa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0xe2>
 8000db0:	428b      	cmp	r3, r1
 8000db2:	f200 80e9 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000db6:	4684      	mov	ip, r0
 8000db8:	1ac9      	subs	r1, r1, r3
 8000dba:	b2a3      	uxth	r3, r4
 8000dbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dc8:	fb08 f800 	mul.w	r8, r8, r0
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x10c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x10a>
 8000dd8:	45a0      	cmp	r8, r4
 8000dda:	f200 80d9 	bhi.w	8000f90 <__udivmoddi4+0x2bc>
 8000dde:	4618      	mov	r0, r3
 8000de0:	eba4 0408 	sub.w	r4, r4, r8
 8000de4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de8:	e7bf      	b.n	8000d6a <__udivmoddi4+0x96>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x12e>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	f000 80b1 	beq.w	8000f56 <__udivmoddi4+0x282>
 8000df4:	2600      	movs	r6, #0
 8000df6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	fab3 f683 	clz	r6, r3
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d14a      	bne.n	8000ea0 <__udivmoddi4+0x1cc>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d302      	bcc.n	8000e14 <__udivmoddi4+0x140>
 8000e0e:	4282      	cmp	r2, r0
 8000e10:	f200 80b8 	bhi.w	8000f84 <__udivmoddi4+0x2b0>
 8000e14:	1a84      	subs	r4, r0, r2
 8000e16:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	468c      	mov	ip, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0a8      	beq.n	8000d74 <__udivmoddi4+0xa0>
 8000e22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e30:	4097      	lsls	r7, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3a:	40d9      	lsrs	r1, r3
 8000e3c:	4330      	orrs	r0, r6
 8000e3e:	0c03      	lsrs	r3, r0, #16
 8000e40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e44:	fa1f f887 	uxth.w	r8, r7
 8000e48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e50:	fb06 f108 	mul.w	r1, r6, r8
 8000e54:	4299      	cmp	r1, r3
 8000e56:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x19c>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e62:	f080 808d 	bcs.w	8000f80 <__udivmoddi4+0x2ac>
 8000e66:	4299      	cmp	r1, r3
 8000e68:	f240 808a 	bls.w	8000f80 <__udivmoddi4+0x2ac>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	443b      	add	r3, r7
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b281      	uxth	r1, r0
 8000e74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb00 f308 	mul.w	r3, r0, r8
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x1c4>
 8000e88:	1879      	adds	r1, r7, r1
 8000e8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8e:	d273      	bcs.n	8000f78 <__udivmoddi4+0x2a4>
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d971      	bls.n	8000f78 <__udivmoddi4+0x2a4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4439      	add	r1, r7
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e9e:	e778      	b.n	8000d92 <__udivmoddi4+0xbe>
 8000ea0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ea8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eac:	431c      	orrs	r4, r3
 8000eae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000eb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	0c3b      	lsrs	r3, r7, #16
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fa1f f884 	uxth.w	r8, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ed6:	458a      	cmp	sl, r1
 8000ed8:	fa02 f206 	lsl.w	r2, r2, r6
 8000edc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x220>
 8000ee2:	1861      	adds	r1, r4, r1
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d248      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000eea:	458a      	cmp	sl, r1
 8000eec:	d946      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	4421      	add	r1, r4
 8000ef4:	eba1 010a 	sub.w	r1, r1, sl
 8000ef8:	b2bf      	uxth	r7, r7
 8000efa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000efe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x24a>
 8000f0e:	19e7      	adds	r7, r4, r7
 8000f10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f14:	d22e      	bcs.n	8000f74 <__udivmoddi4+0x2a0>
 8000f16:	45b8      	cmp	r8, r7
 8000f18:	d92c      	bls.n	8000f74 <__udivmoddi4+0x2a0>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	4427      	add	r7, r4
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba7 0708 	sub.w	r7, r7, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454f      	cmp	r7, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	4649      	mov	r1, r9
 8000f30:	d31a      	bcc.n	8000f68 <__udivmoddi4+0x294>
 8000f32:	d017      	beq.n	8000f64 <__udivmoddi4+0x290>
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x27a>
 8000f36:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f42:	40f2      	lsrs	r2, r6
 8000f44:	ea4c 0202 	orr.w	r2, ip, r2
 8000f48:	40f7      	lsrs	r7, r6
 8000f4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f4e:	2600      	movs	r6, #0
 8000f50:	4631      	mov	r1, r6
 8000f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f56:	462e      	mov	r6, r5
 8000f58:	4628      	mov	r0, r5
 8000f5a:	e70b      	b.n	8000d74 <__udivmoddi4+0xa0>
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	e6e9      	b.n	8000d34 <__udivmoddi4+0x60>
 8000f60:	4618      	mov	r0, r3
 8000f62:	e6fd      	b.n	8000d60 <__udivmoddi4+0x8c>
 8000f64:	4543      	cmp	r3, r8
 8000f66:	d2e5      	bcs.n	8000f34 <__udivmoddi4+0x260>
 8000f68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f70:	3801      	subs	r0, #1
 8000f72:	e7df      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e7d2      	b.n	8000f1e <__udivmoddi4+0x24a>
 8000f78:	4660      	mov	r0, ip
 8000f7a:	e78d      	b.n	8000e98 <__udivmoddi4+0x1c4>
 8000f7c:	4681      	mov	r9, r0
 8000f7e:	e7b9      	b.n	8000ef4 <__udivmoddi4+0x220>
 8000f80:	4666      	mov	r6, ip
 8000f82:	e775      	b.n	8000e70 <__udivmoddi4+0x19c>
 8000f84:	4630      	mov	r0, r6
 8000f86:	e74a      	b.n	8000e1e <__udivmoddi4+0x14a>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	4439      	add	r1, r7
 8000f8e:	e713      	b.n	8000db8 <__udivmoddi4+0xe4>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	e724      	b.n	8000de0 <__udivmoddi4+0x10c>
 8000f96:	bf00      	nop

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <PID_init>:
};
//Roll,Pitch,Yaw,z x y
float target_ver[6];
int pidinit = 0;
void PID_init()
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
    target_ver[0] = 0;
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <PID_init+0x34>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
    target_ver[1] = 0;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <PID_init+0x34>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
    target_ver[2] = yaw;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <PID_init+0x38>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <PID_init+0x34>)
 8000fb6:	6093      	str	r3, [r2, #8]
    target_ver[3] = 0.05;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <PID_init+0x34>)
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <PID_init+0x3c>)
 8000fbc:	60da      	str	r2, [r3, #12]
    pidinit = 1;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <PID_init+0x40>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000488 	.word	0x20000488
 8000fd4:	200004fc 	.word	0x200004fc
 8000fd8:	3d4ccccd 	.word	0x3d4ccccd
 8000fdc:	200003e8 	.word	0x200003e8

08000fe0 <PID_CTRL>:

void PID_CTRL() //综合控制 encodeL左侧编码器 encodeR右侧编码器
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
    //out += Kpr * (err - err1) + Tir * err+Tdr*(err-2*err1+err2); //
    //增量式PID方程 输出=输出+P*(本次误差-上次误差)+I*本次误差
    float err[6];
    //float tmp_yaw;
    //tmp_yaw = target_ver[2];
    target_ver[2]+=yawa;
 8000fe6:	4b9f      	ldr	r3, [pc, #636]	; (8001264 <PID_CTRL+0x284>)
 8000fe8:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fec:	4b9e      	ldr	r3, [pc, #632]	; (8001268 <PID_CTRL+0x288>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	4b9b      	ldr	r3, [pc, #620]	; (8001264 <PID_CTRL+0x284>)
 8000ff8:	edc3 7a02 	vstr	s15, [r3, #8]
    if (target_ver[2] > 180)
 8000ffc:	4b99      	ldr	r3, [pc, #612]	; (8001264 <PID_CTRL+0x284>)
 8000ffe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001002:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800126c <PID_CTRL+0x28c>
 8001006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	dd09      	ble.n	8001024 <PID_CTRL+0x44>
    	target_ver[2] = target_ver[2] - 360;
 8001010:	4b94      	ldr	r3, [pc, #592]	; (8001264 <PID_CTRL+0x284>)
 8001012:	edd3 7a02 	vldr	s15, [r3, #8]
 8001016:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001270 <PID_CTRL+0x290>
 800101a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800101e:	4b91      	ldr	r3, [pc, #580]	; (8001264 <PID_CTRL+0x284>)
 8001020:	edc3 7a02 	vstr	s15, [r3, #8]
    if (target_ver[2] < -180)
 8001024:	4b8f      	ldr	r3, [pc, #572]	; (8001264 <PID_CTRL+0x284>)
 8001026:	edd3 7a02 	vldr	s15, [r3, #8]
 800102a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001274 <PID_CTRL+0x294>
 800102e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	d509      	bpl.n	800104c <PID_CTRL+0x6c>
    	target_ver[2] = target_ver[2] + 360;
 8001038:	4b8a      	ldr	r3, [pc, #552]	; (8001264 <PID_CTRL+0x284>)
 800103a:	edd3 7a02 	vldr	s15, [r3, #8]
 800103e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001270 <PID_CTRL+0x290>
 8001042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001046:	4b87      	ldr	r3, [pc, #540]	; (8001264 <PID_CTRL+0x284>)
 8001048:	edc3 7a02 	vstr	s15, [r3, #8]

    err[0] = target_ver[0] - roll;  //求误差
 800104c:	4b85      	ldr	r3, [pc, #532]	; (8001264 <PID_CTRL+0x284>)
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	4b89      	ldr	r3, [pc, #548]	; (8001278 <PID_CTRL+0x298>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105c:	edc7 7a01 	vstr	s15, [r7, #4]
    err[1] = target_ver[1] - pitch; //求误差
 8001060:	4b80      	ldr	r3, [pc, #512]	; (8001264 <PID_CTRL+0x284>)
 8001062:	ed93 7a01 	vldr	s14, [r3, #4]
 8001066:	4b85      	ldr	r3, [pc, #532]	; (800127c <PID_CTRL+0x29c>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001070:	edc7 7a02 	vstr	s15, [r7, #8]
    err[2] = target_ver[2] - yaw;   //求误差
 8001074:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <PID_CTRL+0x284>)
 8001076:	ed93 7a02 	vldr	s14, [r3, #8]
 800107a:	4b81      	ldr	r3, [pc, #516]	; (8001280 <PID_CTRL+0x2a0>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001084:	edc7 7a03 	vstr	s15, [r7, #12]

    if (err[2] > 180)
 8001088:	edd7 7a03 	vldr	s15, [r7, #12]
 800108c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800126c <PID_CTRL+0x28c>
 8001090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	dd07      	ble.n	80010aa <PID_CTRL+0xca>
        err[2] -= 360;
 800109a:	edd7 7a03 	vldr	s15, [r7, #12]
 800109e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001270 <PID_CTRL+0x290>
 80010a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (err[2] < -180)
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001274 <PID_CTRL+0x294>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d507      	bpl.n	80010cc <PID_CTRL+0xec>
        err[2] += 360;
 80010bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001270 <PID_CTRL+0x290>
 80010c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c8:	edc7 7a03 	vstr	s15, [r7, #12]

    err[3] = target_ver[3] - deep; //求误差
 80010cc:	4b65      	ldr	r3, [pc, #404]	; (8001264 <PID_CTRL+0x284>)
 80010ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80010d2:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <PID_CTRL+0x2a4>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010dc:	edc7 7a04 	vstr	s15, [r7, #16]
    err[4] = target_ver[4]; //求误差
 80010e0:	4b60      	ldr	r3, [pc, #384]	; (8001264 <PID_CTRL+0x284>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	617b      	str	r3, [r7, #20]
    err[5] = target_ver[5]; //求误差
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <PID_CTRL+0x284>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	e0ad      	b.n	800124e <PID_CTRL+0x26e>
    {
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4]) + pid_ver[i][1] * err[i] + pid_ver[i][2] * (err[i] - 2 * pid_ver[i][4] + pid_ver[i][5]);
 80010f2:	4965      	ldr	r1, [pc, #404]	; (8001288 <PID_CTRL+0x2a8>)
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	330c      	adds	r3, #12
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <PID_CTRL+0x2a8>)
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	f107 0220 	add.w	r2, r7, #32
 8001120:	4413      	add	r3, r2
 8001122:	3b1c      	subs	r3, #28
 8001124:	ed93 6a00 	vldr	s12, [r3]
 8001128:	4957      	ldr	r1, [pc, #348]	; (8001288 <PID_CTRL+0x2a8>)
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	3310      	adds	r3, #16
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001140:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001144:	4950      	ldr	r1, [pc, #320]	; (8001288 <PID_CTRL+0x2a8>)
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3304      	adds	r3, #4
 8001154:	ed93 6a00 	vldr	s12, [r3]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	f107 0220 	add.w	r2, r7, #32
 8001160:	4413      	add	r3, r2
 8001162:	3b1c      	subs	r3, #28
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee66 7a27 	vmul.f32	s15, s12, s15
 800116c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001170:	4945      	ldr	r1, [pc, #276]	; (8001288 <PID_CTRL+0x2a8>)
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3308      	adds	r3, #8
 8001180:	ed93 6a00 	vldr	s12, [r3]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	f107 0220 	add.w	r2, r7, #32
 800118c:	4413      	add	r3, r2
 800118e:	3b1c      	subs	r3, #28
 8001190:	edd3 5a00 	vldr	s11, [r3]
 8001194:	493c      	ldr	r1, [pc, #240]	; (8001288 <PID_CTRL+0x2a8>)
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3310      	adds	r3, #16
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <PID_CTRL+0x2a8>)
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	3314      	adds	r3, #20
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80011d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d4:	492c      	ldr	r1, [pc, #176]	; (8001288 <PID_CTRL+0x2a8>)
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	330c      	adds	r3, #12
 80011e4:	edc3 7a00 	vstr	s15, [r3]
        dof6[i] = pid_ver[i][3];       //输出到6自由度
 80011e8:	4927      	ldr	r1, [pc, #156]	; (8001288 <PID_CTRL+0x2a8>)
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	330c      	adds	r3, #12
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4924      	ldr	r1, [pc, #144]	; (800128c <PID_CTRL+0x2ac>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	601a      	str	r2, [r3, #0]
        pid_ver[i][5] = pid_ver[i][4]; //更新上上次误差
 8001204:	4920      	ldr	r1, [pc, #128]	; (8001288 <PID_CTRL+0x2a8>)
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	3310      	adds	r3, #16
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <PID_CTRL+0x2a8>)
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4403      	add	r3, r0
 8001224:	3314      	adds	r3, #20
 8001226:	6019      	str	r1, [r3, #0]
        pid_ver[i][4] = err[i];        //更新上次误差
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	f107 0220 	add.w	r2, r7, #32
 8001230:	4413      	add	r3, r2
 8001232:	3b1c      	subs	r3, #28
 8001234:	6819      	ldr	r1, [r3, #0]
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <PID_CTRL+0x2a8>)
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4403      	add	r3, r0
 8001244:	3310      	adds	r3, #16
 8001246:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < 6; i++)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3301      	adds	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	2b05      	cmp	r3, #5
 8001252:	f77f af4e 	ble.w	80010f2 <PID_CTRL+0x112>
    }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3724      	adds	r7, #36	; 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000488 	.word	0x20000488
 8001268:	20000478 	.word	0x20000478
 800126c:	43340000 	.word	0x43340000
 8001270:	43b40000 	.word	0x43b40000
 8001274:	c3340000 	.word	0xc3340000
 8001278:	20000504 	.word	0x20000504
 800127c:	20000500 	.word	0x20000500
 8001280:	200004fc 	.word	0x200004fc
 8001284:	20000508 	.word	0x20000508
 8001288:	20000000 	.word	0x20000000
 800128c:	200003ec 	.word	0x200003ec

08001290 <VRUinit>:
float pitch, roll, yaw,*dat;
int tim;
//UART_HandleTypeDef *VRUhuart;

void VRUinit(UART_HandleTypeDef *huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	//VRUhuart = huart;
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0210 	orr.w	r2, r2, #16
 80012a6:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, ch110, 82);
 80012a8:	2252      	movs	r2, #82	; 0x52
 80012aa:	4904      	ldr	r1, [pc, #16]	; (80012bc <VRUinit+0x2c>)
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f006 f823 	bl	80072f8 <HAL_UART_Receive_DMA>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200004a8 	.word	0x200004a8

080012c0 <VRUupdate>:
//从串口中断触发 每次执行 提取姿态数据
void VRUupdate()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	float * datflo;
	datflo=(float *) (ch110 + 18);
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <VRUupdate+0x5c>)
 80012c8:	603b      	str	r3, [r7, #0]
	/*
	roll = *(float *) (ch110 + 54);
	pitch = *(float *) (ch110 + 58);
	yaw = *(float *) (ch110 + 62);
	*/
	roll = datflo[9];
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <VRUupdate+0x60>)
 80012d0:	6013      	str	r3, [r2, #0]
	pitch = datflo[10];
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <VRUupdate+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]
	yaw = datflo[11];
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <VRUupdate+0x68>)
 80012e0:	6013      	str	r3, [r2, #0]

	for(int i=0;i<16;i++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	e00c      	b.n	8001302 <VRUupdate+0x42>
	{
		frame.fdata[i] = datflo[i];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <VRUupdate+0x6c>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3301      	adds	r3, #1
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	ddef      	ble.n	80012e8 <VRUupdate+0x28>
		//3角速度XYZ
		//6磁强度XYZ
		//9欧拉角Roll Pitch Yaw
		//12四元数WXYZ
	}
    if(pidinit == 0)
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <VRUupdate+0x70>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <VRUupdate+0x54>
        PID_init();
 8001310:	f7ff fe44 	bl	8000f9c <PID_init>
    if(pidinit == 1)
    {
        PID_CTRL();
        setmotor();
    }*/
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200004ba 	.word	0x200004ba
 8001320:	20000504 	.word	0x20000504
 8001324:	20000500 	.word	0x20000500
 8001328:	200004fc 	.word	0x200004fc
 800132c:	200000a8 	.word	0x200000a8
 8001330:	200003e8 	.word	0x200003e8

08001334 <VRUerror>:
void VRUerror(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f006 f80b 	bl	8007358 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, ch110, 82);
 8001342:	2252      	movs	r2, #82	; 0x52
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <VRUerror+0x20>)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f005 ffd6 	bl	80072f8 <HAL_UART_Receive_DMA>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200004a8 	.word	0x200004a8

08001358 <deepSensorInit>:

unsigned char deepSensorBuff[20];
float deep,temperature;

void deepSensorInit(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0210 	orr.w	r2, r2, #16
 800136e:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, deepSensorBuff, 20);
 8001370:	2214      	movs	r2, #20
 8001372:	4904      	ldr	r1, [pc, #16]	; (8001384 <deepSensorInit+0x2c>)
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f005 ffbf 	bl	80072f8 <HAL_UART_Receive_DMA>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	20000510 	.word	0x20000510

08001388 <deepSensorUpdate>:

void deepSensorUpdate(unsigned char *deepSsensorBuff)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	sscanf((char *)deepSensorBuff,"T=%fD=%f",&temperature,&deep);
 8001390:	4b0e      	ldr	r3, [pc, #56]	; (80013cc <deepSensorUpdate+0x44>)
 8001392:	4a0f      	ldr	r2, [pc, #60]	; (80013d0 <deepSensorUpdate+0x48>)
 8001394:	490f      	ldr	r1, [pc, #60]	; (80013d4 <deepSensorUpdate+0x4c>)
 8001396:	4810      	ldr	r0, [pc, #64]	; (80013d8 <deepSensorUpdate+0x50>)
 8001398:	f007 f960 	bl	800865c <siscanf>
	if(deep<0)deep=0;
 800139c:	4b0b      	ldr	r3, [pc, #44]	; (80013cc <deepSensorUpdate+0x44>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d503      	bpl.n	80013b4 <deepSensorUpdate+0x2c>
 80013ac:	4b07      	ldr	r3, [pc, #28]	; (80013cc <deepSensorUpdate+0x44>)
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	frame.fdata[27]=deep;
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <deepSensorUpdate+0x44>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a08      	ldr	r2, [pc, #32]	; (80013dc <deepSensorUpdate+0x54>)
 80013ba:	66d3      	str	r3, [r2, #108]	; 0x6c
	frame.fdata[28]=temperature;
 80013bc:	4b04      	ldr	r3, [pc, #16]	; (80013d0 <deepSensorUpdate+0x48>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a06      	ldr	r2, [pc, #24]	; (80013dc <deepSensorUpdate+0x54>)
 80013c2:	6713      	str	r3, [r2, #112]	; 0x70
}
 80013c4:	bf00      	nop
 80013c6:	3708      	adds	r7, #8
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	20000508 	.word	0x20000508
 80013d0:	2000050c 	.word	0x2000050c
 80013d4:	0800c028 	.word	0x0800c028
 80013d8:	20000510 	.word	0x20000510
 80013dc:	200000a8 	.word	0x200000a8

080013e0 <deepSensorerr>:

void deepSensorerr(UART_HandleTypeDef *huart)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 80013e8:	6878      	ldr	r0, [r7, #4]
 80013ea:	f005 ffb5 	bl	8007358 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, deepSensorBuff, 20);
 80013ee:	2214      	movs	r2, #20
 80013f0:	4903      	ldr	r1, [pc, #12]	; (8001400 <deepSensorerr+0x20>)
 80013f2:	6878      	ldr	r0, [r7, #4]
 80013f4:	f005 ff80 	bl	80072f8 <HAL_UART_Receive_DMA>
}
 80013f8:	bf00      	nop
 80013fa:	3708      	adds	r7, #8
 80013fc:	46bd      	mov	sp, r7
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	20000510 	.word	0x20000510

08001404 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001404:	b580      	push	{r7, lr}
 8001406:	b084      	sub	sp, #16
 8001408:	af00      	add	r7, sp, #0
 800140a:	60f8      	str	r0, [r7, #12]
 800140c:	60b9      	str	r1, [r7, #8]
 800140e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 300);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	b29a      	uxth	r2, r3
 8001414:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001418:	68b9      	ldr	r1, [r7, #8]
 800141a:	4804      	ldr	r0, [pc, #16]	; (800142c <_write+0x28>)
 800141c:	f005 fe95 	bl	800714a <HAL_UART_Transmit>
	return len;
 8001420:	687b      	ldr	r3, [r7, #4]
}
 8001422:	4618      	mov	r0, r3
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	20000894 	.word	0x20000894

08001430 <HAL_UART_RxCpltCallback>:
void delay_ms(unsigned int ms) {
	HAL_Delay(ms);
	return;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	4a08      	ldr	r2, [pc, #32]	; (800145c <HAL_UART_RxCpltCallback+0x2c>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d102      	bne.n	8001446 <HAL_UART_RxCpltCallback+0x16>
	{
		VRUupdate();
 8001440:	f7ff ff3e 	bl	80012c0 <VRUupdate>
	}else if(&huart4==huart)
	 {
		raspiUpdate();
	}
}
 8001444:	e005      	b.n	8001452 <HAL_UART_RxCpltCallback+0x22>
	}else if(&huart4==huart)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4a05      	ldr	r2, [pc, #20]	; (8001460 <HAL_UART_RxCpltCallback+0x30>)
 800144a:	4293      	cmp	r3, r2
 800144c:	d101      	bne.n	8001452 <HAL_UART_RxCpltCallback+0x22>
		raspiUpdate();
 800144e:	f001 fb33 	bl	8002ab8 <raspiUpdate>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	20000a04 	.word	0x20000a04
 8001460:	20000920 	.word	0x20000920

08001464 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001464:	b580      	push	{r7, lr}
 8001466:	b082      	sub	sp, #8
 8001468:	af00      	add	r7, sp, #0
 800146a:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4a13      	ldr	r2, [pc, #76]	; (80014bc <HAL_UART_ErrorCallback+0x58>)
 8001470:	4293      	cmp	r3, r2
 8001472:	d103      	bne.n	800147c <HAL_UART_ErrorCallback+0x18>
	{
		VRUerror(huart);
 8001474:	6878      	ldr	r0, [r7, #4]
 8001476:	f7ff ff5d 	bl	8001334 <VRUerror>
		deepSensorerr(huart);
	}else if(&huart4==huart)
	{
		raspierr(huart);
	}
}
 800147a:	e01a      	b.n	80014b2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart1==huart)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	4a10      	ldr	r2, [pc, #64]	; (80014c0 <HAL_UART_ErrorCallback+0x5c>)
 8001480:	4293      	cmp	r3, r2
 8001482:	d016      	beq.n	80014b2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart5==huart)
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	4a0f      	ldr	r2, [pc, #60]	; (80014c4 <HAL_UART_ErrorCallback+0x60>)
 8001488:	4293      	cmp	r3, r2
 800148a:	d103      	bne.n	8001494 <HAL_UART_ErrorCallback+0x30>
		remoteerr(huart);
 800148c:	6878      	ldr	r0, [r7, #4]
 800148e:	f001 fccb 	bl	8002e28 <remoteerr>
}
 8001492:	e00e      	b.n	80014b2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart3==huart)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	4a0c      	ldr	r2, [pc, #48]	; (80014c8 <HAL_UART_ErrorCallback+0x64>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d103      	bne.n	80014a4 <HAL_UART_ErrorCallback+0x40>
		deepSensorerr(huart);
 800149c:	6878      	ldr	r0, [r7, #4]
 800149e:	f7ff ff9f 	bl	80013e0 <deepSensorerr>
}
 80014a2:	e006      	b.n	80014b2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart4==huart)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a09      	ldr	r2, [pc, #36]	; (80014cc <HAL_UART_ErrorCallback+0x68>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d102      	bne.n	80014b2 <HAL_UART_ErrorCallback+0x4e>
		raspierr(huart);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f001 fb77 	bl	8002ba0 <raspierr>
}
 80014b2:	bf00      	nop
 80014b4:	3708      	adds	r7, #8
 80014b6:	46bd      	mov	sp, r7
 80014b8:	bd80      	pop	{r7, pc}
 80014ba:	bf00      	nop
 80014bc:	20000a04 	.word	0x20000a04
 80014c0:	20000894 	.word	0x20000894
 80014c4:	200007a8 	.word	0x200007a8
 80014c8:	200006d4 	.word	0x200006d4
 80014cc:	20000920 	.word	0x20000920

080014d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014d6:	f002 fc63 	bl	8003da0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014da:	f000 f881 	bl	80015e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014de:	f000 fdd5 	bl	800208c <MX_GPIO_Init>
  MX_DMA_Init();
 80014e2:	f000 fd85 	bl	8001ff0 <MX_DMA_Init>
  MX_ADC1_Init();
 80014e6:	f000 f8e5 	bl	80016b4 <MX_ADC1_Init>
  MX_SPI1_Init();
 80014ea:	f000 f935 	bl	8001758 <MX_SPI1_Init>
  MX_TIM1_Init();
 80014ee:	f000 f969 	bl	80017c4 <MX_TIM1_Init>
  MX_TIM2_Init();
 80014f2:	f000 f9b7 	bl	8001864 <MX_TIM2_Init>
  MX_TIM3_Init();
 80014f6:	f000 fa01 	bl	80018fc <MX_TIM3_Init>
  MX_TIM4_Init();
 80014fa:	f000 fa97 	bl	8001a2c <MX_TIM4_Init>
  MX_TIM5_Init();
 80014fe:	f000 fb2d 	bl	8001b5c <MX_TIM5_Init>
  MX_TIM8_Init();
 8001502:	f000 fb8f 	bl	8001c24 <MX_TIM8_Init>
  MX_UART4_Init();
 8001506:	f000 fca1 	bl	8001e4c <MX_UART4_Init>
  MX_UART5_Init();
 800150a:	f000 fcc9 	bl	8001ea0 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800150e:	f000 fcf1 	bl	8001ef4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001512:	f000 fd19 	bl	8001f48 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001516:	f000 fd41 	bl	8001f9c <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800151a:	f000 fc47 	bl	8001dac <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//delay function sppeeort
 800151e:	4824      	ldr	r0, [pc, #144]	; (80015b0 <main+0xe0>)
 8001520:	f004 fd32 	bl	8005f88 <HAL_TIM_Base_Start>

  motorinit();
 8001524:	f000 fec8 	bl	80022b8 <motorinit>

	HAL_TIM_Base_Start_IT(&htim1);
 8001528:	4822      	ldr	r0, [pc, #136]	; (80015b4 <main+0xe4>)
 800152a:	f004 fd95 	bl	8006058 <HAL_TIM_Base_Start_IT>

	VRUinit(&huart2);
 800152e:	4822      	ldr	r0, [pc, #136]	; (80015b8 <main+0xe8>)
 8001530:	f7ff feae 	bl	8001290 <VRUinit>
	OLED_Init();
 8001534:	f001 f9fc 	bl	8002930 <OLED_Init>
	//PID_init();
	remoteInit(&huart5);
 8001538:	4820      	ldr	r0, [pc, #128]	; (80015bc <main+0xec>)
 800153a:	f001 fb43 	bl	8002bc4 <remoteInit>
	raspiInit(&huart4);
 800153e:	4820      	ldr	r0, [pc, #128]	; (80015c0 <main+0xf0>)
 8001540:	f001 faa2 	bl	8002a88 <raspiInit>
	deepSensorInit(&huart3);
 8001544:	481f      	ldr	r0, [pc, #124]	; (80015c4 <main+0xf4>)
 8001546:	f7ff ff07 	bl	8001358 <deepSensorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello\r\n");
 800154a:	481f      	ldr	r0, [pc, #124]	; (80015c8 <main+0xf8>)
 800154c:	f007 f858 	bl	8008600 <puts>
  //OLED_ShowString(0,0,"runing...");

  while (1)
  {
	  OLED_ShowString(0,12,"run time:");
 8001550:	4a1e      	ldr	r2, [pc, #120]	; (80015cc <main+0xfc>)
 8001552:	210c      	movs	r1, #12
 8001554:	2000      	movs	r0, #0
 8001556:	f001 f9b9 	bl	80028cc <OLED_ShowString>
	  OLED_ShowNumber(64, 12, HAL_GetTick()/1000, 3, 12);
 800155a:	f002 fc57 	bl	8003e0c <HAL_GetTick>
 800155e:	4603      	mov	r3, r0
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <main+0x100>)
 8001562:	fba2 2303 	umull	r2, r3, r2, r3
 8001566:	099a      	lsrs	r2, r3, #6
 8001568:	230c      	movs	r3, #12
 800156a:	9300      	str	r3, [sp, #0]
 800156c:	2303      	movs	r3, #3
 800156e:	210c      	movs	r1, #12
 8001570:	2040      	movs	r0, #64	; 0x40
 8001572:	f001 f93d 	bl	80027f0 <OLED_ShowNumber>
	  OLED_ShowNumber(64, 24, raspiBuffer[10], 3, 12);
 8001576:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <main+0x104>)
 8001578:	7a9b      	ldrb	r3, [r3, #10]
 800157a:	461a      	mov	r2, r3
 800157c:	230c      	movs	r3, #12
 800157e:	9300      	str	r3, [sp, #0]
 8001580:	2303      	movs	r3, #3
 8001582:	2118      	movs	r1, #24
 8001584:	2040      	movs	r0, #64	; 0x40
 8001586:	f001 f933 	bl	80027f0 <OLED_ShowNumber>
	  OLED_ShowNumber(64, 36, (int)(deep*100), 3, 12);
 800158a:	4b13      	ldr	r3, [pc, #76]	; (80015d8 <main+0x108>)
 800158c:	edd3 7a00 	vldr	s15, [r3]
 8001590:	ed9f 7a12 	vldr	s14, [pc, #72]	; 80015dc <main+0x10c>
 8001594:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001598:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800159c:	ee17 2a90 	vmov	r2, s15
 80015a0:	230c      	movs	r3, #12
 80015a2:	9300      	str	r3, [sp, #0]
 80015a4:	2303      	movs	r3, #3
 80015a6:	2124      	movs	r1, #36	; 0x24
 80015a8:	2040      	movs	r0, #64	; 0x40
 80015aa:	f001 f921 	bl	80027f0 <OLED_ShowNumber>
	  OLED_ShowString(0,12,"run time:");
 80015ae:	e7cf      	b.n	8001550 <main+0x80>
 80015b0:	200009bc 	.word	0x200009bc
 80015b4:	200008d8 	.word	0x200008d8
 80015b8:	20000a04 	.word	0x20000a04
 80015bc:	200007a8 	.word	0x200007a8
 80015c0:	20000920 	.word	0x20000920
 80015c4:	200006d4 	.word	0x200006d4
 80015c8:	0800c034 	.word	0x0800c034
 80015cc:	0800c03c 	.word	0x0800c03c
 80015d0:	10624dd3 	.word	0x10624dd3
 80015d4:	20000408 	.word	0x20000408
 80015d8:	20000508 	.word	0x20000508
 80015dc:	42c80000 	.word	0x42c80000

080015e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b094      	sub	sp, #80	; 0x50
 80015e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015e6:	f107 0320 	add.w	r3, r7, #32
 80015ea:	2230      	movs	r2, #48	; 0x30
 80015ec:	2100      	movs	r1, #0
 80015ee:	4618      	mov	r0, r3
 80015f0:	f006 fd80 	bl	80080f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015f4:	f107 030c 	add.w	r3, r7, #12
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]
 80015fc:	605a      	str	r2, [r3, #4]
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	60da      	str	r2, [r3, #12]
 8001602:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	4b28      	ldr	r3, [pc, #160]	; (80016ac <SystemClock_Config+0xcc>)
 800160a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800160c:	4a27      	ldr	r2, [pc, #156]	; (80016ac <SystemClock_Config+0xcc>)
 800160e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001612:	6413      	str	r3, [r2, #64]	; 0x40
 8001614:	4b25      	ldr	r3, [pc, #148]	; (80016ac <SystemClock_Config+0xcc>)
 8001616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001618:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001620:	2300      	movs	r3, #0
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	4b22      	ldr	r3, [pc, #136]	; (80016b0 <SystemClock_Config+0xd0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a21      	ldr	r2, [pc, #132]	; (80016b0 <SystemClock_Config+0xd0>)
 800162a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800162e:	6013      	str	r3, [r2, #0]
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <SystemClock_Config+0xd0>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001638:	607b      	str	r3, [r7, #4]
 800163a:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800163c:	2301      	movs	r3, #1
 800163e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001640:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001644:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800164a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800164e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001650:	2308      	movs	r3, #8
 8001652:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001654:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001658:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800165a:	2302      	movs	r3, #2
 800165c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800165e:	2304      	movs	r3, #4
 8001660:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f107 0320 	add.w	r3, r7, #32
 8001666:	4618      	mov	r0, r3
 8001668:	f003 fd08 	bl	800507c <HAL_RCC_OscConfig>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001672:	f000 fe1b 	bl	80022ac <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001676:	230f      	movs	r3, #15
 8001678:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800167a:	2302      	movs	r3, #2
 800167c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800167e:	2300      	movs	r3, #0
 8001680:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001682:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001686:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001688:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800168c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800168e:	f107 030c 	add.w	r3, r7, #12
 8001692:	2105      	movs	r1, #5
 8001694:	4618      	mov	r0, r3
 8001696:	f003 ff69 	bl	800556c <HAL_RCC_ClockConfig>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80016a0:	f000 fe04 	bl	80022ac <Error_Handler>
  }
}
 80016a4:	bf00      	nop
 80016a6:	3750      	adds	r7, #80	; 0x50
 80016a8:	46bd      	mov	sp, r7
 80016aa:	bd80      	pop	{r7, pc}
 80016ac:	40023800 	.word	0x40023800
 80016b0:	40007000 	.word	0x40007000

080016b4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b084      	sub	sp, #16
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016ba:	463b      	mov	r3, r7
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016c6:	4b21      	ldr	r3, [pc, #132]	; (800174c <MX_ADC1_Init+0x98>)
 80016c8:	4a21      	ldr	r2, [pc, #132]	; (8001750 <MX_ADC1_Init+0x9c>)
 80016ca:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016cc:	4b1f      	ldr	r3, [pc, #124]	; (800174c <MX_ADC1_Init+0x98>)
 80016ce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016d2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016d4:	4b1d      	ldr	r3, [pc, #116]	; (800174c <MX_ADC1_Init+0x98>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016da:	4b1c      	ldr	r3, [pc, #112]	; (800174c <MX_ADC1_Init+0x98>)
 80016dc:	2200      	movs	r2, #0
 80016de:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016e0:	4b1a      	ldr	r3, [pc, #104]	; (800174c <MX_ADC1_Init+0x98>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016e6:	4b19      	ldr	r3, [pc, #100]	; (800174c <MX_ADC1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016ee:	4b17      	ldr	r3, [pc, #92]	; (800174c <MX_ADC1_Init+0x98>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <MX_ADC1_Init+0x98>)
 80016f6:	4a17      	ldr	r2, [pc, #92]	; (8001754 <MX_ADC1_Init+0xa0>)
 80016f8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016fa:	4b14      	ldr	r3, [pc, #80]	; (800174c <MX_ADC1_Init+0x98>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <MX_ADC1_Init+0x98>)
 8001702:	2201      	movs	r2, #1
 8001704:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001706:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_ADC1_Init+0x98>)
 8001708:	2200      	movs	r2, #0
 800170a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800170e:	4b0f      	ldr	r3, [pc, #60]	; (800174c <MX_ADC1_Init+0x98>)
 8001710:	2201      	movs	r2, #1
 8001712:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001714:	480d      	ldr	r0, [pc, #52]	; (800174c <MX_ADC1_Init+0x98>)
 8001716:	f002 fba9 	bl	8003e6c <HAL_ADC_Init>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001720:	f000 fdc4 	bl	80022ac <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8001724:	2304      	movs	r3, #4
 8001726:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001728:	2301      	movs	r3, #1
 800172a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001730:	463b      	mov	r3, r7
 8001732:	4619      	mov	r1, r3
 8001734:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_ADC1_Init+0x98>)
 8001736:	f002 fbdd 	bl	8003ef4 <HAL_ADC_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001740:	f000 fdb4 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001744:	bf00      	nop
 8001746:	3710      	adds	r7, #16
 8001748:	46bd      	mov	sp, r7
 800174a:	bd80      	pop	{r7, pc}
 800174c:	200007ec 	.word	0x200007ec
 8001750:	40012000 	.word	0x40012000
 8001754:	0f000001 	.word	0x0f000001

08001758 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800175c:	4b17      	ldr	r3, [pc, #92]	; (80017bc <MX_SPI1_Init+0x64>)
 800175e:	4a18      	ldr	r2, [pc, #96]	; (80017c0 <MX_SPI1_Init+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001762:	4b16      	ldr	r3, [pc, #88]	; (80017bc <MX_SPI1_Init+0x64>)
 8001764:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001768:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800176a:	4b14      	ldr	r3, [pc, #80]	; (80017bc <MX_SPI1_Init+0x64>)
 800176c:	2200      	movs	r2, #0
 800176e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001770:	4b12      	ldr	r3, [pc, #72]	; (80017bc <MX_SPI1_Init+0x64>)
 8001772:	2200      	movs	r2, #0
 8001774:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001776:	4b11      	ldr	r3, [pc, #68]	; (80017bc <MX_SPI1_Init+0x64>)
 8001778:	2200      	movs	r2, #0
 800177a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800177c:	4b0f      	ldr	r3, [pc, #60]	; (80017bc <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001782:	4b0e      	ldr	r3, [pc, #56]	; (80017bc <MX_SPI1_Init+0x64>)
 8001784:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001788:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800178a:	4b0c      	ldr	r3, [pc, #48]	; (80017bc <MX_SPI1_Init+0x64>)
 800178c:	2200      	movs	r2, #0
 800178e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001790:	4b0a      	ldr	r3, [pc, #40]	; (80017bc <MX_SPI1_Init+0x64>)
 8001792:	2200      	movs	r2, #0
 8001794:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <MX_SPI1_Init+0x64>)
 8001798:	2200      	movs	r2, #0
 800179a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <MX_SPI1_Init+0x64>)
 800179e:	2200      	movs	r2, #0
 80017a0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80017a2:	4b06      	ldr	r3, [pc, #24]	; (80017bc <MX_SPI1_Init+0x64>)
 80017a4:	220a      	movs	r2, #10
 80017a6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a8:	4804      	ldr	r0, [pc, #16]	; (80017bc <MX_SPI1_Init+0x64>)
 80017aa:	f004 f90d 	bl	80059c8 <HAL_SPI_Init>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d001      	beq.n	80017b8 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017b4:	f000 fd7a 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b8:	bf00      	nop
 80017ba:	bd80      	pop	{r7, pc}
 80017bc:	20000964 	.word	0x20000964
 80017c0:	40013000 	.word	0x40013000

080017c4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b086      	sub	sp, #24
 80017c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017ca:	f107 0308 	add.w	r3, r7, #8
 80017ce:	2200      	movs	r2, #0
 80017d0:	601a      	str	r2, [r3, #0]
 80017d2:	605a      	str	r2, [r3, #4]
 80017d4:	609a      	str	r2, [r3, #8]
 80017d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d8:	463b      	mov	r3, r7
 80017da:	2200      	movs	r2, #0
 80017dc:	601a      	str	r2, [r3, #0]
 80017de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017e0:	4b1e      	ldr	r3, [pc, #120]	; (800185c <MX_TIM1_Init+0x98>)
 80017e2:	4a1f      	ldr	r2, [pc, #124]	; (8001860 <MX_TIM1_Init+0x9c>)
 80017e4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80017e6:	4b1d      	ldr	r3, [pc, #116]	; (800185c <MX_TIM1_Init+0x98>)
 80017e8:	22a7      	movs	r2, #167	; 0xa7
 80017ea:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017ec:	4b1b      	ldr	r3, [pc, #108]	; (800185c <MX_TIM1_Init+0x98>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80017f2:	4b1a      	ldr	r3, [pc, #104]	; (800185c <MX_TIM1_Init+0x98>)
 80017f4:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017f8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fa:	4b18      	ldr	r3, [pc, #96]	; (800185c <MX_TIM1_Init+0x98>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001800:	4b16      	ldr	r3, [pc, #88]	; (800185c <MX_TIM1_Init+0x98>)
 8001802:	2200      	movs	r2, #0
 8001804:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001806:	4b15      	ldr	r3, [pc, #84]	; (800185c <MX_TIM1_Init+0x98>)
 8001808:	2200      	movs	r2, #0
 800180a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800180c:	4813      	ldr	r0, [pc, #76]	; (800185c <MX_TIM1_Init+0x98>)
 800180e:	f004 fb6b 	bl	8005ee8 <HAL_TIM_Base_Init>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001818:	f000 fd48 	bl	80022ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800181c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001822:	f107 0308 	add.w	r3, r7, #8
 8001826:	4619      	mov	r1, r3
 8001828:	480c      	ldr	r0, [pc, #48]	; (800185c <MX_TIM1_Init+0x98>)
 800182a:	f004 ff63 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d001      	beq.n	8001838 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001834:	f000 fd3a 	bl	80022ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001838:	2300      	movs	r3, #0
 800183a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800183c:	2300      	movs	r3, #0
 800183e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001840:	463b      	mov	r3, r7
 8001842:	4619      	mov	r1, r3
 8001844:	4805      	ldr	r0, [pc, #20]	; (800185c <MX_TIM1_Init+0x98>)
 8001846:	f005 fb51 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001850:	f000 fd2c 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001854:	bf00      	nop
 8001856:	3718      	adds	r7, #24
 8001858:	46bd      	mov	sp, r7
 800185a:	bd80      	pop	{r7, pc}
 800185c:	200008d8 	.word	0x200008d8
 8001860:	40010000 	.word	0x40010000

08001864 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800186a:	f107 0308 	add.w	r3, r7, #8
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]
 8001872:	605a      	str	r2, [r3, #4]
 8001874:	609a      	str	r2, [r3, #8]
 8001876:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001878:	463b      	mov	r3, r7
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001880:	4b1d      	ldr	r3, [pc, #116]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001882:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001886:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001888:	4b1b      	ldr	r3, [pc, #108]	; (80018f8 <MX_TIM2_Init+0x94>)
 800188a:	2253      	movs	r2, #83	; 0x53
 800188c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188e:	4b1a      	ldr	r3, [pc, #104]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001890:	2200      	movs	r2, #0
 8001892:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001894:	4b18      	ldr	r3, [pc, #96]	; (80018f8 <MX_TIM2_Init+0x94>)
 8001896:	f04f 32ff 	mov.w	r2, #4294967295
 800189a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800189c:	4b16      	ldr	r3, [pc, #88]	; (80018f8 <MX_TIM2_Init+0x94>)
 800189e:	2200      	movs	r2, #0
 80018a0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018a2:	4b15      	ldr	r3, [pc, #84]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018a4:	2200      	movs	r2, #0
 80018a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a8:	4813      	ldr	r0, [pc, #76]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018aa:	f004 fb1d 	bl	8005ee8 <HAL_TIM_Base_Init>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018b4:	f000 fcfa 	bl	80022ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018bc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018be:	f107 0308 	add.w	r3, r7, #8
 80018c2:	4619      	mov	r1, r3
 80018c4:	480c      	ldr	r0, [pc, #48]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018c6:	f004 ff15 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 80018ca:	4603      	mov	r3, r0
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d001      	beq.n	80018d4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018d0:	f000 fcec 	bl	80022ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018d4:	2300      	movs	r3, #0
 80018d6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d8:	2300      	movs	r3, #0
 80018da:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018dc:	463b      	mov	r3, r7
 80018de:	4619      	mov	r1, r3
 80018e0:	4805      	ldr	r0, [pc, #20]	; (80018f8 <MX_TIM2_Init+0x94>)
 80018e2:	f005 fb03 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018ec:	f000 fcde 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018f0:	bf00      	nop
 80018f2:	3718      	adds	r7, #24
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}
 80018f8:	200009bc 	.word	0x200009bc

080018fc <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b08e      	sub	sp, #56	; 0x38
 8001900:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001902:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001906:	2200      	movs	r2, #0
 8001908:	601a      	str	r2, [r3, #0]
 800190a:	605a      	str	r2, [r3, #4]
 800190c:	609a      	str	r2, [r3, #8]
 800190e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001910:	f107 0320 	add.w	r3, r7, #32
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800191a:	1d3b      	adds	r3, r7, #4
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
 8001928:	615a      	str	r2, [r3, #20]
 800192a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800192c:	4b3d      	ldr	r3, [pc, #244]	; (8001a24 <MX_TIM3_Init+0x128>)
 800192e:	4a3e      	ldr	r2, [pc, #248]	; (8001a28 <MX_TIM3_Init+0x12c>)
 8001930:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001932:	4b3c      	ldr	r3, [pc, #240]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001934:	2200      	movs	r2, #0
 8001936:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001938:	4b3a      	ldr	r3, [pc, #232]	; (8001a24 <MX_TIM3_Init+0x128>)
 800193a:	2200      	movs	r2, #0
 800193c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800193e:	4b39      	ldr	r3, [pc, #228]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001940:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001944:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001946:	4b37      	ldr	r3, [pc, #220]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001948:	2200      	movs	r2, #0
 800194a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800194c:	4b35      	ldr	r3, [pc, #212]	; (8001a24 <MX_TIM3_Init+0x128>)
 800194e:	2200      	movs	r2, #0
 8001950:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001952:	4834      	ldr	r0, [pc, #208]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001954:	f004 fac8 	bl	8005ee8 <HAL_TIM_Base_Init>
 8001958:	4603      	mov	r3, r0
 800195a:	2b00      	cmp	r3, #0
 800195c:	d001      	beq.n	8001962 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800195e:	f000 fca5 	bl	80022ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001962:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001966:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001968:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800196c:	4619      	mov	r1, r3
 800196e:	482d      	ldr	r0, [pc, #180]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001970:	f004 fec0 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800197a:	f000 fc97 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800197e:	4829      	ldr	r0, [pc, #164]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001980:	f004 fbda 	bl	8006138 <HAL_TIM_PWM_Init>
 8001984:	4603      	mov	r3, r0
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800198a:	f000 fc8f 	bl	80022ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800198e:	2300      	movs	r3, #0
 8001990:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001992:	2300      	movs	r3, #0
 8001994:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001996:	f107 0320 	add.w	r3, r7, #32
 800199a:	4619      	mov	r1, r3
 800199c:	4821      	ldr	r0, [pc, #132]	; (8001a24 <MX_TIM3_Init+0x128>)
 800199e:	f005 faa5 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019a8:	f000 fc80 	bl	80022ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019ac:	2360      	movs	r3, #96	; 0x60
 80019ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b8:	2300      	movs	r3, #0
 80019ba:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019bc:	1d3b      	adds	r3, r7, #4
 80019be:	2200      	movs	r2, #0
 80019c0:	4619      	mov	r1, r3
 80019c2:	4818      	ldr	r0, [pc, #96]	; (8001a24 <MX_TIM3_Init+0x128>)
 80019c4:	f004 fdd8 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 80019c8:	4603      	mov	r3, r0
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d001      	beq.n	80019d2 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019ce:	f000 fc6d 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019d2:	1d3b      	adds	r3, r7, #4
 80019d4:	2204      	movs	r2, #4
 80019d6:	4619      	mov	r1, r3
 80019d8:	4812      	ldr	r0, [pc, #72]	; (8001a24 <MX_TIM3_Init+0x128>)
 80019da:	f004 fdcd 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d001      	beq.n	80019e8 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019e4:	f000 fc62 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019e8:	1d3b      	adds	r3, r7, #4
 80019ea:	2208      	movs	r2, #8
 80019ec:	4619      	mov	r1, r3
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <MX_TIM3_Init+0x128>)
 80019f0:	f004 fdc2 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 80019f4:	4603      	mov	r3, r0
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	d001      	beq.n	80019fe <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80019fa:	f000 fc57 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019fe:	1d3b      	adds	r3, r7, #4
 8001a00:	220c      	movs	r2, #12
 8001a02:	4619      	mov	r1, r3
 8001a04:	4807      	ldr	r0, [pc, #28]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001a06:	f004 fdb7 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001a10:	f000 fc4c 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a14:	4803      	ldr	r0, [pc, #12]	; (8001a24 <MX_TIM3_Init+0x128>)
 8001a16:	f001 fbdb 	bl	80031d0 <HAL_TIM_MspPostInit>

}
 8001a1a:	bf00      	nop
 8001a1c:	3738      	adds	r7, #56	; 0x38
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	20000760 	.word	0x20000760
 8001a28:	40000400 	.word	0x40000400

08001a2c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b08e      	sub	sp, #56	; 0x38
 8001a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a32:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]
 8001a3e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a40:	f107 0320 	add.w	r3, r7, #32
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a4a:	1d3b      	adds	r3, r7, #4
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	605a      	str	r2, [r3, #4]
 8001a52:	609a      	str	r2, [r3, #8]
 8001a54:	60da      	str	r2, [r3, #12]
 8001a56:	611a      	str	r2, [r3, #16]
 8001a58:	615a      	str	r2, [r3, #20]
 8001a5a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a5c:	4b3d      	ldr	r3, [pc, #244]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001a5e:	4a3e      	ldr	r2, [pc, #248]	; (8001b58 <MX_TIM4_Init+0x12c>)
 8001a60:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001a62:	4b3c      	ldr	r3, [pc, #240]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001a64:	2253      	movs	r2, #83	; 0x53
 8001a66:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a68:	4b3a      	ldr	r3, [pc, #232]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001a6e:	4b39      	ldr	r3, [pc, #228]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001a70:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a74:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a76:	4b37      	ldr	r3, [pc, #220]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a7c:	4b35      	ldr	r3, [pc, #212]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a82:	4834      	ldr	r0, [pc, #208]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001a84:	f004 fa30 	bl	8005ee8 <HAL_TIM_Base_Init>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d001      	beq.n	8001a92 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a8e:	f000 fc0d 	bl	80022ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a96:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a98:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a9c:	4619      	mov	r1, r3
 8001a9e:	482d      	ldr	r0, [pc, #180]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001aa0:	f004 fe28 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d001      	beq.n	8001aae <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001aaa:	f000 fbff 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aae:	4829      	ldr	r0, [pc, #164]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001ab0:	f004 fb42 	bl	8006138 <HAL_TIM_PWM_Init>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d001      	beq.n	8001abe <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001aba:	f000 fbf7 	bl	80022ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ac6:	f107 0320 	add.w	r3, r7, #32
 8001aca:	4619      	mov	r1, r3
 8001acc:	4821      	ldr	r0, [pc, #132]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001ace:	f005 fa0d 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 8001ad2:	4603      	mov	r3, r0
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d001      	beq.n	8001adc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ad8:	f000 fbe8 	bl	80022ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001adc:	2360      	movs	r3, #96	; 0x60
 8001ade:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	4619      	mov	r1, r3
 8001af2:	4818      	ldr	r0, [pc, #96]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001af4:	f004 fd40 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001af8:	4603      	mov	r3, r0
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d001      	beq.n	8001b02 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001afe:	f000 fbd5 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b02:	1d3b      	adds	r3, r7, #4
 8001b04:	2204      	movs	r2, #4
 8001b06:	4619      	mov	r1, r3
 8001b08:	4812      	ldr	r0, [pc, #72]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001b0a:	f004 fd35 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001b14:	f000 fbca 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b18:	1d3b      	adds	r3, r7, #4
 8001b1a:	2208      	movs	r2, #8
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	480d      	ldr	r0, [pc, #52]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001b20:	f004 fd2a 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b2a:	f000 fbbf 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b2e:	1d3b      	adds	r3, r7, #4
 8001b30:	220c      	movs	r2, #12
 8001b32:	4619      	mov	r1, r3
 8001b34:	4807      	ldr	r0, [pc, #28]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001b36:	f004 fd1f 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001b40:	f000 fbb4 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b44:	4803      	ldr	r0, [pc, #12]	; (8001b54 <MX_TIM4_Init+0x128>)
 8001b46:	f001 fb43 	bl	80031d0 <HAL_TIM_MspPostInit>

}
 8001b4a:	bf00      	nop
 8001b4c:	3738      	adds	r7, #56	; 0x38
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	2000062c 	.word	0x2000062c
 8001b58:	40000800 	.word	0x40000800

08001b5c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b08a      	sub	sp, #40	; 0x28
 8001b60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b62:	f107 0320 	add.w	r3, r7, #32
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2200      	movs	r2, #0
 8001b70:	601a      	str	r2, [r3, #0]
 8001b72:	605a      	str	r2, [r3, #4]
 8001b74:	609a      	str	r2, [r3, #8]
 8001b76:	60da      	str	r2, [r3, #12]
 8001b78:	611a      	str	r2, [r3, #16]
 8001b7a:	615a      	str	r2, [r3, #20]
 8001b7c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b7e:	4b27      	ldr	r3, [pc, #156]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001b80:	4a27      	ldr	r2, [pc, #156]	; (8001c20 <MX_TIM5_Init+0xc4>)
 8001b82:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b84:	4b25      	ldr	r3, [pc, #148]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b8a:	4b24      	ldr	r3, [pc, #144]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b90:	4b22      	ldr	r3, [pc, #136]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001b92:	f04f 32ff 	mov.w	r2, #4294967295
 8001b96:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b98:	4b20      	ldr	r3, [pc, #128]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b9e:	4b1f      	ldr	r3, [pc, #124]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001ba4:	481d      	ldr	r0, [pc, #116]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001ba6:	f004 fac7 	bl	8006138 <HAL_TIM_PWM_Init>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d001      	beq.n	8001bb4 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001bb0:	f000 fb7c 	bl	80022ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb8:	2300      	movs	r3, #0
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bbc:	f107 0320 	add.w	r3, r7, #32
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4816      	ldr	r0, [pc, #88]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001bc4:	f005 f992 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d001      	beq.n	8001bd2 <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001bce:	f000 fb6d 	bl	80022ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bd2:	2360      	movs	r3, #96	; 0x60
 8001bd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bda:	2300      	movs	r3, #0
 8001bdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001be2:	1d3b      	adds	r3, r7, #4
 8001be4:	2208      	movs	r2, #8
 8001be6:	4619      	mov	r1, r3
 8001be8:	480c      	ldr	r0, [pc, #48]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001bea:	f004 fcc5 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d001      	beq.n	8001bf8 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001bf4:	f000 fb5a 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bf8:	1d3b      	adds	r3, r7, #4
 8001bfa:	220c      	movs	r2, #12
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	4807      	ldr	r0, [pc, #28]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001c00:	f004 fcba 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001c0a:	f000 fb4f 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c0e:	4803      	ldr	r0, [pc, #12]	; (8001c1c <MX_TIM5_Init+0xc0>)
 8001c10:	f001 fade 	bl	80031d0 <HAL_TIM_MspPostInit>

}
 8001c14:	bf00      	nop
 8001c16:	3728      	adds	r7, #40	; 0x28
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	bd80      	pop	{r7, pc}
 8001c1c:	20000718 	.word	0x20000718
 8001c20:	40000c00 	.word	0x40000c00

08001c24 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b096      	sub	sp, #88	; 0x58
 8001c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c2a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c2e:	2200      	movs	r2, #0
 8001c30:	601a      	str	r2, [r3, #0]
 8001c32:	605a      	str	r2, [r3, #4]
 8001c34:	609a      	str	r2, [r3, #8]
 8001c36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c38:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c3c:	2200      	movs	r2, #0
 8001c3e:	601a      	str	r2, [r3, #0]
 8001c40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c42:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c46:	2200      	movs	r2, #0
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	605a      	str	r2, [r3, #4]
 8001c4c:	609a      	str	r2, [r3, #8]
 8001c4e:	60da      	str	r2, [r3, #12]
 8001c50:	611a      	str	r2, [r3, #16]
 8001c52:	615a      	str	r2, [r3, #20]
 8001c54:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c56:	1d3b      	adds	r3, r7, #4
 8001c58:	2220      	movs	r2, #32
 8001c5a:	2100      	movs	r1, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	f006 fa49 	bl	80080f4 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c62:	4b50      	ldr	r3, [pc, #320]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c64:	4a50      	ldr	r2, [pc, #320]	; (8001da8 <MX_TIM8_Init+0x184>)
 8001c66:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8001c68:	4b4e      	ldr	r3, [pc, #312]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c6a:	22a7      	movs	r2, #167	; 0xa7
 8001c6c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c6e:	4b4d      	ldr	r3, [pc, #308]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c70:	2200      	movs	r2, #0
 8001c72:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001c74:	4b4b      	ldr	r3, [pc, #300]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c76:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c7a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c7c:	4b49      	ldr	r3, [pc, #292]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c7e:	2200      	movs	r2, #0
 8001c80:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c82:	4b48      	ldr	r3, [pc, #288]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c88:	4b46      	ldr	r3, [pc, #280]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c8e:	4845      	ldr	r0, [pc, #276]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001c90:	f004 f92a 	bl	8005ee8 <HAL_TIM_Base_Init>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d001      	beq.n	8001c9e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c9a:	f000 fb07 	bl	80022ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c9e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ca2:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001ca4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ca8:	4619      	mov	r1, r3
 8001caa:	483e      	ldr	r0, [pc, #248]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001cac:	f004 fd22 	bl	80066f4 <HAL_TIM_ConfigClockSource>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d001      	beq.n	8001cba <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001cb6:	f000 faf9 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cba:	483a      	ldr	r0, [pc, #232]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001cbc:	f004 fa3c 	bl	8006138 <HAL_TIM_PWM_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d001      	beq.n	8001cca <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001cc6:	f000 faf1 	bl	80022ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cd2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4832      	ldr	r0, [pc, #200]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001cda:	f005 f907 	bl	8006eec <HAL_TIMEx_MasterConfigSynchronization>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d001      	beq.n	8001ce8 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001ce4:	f000 fae2 	bl	80022ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce8:	2360      	movs	r3, #96	; 0x60
 8001cea:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001d00:	2300      	movs	r3, #0
 8001d02:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d04:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d08:	2200      	movs	r2, #0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4825      	ldr	r0, [pc, #148]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001d0e:	f004 fc33 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001d12:	4603      	mov	r3, r0
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d001      	beq.n	8001d1c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d18:	f000 fac8 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d1c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d20:	2204      	movs	r2, #4
 8001d22:	4619      	mov	r1, r3
 8001d24:	481f      	ldr	r0, [pc, #124]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001d26:	f004 fc27 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d001      	beq.n	8001d34 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d30:	f000 fabc 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d38:	2208      	movs	r2, #8
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4819      	ldr	r0, [pc, #100]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001d3e:	f004 fc1b 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001d48:	f000 fab0 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d4c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d50:	220c      	movs	r2, #12
 8001d52:	4619      	mov	r1, r3
 8001d54:	4813      	ldr	r0, [pc, #76]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001d56:	f004 fc0f 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d001      	beq.n	8001d64 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001d60:	f000 faa4 	bl	80022ac <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d64:	2300      	movs	r3, #0
 8001d66:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d70:	2300      	movs	r3, #0
 8001d72:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d7c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d82:	1d3b      	adds	r3, r7, #4
 8001d84:	4619      	mov	r1, r3
 8001d86:	4807      	ldr	r0, [pc, #28]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001d88:	f005 f92c 	bl	8006fe4 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d001      	beq.n	8001d96 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001d92:	f000 fa8b 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d96:	4803      	ldr	r0, [pc, #12]	; (8001da4 <MX_TIM8_Init+0x180>)
 8001d98:	f001 fa1a 	bl	80031d0 <HAL_TIM_MspPostInit>

}
 8001d9c:	bf00      	nop
 8001d9e:	3758      	adds	r7, #88	; 0x58
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	200005e4 	.word	0x200005e4
 8001da8:	40010400 	.word	0x40010400

08001dac <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	2200      	movs	r2, #0
 8001db6:	601a      	str	r2, [r3, #0]
 8001db8:	605a      	str	r2, [r3, #4]
 8001dba:	609a      	str	r2, [r3, #8]
 8001dbc:	60da      	str	r2, [r3, #12]
 8001dbe:	611a      	str	r2, [r3, #16]
 8001dc0:	615a      	str	r2, [r3, #20]
 8001dc2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001dc4:	4b1f      	ldr	r3, [pc, #124]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001dc6:	4a20      	ldr	r2, [pc, #128]	; (8001e48 <MX_TIM12_Init+0x9c>)
 8001dc8:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001dca:	4b1e      	ldr	r3, [pc, #120]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001dcc:	2200      	movs	r2, #0
 8001dce:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd0:	4b1c      	ldr	r3, [pc, #112]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001dd2:	2200      	movs	r2, #0
 8001dd4:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001dd6:	4b1b      	ldr	r3, [pc, #108]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ddc:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dde:	4b19      	ldr	r3, [pc, #100]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001de0:	2200      	movs	r2, #0
 8001de2:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001de4:	4b17      	ldr	r3, [pc, #92]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001dea:	4816      	ldr	r0, [pc, #88]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001dec:	f004 f9a4 	bl	8006138 <HAL_TIM_PWM_Init>
 8001df0:	4603      	mov	r3, r0
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001df6:	f000 fa59 	bl	80022ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001dfa:	2360      	movs	r3, #96	; 0x60
 8001dfc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e02:	2300      	movs	r3, #0
 8001e04:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	4619      	mov	r1, r3
 8001e10:	480c      	ldr	r0, [pc, #48]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001e12:	f004 fbb1 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d001      	beq.n	8001e20 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e1c:	f000 fa46 	bl	80022ac <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e20:	1d3b      	adds	r3, r7, #4
 8001e22:	2204      	movs	r2, #4
 8001e24:	4619      	mov	r1, r3
 8001e26:	4807      	ldr	r0, [pc, #28]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001e28:	f004 fba6 	bl	8006578 <HAL_TIM_PWM_ConfigChannel>
 8001e2c:	4603      	mov	r3, r0
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d001      	beq.n	8001e36 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001e32:	f000 fa3b 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e36:	4803      	ldr	r0, [pc, #12]	; (8001e44 <MX_TIM12_Init+0x98>)
 8001e38:	f001 f9ca 	bl	80031d0 <HAL_TIM_MspPostInit>

}
 8001e3c:	bf00      	nop
 8001e3e:	3720      	adds	r7, #32
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	20000aa8 	.word	0x20000aa8
 8001e48:	40001800 	.word	0x40001800

08001e4c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e4c:	b580      	push	{r7, lr}
 8001e4e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e50:	4b11      	ldr	r3, [pc, #68]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e52:	4a12      	ldr	r2, [pc, #72]	; (8001e9c <MX_UART4_Init+0x50>)
 8001e54:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e56:	4b10      	ldr	r3, [pc, #64]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e58:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e5c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e64:	4b0c      	ldr	r3, [pc, #48]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e6a:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e70:	4b09      	ldr	r3, [pc, #36]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e72:	220c      	movs	r2, #12
 8001e74:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e7c:	4b06      	ldr	r3, [pc, #24]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e7e:	2200      	movs	r2, #0
 8001e80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e82:	4805      	ldr	r0, [pc, #20]	; (8001e98 <MX_UART4_Init+0x4c>)
 8001e84:	f005 f914 	bl	80070b0 <HAL_UART_Init>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d001      	beq.n	8001e92 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e8e:	f000 fa0d 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e92:	bf00      	nop
 8001e94:	bd80      	pop	{r7, pc}
 8001e96:	bf00      	nop
 8001e98:	20000920 	.word	0x20000920
 8001e9c:	40004c00 	.word	0x40004c00

08001ea0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001ea4:	4b11      	ldr	r3, [pc, #68]	; (8001eec <MX_UART5_Init+0x4c>)
 8001ea6:	4a12      	ldr	r2, [pc, #72]	; (8001ef0 <MX_UART5_Init+0x50>)
 8001ea8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001eaa:	4b10      	ldr	r3, [pc, #64]	; (8001eec <MX_UART5_Init+0x4c>)
 8001eac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001eb0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001eb2:	4b0e      	ldr	r3, [pc, #56]	; (8001eec <MX_UART5_Init+0x4c>)
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001eb8:	4b0c      	ldr	r3, [pc, #48]	; (8001eec <MX_UART5_Init+0x4c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001ebe:	4b0b      	ldr	r3, [pc, #44]	; (8001eec <MX_UART5_Init+0x4c>)
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ec4:	4b09      	ldr	r3, [pc, #36]	; (8001eec <MX_UART5_Init+0x4c>)
 8001ec6:	220c      	movs	r2, #12
 8001ec8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eca:	4b08      	ldr	r3, [pc, #32]	; (8001eec <MX_UART5_Init+0x4c>)
 8001ecc:	2200      	movs	r2, #0
 8001ece:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ed0:	4b06      	ldr	r3, [pc, #24]	; (8001eec <MX_UART5_Init+0x4c>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ed6:	4805      	ldr	r0, [pc, #20]	; (8001eec <MX_UART5_Init+0x4c>)
 8001ed8:	f005 f8ea 	bl	80070b0 <HAL_UART_Init>
 8001edc:	4603      	mov	r3, r0
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d001      	beq.n	8001ee6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001ee2:	f000 f9e3 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	200007a8 	.word	0x200007a8
 8001ef0:	40005000 	.word	0x40005000

08001ef4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef8:	4b11      	ldr	r3, [pc, #68]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001efa:	4a12      	ldr	r2, [pc, #72]	; (8001f44 <MX_USART1_UART_Init+0x50>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b0e      	ldr	r3, [pc, #56]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b0c      	ldr	r3, [pc, #48]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b09      	ldr	r3, [pc, #36]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b08      	ldr	r3, [pc, #32]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b06      	ldr	r3, [pc, #24]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f2a:	4805      	ldr	r0, [pc, #20]	; (8001f40 <MX_USART1_UART_Init+0x4c>)
 8001f2c:	f005 f8c0 	bl	80070b0 <HAL_UART_Init>
 8001f30:	4603      	mov	r3, r0
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f36:	f000 f9b9 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f3a:	bf00      	nop
 8001f3c:	bd80      	pop	{r7, pc}
 8001f3e:	bf00      	nop
 8001f40:	20000894 	.word	0x20000894
 8001f44:	40011000 	.word	0x40011000

08001f48 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f4c:	4b11      	ldr	r3, [pc, #68]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f4e:	4a12      	ldr	r2, [pc, #72]	; (8001f98 <MX_USART2_UART_Init+0x50>)
 8001f50:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f52:	4b10      	ldr	r3, [pc, #64]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f54:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f58:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f5a:	4b0e      	ldr	r3, [pc, #56]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f60:	4b0c      	ldr	r3, [pc, #48]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f62:	2200      	movs	r2, #0
 8001f64:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f66:	4b0b      	ldr	r3, [pc, #44]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f68:	2200      	movs	r2, #0
 8001f6a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f6c:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f6e:	220c      	movs	r2, #12
 8001f70:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f72:	4b08      	ldr	r3, [pc, #32]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f78:	4b06      	ldr	r3, [pc, #24]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f7e:	4805      	ldr	r0, [pc, #20]	; (8001f94 <MX_USART2_UART_Init+0x4c>)
 8001f80:	f005 f896 	bl	80070b0 <HAL_UART_Init>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f8a:	f000 f98f 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	bf00      	nop
 8001f94:	20000a04 	.word	0x20000a04
 8001f98:	40004400 	.word	0x40004400

08001f9c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001fa0:	4b11      	ldr	r3, [pc, #68]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fa2:	4a12      	ldr	r2, [pc, #72]	; (8001fec <MX_USART3_UART_Init+0x50>)
 8001fa4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001fa6:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fa8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fac:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fae:	4b0e      	ldr	r3, [pc, #56]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fb4:	4b0c      	ldr	r3, [pc, #48]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fba:	4b0b      	ldr	r3, [pc, #44]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fc0:	4b09      	ldr	r3, [pc, #36]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fc2:	220c      	movs	r2, #12
 8001fc4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fc6:	4b08      	ldr	r3, [pc, #32]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fc8:	2200      	movs	r2, #0
 8001fca:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fcc:	4b06      	ldr	r3, [pc, #24]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fd2:	4805      	ldr	r0, [pc, #20]	; (8001fe8 <MX_USART3_UART_Init+0x4c>)
 8001fd4:	f005 f86c 	bl	80070b0 <HAL_UART_Init>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fde:	f000 f965 	bl	80022ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200006d4 	.word	0x200006d4
 8001fec:	40004800 	.word	0x40004800

08001ff0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b23      	ldr	r3, [pc, #140]	; (8002088 <MX_DMA_Init+0x98>)
 8001ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffe:	4a22      	ldr	r2, [pc, #136]	; (8002088 <MX_DMA_Init+0x98>)
 8002000:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002004:	6313      	str	r3, [r2, #48]	; 0x30
 8002006:	4b20      	ldr	r3, [pc, #128]	; (8002088 <MX_DMA_Init+0x98>)
 8002008:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800200a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b1c      	ldr	r3, [pc, #112]	; (8002088 <MX_DMA_Init+0x98>)
 8002018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201a:	4a1b      	ldr	r2, [pc, #108]	; (8002088 <MX_DMA_Init+0x98>)
 800201c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002020:	6313      	str	r3, [r2, #48]	; 0x30
 8002022:	4b19      	ldr	r3, [pc, #100]	; (8002088 <MX_DMA_Init+0x98>)
 8002024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002026:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 800202e:	2200      	movs	r2, #0
 8002030:	2100      	movs	r1, #0
 8002032:	200b      	movs	r0, #11
 8002034:	f002 fa34 	bl	80044a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002038:	200b      	movs	r0, #11
 800203a:	f002 fa4d 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 800203e:	2200      	movs	r2, #0
 8002040:	2100      	movs	r1, #0
 8002042:	200c      	movs	r0, #12
 8002044:	f002 fa2c 	bl	80044a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002048:	200c      	movs	r0, #12
 800204a:	f002 fa45 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 800204e:	2200      	movs	r2, #0
 8002050:	2100      	movs	r1, #0
 8002052:	200d      	movs	r0, #13
 8002054:	f002 fa24 	bl	80044a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002058:	200d      	movs	r0, #13
 800205a:	f002 fa3d 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800205e:	2200      	movs	r2, #0
 8002060:	2100      	movs	r1, #0
 8002062:	2010      	movs	r0, #16
 8002064:	f002 fa1c 	bl	80044a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002068:	2010      	movs	r0, #16
 800206a:	f002 fa35 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800206e:	2200      	movs	r2, #0
 8002070:	2100      	movs	r1, #0
 8002072:	203a      	movs	r0, #58	; 0x3a
 8002074:	f002 fa14 	bl	80044a0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002078:	203a      	movs	r0, #58	; 0x3a
 800207a:	f002 fa2d 	bl	80044d8 <HAL_NVIC_EnableIRQ>

}
 800207e:	bf00      	nop
 8002080:	3708      	adds	r7, #8
 8002082:	46bd      	mov	sp, r7
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	40023800 	.word	0x40023800

0800208c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b08c      	sub	sp, #48	; 0x30
 8002090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002092:	f107 031c 	add.w	r3, r7, #28
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
 800209a:	605a      	str	r2, [r3, #4]
 800209c:	609a      	str	r2, [r3, #8]
 800209e:	60da      	str	r2, [r3, #12]
 80020a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80020a2:	2300      	movs	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	4b62      	ldr	r3, [pc, #392]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020aa:	4a61      	ldr	r2, [pc, #388]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020ac:	f043 0310 	orr.w	r3, r3, #16
 80020b0:	6313      	str	r3, [r2, #48]	; 0x30
 80020b2:	4b5f      	ldr	r3, [pc, #380]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b6:	f003 0310 	and.w	r3, r3, #16
 80020ba:	61bb      	str	r3, [r7, #24]
 80020bc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	4b5b      	ldr	r3, [pc, #364]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020c6:	4a5a      	ldr	r2, [pc, #360]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020c8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020cc:	6313      	str	r3, [r2, #48]	; 0x30
 80020ce:	4b58      	ldr	r3, [pc, #352]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	613b      	str	r3, [r7, #16]
 80020de:	4b54      	ldr	r3, [pc, #336]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a53      	ldr	r2, [pc, #332]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b51      	ldr	r3, [pc, #324]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	613b      	str	r3, [r7, #16]
 80020f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	4b4d      	ldr	r3, [pc, #308]	; (8002230 <MX_GPIO_Init+0x1a4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a4c      	ldr	r2, [pc, #304]	; (8002230 <MX_GPIO_Init+0x1a4>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b4a      	ldr	r3, [pc, #296]	; (8002230 <MX_GPIO_Init+0x1a4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8002112:	2300      	movs	r3, #0
 8002114:	60bb      	str	r3, [r7, #8]
 8002116:	4b46      	ldr	r3, [pc, #280]	; (8002230 <MX_GPIO_Init+0x1a4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	4a45      	ldr	r2, [pc, #276]	; (8002230 <MX_GPIO_Init+0x1a4>)
 800211c:	f043 0308 	orr.w	r3, r3, #8
 8002120:	6313      	str	r3, [r2, #48]	; 0x30
 8002122:	4b43      	ldr	r3, [pc, #268]	; (8002230 <MX_GPIO_Init+0x1a4>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	f003 0308 	and.w	r3, r3, #8
 800212a:	60bb      	str	r3, [r7, #8]
 800212c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800212e:	2300      	movs	r3, #0
 8002130:	607b      	str	r3, [r7, #4]
 8002132:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <MX_GPIO_Init+0x1a4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	4a3e      	ldr	r2, [pc, #248]	; (8002230 <MX_GPIO_Init+0x1a4>)
 8002138:	f043 0304 	orr.w	r3, r3, #4
 800213c:	6313      	str	r3, [r2, #48]	; 0x30
 800213e:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <MX_GPIO_Init+0x1a4>)
 8002140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002142:	f003 0304 	and.w	r3, r3, #4
 8002146:	607b      	str	r3, [r7, #4]
 8002148:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800214a:	2200      	movs	r2, #0
 800214c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002150:	4838      	ldr	r0, [pc, #224]	; (8002234 <MX_GPIO_Init+0x1a8>)
 8002152:	f002 ff79 	bl	8005048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CSN_GPIO_Port, OLED_CSN_Pin, GPIO_PIN_RESET);
 8002156:	2200      	movs	r2, #0
 8002158:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800215c:	4836      	ldr	r0, [pc, #216]	; (8002238 <MX_GPIO_Init+0x1ac>)
 800215e:	f002 ff73 	bl	8005048 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8002162:	2200      	movs	r2, #0
 8002164:	21c0      	movs	r1, #192	; 0xc0
 8002166:	4835      	ldr	r0, [pc, #212]	; (800223c <MX_GPIO_Init+0x1b0>)
 8002168:	f002 ff6e 	bl	8005048 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800216c:	2360      	movs	r3, #96	; 0x60
 800216e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002178:	2300      	movs	r3, #0
 800217a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800217c:	2303      	movs	r3, #3
 800217e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002180:	f107 031c 	add.w	r3, r7, #28
 8002184:	4619      	mov	r1, r3
 8002186:	482e      	ldr	r0, [pc, #184]	; (8002240 <MX_GPIO_Init+0x1b4>)
 8002188:	f002 fdc2 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 800218c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002190:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002192:	2301      	movs	r3, #1
 8002194:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002196:	2300      	movs	r3, #0
 8002198:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800219a:	2300      	movs	r3, #0
 800219c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 800219e:	f107 031c 	add.w	r3, r7, #28
 80021a2:	4619      	mov	r1, r3
 80021a4:	4823      	ldr	r0, [pc, #140]	; (8002234 <MX_GPIO_Init+0x1a8>)
 80021a6:	f002 fdb3 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CSN_Pin */
  GPIO_InitStruct.Pin = OLED_CSN_Pin;
 80021aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021b0:	2301      	movs	r3, #1
 80021b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021b4:	2300      	movs	r3, #0
 80021b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b8:	2303      	movs	r3, #3
 80021ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CSN_GPIO_Port, &GPIO_InitStruct);
 80021bc:	f107 031c 	add.w	r3, r7, #28
 80021c0:	4619      	mov	r1, r3
 80021c2:	481d      	ldr	r0, [pc, #116]	; (8002238 <MX_GPIO_Init+0x1ac>)
 80021c4:	f002 fda4 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 80021c8:	23c0      	movs	r3, #192	; 0xc0
 80021ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021cc:	2301      	movs	r3, #1
 80021ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d0:	2300      	movs	r3, #0
 80021d2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021d4:	2303      	movs	r3, #3
 80021d6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d8:	f107 031c 	add.w	r3, r7, #28
 80021dc:	4619      	mov	r1, r3
 80021de:	4817      	ldr	r0, [pc, #92]	; (800223c <MX_GPIO_Init+0x1b0>)
 80021e0:	f002 fd96 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021e4:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021ea:	2302      	movs	r3, #2
 80021ec:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ee:	2300      	movs	r3, #0
 80021f0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021f2:	2300      	movs	r3, #0
 80021f4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80021f6:	2303      	movs	r3, #3
 80021f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021fa:	f107 031c 	add.w	r3, r7, #28
 80021fe:	4619      	mov	r1, r3
 8002200:	480e      	ldr	r0, [pc, #56]	; (800223c <MX_GPIO_Init+0x1b0>)
 8002202:	f002 fd85 	bl	8004d10 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002206:	f44f 7300 	mov.w	r3, #512	; 0x200
 800220a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800220c:	2302      	movs	r3, #2
 800220e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002210:	2300      	movs	r3, #0
 8002212:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002214:	2300      	movs	r3, #0
 8002216:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002218:	2303      	movs	r3, #3
 800221a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800221c:	f107 031c 	add.w	r3, r7, #28
 8002220:	4619      	mov	r1, r3
 8002222:	4806      	ldr	r0, [pc, #24]	; (800223c <MX_GPIO_Init+0x1b0>)
 8002224:	f002 fd74 	bl	8004d10 <HAL_GPIO_Init>

}
 8002228:	bf00      	nop
 800222a:	3730      	adds	r7, #48	; 0x30
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}
 8002230:	40023800 	.word	0x40023800
 8002234:	40020c00 	.word	0x40020c00
 8002238:	40020000 	.word	0x40020000
 800223c:	40020400 	.word	0x40020400
 8002240:	40021000 	.word	0x40021000

08002244 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b082      	sub	sp, #8
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	4a10      	ldr	r2, [pc, #64]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x50>)
 8002252:	4293      	cmp	r3, r2
 8002254:	d102      	bne.n	800225c <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8002256:	f001 fdc5 	bl	8003de4 <HAL_IncTick>
      if(pidinit==1&&lock!=0)
    	  PID_CTRL();
      setmotor();
  }
  /* USER CODE END Callback 1 */
}
 800225a:	e017      	b.n	800228c <HAL_TIM_PeriodElapsedCallback+0x48>
  else if(htim->Instance == TIM1)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	4a0d      	ldr	r2, [pc, #52]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8002262:	4293      	cmp	r3, r2
 8002264:	d112      	bne.n	800228c <HAL_TIM_PeriodElapsedCallback+0x48>
	  HAL_UART_Transmit_IT(&huart5, (unsigned char *)&frame, sizeof(frame));
 8002266:	2284      	movs	r2, #132	; 0x84
 8002268:	490c      	ldr	r1, [pc, #48]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x58>)
 800226a:	480d      	ldr	r0, [pc, #52]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 800226c:	f004 ffff 	bl	800726e <HAL_UART_Transmit_IT>
	  OLED_Refresh_Gram();
 8002270:	f000 f956 	bl	8002520 <OLED_Refresh_Gram>
      if(pidinit==1&&lock!=0)
 8002274:	4b0b      	ldr	r3, [pc, #44]	; (80022a4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d105      	bne.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x44>
 800227c:	4b0a      	ldr	r3, [pc, #40]	; (80022a8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b00      	cmp	r3, #0
 8002282:	d001      	beq.n	8002288 <HAL_TIM_PeriodElapsedCallback+0x44>
    	  PID_CTRL();
 8002284:	f7fe feac 	bl	8000fe0 <PID_CTRL>
      setmotor();
 8002288:	f000 f83e 	bl	8002308 <setmotor>
}
 800228c:	bf00      	nop
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40001400 	.word	0x40001400
 8002298:	40010000 	.word	0x40010000
 800229c:	200000a8 	.word	0x200000a8
 80022a0:	200007a8 	.word	0x200007a8
 80022a4:	200003e8 	.word	0x200003e8
 80022a8:	20000404 	.word	0x20000404

080022ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022ac:	b480      	push	{r7}
 80022ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022b0:	b672      	cpsid	i
}
 80022b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <Error_Handler+0x8>
	...

080022b8 <motorinit>:
		{ 1.0f, 1.0f, 0, 0,1.0f, 0, 0, 0, 0, },
		{ -1.0f, 1.0f, 0, 0, 1.0f, 0, 0, 0, 0, }, };*/
float motor[8];
//每次执行会将六自由度dof6转换为8个电机通道 并赋值
void motorinit()
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim4;
	extern TIM_HandleTypeDef htim8;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80022bc:	2100      	movs	r1, #0
 80022be:	4810      	ldr	r0, [pc, #64]	; (8002300 <motorinit+0x48>)
 80022c0:	f003 ff8a 	bl	80061d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80022c4:	2104      	movs	r1, #4
 80022c6:	480e      	ldr	r0, [pc, #56]	; (8002300 <motorinit+0x48>)
 80022c8:	f003 ff86 	bl	80061d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80022cc:	2108      	movs	r1, #8
 80022ce:	480c      	ldr	r0, [pc, #48]	; (8002300 <motorinit+0x48>)
 80022d0:	f003 ff82 	bl	80061d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80022d4:	210c      	movs	r1, #12
 80022d6:	480a      	ldr	r0, [pc, #40]	; (8002300 <motorinit+0x48>)
 80022d8:	f003 ff7e 	bl	80061d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80022dc:	2100      	movs	r1, #0
 80022de:	4809      	ldr	r0, [pc, #36]	; (8002304 <motorinit+0x4c>)
 80022e0:	f003 ff7a 	bl	80061d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80022e4:	2104      	movs	r1, #4
 80022e6:	4807      	ldr	r0, [pc, #28]	; (8002304 <motorinit+0x4c>)
 80022e8:	f003 ff76 	bl	80061d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80022ec:	2108      	movs	r1, #8
 80022ee:	4805      	ldr	r0, [pc, #20]	; (8002304 <motorinit+0x4c>)
 80022f0:	f003 ff72 	bl	80061d8 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80022f4:	210c      	movs	r1, #12
 80022f6:	4803      	ldr	r0, [pc, #12]	; (8002304 <motorinit+0x4c>)
 80022f8:	f003 ff6e 	bl	80061d8 <HAL_TIM_PWM_Start>
}
 80022fc:	bf00      	nop
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	2000062c 	.word	0x2000062c
 8002304:	200005e4 	.word	0x200005e4

08002308 <setmotor>:
void setmotor()
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b084      	sub	sp, #16
 800230c:	af00      	add	r7, sp, #0
    int time = HAL_GetTick();
 800230e:	f001 fd7d 	bl	8003e0c <HAL_GetTick>
 8002312:	4603      	mov	r3, r0
 8002314:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 8; i++)
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
 800231a:	e05d      	b.n	80023d8 <setmotor+0xd0>
    {
        float tmp = 0;
 800231c:	f04f 0300 	mov.w	r3, #0
 8002320:	60bb      	str	r3, [r7, #8]
        for (int j = 0; j < 6; j++)
 8002322:	2300      	movs	r3, #0
 8002324:	607b      	str	r3, [r7, #4]
 8002326:	e01c      	b.n	8002362 <setmotor+0x5a>
            tmp += hcc[i][j] * dof6[j];
 8002328:	4973      	ldr	r1, [pc, #460]	; (80024f8 <setmotor+0x1f0>)
 800232a:	68fa      	ldr	r2, [r7, #12]
 800232c:	4613      	mov	r3, r2
 800232e:	005b      	lsls	r3, r3, #1
 8002330:	4413      	add	r3, r2
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	687a      	ldr	r2, [r7, #4]
 8002336:	4413      	add	r3, r2
 8002338:	009b      	lsls	r3, r3, #2
 800233a:	440b      	add	r3, r1
 800233c:	ed93 7a00 	vldr	s14, [r3]
 8002340:	4a6e      	ldr	r2, [pc, #440]	; (80024fc <setmotor+0x1f4>)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	009b      	lsls	r3, r3, #2
 8002346:	4413      	add	r3, r2
 8002348:	edd3 7a00 	vldr	s15, [r3]
 800234c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002350:	ed97 7a02 	vldr	s14, [r7, #8]
 8002354:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002358:	edc7 7a02 	vstr	s15, [r7, #8]
        for (int j = 0; j < 6; j++)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	3301      	adds	r3, #1
 8002360:	607b      	str	r3, [r7, #4]
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2b05      	cmp	r3, #5
 8002366:	dddf      	ble.n	8002328 <setmotor+0x20>
        if(tmp > 1)
 8002368:	edd7 7a02 	vldr	s15, [r7, #8]
 800236c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002370:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002374:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002378:	dd02      	ble.n	8002380 <setmotor+0x78>
            tmp = 1;
 800237a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800237e:	60bb      	str	r3, [r7, #8]
        if(tmp < -1)
 8002380:	edd7 7a02 	vldr	s15, [r7, #8]
 8002384:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002388:	eef4 7ac7 	vcmpe.f32	s15, s14
 800238c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002390:	d501      	bpl.n	8002396 <setmotor+0x8e>
            tmp = -1;
 8002392:	4b5b      	ldr	r3, [pc, #364]	; (8002500 <setmotor+0x1f8>)
 8002394:	60bb      	str	r3, [r7, #8]
        if(time<10000||lock==0)//初始化||没有解开锁定
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	f242 720f 	movw	r2, #9999	; 0x270f
 800239c:	4293      	cmp	r3, r2
 800239e:	dd03      	ble.n	80023a8 <setmotor+0xa0>
 80023a0:	4b58      	ldr	r3, [pc, #352]	; (8002504 <setmotor+0x1fc>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d107      	bne.n	80023b8 <setmotor+0xb0>
			motor[i] = 0;
 80023a8:	4a57      	ldr	r2, [pc, #348]	; (8002508 <setmotor+0x200>)
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	4413      	add	r3, r2
 80023b0:	f04f 0200 	mov.w	r2, #0
 80023b4:	601a      	str	r2, [r3, #0]
 80023b6:	e005      	b.n	80023c4 <setmotor+0xbc>
        else
        	motor[i] = tmp;
 80023b8:	4a53      	ldr	r2, [pc, #332]	; (8002508 <setmotor+0x200>)
 80023ba:	68fb      	ldr	r3, [r7, #12]
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	4413      	add	r3, r2
 80023c0:	68ba      	ldr	r2, [r7, #8]
 80023c2:	601a      	str	r2, [r3, #0]
        frame.fdata[i + 16] = tmp;//回传数据
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	3310      	adds	r3, #16
 80023c8:	4a50      	ldr	r2, [pc, #320]	; (800250c <setmotor+0x204>)
 80023ca:	009b      	lsls	r3, r3, #2
 80023cc:	4413      	add	r3, r2
 80023ce:	68ba      	ldr	r2, [r7, #8]
 80023d0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	60fb      	str	r3, [r7, #12]
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	2b07      	cmp	r3, #7
 80023dc:	dd9e      	ble.n	800231c <setmotor+0x14>
    }

    MOTOR_1 = motor[0] * MOTOR_WAY + MOTOR_CENTER;
 80023de:	4b4a      	ldr	r3, [pc, #296]	; (8002508 <setmotor+0x200>)
 80023e0:	edd3 7a00 	vldr	s15, [r3]
 80023e4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002510 <setmotor+0x208>
 80023e8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ec:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8002514 <setmotor+0x20c>
 80023f0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023f4:	4b48      	ldr	r3, [pc, #288]	; (8002518 <setmotor+0x210>)
 80023f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023fa:	ee17 2a90 	vmov	r2, s15
 80023fe:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_2 = motor[1] * MOTOR_WAY + MOTOR_CENTER;
 8002400:	4b41      	ldr	r3, [pc, #260]	; (8002508 <setmotor+0x200>)
 8002402:	edd3 7a01 	vldr	s15, [r3, #4]
 8002406:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002510 <setmotor+0x208>
 800240a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800240e:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8002514 <setmotor+0x20c>
 8002412:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002416:	4b40      	ldr	r3, [pc, #256]	; (8002518 <setmotor+0x210>)
 8002418:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800241c:	ee17 2a90 	vmov	r2, s15
 8002420:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_3 = motor[2] * MOTOR_WAY + MOTOR_CENTER;
 8002422:	4b39      	ldr	r3, [pc, #228]	; (8002508 <setmotor+0x200>)
 8002424:	edd3 7a02 	vldr	s15, [r3, #8]
 8002428:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002510 <setmotor+0x208>
 800242c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002430:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8002514 <setmotor+0x20c>
 8002434:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002438:	4b37      	ldr	r3, [pc, #220]	; (8002518 <setmotor+0x210>)
 800243a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800243e:	ee17 2a90 	vmov	r2, s15
 8002442:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_4 = motor[3] * MOTOR_WAY + MOTOR_CENTER;
 8002444:	4b30      	ldr	r3, [pc, #192]	; (8002508 <setmotor+0x200>)
 8002446:	edd3 7a03 	vldr	s15, [r3, #12]
 800244a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002510 <setmotor+0x208>
 800244e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002452:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002514 <setmotor+0x20c>
 8002456:	ee77 7a87 	vadd.f32	s15, s15, s14
 800245a:	4b2f      	ldr	r3, [pc, #188]	; (8002518 <setmotor+0x210>)
 800245c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002460:	ee17 2a90 	vmov	r2, s15
 8002464:	641a      	str	r2, [r3, #64]	; 0x40
    MOTOR_5 = motor[4] * MOTOR_WAY + MOTOR_CENTER;
 8002466:	4b28      	ldr	r3, [pc, #160]	; (8002508 <setmotor+0x200>)
 8002468:	edd3 7a04 	vldr	s15, [r3, #16]
 800246c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002510 <setmotor+0x208>
 8002470:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002474:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8002514 <setmotor+0x20c>
 8002478:	ee77 7a87 	vadd.f32	s15, s15, s14
 800247c:	4b27      	ldr	r3, [pc, #156]	; (800251c <setmotor+0x214>)
 800247e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002482:	ee17 2a90 	vmov	r2, s15
 8002486:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_6 = motor[5] * MOTOR_WAY + MOTOR_CENTER;
 8002488:	4b1f      	ldr	r3, [pc, #124]	; (8002508 <setmotor+0x200>)
 800248a:	edd3 7a05 	vldr	s15, [r3, #20]
 800248e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002510 <setmotor+0x208>
 8002492:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002496:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8002514 <setmotor+0x20c>
 800249a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800249e:	4b1f      	ldr	r3, [pc, #124]	; (800251c <setmotor+0x214>)
 80024a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024a4:	ee17 2a90 	vmov	r2, s15
 80024a8:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_7 = motor[6] * MOTOR_WAY + MOTOR_CENTER;
 80024aa:	4b17      	ldr	r3, [pc, #92]	; (8002508 <setmotor+0x200>)
 80024ac:	edd3 7a06 	vldr	s15, [r3, #24]
 80024b0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002510 <setmotor+0x208>
 80024b4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b8:	ed9f 7a16 	vldr	s14, [pc, #88]	; 8002514 <setmotor+0x20c>
 80024bc:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024c0:	4b16      	ldr	r3, [pc, #88]	; (800251c <setmotor+0x214>)
 80024c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024c6:	ee17 2a90 	vmov	r2, s15
 80024ca:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_8 = motor[7] * MOTOR_WAY + MOTOR_CENTER;
 80024cc:	4b0e      	ldr	r3, [pc, #56]	; (8002508 <setmotor+0x200>)
 80024ce:	edd3 7a07 	vldr	s15, [r3, #28]
 80024d2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002510 <setmotor+0x208>
 80024d6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024da:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002514 <setmotor+0x20c>
 80024de:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <setmotor+0x214>)
 80024e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e8:	ee17 2a90 	vmov	r2, s15
 80024ec:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024ee:	bf00      	nop
 80024f0:	3710      	adds	r7, #16
 80024f2:	46bd      	mov	sp, r7
 80024f4:	bd80      	pop	{r7, pc}
 80024f6:	bf00      	nop
 80024f8:	2000012c 	.word	0x2000012c
 80024fc:	200003ec 	.word	0x200003ec
 8002500:	bf800000 	.word	0xbf800000
 8002504:	20000404 	.word	0x20000404
 8002508:	20000af0 	.word	0x20000af0
 800250c:	200000a8 	.word	0x200000a8
 8002510:	44480000 	.word	0x44480000
 8002514:	44bb8000 	.word	0x44bb8000
 8002518:	40000800 	.word	0x40000800
 800251c:	40010400 	.word	0x40010400

08002520 <OLED_Refresh_Gram>:
extern SPI_HandleTypeDef hspi1;

  
u8 OLED_GRAM[8][128];	   //内部定义了一块GRAM
void OLED_Refresh_Gram(void) //把32内部的GRAM刷新到OLED里面显示
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
	//u8 i,n;
	for(int i=0;i<8;i++)
 8002526:	2300      	movs	r3, #0
 8002528:	607b      	str	r3, [r7, #4]
 800252a:	e01b      	b.n	8002564 <OLED_Refresh_Gram+0x44>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	b2db      	uxtb	r3, r3
 8002530:	3b50      	subs	r3, #80	; 0x50
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2100      	movs	r1, #0
 8002536:	4618      	mov	r0, r3
 8002538:	f000 f820 	bl	800257c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 800253c:	2100      	movs	r1, #0
 800253e:	2000      	movs	r0, #0
 8002540:	f000 f81c 	bl	800257c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 8002544:	2100      	movs	r1, #0
 8002546:	2010      	movs	r0, #16
 8002548:	f000 f818 	bl	800257c <OLED_WR_Byte>
		//OLED_RS_Set();
		HAL_SPI_Transmit(&hspi1, OLED_GRAM[i], 128, 10);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	01db      	lsls	r3, r3, #7
 8002550:	4a08      	ldr	r2, [pc, #32]	; (8002574 <OLED_Refresh_Gram+0x54>)
 8002552:	1899      	adds	r1, r3, r2
 8002554:	230a      	movs	r3, #10
 8002556:	2280      	movs	r2, #128	; 0x80
 8002558:	4807      	ldr	r0, [pc, #28]	; (8002578 <OLED_Refresh_Gram+0x58>)
 800255a:	f003 fabe 	bl	8005ada <HAL_SPI_Transmit>
	for(int i=0;i<8;i++)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	3301      	adds	r3, #1
 8002562:	607b      	str	r3, [r7, #4]
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2b07      	cmp	r3, #7
 8002568:	dde0      	ble.n	800252c <OLED_Refresh_Gram+0xc>
		//for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
	}
}
 800256a:	bf00      	nop
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	20000b10 	.word	0x20000b10
 8002578:	20000964 	.word	0x20000964

0800257c <OLED_WR_Byte>:
函数功能：向OLED写入一个字节
入口参数：dat:要写入的数据/命令  ，cmd:数据/命令标志 0,表示命令;1,表示数据;
返 回 值：无
**************************************************************************/
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 800257c:	b580      	push	{r7, lr}
 800257e:	b082      	sub	sp, #8
 8002580:	af00      	add	r7, sp, #0
 8002582:	4603      	mov	r3, r0
 8002584:	460a      	mov	r2, r1
 8002586:	71fb      	strb	r3, [r7, #7]
 8002588:	4613      	mov	r3, r2
 800258a:	71bb      	strb	r3, [r7, #6]
	//u8 i;
	if(cmd)
 800258c:	79bb      	ldrb	r3, [r7, #6]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d005      	beq.n	800259e <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 8002592:	2201      	movs	r2, #1
 8002594:	2180      	movs	r1, #128	; 0x80
 8002596:	480c      	ldr	r0, [pc, #48]	; (80025c8 <OLED_WR_Byte+0x4c>)
 8002598:	f002 fd56 	bl	8005048 <HAL_GPIO_WritePin>
 800259c:	e004      	b.n	80025a8 <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();
 800259e:	2200      	movs	r2, #0
 80025a0:	2180      	movs	r1, #128	; 0x80
 80025a2:	4809      	ldr	r0, [pc, #36]	; (80025c8 <OLED_WR_Byte+0x4c>)
 80025a4:	f002 fd50 	bl	8005048 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 10);
 80025a8:	1df9      	adds	r1, r7, #7
 80025aa:	230a      	movs	r3, #10
 80025ac:	2201      	movs	r2, #1
 80025ae:	4807      	ldr	r0, [pc, #28]	; (80025cc <OLED_WR_Byte+0x50>)
 80025b0:	f003 fa93 	bl	8005ada <HAL_SPI_Transmit>
		   OLED_SDIN_Clr();
		OLED_SCLK_Set();
		dat<<=1;   
	}				 		  
	*/
	OLED_RS_Set();   	  
 80025b4:	2201      	movs	r2, #1
 80025b6:	2180      	movs	r1, #128	; 0x80
 80025b8:	4803      	ldr	r0, [pc, #12]	; (80025c8 <OLED_WR_Byte+0x4c>)
 80025ba:	f002 fd45 	bl	8005048 <HAL_GPIO_WritePin>
} 
 80025be:	bf00      	nop
 80025c0:	3708      	adds	r7, #8
 80025c2:	46bd      	mov	sp, r7
 80025c4:	bd80      	pop	{r7, pc}
 80025c6:	bf00      	nop
 80025c8:	40020400 	.word	0x40020400
 80025cc:	20000964 	.word	0x20000964

080025d0 <OLED_Clear>:
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}	
////////////////////////////////////////////////////////////////////////////////
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
	u8 i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[i][n]=0X00;
 80025d6:	2300      	movs	r3, #0
 80025d8:	71fb      	strb	r3, [r7, #7]
 80025da:	e014      	b.n	8002606 <OLED_Clear+0x36>
 80025dc:	2300      	movs	r3, #0
 80025de:	71bb      	strb	r3, [r7, #6]
 80025e0:	e00a      	b.n	80025f8 <OLED_Clear+0x28>
 80025e2:	79fa      	ldrb	r2, [r7, #7]
 80025e4:	79bb      	ldrb	r3, [r7, #6]
 80025e6:	490d      	ldr	r1, [pc, #52]	; (800261c <OLED_Clear+0x4c>)
 80025e8:	01d2      	lsls	r2, r2, #7
 80025ea:	440a      	add	r2, r1
 80025ec:	4413      	add	r3, r2
 80025ee:	2200      	movs	r2, #0
 80025f0:	701a      	strb	r2, [r3, #0]
 80025f2:	79bb      	ldrb	r3, [r7, #6]
 80025f4:	3301      	adds	r3, #1
 80025f6:	71bb      	strb	r3, [r7, #6]
 80025f8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	daf0      	bge.n	80025e2 <OLED_Clear+0x12>
 8002600:	79fb      	ldrb	r3, [r7, #7]
 8002602:	3301      	adds	r3, #1
 8002604:	71fb      	strb	r3, [r7, #7]
 8002606:	79fb      	ldrb	r3, [r7, #7]
 8002608:	2b07      	cmp	r3, #7
 800260a:	d9e7      	bls.n	80025dc <OLED_Clear+0xc>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
		//for(k=0;k<128;k++)OLED_WR_Byte(OLED_GRAM[j][k],OLED_DATA);
	}
	//OLED_Refresh_Gram();//更新显示
	 */
}
 800260c:	bf00      	nop
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	20000b10 	.word	0x20000b10

08002620 <OLED_DrawPoint>:
函数功能：在OLED中画点
入口参数：坐标:x：0~127，y:0~63  ，t:1 填充 0,清空		
返 回 值：无
**************************************************************************/
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 8002620:	b480      	push	{r7}
 8002622:	b085      	sub	sp, #20
 8002624:	af00      	add	r7, sp, #0
 8002626:	4603      	mov	r3, r0
 8002628:	71fb      	strb	r3, [r7, #7]
 800262a:	460b      	mov	r3, r1
 800262c:	71bb      	strb	r3, [r7, #6]
 800262e:	4613      	mov	r3, r2
 8002630:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 8002632:	2300      	movs	r3, #0
 8002634:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 8002636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800263a:	2b00      	cmp	r3, #0
 800263c:	db41      	blt.n	80026c2 <OLED_DrawPoint+0xa2>
 800263e:	79bb      	ldrb	r3, [r7, #6]
 8002640:	2b3f      	cmp	r3, #63	; 0x3f
 8002642:	d83e      	bhi.n	80026c2 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8002644:	79bb      	ldrb	r3, [r7, #6]
 8002646:	08db      	lsrs	r3, r3, #3
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f1c3 0307 	rsb	r3, r3, #7
 800264e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002650:	79bb      	ldrb	r3, [r7, #6]
 8002652:	f003 0307 	and.w	r3, r3, #7
 8002656:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002658:	7b7b      	ldrb	r3, [r7, #13]
 800265a:	f1c3 0307 	rsb	r3, r3, #7
 800265e:	2201      	movs	r2, #1
 8002660:	fa02 f303 	lsl.w	r3, r2, r3
 8002664:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[pos][x]|=temp;
 8002666:	797b      	ldrb	r3, [r7, #5]
 8002668:	2b00      	cmp	r3, #0
 800266a:	d012      	beq.n	8002692 <OLED_DrawPoint+0x72>
 800266c:	7bba      	ldrb	r2, [r7, #14]
 800266e:	79fb      	ldrb	r3, [r7, #7]
 8002670:	4917      	ldr	r1, [pc, #92]	; (80026d0 <OLED_DrawPoint+0xb0>)
 8002672:	01d2      	lsls	r2, r2, #7
 8002674:	440a      	add	r2, r1
 8002676:	4413      	add	r3, r2
 8002678:	7818      	ldrb	r0, [r3, #0]
 800267a:	7bba      	ldrb	r2, [r7, #14]
 800267c:	79fb      	ldrb	r3, [r7, #7]
 800267e:	7bf9      	ldrb	r1, [r7, #15]
 8002680:	4301      	orrs	r1, r0
 8002682:	b2c8      	uxtb	r0, r1
 8002684:	4912      	ldr	r1, [pc, #72]	; (80026d0 <OLED_DrawPoint+0xb0>)
 8002686:	01d2      	lsls	r2, r2, #7
 8002688:	440a      	add	r2, r1
 800268a:	4413      	add	r3, r2
 800268c:	4602      	mov	r2, r0
 800268e:	701a      	strb	r2, [r3, #0]
 8002690:	e018      	b.n	80026c4 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[pos][x]&=~temp;
 8002692:	7bba      	ldrb	r2, [r7, #14]
 8002694:	79fb      	ldrb	r3, [r7, #7]
 8002696:	490e      	ldr	r1, [pc, #56]	; (80026d0 <OLED_DrawPoint+0xb0>)
 8002698:	01d2      	lsls	r2, r2, #7
 800269a:	440a      	add	r2, r1
 800269c:	4413      	add	r3, r2
 800269e:	781b      	ldrb	r3, [r3, #0]
 80026a0:	b25a      	sxtb	r2, r3
 80026a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026a6:	43db      	mvns	r3, r3
 80026a8:	b25b      	sxtb	r3, r3
 80026aa:	4013      	ands	r3, r2
 80026ac:	b259      	sxtb	r1, r3
 80026ae:	7bba      	ldrb	r2, [r7, #14]
 80026b0:	79fb      	ldrb	r3, [r7, #7]
 80026b2:	b2c8      	uxtb	r0, r1
 80026b4:	4906      	ldr	r1, [pc, #24]	; (80026d0 <OLED_DrawPoint+0xb0>)
 80026b6:	01d2      	lsls	r2, r2, #7
 80026b8:	440a      	add	r2, r1
 80026ba:	4413      	add	r3, r2
 80026bc:	4602      	mov	r2, r0
 80026be:	701a      	strb	r2, [r3, #0]
 80026c0:	e000      	b.n	80026c4 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 80026c2:	bf00      	nop
}
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	20000b10 	.word	0x20000b10

080026d4 <OLED_ShowChar>:
函数功能：在指定的位置显示一个字符
入口参数：坐标:x：0~127，y:0~63 ，mode:0,反白显示;1,正常显示	，size:选择字体 12-16		
返 回 值：无
**************************************************************************/
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{      			    
 80026d4:	b590      	push	{r4, r7, lr}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4604      	mov	r4, r0
 80026dc:	4608      	mov	r0, r1
 80026de:	4611      	mov	r1, r2
 80026e0:	461a      	mov	r2, r3
 80026e2:	4623      	mov	r3, r4
 80026e4:	71fb      	strb	r3, [r7, #7]
 80026e6:	4603      	mov	r3, r0
 80026e8:	71bb      	strb	r3, [r7, #6]
 80026ea:	460b      	mov	r3, r1
 80026ec:	717b      	strb	r3, [r7, #5]
 80026ee:	4613      	mov	r3, r2
 80026f0:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 80026f2:	79bb      	ldrb	r3, [r7, #6]
 80026f4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值				   
 80026f6:	797b      	ldrb	r3, [r7, #5]
 80026f8:	3b20      	subs	r3, #32
 80026fa:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80026fc:	2300      	movs	r3, #0
 80026fe:	73bb      	strb	r3, [r7, #14]
 8002700:	e04d      	b.n	800279e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 8002702:	793b      	ldrb	r3, [r7, #4]
 8002704:	2b0c      	cmp	r3, #12
 8002706:	d10b      	bne.n	8002720 <OLED_ShowChar+0x4c>
 8002708:	797a      	ldrb	r2, [r7, #5]
 800270a:	7bb9      	ldrb	r1, [r7, #14]
 800270c:	4828      	ldr	r0, [pc, #160]	; (80027b0 <OLED_ShowChar+0xdc>)
 800270e:	4613      	mov	r3, r2
 8002710:	005b      	lsls	r3, r3, #1
 8002712:	4413      	add	r3, r2
 8002714:	009b      	lsls	r3, r3, #2
 8002716:	4403      	add	r3, r0
 8002718:	440b      	add	r3, r1
 800271a:	781b      	ldrb	r3, [r3, #0]
 800271c:	73fb      	strb	r3, [r7, #15]
 800271e:	e007      	b.n	8002730 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体 	                          
 8002720:	797a      	ldrb	r2, [r7, #5]
 8002722:	7bbb      	ldrb	r3, [r7, #14]
 8002724:	4923      	ldr	r1, [pc, #140]	; (80027b4 <OLED_ShowChar+0xe0>)
 8002726:	0112      	lsls	r2, r2, #4
 8002728:	440a      	add	r2, r1
 800272a:	4413      	add	r3, r2
 800272c:	781b      	ldrb	r3, [r3, #0]
 800272e:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8002730:	2300      	movs	r3, #0
 8002732:	737b      	strb	r3, [r7, #13]
 8002734:	e02d      	b.n	8002792 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8002736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800273a:	2b00      	cmp	r3, #0
 800273c:	da07      	bge.n	800274e <OLED_ShowChar+0x7a>
 800273e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002742:	79b9      	ldrb	r1, [r7, #6]
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	4618      	mov	r0, r3
 8002748:	f7ff ff6a 	bl	8002620 <OLED_DrawPoint>
 800274c:	e00c      	b.n	8002768 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800274e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002752:	2b00      	cmp	r3, #0
 8002754:	bf0c      	ite	eq
 8002756:	2301      	moveq	r3, #1
 8002758:	2300      	movne	r3, #0
 800275a:	b2db      	uxtb	r3, r3
 800275c:	461a      	mov	r2, r3
 800275e:	79b9      	ldrb	r1, [r7, #6]
 8002760:	79fb      	ldrb	r3, [r7, #7]
 8002762:	4618      	mov	r0, r3
 8002764:	f7ff ff5c 	bl	8002620 <OLED_DrawPoint>
			temp<<=1;
 8002768:	7bfb      	ldrb	r3, [r7, #15]
 800276a:	005b      	lsls	r3, r3, #1
 800276c:	73fb      	strb	r3, [r7, #15]
			y++;
 800276e:	79bb      	ldrb	r3, [r7, #6]
 8002770:	3301      	adds	r3, #1
 8002772:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8002774:	79ba      	ldrb	r2, [r7, #6]
 8002776:	7b3b      	ldrb	r3, [r7, #12]
 8002778:	1ad2      	subs	r2, r2, r3
 800277a:	793b      	ldrb	r3, [r7, #4]
 800277c:	429a      	cmp	r2, r3
 800277e:	d105      	bne.n	800278c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8002780:	7b3b      	ldrb	r3, [r7, #12]
 8002782:	71bb      	strb	r3, [r7, #6]
				x++;
 8002784:	79fb      	ldrb	r3, [r7, #7]
 8002786:	3301      	adds	r3, #1
 8002788:	71fb      	strb	r3, [r7, #7]
				break;
 800278a:	e005      	b.n	8002798 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800278c:	7b7b      	ldrb	r3, [r7, #13]
 800278e:	3301      	adds	r3, #1
 8002790:	737b      	strb	r3, [r7, #13]
 8002792:	7b7b      	ldrb	r3, [r7, #13]
 8002794:	2b07      	cmp	r3, #7
 8002796:	d9ce      	bls.n	8002736 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8002798:	7bbb      	ldrb	r3, [r7, #14]
 800279a:	3301      	adds	r3, #1
 800279c:	73bb      	strb	r3, [r7, #14]
 800279e:	7bba      	ldrb	r2, [r7, #14]
 80027a0:	793b      	ldrb	r3, [r7, #4]
 80027a2:	429a      	cmp	r2, r3
 80027a4:	d3ad      	bcc.n	8002702 <OLED_ShowChar+0x2e>
			}
		}
    }          
}
 80027a6:	bf00      	nop
 80027a8:	bf00      	nop
 80027aa:	3714      	adds	r7, #20
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd90      	pop	{r4, r7, pc}
 80027b0:	0800c054 	.word	0x0800c054
 80027b4:	0800c4c8 	.word	0x0800c4c8

080027b8 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 80027b8:	b480      	push	{r7}
 80027ba:	b085      	sub	sp, #20
 80027bc:	af00      	add	r7, sp, #0
 80027be:	4603      	mov	r3, r0
 80027c0:	460a      	mov	r2, r1
 80027c2:	71fb      	strb	r3, [r7, #7]
 80027c4:	4613      	mov	r3, r2
 80027c6:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 80027c8:	2301      	movs	r3, #1
 80027ca:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 80027cc:	e004      	b.n	80027d8 <oled_pow+0x20>
 80027ce:	79fa      	ldrb	r2, [r7, #7]
 80027d0:	68fb      	ldr	r3, [r7, #12]
 80027d2:	fb02 f303 	mul.w	r3, r2, r3
 80027d6:	60fb      	str	r3, [r7, #12]
 80027d8:	79bb      	ldrb	r3, [r7, #6]
 80027da:	1e5a      	subs	r2, r3, #1
 80027dc:	71ba      	strb	r2, [r7, #6]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d1f5      	bne.n	80027ce <oled_pow+0x16>
	return result;
 80027e2:	68fb      	ldr	r3, [r7, #12]
}	
 80027e4:	4618      	mov	r0, r3
 80027e6:	3714      	adds	r7, #20
 80027e8:	46bd      	mov	sp, r7
 80027ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ee:	4770      	bx	lr

080027f0 <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：坐标:x：0~127，y:0~63 ；num:数值(0~4294967295)；mode:0,填充模式 1,叠加模式； size:选择字体 12-16		
返 回 值：无
**************************************************************************/  
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 80027f0:	b590      	push	{r4, r7, lr}
 80027f2:	b087      	sub	sp, #28
 80027f4:	af02      	add	r7, sp, #8
 80027f6:	603a      	str	r2, [r7, #0]
 80027f8:	461a      	mov	r2, r3
 80027fa:	4603      	mov	r3, r0
 80027fc:	71fb      	strb	r3, [r7, #7]
 80027fe:	460b      	mov	r3, r1
 8002800:	71bb      	strb	r3, [r7, #6]
 8002802:	4613      	mov	r3, r2
 8002804:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 8002806:	2300      	movs	r3, #0
 8002808:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 800280a:	2300      	movs	r3, #0
 800280c:	73fb      	strb	r3, [r7, #15]
 800280e:	e051      	b.n	80028b4 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8002810:	797a      	ldrb	r2, [r7, #5]
 8002812:	7bfb      	ldrb	r3, [r7, #15]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	b2db      	uxtb	r3, r3
 8002818:	3b01      	subs	r3, #1
 800281a:	b2db      	uxtb	r3, r3
 800281c:	4619      	mov	r1, r3
 800281e:	200a      	movs	r0, #10
 8002820:	f7ff ffca 	bl	80027b8 <oled_pow>
 8002824:	4602      	mov	r2, r0
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	fbb3 f1f2 	udiv	r1, r3, r2
 800282c:	4b26      	ldr	r3, [pc, #152]	; (80028c8 <OLED_ShowNumber+0xd8>)
 800282e:	fba3 2301 	umull	r2, r3, r3, r1
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	4613      	mov	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	4413      	add	r3, r2
 800283a:	005b      	lsls	r3, r3, #1
 800283c:	1aca      	subs	r2, r1, r3
 800283e:	4613      	mov	r3, r2
 8002840:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8002842:	7bbb      	ldrb	r3, [r7, #14]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d11d      	bne.n	8002884 <OLED_ShowNumber+0x94>
 8002848:	7bfa      	ldrb	r2, [r7, #15]
 800284a:	797b      	ldrb	r3, [r7, #5]
 800284c:	3b01      	subs	r3, #1
 800284e:	429a      	cmp	r2, r3
 8002850:	da18      	bge.n	8002884 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 8002852:	7b7b      	ldrb	r3, [r7, #13]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d113      	bne.n	8002880 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8002858:	f897 3020 	ldrb.w	r3, [r7, #32]
 800285c:	085b      	lsrs	r3, r3, #1
 800285e:	b2db      	uxtb	r3, r3
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	fb12 f303 	smulbb	r3, r2, r3
 8002866:	b2da      	uxtb	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	4413      	add	r3, r2
 800286c:	b2d8      	uxtb	r0, r3
 800286e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002872:	79b9      	ldrb	r1, [r7, #6]
 8002874:	2201      	movs	r2, #1
 8002876:	9200      	str	r2, [sp, #0]
 8002878:	2220      	movs	r2, #32
 800287a:	f7ff ff2b 	bl	80026d4 <OLED_ShowChar>
				continue;
 800287e:	e016      	b.n	80028ae <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 8002880:	2301      	movs	r3, #1
 8002882:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 8002884:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002888:	085b      	lsrs	r3, r3, #1
 800288a:	b2db      	uxtb	r3, r3
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	fb12 f303 	smulbb	r3, r2, r3
 8002892:	b2da      	uxtb	r2, r3
 8002894:	79fb      	ldrb	r3, [r7, #7]
 8002896:	4413      	add	r3, r2
 8002898:	b2d8      	uxtb	r0, r3
 800289a:	7b7b      	ldrb	r3, [r7, #13]
 800289c:	3330      	adds	r3, #48	; 0x30
 800289e:	b2da      	uxtb	r2, r3
 80028a0:	f897 3020 	ldrb.w	r3, [r7, #32]
 80028a4:	79b9      	ldrb	r1, [r7, #6]
 80028a6:	2401      	movs	r4, #1
 80028a8:	9400      	str	r4, [sp, #0]
 80028aa:	f7ff ff13 	bl	80026d4 <OLED_ShowChar>
	for(t=0;t<len;t++)
 80028ae:	7bfb      	ldrb	r3, [r7, #15]
 80028b0:	3301      	adds	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
 80028b4:	7bfa      	ldrb	r2, [r7, #15]
 80028b6:	797b      	ldrb	r3, [r7, #5]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d3a9      	bcc.n	8002810 <OLED_ShowNumber+0x20>
	}
} 
 80028bc:	bf00      	nop
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd90      	pop	{r4, r7, pc}
 80028c6:	bf00      	nop
 80028c8:	cccccccd 	.word	0xcccccccd

080028cc <OLED_ShowString>:
函数功能：显示字符串
入口参数：坐标:x：0~127，y:0~63 ；*p:字符串起始地址；
返 回 值：无
**************************************************************************/  
void OLED_ShowString(u8 x,u8 y,const char *p)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b084      	sub	sp, #16
 80028d0:	af02      	add	r7, sp, #8
 80028d2:	4603      	mov	r3, r0
 80028d4:	603a      	str	r2, [r7, #0]
 80028d6:	71fb      	strb	r3, [r7, #7]
 80028d8:	460b      	mov	r3, r1
 80028da:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80028dc:	e01f      	b.n	800291e <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80028de:	79fb      	ldrb	r3, [r7, #7]
 80028e0:	2b7a      	cmp	r3, #122	; 0x7a
 80028e2:	d904      	bls.n	80028ee <OLED_ShowString+0x22>
 80028e4:	2300      	movs	r3, #0
 80028e6:	71fb      	strb	r3, [r7, #7]
 80028e8:	79bb      	ldrb	r3, [r7, #6]
 80028ea:	3310      	adds	r3, #16
 80028ec:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80028ee:	79bb      	ldrb	r3, [r7, #6]
 80028f0:	2b3a      	cmp	r3, #58	; 0x3a
 80028f2:	d905      	bls.n	8002900 <OLED_ShowString+0x34>
 80028f4:	2300      	movs	r3, #0
 80028f6:	71fb      	strb	r3, [r7, #7]
 80028f8:	79fb      	ldrb	r3, [r7, #7]
 80028fa:	71bb      	strb	r3, [r7, #6]
 80028fc:	f7ff fe68 	bl	80025d0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	781a      	ldrb	r2, [r3, #0]
 8002904:	79b9      	ldrb	r1, [r7, #6]
 8002906:	79f8      	ldrb	r0, [r7, #7]
 8002908:	2301      	movs	r3, #1
 800290a:	9300      	str	r3, [sp, #0]
 800290c:	230c      	movs	r3, #12
 800290e:	f7ff fee1 	bl	80026d4 <OLED_ShowChar>
        x+=8;
 8002912:	79fb      	ldrb	r3, [r7, #7]
 8002914:	3308      	adds	r3, #8
 8002916:	71fb      	strb	r3, [r7, #7]
        p++;
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	3301      	adds	r3, #1
 800291c:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d1db      	bne.n	80028de <OLED_ShowString+0x12>
    }  
}	
 8002926:	bf00      	nop
 8002928:	bf00      	nop
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}

08002930 <OLED_Init>:
函数功能：初始化OLED
入口参数：无
返 回 值：无
**************************************************************************/ 
void OLED_Init(void)
{ 	 	 
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 8002936:	2200      	movs	r2, #0
 8002938:	2140      	movs	r1, #64	; 0x40
 800293a:	4851      	ldr	r0, [pc, #324]	; (8002a80 <OLED_Init+0x150>)
 800293c:	f002 fb84 	bl	8005048 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002940:	2001      	movs	r0, #1
 8002942:	f001 fa6f 	bl	8003e24 <HAL_Delay>
	OLED_RST_Set();   //OLED复位
 8002946:	2201      	movs	r2, #1
 8002948:	2140      	movs	r1, #64	; 0x40
 800294a:	484d      	ldr	r0, [pc, #308]	; (8002a80 <OLED_Init+0x150>)
 800294c:	f002 fb7c 	bl	8005048 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 8002950:	2100      	movs	r1, #0
 8002952:	20ae      	movs	r0, #174	; 0xae
 8002954:	f7ff fe12 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8002958:	2100      	movs	r1, #0
 800295a:	20d5      	movs	r0, #213	; 0xd5
 800295c:	f7ff fe0e 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 8002960:	2100      	movs	r1, #0
 8002962:	2050      	movs	r0, #80	; 0x50
 8002964:	f7ff fe0a 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8002968:	2100      	movs	r1, #0
 800296a:	20a8      	movs	r0, #168	; 0xa8
 800296c:	f7ff fe06 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
 8002970:	2100      	movs	r1, #0
 8002972:	203f      	movs	r0, #63	; 0x3f
 8002974:	f7ff fe02 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8002978:	2100      	movs	r1, #0
 800297a:	20d3      	movs	r0, #211	; 0xd3
 800297c:	f7ff fdfe 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 8002980:	2100      	movs	r1, #0
 8002982:	2000      	movs	r0, #0
 8002984:	f7ff fdfa 	bl	800257c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8002988:	2100      	movs	r1, #0
 800298a:	2040      	movs	r0, #64	; 0x40
 800298c:	f7ff fdf6 	bl	800257c <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 8002990:	2100      	movs	r1, #0
 8002992:	208d      	movs	r0, #141	; 0x8d
 8002994:	f7ff fdf2 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 8002998:	2100      	movs	r1, #0
 800299a:	2014      	movs	r0, #20
 800299c:	f7ff fdee 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 80029a0:	2100      	movs	r1, #0
 80029a2:	2020      	movs	r0, #32
 80029a4:	f7ff fdea 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 80029a8:	2100      	movs	r1, #0
 80029aa:	2002      	movs	r0, #2
 80029ac:	f7ff fde6 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 80029b0:	2100      	movs	r1, #0
 80029b2:	20a1      	movs	r0, #161	; 0xa1
 80029b4:	f7ff fde2 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 80029b8:	2100      	movs	r1, #0
 80029ba:	20c0      	movs	r0, #192	; 0xc0
 80029bc:	f7ff fdde 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 80029c0:	2100      	movs	r1, #0
 80029c2:	20da      	movs	r0, #218	; 0xda
 80029c4:	f7ff fdda 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 80029c8:	2100      	movs	r1, #0
 80029ca:	2012      	movs	r0, #18
 80029cc:	f7ff fdd6 	bl	800257c <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 80029d0:	2100      	movs	r1, #0
 80029d2:	2081      	movs	r0, #129	; 0x81
 80029d4:	f7ff fdd2 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 80029d8:	2100      	movs	r1, #0
 80029da:	20ef      	movs	r0, #239	; 0xef
 80029dc:	f7ff fdce 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 80029e0:	2100      	movs	r1, #0
 80029e2:	20d9      	movs	r0, #217	; 0xd9
 80029e4:	f7ff fdca 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80029e8:	2100      	movs	r1, #0
 80029ea:	20f1      	movs	r0, #241	; 0xf1
 80029ec:	f7ff fdc6 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 80029f0:	2100      	movs	r1, #0
 80029f2:	20db      	movs	r0, #219	; 0xdb
 80029f4:	f7ff fdc2 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80029f8:	2100      	movs	r1, #0
 80029fa:	2030      	movs	r0, #48	; 0x30
 80029fc:	f7ff fdbe 	bl	800257c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 8002a00:	2100      	movs	r1, #0
 8002a02:	20a4      	movs	r0, #164	; 0xa4
 8002a04:	f7ff fdba 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
 8002a08:	2100      	movs	r1, #0
 8002a0a:	20a6      	movs	r0, #166	; 0xa6
 8002a0c:	f7ff fdb6 	bl	800257c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
 8002a10:	2100      	movs	r1, #0
 8002a12:	20af      	movs	r0, #175	; 0xaf
 8002a14:	f7ff fdb2 	bl	800257c <OLED_WR_Byte>
	OLED_Clear();                //清屏
 8002a18:	f7ff fdda 	bl	80025d0 <OLED_Clear>
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	71fb      	strb	r3, [r7, #7]
 8002a20:	e026      	b.n	8002a70 <OLED_Init+0x140>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	3b50      	subs	r3, #80	; 0x50
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	2100      	movs	r1, #0
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	f7ff fda6 	bl	800257c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002a30:	2100      	movs	r1, #0
 8002a32:	2000      	movs	r0, #0
 8002a34:	f7ff fda2 	bl	800257c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8002a38:	2100      	movs	r1, #0
 8002a3a:	2010      	movs	r0, #16
 8002a3c:	f7ff fd9e 	bl	800257c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[i][n],OLED_DATA);
 8002a40:	2300      	movs	r3, #0
 8002a42:	71bb      	strb	r3, [r7, #6]
 8002a44:	e00d      	b.n	8002a62 <OLED_Init+0x132>
 8002a46:	79fa      	ldrb	r2, [r7, #7]
 8002a48:	79bb      	ldrb	r3, [r7, #6]
 8002a4a:	490e      	ldr	r1, [pc, #56]	; (8002a84 <OLED_Init+0x154>)
 8002a4c:	01d2      	lsls	r2, r2, #7
 8002a4e:	440a      	add	r2, r1
 8002a50:	4413      	add	r3, r2
 8002a52:	781b      	ldrb	r3, [r3, #0]
 8002a54:	2101      	movs	r1, #1
 8002a56:	4618      	mov	r0, r3
 8002a58:	f7ff fd90 	bl	800257c <OLED_WR_Byte>
 8002a5c:	79bb      	ldrb	r3, [r7, #6]
 8002a5e:	3301      	adds	r3, #1
 8002a60:	71bb      	strb	r3, [r7, #6]
 8002a62:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	daed      	bge.n	8002a46 <OLED_Init+0x116>
	for(i=0;i<8;i++)  
 8002a6a:	79fb      	ldrb	r3, [r7, #7]
 8002a6c:	3301      	adds	r3, #1
 8002a6e:	71fb      	strb	r3, [r7, #7]
 8002a70:	79fb      	ldrb	r3, [r7, #7]
 8002a72:	2b07      	cmp	r3, #7
 8002a74:	d9d5      	bls.n	8002a22 <OLED_Init+0xf2>
	}   
}  
 8002a76:	bf00      	nop
 8002a78:	bf00      	nop
 8002a7a:	3708      	adds	r7, #8
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	bd80      	pop	{r7, pc}
 8002a80:	40020400 	.word	0x40020400
 8002a84:	20000b10 	.word	0x20000b10

08002a88 <raspiInit>:
//0x5a 0xa5 Yaw Factor Throttle Factor Forward Factor Lateral Factor LED lock



void raspiInit(UART_HandleTypeDef *huart)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b082      	sub	sp, #8
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f042 0210 	orr.w	r2, r2, #16
 8002a9e:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 8002aa0:	220c      	movs	r2, #12
 8002aa2:	4904      	ldr	r1, [pc, #16]	; (8002ab4 <raspiInit+0x2c>)
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f004 fc27 	bl	80072f8 <HAL_UART_Receive_DMA>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	20000408 	.word	0x20000408

08002ab8 <raspiUpdate>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void raspiUpdate()
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
	short * date = (short *)(raspiBuffer + 2);
 8002abe:	4b30      	ldr	r3, [pc, #192]	; (8002b80 <raspiUpdate+0xc8>)
 8002ac0:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++)
 8002ac2:	2300      	movs	r3, #0
 8002ac4:	607b      	str	r3, [r7, #4]
 8002ac6:	e01c      	b.n	8002b02 <raspiUpdate+0x4a>
		raspich_float[i]=1.0*date[i]/0x7fff;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	683a      	ldr	r2, [r7, #0]
 8002ace:	4413      	add	r3, r2
 8002ad0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7fd fd25 	bl	8000524 <__aeabi_i2d>
 8002ada:	a327      	add	r3, pc, #156	; (adr r3, 8002b78 <raspiUpdate+0xc0>)
 8002adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae0:	f7fd feb4 	bl	800084c <__aeabi_ddiv>
 8002ae4:	4602      	mov	r2, r0
 8002ae6:	460b      	mov	r3, r1
 8002ae8:	4610      	mov	r0, r2
 8002aea:	4619      	mov	r1, r3
 8002aec:	f7fe f854 	bl	8000b98 <__aeabi_d2f>
 8002af0:	4602      	mov	r2, r0
 8002af2:	4924      	ldr	r1, [pc, #144]	; (8002b84 <raspiUpdate+0xcc>)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	009b      	lsls	r3, r3, #2
 8002af8:	440b      	add	r3, r1
 8002afa:	601a      	str	r2, [r3, #0]
	for(int i=0;i<4;i++)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	3301      	adds	r3, #1
 8002b00:	607b      	str	r3, [r7, #4]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2b03      	cmp	r3, #3
 8002b06:	dddf      	ble.n	8002ac8 <raspiUpdate+0x10>

    target_ver[2] = yaw + raspich_float[0]*180;
 8002b08:	4b1e      	ldr	r3, [pc, #120]	; (8002b84 <raspiUpdate+0xcc>)
 8002b0a:	edd3 7a00 	vldr	s15, [r3]
 8002b0e:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8002b88 <raspiUpdate+0xd0>
 8002b12:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002b16:	4b1d      	ldr	r3, [pc, #116]	; (8002b8c <raspiUpdate+0xd4>)
 8002b18:	edd3 7a00 	vldr	s15, [r3]
 8002b1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b20:	4b1b      	ldr	r3, [pc, #108]	; (8002b90 <raspiUpdate+0xd8>)
 8002b22:	edc3 7a02 	vstr	s15, [r3, #8]
    target_ver[3] = raspich_float[1];
 8002b26:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <raspiUpdate+0xcc>)
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	4a19      	ldr	r2, [pc, #100]	; (8002b90 <raspiUpdate+0xd8>)
 8002b2c:	60d3      	str	r3, [r2, #12]
    target_ver[4] = raspich_float[2];
 8002b2e:	4b15      	ldr	r3, [pc, #84]	; (8002b84 <raspiUpdate+0xcc>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	4a17      	ldr	r2, [pc, #92]	; (8002b90 <raspiUpdate+0xd8>)
 8002b34:	6113      	str	r3, [r2, #16]
    target_ver[5] = raspich_float[3];
 8002b36:	4b13      	ldr	r3, [pc, #76]	; (8002b84 <raspiUpdate+0xcc>)
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4a15      	ldr	r2, [pc, #84]	; (8002b90 <raspiUpdate+0xd8>)
 8002b3c:	6153      	str	r3, [r2, #20]
    if(raspiBuffer[10]==0)
 8002b3e:	4b15      	ldr	r3, [pc, #84]	; (8002b94 <raspiUpdate+0xdc>)
 8002b40:	7a9b      	ldrb	r3, [r3, #10]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d106      	bne.n	8002b54 <raspiUpdate+0x9c>
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002b46:	2201      	movs	r2, #1
 8002b48:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b4c:	4812      	ldr	r0, [pc, #72]	; (8002b98 <raspiUpdate+0xe0>)
 8002b4e:	f002 fa7b 	bl	8005048 <HAL_GPIO_WritePin>
 8002b52:	e005      	b.n	8002b60 <raspiUpdate+0xa8>
    else
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002b54:	2200      	movs	r2, #0
 8002b56:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b5a:	480f      	ldr	r0, [pc, #60]	; (8002b98 <raspiUpdate+0xe0>)
 8002b5c:	f002 fa74 	bl	8005048 <HAL_GPIO_WritePin>
    lock=raspiBuffer[11];
 8002b60:	4b0c      	ldr	r3, [pc, #48]	; (8002b94 <raspiUpdate+0xdc>)
 8002b62:	7adb      	ldrb	r3, [r3, #11]
 8002b64:	461a      	mov	r2, r3
 8002b66:	4b0d      	ldr	r3, [pc, #52]	; (8002b9c <raspiUpdate+0xe4>)
 8002b68:	601a      	str	r2, [r3, #0]

}
 8002b6a:	bf00      	nop
 8002b6c:	3708      	adds	r7, #8
 8002b6e:	46bd      	mov	sp, r7
 8002b70:	bd80      	pop	{r7, pc}
 8002b72:	bf00      	nop
 8002b74:	f3af 8000 	nop.w
 8002b78:	00000000 	.word	0x00000000
 8002b7c:	40dfffc0 	.word	0x40dfffc0
 8002b80:	2000040a 	.word	0x2000040a
 8002b84:	20000428 	.word	0x20000428
 8002b88:	43340000 	.word	0x43340000
 8002b8c:	200004fc 	.word	0x200004fc
 8002b90:	20000488 	.word	0x20000488
 8002b94:	20000408 	.word	0x20000408
 8002b98:	40020c00 	.word	0x40020c00
 8002b9c:	20000404 	.word	0x20000404

08002ba0 <raspierr>:
void raspierr(UART_HandleTypeDef *huart)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f004 fbd5 	bl	8007358 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 8002bae:	220c      	movs	r2, #12
 8002bb0:	4903      	ldr	r1, [pc, #12]	; (8002bc0 <raspierr+0x20>)
 8002bb2:	6878      	ldr	r0, [r7, #4]
 8002bb4:	f004 fba0 	bl	80072f8 <HAL_UART_Receive_DMA>
}
 8002bb8:	bf00      	nop
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}
 8002bc0:	20000408 	.word	0x20000408

08002bc4 <remoteInit>:
float val=0;
float yawa = 0;
extern UART_HandleTypeDef huart5;
extern UART_HandleTypeDef huart1;
void remoteInit(UART_HandleTypeDef *huart)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
    if(&huart1==huart)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a0f      	ldr	r2, [pc, #60]	; (8002c0c <remoteInit+0x48>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d106      	bne.n	8002be2 <remoteInit+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 8002bd4:	4b0e      	ldr	r3, [pc, #56]	; (8002c10 <remoteInit+0x4c>)
 8002bd6:	2219      	movs	r2, #25
 8002bd8:	4619      	mov	r1, r3
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f004 fb8c 	bl	80072f8 <HAL_UART_Receive_DMA>
 8002be0:	e008      	b.n	8002bf4 <remoteInit+0x30>
	}else if(&huart5==huart)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a0b      	ldr	r2, [pc, #44]	; (8002c14 <remoteInit+0x50>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d104      	bne.n	8002bf4 <remoteInit+0x30>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002bea:	2219      	movs	r2, #25
 8002bec:	490a      	ldr	r1, [pc, #40]	; (8002c18 <remoteInit+0x54>)
 8002bee:	6878      	ldr	r0, [r7, #4]
 8002bf0:	f004 fb82 	bl	80072f8 <HAL_UART_Receive_DMA>
	}
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	68da      	ldr	r2, [r3, #12]
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f042 0210 	orr.w	r2, r2, #16
 8002c02:	60da      	str	r2, [r3, #12]
}
 8002c04:	bf00      	nop
 8002c06:	3708      	adds	r7, #8
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	20000894 	.word	0x20000894
 8002c10:	20000448 	.word	0x20000448
 8002c14:	200007a8 	.word	0x200007a8
 8002c18:	20000438 	.word	0x20000438
 8002c1c:	00000000 	.word	0x00000000

08002c20 <remoteUpdate>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void remoteUpdate(uint8_t * remoteBuffer)
{
 8002c20:	b590      	push	{r4, r7, lr}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	6078      	str	r0, [r7, #4]
	float *dat = (float*)(remoteBuffer+4);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	3304      	adds	r3, #4
 8002c2c:	617b      	str	r3, [r7, #20]
	if(remoteBuffer[3]==0x00)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	3303      	adds	r3, #3
 8002c32:	781b      	ldrb	r3, [r3, #0]
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d108      	bne.n	8002c4a <remoteUpdate+0x2a>
	{
		ch_float[4]=dat[1];
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	4a70      	ldr	r2, [pc, #448]	; (8002e00 <remoteUpdate+0x1e0>)
 8002c3e:	6113      	str	r3, [r2, #16]
		ch_float[5]=dat[0];
 8002c40:	697b      	ldr	r3, [r7, #20]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	4a6e      	ldr	r2, [pc, #440]	; (8002e00 <remoteUpdate+0x1e0>)
 8002c46:	6153      	str	r3, [r2, #20]
 8002c48:	e08a      	b.n	8002d60 <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x01)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3303      	adds	r3, #3
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d108      	bne.n	8002c66 <remoteUpdate+0x46>
	{
		ch_float[0]=dat[0];
 8002c54:	697b      	ldr	r3, [r7, #20]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	4a69      	ldr	r2, [pc, #420]	; (8002e00 <remoteUpdate+0x1e0>)
 8002c5a:	6013      	str	r3, [r2, #0]
		ch_float[1]=dat[1];
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	4a67      	ldr	r2, [pc, #412]	; (8002e00 <remoteUpdate+0x1e0>)
 8002c62:	6053      	str	r3, [r2, #4]
 8002c64:	e07c      	b.n	8002d60 <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x02)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3303      	adds	r3, #3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b02      	cmp	r3, #2
 8002c6e:	d106      	bne.n	8002c7e <remoteUpdate+0x5e>
	{
		lock = remoteBuffer[7];
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	3307      	adds	r3, #7
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	461a      	mov	r2, r3
 8002c78:	4b62      	ldr	r3, [pc, #392]	; (8002e04 <remoteUpdate+0x1e4>)
 8002c7a:	601a      	str	r2, [r3, #0]
 8002c7c:	e070      	b.n	8002d60 <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x03)//通道选择
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	3303      	adds	r3, #3
 8002c82:	781b      	ldrb	r3, [r3, #0]
 8002c84:	2b03      	cmp	r3, #3
 8002c86:	d12e      	bne.n	8002ce6 <remoteUpdate+0xc6>
	{
		conf=dat[0];
 8002c88:	697b      	ldr	r3, [r7, #20]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a5e      	ldr	r2, [pc, #376]	; (8002e08 <remoteUpdate+0x1e8>)
 8002c8e:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8002c90:	4b5d      	ldr	r3, [pc, #372]	; (8002e08 <remoteUpdate+0x1e8>)
 8002c92:	edd3 7a00 	vldr	s15, [r3]
 8002c96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c9a:	ee17 3a90 	vmov	r3, s15
 8002c9e:	60fb      	str	r3, [r7, #12]
		val=pid_ver[i_conf/3][i_conf%3];
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	4a5a      	ldr	r2, [pc, #360]	; (8002e0c <remoteUpdate+0x1ec>)
 8002ca4:	fb82 1203 	smull	r1, r2, r2, r3
 8002ca8:	17db      	asrs	r3, r3, #31
 8002caa:	1ad0      	subs	r0, r2, r3
 8002cac:	68f9      	ldr	r1, [r7, #12]
 8002cae:	4b57      	ldr	r3, [pc, #348]	; (8002e0c <remoteUpdate+0x1ec>)
 8002cb0:	fb83 3201 	smull	r3, r2, r3, r1
 8002cb4:	17cb      	asrs	r3, r1, #31
 8002cb6:	1ad2      	subs	r2, r2, r3
 8002cb8:	4613      	mov	r3, r2
 8002cba:	005b      	lsls	r3, r3, #1
 8002cbc:	4413      	add	r3, r2
 8002cbe:	1aca      	subs	r2, r1, r3
 8002cc0:	4953      	ldr	r1, [pc, #332]	; (8002e10 <remoteUpdate+0x1f0>)
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	00db      	lsls	r3, r3, #3
 8002cc6:	1a1b      	subs	r3, r3, r0
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	440b      	add	r3, r1
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a50      	ldr	r2, [pc, #320]	; (8002e14 <remoteUpdate+0x1f4>)
 8002cd2:	6013      	str	r3, [r2, #0]
		frame.fdata[24]=conf;
 8002cd4:	4b4c      	ldr	r3, [pc, #304]	; (8002e08 <remoteUpdate+0x1e8>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a4f      	ldr	r2, [pc, #316]	; (8002e18 <remoteUpdate+0x1f8>)
 8002cda:	6613      	str	r3, [r2, #96]	; 0x60
		frame.fdata[25]=val;
 8002cdc:	4b4d      	ldr	r3, [pc, #308]	; (8002e14 <remoteUpdate+0x1f4>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4d      	ldr	r2, [pc, #308]	; (8002e18 <remoteUpdate+0x1f8>)
 8002ce2:	6653      	str	r3, [r2, #100]	; 0x64
 8002ce4:	e03c      	b.n	8002d60 <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x04)//通道值
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	3303      	adds	r3, #3
 8002cea:	781b      	ldrb	r3, [r3, #0]
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d12a      	bne.n	8002d46 <remoteUpdate+0x126>
	{
		val=dat[0];
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a47      	ldr	r2, [pc, #284]	; (8002e14 <remoteUpdate+0x1f4>)
 8002cf6:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8002cf8:	4b43      	ldr	r3, [pc, #268]	; (8002e08 <remoteUpdate+0x1e8>)
 8002cfa:	edd3 7a00 	vldr	s15, [r3]
 8002cfe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002d02:	ee17 3a90 	vmov	r3, s15
 8002d06:	613b      	str	r3, [r7, #16]
		pid_ver[i_conf/3][i_conf%3]=val;
 8002d08:	693b      	ldr	r3, [r7, #16]
 8002d0a:	4a40      	ldr	r2, [pc, #256]	; (8002e0c <remoteUpdate+0x1ec>)
 8002d0c:	fb82 1203 	smull	r1, r2, r2, r3
 8002d10:	17db      	asrs	r3, r3, #31
 8002d12:	1ad0      	subs	r0, r2, r3
 8002d14:	6939      	ldr	r1, [r7, #16]
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <remoteUpdate+0x1ec>)
 8002d18:	fb83 3201 	smull	r3, r2, r3, r1
 8002d1c:	17cb      	asrs	r3, r1, #31
 8002d1e:	1ad2      	subs	r2, r2, r3
 8002d20:	4613      	mov	r3, r2
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	4413      	add	r3, r2
 8002d26:	1aca      	subs	r2, r1, r3
 8002d28:	4b3a      	ldr	r3, [pc, #232]	; (8002e14 <remoteUpdate+0x1f4>)
 8002d2a:	6819      	ldr	r1, [r3, #0]
 8002d2c:	4c38      	ldr	r4, [pc, #224]	; (8002e10 <remoteUpdate+0x1f0>)
 8002d2e:	4603      	mov	r3, r0
 8002d30:	00db      	lsls	r3, r3, #3
 8002d32:	1a1b      	subs	r3, r3, r0
 8002d34:	4413      	add	r3, r2
 8002d36:	009b      	lsls	r3, r3, #2
 8002d38:	4423      	add	r3, r4
 8002d3a:	6019      	str	r1, [r3, #0]
		frame.fdata[25]=val;
 8002d3c:	4b35      	ldr	r3, [pc, #212]	; (8002e14 <remoteUpdate+0x1f4>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a35      	ldr	r2, [pc, #212]	; (8002e18 <remoteUpdate+0x1f8>)
 8002d42:	6653      	str	r3, [r2, #100]	; 0x64
 8002d44:	e00c      	b.n	8002d60 <remoteUpdate+0x140>
	}else if(remoteBuffer[3]==0x05)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	3303      	adds	r3, #3
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b05      	cmp	r3, #5
 8002d4e:	d107      	bne.n	8002d60 <remoteUpdate+0x140>
	{
		ch_float[2]=dat[0];
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	4a2a      	ldr	r2, [pc, #168]	; (8002e00 <remoteUpdate+0x1e0>)
 8002d56:	6093      	str	r3, [r2, #8]
		ch_float[3]=dat[1];
 8002d58:	697b      	ldr	r3, [r7, #20]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	4a28      	ldr	r2, [pc, #160]	; (8002e00 <remoteUpdate+0x1e0>)
 8002d5e:	60d3      	str	r3, [r2, #12]
	}
    target_ver[0] = ch_float[0]*30;
 8002d60:	4b27      	ldr	r3, [pc, #156]	; (8002e00 <remoteUpdate+0x1e0>)
 8002d62:	edd3 7a00 	vldr	s15, [r3]
 8002d66:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d6a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d6e:	4b2b      	ldr	r3, [pc, #172]	; (8002e1c <remoteUpdate+0x1fc>)
 8002d70:	edc3 7a00 	vstr	s15, [r3]
    target_ver[1] = ch_float[1]*30;
 8002d74:	4b22      	ldr	r3, [pc, #136]	; (8002e00 <remoteUpdate+0x1e0>)
 8002d76:	edd3 7a01 	vldr	s15, [r3, #4]
 8002d7a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d82:	4b26      	ldr	r3, [pc, #152]	; (8002e1c <remoteUpdate+0x1fc>)
 8002d84:	edc3 7a01 	vstr	s15, [r3, #4]
    yawa = 0.02*ch_float[2]*30;
 8002d88:	4b1d      	ldr	r3, [pc, #116]	; (8002e00 <remoteUpdate+0x1e0>)
 8002d8a:	689b      	ldr	r3, [r3, #8]
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	f7fd fbdb 	bl	8000548 <__aeabi_f2d>
 8002d92:	a319      	add	r3, pc, #100	; (adr r3, 8002df8 <remoteUpdate+0x1d8>)
 8002d94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d98:	f7fd fc2e 	bl	80005f8 <__aeabi_dmul>
 8002d9c:	4602      	mov	r2, r0
 8002d9e:	460b      	mov	r3, r1
 8002da0:	4610      	mov	r0, r2
 8002da2:	4619      	mov	r1, r3
 8002da4:	f04f 0200 	mov.w	r2, #0
 8002da8:	4b1d      	ldr	r3, [pc, #116]	; (8002e20 <remoteUpdate+0x200>)
 8002daa:	f7fd fc25 	bl	80005f8 <__aeabi_dmul>
 8002dae:	4602      	mov	r2, r0
 8002db0:	460b      	mov	r3, r1
 8002db2:	4610      	mov	r0, r2
 8002db4:	4619      	mov	r1, r3
 8002db6:	f7fd feef 	bl	8000b98 <__aeabi_d2f>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	4a19      	ldr	r2, [pc, #100]	; (8002e24 <remoteUpdate+0x204>)
 8002dbe:	6013      	str	r3, [r2, #0]
    target_ver[3] = ch_float[3];
 8002dc0:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <remoteUpdate+0x1e0>)
 8002dc2:	68db      	ldr	r3, [r3, #12]
 8002dc4:	4a15      	ldr	r2, [pc, #84]	; (8002e1c <remoteUpdate+0x1fc>)
 8002dc6:	60d3      	str	r3, [r2, #12]
    target_ver[4] = ch_float[4];
 8002dc8:	4b0d      	ldr	r3, [pc, #52]	; (8002e00 <remoteUpdate+0x1e0>)
 8002dca:	691b      	ldr	r3, [r3, #16]
 8002dcc:	4a13      	ldr	r2, [pc, #76]	; (8002e1c <remoteUpdate+0x1fc>)
 8002dce:	6113      	str	r3, [r2, #16]
    target_ver[5] = ch_float[5];
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <remoteUpdate+0x1e0>)
 8002dd2:	695b      	ldr	r3, [r3, #20]
 8002dd4:	4a11      	ldr	r2, [pc, #68]	; (8002e1c <remoteUpdate+0x1fc>)
 8002dd6:	6153      	str	r3, [r2, #20]

    frame.fdata[29]=target_ver[0];
 8002dd8:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <remoteUpdate+0x1fc>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a0e      	ldr	r2, [pc, #56]	; (8002e18 <remoteUpdate+0x1f8>)
 8002dde:	6753      	str	r3, [r2, #116]	; 0x74
    frame.fdata[30]=target_ver[1];
 8002de0:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <remoteUpdate+0x1fc>)
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	4a0c      	ldr	r2, [pc, #48]	; (8002e18 <remoteUpdate+0x1f8>)
 8002de6:	6793      	str	r3, [r2, #120]	; 0x78
    frame.fdata[31]=target_ver[2];
 8002de8:	4b0c      	ldr	r3, [pc, #48]	; (8002e1c <remoteUpdate+0x1fc>)
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	4a0a      	ldr	r2, [pc, #40]	; (8002e18 <remoteUpdate+0x1f8>)
 8002dee:	67d3      	str	r3, [r2, #124]	; 0x7c
}
 8002df0:	bf00      	nop
 8002df2:	371c      	adds	r7, #28
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd90      	pop	{r4, r7, pc}
 8002df8:	47ae147b 	.word	0x47ae147b
 8002dfc:	3f947ae1 	.word	0x3f947ae1
 8002e00:	20000458 	.word	0x20000458
 8002e04:	20000404 	.word	0x20000404
 8002e08:	20000470 	.word	0x20000470
 8002e0c:	55555556 	.word	0x55555556
 8002e10:	20000000 	.word	0x20000000
 8002e14:	20000474 	.word	0x20000474
 8002e18:	200000a8 	.word	0x200000a8
 8002e1c:	20000488 	.word	0x20000488
 8002e20:	403e0000 	.word	0x403e0000
 8002e24:	20000478 	.word	0x20000478

08002e28 <remoteerr>:
void remoteerr(UART_HandleTypeDef *huart)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b082      	sub	sp, #8
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
    //HAL_UART_AbortReceive(huart);
    if(&huart1==huart)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	4a0b      	ldr	r2, [pc, #44]	; (8002e60 <remoteerr+0x38>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d106      	bne.n	8002e46 <remoteerr+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 8002e38:	4b0a      	ldr	r3, [pc, #40]	; (8002e64 <remoteerr+0x3c>)
 8002e3a:	2219      	movs	r2, #25
 8002e3c:	4619      	mov	r1, r3
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f004 fa5a 	bl	80072f8 <HAL_UART_Receive_DMA>
	}else if(&huart5==huart)
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
	}
    //HAL_UART_Receive_DMA(huart, remoteBuffer, 16);
}
 8002e44:	e008      	b.n	8002e58 <remoteerr+0x30>
	}else if(&huart5==huart)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4a07      	ldr	r2, [pc, #28]	; (8002e68 <remoteerr+0x40>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d104      	bne.n	8002e58 <remoteerr+0x30>
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002e4e:	2219      	movs	r2, #25
 8002e50:	4906      	ldr	r1, [pc, #24]	; (8002e6c <remoteerr+0x44>)
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f004 fa50 	bl	80072f8 <HAL_UART_Receive_DMA>
}
 8002e58:	bf00      	nop
 8002e5a:	3708      	adds	r7, #8
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	bd80      	pop	{r7, pc}
 8002e60:	20000894 	.word	0x20000894
 8002e64:	20000448 	.word	0x20000448
 8002e68:	200007a8 	.word	0x200007a8
 8002e6c:	20000438 	.word	0x20000438

08002e70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b083      	sub	sp, #12
 8002e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e76:	2300      	movs	r3, #0
 8002e78:	607b      	str	r3, [r7, #4]
 8002e7a:	4b10      	ldr	r3, [pc, #64]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7e:	4a0f      	ldr	r2, [pc, #60]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e80:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e84:	6453      	str	r3, [r2, #68]	; 0x44
 8002e86:	4b0d      	ldr	r3, [pc, #52]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e8a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8e:	607b      	str	r3, [r7, #4]
 8002e90:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002e92:	2300      	movs	r3, #0
 8002e94:	603b      	str	r3, [r7, #0]
 8002e96:	4b09      	ldr	r3, [pc, #36]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e9a:	4a08      	ldr	r2, [pc, #32]	; (8002ebc <HAL_MspInit+0x4c>)
 8002e9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ea0:	6413      	str	r3, [r2, #64]	; 0x40
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_MspInit+0x4c>)
 8002ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ea6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002eaa:	603b      	str	r3, [r7, #0]
 8002eac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr
 8002eba:	bf00      	nop
 8002ebc:	40023800 	.word	0x40023800

08002ec0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b08a      	sub	sp, #40	; 0x28
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	2200      	movs	r2, #0
 8002ece:	601a      	str	r2, [r3, #0]
 8002ed0:	605a      	str	r2, [r3, #4]
 8002ed2:	609a      	str	r2, [r3, #8]
 8002ed4:	60da      	str	r2, [r3, #12]
 8002ed6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a17      	ldr	r2, [pc, #92]	; (8002f3c <HAL_ADC_MspInit+0x7c>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d127      	bne.n	8002f32 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
 8002ee6:	4b16      	ldr	r3, [pc, #88]	; (8002f40 <HAL_ADC_MspInit+0x80>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eea:	4a15      	ldr	r2, [pc, #84]	; (8002f40 <HAL_ADC_MspInit+0x80>)
 8002eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ef0:	6453      	str	r3, [r2, #68]	; 0x44
 8002ef2:	4b13      	ldr	r3, [pc, #76]	; (8002f40 <HAL_ADC_MspInit+0x80>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ef6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002efa:	613b      	str	r3, [r7, #16]
 8002efc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60fb      	str	r3, [r7, #12]
 8002f02:	4b0f      	ldr	r3, [pc, #60]	; (8002f40 <HAL_ADC_MspInit+0x80>)
 8002f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f06:	4a0e      	ldr	r2, [pc, #56]	; (8002f40 <HAL_ADC_MspInit+0x80>)
 8002f08:	f043 0301 	orr.w	r3, r3, #1
 8002f0c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f0e:	4b0c      	ldr	r3, [pc, #48]	; (8002f40 <HAL_ADC_MspInit+0x80>)
 8002f10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f12:	f003 0301 	and.w	r3, r3, #1
 8002f16:	60fb      	str	r3, [r7, #12]
 8002f18:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f1a:	2310      	movs	r3, #16
 8002f1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f1e:	2303      	movs	r3, #3
 8002f20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f22:	2300      	movs	r3, #0
 8002f24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f26:	f107 0314 	add.w	r3, r7, #20
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	4805      	ldr	r0, [pc, #20]	; (8002f44 <HAL_ADC_MspInit+0x84>)
 8002f2e:	f001 feef 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f32:	bf00      	nop
 8002f34:	3728      	adds	r7, #40	; 0x28
 8002f36:	46bd      	mov	sp, r7
 8002f38:	bd80      	pop	{r7, pc}
 8002f3a:	bf00      	nop
 8002f3c:	40012000 	.word	0x40012000
 8002f40:	40023800 	.word	0x40023800
 8002f44:	40020000 	.word	0x40020000

08002f48 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b08a      	sub	sp, #40	; 0x28
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f50:	f107 0314 	add.w	r3, r7, #20
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
 8002f58:	605a      	str	r2, [r3, #4]
 8002f5a:	609a      	str	r2, [r3, #8]
 8002f5c:	60da      	str	r2, [r3, #12]
 8002f5e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a28      	ldr	r2, [pc, #160]	; (8003008 <HAL_SPI_MspInit+0xc0>)
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d149      	bne.n	8002ffe <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
 8002f6e:	4b27      	ldr	r3, [pc, #156]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f72:	4a26      	ldr	r2, [pc, #152]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002f74:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002f78:	6453      	str	r3, [r2, #68]	; 0x44
 8002f7a:	4b24      	ldr	r3, [pc, #144]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002f7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f7e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f82:	613b      	str	r3, [r7, #16]
 8002f84:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f86:	2300      	movs	r3, #0
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	4b20      	ldr	r3, [pc, #128]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002f90:	f043 0301 	orr.w	r3, r3, #1
 8002f94:	6313      	str	r3, [r2, #48]	; 0x30
 8002f96:	4b1d      	ldr	r3, [pc, #116]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002f98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f9a:	f003 0301 	and.w	r3, r3, #1
 8002f9e:	60fb      	str	r3, [r7, #12]
 8002fa0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	60bb      	str	r3, [r7, #8]
 8002fa6:	4b19      	ldr	r3, [pc, #100]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002fac:	f043 0302 	orr.w	r3, r3, #2
 8002fb0:	6313      	str	r3, [r2, #48]	; 0x30
 8002fb2:	4b16      	ldr	r3, [pc, #88]	; (800300c <HAL_SPI_MspInit+0xc4>)
 8002fb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb6:	f003 0302 	and.w	r3, r3, #2
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002fbe:	2320      	movs	r3, #32
 8002fc0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fca:	2303      	movs	r3, #3
 8002fcc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fce:	2305      	movs	r3, #5
 8002fd0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 0314 	add.w	r3, r7, #20
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	480d      	ldr	r0, [pc, #52]	; (8003010 <HAL_SPI_MspInit+0xc8>)
 8002fda:	f001 fe99 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002fde:	2330      	movs	r3, #48	; 0x30
 8002fe0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe2:	2302      	movs	r3, #2
 8002fe4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fea:	2303      	movs	r3, #3
 8002fec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002fee:	2305      	movs	r3, #5
 8002ff0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff2:	f107 0314 	add.w	r3, r7, #20
 8002ff6:	4619      	mov	r1, r3
 8002ff8:	4806      	ldr	r0, [pc, #24]	; (8003014 <HAL_SPI_MspInit+0xcc>)
 8002ffa:	f001 fe89 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002ffe:	bf00      	nop
 8003000:	3728      	adds	r7, #40	; 0x28
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}
 8003006:	bf00      	nop
 8003008:	40013000 	.word	0x40013000
 800300c:	40023800 	.word	0x40023800
 8003010:	40020000 	.word	0x40020000
 8003014:	40020400 	.word	0x40020400

08003018 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b088      	sub	sp, #32
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	4a36      	ldr	r2, [pc, #216]	; (8003100 <HAL_TIM_Base_MspInit+0xe8>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d116      	bne.n	8003058 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800302a:	2300      	movs	r3, #0
 800302c:	61fb      	str	r3, [r7, #28]
 800302e:	4b35      	ldr	r3, [pc, #212]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 8003030:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003032:	4a34      	ldr	r2, [pc, #208]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	6453      	str	r3, [r2, #68]	; 0x44
 800303a:	4b32      	ldr	r3, [pc, #200]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 800303c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	61fb      	str	r3, [r7, #28]
 8003044:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8003046:	2200      	movs	r2, #0
 8003048:	2100      	movs	r1, #0
 800304a:	2019      	movs	r0, #25
 800304c:	f001 fa28 	bl	80044a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003050:	2019      	movs	r0, #25
 8003052:	f001 fa41 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003056:	e04e      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003060:	d10e      	bne.n	8003080 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	61bb      	str	r3, [r7, #24]
 8003066:	4b27      	ldr	r3, [pc, #156]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 8003068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800306a:	4a26      	ldr	r2, [pc, #152]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6413      	str	r3, [r2, #64]	; 0x40
 8003072:	4b24      	ldr	r3, [pc, #144]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 8003074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	61bb      	str	r3, [r7, #24]
 800307c:	69bb      	ldr	r3, [r7, #24]
}
 800307e:	e03a      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a20      	ldr	r2, [pc, #128]	; (8003108 <HAL_TIM_Base_MspInit+0xf0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d10e      	bne.n	80030a8 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800308a:	2300      	movs	r3, #0
 800308c:	617b      	str	r3, [r7, #20]
 800308e:	4b1d      	ldr	r3, [pc, #116]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 8003090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003092:	4a1c      	ldr	r2, [pc, #112]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 8003094:	f043 0302 	orr.w	r3, r3, #2
 8003098:	6413      	str	r3, [r2, #64]	; 0x40
 800309a:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	617b      	str	r3, [r7, #20]
 80030a4:	697b      	ldr	r3, [r7, #20]
}
 80030a6:	e026      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4a17      	ldr	r2, [pc, #92]	; (800310c <HAL_TIM_Base_MspInit+0xf4>)
 80030ae:	4293      	cmp	r3, r2
 80030b0:	d10e      	bne.n	80030d0 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030b2:	2300      	movs	r3, #0
 80030b4:	613b      	str	r3, [r7, #16]
 80030b6:	4b13      	ldr	r3, [pc, #76]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	4a12      	ldr	r2, [pc, #72]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 80030bc:	f043 0304 	orr.w	r3, r3, #4
 80030c0:	6413      	str	r3, [r2, #64]	; 0x40
 80030c2:	4b10      	ldr	r3, [pc, #64]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 80030c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c6:	f003 0304 	and.w	r3, r3, #4
 80030ca:	613b      	str	r3, [r7, #16]
 80030cc:	693b      	ldr	r3, [r7, #16]
}
 80030ce:	e012      	b.n	80030f6 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a0e      	ldr	r2, [pc, #56]	; (8003110 <HAL_TIM_Base_MspInit+0xf8>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10d      	bne.n	80030f6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	60fb      	str	r3, [r7, #12]
 80030de:	4b09      	ldr	r3, [pc, #36]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a08      	ldr	r2, [pc, #32]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 80030e4:	f043 0302 	orr.w	r3, r3, #2
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b06      	ldr	r3, [pc, #24]	; (8003104 <HAL_TIM_Base_MspInit+0xec>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	60fb      	str	r3, [r7, #12]
 80030f4:	68fb      	ldr	r3, [r7, #12]
}
 80030f6:	bf00      	nop
 80030f8:	3720      	adds	r7, #32
 80030fa:	46bd      	mov	sp, r7
 80030fc:	bd80      	pop	{r7, pc}
 80030fe:	bf00      	nop
 8003100:	40010000 	.word	0x40010000
 8003104:	40023800 	.word	0x40023800
 8003108:	40000400 	.word	0x40000400
 800310c:	40000800 	.word	0x40000800
 8003110:	40010400 	.word	0x40010400

08003114 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8003114:	b580      	push	{r7, lr}
 8003116:	b08a      	sub	sp, #40	; 0x28
 8003118:	af00      	add	r7, sp, #0
 800311a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800311c:	f107 0314 	add.w	r3, r7, #20
 8003120:	2200      	movs	r2, #0
 8003122:	601a      	str	r2, [r3, #0]
 8003124:	605a      	str	r2, [r3, #4]
 8003126:	609a      	str	r2, [r3, #8]
 8003128:	60da      	str	r2, [r3, #12]
 800312a:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM5)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a23      	ldr	r2, [pc, #140]	; (80031c0 <HAL_TIM_PWM_MspInit+0xac>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d12c      	bne.n	8003190 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8003136:	2300      	movs	r3, #0
 8003138:	613b      	str	r3, [r7, #16]
 800313a:	4b22      	ldr	r3, [pc, #136]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 800313c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313e:	4a21      	ldr	r2, [pc, #132]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 8003140:	f043 0308 	orr.w	r3, r3, #8
 8003144:	6413      	str	r3, [r2, #64]	; 0x40
 8003146:	4b1f      	ldr	r3, [pc, #124]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	613b      	str	r3, [r7, #16]
 8003150:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003152:	2300      	movs	r3, #0
 8003154:	60fb      	str	r3, [r7, #12]
 8003156:	4b1b      	ldr	r3, [pc, #108]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 8003158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800315a:	4a1a      	ldr	r2, [pc, #104]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 800315c:	f043 0301 	orr.w	r3, r3, #1
 8003160:	6313      	str	r3, [r2, #48]	; 0x30
 8003162:	4b18      	ldr	r3, [pc, #96]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 8003164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800316e:	2303      	movs	r3, #3
 8003170:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003172:	2302      	movs	r3, #2
 8003174:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800317a:	2300      	movs	r3, #0
 800317c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800317e:	2302      	movs	r3, #2
 8003180:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003182:	f107 0314 	add.w	r3, r7, #20
 8003186:	4619      	mov	r1, r3
 8003188:	480f      	ldr	r0, [pc, #60]	; (80031c8 <HAL_TIM_PWM_MspInit+0xb4>)
 800318a:	f001 fdc1 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800318e:	e012      	b.n	80031b6 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM12)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4a0d      	ldr	r2, [pc, #52]	; (80031cc <HAL_TIM_PWM_MspInit+0xb8>)
 8003196:	4293      	cmp	r3, r2
 8003198:	d10d      	bne.n	80031b6 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800319a:	2300      	movs	r3, #0
 800319c:	60bb      	str	r3, [r7, #8]
 800319e:	4b09      	ldr	r3, [pc, #36]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a2:	4a08      	ldr	r2, [pc, #32]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 80031a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031a8:	6413      	str	r3, [r2, #64]	; 0x40
 80031aa:	4b06      	ldr	r3, [pc, #24]	; (80031c4 <HAL_TIM_PWM_MspInit+0xb0>)
 80031ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b2:	60bb      	str	r3, [r7, #8]
 80031b4:	68bb      	ldr	r3, [r7, #8]
}
 80031b6:	bf00      	nop
 80031b8:	3728      	adds	r7, #40	; 0x28
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40000c00 	.word	0x40000c00
 80031c4:	40023800 	.word	0x40023800
 80031c8:	40020000 	.word	0x40020000
 80031cc:	40001800 	.word	0x40001800

080031d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b08e      	sub	sp, #56	; 0x38
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80031dc:	2200      	movs	r2, #0
 80031de:	601a      	str	r2, [r3, #0]
 80031e0:	605a      	str	r2, [r3, #4]
 80031e2:	609a      	str	r2, [r3, #8]
 80031e4:	60da      	str	r2, [r3, #12]
 80031e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4a6a      	ldr	r2, [pc, #424]	; (8003398 <HAL_TIM_MspPostInit+0x1c8>)
 80031ee:	4293      	cmp	r3, r2
 80031f0:	d13c      	bne.n	800326c <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031f2:	2300      	movs	r3, #0
 80031f4:	623b      	str	r3, [r7, #32]
 80031f6:	4b69      	ldr	r3, [pc, #420]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	4a68      	ldr	r2, [pc, #416]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 80031fc:	f043 0301 	orr.w	r3, r3, #1
 8003200:	6313      	str	r3, [r2, #48]	; 0x30
 8003202:	4b66      	ldr	r3, [pc, #408]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	623b      	str	r3, [r7, #32]
 800320c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800320e:	2300      	movs	r3, #0
 8003210:	61fb      	str	r3, [r7, #28]
 8003212:	4b62      	ldr	r3, [pc, #392]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003216:	4a61      	ldr	r2, [pc, #388]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003218:	f043 0302 	orr.w	r3, r3, #2
 800321c:	6313      	str	r3, [r2, #48]	; 0x30
 800321e:	4b5f      	ldr	r3, [pc, #380]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003222:	f003 0302 	and.w	r3, r3, #2
 8003226:	61fb      	str	r3, [r7, #28]
 8003228:	69fb      	ldr	r3, [r7, #28]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800322a:	23c0      	movs	r3, #192	; 0xc0
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800322e:	2302      	movs	r3, #2
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003232:	2300      	movs	r3, #0
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003236:	2300      	movs	r3, #0
 8003238:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800323a:	2302      	movs	r3, #2
 800323c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800323e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003242:	4619      	mov	r1, r3
 8003244:	4856      	ldr	r0, [pc, #344]	; (80033a0 <HAL_TIM_MspPostInit+0x1d0>)
 8003246:	f001 fd63 	bl	8004d10 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800324a:	2303      	movs	r3, #3
 800324c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800324e:	2302      	movs	r3, #2
 8003250:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003252:	2300      	movs	r3, #0
 8003254:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003256:	2300      	movs	r3, #0
 8003258:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800325a:	2302      	movs	r3, #2
 800325c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800325e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003262:	4619      	mov	r1, r3
 8003264:	484f      	ldr	r0, [pc, #316]	; (80033a4 <HAL_TIM_MspPostInit+0x1d4>)
 8003266:	f001 fd53 	bl	8004d10 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 800326a:	e091      	b.n	8003390 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4a4d      	ldr	r2, [pc, #308]	; (80033a8 <HAL_TIM_MspPostInit+0x1d8>)
 8003272:	4293      	cmp	r3, r2
 8003274:	d11f      	bne.n	80032b6 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	61bb      	str	r3, [r7, #24]
 800327a:	4b48      	ldr	r3, [pc, #288]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	4a47      	ldr	r2, [pc, #284]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003280:	f043 0308 	orr.w	r3, r3, #8
 8003284:	6313      	str	r3, [r2, #48]	; 0x30
 8003286:	4b45      	ldr	r3, [pc, #276]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003288:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	61bb      	str	r3, [r7, #24]
 8003290:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8003292:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8003296:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003298:	2302      	movs	r3, #2
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800329c:	2300      	movs	r3, #0
 800329e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032a0:	2300      	movs	r3, #0
 80032a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032a4:	2302      	movs	r3, #2
 80032a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032ac:	4619      	mov	r1, r3
 80032ae:	483f      	ldr	r0, [pc, #252]	; (80033ac <HAL_TIM_MspPostInit+0x1dc>)
 80032b0:	f001 fd2e 	bl	8004d10 <HAL_GPIO_Init>
}
 80032b4:	e06c      	b.n	8003390 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a3d      	ldr	r2, [pc, #244]	; (80033b0 <HAL_TIM_MspPostInit+0x1e0>)
 80032bc:	4293      	cmp	r3, r2
 80032be:	d11e      	bne.n	80032fe <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032c0:	2300      	movs	r3, #0
 80032c2:	617b      	str	r3, [r7, #20]
 80032c4:	4b35      	ldr	r3, [pc, #212]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 80032c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c8:	4a34      	ldr	r2, [pc, #208]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 80032ca:	f043 0301 	orr.w	r3, r3, #1
 80032ce:	6313      	str	r3, [r2, #48]	; 0x30
 80032d0:	4b32      	ldr	r3, [pc, #200]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032d4:	f003 0301 	and.w	r3, r3, #1
 80032d8:	617b      	str	r3, [r7, #20]
 80032da:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80032dc:	230c      	movs	r3, #12
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032e0:	2302      	movs	r3, #2
 80032e2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032e4:	2300      	movs	r3, #0
 80032e6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032e8:	2300      	movs	r3, #0
 80032ea:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80032ec:	2302      	movs	r3, #2
 80032ee:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032f4:	4619      	mov	r1, r3
 80032f6:	482a      	ldr	r0, [pc, #168]	; (80033a0 <HAL_TIM_MspPostInit+0x1d0>)
 80032f8:	f001 fd0a 	bl	8004d10 <HAL_GPIO_Init>
}
 80032fc:	e048      	b.n	8003390 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	4a2c      	ldr	r2, [pc, #176]	; (80033b4 <HAL_TIM_MspPostInit+0x1e4>)
 8003304:	4293      	cmp	r3, r2
 8003306:	d11f      	bne.n	8003348 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003308:	2300      	movs	r3, #0
 800330a:	613b      	str	r3, [r7, #16]
 800330c:	4b23      	ldr	r3, [pc, #140]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 800330e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003310:	4a22      	ldr	r2, [pc, #136]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003312:	f043 0304 	orr.w	r3, r3, #4
 8003316:	6313      	str	r3, [r2, #48]	; 0x30
 8003318:	4b20      	ldr	r3, [pc, #128]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 800331a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	613b      	str	r3, [r7, #16]
 8003322:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8003324:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003328:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800332a:	2302      	movs	r3, #2
 800332c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800332e:	2300      	movs	r3, #0
 8003330:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003332:	2300      	movs	r3, #0
 8003334:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8003336:	2303      	movs	r3, #3
 8003338:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800333a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800333e:	4619      	mov	r1, r3
 8003340:	481d      	ldr	r0, [pc, #116]	; (80033b8 <HAL_TIM_MspPostInit+0x1e8>)
 8003342:	f001 fce5 	bl	8004d10 <HAL_GPIO_Init>
}
 8003346:	e023      	b.n	8003390 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1b      	ldr	r2, [pc, #108]	; (80033bc <HAL_TIM_MspPostInit+0x1ec>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d11e      	bne.n	8003390 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003352:	2300      	movs	r3, #0
 8003354:	60fb      	str	r3, [r7, #12]
 8003356:	4b11      	ldr	r3, [pc, #68]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800335a:	4a10      	ldr	r2, [pc, #64]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 800335c:	f043 0302 	orr.w	r3, r3, #2
 8003360:	6313      	str	r3, [r2, #48]	; 0x30
 8003362:	4b0e      	ldr	r3, [pc, #56]	; (800339c <HAL_TIM_MspPostInit+0x1cc>)
 8003364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800336e:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8003372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003374:	2302      	movs	r3, #2
 8003376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003378:	2300      	movs	r3, #0
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800337c:	2300      	movs	r3, #0
 800337e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8003380:	2309      	movs	r3, #9
 8003382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003388:	4619      	mov	r1, r3
 800338a:	4806      	ldr	r0, [pc, #24]	; (80033a4 <HAL_TIM_MspPostInit+0x1d4>)
 800338c:	f001 fcc0 	bl	8004d10 <HAL_GPIO_Init>
}
 8003390:	bf00      	nop
 8003392:	3738      	adds	r7, #56	; 0x38
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40000400 	.word	0x40000400
 800339c:	40023800 	.word	0x40023800
 80033a0:	40020000 	.word	0x40020000
 80033a4:	40020400 	.word	0x40020400
 80033a8:	40000800 	.word	0x40000800
 80033ac:	40020c00 	.word	0x40020c00
 80033b0:	40000c00 	.word	0x40000c00
 80033b4:	40010400 	.word	0x40010400
 80033b8:	40020800 	.word	0x40020800
 80033bc:	40001800 	.word	0x40001800

080033c0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b092      	sub	sp, #72	; 0x48
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033cc:	2200      	movs	r2, #0
 80033ce:	601a      	str	r2, [r3, #0]
 80033d0:	605a      	str	r2, [r3, #4]
 80033d2:	609a      	str	r2, [r3, #8]
 80033d4:	60da      	str	r2, [r3, #12]
 80033d6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	4a78      	ldr	r2, [pc, #480]	; (80035c0 <HAL_UART_MspInit+0x200>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d164      	bne.n	80034ac <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80033e2:	2300      	movs	r3, #0
 80033e4:	633b      	str	r3, [r7, #48]	; 0x30
 80033e6:	4b77      	ldr	r3, [pc, #476]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4a76      	ldr	r2, [pc, #472]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80033ec:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80033f0:	6413      	str	r3, [r2, #64]	; 0x40
 80033f2:	4b74      	ldr	r3, [pc, #464]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80033f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033f6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80033fa:	633b      	str	r3, [r7, #48]	; 0x30
 80033fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80033fe:	2300      	movs	r3, #0
 8003400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003402:	4b70      	ldr	r3, [pc, #448]	; (80035c4 <HAL_UART_MspInit+0x204>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	4a6f      	ldr	r2, [pc, #444]	; (80035c4 <HAL_UART_MspInit+0x204>)
 8003408:	f043 0304 	orr.w	r3, r3, #4
 800340c:	6313      	str	r3, [r2, #48]	; 0x30
 800340e:	4b6d      	ldr	r3, [pc, #436]	; (80035c4 <HAL_UART_MspInit+0x204>)
 8003410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003412:	f003 0304 	and.w	r3, r3, #4
 8003416:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800341a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800341e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003420:	2302      	movs	r3, #2
 8003422:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003424:	2301      	movs	r3, #1
 8003426:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003428:	2303      	movs	r3, #3
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800342c:	2308      	movs	r3, #8
 800342e:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003430:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003434:	4619      	mov	r1, r3
 8003436:	4864      	ldr	r0, [pc, #400]	; (80035c8 <HAL_UART_MspInit+0x208>)
 8003438:	f001 fc6a 	bl	8004d10 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 800343c:	4b63      	ldr	r3, [pc, #396]	; (80035cc <HAL_UART_MspInit+0x20c>)
 800343e:	4a64      	ldr	r2, [pc, #400]	; (80035d0 <HAL_UART_MspInit+0x210>)
 8003440:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8003442:	4b62      	ldr	r3, [pc, #392]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003444:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003448:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800344a:	4b60      	ldr	r3, [pc, #384]	; (80035cc <HAL_UART_MspInit+0x20c>)
 800344c:	2200      	movs	r2, #0
 800344e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003450:	4b5e      	ldr	r3, [pc, #376]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003452:	2200      	movs	r2, #0
 8003454:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003456:	4b5d      	ldr	r3, [pc, #372]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003458:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800345c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800345e:	4b5b      	ldr	r3, [pc, #364]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003460:	2200      	movs	r2, #0
 8003462:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003464:	4b59      	ldr	r3, [pc, #356]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003466:	2200      	movs	r2, #0
 8003468:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 800346a:	4b58      	ldr	r3, [pc, #352]	; (80035cc <HAL_UART_MspInit+0x20c>)
 800346c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003470:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003472:	4b56      	ldr	r3, [pc, #344]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003474:	2200      	movs	r2, #0
 8003476:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003478:	4b54      	ldr	r3, [pc, #336]	; (80035cc <HAL_UART_MspInit+0x20c>)
 800347a:	2200      	movs	r2, #0
 800347c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800347e:	4853      	ldr	r0, [pc, #332]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003480:	f001 f838 	bl	80044f4 <HAL_DMA_Init>
 8003484:	4603      	mov	r3, r0
 8003486:	2b00      	cmp	r3, #0
 8003488:	d001      	beq.n	800348e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800348a:	f7fe ff0f 	bl	80022ac <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a4e      	ldr	r2, [pc, #312]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003492:	639a      	str	r2, [r3, #56]	; 0x38
 8003494:	4a4d      	ldr	r2, [pc, #308]	; (80035cc <HAL_UART_MspInit+0x20c>)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800349a:	2200      	movs	r2, #0
 800349c:	2100      	movs	r1, #0
 800349e:	2034      	movs	r0, #52	; 0x34
 80034a0:	f000 fffe 	bl	80044a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80034a4:	2034      	movs	r0, #52	; 0x34
 80034a6:	f001 f817 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034aa:	e1d7      	b.n	800385c <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==UART5)
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	4a48      	ldr	r2, [pc, #288]	; (80035d4 <HAL_UART_MspInit+0x214>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	f040 8096 	bne.w	80035e4 <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 80034b8:	2300      	movs	r3, #0
 80034ba:	62bb      	str	r3, [r7, #40]	; 0x28
 80034bc:	4b41      	ldr	r3, [pc, #260]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c0:	4a40      	ldr	r2, [pc, #256]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034c6:	6413      	str	r3, [r2, #64]	; 0x40
 80034c8:	4b3e      	ldr	r3, [pc, #248]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034cc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80034d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80034d4:	2300      	movs	r3, #0
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
 80034d8:	4b3a      	ldr	r3, [pc, #232]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034dc:	4a39      	ldr	r2, [pc, #228]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034de:	f043 0304 	orr.w	r3, r3, #4
 80034e2:	6313      	str	r3, [r2, #48]	; 0x30
 80034e4:	4b37      	ldr	r3, [pc, #220]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	627b      	str	r3, [r7, #36]	; 0x24
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80034f0:	2300      	movs	r3, #0
 80034f2:	623b      	str	r3, [r7, #32]
 80034f4:	4b33      	ldr	r3, [pc, #204]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034f8:	4a32      	ldr	r2, [pc, #200]	; (80035c4 <HAL_UART_MspInit+0x204>)
 80034fa:	f043 0308 	orr.w	r3, r3, #8
 80034fe:	6313      	str	r3, [r2, #48]	; 0x30
 8003500:	4b30      	ldr	r3, [pc, #192]	; (80035c4 <HAL_UART_MspInit+0x204>)
 8003502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003504:	f003 0308 	and.w	r3, r3, #8
 8003508:	623b      	str	r3, [r7, #32]
 800350a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800350c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003510:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003512:	2302      	movs	r3, #2
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003516:	2301      	movs	r3, #1
 8003518:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800351a:	2303      	movs	r3, #3
 800351c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800351e:	2308      	movs	r3, #8
 8003520:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003522:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003526:	4619      	mov	r1, r3
 8003528:	4827      	ldr	r0, [pc, #156]	; (80035c8 <HAL_UART_MspInit+0x208>)
 800352a:	f001 fbf1 	bl	8004d10 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800352e:	2304      	movs	r3, #4
 8003530:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003532:	2302      	movs	r3, #2
 8003534:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003536:	2301      	movs	r3, #1
 8003538:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800353a:	2303      	movs	r3, #3
 800353c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800353e:	2308      	movs	r3, #8
 8003540:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003542:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003546:	4619      	mov	r1, r3
 8003548:	4823      	ldr	r0, [pc, #140]	; (80035d8 <HAL_UART_MspInit+0x218>)
 800354a:	f001 fbe1 	bl	8004d10 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800354e:	4b23      	ldr	r3, [pc, #140]	; (80035dc <HAL_UART_MspInit+0x21c>)
 8003550:	4a23      	ldr	r2, [pc, #140]	; (80035e0 <HAL_UART_MspInit+0x220>)
 8003552:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003554:	4b21      	ldr	r3, [pc, #132]	; (80035dc <HAL_UART_MspInit+0x21c>)
 8003556:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800355a:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800355c:	4b1f      	ldr	r3, [pc, #124]	; (80035dc <HAL_UART_MspInit+0x21c>)
 800355e:	2200      	movs	r2, #0
 8003560:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003562:	4b1e      	ldr	r3, [pc, #120]	; (80035dc <HAL_UART_MspInit+0x21c>)
 8003564:	2200      	movs	r2, #0
 8003566:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003568:	4b1c      	ldr	r3, [pc, #112]	; (80035dc <HAL_UART_MspInit+0x21c>)
 800356a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800356e:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003570:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <HAL_UART_MspInit+0x21c>)
 8003572:	2200      	movs	r2, #0
 8003574:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003576:	4b19      	ldr	r3, [pc, #100]	; (80035dc <HAL_UART_MspInit+0x21c>)
 8003578:	2200      	movs	r2, #0
 800357a:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 800357c:	4b17      	ldr	r3, [pc, #92]	; (80035dc <HAL_UART_MspInit+0x21c>)
 800357e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003582:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003584:	4b15      	ldr	r3, [pc, #84]	; (80035dc <HAL_UART_MspInit+0x21c>)
 8003586:	2200      	movs	r2, #0
 8003588:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <HAL_UART_MspInit+0x21c>)
 800358c:	2200      	movs	r2, #0
 800358e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8003590:	4812      	ldr	r0, [pc, #72]	; (80035dc <HAL_UART_MspInit+0x21c>)
 8003592:	f000 ffaf 	bl	80044f4 <HAL_DMA_Init>
 8003596:	4603      	mov	r3, r0
 8003598:	2b00      	cmp	r3, #0
 800359a:	d001      	beq.n	80035a0 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800359c:	f7fe fe86 	bl	80022ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a0e      	ldr	r2, [pc, #56]	; (80035dc <HAL_UART_MspInit+0x21c>)
 80035a4:	639a      	str	r2, [r3, #56]	; 0x38
 80035a6:	4a0d      	ldr	r2, [pc, #52]	; (80035dc <HAL_UART_MspInit+0x21c>)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80035ac:	2200      	movs	r2, #0
 80035ae:	2100      	movs	r1, #0
 80035b0:	2035      	movs	r0, #53	; 0x35
 80035b2:	f000 ff75 	bl	80044a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035b6:	2035      	movs	r0, #53	; 0x35
 80035b8:	f000 ff8e 	bl	80044d8 <HAL_NVIC_EnableIRQ>
}
 80035bc:	e14e      	b.n	800385c <HAL_UART_MspInit+0x49c>
 80035be:	bf00      	nop
 80035c0:	40004c00 	.word	0x40004c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	40020800 	.word	0x40020800
 80035cc:	20000524 	.word	0x20000524
 80035d0:	40026040 	.word	0x40026040
 80035d4:	40005000 	.word	0x40005000
 80035d8:	40020c00 	.word	0x40020c00
 80035dc:	20000a48 	.word	0x20000a48
 80035e0:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a9e      	ldr	r2, [pc, #632]	; (8003864 <HAL_UART_MspInit+0x4a4>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d164      	bne.n	80036b8 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	61fb      	str	r3, [r7, #28]
 80035f2:	4b9d      	ldr	r3, [pc, #628]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80035f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035f6:	4a9c      	ldr	r2, [pc, #624]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80035f8:	f043 0310 	orr.w	r3, r3, #16
 80035fc:	6453      	str	r3, [r2, #68]	; 0x44
 80035fe:	4b9a      	ldr	r3, [pc, #616]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 8003600:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003602:	f003 0310 	and.w	r3, r3, #16
 8003606:	61fb      	str	r3, [r7, #28]
 8003608:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800360a:	2300      	movs	r3, #0
 800360c:	61bb      	str	r3, [r7, #24]
 800360e:	4b96      	ldr	r3, [pc, #600]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003612:	4a95      	ldr	r2, [pc, #596]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 8003614:	f043 0301 	orr.w	r3, r3, #1
 8003618:	6313      	str	r3, [r2, #48]	; 0x30
 800361a:	4b93      	ldr	r3, [pc, #588]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 800361c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800361e:	f003 0301 	and.w	r3, r3, #1
 8003622:	61bb      	str	r3, [r7, #24]
 8003624:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003626:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800362a:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800362c:	2302      	movs	r3, #2
 800362e:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003630:	2300      	movs	r3, #0
 8003632:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003634:	2303      	movs	r3, #3
 8003636:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003638:	2307      	movs	r3, #7
 800363a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800363c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003640:	4619      	mov	r1, r3
 8003642:	488a      	ldr	r0, [pc, #552]	; (800386c <HAL_UART_MspInit+0x4ac>)
 8003644:	f001 fb64 	bl	8004d10 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003648:	4b89      	ldr	r3, [pc, #548]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 800364a:	4a8a      	ldr	r2, [pc, #552]	; (8003874 <HAL_UART_MspInit+0x4b4>)
 800364c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800364e:	4b88      	ldr	r3, [pc, #544]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 8003650:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003654:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003656:	4b86      	ldr	r3, [pc, #536]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 8003658:	2200      	movs	r2, #0
 800365a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800365c:	4b84      	ldr	r3, [pc, #528]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 800365e:	2200      	movs	r2, #0
 8003660:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003662:	4b83      	ldr	r3, [pc, #524]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 8003664:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003668:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800366a:	4b81      	ldr	r3, [pc, #516]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 800366c:	2200      	movs	r2, #0
 800366e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003670:	4b7f      	ldr	r3, [pc, #508]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 8003672:	2200      	movs	r2, #0
 8003674:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003676:	4b7e      	ldr	r3, [pc, #504]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 8003678:	f44f 7280 	mov.w	r2, #256	; 0x100
 800367c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800367e:	4b7c      	ldr	r3, [pc, #496]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 8003680:	2200      	movs	r2, #0
 8003682:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003684:	4b7a      	ldr	r3, [pc, #488]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 8003686:	2200      	movs	r2, #0
 8003688:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800368a:	4879      	ldr	r0, [pc, #484]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 800368c:	f000 ff32 	bl	80044f4 <HAL_DMA_Init>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d001      	beq.n	800369a <HAL_UART_MspInit+0x2da>
      Error_Handler();
 8003696:	f7fe fe09 	bl	80022ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	4a74      	ldr	r2, [pc, #464]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 800369e:	639a      	str	r2, [r3, #56]	; 0x38
 80036a0:	4a73      	ldr	r2, [pc, #460]	; (8003870 <HAL_UART_MspInit+0x4b0>)
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036a6:	2200      	movs	r2, #0
 80036a8:	2100      	movs	r1, #0
 80036aa:	2025      	movs	r0, #37	; 0x25
 80036ac:	f000 fef8 	bl	80044a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036b0:	2025      	movs	r0, #37	; 0x25
 80036b2:	f000 ff11 	bl	80044d8 <HAL_NVIC_EnableIRQ>
}
 80036b6:	e0d1      	b.n	800385c <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART2)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	4a6e      	ldr	r2, [pc, #440]	; (8003878 <HAL_UART_MspInit+0x4b8>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d163      	bne.n	800378a <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b68      	ldr	r3, [pc, #416]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80036c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ca:	4a67      	ldr	r2, [pc, #412]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80036cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036d0:	6413      	str	r3, [r2, #64]	; 0x40
 80036d2:	4b65      	ldr	r3, [pc, #404]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80036d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036da:	617b      	str	r3, [r7, #20]
 80036dc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80036de:	2300      	movs	r3, #0
 80036e0:	613b      	str	r3, [r7, #16]
 80036e2:	4b61      	ldr	r3, [pc, #388]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80036e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036e6:	4a60      	ldr	r2, [pc, #384]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80036e8:	f043 0308 	orr.w	r3, r3, #8
 80036ec:	6313      	str	r3, [r2, #48]	; 0x30
 80036ee:	4b5e      	ldr	r3, [pc, #376]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80036f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f2:	f003 0308 	and.w	r3, r3, #8
 80036f6:	613b      	str	r3, [r7, #16]
 80036f8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80036fa:	2360      	movs	r3, #96	; 0x60
 80036fc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036fe:	2302      	movs	r3, #2
 8003700:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003702:	2300      	movs	r3, #0
 8003704:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003706:	2303      	movs	r3, #3
 8003708:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800370a:	2307      	movs	r3, #7
 800370c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800370e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003712:	4619      	mov	r1, r3
 8003714:	4859      	ldr	r0, [pc, #356]	; (800387c <HAL_UART_MspInit+0x4bc>)
 8003716:	f001 fafb 	bl	8004d10 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800371a:	4b59      	ldr	r3, [pc, #356]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 800371c:	4a59      	ldr	r2, [pc, #356]	; (8003884 <HAL_UART_MspInit+0x4c4>)
 800371e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003720:	4b57      	ldr	r3, [pc, #348]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003722:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003726:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003728:	4b55      	ldr	r3, [pc, #340]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 800372a:	2200      	movs	r2, #0
 800372c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800372e:	4b54      	ldr	r3, [pc, #336]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003730:	2200      	movs	r2, #0
 8003732:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003734:	4b52      	ldr	r3, [pc, #328]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003736:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800373a:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800373c:	4b50      	ldr	r3, [pc, #320]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 800373e:	2200      	movs	r2, #0
 8003740:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003742:	4b4f      	ldr	r3, [pc, #316]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003744:	2200      	movs	r2, #0
 8003746:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003748:	4b4d      	ldr	r3, [pc, #308]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 800374a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800374e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003750:	4b4b      	ldr	r3, [pc, #300]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003752:	2200      	movs	r2, #0
 8003754:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003756:	4b4a      	ldr	r3, [pc, #296]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003758:	2200      	movs	r2, #0
 800375a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800375c:	4848      	ldr	r0, [pc, #288]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 800375e:	f000 fec9 	bl	80044f4 <HAL_DMA_Init>
 8003762:	4603      	mov	r3, r0
 8003764:	2b00      	cmp	r3, #0
 8003766:	d001      	beq.n	800376c <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 8003768:	f7fe fda0 	bl	80022ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a44      	ldr	r2, [pc, #272]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003770:	639a      	str	r2, [r3, #56]	; 0x38
 8003772:	4a43      	ldr	r2, [pc, #268]	; (8003880 <HAL_UART_MspInit+0x4c0>)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003778:	2200      	movs	r2, #0
 800377a:	2100      	movs	r1, #0
 800377c:	2026      	movs	r0, #38	; 0x26
 800377e:	f000 fe8f 	bl	80044a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003782:	2026      	movs	r0, #38	; 0x26
 8003784:	f000 fea8 	bl	80044d8 <HAL_NVIC_EnableIRQ>
}
 8003788:	e068      	b.n	800385c <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART3)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4a3e      	ldr	r2, [pc, #248]	; (8003888 <HAL_UART_MspInit+0x4c8>)
 8003790:	4293      	cmp	r3, r2
 8003792:	d163      	bne.n	800385c <HAL_UART_MspInit+0x49c>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003794:	2300      	movs	r3, #0
 8003796:	60fb      	str	r3, [r7, #12]
 8003798:	4b33      	ldr	r3, [pc, #204]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 800379a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800379c:	4a32      	ldr	r2, [pc, #200]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 800379e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037a2:	6413      	str	r3, [r2, #64]	; 0x40
 80037a4:	4b30      	ldr	r3, [pc, #192]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80037a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037ac:	60fb      	str	r3, [r7, #12]
 80037ae:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037b0:	2300      	movs	r3, #0
 80037b2:	60bb      	str	r3, [r7, #8]
 80037b4:	4b2c      	ldr	r3, [pc, #176]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	4a2b      	ldr	r2, [pc, #172]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80037ba:	f043 0302 	orr.w	r3, r3, #2
 80037be:	6313      	str	r3, [r2, #48]	; 0x30
 80037c0:	4b29      	ldr	r3, [pc, #164]	; (8003868 <HAL_UART_MspInit+0x4a8>)
 80037c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037c4:	f003 0302 	and.w	r3, r3, #2
 80037c8:	60bb      	str	r3, [r7, #8]
 80037ca:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80037cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80037d0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037d2:	2302      	movs	r3, #2
 80037d4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80037da:	2303      	movs	r3, #3
 80037dc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80037de:	2307      	movs	r3, #7
 80037e0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80037e2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80037e6:	4619      	mov	r1, r3
 80037e8:	4828      	ldr	r0, [pc, #160]	; (800388c <HAL_UART_MspInit+0x4cc>)
 80037ea:	f001 fa91 	bl	8004d10 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 80037ee:	4b28      	ldr	r3, [pc, #160]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 80037f0:	4a28      	ldr	r2, [pc, #160]	; (8003894 <HAL_UART_MspInit+0x4d4>)
 80037f2:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 80037f4:	4b26      	ldr	r3, [pc, #152]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 80037f6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037fa:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80037fc:	4b24      	ldr	r3, [pc, #144]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 80037fe:	2200      	movs	r2, #0
 8003800:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003802:	4b23      	ldr	r3, [pc, #140]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 8003804:	2200      	movs	r2, #0
 8003806:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 800380a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800380e:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003810:	4b1f      	ldr	r3, [pc, #124]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 8003812:	2200      	movs	r2, #0
 8003814:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003816:	4b1e      	ldr	r3, [pc, #120]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 8003818:	2200      	movs	r2, #0
 800381a:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 800381c:	4b1c      	ldr	r3, [pc, #112]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 800381e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003822:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003824:	4b1a      	ldr	r3, [pc, #104]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 8003826:	2200      	movs	r2, #0
 8003828:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800382a:	4b19      	ldr	r3, [pc, #100]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 800382c:	2200      	movs	r2, #0
 800382e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003830:	4817      	ldr	r0, [pc, #92]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 8003832:	f000 fe5f 	bl	80044f4 <HAL_DMA_Init>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_UART_MspInit+0x480>
      Error_Handler();
 800383c:	f7fe fd36 	bl	80022ac <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4a13      	ldr	r2, [pc, #76]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 8003844:	639a      	str	r2, [r3, #56]	; 0x38
 8003846:	4a12      	ldr	r2, [pc, #72]	; (8003890 <HAL_UART_MspInit+0x4d0>)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800384c:	2200      	movs	r2, #0
 800384e:	2100      	movs	r1, #0
 8003850:	2027      	movs	r0, #39	; 0x27
 8003852:	f000 fe25 	bl	80044a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003856:	2027      	movs	r0, #39	; 0x27
 8003858:	f000 fe3e 	bl	80044d8 <HAL_NVIC_EnableIRQ>
}
 800385c:	bf00      	nop
 800385e:	3748      	adds	r7, #72	; 0x48
 8003860:	46bd      	mov	sp, r7
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40011000 	.word	0x40011000
 8003868:	40023800 	.word	0x40023800
 800386c:	40020000 	.word	0x40020000
 8003870:	20000834 	.word	0x20000834
 8003874:	40026440 	.word	0x40026440
 8003878:	40004400 	.word	0x40004400
 800387c:	40020c00 	.word	0x40020c00
 8003880:	20000584 	.word	0x20000584
 8003884:	40026088 	.word	0x40026088
 8003888:	40004800 	.word	0x40004800
 800388c:	40020400 	.word	0x40020400
 8003890:	20000674 	.word	0x20000674
 8003894:	40026028 	.word	0x40026028

08003898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b08c      	sub	sp, #48	; 0x30
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038a0:	2300      	movs	r3, #0
 80038a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038a4:	2300      	movs	r3, #0
 80038a6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80038a8:	2200      	movs	r2, #0
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	2037      	movs	r0, #55	; 0x37
 80038ae:	f000 fdf7 	bl	80044a0 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038b2:	2037      	movs	r0, #55	; 0x37
 80038b4:	f000 fe10 	bl	80044d8 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80038b8:	2300      	movs	r3, #0
 80038ba:	60fb      	str	r3, [r7, #12]
 80038bc:	4b1f      	ldr	r3, [pc, #124]	; (800393c <HAL_InitTick+0xa4>)
 80038be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c0:	4a1e      	ldr	r2, [pc, #120]	; (800393c <HAL_InitTick+0xa4>)
 80038c2:	f043 0320 	orr.w	r3, r3, #32
 80038c6:	6413      	str	r3, [r2, #64]	; 0x40
 80038c8:	4b1c      	ldr	r3, [pc, #112]	; (800393c <HAL_InitTick+0xa4>)
 80038ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038cc:	f003 0320 	and.w	r3, r3, #32
 80038d0:	60fb      	str	r3, [r7, #12]
 80038d2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80038d4:	f107 0210 	add.w	r2, r7, #16
 80038d8:	f107 0314 	add.w	r3, r7, #20
 80038dc:	4611      	mov	r1, r2
 80038de:	4618      	mov	r0, r3
 80038e0:	f002 f840 	bl	8005964 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80038e4:	f002 f816 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 80038e8:	4603      	mov	r3, r0
 80038ea:	005b      	lsls	r3, r3, #1
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80038ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f0:	4a13      	ldr	r2, [pc, #76]	; (8003940 <HAL_InitTick+0xa8>)
 80038f2:	fba2 2303 	umull	r2, r3, r2, r3
 80038f6:	0c9b      	lsrs	r3, r3, #18
 80038f8:	3b01      	subs	r3, #1
 80038fa:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 80038fc:	4b11      	ldr	r3, [pc, #68]	; (8003944 <HAL_InitTick+0xac>)
 80038fe:	4a12      	ldr	r2, [pc, #72]	; (8003948 <HAL_InitTick+0xb0>)
 8003900:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8003902:	4b10      	ldr	r3, [pc, #64]	; (8003944 <HAL_InitTick+0xac>)
 8003904:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003908:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_InitTick+0xac>)
 800390c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800390e:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003910:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_InitTick+0xac>)
 8003912:	2200      	movs	r2, #0
 8003914:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003916:	4b0b      	ldr	r3, [pc, #44]	; (8003944 <HAL_InitTick+0xac>)
 8003918:	2200      	movs	r2, #0
 800391a:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 800391c:	4809      	ldr	r0, [pc, #36]	; (8003944 <HAL_InitTick+0xac>)
 800391e:	f002 fae3 	bl	8005ee8 <HAL_TIM_Base_Init>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d104      	bne.n	8003932 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003928:	4806      	ldr	r0, [pc, #24]	; (8003944 <HAL_InitTick+0xac>)
 800392a:	f002 fb95 	bl	8006058 <HAL_TIM_Base_Start_IT>
 800392e:	4603      	mov	r3, r0
 8003930:	e000      	b.n	8003934 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
}
 8003934:	4618      	mov	r0, r3
 8003936:	3730      	adds	r7, #48	; 0x30
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40023800 	.word	0x40023800
 8003940:	431bde83 	.word	0x431bde83
 8003944:	20000f10 	.word	0x20000f10
 8003948:	40001400 	.word	0x40001400

0800394c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800394c:	b480      	push	{r7}
 800394e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003950:	e7fe      	b.n	8003950 <NMI_Handler+0x4>

08003952 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003952:	b480      	push	{r7}
 8003954:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003956:	e7fe      	b.n	8003956 <HardFault_Handler+0x4>

08003958 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003958:	b480      	push	{r7}
 800395a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800395c:	e7fe      	b.n	800395c <MemManage_Handler+0x4>

0800395e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800395e:	b480      	push	{r7}
 8003960:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003962:	e7fe      	b.n	8003962 <BusFault_Handler+0x4>

08003964 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003968:	e7fe      	b.n	8003968 <UsageFault_Handler+0x4>

0800396a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800396a:	b480      	push	{r7}
 800396c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr

08003978 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003978:	b480      	push	{r7}
 800397a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800397c:	bf00      	nop
 800397e:	46bd      	mov	sp, r7
 8003980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003984:	4770      	bx	lr

08003986 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003986:	b480      	push	{r7}
 8003988:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800398a:	bf00      	nop
 800398c:	46bd      	mov	sp, r7
 800398e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003992:	4770      	bx	lr

08003994 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003994:	b480      	push	{r7}
 8003996:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003998:	bf00      	nop
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr
	...

080039a4 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80039a8:	4802      	ldr	r0, [pc, #8]	; (80039b4 <DMA1_Stream0_IRQHandler+0x10>)
 80039aa:	f000 ff3b 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039ae:	bf00      	nop
 80039b0:	bd80      	pop	{r7, pc}
 80039b2:	bf00      	nop
 80039b4:	20000a48 	.word	0x20000a48

080039b8 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039bc:	4802      	ldr	r0, [pc, #8]	; (80039c8 <DMA1_Stream1_IRQHandler+0x10>)
 80039be:	f000 ff31 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	bd80      	pop	{r7, pc}
 80039c6:	bf00      	nop
 80039c8:	20000674 	.word	0x20000674

080039cc <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80039cc:	b580      	push	{r7, lr}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 80039d0:	4802      	ldr	r0, [pc, #8]	; (80039dc <DMA1_Stream2_IRQHandler+0x10>)
 80039d2:	f000 ff27 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000524 	.word	0x20000524

080039e0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80039e4:	4802      	ldr	r0, [pc, #8]	; (80039f0 <DMA1_Stream5_IRQHandler+0x10>)
 80039e6:	f000 ff1d 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80039ea:	bf00      	nop
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	20000584 	.word	0x20000584

080039f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80039f8:	4802      	ldr	r0, [pc, #8]	; (8003a04 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80039fa:	f002 fcb5 	bl	8006368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80039fe:	bf00      	nop
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	200008d8 	.word	0x200008d8

08003a08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0

	        	remoteUpdate(remoteBuffer + 16);
	        }
	    }*/
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <USART1_IRQHandler+0x10>)
 8003a0e:	f003 fcff 	bl	8007410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	20000894 	.word	0x20000894

08003a1c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b082      	sub	sp, #8
 8003a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern unsigned char ch110[82];
    if(USART2->SR & 0x10)
 8003a22:	4b12      	ldr	r3, [pc, #72]	; (8003a6c <USART2_IRQHandler+0x50>)
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f003 0310 	and.w	r3, r3, #16
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d016      	beq.n	8003a5c <USART2_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8003a2e:	2300      	movs	r3, #0
 8003a30:	607b      	str	r3, [r7, #4]
 8003a32:	4b0f      	ldr	r3, [pc, #60]	; (8003a70 <USART2_IRQHandler+0x54>)
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	607b      	str	r3, [r7, #4]
 8003a3a:	4b0d      	ldr	r3, [pc, #52]	; (8003a70 <USART2_IRQHandler+0x54>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	607b      	str	r3, [r7, #4]
 8003a42:	687b      	ldr	r3, [r7, #4]
        if(ch110[0] != 0x5a)
 8003a44:	4b0b      	ldr	r3, [pc, #44]	; (8003a74 <USART2_IRQHandler+0x58>)
 8003a46:	781b      	ldrb	r3, [r3, #0]
 8003a48:	2b5a      	cmp	r3, #90	; 0x5a
 8003a4a:	d007      	beq.n	8003a5c <USART2_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart2);
 8003a4c:	4808      	ldr	r0, [pc, #32]	; (8003a70 <USART2_IRQHandler+0x54>)
 8003a4e:	f003 fc83 	bl	8007358 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart2, ch110, 82);
 8003a52:	2252      	movs	r2, #82	; 0x52
 8003a54:	4907      	ldr	r1, [pc, #28]	; (8003a74 <USART2_IRQHandler+0x58>)
 8003a56:	4806      	ldr	r0, [pc, #24]	; (8003a70 <USART2_IRQHandler+0x54>)
 8003a58:	f003 fc4e 	bl	80072f8 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a5c:	4804      	ldr	r0, [pc, #16]	; (8003a70 <USART2_IRQHandler+0x54>)
 8003a5e:	f003 fcd7 	bl	8007410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a62:	bf00      	nop
 8003a64:	3708      	adds	r7, #8
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop
 8003a6c:	40004400 	.word	0x40004400
 8003a70:	20000a04 	.word	0x20000a04
 8003a74:	200004a8 	.word	0x200004a8

08003a78 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003a78:	b580      	push	{r7, lr}
 8003a7a:	b082      	sub	sp, #8
 8003a7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

    extern unsigned char deepSensorBuff[20];
    if(USART3->SR & 0x10)
 8003a7e:	4b15      	ldr	r3, [pc, #84]	; (8003ad4 <USART3_IRQHandler+0x5c>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f003 0310 	and.w	r3, r3, #16
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d01d      	beq.n	8003ac6 <USART3_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8003a8a:	2300      	movs	r3, #0
 8003a8c:	607b      	str	r3, [r7, #4]
 8003a8e:	4b12      	ldr	r3, [pc, #72]	; (8003ad8 <USART3_IRQHandler+0x60>)
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	607b      	str	r3, [r7, #4]
 8003a96:	4b10      	ldr	r3, [pc, #64]	; (8003ad8 <USART3_IRQHandler+0x60>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	685b      	ldr	r3, [r3, #4]
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart3);
 8003aa0:	480d      	ldr	r0, [pc, #52]	; (8003ad8 <USART3_IRQHandler+0x60>)
 8003aa2:	f003 fc59 	bl	8007358 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart3, deepSensorBuff, 20);
 8003aa6:	2214      	movs	r2, #20
 8003aa8:	490c      	ldr	r1, [pc, #48]	; (8003adc <USART3_IRQHandler+0x64>)
 8003aaa:	480b      	ldr	r0, [pc, #44]	; (8003ad8 <USART3_IRQHandler+0x60>)
 8003aac:	f003 fc24 	bl	80072f8 <HAL_UART_Receive_DMA>
        if (0x54 == deepSensorBuff[0]&&0x3D == deepSensorBuff[1])
 8003ab0:	4b0a      	ldr	r3, [pc, #40]	; (8003adc <USART3_IRQHandler+0x64>)
 8003ab2:	781b      	ldrb	r3, [r3, #0]
 8003ab4:	2b54      	cmp	r3, #84	; 0x54
 8003ab6:	d106      	bne.n	8003ac6 <USART3_IRQHandler+0x4e>
 8003ab8:	4b08      	ldr	r3, [pc, #32]	; (8003adc <USART3_IRQHandler+0x64>)
 8003aba:	785b      	ldrb	r3, [r3, #1]
 8003abc:	2b3d      	cmp	r3, #61	; 0x3d
 8003abe:	d102      	bne.n	8003ac6 <USART3_IRQHandler+0x4e>
        {
        	void deepSensorUpdate(uint8_t * deepSensorBuff);

        	deepSensorUpdate(deepSensorBuff);
 8003ac0:	4806      	ldr	r0, [pc, #24]	; (8003adc <USART3_IRQHandler+0x64>)
 8003ac2:	f7fd fc61 	bl	8001388 <deepSensorUpdate>
        }
    }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003ac6:	4804      	ldr	r0, [pc, #16]	; (8003ad8 <USART3_IRQHandler+0x60>)
 8003ac8:	f003 fca2 	bl	8007410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003acc:	bf00      	nop
 8003ace:	3708      	adds	r7, #8
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}
 8003ad4:	40004800 	.word	0x40004800
 8003ad8:	200006d4 	.word	0x200006d4
 8003adc:	20000510 	.word	0x20000510

08003ae0 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b082      	sub	sp, #8
 8003ae4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
    extern unsigned char raspiBuffer[82];
    if(UART4->SR & 0x10)
 8003ae6:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <UART4_IRQHandler+0x50>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f003 0310 	and.w	r3, r3, #16
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d016      	beq.n	8003b20 <UART4_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8003af2:	2300      	movs	r3, #0
 8003af4:	607b      	str	r3, [r7, #4]
 8003af6:	4b0f      	ldr	r3, [pc, #60]	; (8003b34 <UART4_IRQHandler+0x54>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	607b      	str	r3, [r7, #4]
 8003afe:	4b0d      	ldr	r3, [pc, #52]	; (8003b34 <UART4_IRQHandler+0x54>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	607b      	str	r3, [r7, #4]
 8003b06:	687b      	ldr	r3, [r7, #4]
        if(raspiBuffer[0] != 0x5a)
 8003b08:	4b0b      	ldr	r3, [pc, #44]	; (8003b38 <UART4_IRQHandler+0x58>)
 8003b0a:	781b      	ldrb	r3, [r3, #0]
 8003b0c:	2b5a      	cmp	r3, #90	; 0x5a
 8003b0e:	d007      	beq.n	8003b20 <UART4_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart4);
 8003b10:	4808      	ldr	r0, [pc, #32]	; (8003b34 <UART4_IRQHandler+0x54>)
 8003b12:	f003 fc21 	bl	8007358 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart4, raspiBuffer, 12);
 8003b16:	220c      	movs	r2, #12
 8003b18:	4907      	ldr	r1, [pc, #28]	; (8003b38 <UART4_IRQHandler+0x58>)
 8003b1a:	4806      	ldr	r0, [pc, #24]	; (8003b34 <UART4_IRQHandler+0x54>)
 8003b1c:	f003 fbec 	bl	80072f8 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b20:	4804      	ldr	r0, [pc, #16]	; (8003b34 <UART4_IRQHandler+0x54>)
 8003b22:	f003 fc75 	bl	8007410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b26:	bf00      	nop
 8003b28:	3708      	adds	r7, #8
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	40004c00 	.word	0x40004c00
 8003b34:	20000920 	.word	0x20000920
 8003b38:	20000408 	.word	0x20000408

08003b3c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

    extern unsigned char remoteBuffer[32];
    if(UART5->SR & 0x10)
 8003b42:	4b15      	ldr	r3, [pc, #84]	; (8003b98 <UART5_IRQHandler+0x5c>)
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	f003 0310 	and.w	r3, r3, #16
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d01d      	beq.n	8003b8a <UART5_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8003b4e:	2300      	movs	r3, #0
 8003b50:	607b      	str	r3, [r7, #4]
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <UART5_IRQHandler+0x60>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	607b      	str	r3, [r7, #4]
 8003b5a:	4b10      	ldr	r3, [pc, #64]	; (8003b9c <UART5_IRQHandler+0x60>)
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart5);
 8003b64:	480d      	ldr	r0, [pc, #52]	; (8003b9c <UART5_IRQHandler+0x60>)
 8003b66:	f003 fbf7 	bl	8007358 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart5, remoteBuffer, 25);
 8003b6a:	2219      	movs	r2, #25
 8003b6c:	490c      	ldr	r1, [pc, #48]	; (8003ba0 <UART5_IRQHandler+0x64>)
 8003b6e:	480b      	ldr	r0, [pc, #44]	; (8003b9c <UART5_IRQHandler+0x60>)
 8003b70:	f003 fbc2 	bl	80072f8 <HAL_UART_Receive_DMA>
        if (0x5a == remoteBuffer[0]&&0xa5 == remoteBuffer[1])
 8003b74:	4b0a      	ldr	r3, [pc, #40]	; (8003ba0 <UART5_IRQHandler+0x64>)
 8003b76:	781b      	ldrb	r3, [r3, #0]
 8003b78:	2b5a      	cmp	r3, #90	; 0x5a
 8003b7a:	d106      	bne.n	8003b8a <UART5_IRQHandler+0x4e>
 8003b7c:	4b08      	ldr	r3, [pc, #32]	; (8003ba0 <UART5_IRQHandler+0x64>)
 8003b7e:	785b      	ldrb	r3, [r3, #1]
 8003b80:	2ba5      	cmp	r3, #165	; 0xa5
 8003b82:	d102      	bne.n	8003b8a <UART5_IRQHandler+0x4e>
        {
        	void remoteUpdate(uint8_t * remoteBuffer);

        	remoteUpdate(remoteBuffer);
 8003b84:	4806      	ldr	r0, [pc, #24]	; (8003ba0 <UART5_IRQHandler+0x64>)
 8003b86:	f7ff f84b 	bl	8002c20 <remoteUpdate>
        }
    }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003b8a:	4804      	ldr	r0, [pc, #16]	; (8003b9c <UART5_IRQHandler+0x60>)
 8003b8c:	f003 fc40 	bl	8007410 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003b90:	bf00      	nop
 8003b92:	3708      	adds	r7, #8
 8003b94:	46bd      	mov	sp, r7
 8003b96:	bd80      	pop	{r7, pc}
 8003b98:	40005000 	.word	0x40005000
 8003b9c:	200007a8 	.word	0x200007a8
 8003ba0:	20000438 	.word	0x20000438

08003ba4 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003ba8:	4802      	ldr	r0, [pc, #8]	; (8003bb4 <TIM7_IRQHandler+0x10>)
 8003baa:	f002 fbdd 	bl	8006368 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000f10 	.word	0x20000f10

08003bb8 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003bbc:	4802      	ldr	r0, [pc, #8]	; (8003bc8 <DMA2_Stream2_IRQHandler+0x10>)
 8003bbe:	f000 fe31 	bl	8004824 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003bc2:	bf00      	nop
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	20000834 	.word	0x20000834

08003bcc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	af00      	add	r7, sp, #0
	return 1;
 8003bd0:	2301      	movs	r3, #1
}
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <_kill>:

int _kill(int pid, int sig)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
 8003be4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003be6:	f004 fa5b 	bl	80080a0 <__errno>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2216      	movs	r2, #22
 8003bee:	601a      	str	r2, [r3, #0]
	return -1;
 8003bf0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003bf4:	4618      	mov	r0, r3
 8003bf6:	3708      	adds	r7, #8
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <_exit>:

void _exit (int status)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c04:	f04f 31ff 	mov.w	r1, #4294967295
 8003c08:	6878      	ldr	r0, [r7, #4]
 8003c0a:	f7ff ffe7 	bl	8003bdc <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c0e:	e7fe      	b.n	8003c0e <_exit+0x12>

08003c10 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
 8003c20:	e00a      	b.n	8003c38 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c22:	f3af 8000 	nop.w
 8003c26:	4601      	mov	r1, r0
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	1c5a      	adds	r2, r3, #1
 8003c2c:	60ba      	str	r2, [r7, #8]
 8003c2e:	b2ca      	uxtb	r2, r1
 8003c30:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c32:	697b      	ldr	r3, [r7, #20]
 8003c34:	3301      	adds	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	429a      	cmp	r2, r3
 8003c3e:	dbf0      	blt.n	8003c22 <_read+0x12>
	}

return len;
 8003c40:	687b      	ldr	r3, [r7, #4]
}
 8003c42:	4618      	mov	r0, r3
 8003c44:	3718      	adds	r7, #24
 8003c46:	46bd      	mov	sp, r7
 8003c48:	bd80      	pop	{r7, pc}

08003c4a <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c4a:	b480      	push	{r7}
 8003c4c:	b083      	sub	sp, #12
 8003c4e:	af00      	add	r7, sp, #0
 8003c50:	6078      	str	r0, [r7, #4]
	return -1;
 8003c52:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c56:	4618      	mov	r0, r3
 8003c58:	370c      	adds	r7, #12
 8003c5a:	46bd      	mov	sp, r7
 8003c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c60:	4770      	bx	lr

08003c62 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c62:	b480      	push	{r7}
 8003c64:	b083      	sub	sp, #12
 8003c66:	af00      	add	r7, sp, #0
 8003c68:	6078      	str	r0, [r7, #4]
 8003c6a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003c72:	605a      	str	r2, [r3, #4]
	return 0;
 8003c74:	2300      	movs	r3, #0
}
 8003c76:	4618      	mov	r0, r3
 8003c78:	370c      	adds	r7, #12
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c80:	4770      	bx	lr

08003c82 <_isatty>:

int _isatty(int file)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	return 1;
 8003c8a:	2301      	movs	r3, #1
}
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	b085      	sub	sp, #20
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	60f8      	str	r0, [r7, #12]
 8003ca0:	60b9      	str	r1, [r7, #8]
 8003ca2:	607a      	str	r2, [r7, #4]
	return 0;
 8003ca4:	2300      	movs	r3, #0
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
	...

08003cb4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cbc:	4a14      	ldr	r2, [pc, #80]	; (8003d10 <_sbrk+0x5c>)
 8003cbe:	4b15      	ldr	r3, [pc, #84]	; (8003d14 <_sbrk+0x60>)
 8003cc0:	1ad3      	subs	r3, r2, r3
 8003cc2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003cc8:	4b13      	ldr	r3, [pc, #76]	; (8003d18 <_sbrk+0x64>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d102      	bne.n	8003cd6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003cd0:	4b11      	ldr	r3, [pc, #68]	; (8003d18 <_sbrk+0x64>)
 8003cd2:	4a12      	ldr	r2, [pc, #72]	; (8003d1c <_sbrk+0x68>)
 8003cd4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003cd6:	4b10      	ldr	r3, [pc, #64]	; (8003d18 <_sbrk+0x64>)
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	4413      	add	r3, r2
 8003cde:	693a      	ldr	r2, [r7, #16]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d207      	bcs.n	8003cf4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ce4:	f004 f9dc 	bl	80080a0 <__errno>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	220c      	movs	r2, #12
 8003cec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003cee:	f04f 33ff 	mov.w	r3, #4294967295
 8003cf2:	e009      	b.n	8003d08 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003cf4:	4b08      	ldr	r3, [pc, #32]	; (8003d18 <_sbrk+0x64>)
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003cfa:	4b07      	ldr	r3, [pc, #28]	; (8003d18 <_sbrk+0x64>)
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	4413      	add	r3, r2
 8003d02:	4a05      	ldr	r2, [pc, #20]	; (8003d18 <_sbrk+0x64>)
 8003d04:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d06:	68fb      	ldr	r3, [r7, #12]
}
 8003d08:	4618      	mov	r0, r3
 8003d0a:	3718      	adds	r7, #24
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	bd80      	pop	{r7, pc}
 8003d10:	20020000 	.word	0x20020000
 8003d14:	00000400 	.word	0x00000400
 8003d18:	2000047c 	.word	0x2000047c
 8003d1c:	20000f70 	.word	0x20000f70

08003d20 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d20:	b480      	push	{r7}
 8003d22:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d24:	4b08      	ldr	r3, [pc, #32]	; (8003d48 <SystemInit+0x28>)
 8003d26:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d2a:	4a07      	ldr	r2, [pc, #28]	; (8003d48 <SystemInit+0x28>)
 8003d2c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d30:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d34:	4b04      	ldr	r3, [pc, #16]	; (8003d48 <SystemInit+0x28>)
 8003d36:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d3a:	609a      	str	r2, [r3, #8]
#endif
}
 8003d3c:	bf00      	nop
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d44:	4770      	bx	lr
 8003d46:	bf00      	nop
 8003d48:	e000ed00 	.word	0xe000ed00

08003d4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003d84 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d50:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d52:	e003      	b.n	8003d5c <LoopCopyDataInit>

08003d54 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d54:	4b0c      	ldr	r3, [pc, #48]	; (8003d88 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d56:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d58:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d5a:	3104      	adds	r1, #4

08003d5c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d5c:	480b      	ldr	r0, [pc, #44]	; (8003d8c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d5e:	4b0c      	ldr	r3, [pc, #48]	; (8003d90 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d60:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d62:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d64:	d3f6      	bcc.n	8003d54 <CopyDataInit>
  ldr  r2, =_sbss
 8003d66:	4a0b      	ldr	r2, [pc, #44]	; (8003d94 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003d68:	e002      	b.n	8003d70 <LoopFillZerobss>

08003d6a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003d6a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003d6c:	f842 3b04 	str.w	r3, [r2], #4

08003d70 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003d70:	4b09      	ldr	r3, [pc, #36]	; (8003d98 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003d72:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003d74:	d3f9      	bcc.n	8003d6a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003d76:	f7ff ffd3 	bl	8003d20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003d7a:	f004 f997 	bl	80080ac <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003d7e:	f7fd fba7 	bl	80014d0 <main>
  bx  lr    
 8003d82:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003d84:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003d88:	0800cf48 	.word	0x0800cf48
  ldr  r0, =_sdata
 8003d8c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003d90:	200003cc 	.word	0x200003cc
  ldr  r2, =_sbss
 8003d94:	200003cc 	.word	0x200003cc
  ldr  r3, = _ebss
 8003d98:	20000f6c 	.word	0x20000f6c

08003d9c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003d9c:	e7fe      	b.n	8003d9c <ADC_IRQHandler>
	...

08003da0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003da4:	4b0e      	ldr	r3, [pc, #56]	; (8003de0 <HAL_Init+0x40>)
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4a0d      	ldr	r2, [pc, #52]	; (8003de0 <HAL_Init+0x40>)
 8003daa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003dae:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003db0:	4b0b      	ldr	r3, [pc, #44]	; (8003de0 <HAL_Init+0x40>)
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	4a0a      	ldr	r2, [pc, #40]	; (8003de0 <HAL_Init+0x40>)
 8003db6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003dba:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003dbc:	4b08      	ldr	r3, [pc, #32]	; (8003de0 <HAL_Init+0x40>)
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	4a07      	ldr	r2, [pc, #28]	; (8003de0 <HAL_Init+0x40>)
 8003dc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dc6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003dc8:	2003      	movs	r0, #3
 8003dca:	f000 fb5e 	bl	800448a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003dce:	2000      	movs	r0, #0
 8003dd0:	f7ff fd62 	bl	8003898 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003dd4:	f7ff f84c 	bl	8002e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003dd8:	2300      	movs	r3, #0
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	bd80      	pop	{r7, pc}
 8003dde:	bf00      	nop
 8003de0:	40023c00 	.word	0x40023c00

08003de4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003de4:	b480      	push	{r7}
 8003de6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003de8:	4b06      	ldr	r3, [pc, #24]	; (8003e04 <HAL_IncTick+0x20>)
 8003dea:	781b      	ldrb	r3, [r3, #0]
 8003dec:	461a      	mov	r2, r3
 8003dee:	4b06      	ldr	r3, [pc, #24]	; (8003e08 <HAL_IncTick+0x24>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4413      	add	r3, r2
 8003df4:	4a04      	ldr	r2, [pc, #16]	; (8003e08 <HAL_IncTick+0x24>)
 8003df6:	6013      	str	r3, [r2, #0]
}
 8003df8:	bf00      	nop
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	200001f4 	.word	0x200001f4
 8003e08:	20000f58 	.word	0x20000f58

08003e0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003e10:	4b03      	ldr	r3, [pc, #12]	; (8003e20 <HAL_GetTick+0x14>)
 8003e12:	681b      	ldr	r3, [r3, #0]
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	46bd      	mov	sp, r7
 8003e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1c:	4770      	bx	lr
 8003e1e:	bf00      	nop
 8003e20:	20000f58 	.word	0x20000f58

08003e24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e24:	b580      	push	{r7, lr}
 8003e26:	b084      	sub	sp, #16
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e2c:	f7ff ffee 	bl	8003e0c <HAL_GetTick>
 8003e30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e3c:	d005      	beq.n	8003e4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e3e:	4b0a      	ldr	r3, [pc, #40]	; (8003e68 <HAL_Delay+0x44>)
 8003e40:	781b      	ldrb	r3, [r3, #0]
 8003e42:	461a      	mov	r2, r3
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	4413      	add	r3, r2
 8003e48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e4a:	bf00      	nop
 8003e4c:	f7ff ffde 	bl	8003e0c <HAL_GetTick>
 8003e50:	4602      	mov	r2, r0
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	1ad3      	subs	r3, r2, r3
 8003e56:	68fa      	ldr	r2, [r7, #12]
 8003e58:	429a      	cmp	r2, r3
 8003e5a:	d8f7      	bhi.n	8003e4c <HAL_Delay+0x28>
  {
  }
}
 8003e5c:	bf00      	nop
 8003e5e:	bf00      	nop
 8003e60:	3710      	adds	r7, #16
 8003e62:	46bd      	mov	sp, r7
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	bf00      	nop
 8003e68:	200001f4 	.word	0x200001f4

08003e6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003e6c:	b580      	push	{r7, lr}
 8003e6e:	b084      	sub	sp, #16
 8003e70:	af00      	add	r7, sp, #0
 8003e72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003e74:	2300      	movs	r3, #0
 8003e76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d101      	bne.n	8003e82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003e7e:	2301      	movs	r3, #1
 8003e80:	e033      	b.n	8003eea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d109      	bne.n	8003e9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003e8a:	6878      	ldr	r0, [r7, #4]
 8003e8c:	f7ff f818 	bl	8002ec0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	2200      	movs	r2, #0
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ea2:	f003 0310 	and.w	r3, r3, #16
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d118      	bne.n	8003edc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eb2:	f023 0302 	bic.w	r3, r3, #2
 8003eb6:	f043 0202 	orr.w	r2, r3, #2
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f93a 	bl	8004138 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	f023 0303 	bic.w	r3, r3, #3
 8003ed2:	f043 0201 	orr.w	r2, r3, #1
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	641a      	str	r2, [r3, #64]	; 0x40
 8003eda:	e001      	b.n	8003ee0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003edc:	2301      	movs	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003ee8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3710      	adds	r7, #16
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003efe:	2300      	movs	r3, #0
 8003f00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f08:	2b01      	cmp	r3, #1
 8003f0a:	d101      	bne.n	8003f10 <HAL_ADC_ConfigChannel+0x1c>
 8003f0c:	2302      	movs	r3, #2
 8003f0e:	e105      	b.n	800411c <HAL_ADC_ConfigChannel+0x228>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2201      	movs	r2, #1
 8003f14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f18:	683b      	ldr	r3, [r7, #0]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	2b09      	cmp	r3, #9
 8003f1e:	d925      	bls.n	8003f6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	68d9      	ldr	r1, [r3, #12]
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	4613      	mov	r3, r2
 8003f30:	005b      	lsls	r3, r3, #1
 8003f32:	4413      	add	r3, r2
 8003f34:	3b1e      	subs	r3, #30
 8003f36:	2207      	movs	r2, #7
 8003f38:	fa02 f303 	lsl.w	r3, r2, r3
 8003f3c:	43da      	mvns	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	400a      	ands	r2, r1
 8003f44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	68d9      	ldr	r1, [r3, #12]
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	689a      	ldr	r2, [r3, #8]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	b29b      	uxth	r3, r3
 8003f56:	4618      	mov	r0, r3
 8003f58:	4603      	mov	r3, r0
 8003f5a:	005b      	lsls	r3, r3, #1
 8003f5c:	4403      	add	r3, r0
 8003f5e:	3b1e      	subs	r3, #30
 8003f60:	409a      	lsls	r2, r3
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	60da      	str	r2, [r3, #12]
 8003f6a:	e022      	b.n	8003fb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	6919      	ldr	r1, [r3, #16]
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	b29b      	uxth	r3, r3
 8003f78:	461a      	mov	r2, r3
 8003f7a:	4613      	mov	r3, r2
 8003f7c:	005b      	lsls	r3, r3, #1
 8003f7e:	4413      	add	r3, r2
 8003f80:	2207      	movs	r2, #7
 8003f82:	fa02 f303 	lsl.w	r3, r2, r3
 8003f86:	43da      	mvns	r2, r3
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	400a      	ands	r2, r1
 8003f8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	6919      	ldr	r1, [r3, #16]
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	689a      	ldr	r2, [r3, #8]
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	b29b      	uxth	r3, r3
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	005b      	lsls	r3, r3, #1
 8003fa6:	4403      	add	r3, r0
 8003fa8:	409a      	lsls	r2, r3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	430a      	orrs	r2, r1
 8003fb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	2b06      	cmp	r3, #6
 8003fb8:	d824      	bhi.n	8004004 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	4613      	mov	r3, r2
 8003fc6:	009b      	lsls	r3, r3, #2
 8003fc8:	4413      	add	r3, r2
 8003fca:	3b05      	subs	r3, #5
 8003fcc:	221f      	movs	r2, #31
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	43da      	mvns	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	400a      	ands	r2, r1
 8003fda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	b29b      	uxth	r3, r3
 8003fe8:	4618      	mov	r0, r3
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685a      	ldr	r2, [r3, #4]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	009b      	lsls	r3, r3, #2
 8003ff2:	4413      	add	r3, r2
 8003ff4:	3b05      	subs	r3, #5
 8003ff6:	fa00 f203 	lsl.w	r2, r0, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	430a      	orrs	r2, r1
 8004000:	635a      	str	r2, [r3, #52]	; 0x34
 8004002:	e04c      	b.n	800409e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	2b0c      	cmp	r3, #12
 800400a:	d824      	bhi.n	8004056 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	4613      	mov	r3, r2
 8004018:	009b      	lsls	r3, r3, #2
 800401a:	4413      	add	r3, r2
 800401c:	3b23      	subs	r3, #35	; 0x23
 800401e:	221f      	movs	r2, #31
 8004020:	fa02 f303 	lsl.w	r3, r2, r3
 8004024:	43da      	mvns	r2, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	400a      	ands	r2, r1
 800402c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004034:	683b      	ldr	r3, [r7, #0]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	b29b      	uxth	r3, r3
 800403a:	4618      	mov	r0, r3
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685a      	ldr	r2, [r3, #4]
 8004040:	4613      	mov	r3, r2
 8004042:	009b      	lsls	r3, r3, #2
 8004044:	4413      	add	r3, r2
 8004046:	3b23      	subs	r3, #35	; 0x23
 8004048:	fa00 f203 	lsl.w	r2, r0, r3
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	430a      	orrs	r2, r1
 8004052:	631a      	str	r2, [r3, #48]	; 0x30
 8004054:	e023      	b.n	800409e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	4613      	mov	r3, r2
 8004062:	009b      	lsls	r3, r3, #2
 8004064:	4413      	add	r3, r2
 8004066:	3b41      	subs	r3, #65	; 0x41
 8004068:	221f      	movs	r2, #31
 800406a:	fa02 f303 	lsl.w	r3, r2, r3
 800406e:	43da      	mvns	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	400a      	ands	r2, r1
 8004076:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800407e:	683b      	ldr	r3, [r7, #0]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	b29b      	uxth	r3, r3
 8004084:	4618      	mov	r0, r3
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	685a      	ldr	r2, [r3, #4]
 800408a:	4613      	mov	r3, r2
 800408c:	009b      	lsls	r3, r3, #2
 800408e:	4413      	add	r3, r2
 8004090:	3b41      	subs	r3, #65	; 0x41
 8004092:	fa00 f203 	lsl.w	r2, r0, r3
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	430a      	orrs	r2, r1
 800409c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800409e:	4b22      	ldr	r3, [pc, #136]	; (8004128 <HAL_ADC_ConfigChannel+0x234>)
 80040a0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	4a21      	ldr	r2, [pc, #132]	; (800412c <HAL_ADC_ConfigChannel+0x238>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d109      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1cc>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b12      	cmp	r3, #18
 80040b2:	d105      	bne.n	80040c0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	685b      	ldr	r3, [r3, #4]
 80040b8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a19      	ldr	r2, [pc, #100]	; (800412c <HAL_ADC_ConfigChannel+0x238>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d123      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x21e>
 80040ca:	683b      	ldr	r3, [r7, #0]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	2b10      	cmp	r3, #16
 80040d0:	d003      	beq.n	80040da <HAL_ADC_ConfigChannel+0x1e6>
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	2b11      	cmp	r3, #17
 80040d8:	d11b      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	2b10      	cmp	r3, #16
 80040ec:	d111      	bne.n	8004112 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80040ee:	4b10      	ldr	r3, [pc, #64]	; (8004130 <HAL_ADC_ConfigChannel+0x23c>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4a10      	ldr	r2, [pc, #64]	; (8004134 <HAL_ADC_ConfigChannel+0x240>)
 80040f4:	fba2 2303 	umull	r2, r3, r2, r3
 80040f8:	0c9a      	lsrs	r2, r3, #18
 80040fa:	4613      	mov	r3, r2
 80040fc:	009b      	lsls	r3, r3, #2
 80040fe:	4413      	add	r3, r2
 8004100:	005b      	lsls	r3, r3, #1
 8004102:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004104:	e002      	b.n	800410c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	3b01      	subs	r3, #1
 800410a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f9      	bne.n	8004106 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	4618      	mov	r0, r3
 800411e:	3714      	adds	r7, #20
 8004120:	46bd      	mov	sp, r7
 8004122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004126:	4770      	bx	lr
 8004128:	40012300 	.word	0x40012300
 800412c:	40012000 	.word	0x40012000
 8004130:	200001ec 	.word	0x200001ec
 8004134:	431bde83 	.word	0x431bde83

08004138 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004138:	b480      	push	{r7}
 800413a:	b085      	sub	sp, #20
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004140:	4b79      	ldr	r3, [pc, #484]	; (8004328 <ADC_Init+0x1f0>)
 8004142:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	685a      	ldr	r2, [r3, #4]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	685b      	ldr	r3, [r3, #4]
 8004158:	431a      	orrs	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	685a      	ldr	r2, [r3, #4]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800416c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	6859      	ldr	r1, [r3, #4]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	021a      	lsls	r2, r3, #8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8004190:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	6859      	ldr	r1, [r3, #4]
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	689a      	ldr	r2, [r3, #8]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	430a      	orrs	r2, r1
 80041a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	689a      	ldr	r2, [r3, #8]
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	6899      	ldr	r1, [r3, #8]
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	68da      	ldr	r2, [r3, #12]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041ca:	4a58      	ldr	r2, [pc, #352]	; (800432c <ADC_Init+0x1f4>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	d022      	beq.n	8004216 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	689a      	ldr	r2, [r3, #8]
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80041de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6899      	ldr	r1, [r3, #8]
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689a      	ldr	r2, [r3, #8]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004200:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	6899      	ldr	r1, [r3, #8]
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	430a      	orrs	r2, r1
 8004212:	609a      	str	r2, [r3, #8]
 8004214:	e00f      	b.n	8004236 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	689a      	ldr	r2, [r3, #8]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004224:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	689a      	ldr	r2, [r3, #8]
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004234:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	689a      	ldr	r2, [r3, #8]
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f022 0202 	bic.w	r2, r2, #2
 8004244:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	6899      	ldr	r1, [r3, #8]
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	7e1b      	ldrb	r3, [r3, #24]
 8004250:	005a      	lsls	r2, r3, #1
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	430a      	orrs	r2, r1
 8004258:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d01b      	beq.n	800429c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	685a      	ldr	r2, [r3, #4]
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004272:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	685a      	ldr	r2, [r3, #4]
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8004282:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	6859      	ldr	r1, [r3, #4]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800428e:	3b01      	subs	r3, #1
 8004290:	035a      	lsls	r2, r3, #13
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	605a      	str	r2, [r3, #4]
 800429a:	e007      	b.n	80042ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	69db      	ldr	r3, [r3, #28]
 80042c6:	3b01      	subs	r3, #1
 80042c8:	051a      	lsls	r2, r3, #20
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	689a      	ldr	r2, [r3, #8]
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80042e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	6899      	ldr	r1, [r3, #8]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80042ee:	025a      	lsls	r2, r3, #9
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	430a      	orrs	r2, r1
 80042f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	689a      	ldr	r2, [r3, #8]
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004306:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	029a      	lsls	r2, r3, #10
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	430a      	orrs	r2, r1
 800431a:	609a      	str	r2, [r3, #8]
}
 800431c:	bf00      	nop
 800431e:	3714      	adds	r7, #20
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	40012300 	.word	0x40012300
 800432c:	0f000001 	.word	0x0f000001

08004330 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004330:	b480      	push	{r7}
 8004332:	b085      	sub	sp, #20
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	f003 0307 	and.w	r3, r3, #7
 800433e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004340:	4b0c      	ldr	r3, [pc, #48]	; (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004342:	68db      	ldr	r3, [r3, #12]
 8004344:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004346:	68ba      	ldr	r2, [r7, #8]
 8004348:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800434c:	4013      	ands	r3, r2
 800434e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004354:	68bb      	ldr	r3, [r7, #8]
 8004356:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004358:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800435c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004360:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004362:	4a04      	ldr	r2, [pc, #16]	; (8004374 <__NVIC_SetPriorityGrouping+0x44>)
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	60d3      	str	r3, [r2, #12]
}
 8004368:	bf00      	nop
 800436a:	3714      	adds	r7, #20
 800436c:	46bd      	mov	sp, r7
 800436e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004372:	4770      	bx	lr
 8004374:	e000ed00 	.word	0xe000ed00

08004378 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004378:	b480      	push	{r7}
 800437a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800437c:	4b04      	ldr	r3, [pc, #16]	; (8004390 <__NVIC_GetPriorityGrouping+0x18>)
 800437e:	68db      	ldr	r3, [r3, #12]
 8004380:	0a1b      	lsrs	r3, r3, #8
 8004382:	f003 0307 	and.w	r3, r3, #7
}
 8004386:	4618      	mov	r0, r3
 8004388:	46bd      	mov	sp, r7
 800438a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800438e:	4770      	bx	lr
 8004390:	e000ed00 	.word	0xe000ed00

08004394 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004394:	b480      	push	{r7}
 8004396:	b083      	sub	sp, #12
 8004398:	af00      	add	r7, sp, #0
 800439a:	4603      	mov	r3, r0
 800439c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800439e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	db0b      	blt.n	80043be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043a6:	79fb      	ldrb	r3, [r7, #7]
 80043a8:	f003 021f 	and.w	r2, r3, #31
 80043ac:	4907      	ldr	r1, [pc, #28]	; (80043cc <__NVIC_EnableIRQ+0x38>)
 80043ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043b2:	095b      	lsrs	r3, r3, #5
 80043b4:	2001      	movs	r0, #1
 80043b6:	fa00 f202 	lsl.w	r2, r0, r2
 80043ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043be:	bf00      	nop
 80043c0:	370c      	adds	r7, #12
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	e000e100 	.word	0xe000e100

080043d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	4603      	mov	r3, r0
 80043d8:	6039      	str	r1, [r7, #0]
 80043da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	db0a      	blt.n	80043fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043e4:	683b      	ldr	r3, [r7, #0]
 80043e6:	b2da      	uxtb	r2, r3
 80043e8:	490c      	ldr	r1, [pc, #48]	; (800441c <__NVIC_SetPriority+0x4c>)
 80043ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ee:	0112      	lsls	r2, r2, #4
 80043f0:	b2d2      	uxtb	r2, r2
 80043f2:	440b      	add	r3, r1
 80043f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80043f8:	e00a      	b.n	8004410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	b2da      	uxtb	r2, r3
 80043fe:	4908      	ldr	r1, [pc, #32]	; (8004420 <__NVIC_SetPriority+0x50>)
 8004400:	79fb      	ldrb	r3, [r7, #7]
 8004402:	f003 030f 	and.w	r3, r3, #15
 8004406:	3b04      	subs	r3, #4
 8004408:	0112      	lsls	r2, r2, #4
 800440a:	b2d2      	uxtb	r2, r2
 800440c:	440b      	add	r3, r1
 800440e:	761a      	strb	r2, [r3, #24]
}
 8004410:	bf00      	nop
 8004412:	370c      	adds	r7, #12
 8004414:	46bd      	mov	sp, r7
 8004416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441a:	4770      	bx	lr
 800441c:	e000e100 	.word	0xe000e100
 8004420:	e000ed00 	.word	0xe000ed00

08004424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004424:	b480      	push	{r7}
 8004426:	b089      	sub	sp, #36	; 0x24
 8004428:	af00      	add	r7, sp, #0
 800442a:	60f8      	str	r0, [r7, #12]
 800442c:	60b9      	str	r1, [r7, #8]
 800442e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	f003 0307 	and.w	r3, r3, #7
 8004436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004438:	69fb      	ldr	r3, [r7, #28]
 800443a:	f1c3 0307 	rsb	r3, r3, #7
 800443e:	2b04      	cmp	r3, #4
 8004440:	bf28      	it	cs
 8004442:	2304      	movcs	r3, #4
 8004444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004446:	69fb      	ldr	r3, [r7, #28]
 8004448:	3304      	adds	r3, #4
 800444a:	2b06      	cmp	r3, #6
 800444c:	d902      	bls.n	8004454 <NVIC_EncodePriority+0x30>
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	3b03      	subs	r3, #3
 8004452:	e000      	b.n	8004456 <NVIC_EncodePriority+0x32>
 8004454:	2300      	movs	r3, #0
 8004456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004458:	f04f 32ff 	mov.w	r2, #4294967295
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	fa02 f303 	lsl.w	r3, r2, r3
 8004462:	43da      	mvns	r2, r3
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	401a      	ands	r2, r3
 8004468:	697b      	ldr	r3, [r7, #20]
 800446a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800446c:	f04f 31ff 	mov.w	r1, #4294967295
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	fa01 f303 	lsl.w	r3, r1, r3
 8004476:	43d9      	mvns	r1, r3
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800447c:	4313      	orrs	r3, r2
         );
}
 800447e:	4618      	mov	r0, r3
 8004480:	3724      	adds	r7, #36	; 0x24
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b082      	sub	sp, #8
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f7ff ff4c 	bl	8004330 <__NVIC_SetPriorityGrouping>
}
 8004498:	bf00      	nop
 800449a:	3708      	adds	r7, #8
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	4603      	mov	r3, r0
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
 80044ac:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044ae:	2300      	movs	r3, #0
 80044b0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044b2:	f7ff ff61 	bl	8004378 <__NVIC_GetPriorityGrouping>
 80044b6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	6978      	ldr	r0, [r7, #20]
 80044be:	f7ff ffb1 	bl	8004424 <NVIC_EncodePriority>
 80044c2:	4602      	mov	r2, r0
 80044c4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044c8:	4611      	mov	r1, r2
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7ff ff80 	bl	80043d0 <__NVIC_SetPriority>
}
 80044d0:	bf00      	nop
 80044d2:	3718      	adds	r7, #24
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044d8:	b580      	push	{r7, lr}
 80044da:	b082      	sub	sp, #8
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7ff ff54 	bl	8004394 <__NVIC_EnableIRQ>
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af00      	add	r7, sp, #0
 80044fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80044fc:	2300      	movs	r3, #0
 80044fe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004500:	f7ff fc84 	bl	8003e0c <HAL_GetTick>
 8004504:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d101      	bne.n	8004510 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e099      	b.n	8004644 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2202      	movs	r2, #2
 800451c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f022 0201 	bic.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004530:	e00f      	b.n	8004552 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004532:	f7ff fc6b 	bl	8003e0c <HAL_GetTick>
 8004536:	4602      	mov	r2, r0
 8004538:	693b      	ldr	r3, [r7, #16]
 800453a:	1ad3      	subs	r3, r2, r3
 800453c:	2b05      	cmp	r3, #5
 800453e:	d908      	bls.n	8004552 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2220      	movs	r2, #32
 8004544:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2203      	movs	r2, #3
 800454a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800454e:	2303      	movs	r3, #3
 8004550:	e078      	b.n	8004644 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f003 0301 	and.w	r3, r3, #1
 800455c:	2b00      	cmp	r3, #0
 800455e:	d1e8      	bne.n	8004532 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	4b38      	ldr	r3, [pc, #224]	; (800464c <HAL_DMA_Init+0x158>)
 800456c:	4013      	ands	r3, r2
 800456e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	689b      	ldr	r3, [r3, #8]
 8004578:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800457e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800458a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	699b      	ldr	r3, [r3, #24]
 8004590:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004596:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6a1b      	ldr	r3, [r3, #32]
 800459c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800459e:	697a      	ldr	r2, [r7, #20]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d107      	bne.n	80045bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b4:	4313      	orrs	r3, r2
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	697a      	ldr	r2, [r7, #20]
 80045c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	695b      	ldr	r3, [r3, #20]
 80045ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80045cc:	697b      	ldr	r3, [r7, #20]
 80045ce:	f023 0307 	bic.w	r3, r3, #7
 80045d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d8:	697a      	ldr	r2, [r7, #20]
 80045da:	4313      	orrs	r3, r2
 80045dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d117      	bne.n	8004616 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d00e      	beq.n	8004616 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 fb0d 	bl	8004c18 <DMA_CheckFifoParam>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d008      	beq.n	8004616 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2240      	movs	r2, #64	; 0x40
 8004608:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2201      	movs	r2, #1
 800460e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004612:	2301      	movs	r3, #1
 8004614:	e016      	b.n	8004644 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	697a      	ldr	r2, [r7, #20]
 800461c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800461e:	6878      	ldr	r0, [r7, #4]
 8004620:	f000 fac4 	bl	8004bac <DMA_CalcBaseAndBitshift>
 8004624:	4603      	mov	r3, r0
 8004626:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800462c:	223f      	movs	r2, #63	; 0x3f
 800462e:	409a      	lsls	r2, r3
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2201      	movs	r2, #1
 800463e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004642:	2300      	movs	r3, #0
}
 8004644:	4618      	mov	r0, r3
 8004646:	3718      	adds	r7, #24
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	f010803f 	.word	0xf010803f

08004650 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	b086      	sub	sp, #24
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800465e:	2300      	movs	r3, #0
 8004660:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004666:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800466e:	2b01      	cmp	r3, #1
 8004670:	d101      	bne.n	8004676 <HAL_DMA_Start_IT+0x26>
 8004672:	2302      	movs	r3, #2
 8004674:	e040      	b.n	80046f8 <HAL_DMA_Start_IT+0xa8>
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d12f      	bne.n	80046ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	2202      	movs	r2, #2
 800468e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	687a      	ldr	r2, [r7, #4]
 800469c:	68b9      	ldr	r1, [r7, #8]
 800469e:	68f8      	ldr	r0, [r7, #12]
 80046a0:	f000 fa56 	bl	8004b50 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046a8:	223f      	movs	r2, #63	; 0x3f
 80046aa:	409a      	lsls	r2, r3
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f042 0216 	orr.w	r2, r2, #22
 80046be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d007      	beq.n	80046d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f042 0208 	orr.w	r2, r2, #8
 80046d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f042 0201 	orr.w	r2, r2, #1
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	e005      	b.n	80046f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	2200      	movs	r2, #0
 80046ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80046f2:	2302      	movs	r3, #2
 80046f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	3718      	adds	r7, #24
 80046fc:	46bd      	mov	sp, r7
 80046fe:	bd80      	pop	{r7, pc}

08004700 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800470c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800470e:	f7ff fb7d 	bl	8003e0c <HAL_GetTick>
 8004712:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800471a:	b2db      	uxtb	r3, r3
 800471c:	2b02      	cmp	r3, #2
 800471e:	d008      	beq.n	8004732 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	2280      	movs	r2, #128	; 0x80
 8004724:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	2200      	movs	r2, #0
 800472a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800472e:	2301      	movs	r3, #1
 8004730:	e052      	b.n	80047d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681a      	ldr	r2, [r3, #0]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0216 	bic.w	r2, r2, #22
 8004740:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	695a      	ldr	r2, [r3, #20]
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004750:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004756:	2b00      	cmp	r3, #0
 8004758:	d103      	bne.n	8004762 <HAL_DMA_Abort+0x62>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800475e:	2b00      	cmp	r3, #0
 8004760:	d007      	beq.n	8004772 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0208 	bic.w	r2, r2, #8
 8004770:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	681a      	ldr	r2, [r3, #0]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	f022 0201 	bic.w	r2, r2, #1
 8004780:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004782:	e013      	b.n	80047ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004784:	f7ff fb42 	bl	8003e0c <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68bb      	ldr	r3, [r7, #8]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	2b05      	cmp	r3, #5
 8004790:	d90c      	bls.n	80047ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	2220      	movs	r2, #32
 8004796:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2203      	movs	r2, #3
 80047a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80047a8:	2303      	movs	r3, #3
 80047aa:	e015      	b.n	80047d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f003 0301 	and.w	r3, r3, #1
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d1e4      	bne.n	8004784 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047be:	223f      	movs	r2, #63	; 0x3f
 80047c0:	409a      	lsls	r2, r3
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	2201      	movs	r2, #1
 80047d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80047d6:	2300      	movs	r3, #0
}
 80047d8:	4618      	mov	r0, r3
 80047da:	3710      	adds	r7, #16
 80047dc:	46bd      	mov	sp, r7
 80047de:	bd80      	pop	{r7, pc}

080047e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b083      	sub	sp, #12
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047ee:	b2db      	uxtb	r3, r3
 80047f0:	2b02      	cmp	r3, #2
 80047f2:	d004      	beq.n	80047fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e00c      	b.n	8004818 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2205      	movs	r2, #5
 8004802:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	681a      	ldr	r2, [r3, #0]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f022 0201 	bic.w	r2, r2, #1
 8004814:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004816:	2300      	movs	r3, #0
}
 8004818:	4618      	mov	r0, r3
 800481a:	370c      	adds	r7, #12
 800481c:	46bd      	mov	sp, r7
 800481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004822:	4770      	bx	lr

08004824 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004824:	b580      	push	{r7, lr}
 8004826:	b086      	sub	sp, #24
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800482c:	2300      	movs	r3, #0
 800482e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004830:	4b92      	ldr	r3, [pc, #584]	; (8004a7c <HAL_DMA_IRQHandler+0x258>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	4a92      	ldr	r2, [pc, #584]	; (8004a80 <HAL_DMA_IRQHandler+0x25c>)
 8004836:	fba2 2303 	umull	r2, r3, r2, r3
 800483a:	0a9b      	lsrs	r3, r3, #10
 800483c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004842:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800484e:	2208      	movs	r2, #8
 8004850:	409a      	lsls	r2, r3
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	4013      	ands	r3, r2
 8004856:	2b00      	cmp	r3, #0
 8004858:	d01a      	beq.n	8004890 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d013      	beq.n	8004890 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0204 	bic.w	r2, r2, #4
 8004876:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800487c:	2208      	movs	r2, #8
 800487e:	409a      	lsls	r2, r3
 8004880:	693b      	ldr	r3, [r7, #16]
 8004882:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004888:	f043 0201 	orr.w	r2, r3, #1
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004894:	2201      	movs	r2, #1
 8004896:	409a      	lsls	r2, r3
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4013      	ands	r3, r2
 800489c:	2b00      	cmp	r3, #0
 800489e:	d012      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	695b      	ldr	r3, [r3, #20]
 80048a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d00b      	beq.n	80048c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b2:	2201      	movs	r2, #1
 80048b4:	409a      	lsls	r2, r3
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048be:	f043 0202 	orr.w	r2, r3, #2
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ca:	2204      	movs	r2, #4
 80048cc:	409a      	lsls	r2, r3
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d012      	beq.n	80048fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f003 0302 	and.w	r3, r3, #2
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d00b      	beq.n	80048fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048e8:	2204      	movs	r2, #4
 80048ea:	409a      	lsls	r2, r3
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f4:	f043 0204 	orr.w	r2, r3, #4
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004900:	2210      	movs	r2, #16
 8004902:	409a      	lsls	r2, r3
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	4013      	ands	r3, r2
 8004908:	2b00      	cmp	r3, #0
 800490a:	d043      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0308 	and.w	r3, r3, #8
 8004916:	2b00      	cmp	r3, #0
 8004918:	d03c      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800491e:	2210      	movs	r2, #16
 8004920:	409a      	lsls	r2, r3
 8004922:	693b      	ldr	r3, [r7, #16]
 8004924:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004930:	2b00      	cmp	r3, #0
 8004932:	d018      	beq.n	8004966 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800493e:	2b00      	cmp	r3, #0
 8004940:	d108      	bne.n	8004954 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	2b00      	cmp	r3, #0
 8004948:	d024      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494e:	6878      	ldr	r0, [r7, #4]
 8004950:	4798      	blx	r3
 8004952:	e01f      	b.n	8004994 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004958:	2b00      	cmp	r3, #0
 800495a:	d01b      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	4798      	blx	r3
 8004964:	e016      	b.n	8004994 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004970:	2b00      	cmp	r3, #0
 8004972:	d107      	bne.n	8004984 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681a      	ldr	r2, [r3, #0]
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f022 0208 	bic.w	r2, r2, #8
 8004982:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004988:	2b00      	cmp	r3, #0
 800498a:	d003      	beq.n	8004994 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2220      	movs	r2, #32
 800499a:	409a      	lsls	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	4013      	ands	r3, r2
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	f000 808e 	beq.w	8004ac2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f003 0310 	and.w	r3, r3, #16
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	f000 8086 	beq.w	8004ac2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ba:	2220      	movs	r2, #32
 80049bc:	409a      	lsls	r2, r3
 80049be:	693b      	ldr	r3, [r7, #16]
 80049c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	2b05      	cmp	r3, #5
 80049cc:	d136      	bne.n	8004a3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f022 0216 	bic.w	r2, r2, #22
 80049dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	695a      	ldr	r2, [r3, #20]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80049ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d103      	bne.n	80049fe <HAL_DMA_IRQHandler+0x1da>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f022 0208 	bic.w	r2, r2, #8
 8004a0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a12:	223f      	movs	r2, #63	; 0x3f
 8004a14:	409a      	lsls	r2, r3
 8004a16:	693b      	ldr	r3, [r7, #16]
 8004a18:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	2201      	movs	r2, #1
 8004a26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d07d      	beq.n	8004b2e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	4798      	blx	r3
        }
        return;
 8004a3a:	e078      	b.n	8004b2e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d01c      	beq.n	8004a84 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d108      	bne.n	8004a6a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d030      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	4798      	blx	r3
 8004a68:	e02b      	b.n	8004ac2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d027      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a76:	6878      	ldr	r0, [r7, #4]
 8004a78:	4798      	blx	r3
 8004a7a:	e022      	b.n	8004ac2 <HAL_DMA_IRQHandler+0x29e>
 8004a7c:	200001ec 	.word	0x200001ec
 8004a80:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10f      	bne.n	8004ab2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	681a      	ldr	r2, [r3, #0]
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f022 0210 	bic.w	r2, r2, #16
 8004aa0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2201      	movs	r2, #1
 8004aae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004abe:	6878      	ldr	r0, [r7, #4]
 8004ac0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d032      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ace:	f003 0301 	and.w	r3, r3, #1
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d022      	beq.n	8004b1c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2205      	movs	r2, #5
 8004ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	681a      	ldr	r2, [r3, #0]
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f022 0201 	bic.w	r2, r2, #1
 8004aec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004aee:	68bb      	ldr	r3, [r7, #8]
 8004af0:	3301      	adds	r3, #1
 8004af2:	60bb      	str	r3, [r7, #8]
 8004af4:	697a      	ldr	r2, [r7, #20]
 8004af6:	429a      	cmp	r2, r3
 8004af8:	d307      	bcc.n	8004b0a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d1f2      	bne.n	8004aee <HAL_DMA_IRQHandler+0x2ca>
 8004b08:	e000      	b.n	8004b0c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b0a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	2201      	movs	r2, #1
 8004b18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d005      	beq.n	8004b30 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b28:	6878      	ldr	r0, [r7, #4]
 8004b2a:	4798      	blx	r3
 8004b2c:	e000      	b.n	8004b30 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b2e:	bf00      	nop
    }
  }
}
 8004b30:	3718      	adds	r7, #24
 8004b32:	46bd      	mov	sp, r7
 8004b34:	bd80      	pop	{r7, pc}
 8004b36:	bf00      	nop

08004b38 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b44:	4618      	mov	r0, r3
 8004b46:	370c      	adds	r7, #12
 8004b48:	46bd      	mov	sp, r7
 8004b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4e:	4770      	bx	lr

08004b50 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b50:	b480      	push	{r7}
 8004b52:	b085      	sub	sp, #20
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
 8004b5c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	681a      	ldr	r2, [r3, #0]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004b6c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	683a      	ldr	r2, [r7, #0]
 8004b74:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	2b40      	cmp	r3, #64	; 0x40
 8004b7c:	d108      	bne.n	8004b90 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	687a      	ldr	r2, [r7, #4]
 8004b84:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68ba      	ldr	r2, [r7, #8]
 8004b8c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004b8e:	e007      	b.n	8004ba0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	68ba      	ldr	r2, [r7, #8]
 8004b96:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	687a      	ldr	r2, [r7, #4]
 8004b9e:	60da      	str	r2, [r3, #12]
}
 8004ba0:	bf00      	nop
 8004ba2:	3714      	adds	r7, #20
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004bac:	b480      	push	{r7}
 8004bae:	b085      	sub	sp, #20
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	b2db      	uxtb	r3, r3
 8004bba:	3b10      	subs	r3, #16
 8004bbc:	4a14      	ldr	r2, [pc, #80]	; (8004c10 <DMA_CalcBaseAndBitshift+0x64>)
 8004bbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004bc2:	091b      	lsrs	r3, r3, #4
 8004bc4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bc6:	4a13      	ldr	r2, [pc, #76]	; (8004c14 <DMA_CalcBaseAndBitshift+0x68>)
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	4413      	add	r3, r2
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d909      	bls.n	8004bee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004be2:	f023 0303 	bic.w	r3, r3, #3
 8004be6:	1d1a      	adds	r2, r3, #4
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	659a      	str	r2, [r3, #88]	; 0x58
 8004bec:	e007      	b.n	8004bfe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004bf6:	f023 0303 	bic.w	r3, r3, #3
 8004bfa:	687a      	ldr	r2, [r7, #4]
 8004bfc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3714      	adds	r7, #20
 8004c06:	46bd      	mov	sp, r7
 8004c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c0c:	4770      	bx	lr
 8004c0e:	bf00      	nop
 8004c10:	aaaaaaab 	.word	0xaaaaaaab
 8004c14:	0800cad0 	.word	0x0800cad0

08004c18 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c20:	2300      	movs	r3, #0
 8004c22:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c28:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	699b      	ldr	r3, [r3, #24]
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d11f      	bne.n	8004c72 <DMA_CheckFifoParam+0x5a>
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	2b03      	cmp	r3, #3
 8004c36:	d856      	bhi.n	8004ce6 <DMA_CheckFifoParam+0xce>
 8004c38:	a201      	add	r2, pc, #4	; (adr r2, 8004c40 <DMA_CheckFifoParam+0x28>)
 8004c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c3e:	bf00      	nop
 8004c40:	08004c51 	.word	0x08004c51
 8004c44:	08004c63 	.word	0x08004c63
 8004c48:	08004c51 	.word	0x08004c51
 8004c4c:	08004ce7 	.word	0x08004ce7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c54:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d046      	beq.n	8004cea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c60:	e043      	b.n	8004cea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c66:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004c6a:	d140      	bne.n	8004cee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c70:	e03d      	b.n	8004cee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	699b      	ldr	r3, [r3, #24]
 8004c76:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c7a:	d121      	bne.n	8004cc0 <DMA_CheckFifoParam+0xa8>
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	2b03      	cmp	r3, #3
 8004c80:	d837      	bhi.n	8004cf2 <DMA_CheckFifoParam+0xda>
 8004c82:	a201      	add	r2, pc, #4	; (adr r2, 8004c88 <DMA_CheckFifoParam+0x70>)
 8004c84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c88:	08004c99 	.word	0x08004c99
 8004c8c:	08004c9f 	.word	0x08004c9f
 8004c90:	08004c99 	.word	0x08004c99
 8004c94:	08004cb1 	.word	0x08004cb1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	73fb      	strb	r3, [r7, #15]
      break;
 8004c9c:	e030      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ca2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d025      	beq.n	8004cf6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004caa:	2301      	movs	r3, #1
 8004cac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004cae:	e022      	b.n	8004cf6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cb4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cb8:	d11f      	bne.n	8004cfa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cba:	2301      	movs	r3, #1
 8004cbc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cbe:	e01c      	b.n	8004cfa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	2b02      	cmp	r3, #2
 8004cc4:	d903      	bls.n	8004cce <DMA_CheckFifoParam+0xb6>
 8004cc6:	68bb      	ldr	r3, [r7, #8]
 8004cc8:	2b03      	cmp	r3, #3
 8004cca:	d003      	beq.n	8004cd4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004ccc:	e018      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004cce:	2301      	movs	r3, #1
 8004cd0:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd2:	e015      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d00e      	beq.n	8004cfe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8004ce4:	e00b      	b.n	8004cfe <DMA_CheckFifoParam+0xe6>
      break;
 8004ce6:	bf00      	nop
 8004ce8:	e00a      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cea:	bf00      	nop
 8004cec:	e008      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cee:	bf00      	nop
 8004cf0:	e006      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cf2:	bf00      	nop
 8004cf4:	e004      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cf6:	bf00      	nop
 8004cf8:	e002      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;   
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <DMA_CheckFifoParam+0xe8>
      break;
 8004cfe:	bf00      	nop
    }
  } 
  
  return status; 
 8004d00:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3714      	adds	r7, #20
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop

08004d10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b089      	sub	sp, #36	; 0x24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d22:	2300      	movs	r3, #0
 8004d24:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d26:	2300      	movs	r3, #0
 8004d28:	61fb      	str	r3, [r7, #28]
 8004d2a:	e16b      	b.n	8005004 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	fa02 f303 	lsl.w	r3, r2, r3
 8004d34:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	697a      	ldr	r2, [r7, #20]
 8004d3c:	4013      	ands	r3, r2
 8004d3e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d40:	693a      	ldr	r2, [r7, #16]
 8004d42:	697b      	ldr	r3, [r7, #20]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	f040 815a 	bne.w	8004ffe <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	f003 0303 	and.w	r3, r3, #3
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d005      	beq.n	8004d62 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	685b      	ldr	r3, [r3, #4]
 8004d5a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d130      	bne.n	8004dc4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	005b      	lsls	r3, r3, #1
 8004d6c:	2203      	movs	r2, #3
 8004d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8004d72:	43db      	mvns	r3, r3
 8004d74:	69ba      	ldr	r2, [r7, #24]
 8004d76:	4013      	ands	r3, r2
 8004d78:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d7a:	683b      	ldr	r3, [r7, #0]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	005b      	lsls	r3, r3, #1
 8004d82:	fa02 f303 	lsl.w	r3, r2, r3
 8004d86:	69ba      	ldr	r2, [r7, #24]
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d98:	2201      	movs	r2, #1
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8004da0:	43db      	mvns	r3, r3
 8004da2:	69ba      	ldr	r2, [r7, #24]
 8004da4:	4013      	ands	r3, r2
 8004da6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	685b      	ldr	r3, [r3, #4]
 8004dac:	091b      	lsrs	r3, r3, #4
 8004dae:	f003 0201 	and.w	r2, r3, #1
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	69ba      	ldr	r2, [r7, #24]
 8004dc2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0303 	and.w	r3, r3, #3
 8004dcc:	2b03      	cmp	r3, #3
 8004dce:	d017      	beq.n	8004e00 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	68db      	ldr	r3, [r3, #12]
 8004dd4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004dd6:	69fb      	ldr	r3, [r7, #28]
 8004dd8:	005b      	lsls	r3, r3, #1
 8004dda:	2203      	movs	r2, #3
 8004ddc:	fa02 f303 	lsl.w	r3, r2, r3
 8004de0:	43db      	mvns	r3, r3
 8004de2:	69ba      	ldr	r2, [r7, #24]
 8004de4:	4013      	ands	r3, r2
 8004de6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	689a      	ldr	r2, [r3, #8]
 8004dec:	69fb      	ldr	r3, [r7, #28]
 8004dee:	005b      	lsls	r3, r3, #1
 8004df0:	fa02 f303 	lsl.w	r3, r2, r3
 8004df4:	69ba      	ldr	r2, [r7, #24]
 8004df6:	4313      	orrs	r3, r2
 8004df8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f003 0303 	and.w	r3, r3, #3
 8004e08:	2b02      	cmp	r3, #2
 8004e0a:	d123      	bne.n	8004e54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e0c:	69fb      	ldr	r3, [r7, #28]
 8004e0e:	08da      	lsrs	r2, r3, #3
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	3208      	adds	r2, #8
 8004e14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e1a:	69fb      	ldr	r3, [r7, #28]
 8004e1c:	f003 0307 	and.w	r3, r3, #7
 8004e20:	009b      	lsls	r3, r3, #2
 8004e22:	220f      	movs	r2, #15
 8004e24:	fa02 f303 	lsl.w	r3, r2, r3
 8004e28:	43db      	mvns	r3, r3
 8004e2a:	69ba      	ldr	r2, [r7, #24]
 8004e2c:	4013      	ands	r3, r2
 8004e2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	691a      	ldr	r2, [r3, #16]
 8004e34:	69fb      	ldr	r3, [r7, #28]
 8004e36:	f003 0307 	and.w	r3, r3, #7
 8004e3a:	009b      	lsls	r3, r3, #2
 8004e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e40:	69ba      	ldr	r2, [r7, #24]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e46:	69fb      	ldr	r3, [r7, #28]
 8004e48:	08da      	lsrs	r2, r3, #3
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	3208      	adds	r2, #8
 8004e4e:	69b9      	ldr	r1, [r7, #24]
 8004e50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e5a:	69fb      	ldr	r3, [r7, #28]
 8004e5c:	005b      	lsls	r3, r3, #1
 8004e5e:	2203      	movs	r2, #3
 8004e60:	fa02 f303 	lsl.w	r3, r2, r3
 8004e64:	43db      	mvns	r3, r3
 8004e66:	69ba      	ldr	r2, [r7, #24]
 8004e68:	4013      	ands	r3, r2
 8004e6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	685b      	ldr	r3, [r3, #4]
 8004e70:	f003 0203 	and.w	r2, r3, #3
 8004e74:	69fb      	ldr	r3, [r7, #28]
 8004e76:	005b      	lsls	r3, r3, #1
 8004e78:	fa02 f303 	lsl.w	r3, r2, r3
 8004e7c:	69ba      	ldr	r2, [r7, #24]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	69ba      	ldr	r2, [r7, #24]
 8004e86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	685b      	ldr	r3, [r3, #4]
 8004e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 80b4 	beq.w	8004ffe <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e96:	2300      	movs	r3, #0
 8004e98:	60fb      	str	r3, [r7, #12]
 8004e9a:	4b60      	ldr	r3, [pc, #384]	; (800501c <HAL_GPIO_Init+0x30c>)
 8004e9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e9e:	4a5f      	ldr	r2, [pc, #380]	; (800501c <HAL_GPIO_Init+0x30c>)
 8004ea0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004ea4:	6453      	str	r3, [r2, #68]	; 0x44
 8004ea6:	4b5d      	ldr	r3, [pc, #372]	; (800501c <HAL_GPIO_Init+0x30c>)
 8004ea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004eae:	60fb      	str	r3, [r7, #12]
 8004eb0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eb2:	4a5b      	ldr	r2, [pc, #364]	; (8005020 <HAL_GPIO_Init+0x310>)
 8004eb4:	69fb      	ldr	r3, [r7, #28]
 8004eb6:	089b      	lsrs	r3, r3, #2
 8004eb8:	3302      	adds	r3, #2
 8004eba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ebe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ec0:	69fb      	ldr	r3, [r7, #28]
 8004ec2:	f003 0303 	and.w	r3, r3, #3
 8004ec6:	009b      	lsls	r3, r3, #2
 8004ec8:	220f      	movs	r2, #15
 8004eca:	fa02 f303 	lsl.w	r3, r2, r3
 8004ece:	43db      	mvns	r3, r3
 8004ed0:	69ba      	ldr	r2, [r7, #24]
 8004ed2:	4013      	ands	r3, r2
 8004ed4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a52      	ldr	r2, [pc, #328]	; (8005024 <HAL_GPIO_Init+0x314>)
 8004eda:	4293      	cmp	r3, r2
 8004edc:	d02b      	beq.n	8004f36 <HAL_GPIO_Init+0x226>
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	4a51      	ldr	r2, [pc, #324]	; (8005028 <HAL_GPIO_Init+0x318>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d025      	beq.n	8004f32 <HAL_GPIO_Init+0x222>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	4a50      	ldr	r2, [pc, #320]	; (800502c <HAL_GPIO_Init+0x31c>)
 8004eea:	4293      	cmp	r3, r2
 8004eec:	d01f      	beq.n	8004f2e <HAL_GPIO_Init+0x21e>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	4a4f      	ldr	r2, [pc, #316]	; (8005030 <HAL_GPIO_Init+0x320>)
 8004ef2:	4293      	cmp	r3, r2
 8004ef4:	d019      	beq.n	8004f2a <HAL_GPIO_Init+0x21a>
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	4a4e      	ldr	r2, [pc, #312]	; (8005034 <HAL_GPIO_Init+0x324>)
 8004efa:	4293      	cmp	r3, r2
 8004efc:	d013      	beq.n	8004f26 <HAL_GPIO_Init+0x216>
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	4a4d      	ldr	r2, [pc, #308]	; (8005038 <HAL_GPIO_Init+0x328>)
 8004f02:	4293      	cmp	r3, r2
 8004f04:	d00d      	beq.n	8004f22 <HAL_GPIO_Init+0x212>
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	4a4c      	ldr	r2, [pc, #304]	; (800503c <HAL_GPIO_Init+0x32c>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d007      	beq.n	8004f1e <HAL_GPIO_Init+0x20e>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a4b      	ldr	r2, [pc, #300]	; (8005040 <HAL_GPIO_Init+0x330>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d101      	bne.n	8004f1a <HAL_GPIO_Init+0x20a>
 8004f16:	2307      	movs	r3, #7
 8004f18:	e00e      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f1a:	2308      	movs	r3, #8
 8004f1c:	e00c      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f1e:	2306      	movs	r3, #6
 8004f20:	e00a      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f22:	2305      	movs	r3, #5
 8004f24:	e008      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f26:	2304      	movs	r3, #4
 8004f28:	e006      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e004      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e002      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f32:	2301      	movs	r3, #1
 8004f34:	e000      	b.n	8004f38 <HAL_GPIO_Init+0x228>
 8004f36:	2300      	movs	r3, #0
 8004f38:	69fa      	ldr	r2, [r7, #28]
 8004f3a:	f002 0203 	and.w	r2, r2, #3
 8004f3e:	0092      	lsls	r2, r2, #2
 8004f40:	4093      	lsls	r3, r2
 8004f42:	69ba      	ldr	r2, [r7, #24]
 8004f44:	4313      	orrs	r3, r2
 8004f46:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f48:	4935      	ldr	r1, [pc, #212]	; (8005020 <HAL_GPIO_Init+0x310>)
 8004f4a:	69fb      	ldr	r3, [r7, #28]
 8004f4c:	089b      	lsrs	r3, r3, #2
 8004f4e:	3302      	adds	r3, #2
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f56:	4b3b      	ldr	r3, [pc, #236]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	43db      	mvns	r3, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4013      	ands	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f66:	683b      	ldr	r3, [r7, #0]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d003      	beq.n	8004f7a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004f72:	69ba      	ldr	r2, [r7, #24]
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004f7a:	4a32      	ldr	r2, [pc, #200]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004f7c:	69bb      	ldr	r3, [r7, #24]
 8004f7e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004f80:	4b30      	ldr	r3, [pc, #192]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f86:	693b      	ldr	r3, [r7, #16]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	69ba      	ldr	r2, [r7, #24]
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d003      	beq.n	8004fa4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	4313      	orrs	r3, r2
 8004fa2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fa4:	4a27      	ldr	r2, [pc, #156]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004fa6:	69bb      	ldr	r3, [r7, #24]
 8004fa8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004faa:	4b26      	ldr	r3, [pc, #152]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fb0:	693b      	ldr	r3, [r7, #16]
 8004fb2:	43db      	mvns	r3, r3
 8004fb4:	69ba      	ldr	r2, [r7, #24]
 8004fb6:	4013      	ands	r3, r2
 8004fb8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004fba:	683b      	ldr	r3, [r7, #0]
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d003      	beq.n	8004fce <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004fc6:	69ba      	ldr	r2, [r7, #24]
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	4313      	orrs	r3, r2
 8004fcc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004fce:	4a1d      	ldr	r2, [pc, #116]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004fd4:	4b1b      	ldr	r3, [pc, #108]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004fd6:	68db      	ldr	r3, [r3, #12]
 8004fd8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fda:	693b      	ldr	r3, [r7, #16]
 8004fdc:	43db      	mvns	r3, r3
 8004fde:	69ba      	ldr	r2, [r7, #24]
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004fe4:	683b      	ldr	r3, [r7, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d003      	beq.n	8004ff8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	693b      	ldr	r3, [r7, #16]
 8004ff4:	4313      	orrs	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ff8:	4a12      	ldr	r2, [pc, #72]	; (8005044 <HAL_GPIO_Init+0x334>)
 8004ffa:	69bb      	ldr	r3, [r7, #24]
 8004ffc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ffe:	69fb      	ldr	r3, [r7, #28]
 8005000:	3301      	adds	r3, #1
 8005002:	61fb      	str	r3, [r7, #28]
 8005004:	69fb      	ldr	r3, [r7, #28]
 8005006:	2b0f      	cmp	r3, #15
 8005008:	f67f ae90 	bls.w	8004d2c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800500c:	bf00      	nop
 800500e:	bf00      	nop
 8005010:	3724      	adds	r7, #36	; 0x24
 8005012:	46bd      	mov	sp, r7
 8005014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005018:	4770      	bx	lr
 800501a:	bf00      	nop
 800501c:	40023800 	.word	0x40023800
 8005020:	40013800 	.word	0x40013800
 8005024:	40020000 	.word	0x40020000
 8005028:	40020400 	.word	0x40020400
 800502c:	40020800 	.word	0x40020800
 8005030:	40020c00 	.word	0x40020c00
 8005034:	40021000 	.word	0x40021000
 8005038:	40021400 	.word	0x40021400
 800503c:	40021800 	.word	0x40021800
 8005040:	40021c00 	.word	0x40021c00
 8005044:	40013c00 	.word	0x40013c00

08005048 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005048:	b480      	push	{r7}
 800504a:	b083      	sub	sp, #12
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
 8005050:	460b      	mov	r3, r1
 8005052:	807b      	strh	r3, [r7, #2]
 8005054:	4613      	mov	r3, r2
 8005056:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005058:	787b      	ldrb	r3, [r7, #1]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d003      	beq.n	8005066 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800505e:	887a      	ldrh	r2, [r7, #2]
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005064:	e003      	b.n	800506e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005066:	887b      	ldrh	r3, [r7, #2]
 8005068:	041a      	lsls	r2, r3, #16
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	619a      	str	r2, [r3, #24]
}
 800506e:	bf00      	nop
 8005070:	370c      	adds	r7, #12
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
	...

0800507c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b086      	sub	sp, #24
 8005080:	af00      	add	r7, sp, #0
 8005082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d101      	bne.n	800508e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800508a:	2301      	movs	r3, #1
 800508c:	e264      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0301 	and.w	r3, r3, #1
 8005096:	2b00      	cmp	r3, #0
 8005098:	d075      	beq.n	8005186 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800509a:	4ba3      	ldr	r3, [pc, #652]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 800509c:	689b      	ldr	r3, [r3, #8]
 800509e:	f003 030c 	and.w	r3, r3, #12
 80050a2:	2b04      	cmp	r3, #4
 80050a4:	d00c      	beq.n	80050c0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050a6:	4ba0      	ldr	r3, [pc, #640]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80050a8:	689b      	ldr	r3, [r3, #8]
 80050aa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050ae:	2b08      	cmp	r3, #8
 80050b0:	d112      	bne.n	80050d8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050b2:	4b9d      	ldr	r3, [pc, #628]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050be:	d10b      	bne.n	80050d8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050c0:	4b99      	ldr	r3, [pc, #612]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d05b      	beq.n	8005184 <HAL_RCC_OscConfig+0x108>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	685b      	ldr	r3, [r3, #4]
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d157      	bne.n	8005184 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050d4:	2301      	movs	r3, #1
 80050d6:	e23f      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	685b      	ldr	r3, [r3, #4]
 80050dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e0:	d106      	bne.n	80050f0 <HAL_RCC_OscConfig+0x74>
 80050e2:	4b91      	ldr	r3, [pc, #580]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	4a90      	ldr	r2, [pc, #576]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80050e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050ec:	6013      	str	r3, [r2, #0]
 80050ee:	e01d      	b.n	800512c <HAL_RCC_OscConfig+0xb0>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	685b      	ldr	r3, [r3, #4]
 80050f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050f8:	d10c      	bne.n	8005114 <HAL_RCC_OscConfig+0x98>
 80050fa:	4b8b      	ldr	r3, [pc, #556]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4a8a      	ldr	r2, [pc, #552]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005104:	6013      	str	r3, [r2, #0]
 8005106:	4b88      	ldr	r3, [pc, #544]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a87      	ldr	r2, [pc, #540]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 800510c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005110:	6013      	str	r3, [r2, #0]
 8005112:	e00b      	b.n	800512c <HAL_RCC_OscConfig+0xb0>
 8005114:	4b84      	ldr	r3, [pc, #528]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	4a83      	ldr	r2, [pc, #524]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 800511a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800511e:	6013      	str	r3, [r2, #0]
 8005120:	4b81      	ldr	r3, [pc, #516]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a80      	ldr	r2, [pc, #512]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005126:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800512a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d013      	beq.n	800515c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005134:	f7fe fe6a 	bl	8003e0c <HAL_GetTick>
 8005138:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800513a:	e008      	b.n	800514e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800513c:	f7fe fe66 	bl	8003e0c <HAL_GetTick>
 8005140:	4602      	mov	r2, r0
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	1ad3      	subs	r3, r2, r3
 8005146:	2b64      	cmp	r3, #100	; 0x64
 8005148:	d901      	bls.n	800514e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e204      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800514e:	4b76      	ldr	r3, [pc, #472]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005156:	2b00      	cmp	r3, #0
 8005158:	d0f0      	beq.n	800513c <HAL_RCC_OscConfig+0xc0>
 800515a:	e014      	b.n	8005186 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fe fe56 	bl	8003e0c <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005164:	f7fe fe52 	bl	8003e0c <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b64      	cmp	r3, #100	; 0x64
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e1f0      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005176:	4b6c      	ldr	r3, [pc, #432]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0xe8>
 8005182:	e000      	b.n	8005186 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005184:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f003 0302 	and.w	r3, r3, #2
 800518e:	2b00      	cmp	r3, #0
 8005190:	d063      	beq.n	800525a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005192:	4b65      	ldr	r3, [pc, #404]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	f003 030c 	and.w	r3, r3, #12
 800519a:	2b00      	cmp	r3, #0
 800519c:	d00b      	beq.n	80051b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800519e:	4b62      	ldr	r3, [pc, #392]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051a6:	2b08      	cmp	r3, #8
 80051a8:	d11c      	bne.n	80051e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051aa:	4b5f      	ldr	r3, [pc, #380]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d116      	bne.n	80051e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b6:	4b5c      	ldr	r3, [pc, #368]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	f003 0302 	and.w	r3, r3, #2
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d005      	beq.n	80051ce <HAL_RCC_OscConfig+0x152>
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	68db      	ldr	r3, [r3, #12]
 80051c6:	2b01      	cmp	r3, #1
 80051c8:	d001      	beq.n	80051ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80051ca:	2301      	movs	r3, #1
 80051cc:	e1c4      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ce:	4b56      	ldr	r3, [pc, #344]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	691b      	ldr	r3, [r3, #16]
 80051da:	00db      	lsls	r3, r3, #3
 80051dc:	4952      	ldr	r1, [pc, #328]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80051de:	4313      	orrs	r3, r2
 80051e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051e2:	e03a      	b.n	800525a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d020      	beq.n	800522e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051ec:	4b4f      	ldr	r3, [pc, #316]	; (800532c <HAL_RCC_OscConfig+0x2b0>)
 80051ee:	2201      	movs	r2, #1
 80051f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f2:	f7fe fe0b 	bl	8003e0c <HAL_GetTick>
 80051f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051f8:	e008      	b.n	800520c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051fa:	f7fe fe07 	bl	8003e0c <HAL_GetTick>
 80051fe:	4602      	mov	r2, r0
 8005200:	693b      	ldr	r3, [r7, #16]
 8005202:	1ad3      	subs	r3, r2, r3
 8005204:	2b02      	cmp	r3, #2
 8005206:	d901      	bls.n	800520c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005208:	2303      	movs	r3, #3
 800520a:	e1a5      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800520c:	4b46      	ldr	r3, [pc, #280]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f003 0302 	and.w	r3, r3, #2
 8005214:	2b00      	cmp	r3, #0
 8005216:	d0f0      	beq.n	80051fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005218:	4b43      	ldr	r3, [pc, #268]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	691b      	ldr	r3, [r3, #16]
 8005224:	00db      	lsls	r3, r3, #3
 8005226:	4940      	ldr	r1, [pc, #256]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005228:	4313      	orrs	r3, r2
 800522a:	600b      	str	r3, [r1, #0]
 800522c:	e015      	b.n	800525a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800522e:	4b3f      	ldr	r3, [pc, #252]	; (800532c <HAL_RCC_OscConfig+0x2b0>)
 8005230:	2200      	movs	r2, #0
 8005232:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005234:	f7fe fdea 	bl	8003e0c <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800523c:	f7fe fde6 	bl	8003e0c <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b02      	cmp	r3, #2
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e184      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800524e:	4b36      	ldr	r3, [pc, #216]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f003 0302 	and.w	r3, r3, #2
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 0308 	and.w	r3, r3, #8
 8005262:	2b00      	cmp	r3, #0
 8005264:	d030      	beq.n	80052c8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	695b      	ldr	r3, [r3, #20]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d016      	beq.n	800529c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800526e:	4b30      	ldr	r3, [pc, #192]	; (8005330 <HAL_RCC_OscConfig+0x2b4>)
 8005270:	2201      	movs	r2, #1
 8005272:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005274:	f7fe fdca 	bl	8003e0c <HAL_GetTick>
 8005278:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800527a:	e008      	b.n	800528e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800527c:	f7fe fdc6 	bl	8003e0c <HAL_GetTick>
 8005280:	4602      	mov	r2, r0
 8005282:	693b      	ldr	r3, [r7, #16]
 8005284:	1ad3      	subs	r3, r2, r3
 8005286:	2b02      	cmp	r3, #2
 8005288:	d901      	bls.n	800528e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800528a:	2303      	movs	r3, #3
 800528c:	e164      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800528e:	4b26      	ldr	r3, [pc, #152]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 8005290:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d0f0      	beq.n	800527c <HAL_RCC_OscConfig+0x200>
 800529a:	e015      	b.n	80052c8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800529c:	4b24      	ldr	r3, [pc, #144]	; (8005330 <HAL_RCC_OscConfig+0x2b4>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052a2:	f7fe fdb3 	bl	8003e0c <HAL_GetTick>
 80052a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052a8:	e008      	b.n	80052bc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052aa:	f7fe fdaf 	bl	8003e0c <HAL_GetTick>
 80052ae:	4602      	mov	r2, r0
 80052b0:	693b      	ldr	r3, [r7, #16]
 80052b2:	1ad3      	subs	r3, r2, r3
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d901      	bls.n	80052bc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e14d      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052bc:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80052be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052c0:	f003 0302 	and.w	r3, r3, #2
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d1f0      	bne.n	80052aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	f003 0304 	and.w	r3, r3, #4
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	f000 80a0 	beq.w	8005416 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052d6:	2300      	movs	r3, #0
 80052d8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052da:	4b13      	ldr	r3, [pc, #76]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80052dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10f      	bne.n	8005306 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	4b0f      	ldr	r3, [pc, #60]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80052ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ee:	4a0e      	ldr	r2, [pc, #56]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80052f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052f4:	6413      	str	r3, [r2, #64]	; 0x40
 80052f6:	4b0c      	ldr	r3, [pc, #48]	; (8005328 <HAL_RCC_OscConfig+0x2ac>)
 80052f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052fe:	60bb      	str	r3, [r7, #8]
 8005300:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005302:	2301      	movs	r3, #1
 8005304:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005306:	4b0b      	ldr	r3, [pc, #44]	; (8005334 <HAL_RCC_OscConfig+0x2b8>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800530e:	2b00      	cmp	r3, #0
 8005310:	d121      	bne.n	8005356 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005312:	4b08      	ldr	r3, [pc, #32]	; (8005334 <HAL_RCC_OscConfig+0x2b8>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a07      	ldr	r2, [pc, #28]	; (8005334 <HAL_RCC_OscConfig+0x2b8>)
 8005318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800531c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800531e:	f7fe fd75 	bl	8003e0c <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005324:	e011      	b.n	800534a <HAL_RCC_OscConfig+0x2ce>
 8005326:	bf00      	nop
 8005328:	40023800 	.word	0x40023800
 800532c:	42470000 	.word	0x42470000
 8005330:	42470e80 	.word	0x42470e80
 8005334:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005338:	f7fe fd68 	bl	8003e0c <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	693b      	ldr	r3, [r7, #16]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	2b02      	cmp	r3, #2
 8005344:	d901      	bls.n	800534a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005346:	2303      	movs	r3, #3
 8005348:	e106      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800534a:	4b85      	ldr	r3, [pc, #532]	; (8005560 <HAL_RCC_OscConfig+0x4e4>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f0      	beq.n	8005338 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	689b      	ldr	r3, [r3, #8]
 800535a:	2b01      	cmp	r3, #1
 800535c:	d106      	bne.n	800536c <HAL_RCC_OscConfig+0x2f0>
 800535e:	4b81      	ldr	r3, [pc, #516]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	4a80      	ldr	r2, [pc, #512]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005364:	f043 0301 	orr.w	r3, r3, #1
 8005368:	6713      	str	r3, [r2, #112]	; 0x70
 800536a:	e01c      	b.n	80053a6 <HAL_RCC_OscConfig+0x32a>
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	689b      	ldr	r3, [r3, #8]
 8005370:	2b05      	cmp	r3, #5
 8005372:	d10c      	bne.n	800538e <HAL_RCC_OscConfig+0x312>
 8005374:	4b7b      	ldr	r3, [pc, #492]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005376:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005378:	4a7a      	ldr	r2, [pc, #488]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 800537a:	f043 0304 	orr.w	r3, r3, #4
 800537e:	6713      	str	r3, [r2, #112]	; 0x70
 8005380:	4b78      	ldr	r3, [pc, #480]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005382:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005384:	4a77      	ldr	r2, [pc, #476]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005386:	f043 0301 	orr.w	r3, r3, #1
 800538a:	6713      	str	r3, [r2, #112]	; 0x70
 800538c:	e00b      	b.n	80053a6 <HAL_RCC_OscConfig+0x32a>
 800538e:	4b75      	ldr	r3, [pc, #468]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005392:	4a74      	ldr	r2, [pc, #464]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005394:	f023 0301 	bic.w	r3, r3, #1
 8005398:	6713      	str	r3, [r2, #112]	; 0x70
 800539a:	4b72      	ldr	r3, [pc, #456]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	4a71      	ldr	r2, [pc, #452]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 80053a0:	f023 0304 	bic.w	r3, r3, #4
 80053a4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	689b      	ldr	r3, [r3, #8]
 80053aa:	2b00      	cmp	r3, #0
 80053ac:	d015      	beq.n	80053da <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053ae:	f7fe fd2d 	bl	8003e0c <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053b4:	e00a      	b.n	80053cc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b6:	f7fe fd29 	bl	8003e0c <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e0c5      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053cc:	4b65      	ldr	r3, [pc, #404]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d0ee      	beq.n	80053b6 <HAL_RCC_OscConfig+0x33a>
 80053d8:	e014      	b.n	8005404 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053da:	f7fe fd17 	bl	8003e0c <HAL_GetTick>
 80053de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053e0:	e00a      	b.n	80053f8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053e2:	f7fe fd13 	bl	8003e0c <HAL_GetTick>
 80053e6:	4602      	mov	r2, r0
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	1ad3      	subs	r3, r2, r3
 80053ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80053f0:	4293      	cmp	r3, r2
 80053f2:	d901      	bls.n	80053f8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053f4:	2303      	movs	r3, #3
 80053f6:	e0af      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053f8:	4b5a      	ldr	r3, [pc, #360]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 80053fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fc:	f003 0302 	and.w	r3, r3, #2
 8005400:	2b00      	cmp	r3, #0
 8005402:	d1ee      	bne.n	80053e2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005404:	7dfb      	ldrb	r3, [r7, #23]
 8005406:	2b01      	cmp	r3, #1
 8005408:	d105      	bne.n	8005416 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800540a:	4b56      	ldr	r3, [pc, #344]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 800540c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800540e:	4a55      	ldr	r2, [pc, #340]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005410:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005414:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	699b      	ldr	r3, [r3, #24]
 800541a:	2b00      	cmp	r3, #0
 800541c:	f000 809b 	beq.w	8005556 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005420:	4b50      	ldr	r3, [pc, #320]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	f003 030c 	and.w	r3, r3, #12
 8005428:	2b08      	cmp	r3, #8
 800542a:	d05c      	beq.n	80054e6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	699b      	ldr	r3, [r3, #24]
 8005430:	2b02      	cmp	r3, #2
 8005432:	d141      	bne.n	80054b8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005434:	4b4c      	ldr	r3, [pc, #304]	; (8005568 <HAL_RCC_OscConfig+0x4ec>)
 8005436:	2200      	movs	r2, #0
 8005438:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800543a:	f7fe fce7 	bl	8003e0c <HAL_GetTick>
 800543e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005440:	e008      	b.n	8005454 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005442:	f7fe fce3 	bl	8003e0c <HAL_GetTick>
 8005446:	4602      	mov	r2, r0
 8005448:	693b      	ldr	r3, [r7, #16]
 800544a:	1ad3      	subs	r3, r2, r3
 800544c:	2b02      	cmp	r3, #2
 800544e:	d901      	bls.n	8005454 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005450:	2303      	movs	r3, #3
 8005452:	e081      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005454:	4b43      	ldr	r3, [pc, #268]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545c:	2b00      	cmp	r3, #0
 800545e:	d1f0      	bne.n	8005442 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6a1b      	ldr	r3, [r3, #32]
 8005468:	431a      	orrs	r2, r3
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	019b      	lsls	r3, r3, #6
 8005470:	431a      	orrs	r2, r3
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005476:	085b      	lsrs	r3, r3, #1
 8005478:	3b01      	subs	r3, #1
 800547a:	041b      	lsls	r3, r3, #16
 800547c:	431a      	orrs	r2, r3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005482:	061b      	lsls	r3, r3, #24
 8005484:	4937      	ldr	r1, [pc, #220]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 8005486:	4313      	orrs	r3, r2
 8005488:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800548a:	4b37      	ldr	r3, [pc, #220]	; (8005568 <HAL_RCC_OscConfig+0x4ec>)
 800548c:	2201      	movs	r2, #1
 800548e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005490:	f7fe fcbc 	bl	8003e0c <HAL_GetTick>
 8005494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005496:	e008      	b.n	80054aa <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005498:	f7fe fcb8 	bl	8003e0c <HAL_GetTick>
 800549c:	4602      	mov	r2, r0
 800549e:	693b      	ldr	r3, [r7, #16]
 80054a0:	1ad3      	subs	r3, r2, r3
 80054a2:	2b02      	cmp	r3, #2
 80054a4:	d901      	bls.n	80054aa <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054a6:	2303      	movs	r3, #3
 80054a8:	e056      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054aa:	4b2e      	ldr	r3, [pc, #184]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d0f0      	beq.n	8005498 <HAL_RCC_OscConfig+0x41c>
 80054b6:	e04e      	b.n	8005556 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054b8:	4b2b      	ldr	r3, [pc, #172]	; (8005568 <HAL_RCC_OscConfig+0x4ec>)
 80054ba:	2200      	movs	r2, #0
 80054bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054be:	f7fe fca5 	bl	8003e0c <HAL_GetTick>
 80054c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054c4:	e008      	b.n	80054d8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054c6:	f7fe fca1 	bl	8003e0c <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	2b02      	cmp	r3, #2
 80054d2:	d901      	bls.n	80054d8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054d4:	2303      	movs	r3, #3
 80054d6:	e03f      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054d8:	4b22      	ldr	r3, [pc, #136]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d1f0      	bne.n	80054c6 <HAL_RCC_OscConfig+0x44a>
 80054e4:	e037      	b.n	8005556 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	699b      	ldr	r3, [r3, #24]
 80054ea:	2b01      	cmp	r3, #1
 80054ec:	d101      	bne.n	80054f2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054ee:	2301      	movs	r3, #1
 80054f0:	e032      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <HAL_RCC_OscConfig+0x4e8>)
 80054f4:	685b      	ldr	r3, [r3, #4]
 80054f6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	699b      	ldr	r3, [r3, #24]
 80054fc:	2b01      	cmp	r3, #1
 80054fe:	d028      	beq.n	8005552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800550a:	429a      	cmp	r2, r3
 800550c:	d121      	bne.n	8005552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005518:	429a      	cmp	r2, r3
 800551a:	d11a      	bne.n	8005552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800551c:	68fa      	ldr	r2, [r7, #12]
 800551e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005522:	4013      	ands	r3, r2
 8005524:	687a      	ldr	r2, [r7, #4]
 8005526:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005528:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800552a:	4293      	cmp	r3, r2
 800552c:	d111      	bne.n	8005552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005538:	085b      	lsrs	r3, r3, #1
 800553a:	3b01      	subs	r3, #1
 800553c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800553e:	429a      	cmp	r2, r3
 8005540:	d107      	bne.n	8005552 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800554e:	429a      	cmp	r2, r3
 8005550:	d001      	beq.n	8005556 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e000      	b.n	8005558 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3718      	adds	r7, #24
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40007000 	.word	0x40007000
 8005564:	40023800 	.word	0x40023800
 8005568:	42470060 	.word	0x42470060

0800556c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2b00      	cmp	r3, #0
 800557a:	d101      	bne.n	8005580 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	e0cc      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005580:	4b68      	ldr	r3, [pc, #416]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	683a      	ldr	r2, [r7, #0]
 800558a:	429a      	cmp	r2, r3
 800558c:	d90c      	bls.n	80055a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800558e:	4b65      	ldr	r3, [pc, #404]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	b2d2      	uxtb	r2, r2
 8005594:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005596:	4b63      	ldr	r3, [pc, #396]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f003 0307 	and.w	r3, r3, #7
 800559e:	683a      	ldr	r2, [r7, #0]
 80055a0:	429a      	cmp	r2, r3
 80055a2:	d001      	beq.n	80055a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e0b8      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0302 	and.w	r3, r3, #2
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d020      	beq.n	80055f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f003 0304 	and.w	r3, r3, #4
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d005      	beq.n	80055cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055c0:	4b59      	ldr	r3, [pc, #356]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	4a58      	ldr	r2, [pc, #352]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80055ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0308 	and.w	r3, r3, #8
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055d8:	4b53      	ldr	r3, [pc, #332]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	4a52      	ldr	r2, [pc, #328]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055e4:	4b50      	ldr	r3, [pc, #320]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055e6:	689b      	ldr	r3, [r3, #8]
 80055e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	494d      	ldr	r1, [pc, #308]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80055f2:	4313      	orrs	r3, r2
 80055f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f003 0301 	and.w	r3, r3, #1
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d044      	beq.n	800568c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	685b      	ldr	r3, [r3, #4]
 8005606:	2b01      	cmp	r3, #1
 8005608:	d107      	bne.n	800561a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800560a:	4b47      	ldr	r3, [pc, #284]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005612:	2b00      	cmp	r3, #0
 8005614:	d119      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005616:	2301      	movs	r3, #1
 8005618:	e07f      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b02      	cmp	r3, #2
 8005620:	d003      	beq.n	800562a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005626:	2b03      	cmp	r3, #3
 8005628:	d107      	bne.n	800563a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800562a:	4b3f      	ldr	r3, [pc, #252]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005632:	2b00      	cmp	r3, #0
 8005634:	d109      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005636:	2301      	movs	r3, #1
 8005638:	e06f      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800563a:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d101      	bne.n	800564a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e067      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	f023 0203 	bic.w	r2, r3, #3
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	4934      	ldr	r1, [pc, #208]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 8005658:	4313      	orrs	r3, r2
 800565a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800565c:	f7fe fbd6 	bl	8003e0c <HAL_GetTick>
 8005660:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005662:	e00a      	b.n	800567a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005664:	f7fe fbd2 	bl	8003e0c <HAL_GetTick>
 8005668:	4602      	mov	r2, r0
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	1ad3      	subs	r3, r2, r3
 800566e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005672:	4293      	cmp	r3, r2
 8005674:	d901      	bls.n	800567a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005676:	2303      	movs	r3, #3
 8005678:	e04f      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800567a:	4b2b      	ldr	r3, [pc, #172]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 800567c:	689b      	ldr	r3, [r3, #8]
 800567e:	f003 020c 	and.w	r2, r3, #12
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	685b      	ldr	r3, [r3, #4]
 8005686:	009b      	lsls	r3, r3, #2
 8005688:	429a      	cmp	r2, r3
 800568a:	d1eb      	bne.n	8005664 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800568c:	4b25      	ldr	r3, [pc, #148]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0307 	and.w	r3, r3, #7
 8005694:	683a      	ldr	r2, [r7, #0]
 8005696:	429a      	cmp	r2, r3
 8005698:	d20c      	bcs.n	80056b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800569a:	4b22      	ldr	r3, [pc, #136]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	b2d2      	uxtb	r2, r2
 80056a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056a2:	4b20      	ldr	r3, [pc, #128]	; (8005724 <HAL_RCC_ClockConfig+0x1b8>)
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	f003 0307 	and.w	r3, r3, #7
 80056aa:	683a      	ldr	r2, [r7, #0]
 80056ac:	429a      	cmp	r2, r3
 80056ae:	d001      	beq.n	80056b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056b0:	2301      	movs	r3, #1
 80056b2:	e032      	b.n	800571a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	f003 0304 	and.w	r3, r3, #4
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d008      	beq.n	80056d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056c0:	4b19      	ldr	r3, [pc, #100]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	68db      	ldr	r3, [r3, #12]
 80056cc:	4916      	ldr	r1, [pc, #88]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	4313      	orrs	r3, r2
 80056d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f003 0308 	and.w	r3, r3, #8
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d009      	beq.n	80056f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056de:	4b12      	ldr	r3, [pc, #72]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	691b      	ldr	r3, [r3, #16]
 80056ea:	00db      	lsls	r3, r3, #3
 80056ec:	490e      	ldr	r1, [pc, #56]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056ee:	4313      	orrs	r3, r2
 80056f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056f2:	f000 f821 	bl	8005738 <HAL_RCC_GetSysClockFreq>
 80056f6:	4602      	mov	r2, r0
 80056f8:	4b0b      	ldr	r3, [pc, #44]	; (8005728 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	091b      	lsrs	r3, r3, #4
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	490a      	ldr	r1, [pc, #40]	; (800572c <HAL_RCC_ClockConfig+0x1c0>)
 8005704:	5ccb      	ldrb	r3, [r1, r3]
 8005706:	fa22 f303 	lsr.w	r3, r2, r3
 800570a:	4a09      	ldr	r2, [pc, #36]	; (8005730 <HAL_RCC_ClockConfig+0x1c4>)
 800570c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800570e:	4b09      	ldr	r3, [pc, #36]	; (8005734 <HAL_RCC_ClockConfig+0x1c8>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	4618      	mov	r0, r3
 8005714:	f7fe f8c0 	bl	8003898 <HAL_InitTick>

  return HAL_OK;
 8005718:	2300      	movs	r3, #0
}
 800571a:	4618      	mov	r0, r3
 800571c:	3710      	adds	r7, #16
 800571e:	46bd      	mov	sp, r7
 8005720:	bd80      	pop	{r7, pc}
 8005722:	bf00      	nop
 8005724:	40023c00 	.word	0x40023c00
 8005728:	40023800 	.word	0x40023800
 800572c:	0800cab8 	.word	0x0800cab8
 8005730:	200001ec 	.word	0x200001ec
 8005734:	200001f0 	.word	0x200001f0

08005738 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005738:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800573c:	b084      	sub	sp, #16
 800573e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005740:	2300      	movs	r3, #0
 8005742:	607b      	str	r3, [r7, #4]
 8005744:	2300      	movs	r3, #0
 8005746:	60fb      	str	r3, [r7, #12]
 8005748:	2300      	movs	r3, #0
 800574a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800574c:	2300      	movs	r3, #0
 800574e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005750:	4b67      	ldr	r3, [pc, #412]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	f003 030c 	and.w	r3, r3, #12
 8005758:	2b08      	cmp	r3, #8
 800575a:	d00d      	beq.n	8005778 <HAL_RCC_GetSysClockFreq+0x40>
 800575c:	2b08      	cmp	r3, #8
 800575e:	f200 80bd 	bhi.w	80058dc <HAL_RCC_GetSysClockFreq+0x1a4>
 8005762:	2b00      	cmp	r3, #0
 8005764:	d002      	beq.n	800576c <HAL_RCC_GetSysClockFreq+0x34>
 8005766:	2b04      	cmp	r3, #4
 8005768:	d003      	beq.n	8005772 <HAL_RCC_GetSysClockFreq+0x3a>
 800576a:	e0b7      	b.n	80058dc <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800576c:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800576e:	60bb      	str	r3, [r7, #8]
       break;
 8005770:	e0b7      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005772:	4b61      	ldr	r3, [pc, #388]	; (80058f8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005774:	60bb      	str	r3, [r7, #8]
      break;
 8005776:	e0b4      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005778:	4b5d      	ldr	r3, [pc, #372]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800577a:	685b      	ldr	r3, [r3, #4]
 800577c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005780:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005782:	4b5b      	ldr	r3, [pc, #364]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005784:	685b      	ldr	r3, [r3, #4]
 8005786:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800578a:	2b00      	cmp	r3, #0
 800578c:	d04d      	beq.n	800582a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800578e:	4b58      	ldr	r3, [pc, #352]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005790:	685b      	ldr	r3, [r3, #4]
 8005792:	099b      	lsrs	r3, r3, #6
 8005794:	461a      	mov	r2, r3
 8005796:	f04f 0300 	mov.w	r3, #0
 800579a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800579e:	f04f 0100 	mov.w	r1, #0
 80057a2:	ea02 0800 	and.w	r8, r2, r0
 80057a6:	ea03 0901 	and.w	r9, r3, r1
 80057aa:	4640      	mov	r0, r8
 80057ac:	4649      	mov	r1, r9
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	014b      	lsls	r3, r1, #5
 80057b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057bc:	0142      	lsls	r2, r0, #5
 80057be:	4610      	mov	r0, r2
 80057c0:	4619      	mov	r1, r3
 80057c2:	ebb0 0008 	subs.w	r0, r0, r8
 80057c6:	eb61 0109 	sbc.w	r1, r1, r9
 80057ca:	f04f 0200 	mov.w	r2, #0
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	018b      	lsls	r3, r1, #6
 80057d4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057d8:	0182      	lsls	r2, r0, #6
 80057da:	1a12      	subs	r2, r2, r0
 80057dc:	eb63 0301 	sbc.w	r3, r3, r1
 80057e0:	f04f 0000 	mov.w	r0, #0
 80057e4:	f04f 0100 	mov.w	r1, #0
 80057e8:	00d9      	lsls	r1, r3, #3
 80057ea:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057ee:	00d0      	lsls	r0, r2, #3
 80057f0:	4602      	mov	r2, r0
 80057f2:	460b      	mov	r3, r1
 80057f4:	eb12 0208 	adds.w	r2, r2, r8
 80057f8:	eb43 0309 	adc.w	r3, r3, r9
 80057fc:	f04f 0000 	mov.w	r0, #0
 8005800:	f04f 0100 	mov.w	r1, #0
 8005804:	0259      	lsls	r1, r3, #9
 8005806:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800580a:	0250      	lsls	r0, r2, #9
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4610      	mov	r0, r2
 8005812:	4619      	mov	r1, r3
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	461a      	mov	r2, r3
 8005818:	f04f 0300 	mov.w	r3, #0
 800581c:	f7fb fa0c 	bl	8000c38 <__aeabi_uldivmod>
 8005820:	4602      	mov	r2, r0
 8005822:	460b      	mov	r3, r1
 8005824:	4613      	mov	r3, r2
 8005826:	60fb      	str	r3, [r7, #12]
 8005828:	e04a      	b.n	80058c0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800582a:	4b31      	ldr	r3, [pc, #196]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	099b      	lsrs	r3, r3, #6
 8005830:	461a      	mov	r2, r3
 8005832:	f04f 0300 	mov.w	r3, #0
 8005836:	f240 10ff 	movw	r0, #511	; 0x1ff
 800583a:	f04f 0100 	mov.w	r1, #0
 800583e:	ea02 0400 	and.w	r4, r2, r0
 8005842:	ea03 0501 	and.w	r5, r3, r1
 8005846:	4620      	mov	r0, r4
 8005848:	4629      	mov	r1, r5
 800584a:	f04f 0200 	mov.w	r2, #0
 800584e:	f04f 0300 	mov.w	r3, #0
 8005852:	014b      	lsls	r3, r1, #5
 8005854:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005858:	0142      	lsls	r2, r0, #5
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	1b00      	subs	r0, r0, r4
 8005860:	eb61 0105 	sbc.w	r1, r1, r5
 8005864:	f04f 0200 	mov.w	r2, #0
 8005868:	f04f 0300 	mov.w	r3, #0
 800586c:	018b      	lsls	r3, r1, #6
 800586e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005872:	0182      	lsls	r2, r0, #6
 8005874:	1a12      	subs	r2, r2, r0
 8005876:	eb63 0301 	sbc.w	r3, r3, r1
 800587a:	f04f 0000 	mov.w	r0, #0
 800587e:	f04f 0100 	mov.w	r1, #0
 8005882:	00d9      	lsls	r1, r3, #3
 8005884:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005888:	00d0      	lsls	r0, r2, #3
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	1912      	adds	r2, r2, r4
 8005890:	eb45 0303 	adc.w	r3, r5, r3
 8005894:	f04f 0000 	mov.w	r0, #0
 8005898:	f04f 0100 	mov.w	r1, #0
 800589c:	0299      	lsls	r1, r3, #10
 800589e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058a2:	0290      	lsls	r0, r2, #10
 80058a4:	4602      	mov	r2, r0
 80058a6:	460b      	mov	r3, r1
 80058a8:	4610      	mov	r0, r2
 80058aa:	4619      	mov	r1, r3
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	461a      	mov	r2, r3
 80058b0:	f04f 0300 	mov.w	r3, #0
 80058b4:	f7fb f9c0 	bl	8000c38 <__aeabi_uldivmod>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4613      	mov	r3, r2
 80058be:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058c0:	4b0b      	ldr	r3, [pc, #44]	; (80058f0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058c2:	685b      	ldr	r3, [r3, #4]
 80058c4:	0c1b      	lsrs	r3, r3, #16
 80058c6:	f003 0303 	and.w	r3, r3, #3
 80058ca:	3301      	adds	r3, #1
 80058cc:	005b      	lsls	r3, r3, #1
 80058ce:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058d8:	60bb      	str	r3, [r7, #8]
      break;
 80058da:	e002      	b.n	80058e2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058dc:	4b05      	ldr	r3, [pc, #20]	; (80058f4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058de:	60bb      	str	r3, [r7, #8]
      break;
 80058e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058e2:	68bb      	ldr	r3, [r7, #8]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3710      	adds	r7, #16
 80058e8:	46bd      	mov	sp, r7
 80058ea:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058ee:	bf00      	nop
 80058f0:	40023800 	.word	0x40023800
 80058f4:	00f42400 	.word	0x00f42400
 80058f8:	007a1200 	.word	0x007a1200

080058fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058fc:	b480      	push	{r7}
 80058fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005900:	4b03      	ldr	r3, [pc, #12]	; (8005910 <HAL_RCC_GetHCLKFreq+0x14>)
 8005902:	681b      	ldr	r3, [r3, #0]
}
 8005904:	4618      	mov	r0, r3
 8005906:	46bd      	mov	sp, r7
 8005908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590c:	4770      	bx	lr
 800590e:	bf00      	nop
 8005910:	200001ec 	.word	0x200001ec

08005914 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005914:	b580      	push	{r7, lr}
 8005916:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005918:	f7ff fff0 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 800591c:	4602      	mov	r2, r0
 800591e:	4b05      	ldr	r3, [pc, #20]	; (8005934 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	0a9b      	lsrs	r3, r3, #10
 8005924:	f003 0307 	and.w	r3, r3, #7
 8005928:	4903      	ldr	r1, [pc, #12]	; (8005938 <HAL_RCC_GetPCLK1Freq+0x24>)
 800592a:	5ccb      	ldrb	r3, [r1, r3]
 800592c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005930:	4618      	mov	r0, r3
 8005932:	bd80      	pop	{r7, pc}
 8005934:	40023800 	.word	0x40023800
 8005938:	0800cac8 	.word	0x0800cac8

0800593c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800593c:	b580      	push	{r7, lr}
 800593e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005940:	f7ff ffdc 	bl	80058fc <HAL_RCC_GetHCLKFreq>
 8005944:	4602      	mov	r2, r0
 8005946:	4b05      	ldr	r3, [pc, #20]	; (800595c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005948:	689b      	ldr	r3, [r3, #8]
 800594a:	0b5b      	lsrs	r3, r3, #13
 800594c:	f003 0307 	and.w	r3, r3, #7
 8005950:	4903      	ldr	r1, [pc, #12]	; (8005960 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005952:	5ccb      	ldrb	r3, [r1, r3]
 8005954:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005958:	4618      	mov	r0, r3
 800595a:	bd80      	pop	{r7, pc}
 800595c:	40023800 	.word	0x40023800
 8005960:	0800cac8 	.word	0x0800cac8

08005964 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005964:	b480      	push	{r7}
 8005966:	b083      	sub	sp, #12
 8005968:	af00      	add	r7, sp, #0
 800596a:	6078      	str	r0, [r7, #4]
 800596c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	220f      	movs	r2, #15
 8005972:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005974:	4b12      	ldr	r3, [pc, #72]	; (80059c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005976:	689b      	ldr	r3, [r3, #8]
 8005978:	f003 0203 	and.w	r2, r3, #3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005980:	4b0f      	ldr	r3, [pc, #60]	; (80059c0 <HAL_RCC_GetClockConfig+0x5c>)
 8005982:	689b      	ldr	r3, [r3, #8]
 8005984:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800598c:	4b0c      	ldr	r3, [pc, #48]	; (80059c0 <HAL_RCC_GetClockConfig+0x5c>)
 800598e:	689b      	ldr	r3, [r3, #8]
 8005990:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005998:	4b09      	ldr	r3, [pc, #36]	; (80059c0 <HAL_RCC_GetClockConfig+0x5c>)
 800599a:	689b      	ldr	r3, [r3, #8]
 800599c:	08db      	lsrs	r3, r3, #3
 800599e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059a6:	4b07      	ldr	r3, [pc, #28]	; (80059c4 <HAL_RCC_GetClockConfig+0x60>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0207 	and.w	r2, r3, #7
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	601a      	str	r2, [r3, #0]
}
 80059b2:	bf00      	nop
 80059b4:	370c      	adds	r7, #12
 80059b6:	46bd      	mov	sp, r7
 80059b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059bc:	4770      	bx	lr
 80059be:	bf00      	nop
 80059c0:	40023800 	.word	0x40023800
 80059c4:	40023c00 	.word	0x40023c00

080059c8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059c8:	b580      	push	{r7, lr}
 80059ca:	b082      	sub	sp, #8
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d101      	bne.n	80059da <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059d6:	2301      	movs	r3, #1
 80059d8:	e07b      	b.n	8005ad2 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d108      	bne.n	80059f4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	685b      	ldr	r3, [r3, #4]
 80059e6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059ea:	d009      	beq.n	8005a00 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2200      	movs	r2, #0
 80059f0:	61da      	str	r2, [r3, #28]
 80059f2:	e005      	b.n	8005a00 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2200      	movs	r2, #0
 80059f8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	2200      	movs	r2, #0
 80059fe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a0c:	b2db      	uxtb	r3, r3
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d106      	bne.n	8005a20 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	2200      	movs	r2, #0
 8005a16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a1a:	6878      	ldr	r0, [r7, #4]
 8005a1c:	f7fd fa94 	bl	8002f48 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2202      	movs	r2, #2
 8005a24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	681a      	ldr	r2, [r3, #0]
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a36:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	685b      	ldr	r3, [r3, #4]
 8005a3c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	689b      	ldr	r3, [r3, #8]
 8005a44:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a48:	431a      	orrs	r2, r3
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	68db      	ldr	r3, [r3, #12]
 8005a4e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a52:	431a      	orrs	r2, r3
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	691b      	ldr	r3, [r3, #16]
 8005a58:	f003 0302 	and.w	r3, r3, #2
 8005a5c:	431a      	orrs	r2, r3
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	695b      	ldr	r3, [r3, #20]
 8005a62:	f003 0301 	and.w	r3, r3, #1
 8005a66:	431a      	orrs	r2, r3
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a70:	431a      	orrs	r2, r3
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	69db      	ldr	r3, [r3, #28]
 8005a76:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005a7a:	431a      	orrs	r2, r3
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6a1b      	ldr	r3, [r3, #32]
 8005a80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a84:	ea42 0103 	orr.w	r1, r2, r3
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a8c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	430a      	orrs	r2, r1
 8005a96:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	0c1b      	lsrs	r3, r3, #16
 8005a9e:	f003 0104 	and.w	r1, r3, #4
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005aa6:	f003 0210 	and.w	r2, r3, #16
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	69da      	ldr	r2, [r3, #28]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005ac0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2201      	movs	r2, #1
 8005acc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005ad0:	2300      	movs	r3, #0
}
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	3708      	adds	r7, #8
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	bd80      	pop	{r7, pc}

08005ada <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b088      	sub	sp, #32
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	60f8      	str	r0, [r7, #12]
 8005ae2:	60b9      	str	r1, [r7, #8]
 8005ae4:	603b      	str	r3, [r7, #0]
 8005ae6:	4613      	mov	r3, r2
 8005ae8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005aea:	2300      	movs	r3, #0
 8005aec:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005af4:	2b01      	cmp	r3, #1
 8005af6:	d101      	bne.n	8005afc <HAL_SPI_Transmit+0x22>
 8005af8:	2302      	movs	r3, #2
 8005afa:	e126      	b.n	8005d4a <HAL_SPI_Transmit+0x270>
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b04:	f7fe f982 	bl	8003e0c <HAL_GetTick>
 8005b08:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b0a:	88fb      	ldrh	r3, [r7, #6]
 8005b0c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b0e:	68fb      	ldr	r3, [r7, #12]
 8005b10:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b14:	b2db      	uxtb	r3, r3
 8005b16:	2b01      	cmp	r3, #1
 8005b18:	d002      	beq.n	8005b20 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b1a:	2302      	movs	r3, #2
 8005b1c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b1e:	e10b      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b20:	68bb      	ldr	r3, [r7, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d002      	beq.n	8005b2c <HAL_SPI_Transmit+0x52>
 8005b26:	88fb      	ldrh	r3, [r7, #6]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d102      	bne.n	8005b32 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b2c:	2301      	movs	r3, #1
 8005b2e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b30:	e102      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	2203      	movs	r2, #3
 8005b36:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	68ba      	ldr	r2, [r7, #8]
 8005b44:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	88fa      	ldrh	r2, [r7, #6]
 8005b4a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	88fa      	ldrh	r2, [r7, #6]
 8005b50:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	2200      	movs	r2, #0
 8005b56:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	2200      	movs	r2, #0
 8005b5c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2200      	movs	r2, #0
 8005b62:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	2200      	movs	r2, #0
 8005b68:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2200      	movs	r2, #0
 8005b6e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	689b      	ldr	r3, [r3, #8]
 8005b74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005b78:	d10f      	bne.n	8005b9a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	681a      	ldr	r2, [r3, #0]
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b88:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005b98:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba4:	2b40      	cmp	r3, #64	; 0x40
 8005ba6:	d007      	beq.n	8005bb8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	681a      	ldr	r2, [r3, #0]
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bb6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	68db      	ldr	r3, [r3, #12]
 8005bbc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bc0:	d14b      	bne.n	8005c5a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	685b      	ldr	r3, [r3, #4]
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d002      	beq.n	8005bd0 <HAL_SPI_Transmit+0xf6>
 8005bca:	8afb      	ldrh	r3, [r7, #22]
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d13e      	bne.n	8005c4e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bd4:	881a      	ldrh	r2, [r3, #0]
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005be0:	1c9a      	adds	r2, r3, #2
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005bea:	b29b      	uxth	r3, r3
 8005bec:	3b01      	subs	r3, #1
 8005bee:	b29a      	uxth	r2, r3
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005bf4:	e02b      	b.n	8005c4e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	689b      	ldr	r3, [r3, #8]
 8005bfc:	f003 0302 	and.w	r3, r3, #2
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d112      	bne.n	8005c2a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	881a      	ldrh	r2, [r3, #0]
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c14:	1c9a      	adds	r2, r3, #2
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c1e:	b29b      	uxth	r3, r3
 8005c20:	3b01      	subs	r3, #1
 8005c22:	b29a      	uxth	r2, r3
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c28:	e011      	b.n	8005c4e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c2a:	f7fe f8ef 	bl	8003e0c <HAL_GetTick>
 8005c2e:	4602      	mov	r2, r0
 8005c30:	69bb      	ldr	r3, [r7, #24]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	683a      	ldr	r2, [r7, #0]
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d803      	bhi.n	8005c42 <HAL_SPI_Transmit+0x168>
 8005c3a:	683b      	ldr	r3, [r7, #0]
 8005c3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c40:	d102      	bne.n	8005c48 <HAL_SPI_Transmit+0x16e>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d102      	bne.n	8005c4e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c48:	2303      	movs	r3, #3
 8005c4a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c4c:	e074      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c52:	b29b      	uxth	r3, r3
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d1ce      	bne.n	8005bf6 <HAL_SPI_Transmit+0x11c>
 8005c58:	e04c      	b.n	8005cf4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	685b      	ldr	r3, [r3, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d002      	beq.n	8005c68 <HAL_SPI_Transmit+0x18e>
 8005c62:	8afb      	ldrh	r3, [r7, #22]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	d140      	bne.n	8005cea <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	330c      	adds	r3, #12
 8005c72:	7812      	ldrb	r2, [r2, #0]
 8005c74:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c7a:	1c5a      	adds	r2, r3, #1
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c84:	b29b      	uxth	r3, r3
 8005c86:	3b01      	subs	r3, #1
 8005c88:	b29a      	uxth	r2, r3
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005c8e:	e02c      	b.n	8005cea <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	f003 0302 	and.w	r3, r3, #2
 8005c9a:	2b02      	cmp	r3, #2
 8005c9c:	d113      	bne.n	8005cc6 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	330c      	adds	r3, #12
 8005ca8:	7812      	ldrb	r2, [r2, #0]
 8005caa:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb0:	1c5a      	adds	r2, r3, #1
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cba:	b29b      	uxth	r3, r3
 8005cbc:	3b01      	subs	r3, #1
 8005cbe:	b29a      	uxth	r2, r3
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cc4:	e011      	b.n	8005cea <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cc6:	f7fe f8a1 	bl	8003e0c <HAL_GetTick>
 8005cca:	4602      	mov	r2, r0
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	1ad3      	subs	r3, r2, r3
 8005cd0:	683a      	ldr	r2, [r7, #0]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d803      	bhi.n	8005cde <HAL_SPI_Transmit+0x204>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d102      	bne.n	8005ce4 <HAL_SPI_Transmit+0x20a>
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d102      	bne.n	8005cea <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005ce4:	2303      	movs	r3, #3
 8005ce6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005ce8:	e026      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cee:	b29b      	uxth	r3, r3
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d1cd      	bne.n	8005c90 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005cf4:	69ba      	ldr	r2, [r7, #24]
 8005cf6:	6839      	ldr	r1, [r7, #0]
 8005cf8:	68f8      	ldr	r0, [r7, #12]
 8005cfa:	f000 f8b3 	bl	8005e64 <SPI_EndRxTxTransaction>
 8005cfe:	4603      	mov	r3, r0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d002      	beq.n	8005d0a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	2220      	movs	r2, #32
 8005d08:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d10a      	bne.n	8005d28 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d12:	2300      	movs	r3, #0
 8005d14:	613b      	str	r3, [r7, #16]
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	689b      	ldr	r3, [r3, #8]
 8005d24:	613b      	str	r3, [r7, #16]
 8005d26:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d002      	beq.n	8005d36 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d30:	2301      	movs	r3, #1
 8005d32:	77fb      	strb	r3, [r7, #31]
 8005d34:	e000      	b.n	8005d38 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d36:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2201      	movs	r2, #1
 8005d3c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	2200      	movs	r2, #0
 8005d44:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d48:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	3720      	adds	r7, #32
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
	...

08005d54 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b088      	sub	sp, #32
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	60f8      	str	r0, [r7, #12]
 8005d5c:	60b9      	str	r1, [r7, #8]
 8005d5e:	603b      	str	r3, [r7, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d64:	f7fe f852 	bl	8003e0c <HAL_GetTick>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6c:	1a9b      	subs	r3, r3, r2
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	4413      	add	r3, r2
 8005d72:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005d74:	f7fe f84a 	bl	8003e0c <HAL_GetTick>
 8005d78:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005d7a:	4b39      	ldr	r3, [pc, #228]	; (8005e60 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	015b      	lsls	r3, r3, #5
 8005d80:	0d1b      	lsrs	r3, r3, #20
 8005d82:	69fa      	ldr	r2, [r7, #28]
 8005d84:	fb02 f303 	mul.w	r3, r2, r3
 8005d88:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005d8a:	e054      	b.n	8005e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d92:	d050      	beq.n	8005e36 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005d94:	f7fe f83a 	bl	8003e0c <HAL_GetTick>
 8005d98:	4602      	mov	r2, r0
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	1ad3      	subs	r3, r2, r3
 8005d9e:	69fa      	ldr	r2, [r7, #28]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d902      	bls.n	8005daa <SPI_WaitFlagStateUntilTimeout+0x56>
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d13d      	bne.n	8005e26 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	685a      	ldr	r2, [r3, #4]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005db8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	685b      	ldr	r3, [r3, #4]
 8005dbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dc2:	d111      	bne.n	8005de8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	689b      	ldr	r3, [r3, #8]
 8005dc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dcc:	d004      	beq.n	8005dd8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005dd6:	d107      	bne.n	8005de8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	681a      	ldr	r2, [r3, #0]
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005de6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005dec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005df0:	d10f      	bne.n	8005e12 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	681a      	ldr	r2, [r3, #0]
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681a      	ldr	r2, [r3, #0]
 8005e08:	68fb      	ldr	r3, [r7, #12]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e10:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2201      	movs	r2, #1
 8005e16:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e017      	b.n	8005e56 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e26:	697b      	ldr	r3, [r7, #20]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d101      	bne.n	8005e30 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e30:	697b      	ldr	r3, [r7, #20]
 8005e32:	3b01      	subs	r3, #1
 8005e34:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	689a      	ldr	r2, [r3, #8]
 8005e3c:	68bb      	ldr	r3, [r7, #8]
 8005e3e:	4013      	ands	r3, r2
 8005e40:	68ba      	ldr	r2, [r7, #8]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	bf0c      	ite	eq
 8005e46:	2301      	moveq	r3, #1
 8005e48:	2300      	movne	r3, #0
 8005e4a:	b2db      	uxtb	r3, r3
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	79fb      	ldrb	r3, [r7, #7]
 8005e50:	429a      	cmp	r2, r3
 8005e52:	d19b      	bne.n	8005d8c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3720      	adds	r7, #32
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}
 8005e5e:	bf00      	nop
 8005e60:	200001ec 	.word	0x200001ec

08005e64 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e64:	b580      	push	{r7, lr}
 8005e66:	b088      	sub	sp, #32
 8005e68:	af02      	add	r7, sp, #8
 8005e6a:	60f8      	str	r0, [r7, #12]
 8005e6c:	60b9      	str	r1, [r7, #8]
 8005e6e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005e70:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <SPI_EndRxTxTransaction+0x7c>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <SPI_EndRxTxTransaction+0x80>)
 8005e76:	fba2 2303 	umull	r2, r3, r2, r3
 8005e7a:	0d5b      	lsrs	r3, r3, #21
 8005e7c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005e80:	fb02 f303 	mul.w	r3, r2, r3
 8005e84:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	685b      	ldr	r3, [r3, #4]
 8005e8a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005e8e:	d112      	bne.n	8005eb6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	9300      	str	r3, [sp, #0]
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2200      	movs	r2, #0
 8005e98:	2180      	movs	r1, #128	; 0x80
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f7ff ff5a 	bl	8005d54 <SPI_WaitFlagStateUntilTimeout>
 8005ea0:	4603      	mov	r3, r0
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d016      	beq.n	8005ed4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005eaa:	f043 0220 	orr.w	r2, r3, #32
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eb2:	2303      	movs	r3, #3
 8005eb4:	e00f      	b.n	8005ed6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eb6:	697b      	ldr	r3, [r7, #20]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d00a      	beq.n	8005ed2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ebc:	697b      	ldr	r3, [r7, #20]
 8005ebe:	3b01      	subs	r3, #1
 8005ec0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ecc:	2b80      	cmp	r3, #128	; 0x80
 8005ece:	d0f2      	beq.n	8005eb6 <SPI_EndRxTxTransaction+0x52>
 8005ed0:	e000      	b.n	8005ed4 <SPI_EndRxTxTransaction+0x70>
        break;
 8005ed2:	bf00      	nop
  }

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3718      	adds	r7, #24
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	200001ec 	.word	0x200001ec
 8005ee4:	165e9f81 	.word	0x165e9f81

08005ee8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b082      	sub	sp, #8
 8005eec:	af00      	add	r7, sp, #0
 8005eee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d101      	bne.n	8005efa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	e041      	b.n	8005f7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f00:	b2db      	uxtb	r3, r3
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d106      	bne.n	8005f14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2200      	movs	r2, #0
 8005f0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f0e:	6878      	ldr	r0, [r7, #4]
 8005f10:	f7fd f882 	bl	8003018 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	2202      	movs	r2, #2
 8005f18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	3304      	adds	r3, #4
 8005f24:	4619      	mov	r1, r3
 8005f26:	4610      	mov	r0, r2
 8005f28:	f000 fcd0 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	2201      	movs	r2, #1
 8005f30:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	2201      	movs	r2, #1
 8005f38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
	...

08005f88 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f96:	b2db      	uxtb	r3, r3
 8005f98:	2b01      	cmp	r3, #1
 8005f9a:	d001      	beq.n	8005fa0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005f9c:	2301      	movs	r3, #1
 8005f9e:	e046      	b.n	800602e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2202      	movs	r2, #2
 8005fa4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	4a23      	ldr	r2, [pc, #140]	; (800603c <HAL_TIM_Base_Start+0xb4>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d022      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x70>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fba:	d01d      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x70>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1f      	ldr	r2, [pc, #124]	; (8006040 <HAL_TIM_Base_Start+0xb8>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d018      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x70>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1e      	ldr	r2, [pc, #120]	; (8006044 <HAL_TIM_Base_Start+0xbc>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d013      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x70>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a1c      	ldr	r2, [pc, #112]	; (8006048 <HAL_TIM_Base_Start+0xc0>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d00e      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x70>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a1b      	ldr	r2, [pc, #108]	; (800604c <HAL_TIM_Base_Start+0xc4>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d009      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x70>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a19      	ldr	r2, [pc, #100]	; (8006050 <HAL_TIM_Base_Start+0xc8>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d004      	beq.n	8005ff8 <HAL_TIM_Base_Start+0x70>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a18      	ldr	r2, [pc, #96]	; (8006054 <HAL_TIM_Base_Start+0xcc>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d111      	bne.n	800601c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	689b      	ldr	r3, [r3, #8]
 8005ffe:	f003 0307 	and.w	r3, r3, #7
 8006002:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2b06      	cmp	r3, #6
 8006008:	d010      	beq.n	800602c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	681a      	ldr	r2, [r3, #0]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f042 0201 	orr.w	r2, r2, #1
 8006018:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800601a:	e007      	b.n	800602c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681a      	ldr	r2, [r3, #0]
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	f042 0201 	orr.w	r2, r2, #1
 800602a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800602c:	2300      	movs	r3, #0
}
 800602e:	4618      	mov	r0, r3
 8006030:	3714      	adds	r7, #20
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40010000 	.word	0x40010000
 8006040:	40000400 	.word	0x40000400
 8006044:	40000800 	.word	0x40000800
 8006048:	40000c00 	.word	0x40000c00
 800604c:	40010400 	.word	0x40010400
 8006050:	40014000 	.word	0x40014000
 8006054:	40001800 	.word	0x40001800

08006058 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006058:	b480      	push	{r7}
 800605a:	b085      	sub	sp, #20
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b01      	cmp	r3, #1
 800606a:	d001      	beq.n	8006070 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e04e      	b.n	800610e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	2202      	movs	r2, #2
 8006074:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	f042 0201 	orr.w	r2, r2, #1
 8006086:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	4a23      	ldr	r2, [pc, #140]	; (800611c <HAL_TIM_Base_Start_IT+0xc4>)
 800608e:	4293      	cmp	r3, r2
 8006090:	d022      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800609a:	d01d      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	4a1f      	ldr	r2, [pc, #124]	; (8006120 <HAL_TIM_Base_Start_IT+0xc8>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d018      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	4a1e      	ldr	r2, [pc, #120]	; (8006124 <HAL_TIM_Base_Start_IT+0xcc>)
 80060ac:	4293      	cmp	r3, r2
 80060ae:	d013      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <HAL_TIM_Base_Start_IT+0xd0>)
 80060b6:	4293      	cmp	r3, r2
 80060b8:	d00e      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	4a1b      	ldr	r2, [pc, #108]	; (800612c <HAL_TIM_Base_Start_IT+0xd4>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d009      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	4a19      	ldr	r2, [pc, #100]	; (8006130 <HAL_TIM_Base_Start_IT+0xd8>)
 80060ca:	4293      	cmp	r3, r2
 80060cc:	d004      	beq.n	80060d8 <HAL_TIM_Base_Start_IT+0x80>
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	4a18      	ldr	r2, [pc, #96]	; (8006134 <HAL_TIM_Base_Start_IT+0xdc>)
 80060d4:	4293      	cmp	r3, r2
 80060d6:	d111      	bne.n	80060fc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	689b      	ldr	r3, [r3, #8]
 80060de:	f003 0307 	and.w	r3, r3, #7
 80060e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	2b06      	cmp	r3, #6
 80060e8:	d010      	beq.n	800610c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f042 0201 	orr.w	r2, r2, #1
 80060f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80060fa:	e007      	b.n	800610c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	681a      	ldr	r2, [r3, #0]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	f042 0201 	orr.w	r2, r2, #1
 800610a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	3714      	adds	r7, #20
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00
 800612c:	40010400 	.word	0x40010400
 8006130:	40014000 	.word	0x40014000
 8006134:	40001800 	.word	0x40001800

08006138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d101      	bne.n	800614a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006146:	2301      	movs	r3, #1
 8006148:	e041      	b.n	80061ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006150:	b2db      	uxtb	r3, r3
 8006152:	2b00      	cmp	r3, #0
 8006154:	d106      	bne.n	8006164 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800615e:	6878      	ldr	r0, [r7, #4]
 8006160:	f7fc ffd8 	bl	8003114 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	2202      	movs	r2, #2
 8006168:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681a      	ldr	r2, [r3, #0]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	3304      	adds	r3, #4
 8006174:	4619      	mov	r1, r3
 8006176:	4610      	mov	r0, r2
 8006178:	f000 fba8 	bl	80068cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2201      	movs	r2, #1
 8006198:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80061cc:	2300      	movs	r3, #0
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3708      	adds	r7, #8
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}
	...

080061d8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d109      	bne.n	80061fc <HAL_TIM_PWM_Start+0x24>
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	2b01      	cmp	r3, #1
 80061f2:	bf14      	ite	ne
 80061f4:	2301      	movne	r3, #1
 80061f6:	2300      	moveq	r3, #0
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	e022      	b.n	8006242 <HAL_TIM_PWM_Start+0x6a>
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	2b04      	cmp	r3, #4
 8006200:	d109      	bne.n	8006216 <HAL_TIM_PWM_Start+0x3e>
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006208:	b2db      	uxtb	r3, r3
 800620a:	2b01      	cmp	r3, #1
 800620c:	bf14      	ite	ne
 800620e:	2301      	movne	r3, #1
 8006210:	2300      	moveq	r3, #0
 8006212:	b2db      	uxtb	r3, r3
 8006214:	e015      	b.n	8006242 <HAL_TIM_PWM_Start+0x6a>
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	2b08      	cmp	r3, #8
 800621a:	d109      	bne.n	8006230 <HAL_TIM_PWM_Start+0x58>
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006222:	b2db      	uxtb	r3, r3
 8006224:	2b01      	cmp	r3, #1
 8006226:	bf14      	ite	ne
 8006228:	2301      	movne	r3, #1
 800622a:	2300      	moveq	r3, #0
 800622c:	b2db      	uxtb	r3, r3
 800622e:	e008      	b.n	8006242 <HAL_TIM_PWM_Start+0x6a>
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006236:	b2db      	uxtb	r3, r3
 8006238:	2b01      	cmp	r3, #1
 800623a:	bf14      	ite	ne
 800623c:	2301      	movne	r3, #1
 800623e:	2300      	moveq	r3, #0
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b00      	cmp	r3, #0
 8006244:	d001      	beq.n	800624a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006246:	2301      	movs	r3, #1
 8006248:	e07c      	b.n	8006344 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d104      	bne.n	800625a <HAL_TIM_PWM_Start+0x82>
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	2202      	movs	r2, #2
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006258:	e013      	b.n	8006282 <HAL_TIM_PWM_Start+0xaa>
 800625a:	683b      	ldr	r3, [r7, #0]
 800625c:	2b04      	cmp	r3, #4
 800625e:	d104      	bne.n	800626a <HAL_TIM_PWM_Start+0x92>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	2202      	movs	r2, #2
 8006264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006268:	e00b      	b.n	8006282 <HAL_TIM_PWM_Start+0xaa>
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	2b08      	cmp	r3, #8
 800626e:	d104      	bne.n	800627a <HAL_TIM_PWM_Start+0xa2>
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2202      	movs	r2, #2
 8006274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006278:	e003      	b.n	8006282 <HAL_TIM_PWM_Start+0xaa>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2202      	movs	r2, #2
 800627e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2201      	movs	r2, #1
 8006288:	6839      	ldr	r1, [r7, #0]
 800628a:	4618      	mov	r0, r3
 800628c:	f000 fe08 	bl	8006ea0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4a2d      	ldr	r2, [pc, #180]	; (800634c <HAL_TIM_PWM_Start+0x174>)
 8006296:	4293      	cmp	r3, r2
 8006298:	d004      	beq.n	80062a4 <HAL_TIM_PWM_Start+0xcc>
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	4a2c      	ldr	r2, [pc, #176]	; (8006350 <HAL_TIM_PWM_Start+0x178>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d101      	bne.n	80062a8 <HAL_TIM_PWM_Start+0xd0>
 80062a4:	2301      	movs	r3, #1
 80062a6:	e000      	b.n	80062aa <HAL_TIM_PWM_Start+0xd2>
 80062a8:	2300      	movs	r3, #0
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d007      	beq.n	80062be <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a22      	ldr	r2, [pc, #136]	; (800634c <HAL_TIM_PWM_Start+0x174>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d022      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062d0:	d01d      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <HAL_TIM_PWM_Start+0x17c>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d018      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	4a1d      	ldr	r2, [pc, #116]	; (8006358 <HAL_TIM_PWM_Start+0x180>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d013      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	4a1c      	ldr	r2, [pc, #112]	; (800635c <HAL_TIM_PWM_Start+0x184>)
 80062ec:	4293      	cmp	r3, r2
 80062ee:	d00e      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	4a16      	ldr	r2, [pc, #88]	; (8006350 <HAL_TIM_PWM_Start+0x178>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d009      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	4a18      	ldr	r2, [pc, #96]	; (8006360 <HAL_TIM_PWM_Start+0x188>)
 8006300:	4293      	cmp	r3, r2
 8006302:	d004      	beq.n	800630e <HAL_TIM_PWM_Start+0x136>
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	4a16      	ldr	r2, [pc, #88]	; (8006364 <HAL_TIM_PWM_Start+0x18c>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d111      	bne.n	8006332 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	689b      	ldr	r3, [r3, #8]
 8006314:	f003 0307 	and.w	r3, r3, #7
 8006318:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	2b06      	cmp	r3, #6
 800631e:	d010      	beq.n	8006342 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f042 0201 	orr.w	r2, r2, #1
 800632e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006330:	e007      	b.n	8006342 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	681a      	ldr	r2, [r3, #0]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	f042 0201 	orr.w	r2, r2, #1
 8006340:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006342:	2300      	movs	r3, #0
}
 8006344:	4618      	mov	r0, r3
 8006346:	3710      	adds	r7, #16
 8006348:	46bd      	mov	sp, r7
 800634a:	bd80      	pop	{r7, pc}
 800634c:	40010000 	.word	0x40010000
 8006350:	40010400 	.word	0x40010400
 8006354:	40000400 	.word	0x40000400
 8006358:	40000800 	.word	0x40000800
 800635c:	40000c00 	.word	0x40000c00
 8006360:	40014000 	.word	0x40014000
 8006364:	40001800 	.word	0x40001800

08006368 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	f003 0302 	and.w	r3, r3, #2
 800637a:	2b02      	cmp	r3, #2
 800637c:	d122      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	f003 0302 	and.w	r3, r3, #2
 8006388:	2b02      	cmp	r3, #2
 800638a:	d11b      	bne.n	80063c4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f06f 0202 	mvn.w	r2, #2
 8006394:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2201      	movs	r2, #1
 800639a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	699b      	ldr	r3, [r3, #24]
 80063a2:	f003 0303 	and.w	r3, r3, #3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d003      	beq.n	80063b2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fa70 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 80063b0:	e005      	b.n	80063be <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f000 fa62 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fa73 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	691b      	ldr	r3, [r3, #16]
 80063ca:	f003 0304 	and.w	r3, r3, #4
 80063ce:	2b04      	cmp	r3, #4
 80063d0:	d122      	bne.n	8006418 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	68db      	ldr	r3, [r3, #12]
 80063d8:	f003 0304 	and.w	r3, r3, #4
 80063dc:	2b04      	cmp	r3, #4
 80063de:	d11b      	bne.n	8006418 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f06f 0204 	mvn.w	r2, #4
 80063e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2202      	movs	r2, #2
 80063ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fa46 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 8006404:	e005      	b.n	8006412 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006406:	6878      	ldr	r0, [r7, #4]
 8006408:	f000 fa38 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f000 fa49 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	691b      	ldr	r3, [r3, #16]
 800641e:	f003 0308 	and.w	r3, r3, #8
 8006422:	2b08      	cmp	r3, #8
 8006424:	d122      	bne.n	800646c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	68db      	ldr	r3, [r3, #12]
 800642c:	f003 0308 	and.w	r3, r3, #8
 8006430:	2b08      	cmp	r3, #8
 8006432:	d11b      	bne.n	800646c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f06f 0208 	mvn.w	r2, #8
 800643c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	2204      	movs	r2, #4
 8006442:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	69db      	ldr	r3, [r3, #28]
 800644a:	f003 0303 	and.w	r3, r3, #3
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa1c 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 8006458:	e005      	b.n	8006466 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fa0e 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006460:	6878      	ldr	r0, [r7, #4]
 8006462:	f000 fa1f 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2200      	movs	r2, #0
 800646a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	691b      	ldr	r3, [r3, #16]
 8006472:	f003 0310 	and.w	r3, r3, #16
 8006476:	2b10      	cmp	r3, #16
 8006478:	d122      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	68db      	ldr	r3, [r3, #12]
 8006480:	f003 0310 	and.w	r3, r3, #16
 8006484:	2b10      	cmp	r3, #16
 8006486:	d11b      	bne.n	80064c0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	f06f 0210 	mvn.w	r2, #16
 8006490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2208      	movs	r2, #8
 8006496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	69db      	ldr	r3, [r3, #28]
 800649e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d003      	beq.n	80064ae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	f000 f9f2 	bl	8006890 <HAL_TIM_IC_CaptureCallback>
 80064ac:	e005      	b.n	80064ba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f9e4 	bl	800687c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 f9f5 	bl	80068a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2200      	movs	r2, #0
 80064be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	691b      	ldr	r3, [r3, #16]
 80064c6:	f003 0301 	and.w	r3, r3, #1
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d10e      	bne.n	80064ec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	68db      	ldr	r3, [r3, #12]
 80064d4:	f003 0301 	and.w	r3, r3, #1
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d107      	bne.n	80064ec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	f06f 0201 	mvn.w	r2, #1
 80064e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f7fb feac 	bl	8002244 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	691b      	ldr	r3, [r3, #16]
 80064f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80064f6:	2b80      	cmp	r3, #128	; 0x80
 80064f8:	d10e      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68db      	ldr	r3, [r3, #12]
 8006500:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006504:	2b80      	cmp	r3, #128	; 0x80
 8006506:	d107      	bne.n	8006518 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f000 fdc2 	bl	800709c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	691b      	ldr	r3, [r3, #16]
 800651e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006522:	2b40      	cmp	r3, #64	; 0x40
 8006524:	d10e      	bne.n	8006544 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006530:	2b40      	cmp	r3, #64	; 0x40
 8006532:	d107      	bne.n	8006544 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800653c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800653e:	6878      	ldr	r0, [r7, #4]
 8006540:	f000 f9ba 	bl	80068b8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	691b      	ldr	r3, [r3, #16]
 800654a:	f003 0320 	and.w	r3, r3, #32
 800654e:	2b20      	cmp	r3, #32
 8006550:	d10e      	bne.n	8006570 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	68db      	ldr	r3, [r3, #12]
 8006558:	f003 0320 	and.w	r3, r3, #32
 800655c:	2b20      	cmp	r3, #32
 800655e:	d107      	bne.n	8006570 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	f06f 0220 	mvn.w	r2, #32
 8006568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 fd8c 	bl	8007088 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006570:	bf00      	nop
 8006572:	3708      	adds	r7, #8
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}

08006578 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006578:	b580      	push	{r7, lr}
 800657a:	b084      	sub	sp, #16
 800657c:	af00      	add	r7, sp, #0
 800657e:	60f8      	str	r0, [r7, #12]
 8006580:	60b9      	str	r1, [r7, #8]
 8006582:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800658a:	2b01      	cmp	r3, #1
 800658c:	d101      	bne.n	8006592 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800658e:	2302      	movs	r3, #2
 8006590:	e0ac      	b.n	80066ec <HAL_TIM_PWM_ConfigChannel+0x174>
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2201      	movs	r2, #1
 8006596:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2b0c      	cmp	r3, #12
 800659e:	f200 809f 	bhi.w	80066e0 <HAL_TIM_PWM_ConfigChannel+0x168>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065dd 	.word	0x080065dd
 80065ac:	080066e1 	.word	0x080066e1
 80065b0:	080066e1 	.word	0x080066e1
 80065b4:	080066e1 	.word	0x080066e1
 80065b8:	0800661d 	.word	0x0800661d
 80065bc:	080066e1 	.word	0x080066e1
 80065c0:	080066e1 	.word	0x080066e1
 80065c4:	080066e1 	.word	0x080066e1
 80065c8:	0800665f 	.word	0x0800665f
 80065cc:	080066e1 	.word	0x080066e1
 80065d0:	080066e1 	.word	0x080066e1
 80065d4:	080066e1 	.word	0x080066e1
 80065d8:	0800669f 	.word	0x0800669f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	68b9      	ldr	r1, [r7, #8]
 80065e2:	4618      	mov	r0, r3
 80065e4:	f000 fa12 	bl	8006a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	699a      	ldr	r2, [r3, #24]
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	f042 0208 	orr.w	r2, r2, #8
 80065f6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	699a      	ldr	r2, [r3, #24]
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f022 0204 	bic.w	r2, r2, #4
 8006606:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	6999      	ldr	r1, [r3, #24]
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	691a      	ldr	r2, [r3, #16]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	430a      	orrs	r2, r1
 8006618:	619a      	str	r2, [r3, #24]
      break;
 800661a:	e062      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	68b9      	ldr	r1, [r7, #8]
 8006622:	4618      	mov	r0, r3
 8006624:	f000 fa62 	bl	8006aec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	699a      	ldr	r2, [r3, #24]
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006636:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	699a      	ldr	r2, [r3, #24]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006646:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	6999      	ldr	r1, [r3, #24]
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	691b      	ldr	r3, [r3, #16]
 8006652:	021a      	lsls	r2, r3, #8
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	430a      	orrs	r2, r1
 800665a:	619a      	str	r2, [r3, #24]
      break;
 800665c:	e041      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	4618      	mov	r0, r3
 8006666:	f000 fab7 	bl	8006bd8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	69da      	ldr	r2, [r3, #28]
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	f042 0208 	orr.w	r2, r2, #8
 8006678:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	69da      	ldr	r2, [r3, #28]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f022 0204 	bic.w	r2, r2, #4
 8006688:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	69d9      	ldr	r1, [r3, #28]
 8006690:	68bb      	ldr	r3, [r7, #8]
 8006692:	691a      	ldr	r2, [r3, #16]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	430a      	orrs	r2, r1
 800669a:	61da      	str	r2, [r3, #28]
      break;
 800669c:	e021      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	68b9      	ldr	r1, [r7, #8]
 80066a4:	4618      	mov	r0, r3
 80066a6:	f000 fb0b 	bl	8006cc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	69da      	ldr	r2, [r3, #28]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066b8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	69da      	ldr	r2, [r3, #28]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066c8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	69d9      	ldr	r1, [r3, #28]
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	691b      	ldr	r3, [r3, #16]
 80066d4:	021a      	lsls	r2, r3, #8
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	430a      	orrs	r2, r1
 80066dc:	61da      	str	r2, [r3, #28]
      break;
 80066de:	e000      	b.n	80066e2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80066e0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	2200      	movs	r2, #0
 80066e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80066ea:	2300      	movs	r3, #0
}
 80066ec:	4618      	mov	r0, r3
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}

080066f4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066f4:	b580      	push	{r7, lr}
 80066f6:	b084      	sub	sp, #16
 80066f8:	af00      	add	r7, sp, #0
 80066fa:	6078      	str	r0, [r7, #4]
 80066fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006704:	2b01      	cmp	r3, #1
 8006706:	d101      	bne.n	800670c <HAL_TIM_ConfigClockSource+0x18>
 8006708:	2302      	movs	r3, #2
 800670a:	e0b3      	b.n	8006874 <HAL_TIM_ConfigClockSource+0x180>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	2202      	movs	r2, #2
 8006718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	689b      	ldr	r3, [r3, #8]
 8006722:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800672a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006732:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800673c:	683b      	ldr	r3, [r7, #0]
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006744:	d03e      	beq.n	80067c4 <HAL_TIM_ConfigClockSource+0xd0>
 8006746:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800674a:	f200 8087 	bhi.w	800685c <HAL_TIM_ConfigClockSource+0x168>
 800674e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006752:	f000 8085 	beq.w	8006860 <HAL_TIM_ConfigClockSource+0x16c>
 8006756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800675a:	d87f      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800675c:	2b70      	cmp	r3, #112	; 0x70
 800675e:	d01a      	beq.n	8006796 <HAL_TIM_ConfigClockSource+0xa2>
 8006760:	2b70      	cmp	r3, #112	; 0x70
 8006762:	d87b      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 8006764:	2b60      	cmp	r3, #96	; 0x60
 8006766:	d050      	beq.n	800680a <HAL_TIM_ConfigClockSource+0x116>
 8006768:	2b60      	cmp	r3, #96	; 0x60
 800676a:	d877      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800676c:	2b50      	cmp	r3, #80	; 0x50
 800676e:	d03c      	beq.n	80067ea <HAL_TIM_ConfigClockSource+0xf6>
 8006770:	2b50      	cmp	r3, #80	; 0x50
 8006772:	d873      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 8006774:	2b40      	cmp	r3, #64	; 0x40
 8006776:	d058      	beq.n	800682a <HAL_TIM_ConfigClockSource+0x136>
 8006778:	2b40      	cmp	r3, #64	; 0x40
 800677a:	d86f      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800677c:	2b30      	cmp	r3, #48	; 0x30
 800677e:	d064      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
 8006780:	2b30      	cmp	r3, #48	; 0x30
 8006782:	d86b      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 8006784:	2b20      	cmp	r3, #32
 8006786:	d060      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
 8006788:	2b20      	cmp	r3, #32
 800678a:	d867      	bhi.n	800685c <HAL_TIM_ConfigClockSource+0x168>
 800678c:	2b00      	cmp	r3, #0
 800678e:	d05c      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
 8006790:	2b10      	cmp	r3, #16
 8006792:	d05a      	beq.n	800684a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8006794:	e062      	b.n	800685c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6818      	ldr	r0, [r3, #0]
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	6899      	ldr	r1, [r3, #8]
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	685a      	ldr	r2, [r3, #4]
 80067a2:	683b      	ldr	r3, [r7, #0]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f000 fb5b 	bl	8006e60 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	689b      	ldr	r3, [r3, #8]
 80067b0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067b2:	68fb      	ldr	r3, [r7, #12]
 80067b4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067b8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68fa      	ldr	r2, [r7, #12]
 80067c0:	609a      	str	r2, [r3, #8]
      break;
 80067c2:	e04e      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6818      	ldr	r0, [r3, #0]
 80067c8:	683b      	ldr	r3, [r7, #0]
 80067ca:	6899      	ldr	r1, [r3, #8]
 80067cc:	683b      	ldr	r3, [r7, #0]
 80067ce:	685a      	ldr	r2, [r3, #4]
 80067d0:	683b      	ldr	r3, [r7, #0]
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	f000 fb44 	bl	8006e60 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	689a      	ldr	r2, [r3, #8]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067e6:	609a      	str	r2, [r3, #8]
      break;
 80067e8:	e03b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6818      	ldr	r0, [r3, #0]
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	6859      	ldr	r1, [r3, #4]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	68db      	ldr	r3, [r3, #12]
 80067f6:	461a      	mov	r2, r3
 80067f8:	f000 fab8 	bl	8006d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	2150      	movs	r1, #80	; 0x50
 8006802:	4618      	mov	r0, r3
 8006804:	f000 fb11 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 8006808:	e02b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	6818      	ldr	r0, [r3, #0]
 800680e:	683b      	ldr	r3, [r7, #0]
 8006810:	6859      	ldr	r1, [r3, #4]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	461a      	mov	r2, r3
 8006818:	f000 fad7 	bl	8006dca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	2160      	movs	r1, #96	; 0x60
 8006822:	4618      	mov	r0, r3
 8006824:	f000 fb01 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 8006828:	e01b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6818      	ldr	r0, [r3, #0]
 800682e:	683b      	ldr	r3, [r7, #0]
 8006830:	6859      	ldr	r1, [r3, #4]
 8006832:	683b      	ldr	r3, [r7, #0]
 8006834:	68db      	ldr	r3, [r3, #12]
 8006836:	461a      	mov	r2, r3
 8006838:	f000 fa98 	bl	8006d6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	2140      	movs	r1, #64	; 0x40
 8006842:	4618      	mov	r0, r3
 8006844:	f000 faf1 	bl	8006e2a <TIM_ITRx_SetConfig>
      break;
 8006848:	e00b      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f000 fae8 	bl	8006e2a <TIM_ITRx_SetConfig>
        break;
 800685a:	e002      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800685c:	bf00      	nop
 800685e:	e000      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006860:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	2201      	movs	r2, #1
 8006866:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	2200      	movs	r2, #0
 800686e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3710      	adds	r7, #16
 8006878:	46bd      	mov	sp, r7
 800687a:	bd80      	pop	{r7, pc}

0800687c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800687c:	b480      	push	{r7}
 800687e:	b083      	sub	sp, #12
 8006880:	af00      	add	r7, sp, #0
 8006882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006898:	bf00      	nop
 800689a:	370c      	adds	r7, #12
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr

080068a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068a4:	b480      	push	{r7}
 80068a6:	b083      	sub	sp, #12
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068ac:	bf00      	nop
 80068ae:	370c      	adds	r7, #12
 80068b0:	46bd      	mov	sp, r7
 80068b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b6:	4770      	bx	lr

080068b8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b083      	sub	sp, #12
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068c0:	bf00      	nop
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr

080068cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a40      	ldr	r2, [pc, #256]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d013      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068ea:	d00f      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a3d      	ldr	r2, [pc, #244]	; (80069e4 <TIM_Base_SetConfig+0x118>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d00b      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	4a3c      	ldr	r2, [pc, #240]	; (80069e8 <TIM_Base_SetConfig+0x11c>)
 80068f8:	4293      	cmp	r3, r2
 80068fa:	d007      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	4a3b      	ldr	r2, [pc, #236]	; (80069ec <TIM_Base_SetConfig+0x120>)
 8006900:	4293      	cmp	r3, r2
 8006902:	d003      	beq.n	800690c <TIM_Base_SetConfig+0x40>
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	4a3a      	ldr	r2, [pc, #232]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 8006908:	4293      	cmp	r3, r2
 800690a:	d108      	bne.n	800691e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006912:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	685b      	ldr	r3, [r3, #4]
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4313      	orrs	r3, r2
 800691c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a2f      	ldr	r2, [pc, #188]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d02b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692c:	d027      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a2c      	ldr	r2, [pc, #176]	; (80069e4 <TIM_Base_SetConfig+0x118>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d023      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a2b      	ldr	r2, [pc, #172]	; (80069e8 <TIM_Base_SetConfig+0x11c>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d01f      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a2a      	ldr	r2, [pc, #168]	; (80069ec <TIM_Base_SetConfig+0x120>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d01b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	4a29      	ldr	r2, [pc, #164]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d017      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	4a28      	ldr	r2, [pc, #160]	; (80069f4 <TIM_Base_SetConfig+0x128>)
 8006952:	4293      	cmp	r3, r2
 8006954:	d013      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a27      	ldr	r2, [pc, #156]	; (80069f8 <TIM_Base_SetConfig+0x12c>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d00f      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	4a26      	ldr	r2, [pc, #152]	; (80069fc <TIM_Base_SetConfig+0x130>)
 8006962:	4293      	cmp	r3, r2
 8006964:	d00b      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a25      	ldr	r2, [pc, #148]	; (8006a00 <TIM_Base_SetConfig+0x134>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d007      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a24      	ldr	r2, [pc, #144]	; (8006a04 <TIM_Base_SetConfig+0x138>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d003      	beq.n	800697e <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a23      	ldr	r2, [pc, #140]	; (8006a08 <TIM_Base_SetConfig+0x13c>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d108      	bne.n	8006990 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006984:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	68fa      	ldr	r2, [r7, #12]
 800698c:	4313      	orrs	r3, r2
 800698e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006996:	683b      	ldr	r3, [r7, #0]
 8006998:	695b      	ldr	r3, [r3, #20]
 800699a:	4313      	orrs	r3, r2
 800699c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	689a      	ldr	r2, [r3, #8]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	681a      	ldr	r2, [r3, #0]
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	4a0a      	ldr	r2, [pc, #40]	; (80069e0 <TIM_Base_SetConfig+0x114>)
 80069b8:	4293      	cmp	r3, r2
 80069ba:	d003      	beq.n	80069c4 <TIM_Base_SetConfig+0xf8>
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	4a0c      	ldr	r2, [pc, #48]	; (80069f0 <TIM_Base_SetConfig+0x124>)
 80069c0:	4293      	cmp	r3, r2
 80069c2:	d103      	bne.n	80069cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	691a      	ldr	r2, [r3, #16]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	615a      	str	r2, [r3, #20]
}
 80069d2:	bf00      	nop
 80069d4:	3714      	adds	r7, #20
 80069d6:	46bd      	mov	sp, r7
 80069d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069dc:	4770      	bx	lr
 80069de:	bf00      	nop
 80069e0:	40010000 	.word	0x40010000
 80069e4:	40000400 	.word	0x40000400
 80069e8:	40000800 	.word	0x40000800
 80069ec:	40000c00 	.word	0x40000c00
 80069f0:	40010400 	.word	0x40010400
 80069f4:	40014000 	.word	0x40014000
 80069f8:	40014400 	.word	0x40014400
 80069fc:	40014800 	.word	0x40014800
 8006a00:	40001800 	.word	0x40001800
 8006a04:	40001c00 	.word	0x40001c00
 8006a08:	40002000 	.word	0x40002000

08006a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0201 	bic.w	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0302 	bic.w	r3, r3, #2
 8006a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a20      	ldr	r2, [pc, #128]	; (8006ae4 <TIM_OC1_SetConfig+0xd8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d003      	beq.n	8006a70 <TIM_OC1_SetConfig+0x64>
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	4a1f      	ldr	r2, [pc, #124]	; (8006ae8 <TIM_OC1_SetConfig+0xdc>)
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	d10c      	bne.n	8006a8a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a70:	697b      	ldr	r3, [r7, #20]
 8006a72:	f023 0308 	bic.w	r3, r3, #8
 8006a76:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a78:	683b      	ldr	r3, [r7, #0]
 8006a7a:	68db      	ldr	r3, [r3, #12]
 8006a7c:	697a      	ldr	r2, [r7, #20]
 8006a7e:	4313      	orrs	r3, r2
 8006a80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a82:	697b      	ldr	r3, [r7, #20]
 8006a84:	f023 0304 	bic.w	r3, r3, #4
 8006a88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4a15      	ldr	r2, [pc, #84]	; (8006ae4 <TIM_OC1_SetConfig+0xd8>)
 8006a8e:	4293      	cmp	r3, r2
 8006a90:	d003      	beq.n	8006a9a <TIM_OC1_SetConfig+0x8e>
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	4a14      	ldr	r2, [pc, #80]	; (8006ae8 <TIM_OC1_SetConfig+0xdc>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d111      	bne.n	8006abe <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a9a:	693b      	ldr	r3, [r7, #16]
 8006a9c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006aa0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006aa2:	693b      	ldr	r3, [r7, #16]
 8006aa4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006aa8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006aaa:	683b      	ldr	r3, [r7, #0]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	4313      	orrs	r3, r2
 8006ab2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006ab4:	683b      	ldr	r3, [r7, #0]
 8006ab6:	699b      	ldr	r3, [r3, #24]
 8006ab8:	693a      	ldr	r2, [r7, #16]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	685a      	ldr	r2, [r3, #4]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	697a      	ldr	r2, [r7, #20]
 8006ad6:	621a      	str	r2, [r3, #32]
}
 8006ad8:	bf00      	nop
 8006ada:	371c      	adds	r7, #28
 8006adc:	46bd      	mov	sp, r7
 8006ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae2:	4770      	bx	lr
 8006ae4:	40010000 	.word	0x40010000
 8006ae8:	40010400 	.word	0x40010400

08006aec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006aec:	b480      	push	{r7}
 8006aee:	b087      	sub	sp, #28
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	6a1b      	ldr	r3, [r3, #32]
 8006afa:	f023 0210 	bic.w	r2, r3, #16
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6a1b      	ldr	r3, [r3, #32]
 8006b06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	685b      	ldr	r3, [r3, #4]
 8006b0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	699b      	ldr	r3, [r3, #24]
 8006b12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b14:	68fb      	ldr	r3, [r7, #12]
 8006b16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
 8006b1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	021b      	lsls	r3, r3, #8
 8006b2a:	68fa      	ldr	r2, [r7, #12]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b30:	697b      	ldr	r3, [r7, #20]
 8006b32:	f023 0320 	bic.w	r3, r3, #32
 8006b36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	689b      	ldr	r3, [r3, #8]
 8006b3c:	011b      	lsls	r3, r3, #4
 8006b3e:	697a      	ldr	r2, [r7, #20]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	4a22      	ldr	r2, [pc, #136]	; (8006bd0 <TIM_OC2_SetConfig+0xe4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d003      	beq.n	8006b54 <TIM_OC2_SetConfig+0x68>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4a21      	ldr	r2, [pc, #132]	; (8006bd4 <TIM_OC2_SetConfig+0xe8>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d10d      	bne.n	8006b70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	011b      	lsls	r3, r3, #4
 8006b62:	697a      	ldr	r2, [r7, #20]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b6e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	4a17      	ldr	r2, [pc, #92]	; (8006bd0 <TIM_OC2_SetConfig+0xe4>)
 8006b74:	4293      	cmp	r3, r2
 8006b76:	d003      	beq.n	8006b80 <TIM_OC2_SetConfig+0x94>
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	4a16      	ldr	r2, [pc, #88]	; (8006bd4 <TIM_OC2_SetConfig+0xe8>)
 8006b7c:	4293      	cmp	r3, r2
 8006b7e:	d113      	bne.n	8006ba8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b80:	693b      	ldr	r3, [r7, #16]
 8006b82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	695b      	ldr	r3, [r3, #20]
 8006b94:	009b      	lsls	r3, r3, #2
 8006b96:	693a      	ldr	r2, [r7, #16]
 8006b98:	4313      	orrs	r3, r2
 8006b9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b9c:	683b      	ldr	r3, [r7, #0]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	009b      	lsls	r3, r3, #2
 8006ba2:	693a      	ldr	r2, [r7, #16]
 8006ba4:	4313      	orrs	r3, r2
 8006ba6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	693a      	ldr	r2, [r7, #16]
 8006bac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68fa      	ldr	r2, [r7, #12]
 8006bb2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	685a      	ldr	r2, [r3, #4]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	697a      	ldr	r2, [r7, #20]
 8006bc0:	621a      	str	r2, [r3, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	371c      	adds	r7, #28
 8006bc6:	46bd      	mov	sp, r7
 8006bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bcc:	4770      	bx	lr
 8006bce:	bf00      	nop
 8006bd0:	40010000 	.word	0x40010000
 8006bd4:	40010400 	.word	0x40010400

08006bd8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bd8:	b480      	push	{r7}
 8006bda:	b087      	sub	sp, #28
 8006bdc:	af00      	add	r7, sp, #0
 8006bde:	6078      	str	r0, [r7, #4]
 8006be0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	6a1b      	ldr	r3, [r3, #32]
 8006be6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	6a1b      	ldr	r3, [r3, #32]
 8006bf2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	685b      	ldr	r3, [r3, #4]
 8006bf8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	69db      	ldr	r3, [r3, #28]
 8006bfe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	f023 0303 	bic.w	r3, r3, #3
 8006c0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	68fa      	ldr	r2, [r7, #12]
 8006c16:	4313      	orrs	r3, r2
 8006c18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c1a:	697b      	ldr	r3, [r7, #20]
 8006c1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c22:	683b      	ldr	r3, [r7, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	021b      	lsls	r3, r3, #8
 8006c28:	697a      	ldr	r2, [r7, #20]
 8006c2a:	4313      	orrs	r3, r2
 8006c2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a21      	ldr	r2, [pc, #132]	; (8006cb8 <TIM_OC3_SetConfig+0xe0>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0x66>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a20      	ldr	r2, [pc, #128]	; (8006cbc <TIM_OC3_SetConfig+0xe4>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d10d      	bne.n	8006c5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c3e:	697b      	ldr	r3, [r7, #20]
 8006c40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c46:	683b      	ldr	r3, [r7, #0]
 8006c48:	68db      	ldr	r3, [r3, #12]
 8006c4a:	021b      	lsls	r3, r3, #8
 8006c4c:	697a      	ldr	r2, [r7, #20]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	4a16      	ldr	r2, [pc, #88]	; (8006cb8 <TIM_OC3_SetConfig+0xe0>)
 8006c5e:	4293      	cmp	r3, r2
 8006c60:	d003      	beq.n	8006c6a <TIM_OC3_SetConfig+0x92>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	4a15      	ldr	r2, [pc, #84]	; (8006cbc <TIM_OC3_SetConfig+0xe4>)
 8006c66:	4293      	cmp	r3, r2
 8006c68:	d113      	bne.n	8006c92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c6a:	693b      	ldr	r3, [r7, #16]
 8006c6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	695b      	ldr	r3, [r3, #20]
 8006c7e:	011b      	lsls	r3, r3, #4
 8006c80:	693a      	ldr	r2, [r7, #16]
 8006c82:	4313      	orrs	r3, r2
 8006c84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	699b      	ldr	r3, [r3, #24]
 8006c8a:	011b      	lsls	r3, r3, #4
 8006c8c:	693a      	ldr	r2, [r7, #16]
 8006c8e:	4313      	orrs	r3, r2
 8006c90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	693a      	ldr	r2, [r7, #16]
 8006c96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	68fa      	ldr	r2, [r7, #12]
 8006c9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c9e:	683b      	ldr	r3, [r7, #0]
 8006ca0:	685a      	ldr	r2, [r3, #4]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	697a      	ldr	r2, [r7, #20]
 8006caa:	621a      	str	r2, [r3, #32]
}
 8006cac:	bf00      	nop
 8006cae:	371c      	adds	r7, #28
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cb6:	4770      	bx	lr
 8006cb8:	40010000 	.word	0x40010000
 8006cbc:	40010400 	.word	0x40010400

08006cc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cc0:	b480      	push	{r7}
 8006cc2:	b087      	sub	sp, #28
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
 8006cc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	6a1b      	ldr	r3, [r3, #32]
 8006cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a1b      	ldr	r3, [r3, #32]
 8006cda:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	021b      	lsls	r3, r3, #8
 8006cfe:	68fa      	ldr	r2, [r7, #12]
 8006d00:	4313      	orrs	r3, r2
 8006d02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d04:	693b      	ldr	r3, [r7, #16]
 8006d06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d0c:	683b      	ldr	r3, [r7, #0]
 8006d0e:	689b      	ldr	r3, [r3, #8]
 8006d10:	031b      	lsls	r3, r3, #12
 8006d12:	693a      	ldr	r2, [r7, #16]
 8006d14:	4313      	orrs	r3, r2
 8006d16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a12      	ldr	r2, [pc, #72]	; (8006d64 <TIM_OC4_SetConfig+0xa4>)
 8006d1c:	4293      	cmp	r3, r2
 8006d1e:	d003      	beq.n	8006d28 <TIM_OC4_SetConfig+0x68>
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	4a11      	ldr	r2, [pc, #68]	; (8006d68 <TIM_OC4_SetConfig+0xa8>)
 8006d24:	4293      	cmp	r3, r2
 8006d26:	d109      	bne.n	8006d3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d28:	697b      	ldr	r3, [r7, #20]
 8006d2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	695b      	ldr	r3, [r3, #20]
 8006d34:	019b      	lsls	r3, r3, #6
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	697a      	ldr	r2, [r7, #20]
 8006d40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	68fa      	ldr	r2, [r7, #12]
 8006d46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	685a      	ldr	r2, [r3, #4]
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	693a      	ldr	r2, [r7, #16]
 8006d54:	621a      	str	r2, [r3, #32]
}
 8006d56:	bf00      	nop
 8006d58:	371c      	adds	r7, #28
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d60:	4770      	bx	lr
 8006d62:	bf00      	nop
 8006d64:	40010000 	.word	0x40010000
 8006d68:	40010400 	.word	0x40010400

08006d6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006d6c:	b480      	push	{r7}
 8006d6e:	b087      	sub	sp, #28
 8006d70:	af00      	add	r7, sp, #0
 8006d72:	60f8      	str	r0, [r7, #12]
 8006d74:	60b9      	str	r1, [r7, #8]
 8006d76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6a1b      	ldr	r3, [r3, #32]
 8006d7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	6a1b      	ldr	r3, [r3, #32]
 8006d82:	f023 0201 	bic.w	r2, r3, #1
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	699b      	ldr	r3, [r3, #24]
 8006d8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d90:	693b      	ldr	r3, [r7, #16]
 8006d92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	693a      	ldr	r2, [r7, #16]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	f023 030a 	bic.w	r3, r3, #10
 8006da8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006daa:	697a      	ldr	r2, [r7, #20]
 8006dac:	68bb      	ldr	r3, [r7, #8]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006db8:	68fb      	ldr	r3, [r7, #12]
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	621a      	str	r2, [r3, #32]
}
 8006dbe:	bf00      	nop
 8006dc0:	371c      	adds	r7, #28
 8006dc2:	46bd      	mov	sp, r7
 8006dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc8:	4770      	bx	lr

08006dca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006dca:	b480      	push	{r7}
 8006dcc:	b087      	sub	sp, #28
 8006dce:	af00      	add	r7, sp, #0
 8006dd0:	60f8      	str	r0, [r7, #12]
 8006dd2:	60b9      	str	r1, [r7, #8]
 8006dd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	6a1b      	ldr	r3, [r3, #32]
 8006dda:	f023 0210 	bic.w	r2, r3, #16
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	699b      	ldr	r3, [r3, #24]
 8006de6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	6a1b      	ldr	r3, [r3, #32]
 8006dec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006df4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	031b      	lsls	r3, r3, #12
 8006dfa:	697a      	ldr	r2, [r7, #20]
 8006dfc:	4313      	orrs	r3, r2
 8006dfe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e00:	693b      	ldr	r3, [r7, #16]
 8006e02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e06:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e08:	68bb      	ldr	r3, [r7, #8]
 8006e0a:	011b      	lsls	r3, r3, #4
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	4313      	orrs	r3, r2
 8006e10:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	697a      	ldr	r2, [r7, #20]
 8006e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	693a      	ldr	r2, [r7, #16]
 8006e1c:	621a      	str	r2, [r3, #32]
}
 8006e1e:	bf00      	nop
 8006e20:	371c      	adds	r7, #28
 8006e22:	46bd      	mov	sp, r7
 8006e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e28:	4770      	bx	lr

08006e2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e2a:	b480      	push	{r7}
 8006e2c:	b085      	sub	sp, #20
 8006e2e:	af00      	add	r7, sp, #0
 8006e30:	6078      	str	r0, [r7, #4]
 8006e32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	689b      	ldr	r3, [r3, #8]
 8006e38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e42:	683a      	ldr	r2, [r7, #0]
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	f043 0307 	orr.w	r3, r3, #7
 8006e4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68fa      	ldr	r2, [r7, #12]
 8006e52:	609a      	str	r2, [r3, #8]
}
 8006e54:	bf00      	nop
 8006e56:	3714      	adds	r7, #20
 8006e58:	46bd      	mov	sp, r7
 8006e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e5e:	4770      	bx	lr

08006e60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e60:	b480      	push	{r7}
 8006e62:	b087      	sub	sp, #28
 8006e64:	af00      	add	r7, sp, #0
 8006e66:	60f8      	str	r0, [r7, #12]
 8006e68:	60b9      	str	r1, [r7, #8]
 8006e6a:	607a      	str	r2, [r7, #4]
 8006e6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	689b      	ldr	r3, [r3, #8]
 8006e72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006e74:	697b      	ldr	r3, [r7, #20]
 8006e76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006e7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	021a      	lsls	r2, r3, #8
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	431a      	orrs	r2, r3
 8006e84:	68bb      	ldr	r3, [r7, #8]
 8006e86:	4313      	orrs	r3, r2
 8006e88:	697a      	ldr	r2, [r7, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	697a      	ldr	r2, [r7, #20]
 8006e92:	609a      	str	r2, [r3, #8]
}
 8006e94:	bf00      	nop
 8006e96:	371c      	adds	r7, #28
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e9e:	4770      	bx	lr

08006ea0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ea0:	b480      	push	{r7}
 8006ea2:	b087      	sub	sp, #28
 8006ea4:	af00      	add	r7, sp, #0
 8006ea6:	60f8      	str	r0, [r7, #12]
 8006ea8:	60b9      	str	r1, [r7, #8]
 8006eaa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006eac:	68bb      	ldr	r3, [r7, #8]
 8006eae:	f003 031f 	and.w	r3, r3, #31
 8006eb2:	2201      	movs	r2, #1
 8006eb4:	fa02 f303 	lsl.w	r3, r2, r3
 8006eb8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	6a1a      	ldr	r2, [r3, #32]
 8006ebe:	697b      	ldr	r3, [r7, #20]
 8006ec0:	43db      	mvns	r3, r3
 8006ec2:	401a      	ands	r2, r3
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	6a1a      	ldr	r2, [r3, #32]
 8006ecc:	68bb      	ldr	r3, [r7, #8]
 8006ece:	f003 031f 	and.w	r3, r3, #31
 8006ed2:	6879      	ldr	r1, [r7, #4]
 8006ed4:	fa01 f303 	lsl.w	r3, r1, r3
 8006ed8:	431a      	orrs	r2, r3
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	621a      	str	r2, [r3, #32]
}
 8006ede:	bf00      	nop
 8006ee0:	371c      	adds	r7, #28
 8006ee2:	46bd      	mov	sp, r7
 8006ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee8:	4770      	bx	lr
	...

08006eec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b085      	sub	sp, #20
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	6078      	str	r0, [r7, #4]
 8006ef4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006efc:	2b01      	cmp	r3, #1
 8006efe:	d101      	bne.n	8006f04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f00:	2302      	movs	r3, #2
 8006f02:	e05a      	b.n	8006fba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2201      	movs	r2, #1
 8006f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	2202      	movs	r2, #2
 8006f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	681b      	ldr	r3, [r3, #0]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f24:	68fb      	ldr	r3, [r7, #12]
 8006f26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f2c:	683b      	ldr	r3, [r7, #0]
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	68fa      	ldr	r2, [r7, #12]
 8006f32:	4313      	orrs	r3, r2
 8006f34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	68fa      	ldr	r2, [r7, #12]
 8006f3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	4a21      	ldr	r2, [pc, #132]	; (8006fc8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d022      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f50:	d01d      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4a1d      	ldr	r2, [pc, #116]	; (8006fcc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	d018      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	4a1b      	ldr	r2, [pc, #108]	; (8006fd0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f62:	4293      	cmp	r3, r2
 8006f64:	d013      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	4a1a      	ldr	r2, [pc, #104]	; (8006fd4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	d00e      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	4a18      	ldr	r2, [pc, #96]	; (8006fd8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006f76:	4293      	cmp	r3, r2
 8006f78:	d009      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a17      	ldr	r2, [pc, #92]	; (8006fdc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d004      	beq.n	8006f8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	4a15      	ldr	r2, [pc, #84]	; (8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d10c      	bne.n	8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006f94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	685b      	ldr	r3, [r3, #4]
 8006f9a:	68ba      	ldr	r2, [r7, #8]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2200      	movs	r2, #0
 8006fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fb8:	2300      	movs	r3, #0
}
 8006fba:	4618      	mov	r0, r3
 8006fbc:	3714      	adds	r7, #20
 8006fbe:	46bd      	mov	sp, r7
 8006fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc4:	4770      	bx	lr
 8006fc6:	bf00      	nop
 8006fc8:	40010000 	.word	0x40010000
 8006fcc:	40000400 	.word	0x40000400
 8006fd0:	40000800 	.word	0x40000800
 8006fd4:	40000c00 	.word	0x40000c00
 8006fd8:	40010400 	.word	0x40010400
 8006fdc:	40014000 	.word	0x40014000
 8006fe0:	40001800 	.word	0x40001800

08006fe4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006fe4:	b480      	push	{r7}
 8006fe6:	b085      	sub	sp, #20
 8006fe8:	af00      	add	r7, sp, #0
 8006fea:	6078      	str	r0, [r7, #4]
 8006fec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ff8:	2b01      	cmp	r3, #1
 8006ffa:	d101      	bne.n	8007000 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006ffc:	2302      	movs	r3, #2
 8006ffe:	e03d      	b.n	800707c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	4313      	orrs	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	689b      	ldr	r3, [r3, #8]
 8007020:	4313      	orrs	r3, r2
 8007022:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	685b      	ldr	r3, [r3, #4]
 800702e:	4313      	orrs	r3, r2
 8007030:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007038:	683b      	ldr	r3, [r7, #0]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	4313      	orrs	r3, r2
 800703e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	691b      	ldr	r3, [r3, #16]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	695b      	ldr	r3, [r3, #20]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	69db      	ldr	r3, [r3, #28]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	68fa      	ldr	r2, [r7, #12]
 8007070:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800707a:	2300      	movs	r3, #0
}
 800707c:	4618      	mov	r0, r3
 800707e:	3714      	adds	r7, #20
 8007080:	46bd      	mov	sp, r7
 8007082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007086:	4770      	bx	lr

08007088 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007088:	b480      	push	{r7}
 800708a:	b083      	sub	sp, #12
 800708c:	af00      	add	r7, sp, #0
 800708e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007090:	bf00      	nop
 8007092:	370c      	adds	r7, #12
 8007094:	46bd      	mov	sp, r7
 8007096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709a:	4770      	bx	lr

0800709c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070a4:	bf00      	nop
 80070a6:	370c      	adds	r7, #12
 80070a8:	46bd      	mov	sp, r7
 80070aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ae:	4770      	bx	lr

080070b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	b082      	sub	sp, #8
 80070b4:	af00      	add	r7, sp, #0
 80070b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d101      	bne.n	80070c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070be:	2301      	movs	r3, #1
 80070c0:	e03f      	b.n	8007142 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80070c8:	b2db      	uxtb	r3, r3
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d106      	bne.n	80070dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	2200      	movs	r2, #0
 80070d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070d6:	6878      	ldr	r0, [r7, #4]
 80070d8:	f7fc f972 	bl	80033c0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2224      	movs	r2, #36	; 0x24
 80070e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	68da      	ldr	r2, [r3, #12]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80070f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80070f4:	6878      	ldr	r0, [r7, #4]
 80070f6:	f000 fe0b 	bl	8007d10 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	691a      	ldr	r2, [r3, #16]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007108:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007118:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	68da      	ldr	r2, [r3, #12]
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007128:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	2200      	movs	r2, #0
 800712e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2220      	movs	r2, #32
 8007134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007140:	2300      	movs	r3, #0
}
 8007142:	4618      	mov	r0, r3
 8007144:	3708      	adds	r7, #8
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}

0800714a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800714a:	b580      	push	{r7, lr}
 800714c:	b08a      	sub	sp, #40	; 0x28
 800714e:	af02      	add	r7, sp, #8
 8007150:	60f8      	str	r0, [r7, #12]
 8007152:	60b9      	str	r1, [r7, #8]
 8007154:	603b      	str	r3, [r7, #0]
 8007156:	4613      	mov	r3, r2
 8007158:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800715a:	2300      	movs	r3, #0
 800715c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b20      	cmp	r3, #32
 8007168:	d17c      	bne.n	8007264 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800716a:	68bb      	ldr	r3, [r7, #8]
 800716c:	2b00      	cmp	r3, #0
 800716e:	d002      	beq.n	8007176 <HAL_UART_Transmit+0x2c>
 8007170:	88fb      	ldrh	r3, [r7, #6]
 8007172:	2b00      	cmp	r3, #0
 8007174:	d101      	bne.n	800717a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007176:	2301      	movs	r3, #1
 8007178:	e075      	b.n	8007266 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007180:	2b01      	cmp	r3, #1
 8007182:	d101      	bne.n	8007188 <HAL_UART_Transmit+0x3e>
 8007184:	2302      	movs	r3, #2
 8007186:	e06e      	b.n	8007266 <HAL_UART_Transmit+0x11c>
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007190:	68fb      	ldr	r3, [r7, #12]
 8007192:	2200      	movs	r2, #0
 8007194:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	2221      	movs	r2, #33	; 0x21
 800719a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800719e:	f7fc fe35 	bl	8003e0c <HAL_GetTick>
 80071a2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	88fa      	ldrh	r2, [r7, #6]
 80071a8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	88fa      	ldrh	r2, [r7, #6]
 80071ae:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	689b      	ldr	r3, [r3, #8]
 80071b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071b8:	d108      	bne.n	80071cc <HAL_UART_Transmit+0x82>
 80071ba:	68fb      	ldr	r3, [r7, #12]
 80071bc:	691b      	ldr	r3, [r3, #16]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d104      	bne.n	80071cc <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071c2:	2300      	movs	r3, #0
 80071c4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071c6:	68bb      	ldr	r3, [r7, #8]
 80071c8:	61bb      	str	r3, [r7, #24]
 80071ca:	e003      	b.n	80071d4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80071cc:	68bb      	ldr	r3, [r7, #8]
 80071ce:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80071d0:	2300      	movs	r3, #0
 80071d2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2200      	movs	r2, #0
 80071d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80071dc:	e02a      	b.n	8007234 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80071de:	683b      	ldr	r3, [r7, #0]
 80071e0:	9300      	str	r3, [sp, #0]
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	2200      	movs	r2, #0
 80071e6:	2180      	movs	r1, #128	; 0x80
 80071e8:	68f8      	ldr	r0, [r7, #12]
 80071ea:	f000 fb8d 	bl	8007908 <UART_WaitOnFlagUntilTimeout>
 80071ee:	4603      	mov	r3, r0
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d001      	beq.n	80071f8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80071f4:	2303      	movs	r3, #3
 80071f6:	e036      	b.n	8007266 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80071f8:	69fb      	ldr	r3, [r7, #28]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d10b      	bne.n	8007216 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80071fe:	69bb      	ldr	r3, [r7, #24]
 8007200:	881b      	ldrh	r3, [r3, #0]
 8007202:	461a      	mov	r2, r3
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800720c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800720e:	69bb      	ldr	r3, [r7, #24]
 8007210:	3302      	adds	r3, #2
 8007212:	61bb      	str	r3, [r7, #24]
 8007214:	e007      	b.n	8007226 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007216:	69fb      	ldr	r3, [r7, #28]
 8007218:	781a      	ldrb	r2, [r3, #0]
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007220:	69fb      	ldr	r3, [r7, #28]
 8007222:	3301      	adds	r3, #1
 8007224:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800722a:	b29b      	uxth	r3, r3
 800722c:	3b01      	subs	r3, #1
 800722e:	b29a      	uxth	r2, r3
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007238:	b29b      	uxth	r3, r3
 800723a:	2b00      	cmp	r3, #0
 800723c:	d1cf      	bne.n	80071de <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	9300      	str	r3, [sp, #0]
 8007242:	697b      	ldr	r3, [r7, #20]
 8007244:	2200      	movs	r2, #0
 8007246:	2140      	movs	r1, #64	; 0x40
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f000 fb5d 	bl	8007908 <UART_WaitOnFlagUntilTimeout>
 800724e:	4603      	mov	r3, r0
 8007250:	2b00      	cmp	r3, #0
 8007252:	d001      	beq.n	8007258 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007254:	2303      	movs	r3, #3
 8007256:	e006      	b.n	8007266 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	2220      	movs	r2, #32
 800725c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007260:	2300      	movs	r3, #0
 8007262:	e000      	b.n	8007266 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007264:	2302      	movs	r3, #2
  }
}
 8007266:	4618      	mov	r0, r3
 8007268:	3720      	adds	r7, #32
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800726e:	b480      	push	{r7}
 8007270:	b085      	sub	sp, #20
 8007272:	af00      	add	r7, sp, #0
 8007274:	60f8      	str	r0, [r7, #12]
 8007276:	60b9      	str	r1, [r7, #8]
 8007278:	4613      	mov	r3, r2
 800727a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800727c:	68fb      	ldr	r3, [r7, #12]
 800727e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007282:	b2db      	uxtb	r3, r3
 8007284:	2b20      	cmp	r3, #32
 8007286:	d130      	bne.n	80072ea <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	2b00      	cmp	r3, #0
 800728c:	d002      	beq.n	8007294 <HAL_UART_Transmit_IT+0x26>
 800728e:	88fb      	ldrh	r3, [r7, #6]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d101      	bne.n	8007298 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8007294:	2301      	movs	r3, #1
 8007296:	e029      	b.n	80072ec <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800729e:	2b01      	cmp	r3, #1
 80072a0:	d101      	bne.n	80072a6 <HAL_UART_Transmit_IT+0x38>
 80072a2:	2302      	movs	r3, #2
 80072a4:	e022      	b.n	80072ec <HAL_UART_Transmit_IT+0x7e>
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	2201      	movs	r2, #1
 80072aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	68ba      	ldr	r2, [r7, #8]
 80072b2:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	88fa      	ldrh	r2, [r7, #6]
 80072b8:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	88fa      	ldrh	r2, [r7, #6]
 80072be:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2200      	movs	r2, #0
 80072c4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	2221      	movs	r2, #33	; 0x21
 80072ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	2200      	movs	r2, #0
 80072d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	68da      	ldr	r2, [r3, #12]
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80072e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80072e6:	2300      	movs	r3, #0
 80072e8:	e000      	b.n	80072ec <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80072ea:	2302      	movs	r3, #2
  }
}
 80072ec:	4618      	mov	r0, r3
 80072ee:	3714      	adds	r7, #20
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr

080072f8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072f8:	b580      	push	{r7, lr}
 80072fa:	b084      	sub	sp, #16
 80072fc:	af00      	add	r7, sp, #0
 80072fe:	60f8      	str	r0, [r7, #12]
 8007300:	60b9      	str	r1, [r7, #8]
 8007302:	4613      	mov	r3, r2
 8007304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800730c:	b2db      	uxtb	r3, r3
 800730e:	2b20      	cmp	r3, #32
 8007310:	d11d      	bne.n	800734e <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007312:	68bb      	ldr	r3, [r7, #8]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d002      	beq.n	800731e <HAL_UART_Receive_DMA+0x26>
 8007318:	88fb      	ldrh	r3, [r7, #6]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d101      	bne.n	8007322 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800731e:	2301      	movs	r3, #1
 8007320:	e016      	b.n	8007350 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007328:	2b01      	cmp	r3, #1
 800732a:	d101      	bne.n	8007330 <HAL_UART_Receive_DMA+0x38>
 800732c:	2302      	movs	r3, #2
 800732e:	e00f      	b.n	8007350 <HAL_UART_Receive_DMA+0x58>
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	2201      	movs	r2, #1
 8007334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007338:	68fb      	ldr	r3, [r7, #12]
 800733a:	2200      	movs	r2, #0
 800733c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800733e:	88fb      	ldrh	r3, [r7, #6]
 8007340:	461a      	mov	r2, r3
 8007342:	68b9      	ldr	r1, [r7, #8]
 8007344:	68f8      	ldr	r0, [r7, #12]
 8007346:	f000 fb29 	bl	800799c <UART_Start_Receive_DMA>
 800734a:	4603      	mov	r3, r0
 800734c:	e000      	b.n	8007350 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 800734e:	2302      	movs	r3, #2
  }
}
 8007350:	4618      	mov	r0, r3
 8007352:	3710      	adds	r7, #16
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}

08007358 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b082      	sub	sp, #8
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	68da      	ldr	r2, [r3, #12]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800736e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	695a      	ldr	r2, [r3, #20]
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	f022 0201 	bic.w	r2, r2, #1
 800737e:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007384:	2b01      	cmp	r3, #1
 8007386:	d107      	bne.n	8007398 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0210 	bic.w	r2, r2, #16
 8007396:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	695b      	ldr	r3, [r3, #20]
 800739e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073a2:	2b40      	cmp	r3, #64	; 0x40
 80073a4:	d124      	bne.n	80073f0 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	695a      	ldr	r2, [r3, #20]
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073b4:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d018      	beq.n	80073f0 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073c2:	2200      	movs	r2, #0
 80073c4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ca:	4618      	mov	r0, r3
 80073cc:	f7fd f998 	bl	8004700 <HAL_DMA_Abort>
 80073d0:	4603      	mov	r3, r0
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d00c      	beq.n	80073f0 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073da:	4618      	mov	r0, r3
 80073dc:	f7fd fbac 	bl	8004b38 <HAL_DMA_GetError>
 80073e0:	4603      	mov	r3, r0
 80073e2:	2b20      	cmp	r3, #32
 80073e4:	d104      	bne.n	80073f0 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	2210      	movs	r2, #16
 80073ea:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 80073ec:	2303      	movs	r3, #3
 80073ee:	e00a      	b.n	8007406 <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2220      	movs	r2, #32
 80073fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2200      	movs	r2, #0
 8007402:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8007404:	2300      	movs	r3, #0
}
 8007406:	4618      	mov	r0, r3
 8007408:	3708      	adds	r7, #8
 800740a:	46bd      	mov	sp, r7
 800740c:	bd80      	pop	{r7, pc}
	...

08007410 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b08a      	sub	sp, #40	; 0x28
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	68db      	ldr	r3, [r3, #12]
 8007426:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	695b      	ldr	r3, [r3, #20]
 800742e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007430:	2300      	movs	r3, #0
 8007432:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007434:	2300      	movs	r3, #0
 8007436:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800743a:	f003 030f 	and.w	r3, r3, #15
 800743e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007440:	69bb      	ldr	r3, [r7, #24]
 8007442:	2b00      	cmp	r3, #0
 8007444:	d10d      	bne.n	8007462 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007448:	f003 0320 	and.w	r3, r3, #32
 800744c:	2b00      	cmp	r3, #0
 800744e:	d008      	beq.n	8007462 <HAL_UART_IRQHandler+0x52>
 8007450:	6a3b      	ldr	r3, [r7, #32]
 8007452:	f003 0320 	and.w	r3, r3, #32
 8007456:	2b00      	cmp	r3, #0
 8007458:	d003      	beq.n	8007462 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800745a:	6878      	ldr	r0, [r7, #4]
 800745c:	f000 fbc1 	bl	8007be2 <UART_Receive_IT>
      return;
 8007460:	e17c      	b.n	800775c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007462:	69bb      	ldr	r3, [r7, #24]
 8007464:	2b00      	cmp	r3, #0
 8007466:	f000 80b1 	beq.w	80075cc <HAL_UART_IRQHandler+0x1bc>
 800746a:	69fb      	ldr	r3, [r7, #28]
 800746c:	f003 0301 	and.w	r3, r3, #1
 8007470:	2b00      	cmp	r3, #0
 8007472:	d105      	bne.n	8007480 <HAL_UART_IRQHandler+0x70>
 8007474:	6a3b      	ldr	r3, [r7, #32]
 8007476:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800747a:	2b00      	cmp	r3, #0
 800747c:	f000 80a6 	beq.w	80075cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007482:	f003 0301 	and.w	r3, r3, #1
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00a      	beq.n	80074a0 <HAL_UART_IRQHandler+0x90>
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007490:	2b00      	cmp	r3, #0
 8007492:	d005      	beq.n	80074a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007498:	f043 0201 	orr.w	r2, r3, #1
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074a2:	f003 0304 	and.w	r3, r3, #4
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d00a      	beq.n	80074c0 <HAL_UART_IRQHandler+0xb0>
 80074aa:	69fb      	ldr	r3, [r7, #28]
 80074ac:	f003 0301 	and.w	r3, r3, #1
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d005      	beq.n	80074c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b8:	f043 0202 	orr.w	r2, r3, #2
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074c2:	f003 0302 	and.w	r3, r3, #2
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00a      	beq.n	80074e0 <HAL_UART_IRQHandler+0xd0>
 80074ca:	69fb      	ldr	r3, [r7, #28]
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d005      	beq.n	80074e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d8:	f043 0204 	orr.w	r2, r3, #4
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80074e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074e2:	f003 0308 	and.w	r3, r3, #8
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d00f      	beq.n	800750a <HAL_UART_IRQHandler+0xfa>
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	f003 0320 	and.w	r3, r3, #32
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d104      	bne.n	80074fe <HAL_UART_IRQHandler+0xee>
 80074f4:	69fb      	ldr	r3, [r7, #28]
 80074f6:	f003 0301 	and.w	r3, r3, #1
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d005      	beq.n	800750a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074fe:	687b      	ldr	r3, [r7, #4]
 8007500:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007502:	f043 0208 	orr.w	r2, r3, #8
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800750e:	2b00      	cmp	r3, #0
 8007510:	f000 811f 	beq.w	8007752 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007516:	f003 0320 	and.w	r3, r3, #32
 800751a:	2b00      	cmp	r3, #0
 800751c:	d007      	beq.n	800752e <HAL_UART_IRQHandler+0x11e>
 800751e:	6a3b      	ldr	r3, [r7, #32]
 8007520:	f003 0320 	and.w	r3, r3, #32
 8007524:	2b00      	cmp	r3, #0
 8007526:	d002      	beq.n	800752e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007528:	6878      	ldr	r0, [r7, #4]
 800752a:	f000 fb5a 	bl	8007be2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	695b      	ldr	r3, [r3, #20]
 8007534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007538:	2b40      	cmp	r3, #64	; 0x40
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007548:	f003 0308 	and.w	r3, r3, #8
 800754c:	2b00      	cmp	r3, #0
 800754e:	d102      	bne.n	8007556 <HAL_UART_IRQHandler+0x146>
 8007550:	697b      	ldr	r3, [r7, #20]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d031      	beq.n	80075ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 fa9a 	bl	8007a90 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	695b      	ldr	r3, [r3, #20]
 8007562:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007566:	2b40      	cmp	r3, #64	; 0x40
 8007568:	d123      	bne.n	80075b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	695a      	ldr	r2, [r3, #20]
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007578:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800757e:	2b00      	cmp	r3, #0
 8007580:	d013      	beq.n	80075aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007586:	4a77      	ldr	r2, [pc, #476]	; (8007764 <HAL_UART_IRQHandler+0x354>)
 8007588:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800758a:	687b      	ldr	r3, [r7, #4]
 800758c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800758e:	4618      	mov	r0, r3
 8007590:	f7fd f926 	bl	80047e0 <HAL_DMA_Abort_IT>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d016      	beq.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075a4:	4610      	mov	r0, r2
 80075a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075a8:	e00e      	b.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f7f9 ff5a 	bl	8001464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b0:	e00a      	b.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075b2:	6878      	ldr	r0, [r7, #4]
 80075b4:	f7f9 ff56 	bl	8001464 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075b8:	e006      	b.n	80075c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075ba:	6878      	ldr	r0, [r7, #4]
 80075bc:	f7f9 ff52 	bl	8001464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	2200      	movs	r2, #0
 80075c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075c6:	e0c4      	b.n	8007752 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075c8:	bf00      	nop
    return;
 80075ca:	e0c2      	b.n	8007752 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80075d0:	2b01      	cmp	r3, #1
 80075d2:	f040 80a2 	bne.w	800771a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80075d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d8:	f003 0310 	and.w	r3, r3, #16
 80075dc:	2b00      	cmp	r3, #0
 80075de:	f000 809c 	beq.w	800771a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80075e2:	6a3b      	ldr	r3, [r7, #32]
 80075e4:	f003 0310 	and.w	r3, r3, #16
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	f000 8096 	beq.w	800771a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80075ee:	2300      	movs	r3, #0
 80075f0:	60fb      	str	r3, [r7, #12]
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	60fb      	str	r3, [r7, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	60fb      	str	r3, [r7, #12]
 8007602:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	695b      	ldr	r3, [r3, #20]
 800760a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800760e:	2b40      	cmp	r3, #64	; 0x40
 8007610:	d14f      	bne.n	80076b2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	685b      	ldr	r3, [r3, #4]
 800761a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800761c:	8a3b      	ldrh	r3, [r7, #16]
 800761e:	2b00      	cmp	r3, #0
 8007620:	f000 8099 	beq.w	8007756 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007628:	8a3a      	ldrh	r2, [r7, #16]
 800762a:	429a      	cmp	r2, r3
 800762c:	f080 8093 	bcs.w	8007756 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	8a3a      	ldrh	r2, [r7, #16]
 8007634:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800763a:	69db      	ldr	r3, [r3, #28]
 800763c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007640:	d02b      	beq.n	800769a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	68da      	ldr	r2, [r3, #12]
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007650:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695a      	ldr	r2, [r3, #20]
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	f022 0201 	bic.w	r2, r2, #1
 8007660:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	695a      	ldr	r2, [r3, #20]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007670:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2200      	movs	r2, #0
 800767e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	68da      	ldr	r2, [r3, #12]
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	f022 0210 	bic.w	r2, r2, #16
 800768e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007694:	4618      	mov	r0, r3
 8007696:	f7fd f833 	bl	8004700 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076a2:	b29b      	uxth	r3, r3
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	b29b      	uxth	r3, r3
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f000 f870 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076b0:	e051      	b.n	8007756 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076ba:	b29b      	uxth	r3, r3
 80076bc:	1ad3      	subs	r3, r2, r3
 80076be:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076c4:	b29b      	uxth	r3, r3
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d047      	beq.n	800775a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80076ca:	8a7b      	ldrh	r3, [r7, #18]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d044      	beq.n	800775a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	68da      	ldr	r2, [r3, #12]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80076de:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	695a      	ldr	r2, [r3, #20]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	681b      	ldr	r3, [r3, #0]
 80076ea:	f022 0201 	bic.w	r2, r2, #1
 80076ee:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2220      	movs	r2, #32
 80076f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2200      	movs	r2, #0
 80076fc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	68da      	ldr	r2, [r3, #12]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f022 0210 	bic.w	r2, r2, #16
 800770c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800770e:	8a7b      	ldrh	r3, [r7, #18]
 8007710:	4619      	mov	r1, r3
 8007712:	6878      	ldr	r0, [r7, #4]
 8007714:	f000 f83c 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007718:	e01f      	b.n	800775a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800771a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800771c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007720:	2b00      	cmp	r3, #0
 8007722:	d008      	beq.n	8007736 <HAL_UART_IRQHandler+0x326>
 8007724:	6a3b      	ldr	r3, [r7, #32]
 8007726:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800772a:	2b00      	cmp	r3, #0
 800772c:	d003      	beq.n	8007736 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800772e:	6878      	ldr	r0, [r7, #4]
 8007730:	f000 f9ef 	bl	8007b12 <UART_Transmit_IT>
    return;
 8007734:	e012      	b.n	800775c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007738:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00d      	beq.n	800775c <HAL_UART_IRQHandler+0x34c>
 8007740:	6a3b      	ldr	r3, [r7, #32]
 8007742:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007746:	2b00      	cmp	r3, #0
 8007748:	d008      	beq.n	800775c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa31 	bl	8007bb2 <UART_EndTransmit_IT>
    return;
 8007750:	e004      	b.n	800775c <HAL_UART_IRQHandler+0x34c>
    return;
 8007752:	bf00      	nop
 8007754:	e002      	b.n	800775c <HAL_UART_IRQHandler+0x34c>
      return;
 8007756:	bf00      	nop
 8007758:	e000      	b.n	800775c <HAL_UART_IRQHandler+0x34c>
      return;
 800775a:	bf00      	nop
  }
}
 800775c:	3728      	adds	r7, #40	; 0x28
 800775e:	46bd      	mov	sp, r7
 8007760:	bd80      	pop	{r7, pc}
 8007762:	bf00      	nop
 8007764:	08007aeb 	.word	0x08007aeb

08007768 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007770:	bf00      	nop
 8007772:	370c      	adds	r7, #12
 8007774:	46bd      	mov	sp, r7
 8007776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800777a:	4770      	bx	lr

0800777c <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800777c:	b480      	push	{r7}
 800777e:	b083      	sub	sp, #12
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007784:	bf00      	nop
 8007786:	370c      	adds	r7, #12
 8007788:	46bd      	mov	sp, r7
 800778a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800778e:	4770      	bx	lr

08007790 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007790:	b480      	push	{r7}
 8007792:	b083      	sub	sp, #12
 8007794:	af00      	add	r7, sp, #0
 8007796:	6078      	str	r0, [r7, #4]
 8007798:	460b      	mov	r3, r1
 800779a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800779c:	bf00      	nop
 800779e:	370c      	adds	r7, #12
 80077a0:	46bd      	mov	sp, r7
 80077a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077a6:	4770      	bx	lr

080077a8 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077a8:	b580      	push	{r7, lr}
 80077aa:	b084      	sub	sp, #16
 80077ac:	af00      	add	r7, sp, #0
 80077ae:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077b4:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d12a      	bne.n	800781a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68da      	ldr	r2, [r3, #12]
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80077d8:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	695a      	ldr	r2, [r3, #20]
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	f022 0201 	bic.w	r2, r2, #1
 80077e8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	695a      	ldr	r2, [r3, #20]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80077f8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80077fa:	68fb      	ldr	r3, [r7, #12]
 80077fc:	2220      	movs	r2, #32
 80077fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007806:	2b01      	cmp	r3, #1
 8007808:	d107      	bne.n	800781a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f022 0210 	bic.w	r2, r2, #16
 8007818:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800781e:	2b01      	cmp	r3, #1
 8007820:	d106      	bne.n	8007830 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007826:	4619      	mov	r1, r3
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f7ff ffb1 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800782e:	e002      	b.n	8007836 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007830:	68f8      	ldr	r0, [r7, #12]
 8007832:	f7f9 fdfd 	bl	8001430 <HAL_UART_RxCpltCallback>
}
 8007836:	bf00      	nop
 8007838:	3710      	adds	r7, #16
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b084      	sub	sp, #16
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800784a:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007850:	2b01      	cmp	r3, #1
 8007852:	d108      	bne.n	8007866 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007858:	085b      	lsrs	r3, r3, #1
 800785a:	b29b      	uxth	r3, r3
 800785c:	4619      	mov	r1, r3
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f7ff ff96 	bl	8007790 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007864:	e002      	b.n	800786c <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007866:	68f8      	ldr	r0, [r7, #12]
 8007868:	f7ff ff88 	bl	800777c <HAL_UART_RxHalfCpltCallback>
}
 800786c:	bf00      	nop
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800787c:	2300      	movs	r3, #0
 800787e:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007884:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007886:	68bb      	ldr	r3, [r7, #8]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695b      	ldr	r3, [r3, #20]
 800788c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007890:	2b80      	cmp	r3, #128	; 0x80
 8007892:	bf0c      	ite	eq
 8007894:	2301      	moveq	r3, #1
 8007896:	2300      	movne	r3, #0
 8007898:	b2db      	uxtb	r3, r3
 800789a:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800789c:	68bb      	ldr	r3, [r7, #8]
 800789e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078a2:	b2db      	uxtb	r3, r3
 80078a4:	2b21      	cmp	r3, #33	; 0x21
 80078a6:	d108      	bne.n	80078ba <UART_DMAError+0x46>
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d005      	beq.n	80078ba <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078ae:	68bb      	ldr	r3, [r7, #8]
 80078b0:	2200      	movs	r2, #0
 80078b2:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078b4:	68b8      	ldr	r0, [r7, #8]
 80078b6:	f000 f8d5 	bl	8007a64 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078ba:	68bb      	ldr	r3, [r7, #8]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	695b      	ldr	r3, [r3, #20]
 80078c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c4:	2b40      	cmp	r3, #64	; 0x40
 80078c6:	bf0c      	ite	eq
 80078c8:	2301      	moveq	r3, #1
 80078ca:	2300      	movne	r3, #0
 80078cc:	b2db      	uxtb	r3, r3
 80078ce:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80078d0:	68bb      	ldr	r3, [r7, #8]
 80078d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b22      	cmp	r3, #34	; 0x22
 80078da:	d108      	bne.n	80078ee <UART_DMAError+0x7a>
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2200      	movs	r2, #0
 80078e6:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80078e8:	68b8      	ldr	r0, [r7, #8]
 80078ea:	f000 f8d1 	bl	8007a90 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80078ee:	68bb      	ldr	r3, [r7, #8]
 80078f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80078f2:	f043 0210 	orr.w	r2, r3, #16
 80078f6:	68bb      	ldr	r3, [r7, #8]
 80078f8:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078fa:	68b8      	ldr	r0, [r7, #8]
 80078fc:	f7f9 fdb2 	bl	8001464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007900:	bf00      	nop
 8007902:	3710      	adds	r7, #16
 8007904:	46bd      	mov	sp, r7
 8007906:	bd80      	pop	{r7, pc}

08007908 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	b084      	sub	sp, #16
 800790c:	af00      	add	r7, sp, #0
 800790e:	60f8      	str	r0, [r7, #12]
 8007910:	60b9      	str	r1, [r7, #8]
 8007912:	603b      	str	r3, [r7, #0]
 8007914:	4613      	mov	r3, r2
 8007916:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007918:	e02c      	b.n	8007974 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800791a:	69bb      	ldr	r3, [r7, #24]
 800791c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007920:	d028      	beq.n	8007974 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007922:	69bb      	ldr	r3, [r7, #24]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d007      	beq.n	8007938 <UART_WaitOnFlagUntilTimeout+0x30>
 8007928:	f7fc fa70 	bl	8003e0c <HAL_GetTick>
 800792c:	4602      	mov	r2, r0
 800792e:	683b      	ldr	r3, [r7, #0]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	69ba      	ldr	r2, [r7, #24]
 8007934:	429a      	cmp	r2, r3
 8007936:	d21d      	bcs.n	8007974 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	68da      	ldr	r2, [r3, #12]
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8007946:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	695a      	ldr	r2, [r3, #20]
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f022 0201 	bic.w	r2, r2, #1
 8007956:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	2220      	movs	r2, #32
 800795c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007960:	68fb      	ldr	r3, [r7, #12]
 8007962:	2220      	movs	r2, #32
 8007964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	2200      	movs	r2, #0
 800796c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007970:	2303      	movs	r3, #3
 8007972:	e00f      	b.n	8007994 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68bb      	ldr	r3, [r7, #8]
 800797c:	4013      	ands	r3, r2
 800797e:	68ba      	ldr	r2, [r7, #8]
 8007980:	429a      	cmp	r2, r3
 8007982:	bf0c      	ite	eq
 8007984:	2301      	moveq	r3, #1
 8007986:	2300      	movne	r3, #0
 8007988:	b2db      	uxtb	r3, r3
 800798a:	461a      	mov	r2, r3
 800798c:	79fb      	ldrb	r3, [r7, #7]
 800798e:	429a      	cmp	r2, r3
 8007990:	d0c3      	beq.n	800791a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007992:	2300      	movs	r3, #0
}
 8007994:	4618      	mov	r0, r3
 8007996:	3710      	adds	r7, #16
 8007998:	46bd      	mov	sp, r7
 800799a:	bd80      	pop	{r7, pc}

0800799c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800799c:	b580      	push	{r7, lr}
 800799e:	b086      	sub	sp, #24
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	60f8      	str	r0, [r7, #12]
 80079a4:	60b9      	str	r1, [r7, #8]
 80079a6:	4613      	mov	r3, r2
 80079a8:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079b0:	68fb      	ldr	r3, [r7, #12]
 80079b2:	88fa      	ldrh	r2, [r7, #6]
 80079b4:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2222      	movs	r2, #34	; 0x22
 80079c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079c8:	4a23      	ldr	r2, [pc, #140]	; (8007a58 <UART_Start_Receive_DMA+0xbc>)
 80079ca:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d0:	4a22      	ldr	r2, [pc, #136]	; (8007a5c <UART_Start_Receive_DMA+0xc0>)
 80079d2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079d8:	4a21      	ldr	r2, [pc, #132]	; (8007a60 <UART_Start_Receive_DMA+0xc4>)
 80079da:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80079e0:	2200      	movs	r2, #0
 80079e2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80079e4:	f107 0308 	add.w	r3, r7, #8
 80079e8:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	3304      	adds	r3, #4
 80079f4:	4619      	mov	r1, r3
 80079f6:	697b      	ldr	r3, [r7, #20]
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	88fb      	ldrh	r3, [r7, #6]
 80079fc:	f7fc fe28 	bl	8004650 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a00:	2300      	movs	r3, #0
 8007a02:	613b      	str	r3, [r7, #16]
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	613b      	str	r3, [r7, #16]
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	685b      	ldr	r3, [r3, #4]
 8007a12:	613b      	str	r3, [r7, #16]
 8007a14:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	68da      	ldr	r2, [r3, #12]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a2c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	695a      	ldr	r2, [r3, #20]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f042 0201 	orr.w	r2, r2, #1
 8007a3c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	695a      	ldr	r2, [r3, #20]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a4c:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007a4e:	2300      	movs	r3, #0
}
 8007a50:	4618      	mov	r0, r3
 8007a52:	3718      	adds	r7, #24
 8007a54:	46bd      	mov	sp, r7
 8007a56:	bd80      	pop	{r7, pc}
 8007a58:	080077a9 	.word	0x080077a9
 8007a5c:	0800783f 	.word	0x0800783f
 8007a60:	08007875 	.word	0x08007875

08007a64 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b083      	sub	sp, #12
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	68da      	ldr	r2, [r3, #12]
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007a7a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	2220      	movs	r2, #32
 8007a80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007a84:	bf00      	nop
 8007a86:	370c      	adds	r7, #12
 8007a88:	46bd      	mov	sp, r7
 8007a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a8e:	4770      	bx	lr

08007a90 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a90:	b480      	push	{r7}
 8007a92:	b083      	sub	sp, #12
 8007a94:	af00      	add	r7, sp, #0
 8007a96:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	68da      	ldr	r2, [r3, #12]
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	681b      	ldr	r3, [r3, #0]
 8007aa2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007aa6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	695a      	ldr	r2, [r3, #20]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f022 0201 	bic.w	r2, r2, #1
 8007ab6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007abc:	2b01      	cmp	r3, #1
 8007abe:	d107      	bne.n	8007ad0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	681b      	ldr	r3, [r3, #0]
 8007ac4:	68da      	ldr	r2, [r3, #12]
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f022 0210 	bic.w	r2, r2, #16
 8007ace:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	2220      	movs	r2, #32
 8007ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	2200      	movs	r2, #0
 8007adc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007ade:	bf00      	nop
 8007ae0:	370c      	adds	r7, #12
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr

08007aea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007aea:	b580      	push	{r7, lr}
 8007aec:	b084      	sub	sp, #16
 8007aee:	af00      	add	r7, sp, #0
 8007af0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007af6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2200      	movs	r2, #0
 8007afc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2200      	movs	r2, #0
 8007b02:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b04:	68f8      	ldr	r0, [r7, #12]
 8007b06:	f7f9 fcad 	bl	8001464 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b0a:	bf00      	nop
 8007b0c:	3710      	adds	r7, #16
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	bd80      	pop	{r7, pc}

08007b12 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b12:	b480      	push	{r7}
 8007b14:	b085      	sub	sp, #20
 8007b16:	af00      	add	r7, sp, #0
 8007b18:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b20:	b2db      	uxtb	r3, r3
 8007b22:	2b21      	cmp	r3, #33	; 0x21
 8007b24:	d13e      	bne.n	8007ba4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	689b      	ldr	r3, [r3, #8]
 8007b2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b2e:	d114      	bne.n	8007b5a <UART_Transmit_IT+0x48>
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	691b      	ldr	r3, [r3, #16]
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d110      	bne.n	8007b5a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a1b      	ldr	r3, [r3, #32]
 8007b3c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	881b      	ldrh	r3, [r3, #0]
 8007b42:	461a      	mov	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b4c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	1c9a      	adds	r2, r3, #2
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	621a      	str	r2, [r3, #32]
 8007b58:	e008      	b.n	8007b6c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	6a1b      	ldr	r3, [r3, #32]
 8007b5e:	1c59      	adds	r1, r3, #1
 8007b60:	687a      	ldr	r2, [r7, #4]
 8007b62:	6211      	str	r1, [r2, #32]
 8007b64:	781a      	ldrb	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b70:	b29b      	uxth	r3, r3
 8007b72:	3b01      	subs	r3, #1
 8007b74:	b29b      	uxth	r3, r3
 8007b76:	687a      	ldr	r2, [r7, #4]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d10f      	bne.n	8007ba0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	68da      	ldr	r2, [r3, #12]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007b8e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68da      	ldr	r2, [r3, #12]
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	681b      	ldr	r3, [r3, #0]
 8007b9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007b9e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
 8007ba2:	e000      	b.n	8007ba6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007ba4:	2302      	movs	r3, #2
  }
}
 8007ba6:	4618      	mov	r0, r3
 8007ba8:	3714      	adds	r7, #20
 8007baa:	46bd      	mov	sp, r7
 8007bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bb0:	4770      	bx	lr

08007bb2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bb2:	b580      	push	{r7, lr}
 8007bb4:	b082      	sub	sp, #8
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	68da      	ldr	r2, [r3, #12]
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007bc8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	2220      	movs	r2, #32
 8007bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7ff fdc8 	bl	8007768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3708      	adds	r7, #8
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}

08007be2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007be2:	b580      	push	{r7, lr}
 8007be4:	b084      	sub	sp, #16
 8007be6:	af00      	add	r7, sp, #0
 8007be8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007bf0:	b2db      	uxtb	r3, r3
 8007bf2:	2b22      	cmp	r3, #34	; 0x22
 8007bf4:	f040 8087 	bne.w	8007d06 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	689b      	ldr	r3, [r3, #8]
 8007bfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c00:	d117      	bne.n	8007c32 <UART_Receive_IT+0x50>
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d113      	bne.n	8007c32 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c12:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	685b      	ldr	r3, [r3, #4]
 8007c1a:	b29b      	uxth	r3, r3
 8007c1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c20:	b29a      	uxth	r2, r3
 8007c22:	68bb      	ldr	r3, [r7, #8]
 8007c24:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c2a:	1c9a      	adds	r2, r3, #2
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	629a      	str	r2, [r3, #40]	; 0x28
 8007c30:	e026      	b.n	8007c80 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c36:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007c38:	2300      	movs	r3, #0
 8007c3a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	689b      	ldr	r3, [r3, #8]
 8007c40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c44:	d007      	beq.n	8007c56 <UART_Receive_IT+0x74>
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	689b      	ldr	r3, [r3, #8]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d10a      	bne.n	8007c64 <UART_Receive_IT+0x82>
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	691b      	ldr	r3, [r3, #16]
 8007c52:	2b00      	cmp	r3, #0
 8007c54:	d106      	bne.n	8007c64 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	685b      	ldr	r3, [r3, #4]
 8007c5c:	b2da      	uxtb	r2, r3
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	701a      	strb	r2, [r3, #0]
 8007c62:	e008      	b.n	8007c76 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	685b      	ldr	r3, [r3, #4]
 8007c6a:	b2db      	uxtb	r3, r3
 8007c6c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007c70:	b2da      	uxtb	r2, r3
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c7a:	1c5a      	adds	r2, r3, #1
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c84:	b29b      	uxth	r3, r3
 8007c86:	3b01      	subs	r3, #1
 8007c88:	b29b      	uxth	r3, r3
 8007c8a:	687a      	ldr	r2, [r7, #4]
 8007c8c:	4619      	mov	r1, r3
 8007c8e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007c90:	2b00      	cmp	r3, #0
 8007c92:	d136      	bne.n	8007d02 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	68da      	ldr	r2, [r3, #12]
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f022 0220 	bic.w	r2, r2, #32
 8007ca2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	68da      	ldr	r2, [r3, #12]
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cb2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	695a      	ldr	r2, [r3, #20]
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	f022 0201 	bic.w	r2, r2, #1
 8007cc2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	2220      	movs	r2, #32
 8007cc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cd0:	2b01      	cmp	r3, #1
 8007cd2:	d10e      	bne.n	8007cf2 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68da      	ldr	r2, [r3, #12]
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	f022 0210 	bic.w	r2, r2, #16
 8007ce2:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ce8:	4619      	mov	r1, r3
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff fd50 	bl	8007790 <HAL_UARTEx_RxEventCallback>
 8007cf0:	e002      	b.n	8007cf8 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f7f9 fb9c 	bl	8001430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007cfe:	2300      	movs	r3, #0
 8007d00:	e002      	b.n	8007d08 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007d02:	2300      	movs	r3, #0
 8007d04:	e000      	b.n	8007d08 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007d06:	2302      	movs	r3, #2
  }
}
 8007d08:	4618      	mov	r0, r3
 8007d0a:	3710      	adds	r7, #16
 8007d0c:	46bd      	mov	sp, r7
 8007d0e:	bd80      	pop	{r7, pc}

08007d10 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d14:	b09f      	sub	sp, #124	; 0x7c
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	691b      	ldr	r3, [r3, #16]
 8007d20:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d26:	68d9      	ldr	r1, [r3, #12]
 8007d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d2a:	681a      	ldr	r2, [r3, #0]
 8007d2c:	ea40 0301 	orr.w	r3, r0, r1
 8007d30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d34:	689a      	ldr	r2, [r3, #8]
 8007d36:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d38:	691b      	ldr	r3, [r3, #16]
 8007d3a:	431a      	orrs	r2, r3
 8007d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d3e:	695b      	ldr	r3, [r3, #20]
 8007d40:	431a      	orrs	r2, r3
 8007d42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d44:	69db      	ldr	r3, [r3, #28]
 8007d46:	4313      	orrs	r3, r2
 8007d48:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d54:	f021 010c 	bic.w	r1, r1, #12
 8007d58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5a:	681a      	ldr	r2, [r3, #0]
 8007d5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d5e:	430b      	orrs	r3, r1
 8007d60:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	695b      	ldr	r3, [r3, #20]
 8007d68:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6e:	6999      	ldr	r1, [r3, #24]
 8007d70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d72:	681a      	ldr	r2, [r3, #0]
 8007d74:	ea40 0301 	orr.w	r3, r0, r1
 8007d78:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7c:	681a      	ldr	r2, [r3, #0]
 8007d7e:	4bc5      	ldr	r3, [pc, #788]	; (8008094 <UART_SetConfig+0x384>)
 8007d80:	429a      	cmp	r2, r3
 8007d82:	d004      	beq.n	8007d8e <UART_SetConfig+0x7e>
 8007d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d86:	681a      	ldr	r2, [r3, #0]
 8007d88:	4bc3      	ldr	r3, [pc, #780]	; (8008098 <UART_SetConfig+0x388>)
 8007d8a:	429a      	cmp	r2, r3
 8007d8c:	d103      	bne.n	8007d96 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007d8e:	f7fd fdd5 	bl	800593c <HAL_RCC_GetPCLK2Freq>
 8007d92:	6778      	str	r0, [r7, #116]	; 0x74
 8007d94:	e002      	b.n	8007d9c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007d96:	f7fd fdbd 	bl	8005914 <HAL_RCC_GetPCLK1Freq>
 8007d9a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9e:	69db      	ldr	r3, [r3, #28]
 8007da0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007da4:	f040 80b6 	bne.w	8007f14 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007da8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007daa:	461c      	mov	r4, r3
 8007dac:	f04f 0500 	mov.w	r5, #0
 8007db0:	4622      	mov	r2, r4
 8007db2:	462b      	mov	r3, r5
 8007db4:	1891      	adds	r1, r2, r2
 8007db6:	6439      	str	r1, [r7, #64]	; 0x40
 8007db8:	415b      	adcs	r3, r3
 8007dba:	647b      	str	r3, [r7, #68]	; 0x44
 8007dbc:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007dc0:	1912      	adds	r2, r2, r4
 8007dc2:	eb45 0303 	adc.w	r3, r5, r3
 8007dc6:	f04f 0000 	mov.w	r0, #0
 8007dca:	f04f 0100 	mov.w	r1, #0
 8007dce:	00d9      	lsls	r1, r3, #3
 8007dd0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007dd4:	00d0      	lsls	r0, r2, #3
 8007dd6:	4602      	mov	r2, r0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	1911      	adds	r1, r2, r4
 8007ddc:	6639      	str	r1, [r7, #96]	; 0x60
 8007dde:	416b      	adcs	r3, r5
 8007de0:	667b      	str	r3, [r7, #100]	; 0x64
 8007de2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007de4:	685b      	ldr	r3, [r3, #4]
 8007de6:	461a      	mov	r2, r3
 8007de8:	f04f 0300 	mov.w	r3, #0
 8007dec:	1891      	adds	r1, r2, r2
 8007dee:	63b9      	str	r1, [r7, #56]	; 0x38
 8007df0:	415b      	adcs	r3, r3
 8007df2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007df4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007df8:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007dfc:	f7f8 ff1c 	bl	8000c38 <__aeabi_uldivmod>
 8007e00:	4602      	mov	r2, r0
 8007e02:	460b      	mov	r3, r1
 8007e04:	4ba5      	ldr	r3, [pc, #660]	; (800809c <UART_SetConfig+0x38c>)
 8007e06:	fba3 2302 	umull	r2, r3, r3, r2
 8007e0a:	095b      	lsrs	r3, r3, #5
 8007e0c:	011e      	lsls	r6, r3, #4
 8007e0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e10:	461c      	mov	r4, r3
 8007e12:	f04f 0500 	mov.w	r5, #0
 8007e16:	4622      	mov	r2, r4
 8007e18:	462b      	mov	r3, r5
 8007e1a:	1891      	adds	r1, r2, r2
 8007e1c:	6339      	str	r1, [r7, #48]	; 0x30
 8007e1e:	415b      	adcs	r3, r3
 8007e20:	637b      	str	r3, [r7, #52]	; 0x34
 8007e22:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e26:	1912      	adds	r2, r2, r4
 8007e28:	eb45 0303 	adc.w	r3, r5, r3
 8007e2c:	f04f 0000 	mov.w	r0, #0
 8007e30:	f04f 0100 	mov.w	r1, #0
 8007e34:	00d9      	lsls	r1, r3, #3
 8007e36:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e3a:	00d0      	lsls	r0, r2, #3
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	1911      	adds	r1, r2, r4
 8007e42:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e44:	416b      	adcs	r3, r5
 8007e46:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e4a:	685b      	ldr	r3, [r3, #4]
 8007e4c:	461a      	mov	r2, r3
 8007e4e:	f04f 0300 	mov.w	r3, #0
 8007e52:	1891      	adds	r1, r2, r2
 8007e54:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e56:	415b      	adcs	r3, r3
 8007e58:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e5a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e5e:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e62:	f7f8 fee9 	bl	8000c38 <__aeabi_uldivmod>
 8007e66:	4602      	mov	r2, r0
 8007e68:	460b      	mov	r3, r1
 8007e6a:	4b8c      	ldr	r3, [pc, #560]	; (800809c <UART_SetConfig+0x38c>)
 8007e6c:	fba3 1302 	umull	r1, r3, r3, r2
 8007e70:	095b      	lsrs	r3, r3, #5
 8007e72:	2164      	movs	r1, #100	; 0x64
 8007e74:	fb01 f303 	mul.w	r3, r1, r3
 8007e78:	1ad3      	subs	r3, r2, r3
 8007e7a:	00db      	lsls	r3, r3, #3
 8007e7c:	3332      	adds	r3, #50	; 0x32
 8007e7e:	4a87      	ldr	r2, [pc, #540]	; (800809c <UART_SetConfig+0x38c>)
 8007e80:	fba2 2303 	umull	r2, r3, r2, r3
 8007e84:	095b      	lsrs	r3, r3, #5
 8007e86:	005b      	lsls	r3, r3, #1
 8007e88:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007e8c:	441e      	add	r6, r3
 8007e8e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e90:	4618      	mov	r0, r3
 8007e92:	f04f 0100 	mov.w	r1, #0
 8007e96:	4602      	mov	r2, r0
 8007e98:	460b      	mov	r3, r1
 8007e9a:	1894      	adds	r4, r2, r2
 8007e9c:	623c      	str	r4, [r7, #32]
 8007e9e:	415b      	adcs	r3, r3
 8007ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ea6:	1812      	adds	r2, r2, r0
 8007ea8:	eb41 0303 	adc.w	r3, r1, r3
 8007eac:	f04f 0400 	mov.w	r4, #0
 8007eb0:	f04f 0500 	mov.w	r5, #0
 8007eb4:	00dd      	lsls	r5, r3, #3
 8007eb6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007eba:	00d4      	lsls	r4, r2, #3
 8007ebc:	4622      	mov	r2, r4
 8007ebe:	462b      	mov	r3, r5
 8007ec0:	1814      	adds	r4, r2, r0
 8007ec2:	653c      	str	r4, [r7, #80]	; 0x50
 8007ec4:	414b      	adcs	r3, r1
 8007ec6:	657b      	str	r3, [r7, #84]	; 0x54
 8007ec8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f04f 0300 	mov.w	r3, #0
 8007ed2:	1891      	adds	r1, r2, r2
 8007ed4:	61b9      	str	r1, [r7, #24]
 8007ed6:	415b      	adcs	r3, r3
 8007ed8:	61fb      	str	r3, [r7, #28]
 8007eda:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ede:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007ee2:	f7f8 fea9 	bl	8000c38 <__aeabi_uldivmod>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4b6c      	ldr	r3, [pc, #432]	; (800809c <UART_SetConfig+0x38c>)
 8007eec:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef0:	095b      	lsrs	r3, r3, #5
 8007ef2:	2164      	movs	r1, #100	; 0x64
 8007ef4:	fb01 f303 	mul.w	r3, r1, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	3332      	adds	r3, #50	; 0x32
 8007efe:	4a67      	ldr	r2, [pc, #412]	; (800809c <UART_SetConfig+0x38c>)
 8007f00:	fba2 2303 	umull	r2, r3, r2, r3
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	f003 0207 	and.w	r2, r3, #7
 8007f0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4432      	add	r2, r6
 8007f10:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f12:	e0b9      	b.n	8008088 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f14:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f16:	461c      	mov	r4, r3
 8007f18:	f04f 0500 	mov.w	r5, #0
 8007f1c:	4622      	mov	r2, r4
 8007f1e:	462b      	mov	r3, r5
 8007f20:	1891      	adds	r1, r2, r2
 8007f22:	6139      	str	r1, [r7, #16]
 8007f24:	415b      	adcs	r3, r3
 8007f26:	617b      	str	r3, [r7, #20]
 8007f28:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f2c:	1912      	adds	r2, r2, r4
 8007f2e:	eb45 0303 	adc.w	r3, r5, r3
 8007f32:	f04f 0000 	mov.w	r0, #0
 8007f36:	f04f 0100 	mov.w	r1, #0
 8007f3a:	00d9      	lsls	r1, r3, #3
 8007f3c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f40:	00d0      	lsls	r0, r2, #3
 8007f42:	4602      	mov	r2, r0
 8007f44:	460b      	mov	r3, r1
 8007f46:	eb12 0804 	adds.w	r8, r2, r4
 8007f4a:	eb43 0905 	adc.w	r9, r3, r5
 8007f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f50:	685b      	ldr	r3, [r3, #4]
 8007f52:	4618      	mov	r0, r3
 8007f54:	f04f 0100 	mov.w	r1, #0
 8007f58:	f04f 0200 	mov.w	r2, #0
 8007f5c:	f04f 0300 	mov.w	r3, #0
 8007f60:	008b      	lsls	r3, r1, #2
 8007f62:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f66:	0082      	lsls	r2, r0, #2
 8007f68:	4640      	mov	r0, r8
 8007f6a:	4649      	mov	r1, r9
 8007f6c:	f7f8 fe64 	bl	8000c38 <__aeabi_uldivmod>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4b49      	ldr	r3, [pc, #292]	; (800809c <UART_SetConfig+0x38c>)
 8007f76:	fba3 2302 	umull	r2, r3, r3, r2
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	011e      	lsls	r6, r3, #4
 8007f7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f80:	4618      	mov	r0, r3
 8007f82:	f04f 0100 	mov.w	r1, #0
 8007f86:	4602      	mov	r2, r0
 8007f88:	460b      	mov	r3, r1
 8007f8a:	1894      	adds	r4, r2, r2
 8007f8c:	60bc      	str	r4, [r7, #8]
 8007f8e:	415b      	adcs	r3, r3
 8007f90:	60fb      	str	r3, [r7, #12]
 8007f92:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f96:	1812      	adds	r2, r2, r0
 8007f98:	eb41 0303 	adc.w	r3, r1, r3
 8007f9c:	f04f 0400 	mov.w	r4, #0
 8007fa0:	f04f 0500 	mov.w	r5, #0
 8007fa4:	00dd      	lsls	r5, r3, #3
 8007fa6:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007faa:	00d4      	lsls	r4, r2, #3
 8007fac:	4622      	mov	r2, r4
 8007fae:	462b      	mov	r3, r5
 8007fb0:	1814      	adds	r4, r2, r0
 8007fb2:	64bc      	str	r4, [r7, #72]	; 0x48
 8007fb4:	414b      	adcs	r3, r1
 8007fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007fba:	685b      	ldr	r3, [r3, #4]
 8007fbc:	4618      	mov	r0, r3
 8007fbe:	f04f 0100 	mov.w	r1, #0
 8007fc2:	f04f 0200 	mov.w	r2, #0
 8007fc6:	f04f 0300 	mov.w	r3, #0
 8007fca:	008b      	lsls	r3, r1, #2
 8007fcc:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007fd0:	0082      	lsls	r2, r0, #2
 8007fd2:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007fd6:	f7f8 fe2f 	bl	8000c38 <__aeabi_uldivmod>
 8007fda:	4602      	mov	r2, r0
 8007fdc:	460b      	mov	r3, r1
 8007fde:	4b2f      	ldr	r3, [pc, #188]	; (800809c <UART_SetConfig+0x38c>)
 8007fe0:	fba3 1302 	umull	r1, r3, r3, r2
 8007fe4:	095b      	lsrs	r3, r3, #5
 8007fe6:	2164      	movs	r1, #100	; 0x64
 8007fe8:	fb01 f303 	mul.w	r3, r1, r3
 8007fec:	1ad3      	subs	r3, r2, r3
 8007fee:	011b      	lsls	r3, r3, #4
 8007ff0:	3332      	adds	r3, #50	; 0x32
 8007ff2:	4a2a      	ldr	r2, [pc, #168]	; (800809c <UART_SetConfig+0x38c>)
 8007ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8007ff8:	095b      	lsrs	r3, r3, #5
 8007ffa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007ffe:	441e      	add	r6, r3
 8008000:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008002:	4618      	mov	r0, r3
 8008004:	f04f 0100 	mov.w	r1, #0
 8008008:	4602      	mov	r2, r0
 800800a:	460b      	mov	r3, r1
 800800c:	1894      	adds	r4, r2, r2
 800800e:	603c      	str	r4, [r7, #0]
 8008010:	415b      	adcs	r3, r3
 8008012:	607b      	str	r3, [r7, #4]
 8008014:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008018:	1812      	adds	r2, r2, r0
 800801a:	eb41 0303 	adc.w	r3, r1, r3
 800801e:	f04f 0400 	mov.w	r4, #0
 8008022:	f04f 0500 	mov.w	r5, #0
 8008026:	00dd      	lsls	r5, r3, #3
 8008028:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800802c:	00d4      	lsls	r4, r2, #3
 800802e:	4622      	mov	r2, r4
 8008030:	462b      	mov	r3, r5
 8008032:	eb12 0a00 	adds.w	sl, r2, r0
 8008036:	eb43 0b01 	adc.w	fp, r3, r1
 800803a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800803c:	685b      	ldr	r3, [r3, #4]
 800803e:	4618      	mov	r0, r3
 8008040:	f04f 0100 	mov.w	r1, #0
 8008044:	f04f 0200 	mov.w	r2, #0
 8008048:	f04f 0300 	mov.w	r3, #0
 800804c:	008b      	lsls	r3, r1, #2
 800804e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008052:	0082      	lsls	r2, r0, #2
 8008054:	4650      	mov	r0, sl
 8008056:	4659      	mov	r1, fp
 8008058:	f7f8 fdee 	bl	8000c38 <__aeabi_uldivmod>
 800805c:	4602      	mov	r2, r0
 800805e:	460b      	mov	r3, r1
 8008060:	4b0e      	ldr	r3, [pc, #56]	; (800809c <UART_SetConfig+0x38c>)
 8008062:	fba3 1302 	umull	r1, r3, r3, r2
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	2164      	movs	r1, #100	; 0x64
 800806a:	fb01 f303 	mul.w	r3, r1, r3
 800806e:	1ad3      	subs	r3, r2, r3
 8008070:	011b      	lsls	r3, r3, #4
 8008072:	3332      	adds	r3, #50	; 0x32
 8008074:	4a09      	ldr	r2, [pc, #36]	; (800809c <UART_SetConfig+0x38c>)
 8008076:	fba2 2303 	umull	r2, r3, r2, r3
 800807a:	095b      	lsrs	r3, r3, #5
 800807c:	f003 020f 	and.w	r2, r3, #15
 8008080:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	4432      	add	r2, r6
 8008086:	609a      	str	r2, [r3, #8]
}
 8008088:	bf00      	nop
 800808a:	377c      	adds	r7, #124	; 0x7c
 800808c:	46bd      	mov	sp, r7
 800808e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008092:	bf00      	nop
 8008094:	40011000 	.word	0x40011000
 8008098:	40011400 	.word	0x40011400
 800809c:	51eb851f 	.word	0x51eb851f

080080a0 <__errno>:
 80080a0:	4b01      	ldr	r3, [pc, #4]	; (80080a8 <__errno+0x8>)
 80080a2:	6818      	ldr	r0, [r3, #0]
 80080a4:	4770      	bx	lr
 80080a6:	bf00      	nop
 80080a8:	200001f8 	.word	0x200001f8

080080ac <__libc_init_array>:
 80080ac:	b570      	push	{r4, r5, r6, lr}
 80080ae:	4d0d      	ldr	r5, [pc, #52]	; (80080e4 <__libc_init_array+0x38>)
 80080b0:	4c0d      	ldr	r4, [pc, #52]	; (80080e8 <__libc_init_array+0x3c>)
 80080b2:	1b64      	subs	r4, r4, r5
 80080b4:	10a4      	asrs	r4, r4, #2
 80080b6:	2600      	movs	r6, #0
 80080b8:	42a6      	cmp	r6, r4
 80080ba:	d109      	bne.n	80080d0 <__libc_init_array+0x24>
 80080bc:	4d0b      	ldr	r5, [pc, #44]	; (80080ec <__libc_init_array+0x40>)
 80080be:	4c0c      	ldr	r4, [pc, #48]	; (80080f0 <__libc_init_array+0x44>)
 80080c0:	f003 ffa4 	bl	800c00c <_init>
 80080c4:	1b64      	subs	r4, r4, r5
 80080c6:	10a4      	asrs	r4, r4, #2
 80080c8:	2600      	movs	r6, #0
 80080ca:	42a6      	cmp	r6, r4
 80080cc:	d105      	bne.n	80080da <__libc_init_array+0x2e>
 80080ce:	bd70      	pop	{r4, r5, r6, pc}
 80080d0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080d4:	4798      	blx	r3
 80080d6:	3601      	adds	r6, #1
 80080d8:	e7ee      	b.n	80080b8 <__libc_init_array+0xc>
 80080da:	f855 3b04 	ldr.w	r3, [r5], #4
 80080de:	4798      	blx	r3
 80080e0:	3601      	adds	r6, #1
 80080e2:	e7f2      	b.n	80080ca <__libc_init_array+0x1e>
 80080e4:	0800cf40 	.word	0x0800cf40
 80080e8:	0800cf40 	.word	0x0800cf40
 80080ec:	0800cf40 	.word	0x0800cf40
 80080f0:	0800cf44 	.word	0x0800cf44

080080f4 <memset>:
 80080f4:	4402      	add	r2, r0
 80080f6:	4603      	mov	r3, r0
 80080f8:	4293      	cmp	r3, r2
 80080fa:	d100      	bne.n	80080fe <memset+0xa>
 80080fc:	4770      	bx	lr
 80080fe:	f803 1b01 	strb.w	r1, [r3], #1
 8008102:	e7f9      	b.n	80080f8 <memset+0x4>

08008104 <_scanf_float>:
 8008104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008108:	b087      	sub	sp, #28
 800810a:	4617      	mov	r7, r2
 800810c:	9303      	str	r3, [sp, #12]
 800810e:	688b      	ldr	r3, [r1, #8]
 8008110:	1e5a      	subs	r2, r3, #1
 8008112:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008116:	bf83      	ittte	hi
 8008118:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800811c:	195b      	addhi	r3, r3, r5
 800811e:	9302      	strhi	r3, [sp, #8]
 8008120:	2300      	movls	r3, #0
 8008122:	bf86      	itte	hi
 8008124:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008128:	608b      	strhi	r3, [r1, #8]
 800812a:	9302      	strls	r3, [sp, #8]
 800812c:	680b      	ldr	r3, [r1, #0]
 800812e:	468b      	mov	fp, r1
 8008130:	2500      	movs	r5, #0
 8008132:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008136:	f84b 3b1c 	str.w	r3, [fp], #28
 800813a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800813e:	4680      	mov	r8, r0
 8008140:	460c      	mov	r4, r1
 8008142:	465e      	mov	r6, fp
 8008144:	46aa      	mov	sl, r5
 8008146:	46a9      	mov	r9, r5
 8008148:	9501      	str	r5, [sp, #4]
 800814a:	68a2      	ldr	r2, [r4, #8]
 800814c:	b152      	cbz	r2, 8008164 <_scanf_float+0x60>
 800814e:	683b      	ldr	r3, [r7, #0]
 8008150:	781b      	ldrb	r3, [r3, #0]
 8008152:	2b4e      	cmp	r3, #78	; 0x4e
 8008154:	d864      	bhi.n	8008220 <_scanf_float+0x11c>
 8008156:	2b40      	cmp	r3, #64	; 0x40
 8008158:	d83c      	bhi.n	80081d4 <_scanf_float+0xd0>
 800815a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800815e:	b2c8      	uxtb	r0, r1
 8008160:	280e      	cmp	r0, #14
 8008162:	d93a      	bls.n	80081da <_scanf_float+0xd6>
 8008164:	f1b9 0f00 	cmp.w	r9, #0
 8008168:	d003      	beq.n	8008172 <_scanf_float+0x6e>
 800816a:	6823      	ldr	r3, [r4, #0]
 800816c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008170:	6023      	str	r3, [r4, #0]
 8008172:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008176:	f1ba 0f01 	cmp.w	sl, #1
 800817a:	f200 8113 	bhi.w	80083a4 <_scanf_float+0x2a0>
 800817e:	455e      	cmp	r6, fp
 8008180:	f200 8105 	bhi.w	800838e <_scanf_float+0x28a>
 8008184:	2501      	movs	r5, #1
 8008186:	4628      	mov	r0, r5
 8008188:	b007      	add	sp, #28
 800818a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800818e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008192:	2a0d      	cmp	r2, #13
 8008194:	d8e6      	bhi.n	8008164 <_scanf_float+0x60>
 8008196:	a101      	add	r1, pc, #4	; (adr r1, 800819c <_scanf_float+0x98>)
 8008198:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800819c:	080082db 	.word	0x080082db
 80081a0:	08008165 	.word	0x08008165
 80081a4:	08008165 	.word	0x08008165
 80081a8:	08008165 	.word	0x08008165
 80081ac:	0800833b 	.word	0x0800833b
 80081b0:	08008313 	.word	0x08008313
 80081b4:	08008165 	.word	0x08008165
 80081b8:	08008165 	.word	0x08008165
 80081bc:	080082e9 	.word	0x080082e9
 80081c0:	08008165 	.word	0x08008165
 80081c4:	08008165 	.word	0x08008165
 80081c8:	08008165 	.word	0x08008165
 80081cc:	08008165 	.word	0x08008165
 80081d0:	080082a1 	.word	0x080082a1
 80081d4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80081d8:	e7db      	b.n	8008192 <_scanf_float+0x8e>
 80081da:	290e      	cmp	r1, #14
 80081dc:	d8c2      	bhi.n	8008164 <_scanf_float+0x60>
 80081de:	a001      	add	r0, pc, #4	; (adr r0, 80081e4 <_scanf_float+0xe0>)
 80081e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80081e4:	08008293 	.word	0x08008293
 80081e8:	08008165 	.word	0x08008165
 80081ec:	08008293 	.word	0x08008293
 80081f0:	08008327 	.word	0x08008327
 80081f4:	08008165 	.word	0x08008165
 80081f8:	08008241 	.word	0x08008241
 80081fc:	0800827d 	.word	0x0800827d
 8008200:	0800827d 	.word	0x0800827d
 8008204:	0800827d 	.word	0x0800827d
 8008208:	0800827d 	.word	0x0800827d
 800820c:	0800827d 	.word	0x0800827d
 8008210:	0800827d 	.word	0x0800827d
 8008214:	0800827d 	.word	0x0800827d
 8008218:	0800827d 	.word	0x0800827d
 800821c:	0800827d 	.word	0x0800827d
 8008220:	2b6e      	cmp	r3, #110	; 0x6e
 8008222:	d809      	bhi.n	8008238 <_scanf_float+0x134>
 8008224:	2b60      	cmp	r3, #96	; 0x60
 8008226:	d8b2      	bhi.n	800818e <_scanf_float+0x8a>
 8008228:	2b54      	cmp	r3, #84	; 0x54
 800822a:	d077      	beq.n	800831c <_scanf_float+0x218>
 800822c:	2b59      	cmp	r3, #89	; 0x59
 800822e:	d199      	bne.n	8008164 <_scanf_float+0x60>
 8008230:	2d07      	cmp	r5, #7
 8008232:	d197      	bne.n	8008164 <_scanf_float+0x60>
 8008234:	2508      	movs	r5, #8
 8008236:	e029      	b.n	800828c <_scanf_float+0x188>
 8008238:	2b74      	cmp	r3, #116	; 0x74
 800823a:	d06f      	beq.n	800831c <_scanf_float+0x218>
 800823c:	2b79      	cmp	r3, #121	; 0x79
 800823e:	e7f6      	b.n	800822e <_scanf_float+0x12a>
 8008240:	6821      	ldr	r1, [r4, #0]
 8008242:	05c8      	lsls	r0, r1, #23
 8008244:	d51a      	bpl.n	800827c <_scanf_float+0x178>
 8008246:	9b02      	ldr	r3, [sp, #8]
 8008248:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800824c:	6021      	str	r1, [r4, #0]
 800824e:	f109 0901 	add.w	r9, r9, #1
 8008252:	b11b      	cbz	r3, 800825c <_scanf_float+0x158>
 8008254:	3b01      	subs	r3, #1
 8008256:	3201      	adds	r2, #1
 8008258:	9302      	str	r3, [sp, #8]
 800825a:	60a2      	str	r2, [r4, #8]
 800825c:	68a3      	ldr	r3, [r4, #8]
 800825e:	3b01      	subs	r3, #1
 8008260:	60a3      	str	r3, [r4, #8]
 8008262:	6923      	ldr	r3, [r4, #16]
 8008264:	3301      	adds	r3, #1
 8008266:	6123      	str	r3, [r4, #16]
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	3b01      	subs	r3, #1
 800826c:	2b00      	cmp	r3, #0
 800826e:	607b      	str	r3, [r7, #4]
 8008270:	f340 8084 	ble.w	800837c <_scanf_float+0x278>
 8008274:	683b      	ldr	r3, [r7, #0]
 8008276:	3301      	adds	r3, #1
 8008278:	603b      	str	r3, [r7, #0]
 800827a:	e766      	b.n	800814a <_scanf_float+0x46>
 800827c:	eb1a 0f05 	cmn.w	sl, r5
 8008280:	f47f af70 	bne.w	8008164 <_scanf_float+0x60>
 8008284:	6822      	ldr	r2, [r4, #0]
 8008286:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800828a:	6022      	str	r2, [r4, #0]
 800828c:	f806 3b01 	strb.w	r3, [r6], #1
 8008290:	e7e4      	b.n	800825c <_scanf_float+0x158>
 8008292:	6822      	ldr	r2, [r4, #0]
 8008294:	0610      	lsls	r0, r2, #24
 8008296:	f57f af65 	bpl.w	8008164 <_scanf_float+0x60>
 800829a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800829e:	e7f4      	b.n	800828a <_scanf_float+0x186>
 80082a0:	f1ba 0f00 	cmp.w	sl, #0
 80082a4:	d10e      	bne.n	80082c4 <_scanf_float+0x1c0>
 80082a6:	f1b9 0f00 	cmp.w	r9, #0
 80082aa:	d10e      	bne.n	80082ca <_scanf_float+0x1c6>
 80082ac:	6822      	ldr	r2, [r4, #0]
 80082ae:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082b2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082b6:	d108      	bne.n	80082ca <_scanf_float+0x1c6>
 80082b8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082bc:	6022      	str	r2, [r4, #0]
 80082be:	f04f 0a01 	mov.w	sl, #1
 80082c2:	e7e3      	b.n	800828c <_scanf_float+0x188>
 80082c4:	f1ba 0f02 	cmp.w	sl, #2
 80082c8:	d055      	beq.n	8008376 <_scanf_float+0x272>
 80082ca:	2d01      	cmp	r5, #1
 80082cc:	d002      	beq.n	80082d4 <_scanf_float+0x1d0>
 80082ce:	2d04      	cmp	r5, #4
 80082d0:	f47f af48 	bne.w	8008164 <_scanf_float+0x60>
 80082d4:	3501      	adds	r5, #1
 80082d6:	b2ed      	uxtb	r5, r5
 80082d8:	e7d8      	b.n	800828c <_scanf_float+0x188>
 80082da:	f1ba 0f01 	cmp.w	sl, #1
 80082de:	f47f af41 	bne.w	8008164 <_scanf_float+0x60>
 80082e2:	f04f 0a02 	mov.w	sl, #2
 80082e6:	e7d1      	b.n	800828c <_scanf_float+0x188>
 80082e8:	b97d      	cbnz	r5, 800830a <_scanf_float+0x206>
 80082ea:	f1b9 0f00 	cmp.w	r9, #0
 80082ee:	f47f af3c 	bne.w	800816a <_scanf_float+0x66>
 80082f2:	6822      	ldr	r2, [r4, #0]
 80082f4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082f8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082fc:	f47f af39 	bne.w	8008172 <_scanf_float+0x6e>
 8008300:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008304:	6022      	str	r2, [r4, #0]
 8008306:	2501      	movs	r5, #1
 8008308:	e7c0      	b.n	800828c <_scanf_float+0x188>
 800830a:	2d03      	cmp	r5, #3
 800830c:	d0e2      	beq.n	80082d4 <_scanf_float+0x1d0>
 800830e:	2d05      	cmp	r5, #5
 8008310:	e7de      	b.n	80082d0 <_scanf_float+0x1cc>
 8008312:	2d02      	cmp	r5, #2
 8008314:	f47f af26 	bne.w	8008164 <_scanf_float+0x60>
 8008318:	2503      	movs	r5, #3
 800831a:	e7b7      	b.n	800828c <_scanf_float+0x188>
 800831c:	2d06      	cmp	r5, #6
 800831e:	f47f af21 	bne.w	8008164 <_scanf_float+0x60>
 8008322:	2507      	movs	r5, #7
 8008324:	e7b2      	b.n	800828c <_scanf_float+0x188>
 8008326:	6822      	ldr	r2, [r4, #0]
 8008328:	0591      	lsls	r1, r2, #22
 800832a:	f57f af1b 	bpl.w	8008164 <_scanf_float+0x60>
 800832e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008332:	6022      	str	r2, [r4, #0]
 8008334:	f8cd 9004 	str.w	r9, [sp, #4]
 8008338:	e7a8      	b.n	800828c <_scanf_float+0x188>
 800833a:	6822      	ldr	r2, [r4, #0]
 800833c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008340:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008344:	d006      	beq.n	8008354 <_scanf_float+0x250>
 8008346:	0550      	lsls	r0, r2, #21
 8008348:	f57f af0c 	bpl.w	8008164 <_scanf_float+0x60>
 800834c:	f1b9 0f00 	cmp.w	r9, #0
 8008350:	f43f af0f 	beq.w	8008172 <_scanf_float+0x6e>
 8008354:	0591      	lsls	r1, r2, #22
 8008356:	bf58      	it	pl
 8008358:	9901      	ldrpl	r1, [sp, #4]
 800835a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800835e:	bf58      	it	pl
 8008360:	eba9 0101 	subpl.w	r1, r9, r1
 8008364:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008368:	bf58      	it	pl
 800836a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800836e:	6022      	str	r2, [r4, #0]
 8008370:	f04f 0900 	mov.w	r9, #0
 8008374:	e78a      	b.n	800828c <_scanf_float+0x188>
 8008376:	f04f 0a03 	mov.w	sl, #3
 800837a:	e787      	b.n	800828c <_scanf_float+0x188>
 800837c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008380:	4639      	mov	r1, r7
 8008382:	4640      	mov	r0, r8
 8008384:	4798      	blx	r3
 8008386:	2800      	cmp	r0, #0
 8008388:	f43f aedf 	beq.w	800814a <_scanf_float+0x46>
 800838c:	e6ea      	b.n	8008164 <_scanf_float+0x60>
 800838e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008392:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008396:	463a      	mov	r2, r7
 8008398:	4640      	mov	r0, r8
 800839a:	4798      	blx	r3
 800839c:	6923      	ldr	r3, [r4, #16]
 800839e:	3b01      	subs	r3, #1
 80083a0:	6123      	str	r3, [r4, #16]
 80083a2:	e6ec      	b.n	800817e <_scanf_float+0x7a>
 80083a4:	1e6b      	subs	r3, r5, #1
 80083a6:	2b06      	cmp	r3, #6
 80083a8:	d825      	bhi.n	80083f6 <_scanf_float+0x2f2>
 80083aa:	2d02      	cmp	r5, #2
 80083ac:	d836      	bhi.n	800841c <_scanf_float+0x318>
 80083ae:	455e      	cmp	r6, fp
 80083b0:	f67f aee8 	bls.w	8008184 <_scanf_float+0x80>
 80083b4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083b8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083bc:	463a      	mov	r2, r7
 80083be:	4640      	mov	r0, r8
 80083c0:	4798      	blx	r3
 80083c2:	6923      	ldr	r3, [r4, #16]
 80083c4:	3b01      	subs	r3, #1
 80083c6:	6123      	str	r3, [r4, #16]
 80083c8:	e7f1      	b.n	80083ae <_scanf_float+0x2aa>
 80083ca:	9802      	ldr	r0, [sp, #8]
 80083cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083d0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80083d4:	9002      	str	r0, [sp, #8]
 80083d6:	463a      	mov	r2, r7
 80083d8:	4640      	mov	r0, r8
 80083da:	4798      	blx	r3
 80083dc:	6923      	ldr	r3, [r4, #16]
 80083de:	3b01      	subs	r3, #1
 80083e0:	6123      	str	r3, [r4, #16]
 80083e2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80083e6:	fa5f fa8a 	uxtb.w	sl, sl
 80083ea:	f1ba 0f02 	cmp.w	sl, #2
 80083ee:	d1ec      	bne.n	80083ca <_scanf_float+0x2c6>
 80083f0:	3d03      	subs	r5, #3
 80083f2:	b2ed      	uxtb	r5, r5
 80083f4:	1b76      	subs	r6, r6, r5
 80083f6:	6823      	ldr	r3, [r4, #0]
 80083f8:	05da      	lsls	r2, r3, #23
 80083fa:	d52f      	bpl.n	800845c <_scanf_float+0x358>
 80083fc:	055b      	lsls	r3, r3, #21
 80083fe:	d510      	bpl.n	8008422 <_scanf_float+0x31e>
 8008400:	455e      	cmp	r6, fp
 8008402:	f67f aebf 	bls.w	8008184 <_scanf_float+0x80>
 8008406:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800840a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800840e:	463a      	mov	r2, r7
 8008410:	4640      	mov	r0, r8
 8008412:	4798      	blx	r3
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	3b01      	subs	r3, #1
 8008418:	6123      	str	r3, [r4, #16]
 800841a:	e7f1      	b.n	8008400 <_scanf_float+0x2fc>
 800841c:	46aa      	mov	sl, r5
 800841e:	9602      	str	r6, [sp, #8]
 8008420:	e7df      	b.n	80083e2 <_scanf_float+0x2de>
 8008422:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008426:	6923      	ldr	r3, [r4, #16]
 8008428:	2965      	cmp	r1, #101	; 0x65
 800842a:	f103 33ff 	add.w	r3, r3, #4294967295
 800842e:	f106 35ff 	add.w	r5, r6, #4294967295
 8008432:	6123      	str	r3, [r4, #16]
 8008434:	d00c      	beq.n	8008450 <_scanf_float+0x34c>
 8008436:	2945      	cmp	r1, #69	; 0x45
 8008438:	d00a      	beq.n	8008450 <_scanf_float+0x34c>
 800843a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800843e:	463a      	mov	r2, r7
 8008440:	4640      	mov	r0, r8
 8008442:	4798      	blx	r3
 8008444:	6923      	ldr	r3, [r4, #16]
 8008446:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800844a:	3b01      	subs	r3, #1
 800844c:	1eb5      	subs	r5, r6, #2
 800844e:	6123      	str	r3, [r4, #16]
 8008450:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008454:	463a      	mov	r2, r7
 8008456:	4640      	mov	r0, r8
 8008458:	4798      	blx	r3
 800845a:	462e      	mov	r6, r5
 800845c:	6825      	ldr	r5, [r4, #0]
 800845e:	f015 0510 	ands.w	r5, r5, #16
 8008462:	d158      	bne.n	8008516 <_scanf_float+0x412>
 8008464:	7035      	strb	r5, [r6, #0]
 8008466:	6823      	ldr	r3, [r4, #0]
 8008468:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800846c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008470:	d11c      	bne.n	80084ac <_scanf_float+0x3a8>
 8008472:	9b01      	ldr	r3, [sp, #4]
 8008474:	454b      	cmp	r3, r9
 8008476:	eba3 0209 	sub.w	r2, r3, r9
 800847a:	d124      	bne.n	80084c6 <_scanf_float+0x3c2>
 800847c:	2200      	movs	r2, #0
 800847e:	4659      	mov	r1, fp
 8008480:	4640      	mov	r0, r8
 8008482:	f000 ff83 	bl	800938c <_strtod_r>
 8008486:	9b03      	ldr	r3, [sp, #12]
 8008488:	6821      	ldr	r1, [r4, #0]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	f011 0f02 	tst.w	r1, #2
 8008490:	ec57 6b10 	vmov	r6, r7, d0
 8008494:	f103 0204 	add.w	r2, r3, #4
 8008498:	d020      	beq.n	80084dc <_scanf_float+0x3d8>
 800849a:	9903      	ldr	r1, [sp, #12]
 800849c:	600a      	str	r2, [r1, #0]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	e9c3 6700 	strd	r6, r7, [r3]
 80084a4:	68e3      	ldr	r3, [r4, #12]
 80084a6:	3301      	adds	r3, #1
 80084a8:	60e3      	str	r3, [r4, #12]
 80084aa:	e66c      	b.n	8008186 <_scanf_float+0x82>
 80084ac:	9b04      	ldr	r3, [sp, #16]
 80084ae:	2b00      	cmp	r3, #0
 80084b0:	d0e4      	beq.n	800847c <_scanf_float+0x378>
 80084b2:	9905      	ldr	r1, [sp, #20]
 80084b4:	230a      	movs	r3, #10
 80084b6:	462a      	mov	r2, r5
 80084b8:	3101      	adds	r1, #1
 80084ba:	4640      	mov	r0, r8
 80084bc:	f000 fff0 	bl	80094a0 <_strtol_r>
 80084c0:	9b04      	ldr	r3, [sp, #16]
 80084c2:	9e05      	ldr	r6, [sp, #20]
 80084c4:	1ac2      	subs	r2, r0, r3
 80084c6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80084ca:	429e      	cmp	r6, r3
 80084cc:	bf28      	it	cs
 80084ce:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80084d2:	4912      	ldr	r1, [pc, #72]	; (800851c <_scanf_float+0x418>)
 80084d4:	4630      	mov	r0, r6
 80084d6:	f000 f8a1 	bl	800861c <siprintf>
 80084da:	e7cf      	b.n	800847c <_scanf_float+0x378>
 80084dc:	f011 0f04 	tst.w	r1, #4
 80084e0:	9903      	ldr	r1, [sp, #12]
 80084e2:	600a      	str	r2, [r1, #0]
 80084e4:	d1db      	bne.n	800849e <_scanf_float+0x39a>
 80084e6:	f8d3 8000 	ldr.w	r8, [r3]
 80084ea:	ee10 2a10 	vmov	r2, s0
 80084ee:	ee10 0a10 	vmov	r0, s0
 80084f2:	463b      	mov	r3, r7
 80084f4:	4639      	mov	r1, r7
 80084f6:	f7f8 fb19 	bl	8000b2c <__aeabi_dcmpun>
 80084fa:	b128      	cbz	r0, 8008508 <_scanf_float+0x404>
 80084fc:	4808      	ldr	r0, [pc, #32]	; (8008520 <_scanf_float+0x41c>)
 80084fe:	f000 f887 	bl	8008610 <nanf>
 8008502:	ed88 0a00 	vstr	s0, [r8]
 8008506:	e7cd      	b.n	80084a4 <_scanf_float+0x3a0>
 8008508:	4630      	mov	r0, r6
 800850a:	4639      	mov	r1, r7
 800850c:	f7f8 fb44 	bl	8000b98 <__aeabi_d2f>
 8008510:	f8c8 0000 	str.w	r0, [r8]
 8008514:	e7c6      	b.n	80084a4 <_scanf_float+0x3a0>
 8008516:	2500      	movs	r5, #0
 8008518:	e635      	b.n	8008186 <_scanf_float+0x82>
 800851a:	bf00      	nop
 800851c:	0800cadc 	.word	0x0800cadc
 8008520:	0800cf35 	.word	0x0800cf35

08008524 <_puts_r>:
 8008524:	b570      	push	{r4, r5, r6, lr}
 8008526:	460e      	mov	r6, r1
 8008528:	4605      	mov	r5, r0
 800852a:	b118      	cbz	r0, 8008534 <_puts_r+0x10>
 800852c:	6983      	ldr	r3, [r0, #24]
 800852e:	b90b      	cbnz	r3, 8008534 <_puts_r+0x10>
 8008530:	f001 f9b4 	bl	800989c <__sinit>
 8008534:	69ab      	ldr	r3, [r5, #24]
 8008536:	68ac      	ldr	r4, [r5, #8]
 8008538:	b913      	cbnz	r3, 8008540 <_puts_r+0x1c>
 800853a:	4628      	mov	r0, r5
 800853c:	f001 f9ae 	bl	800989c <__sinit>
 8008540:	4b2c      	ldr	r3, [pc, #176]	; (80085f4 <_puts_r+0xd0>)
 8008542:	429c      	cmp	r4, r3
 8008544:	d120      	bne.n	8008588 <_puts_r+0x64>
 8008546:	686c      	ldr	r4, [r5, #4]
 8008548:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800854a:	07db      	lsls	r3, r3, #31
 800854c:	d405      	bmi.n	800855a <_puts_r+0x36>
 800854e:	89a3      	ldrh	r3, [r4, #12]
 8008550:	0598      	lsls	r0, r3, #22
 8008552:	d402      	bmi.n	800855a <_puts_r+0x36>
 8008554:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008556:	f001 fdae 	bl	800a0b6 <__retarget_lock_acquire_recursive>
 800855a:	89a3      	ldrh	r3, [r4, #12]
 800855c:	0719      	lsls	r1, r3, #28
 800855e:	d51d      	bpl.n	800859c <_puts_r+0x78>
 8008560:	6923      	ldr	r3, [r4, #16]
 8008562:	b1db      	cbz	r3, 800859c <_puts_r+0x78>
 8008564:	3e01      	subs	r6, #1
 8008566:	68a3      	ldr	r3, [r4, #8]
 8008568:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800856c:	3b01      	subs	r3, #1
 800856e:	60a3      	str	r3, [r4, #8]
 8008570:	bb39      	cbnz	r1, 80085c2 <_puts_r+0x9e>
 8008572:	2b00      	cmp	r3, #0
 8008574:	da38      	bge.n	80085e8 <_puts_r+0xc4>
 8008576:	4622      	mov	r2, r4
 8008578:	210a      	movs	r1, #10
 800857a:	4628      	mov	r0, r5
 800857c:	f000 ff92 	bl	80094a4 <__swbuf_r>
 8008580:	3001      	adds	r0, #1
 8008582:	d011      	beq.n	80085a8 <_puts_r+0x84>
 8008584:	250a      	movs	r5, #10
 8008586:	e011      	b.n	80085ac <_puts_r+0x88>
 8008588:	4b1b      	ldr	r3, [pc, #108]	; (80085f8 <_puts_r+0xd4>)
 800858a:	429c      	cmp	r4, r3
 800858c:	d101      	bne.n	8008592 <_puts_r+0x6e>
 800858e:	68ac      	ldr	r4, [r5, #8]
 8008590:	e7da      	b.n	8008548 <_puts_r+0x24>
 8008592:	4b1a      	ldr	r3, [pc, #104]	; (80085fc <_puts_r+0xd8>)
 8008594:	429c      	cmp	r4, r3
 8008596:	bf08      	it	eq
 8008598:	68ec      	ldreq	r4, [r5, #12]
 800859a:	e7d5      	b.n	8008548 <_puts_r+0x24>
 800859c:	4621      	mov	r1, r4
 800859e:	4628      	mov	r0, r5
 80085a0:	f000 ffe4 	bl	800956c <__swsetup_r>
 80085a4:	2800      	cmp	r0, #0
 80085a6:	d0dd      	beq.n	8008564 <_puts_r+0x40>
 80085a8:	f04f 35ff 	mov.w	r5, #4294967295
 80085ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085ae:	07da      	lsls	r2, r3, #31
 80085b0:	d405      	bmi.n	80085be <_puts_r+0x9a>
 80085b2:	89a3      	ldrh	r3, [r4, #12]
 80085b4:	059b      	lsls	r3, r3, #22
 80085b6:	d402      	bmi.n	80085be <_puts_r+0x9a>
 80085b8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085ba:	f001 fd7d 	bl	800a0b8 <__retarget_lock_release_recursive>
 80085be:	4628      	mov	r0, r5
 80085c0:	bd70      	pop	{r4, r5, r6, pc}
 80085c2:	2b00      	cmp	r3, #0
 80085c4:	da04      	bge.n	80085d0 <_puts_r+0xac>
 80085c6:	69a2      	ldr	r2, [r4, #24]
 80085c8:	429a      	cmp	r2, r3
 80085ca:	dc06      	bgt.n	80085da <_puts_r+0xb6>
 80085cc:	290a      	cmp	r1, #10
 80085ce:	d004      	beq.n	80085da <_puts_r+0xb6>
 80085d0:	6823      	ldr	r3, [r4, #0]
 80085d2:	1c5a      	adds	r2, r3, #1
 80085d4:	6022      	str	r2, [r4, #0]
 80085d6:	7019      	strb	r1, [r3, #0]
 80085d8:	e7c5      	b.n	8008566 <_puts_r+0x42>
 80085da:	4622      	mov	r2, r4
 80085dc:	4628      	mov	r0, r5
 80085de:	f000 ff61 	bl	80094a4 <__swbuf_r>
 80085e2:	3001      	adds	r0, #1
 80085e4:	d1bf      	bne.n	8008566 <_puts_r+0x42>
 80085e6:	e7df      	b.n	80085a8 <_puts_r+0x84>
 80085e8:	6823      	ldr	r3, [r4, #0]
 80085ea:	250a      	movs	r5, #10
 80085ec:	1c5a      	adds	r2, r3, #1
 80085ee:	6022      	str	r2, [r4, #0]
 80085f0:	701d      	strb	r5, [r3, #0]
 80085f2:	e7db      	b.n	80085ac <_puts_r+0x88>
 80085f4:	0800cc64 	.word	0x0800cc64
 80085f8:	0800cc84 	.word	0x0800cc84
 80085fc:	0800cc44 	.word	0x0800cc44

08008600 <puts>:
 8008600:	4b02      	ldr	r3, [pc, #8]	; (800860c <puts+0xc>)
 8008602:	4601      	mov	r1, r0
 8008604:	6818      	ldr	r0, [r3, #0]
 8008606:	f7ff bf8d 	b.w	8008524 <_puts_r>
 800860a:	bf00      	nop
 800860c:	200001f8 	.word	0x200001f8

08008610 <nanf>:
 8008610:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008618 <nanf+0x8>
 8008614:	4770      	bx	lr
 8008616:	bf00      	nop
 8008618:	7fc00000 	.word	0x7fc00000

0800861c <siprintf>:
 800861c:	b40e      	push	{r1, r2, r3}
 800861e:	b500      	push	{lr}
 8008620:	b09c      	sub	sp, #112	; 0x70
 8008622:	ab1d      	add	r3, sp, #116	; 0x74
 8008624:	9002      	str	r0, [sp, #8]
 8008626:	9006      	str	r0, [sp, #24]
 8008628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800862c:	4809      	ldr	r0, [pc, #36]	; (8008654 <siprintf+0x38>)
 800862e:	9107      	str	r1, [sp, #28]
 8008630:	9104      	str	r1, [sp, #16]
 8008632:	4909      	ldr	r1, [pc, #36]	; (8008658 <siprintf+0x3c>)
 8008634:	f853 2b04 	ldr.w	r2, [r3], #4
 8008638:	9105      	str	r1, [sp, #20]
 800863a:	6800      	ldr	r0, [r0, #0]
 800863c:	9301      	str	r3, [sp, #4]
 800863e:	a902      	add	r1, sp, #8
 8008640:	f002 fba2 	bl	800ad88 <_svfiprintf_r>
 8008644:	9b02      	ldr	r3, [sp, #8]
 8008646:	2200      	movs	r2, #0
 8008648:	701a      	strb	r2, [r3, #0]
 800864a:	b01c      	add	sp, #112	; 0x70
 800864c:	f85d eb04 	ldr.w	lr, [sp], #4
 8008650:	b003      	add	sp, #12
 8008652:	4770      	bx	lr
 8008654:	200001f8 	.word	0x200001f8
 8008658:	ffff0208 	.word	0xffff0208

0800865c <siscanf>:
 800865c:	b40e      	push	{r1, r2, r3}
 800865e:	b510      	push	{r4, lr}
 8008660:	b09f      	sub	sp, #124	; 0x7c
 8008662:	ac21      	add	r4, sp, #132	; 0x84
 8008664:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008668:	f854 2b04 	ldr.w	r2, [r4], #4
 800866c:	9201      	str	r2, [sp, #4]
 800866e:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008672:	9004      	str	r0, [sp, #16]
 8008674:	9008      	str	r0, [sp, #32]
 8008676:	f7f7 fdab 	bl	80001d0 <strlen>
 800867a:	4b0c      	ldr	r3, [pc, #48]	; (80086ac <siscanf+0x50>)
 800867c:	9005      	str	r0, [sp, #20]
 800867e:	9009      	str	r0, [sp, #36]	; 0x24
 8008680:	930d      	str	r3, [sp, #52]	; 0x34
 8008682:	480b      	ldr	r0, [pc, #44]	; (80086b0 <siscanf+0x54>)
 8008684:	9a01      	ldr	r2, [sp, #4]
 8008686:	6800      	ldr	r0, [r0, #0]
 8008688:	9403      	str	r4, [sp, #12]
 800868a:	2300      	movs	r3, #0
 800868c:	9311      	str	r3, [sp, #68]	; 0x44
 800868e:	9316      	str	r3, [sp, #88]	; 0x58
 8008690:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008694:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008698:	a904      	add	r1, sp, #16
 800869a:	4623      	mov	r3, r4
 800869c:	f002 fcce 	bl	800b03c <__ssvfiscanf_r>
 80086a0:	b01f      	add	sp, #124	; 0x7c
 80086a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086a6:	b003      	add	sp, #12
 80086a8:	4770      	bx	lr
 80086aa:	bf00      	nop
 80086ac:	080086d7 	.word	0x080086d7
 80086b0:	200001f8 	.word	0x200001f8

080086b4 <__sread>:
 80086b4:	b510      	push	{r4, lr}
 80086b6:	460c      	mov	r4, r1
 80086b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086bc:	f003 f916 	bl	800b8ec <_read_r>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	bfab      	itete	ge
 80086c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086c6:	89a3      	ldrhlt	r3, [r4, #12]
 80086c8:	181b      	addge	r3, r3, r0
 80086ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80086ce:	bfac      	ite	ge
 80086d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80086d2:	81a3      	strhlt	r3, [r4, #12]
 80086d4:	bd10      	pop	{r4, pc}

080086d6 <__seofread>:
 80086d6:	2000      	movs	r0, #0
 80086d8:	4770      	bx	lr

080086da <__swrite>:
 80086da:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086de:	461f      	mov	r7, r3
 80086e0:	898b      	ldrh	r3, [r1, #12]
 80086e2:	05db      	lsls	r3, r3, #23
 80086e4:	4605      	mov	r5, r0
 80086e6:	460c      	mov	r4, r1
 80086e8:	4616      	mov	r6, r2
 80086ea:	d505      	bpl.n	80086f8 <__swrite+0x1e>
 80086ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f0:	2302      	movs	r3, #2
 80086f2:	2200      	movs	r2, #0
 80086f4:	f001 fce2 	bl	800a0bc <_lseek_r>
 80086f8:	89a3      	ldrh	r3, [r4, #12]
 80086fa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80086fe:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008702:	81a3      	strh	r3, [r4, #12]
 8008704:	4632      	mov	r2, r6
 8008706:	463b      	mov	r3, r7
 8008708:	4628      	mov	r0, r5
 800870a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800870e:	f000 bf1b 	b.w	8009548 <_write_r>

08008712 <__sseek>:
 8008712:	b510      	push	{r4, lr}
 8008714:	460c      	mov	r4, r1
 8008716:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800871a:	f001 fccf 	bl	800a0bc <_lseek_r>
 800871e:	1c43      	adds	r3, r0, #1
 8008720:	89a3      	ldrh	r3, [r4, #12]
 8008722:	bf15      	itete	ne
 8008724:	6560      	strne	r0, [r4, #84]	; 0x54
 8008726:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800872a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800872e:	81a3      	strheq	r3, [r4, #12]
 8008730:	bf18      	it	ne
 8008732:	81a3      	strhne	r3, [r4, #12]
 8008734:	bd10      	pop	{r4, pc}

08008736 <__sclose>:
 8008736:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800873a:	f000 bf85 	b.w	8009648 <_close_r>

0800873e <sulp>:
 800873e:	b570      	push	{r4, r5, r6, lr}
 8008740:	4604      	mov	r4, r0
 8008742:	460d      	mov	r5, r1
 8008744:	ec45 4b10 	vmov	d0, r4, r5
 8008748:	4616      	mov	r6, r2
 800874a:	f002 f8b9 	bl	800a8c0 <__ulp>
 800874e:	ec51 0b10 	vmov	r0, r1, d0
 8008752:	b17e      	cbz	r6, 8008774 <sulp+0x36>
 8008754:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008758:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800875c:	2b00      	cmp	r3, #0
 800875e:	dd09      	ble.n	8008774 <sulp+0x36>
 8008760:	051b      	lsls	r3, r3, #20
 8008762:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008766:	2400      	movs	r4, #0
 8008768:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800876c:	4622      	mov	r2, r4
 800876e:	462b      	mov	r3, r5
 8008770:	f7f7 ff42 	bl	80005f8 <__aeabi_dmul>
 8008774:	bd70      	pop	{r4, r5, r6, pc}
	...

08008778 <_strtod_l>:
 8008778:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800877c:	b0a3      	sub	sp, #140	; 0x8c
 800877e:	461f      	mov	r7, r3
 8008780:	2300      	movs	r3, #0
 8008782:	931e      	str	r3, [sp, #120]	; 0x78
 8008784:	4ba4      	ldr	r3, [pc, #656]	; (8008a18 <_strtod_l+0x2a0>)
 8008786:	9219      	str	r2, [sp, #100]	; 0x64
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	9307      	str	r3, [sp, #28]
 800878c:	4604      	mov	r4, r0
 800878e:	4618      	mov	r0, r3
 8008790:	4688      	mov	r8, r1
 8008792:	f7f7 fd1d 	bl	80001d0 <strlen>
 8008796:	f04f 0a00 	mov.w	sl, #0
 800879a:	4605      	mov	r5, r0
 800879c:	f04f 0b00 	mov.w	fp, #0
 80087a0:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80087a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087a6:	781a      	ldrb	r2, [r3, #0]
 80087a8:	2a2b      	cmp	r2, #43	; 0x2b
 80087aa:	d04c      	beq.n	8008846 <_strtod_l+0xce>
 80087ac:	d839      	bhi.n	8008822 <_strtod_l+0xaa>
 80087ae:	2a0d      	cmp	r2, #13
 80087b0:	d832      	bhi.n	8008818 <_strtod_l+0xa0>
 80087b2:	2a08      	cmp	r2, #8
 80087b4:	d832      	bhi.n	800881c <_strtod_l+0xa4>
 80087b6:	2a00      	cmp	r2, #0
 80087b8:	d03c      	beq.n	8008834 <_strtod_l+0xbc>
 80087ba:	2300      	movs	r3, #0
 80087bc:	930e      	str	r3, [sp, #56]	; 0x38
 80087be:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80087c0:	7833      	ldrb	r3, [r6, #0]
 80087c2:	2b30      	cmp	r3, #48	; 0x30
 80087c4:	f040 80b4 	bne.w	8008930 <_strtod_l+0x1b8>
 80087c8:	7873      	ldrb	r3, [r6, #1]
 80087ca:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 80087ce:	2b58      	cmp	r3, #88	; 0x58
 80087d0:	d16c      	bne.n	80088ac <_strtod_l+0x134>
 80087d2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80087d4:	9301      	str	r3, [sp, #4]
 80087d6:	ab1e      	add	r3, sp, #120	; 0x78
 80087d8:	9702      	str	r7, [sp, #8]
 80087da:	9300      	str	r3, [sp, #0]
 80087dc:	4a8f      	ldr	r2, [pc, #572]	; (8008a1c <_strtod_l+0x2a4>)
 80087de:	ab1f      	add	r3, sp, #124	; 0x7c
 80087e0:	a91d      	add	r1, sp, #116	; 0x74
 80087e2:	4620      	mov	r0, r4
 80087e4:	f001 f95e 	bl	8009aa4 <__gethex>
 80087e8:	f010 0707 	ands.w	r7, r0, #7
 80087ec:	4605      	mov	r5, r0
 80087ee:	d005      	beq.n	80087fc <_strtod_l+0x84>
 80087f0:	2f06      	cmp	r7, #6
 80087f2:	d12a      	bne.n	800884a <_strtod_l+0xd2>
 80087f4:	3601      	adds	r6, #1
 80087f6:	2300      	movs	r3, #0
 80087f8:	961d      	str	r6, [sp, #116]	; 0x74
 80087fa:	930e      	str	r3, [sp, #56]	; 0x38
 80087fc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80087fe:	2b00      	cmp	r3, #0
 8008800:	f040 8596 	bne.w	8009330 <_strtod_l+0xbb8>
 8008804:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008806:	b1db      	cbz	r3, 8008840 <_strtod_l+0xc8>
 8008808:	4652      	mov	r2, sl
 800880a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800880e:	ec43 2b10 	vmov	d0, r2, r3
 8008812:	b023      	add	sp, #140	; 0x8c
 8008814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008818:	2a20      	cmp	r2, #32
 800881a:	d1ce      	bne.n	80087ba <_strtod_l+0x42>
 800881c:	3301      	adds	r3, #1
 800881e:	931d      	str	r3, [sp, #116]	; 0x74
 8008820:	e7c0      	b.n	80087a4 <_strtod_l+0x2c>
 8008822:	2a2d      	cmp	r2, #45	; 0x2d
 8008824:	d1c9      	bne.n	80087ba <_strtod_l+0x42>
 8008826:	2201      	movs	r2, #1
 8008828:	920e      	str	r2, [sp, #56]	; 0x38
 800882a:	1c5a      	adds	r2, r3, #1
 800882c:	921d      	str	r2, [sp, #116]	; 0x74
 800882e:	785b      	ldrb	r3, [r3, #1]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d1c4      	bne.n	80087be <_strtod_l+0x46>
 8008834:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008836:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800883a:	2b00      	cmp	r3, #0
 800883c:	f040 8576 	bne.w	800932c <_strtod_l+0xbb4>
 8008840:	4652      	mov	r2, sl
 8008842:	465b      	mov	r3, fp
 8008844:	e7e3      	b.n	800880e <_strtod_l+0x96>
 8008846:	2200      	movs	r2, #0
 8008848:	e7ee      	b.n	8008828 <_strtod_l+0xb0>
 800884a:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800884c:	b13a      	cbz	r2, 800885e <_strtod_l+0xe6>
 800884e:	2135      	movs	r1, #53	; 0x35
 8008850:	a820      	add	r0, sp, #128	; 0x80
 8008852:	f002 f940 	bl	800aad6 <__copybits>
 8008856:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008858:	4620      	mov	r0, r4
 800885a:	f001 fd05 	bl	800a268 <_Bfree>
 800885e:	3f01      	subs	r7, #1
 8008860:	2f05      	cmp	r7, #5
 8008862:	d807      	bhi.n	8008874 <_strtod_l+0xfc>
 8008864:	e8df f007 	tbb	[pc, r7]
 8008868:	1d180b0e 	.word	0x1d180b0e
 800886c:	030e      	.short	0x030e
 800886e:	f04f 0b00 	mov.w	fp, #0
 8008872:	46da      	mov	sl, fp
 8008874:	0728      	lsls	r0, r5, #28
 8008876:	d5c1      	bpl.n	80087fc <_strtod_l+0x84>
 8008878:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800887c:	e7be      	b.n	80087fc <_strtod_l+0x84>
 800887e:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 8008882:	e7f7      	b.n	8008874 <_strtod_l+0xfc>
 8008884:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 8008888:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800888a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800888e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008892:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008896:	e7ed      	b.n	8008874 <_strtod_l+0xfc>
 8008898:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008a20 <_strtod_l+0x2a8>
 800889c:	f04f 0a00 	mov.w	sl, #0
 80088a0:	e7e8      	b.n	8008874 <_strtod_l+0xfc>
 80088a2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80088a6:	f04f 3aff 	mov.w	sl, #4294967295
 80088aa:	e7e3      	b.n	8008874 <_strtod_l+0xfc>
 80088ac:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088ae:	1c5a      	adds	r2, r3, #1
 80088b0:	921d      	str	r2, [sp, #116]	; 0x74
 80088b2:	785b      	ldrb	r3, [r3, #1]
 80088b4:	2b30      	cmp	r3, #48	; 0x30
 80088b6:	d0f9      	beq.n	80088ac <_strtod_l+0x134>
 80088b8:	2b00      	cmp	r3, #0
 80088ba:	d09f      	beq.n	80087fc <_strtod_l+0x84>
 80088bc:	2301      	movs	r3, #1
 80088be:	f04f 0900 	mov.w	r9, #0
 80088c2:	9304      	str	r3, [sp, #16]
 80088c4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088c6:	930a      	str	r3, [sp, #40]	; 0x28
 80088c8:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80088cc:	464f      	mov	r7, r9
 80088ce:	220a      	movs	r2, #10
 80088d0:	981d      	ldr	r0, [sp, #116]	; 0x74
 80088d2:	7806      	ldrb	r6, [r0, #0]
 80088d4:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 80088d8:	b2d9      	uxtb	r1, r3
 80088da:	2909      	cmp	r1, #9
 80088dc:	d92a      	bls.n	8008934 <_strtod_l+0x1bc>
 80088de:	9907      	ldr	r1, [sp, #28]
 80088e0:	462a      	mov	r2, r5
 80088e2:	f003 f867 	bl	800b9b4 <strncmp>
 80088e6:	b398      	cbz	r0, 8008950 <_strtod_l+0x1d8>
 80088e8:	2000      	movs	r0, #0
 80088ea:	4633      	mov	r3, r6
 80088ec:	463d      	mov	r5, r7
 80088ee:	9007      	str	r0, [sp, #28]
 80088f0:	4602      	mov	r2, r0
 80088f2:	2b65      	cmp	r3, #101	; 0x65
 80088f4:	d001      	beq.n	80088fa <_strtod_l+0x182>
 80088f6:	2b45      	cmp	r3, #69	; 0x45
 80088f8:	d118      	bne.n	800892c <_strtod_l+0x1b4>
 80088fa:	b91d      	cbnz	r5, 8008904 <_strtod_l+0x18c>
 80088fc:	9b04      	ldr	r3, [sp, #16]
 80088fe:	4303      	orrs	r3, r0
 8008900:	d098      	beq.n	8008834 <_strtod_l+0xbc>
 8008902:	2500      	movs	r5, #0
 8008904:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008908:	f108 0301 	add.w	r3, r8, #1
 800890c:	931d      	str	r3, [sp, #116]	; 0x74
 800890e:	f898 3001 	ldrb.w	r3, [r8, #1]
 8008912:	2b2b      	cmp	r3, #43	; 0x2b
 8008914:	d075      	beq.n	8008a02 <_strtod_l+0x28a>
 8008916:	2b2d      	cmp	r3, #45	; 0x2d
 8008918:	d07b      	beq.n	8008a12 <_strtod_l+0x29a>
 800891a:	f04f 0c00 	mov.w	ip, #0
 800891e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 8008922:	2909      	cmp	r1, #9
 8008924:	f240 8082 	bls.w	8008a2c <_strtod_l+0x2b4>
 8008928:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 800892c:	2600      	movs	r6, #0
 800892e:	e09d      	b.n	8008a6c <_strtod_l+0x2f4>
 8008930:	2300      	movs	r3, #0
 8008932:	e7c4      	b.n	80088be <_strtod_l+0x146>
 8008934:	2f08      	cmp	r7, #8
 8008936:	bfd8      	it	le
 8008938:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800893a:	f100 0001 	add.w	r0, r0, #1
 800893e:	bfda      	itte	le
 8008940:	fb02 3301 	mlale	r3, r2, r1, r3
 8008944:	9309      	strle	r3, [sp, #36]	; 0x24
 8008946:	fb02 3909 	mlagt	r9, r2, r9, r3
 800894a:	3701      	adds	r7, #1
 800894c:	901d      	str	r0, [sp, #116]	; 0x74
 800894e:	e7bf      	b.n	80088d0 <_strtod_l+0x158>
 8008950:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008952:	195a      	adds	r2, r3, r5
 8008954:	921d      	str	r2, [sp, #116]	; 0x74
 8008956:	5d5b      	ldrb	r3, [r3, r5]
 8008958:	2f00      	cmp	r7, #0
 800895a:	d037      	beq.n	80089cc <_strtod_l+0x254>
 800895c:	9007      	str	r0, [sp, #28]
 800895e:	463d      	mov	r5, r7
 8008960:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 8008964:	2a09      	cmp	r2, #9
 8008966:	d912      	bls.n	800898e <_strtod_l+0x216>
 8008968:	2201      	movs	r2, #1
 800896a:	e7c2      	b.n	80088f2 <_strtod_l+0x17a>
 800896c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800896e:	1c5a      	adds	r2, r3, #1
 8008970:	921d      	str	r2, [sp, #116]	; 0x74
 8008972:	785b      	ldrb	r3, [r3, #1]
 8008974:	3001      	adds	r0, #1
 8008976:	2b30      	cmp	r3, #48	; 0x30
 8008978:	d0f8      	beq.n	800896c <_strtod_l+0x1f4>
 800897a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800897e:	2a08      	cmp	r2, #8
 8008980:	f200 84db 	bhi.w	800933a <_strtod_l+0xbc2>
 8008984:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8008986:	9007      	str	r0, [sp, #28]
 8008988:	2000      	movs	r0, #0
 800898a:	920a      	str	r2, [sp, #40]	; 0x28
 800898c:	4605      	mov	r5, r0
 800898e:	3b30      	subs	r3, #48	; 0x30
 8008990:	f100 0201 	add.w	r2, r0, #1
 8008994:	d014      	beq.n	80089c0 <_strtod_l+0x248>
 8008996:	9907      	ldr	r1, [sp, #28]
 8008998:	4411      	add	r1, r2
 800899a:	9107      	str	r1, [sp, #28]
 800899c:	462a      	mov	r2, r5
 800899e:	eb00 0e05 	add.w	lr, r0, r5
 80089a2:	210a      	movs	r1, #10
 80089a4:	4572      	cmp	r2, lr
 80089a6:	d113      	bne.n	80089d0 <_strtod_l+0x258>
 80089a8:	182a      	adds	r2, r5, r0
 80089aa:	2a08      	cmp	r2, #8
 80089ac:	f105 0501 	add.w	r5, r5, #1
 80089b0:	4405      	add	r5, r0
 80089b2:	dc1c      	bgt.n	80089ee <_strtod_l+0x276>
 80089b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089b6:	220a      	movs	r2, #10
 80089b8:	fb02 3301 	mla	r3, r2, r1, r3
 80089bc:	9309      	str	r3, [sp, #36]	; 0x24
 80089be:	2200      	movs	r2, #0
 80089c0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089c2:	1c59      	adds	r1, r3, #1
 80089c4:	911d      	str	r1, [sp, #116]	; 0x74
 80089c6:	785b      	ldrb	r3, [r3, #1]
 80089c8:	4610      	mov	r0, r2
 80089ca:	e7c9      	b.n	8008960 <_strtod_l+0x1e8>
 80089cc:	4638      	mov	r0, r7
 80089ce:	e7d2      	b.n	8008976 <_strtod_l+0x1fe>
 80089d0:	2a08      	cmp	r2, #8
 80089d2:	dc04      	bgt.n	80089de <_strtod_l+0x266>
 80089d4:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80089d6:	434e      	muls	r6, r1
 80089d8:	9609      	str	r6, [sp, #36]	; 0x24
 80089da:	3201      	adds	r2, #1
 80089dc:	e7e2      	b.n	80089a4 <_strtod_l+0x22c>
 80089de:	f102 0c01 	add.w	ip, r2, #1
 80089e2:	f1bc 0f10 	cmp.w	ip, #16
 80089e6:	bfd8      	it	le
 80089e8:	fb01 f909 	mulle.w	r9, r1, r9
 80089ec:	e7f5      	b.n	80089da <_strtod_l+0x262>
 80089ee:	2d10      	cmp	r5, #16
 80089f0:	bfdc      	itt	le
 80089f2:	220a      	movle	r2, #10
 80089f4:	fb02 3909 	mlale	r9, r2, r9, r3
 80089f8:	e7e1      	b.n	80089be <_strtod_l+0x246>
 80089fa:	2300      	movs	r3, #0
 80089fc:	9307      	str	r3, [sp, #28]
 80089fe:	2201      	movs	r2, #1
 8008a00:	e77c      	b.n	80088fc <_strtod_l+0x184>
 8008a02:	f04f 0c00 	mov.w	ip, #0
 8008a06:	f108 0302 	add.w	r3, r8, #2
 8008a0a:	931d      	str	r3, [sp, #116]	; 0x74
 8008a0c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008a10:	e785      	b.n	800891e <_strtod_l+0x1a6>
 8008a12:	f04f 0c01 	mov.w	ip, #1
 8008a16:	e7f6      	b.n	8008a06 <_strtod_l+0x28e>
 8008a18:	0800cd20 	.word	0x0800cd20
 8008a1c:	0800caf0 	.word	0x0800caf0
 8008a20:	7ff00000 	.word	0x7ff00000
 8008a24:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a26:	1c59      	adds	r1, r3, #1
 8008a28:	911d      	str	r1, [sp, #116]	; 0x74
 8008a2a:	785b      	ldrb	r3, [r3, #1]
 8008a2c:	2b30      	cmp	r3, #48	; 0x30
 8008a2e:	d0f9      	beq.n	8008a24 <_strtod_l+0x2ac>
 8008a30:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008a34:	2908      	cmp	r1, #8
 8008a36:	f63f af79 	bhi.w	800892c <_strtod_l+0x1b4>
 8008a3a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008a3e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a40:	9308      	str	r3, [sp, #32]
 8008a42:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a44:	1c59      	adds	r1, r3, #1
 8008a46:	911d      	str	r1, [sp, #116]	; 0x74
 8008a48:	785b      	ldrb	r3, [r3, #1]
 8008a4a:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008a4e:	2e09      	cmp	r6, #9
 8008a50:	d937      	bls.n	8008ac2 <_strtod_l+0x34a>
 8008a52:	9e08      	ldr	r6, [sp, #32]
 8008a54:	1b89      	subs	r1, r1, r6
 8008a56:	2908      	cmp	r1, #8
 8008a58:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008a5c:	dc02      	bgt.n	8008a64 <_strtod_l+0x2ec>
 8008a5e:	4576      	cmp	r6, lr
 8008a60:	bfa8      	it	ge
 8008a62:	4676      	movge	r6, lr
 8008a64:	f1bc 0f00 	cmp.w	ip, #0
 8008a68:	d000      	beq.n	8008a6c <_strtod_l+0x2f4>
 8008a6a:	4276      	negs	r6, r6
 8008a6c:	2d00      	cmp	r5, #0
 8008a6e:	d14f      	bne.n	8008b10 <_strtod_l+0x398>
 8008a70:	9904      	ldr	r1, [sp, #16]
 8008a72:	4301      	orrs	r1, r0
 8008a74:	f47f aec2 	bne.w	80087fc <_strtod_l+0x84>
 8008a78:	2a00      	cmp	r2, #0
 8008a7a:	f47f aedb 	bne.w	8008834 <_strtod_l+0xbc>
 8008a7e:	2b69      	cmp	r3, #105	; 0x69
 8008a80:	d027      	beq.n	8008ad2 <_strtod_l+0x35a>
 8008a82:	dc24      	bgt.n	8008ace <_strtod_l+0x356>
 8008a84:	2b49      	cmp	r3, #73	; 0x49
 8008a86:	d024      	beq.n	8008ad2 <_strtod_l+0x35a>
 8008a88:	2b4e      	cmp	r3, #78	; 0x4e
 8008a8a:	f47f aed3 	bne.w	8008834 <_strtod_l+0xbc>
 8008a8e:	499e      	ldr	r1, [pc, #632]	; (8008d08 <_strtod_l+0x590>)
 8008a90:	a81d      	add	r0, sp, #116	; 0x74
 8008a92:	f001 fa5f 	bl	8009f54 <__match>
 8008a96:	2800      	cmp	r0, #0
 8008a98:	f43f aecc 	beq.w	8008834 <_strtod_l+0xbc>
 8008a9c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a9e:	781b      	ldrb	r3, [r3, #0]
 8008aa0:	2b28      	cmp	r3, #40	; 0x28
 8008aa2:	d12d      	bne.n	8008b00 <_strtod_l+0x388>
 8008aa4:	4999      	ldr	r1, [pc, #612]	; (8008d0c <_strtod_l+0x594>)
 8008aa6:	aa20      	add	r2, sp, #128	; 0x80
 8008aa8:	a81d      	add	r0, sp, #116	; 0x74
 8008aaa:	f001 fa67 	bl	8009f7c <__hexnan>
 8008aae:	2805      	cmp	r0, #5
 8008ab0:	d126      	bne.n	8008b00 <_strtod_l+0x388>
 8008ab2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008ab4:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008ab8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008abc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008ac0:	e69c      	b.n	80087fc <_strtod_l+0x84>
 8008ac2:	210a      	movs	r1, #10
 8008ac4:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008ac8:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008acc:	e7b9      	b.n	8008a42 <_strtod_l+0x2ca>
 8008ace:	2b6e      	cmp	r3, #110	; 0x6e
 8008ad0:	e7db      	b.n	8008a8a <_strtod_l+0x312>
 8008ad2:	498f      	ldr	r1, [pc, #572]	; (8008d10 <_strtod_l+0x598>)
 8008ad4:	a81d      	add	r0, sp, #116	; 0x74
 8008ad6:	f001 fa3d 	bl	8009f54 <__match>
 8008ada:	2800      	cmp	r0, #0
 8008adc:	f43f aeaa 	beq.w	8008834 <_strtod_l+0xbc>
 8008ae0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ae2:	498c      	ldr	r1, [pc, #560]	; (8008d14 <_strtod_l+0x59c>)
 8008ae4:	3b01      	subs	r3, #1
 8008ae6:	a81d      	add	r0, sp, #116	; 0x74
 8008ae8:	931d      	str	r3, [sp, #116]	; 0x74
 8008aea:	f001 fa33 	bl	8009f54 <__match>
 8008aee:	b910      	cbnz	r0, 8008af6 <_strtod_l+0x37e>
 8008af0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008af2:	3301      	adds	r3, #1
 8008af4:	931d      	str	r3, [sp, #116]	; 0x74
 8008af6:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008d24 <_strtod_l+0x5ac>
 8008afa:	f04f 0a00 	mov.w	sl, #0
 8008afe:	e67d      	b.n	80087fc <_strtod_l+0x84>
 8008b00:	4885      	ldr	r0, [pc, #532]	; (8008d18 <_strtod_l+0x5a0>)
 8008b02:	f002 ff05 	bl	800b910 <nan>
 8008b06:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008b0a:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008b0e:	e675      	b.n	80087fc <_strtod_l+0x84>
 8008b10:	9b07      	ldr	r3, [sp, #28]
 8008b12:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b14:	1af3      	subs	r3, r6, r3
 8008b16:	2f00      	cmp	r7, #0
 8008b18:	bf08      	it	eq
 8008b1a:	462f      	moveq	r7, r5
 8008b1c:	2d10      	cmp	r5, #16
 8008b1e:	9308      	str	r3, [sp, #32]
 8008b20:	46a8      	mov	r8, r5
 8008b22:	bfa8      	it	ge
 8008b24:	f04f 0810 	movge.w	r8, #16
 8008b28:	f7f7 fcec 	bl	8000504 <__aeabi_ui2d>
 8008b2c:	2d09      	cmp	r5, #9
 8008b2e:	4682      	mov	sl, r0
 8008b30:	468b      	mov	fp, r1
 8008b32:	dd13      	ble.n	8008b5c <_strtod_l+0x3e4>
 8008b34:	4b79      	ldr	r3, [pc, #484]	; (8008d1c <_strtod_l+0x5a4>)
 8008b36:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b3a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b3e:	f7f7 fd5b 	bl	80005f8 <__aeabi_dmul>
 8008b42:	4682      	mov	sl, r0
 8008b44:	4648      	mov	r0, r9
 8008b46:	468b      	mov	fp, r1
 8008b48:	f7f7 fcdc 	bl	8000504 <__aeabi_ui2d>
 8008b4c:	4602      	mov	r2, r0
 8008b4e:	460b      	mov	r3, r1
 8008b50:	4650      	mov	r0, sl
 8008b52:	4659      	mov	r1, fp
 8008b54:	f7f7 fb9a 	bl	800028c <__adddf3>
 8008b58:	4682      	mov	sl, r0
 8008b5a:	468b      	mov	fp, r1
 8008b5c:	2d0f      	cmp	r5, #15
 8008b5e:	dc38      	bgt.n	8008bd2 <_strtod_l+0x45a>
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	f43f ae4a 	beq.w	80087fc <_strtod_l+0x84>
 8008b68:	dd24      	ble.n	8008bb4 <_strtod_l+0x43c>
 8008b6a:	2b16      	cmp	r3, #22
 8008b6c:	dc0b      	bgt.n	8008b86 <_strtod_l+0x40e>
 8008b6e:	4d6b      	ldr	r5, [pc, #428]	; (8008d1c <_strtod_l+0x5a4>)
 8008b70:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008b74:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008b78:	4652      	mov	r2, sl
 8008b7a:	465b      	mov	r3, fp
 8008b7c:	f7f7 fd3c 	bl	80005f8 <__aeabi_dmul>
 8008b80:	4682      	mov	sl, r0
 8008b82:	468b      	mov	fp, r1
 8008b84:	e63a      	b.n	80087fc <_strtod_l+0x84>
 8008b86:	9a08      	ldr	r2, [sp, #32]
 8008b88:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008b8c:	4293      	cmp	r3, r2
 8008b8e:	db20      	blt.n	8008bd2 <_strtod_l+0x45a>
 8008b90:	4c62      	ldr	r4, [pc, #392]	; (8008d1c <_strtod_l+0x5a4>)
 8008b92:	f1c5 050f 	rsb	r5, r5, #15
 8008b96:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008b9a:	4652      	mov	r2, sl
 8008b9c:	465b      	mov	r3, fp
 8008b9e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008ba2:	f7f7 fd29 	bl	80005f8 <__aeabi_dmul>
 8008ba6:	9b08      	ldr	r3, [sp, #32]
 8008ba8:	1b5d      	subs	r5, r3, r5
 8008baa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008bae:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008bb2:	e7e3      	b.n	8008b7c <_strtod_l+0x404>
 8008bb4:	9b08      	ldr	r3, [sp, #32]
 8008bb6:	3316      	adds	r3, #22
 8008bb8:	db0b      	blt.n	8008bd2 <_strtod_l+0x45a>
 8008bba:	9b07      	ldr	r3, [sp, #28]
 8008bbc:	4a57      	ldr	r2, [pc, #348]	; (8008d1c <_strtod_l+0x5a4>)
 8008bbe:	1b9e      	subs	r6, r3, r6
 8008bc0:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008bc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008bc8:	4650      	mov	r0, sl
 8008bca:	4659      	mov	r1, fp
 8008bcc:	f7f7 fe3e 	bl	800084c <__aeabi_ddiv>
 8008bd0:	e7d6      	b.n	8008b80 <_strtod_l+0x408>
 8008bd2:	9b08      	ldr	r3, [sp, #32]
 8008bd4:	eba5 0808 	sub.w	r8, r5, r8
 8008bd8:	4498      	add	r8, r3
 8008bda:	f1b8 0f00 	cmp.w	r8, #0
 8008bde:	dd71      	ble.n	8008cc4 <_strtod_l+0x54c>
 8008be0:	f018 030f 	ands.w	r3, r8, #15
 8008be4:	d00a      	beq.n	8008bfc <_strtod_l+0x484>
 8008be6:	494d      	ldr	r1, [pc, #308]	; (8008d1c <_strtod_l+0x5a4>)
 8008be8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008bec:	4652      	mov	r2, sl
 8008bee:	465b      	mov	r3, fp
 8008bf0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bf4:	f7f7 fd00 	bl	80005f8 <__aeabi_dmul>
 8008bf8:	4682      	mov	sl, r0
 8008bfa:	468b      	mov	fp, r1
 8008bfc:	f038 080f 	bics.w	r8, r8, #15
 8008c00:	d04d      	beq.n	8008c9e <_strtod_l+0x526>
 8008c02:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008c06:	dd22      	ble.n	8008c4e <_strtod_l+0x4d6>
 8008c08:	2500      	movs	r5, #0
 8008c0a:	462e      	mov	r6, r5
 8008c0c:	9509      	str	r5, [sp, #36]	; 0x24
 8008c0e:	9507      	str	r5, [sp, #28]
 8008c10:	2322      	movs	r3, #34	; 0x22
 8008c12:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008d24 <_strtod_l+0x5ac>
 8008c16:	6023      	str	r3, [r4, #0]
 8008c18:	f04f 0a00 	mov.w	sl, #0
 8008c1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f43f adec 	beq.w	80087fc <_strtod_l+0x84>
 8008c24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c26:	4620      	mov	r0, r4
 8008c28:	f001 fb1e 	bl	800a268 <_Bfree>
 8008c2c:	9907      	ldr	r1, [sp, #28]
 8008c2e:	4620      	mov	r0, r4
 8008c30:	f001 fb1a 	bl	800a268 <_Bfree>
 8008c34:	4631      	mov	r1, r6
 8008c36:	4620      	mov	r0, r4
 8008c38:	f001 fb16 	bl	800a268 <_Bfree>
 8008c3c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c3e:	4620      	mov	r0, r4
 8008c40:	f001 fb12 	bl	800a268 <_Bfree>
 8008c44:	4629      	mov	r1, r5
 8008c46:	4620      	mov	r0, r4
 8008c48:	f001 fb0e 	bl	800a268 <_Bfree>
 8008c4c:	e5d6      	b.n	80087fc <_strtod_l+0x84>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c54:	4650      	mov	r0, sl
 8008c56:	4659      	mov	r1, fp
 8008c58:	4699      	mov	r9, r3
 8008c5a:	f1b8 0f01 	cmp.w	r8, #1
 8008c5e:	dc21      	bgt.n	8008ca4 <_strtod_l+0x52c>
 8008c60:	b10b      	cbz	r3, 8008c66 <_strtod_l+0x4ee>
 8008c62:	4682      	mov	sl, r0
 8008c64:	468b      	mov	fp, r1
 8008c66:	4b2e      	ldr	r3, [pc, #184]	; (8008d20 <_strtod_l+0x5a8>)
 8008c68:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008c6c:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008c70:	4652      	mov	r2, sl
 8008c72:	465b      	mov	r3, fp
 8008c74:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008c78:	f7f7 fcbe 	bl	80005f8 <__aeabi_dmul>
 8008c7c:	4b29      	ldr	r3, [pc, #164]	; (8008d24 <_strtod_l+0x5ac>)
 8008c7e:	460a      	mov	r2, r1
 8008c80:	400b      	ands	r3, r1
 8008c82:	4929      	ldr	r1, [pc, #164]	; (8008d28 <_strtod_l+0x5b0>)
 8008c84:	428b      	cmp	r3, r1
 8008c86:	4682      	mov	sl, r0
 8008c88:	d8be      	bhi.n	8008c08 <_strtod_l+0x490>
 8008c8a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c8e:	428b      	cmp	r3, r1
 8008c90:	bf86      	itte	hi
 8008c92:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008d2c <_strtod_l+0x5b4>
 8008c96:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c9a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008c9e:	2300      	movs	r3, #0
 8008ca0:	9304      	str	r3, [sp, #16]
 8008ca2:	e081      	b.n	8008da8 <_strtod_l+0x630>
 8008ca4:	f018 0f01 	tst.w	r8, #1
 8008ca8:	d007      	beq.n	8008cba <_strtod_l+0x542>
 8008caa:	4b1d      	ldr	r3, [pc, #116]	; (8008d20 <_strtod_l+0x5a8>)
 8008cac:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cb4:	f7f7 fca0 	bl	80005f8 <__aeabi_dmul>
 8008cb8:	2301      	movs	r3, #1
 8008cba:	f109 0901 	add.w	r9, r9, #1
 8008cbe:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008cc2:	e7ca      	b.n	8008c5a <_strtod_l+0x4e2>
 8008cc4:	d0eb      	beq.n	8008c9e <_strtod_l+0x526>
 8008cc6:	f1c8 0800 	rsb	r8, r8, #0
 8008cca:	f018 020f 	ands.w	r2, r8, #15
 8008cce:	d00a      	beq.n	8008ce6 <_strtod_l+0x56e>
 8008cd0:	4b12      	ldr	r3, [pc, #72]	; (8008d1c <_strtod_l+0x5a4>)
 8008cd2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008cd6:	4650      	mov	r0, sl
 8008cd8:	4659      	mov	r1, fp
 8008cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cde:	f7f7 fdb5 	bl	800084c <__aeabi_ddiv>
 8008ce2:	4682      	mov	sl, r0
 8008ce4:	468b      	mov	fp, r1
 8008ce6:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008cea:	d0d8      	beq.n	8008c9e <_strtod_l+0x526>
 8008cec:	f1b8 0f1f 	cmp.w	r8, #31
 8008cf0:	dd1e      	ble.n	8008d30 <_strtod_l+0x5b8>
 8008cf2:	2500      	movs	r5, #0
 8008cf4:	462e      	mov	r6, r5
 8008cf6:	9509      	str	r5, [sp, #36]	; 0x24
 8008cf8:	9507      	str	r5, [sp, #28]
 8008cfa:	2322      	movs	r3, #34	; 0x22
 8008cfc:	f04f 0a00 	mov.w	sl, #0
 8008d00:	f04f 0b00 	mov.w	fp, #0
 8008d04:	6023      	str	r3, [r4, #0]
 8008d06:	e789      	b.n	8008c1c <_strtod_l+0x4a4>
 8008d08:	0800caea 	.word	0x0800caea
 8008d0c:	0800cb04 	.word	0x0800cb04
 8008d10:	0800cae1 	.word	0x0800cae1
 8008d14:	0800cae4 	.word	0x0800cae4
 8008d18:	0800cf35 	.word	0x0800cf35
 8008d1c:	0800cdd8 	.word	0x0800cdd8
 8008d20:	0800cdb0 	.word	0x0800cdb0
 8008d24:	7ff00000 	.word	0x7ff00000
 8008d28:	7ca00000 	.word	0x7ca00000
 8008d2c:	7fefffff 	.word	0x7fefffff
 8008d30:	f018 0310 	ands.w	r3, r8, #16
 8008d34:	bf18      	it	ne
 8008d36:	236a      	movne	r3, #106	; 0x6a
 8008d38:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 80090f0 <_strtod_l+0x978>
 8008d3c:	9304      	str	r3, [sp, #16]
 8008d3e:	4650      	mov	r0, sl
 8008d40:	4659      	mov	r1, fp
 8008d42:	2300      	movs	r3, #0
 8008d44:	f018 0f01 	tst.w	r8, #1
 8008d48:	d004      	beq.n	8008d54 <_strtod_l+0x5dc>
 8008d4a:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d4e:	f7f7 fc53 	bl	80005f8 <__aeabi_dmul>
 8008d52:	2301      	movs	r3, #1
 8008d54:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008d58:	f109 0908 	add.w	r9, r9, #8
 8008d5c:	d1f2      	bne.n	8008d44 <_strtod_l+0x5cc>
 8008d5e:	b10b      	cbz	r3, 8008d64 <_strtod_l+0x5ec>
 8008d60:	4682      	mov	sl, r0
 8008d62:	468b      	mov	fp, r1
 8008d64:	9b04      	ldr	r3, [sp, #16]
 8008d66:	b1bb      	cbz	r3, 8008d98 <_strtod_l+0x620>
 8008d68:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008d6c:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	4659      	mov	r1, fp
 8008d74:	dd10      	ble.n	8008d98 <_strtod_l+0x620>
 8008d76:	2b1f      	cmp	r3, #31
 8008d78:	f340 8128 	ble.w	8008fcc <_strtod_l+0x854>
 8008d7c:	2b34      	cmp	r3, #52	; 0x34
 8008d7e:	bfde      	ittt	le
 8008d80:	3b20      	suble	r3, #32
 8008d82:	f04f 32ff 	movle.w	r2, #4294967295
 8008d86:	fa02 f303 	lslle.w	r3, r2, r3
 8008d8a:	f04f 0a00 	mov.w	sl, #0
 8008d8e:	bfcc      	ite	gt
 8008d90:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008d94:	ea03 0b01 	andle.w	fp, r3, r1
 8008d98:	2200      	movs	r2, #0
 8008d9a:	2300      	movs	r3, #0
 8008d9c:	4650      	mov	r0, sl
 8008d9e:	4659      	mov	r1, fp
 8008da0:	f7f7 fe92 	bl	8000ac8 <__aeabi_dcmpeq>
 8008da4:	2800      	cmp	r0, #0
 8008da6:	d1a4      	bne.n	8008cf2 <_strtod_l+0x57a>
 8008da8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008daa:	9300      	str	r3, [sp, #0]
 8008dac:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008dae:	462b      	mov	r3, r5
 8008db0:	463a      	mov	r2, r7
 8008db2:	4620      	mov	r0, r4
 8008db4:	f001 fac4 	bl	800a340 <__s2b>
 8008db8:	9009      	str	r0, [sp, #36]	; 0x24
 8008dba:	2800      	cmp	r0, #0
 8008dbc:	f43f af24 	beq.w	8008c08 <_strtod_l+0x490>
 8008dc0:	9b07      	ldr	r3, [sp, #28]
 8008dc2:	1b9e      	subs	r6, r3, r6
 8008dc4:	9b08      	ldr	r3, [sp, #32]
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	bfb4      	ite	lt
 8008dca:	4633      	movlt	r3, r6
 8008dcc:	2300      	movge	r3, #0
 8008dce:	9310      	str	r3, [sp, #64]	; 0x40
 8008dd0:	9b08      	ldr	r3, [sp, #32]
 8008dd2:	2500      	movs	r5, #0
 8008dd4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008dd8:	9318      	str	r3, [sp, #96]	; 0x60
 8008dda:	462e      	mov	r6, r5
 8008ddc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008dde:	4620      	mov	r0, r4
 8008de0:	6859      	ldr	r1, [r3, #4]
 8008de2:	f001 fa01 	bl	800a1e8 <_Balloc>
 8008de6:	9007      	str	r0, [sp, #28]
 8008de8:	2800      	cmp	r0, #0
 8008dea:	f43f af11 	beq.w	8008c10 <_strtod_l+0x498>
 8008dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008df0:	691a      	ldr	r2, [r3, #16]
 8008df2:	3202      	adds	r2, #2
 8008df4:	f103 010c 	add.w	r1, r3, #12
 8008df8:	0092      	lsls	r2, r2, #2
 8008dfa:	300c      	adds	r0, #12
 8008dfc:	f001 f9e6 	bl	800a1cc <memcpy>
 8008e00:	ec4b ab10 	vmov	d0, sl, fp
 8008e04:	aa20      	add	r2, sp, #128	; 0x80
 8008e06:	a91f      	add	r1, sp, #124	; 0x7c
 8008e08:	4620      	mov	r0, r4
 8008e0a:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008e0e:	f001 fdd3 	bl	800a9b8 <__d2b>
 8008e12:	901e      	str	r0, [sp, #120]	; 0x78
 8008e14:	2800      	cmp	r0, #0
 8008e16:	f43f aefb 	beq.w	8008c10 <_strtod_l+0x498>
 8008e1a:	2101      	movs	r1, #1
 8008e1c:	4620      	mov	r0, r4
 8008e1e:	f001 fb29 	bl	800a474 <__i2b>
 8008e22:	4606      	mov	r6, r0
 8008e24:	2800      	cmp	r0, #0
 8008e26:	f43f aef3 	beq.w	8008c10 <_strtod_l+0x498>
 8008e2a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e2c:	9904      	ldr	r1, [sp, #16]
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	bfab      	itete	ge
 8008e32:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008e34:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008e36:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008e38:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008e3c:	bfac      	ite	ge
 8008e3e:	eb03 0902 	addge.w	r9, r3, r2
 8008e42:	1ad7      	sublt	r7, r2, r3
 8008e44:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e46:	eba3 0801 	sub.w	r8, r3, r1
 8008e4a:	4490      	add	r8, r2
 8008e4c:	4ba3      	ldr	r3, [pc, #652]	; (80090dc <_strtod_l+0x964>)
 8008e4e:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e52:	4598      	cmp	r8, r3
 8008e54:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e58:	f280 80cc 	bge.w	8008ff4 <_strtod_l+0x87c>
 8008e5c:	eba3 0308 	sub.w	r3, r3, r8
 8008e60:	2b1f      	cmp	r3, #31
 8008e62:	eba2 0203 	sub.w	r2, r2, r3
 8008e66:	f04f 0101 	mov.w	r1, #1
 8008e6a:	f300 80b6 	bgt.w	8008fda <_strtod_l+0x862>
 8008e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8008e72:	9311      	str	r3, [sp, #68]	; 0x44
 8008e74:	2300      	movs	r3, #0
 8008e76:	930c      	str	r3, [sp, #48]	; 0x30
 8008e78:	eb09 0802 	add.w	r8, r9, r2
 8008e7c:	9b04      	ldr	r3, [sp, #16]
 8008e7e:	45c1      	cmp	r9, r8
 8008e80:	4417      	add	r7, r2
 8008e82:	441f      	add	r7, r3
 8008e84:	464b      	mov	r3, r9
 8008e86:	bfa8      	it	ge
 8008e88:	4643      	movge	r3, r8
 8008e8a:	42bb      	cmp	r3, r7
 8008e8c:	bfa8      	it	ge
 8008e8e:	463b      	movge	r3, r7
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	bfc2      	ittt	gt
 8008e94:	eba8 0803 	subgt.w	r8, r8, r3
 8008e98:	1aff      	subgt	r7, r7, r3
 8008e9a:	eba9 0903 	subgt.w	r9, r9, r3
 8008e9e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ea0:	2b00      	cmp	r3, #0
 8008ea2:	dd17      	ble.n	8008ed4 <_strtod_l+0x75c>
 8008ea4:	4631      	mov	r1, r6
 8008ea6:	461a      	mov	r2, r3
 8008ea8:	4620      	mov	r0, r4
 8008eaa:	f001 fb9f 	bl	800a5ec <__pow5mult>
 8008eae:	4606      	mov	r6, r0
 8008eb0:	2800      	cmp	r0, #0
 8008eb2:	f43f aead 	beq.w	8008c10 <_strtod_l+0x498>
 8008eb6:	4601      	mov	r1, r0
 8008eb8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008eba:	4620      	mov	r0, r4
 8008ebc:	f001 faf0 	bl	800a4a0 <__multiply>
 8008ec0:	900f      	str	r0, [sp, #60]	; 0x3c
 8008ec2:	2800      	cmp	r0, #0
 8008ec4:	f43f aea4 	beq.w	8008c10 <_strtod_l+0x498>
 8008ec8:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008eca:	4620      	mov	r0, r4
 8008ecc:	f001 f9cc 	bl	800a268 <_Bfree>
 8008ed0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008ed2:	931e      	str	r3, [sp, #120]	; 0x78
 8008ed4:	f1b8 0f00 	cmp.w	r8, #0
 8008ed8:	f300 8091 	bgt.w	8008ffe <_strtod_l+0x886>
 8008edc:	9b08      	ldr	r3, [sp, #32]
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	dd08      	ble.n	8008ef4 <_strtod_l+0x77c>
 8008ee2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008ee4:	9907      	ldr	r1, [sp, #28]
 8008ee6:	4620      	mov	r0, r4
 8008ee8:	f001 fb80 	bl	800a5ec <__pow5mult>
 8008eec:	9007      	str	r0, [sp, #28]
 8008eee:	2800      	cmp	r0, #0
 8008ef0:	f43f ae8e 	beq.w	8008c10 <_strtod_l+0x498>
 8008ef4:	2f00      	cmp	r7, #0
 8008ef6:	dd08      	ble.n	8008f0a <_strtod_l+0x792>
 8008ef8:	9907      	ldr	r1, [sp, #28]
 8008efa:	463a      	mov	r2, r7
 8008efc:	4620      	mov	r0, r4
 8008efe:	f001 fbcf 	bl	800a6a0 <__lshift>
 8008f02:	9007      	str	r0, [sp, #28]
 8008f04:	2800      	cmp	r0, #0
 8008f06:	f43f ae83 	beq.w	8008c10 <_strtod_l+0x498>
 8008f0a:	f1b9 0f00 	cmp.w	r9, #0
 8008f0e:	dd08      	ble.n	8008f22 <_strtod_l+0x7aa>
 8008f10:	4631      	mov	r1, r6
 8008f12:	464a      	mov	r2, r9
 8008f14:	4620      	mov	r0, r4
 8008f16:	f001 fbc3 	bl	800a6a0 <__lshift>
 8008f1a:	4606      	mov	r6, r0
 8008f1c:	2800      	cmp	r0, #0
 8008f1e:	f43f ae77 	beq.w	8008c10 <_strtod_l+0x498>
 8008f22:	9a07      	ldr	r2, [sp, #28]
 8008f24:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f26:	4620      	mov	r0, r4
 8008f28:	f001 fc42 	bl	800a7b0 <__mdiff>
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	2800      	cmp	r0, #0
 8008f30:	f43f ae6e 	beq.w	8008c10 <_strtod_l+0x498>
 8008f34:	68c3      	ldr	r3, [r0, #12]
 8008f36:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f38:	2300      	movs	r3, #0
 8008f3a:	60c3      	str	r3, [r0, #12]
 8008f3c:	4631      	mov	r1, r6
 8008f3e:	f001 fc1b 	bl	800a778 <__mcmp>
 8008f42:	2800      	cmp	r0, #0
 8008f44:	da65      	bge.n	8009012 <_strtod_l+0x89a>
 8008f46:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f48:	ea53 030a 	orrs.w	r3, r3, sl
 8008f4c:	f040 8087 	bne.w	800905e <_strtod_l+0x8e6>
 8008f50:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f54:	2b00      	cmp	r3, #0
 8008f56:	f040 8082 	bne.w	800905e <_strtod_l+0x8e6>
 8008f5a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f5e:	0d1b      	lsrs	r3, r3, #20
 8008f60:	051b      	lsls	r3, r3, #20
 8008f62:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f66:	d97a      	bls.n	800905e <_strtod_l+0x8e6>
 8008f68:	696b      	ldr	r3, [r5, #20]
 8008f6a:	b913      	cbnz	r3, 8008f72 <_strtod_l+0x7fa>
 8008f6c:	692b      	ldr	r3, [r5, #16]
 8008f6e:	2b01      	cmp	r3, #1
 8008f70:	dd75      	ble.n	800905e <_strtod_l+0x8e6>
 8008f72:	4629      	mov	r1, r5
 8008f74:	2201      	movs	r2, #1
 8008f76:	4620      	mov	r0, r4
 8008f78:	f001 fb92 	bl	800a6a0 <__lshift>
 8008f7c:	4631      	mov	r1, r6
 8008f7e:	4605      	mov	r5, r0
 8008f80:	f001 fbfa 	bl	800a778 <__mcmp>
 8008f84:	2800      	cmp	r0, #0
 8008f86:	dd6a      	ble.n	800905e <_strtod_l+0x8e6>
 8008f88:	9904      	ldr	r1, [sp, #16]
 8008f8a:	4a55      	ldr	r2, [pc, #340]	; (80090e0 <_strtod_l+0x968>)
 8008f8c:	465b      	mov	r3, fp
 8008f8e:	2900      	cmp	r1, #0
 8008f90:	f000 8085 	beq.w	800909e <_strtod_l+0x926>
 8008f94:	ea02 010b 	and.w	r1, r2, fp
 8008f98:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f9c:	dc7f      	bgt.n	800909e <_strtod_l+0x926>
 8008f9e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008fa2:	f77f aeaa 	ble.w	8008cfa <_strtod_l+0x582>
 8008fa6:	4a4f      	ldr	r2, [pc, #316]	; (80090e4 <_strtod_l+0x96c>)
 8008fa8:	2300      	movs	r3, #0
 8008faa:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008fae:	4650      	mov	r0, sl
 8008fb0:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008fb4:	4659      	mov	r1, fp
 8008fb6:	f7f7 fb1f 	bl	80005f8 <__aeabi_dmul>
 8008fba:	460b      	mov	r3, r1
 8008fbc:	4303      	orrs	r3, r0
 8008fbe:	bf08      	it	eq
 8008fc0:	2322      	moveq	r3, #34	; 0x22
 8008fc2:	4682      	mov	sl, r0
 8008fc4:	468b      	mov	fp, r1
 8008fc6:	bf08      	it	eq
 8008fc8:	6023      	streq	r3, [r4, #0]
 8008fca:	e62b      	b.n	8008c24 <_strtod_l+0x4ac>
 8008fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8008fd0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fd4:	ea03 0a0a 	and.w	sl, r3, sl
 8008fd8:	e6de      	b.n	8008d98 <_strtod_l+0x620>
 8008fda:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008fde:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008fe2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008fe6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008fea:	fa01 f308 	lsl.w	r3, r1, r8
 8008fee:	930c      	str	r3, [sp, #48]	; 0x30
 8008ff0:	9111      	str	r1, [sp, #68]	; 0x44
 8008ff2:	e741      	b.n	8008e78 <_strtod_l+0x700>
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	930c      	str	r3, [sp, #48]	; 0x30
 8008ff8:	2301      	movs	r3, #1
 8008ffa:	9311      	str	r3, [sp, #68]	; 0x44
 8008ffc:	e73c      	b.n	8008e78 <_strtod_l+0x700>
 8008ffe:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009000:	4642      	mov	r2, r8
 8009002:	4620      	mov	r0, r4
 8009004:	f001 fb4c 	bl	800a6a0 <__lshift>
 8009008:	901e      	str	r0, [sp, #120]	; 0x78
 800900a:	2800      	cmp	r0, #0
 800900c:	f47f af66 	bne.w	8008edc <_strtod_l+0x764>
 8009010:	e5fe      	b.n	8008c10 <_strtod_l+0x498>
 8009012:	465f      	mov	r7, fp
 8009014:	d16e      	bne.n	80090f4 <_strtod_l+0x97c>
 8009016:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009018:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800901c:	b342      	cbz	r2, 8009070 <_strtod_l+0x8f8>
 800901e:	4a32      	ldr	r2, [pc, #200]	; (80090e8 <_strtod_l+0x970>)
 8009020:	4293      	cmp	r3, r2
 8009022:	d128      	bne.n	8009076 <_strtod_l+0x8fe>
 8009024:	9b04      	ldr	r3, [sp, #16]
 8009026:	4650      	mov	r0, sl
 8009028:	b1eb      	cbz	r3, 8009066 <_strtod_l+0x8ee>
 800902a:	4a2d      	ldr	r2, [pc, #180]	; (80090e0 <_strtod_l+0x968>)
 800902c:	403a      	ands	r2, r7
 800902e:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 8009032:	f04f 31ff 	mov.w	r1, #4294967295
 8009036:	d819      	bhi.n	800906c <_strtod_l+0x8f4>
 8009038:	0d12      	lsrs	r2, r2, #20
 800903a:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800903e:	fa01 f303 	lsl.w	r3, r1, r3
 8009042:	4298      	cmp	r0, r3
 8009044:	d117      	bne.n	8009076 <_strtod_l+0x8fe>
 8009046:	4b29      	ldr	r3, [pc, #164]	; (80090ec <_strtod_l+0x974>)
 8009048:	429f      	cmp	r7, r3
 800904a:	d102      	bne.n	8009052 <_strtod_l+0x8da>
 800904c:	3001      	adds	r0, #1
 800904e:	f43f addf 	beq.w	8008c10 <_strtod_l+0x498>
 8009052:	4b23      	ldr	r3, [pc, #140]	; (80090e0 <_strtod_l+0x968>)
 8009054:	403b      	ands	r3, r7
 8009056:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800905a:	f04f 0a00 	mov.w	sl, #0
 800905e:	9b04      	ldr	r3, [sp, #16]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1a0      	bne.n	8008fa6 <_strtod_l+0x82e>
 8009064:	e5de      	b.n	8008c24 <_strtod_l+0x4ac>
 8009066:	f04f 33ff 	mov.w	r3, #4294967295
 800906a:	e7ea      	b.n	8009042 <_strtod_l+0x8ca>
 800906c:	460b      	mov	r3, r1
 800906e:	e7e8      	b.n	8009042 <_strtod_l+0x8ca>
 8009070:	ea53 030a 	orrs.w	r3, r3, sl
 8009074:	d088      	beq.n	8008f88 <_strtod_l+0x810>
 8009076:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009078:	b1db      	cbz	r3, 80090b2 <_strtod_l+0x93a>
 800907a:	423b      	tst	r3, r7
 800907c:	d0ef      	beq.n	800905e <_strtod_l+0x8e6>
 800907e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009080:	9a04      	ldr	r2, [sp, #16]
 8009082:	4650      	mov	r0, sl
 8009084:	4659      	mov	r1, fp
 8009086:	b1c3      	cbz	r3, 80090ba <_strtod_l+0x942>
 8009088:	f7ff fb59 	bl	800873e <sulp>
 800908c:	4602      	mov	r2, r0
 800908e:	460b      	mov	r3, r1
 8009090:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8009094:	f7f7 f8fa 	bl	800028c <__adddf3>
 8009098:	4682      	mov	sl, r0
 800909a:	468b      	mov	fp, r1
 800909c:	e7df      	b.n	800905e <_strtod_l+0x8e6>
 800909e:	4013      	ands	r3, r2
 80090a0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80090a4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80090a8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80090ac:	f04f 3aff 	mov.w	sl, #4294967295
 80090b0:	e7d5      	b.n	800905e <_strtod_l+0x8e6>
 80090b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090b4:	ea13 0f0a 	tst.w	r3, sl
 80090b8:	e7e0      	b.n	800907c <_strtod_l+0x904>
 80090ba:	f7ff fb40 	bl	800873e <sulp>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090c6:	f7f7 f8df 	bl	8000288 <__aeabi_dsub>
 80090ca:	2200      	movs	r2, #0
 80090cc:	2300      	movs	r3, #0
 80090ce:	4682      	mov	sl, r0
 80090d0:	468b      	mov	fp, r1
 80090d2:	f7f7 fcf9 	bl	8000ac8 <__aeabi_dcmpeq>
 80090d6:	2800      	cmp	r0, #0
 80090d8:	d0c1      	beq.n	800905e <_strtod_l+0x8e6>
 80090da:	e60e      	b.n	8008cfa <_strtod_l+0x582>
 80090dc:	fffffc02 	.word	0xfffffc02
 80090e0:	7ff00000 	.word	0x7ff00000
 80090e4:	39500000 	.word	0x39500000
 80090e8:	000fffff 	.word	0x000fffff
 80090ec:	7fefffff 	.word	0x7fefffff
 80090f0:	0800cb18 	.word	0x0800cb18
 80090f4:	4631      	mov	r1, r6
 80090f6:	4628      	mov	r0, r5
 80090f8:	f001 fcba 	bl	800aa70 <__ratio>
 80090fc:	ec59 8b10 	vmov	r8, r9, d0
 8009100:	ee10 0a10 	vmov	r0, s0
 8009104:	2200      	movs	r2, #0
 8009106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800910a:	4649      	mov	r1, r9
 800910c:	f7f7 fcf0 	bl	8000af0 <__aeabi_dcmple>
 8009110:	2800      	cmp	r0, #0
 8009112:	d07c      	beq.n	800920e <_strtod_l+0xa96>
 8009114:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009116:	2b00      	cmp	r3, #0
 8009118:	d04c      	beq.n	80091b4 <_strtod_l+0xa3c>
 800911a:	4b95      	ldr	r3, [pc, #596]	; (8009370 <_strtod_l+0xbf8>)
 800911c:	2200      	movs	r2, #0
 800911e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009122:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009370 <_strtod_l+0xbf8>
 8009126:	f04f 0800 	mov.w	r8, #0
 800912a:	4b92      	ldr	r3, [pc, #584]	; (8009374 <_strtod_l+0xbfc>)
 800912c:	403b      	ands	r3, r7
 800912e:	9311      	str	r3, [sp, #68]	; 0x44
 8009130:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009132:	4b91      	ldr	r3, [pc, #580]	; (8009378 <_strtod_l+0xc00>)
 8009134:	429a      	cmp	r2, r3
 8009136:	f040 80b2 	bne.w	800929e <_strtod_l+0xb26>
 800913a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800913e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009142:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8009146:	ec4b ab10 	vmov	d0, sl, fp
 800914a:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 800914e:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009152:	f001 fbb5 	bl	800a8c0 <__ulp>
 8009156:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800915a:	ec53 2b10 	vmov	r2, r3, d0
 800915e:	f7f7 fa4b 	bl	80005f8 <__aeabi_dmul>
 8009162:	4652      	mov	r2, sl
 8009164:	465b      	mov	r3, fp
 8009166:	f7f7 f891 	bl	800028c <__adddf3>
 800916a:	460b      	mov	r3, r1
 800916c:	4981      	ldr	r1, [pc, #516]	; (8009374 <_strtod_l+0xbfc>)
 800916e:	4a83      	ldr	r2, [pc, #524]	; (800937c <_strtod_l+0xc04>)
 8009170:	4019      	ands	r1, r3
 8009172:	4291      	cmp	r1, r2
 8009174:	4682      	mov	sl, r0
 8009176:	d95e      	bls.n	8009236 <_strtod_l+0xabe>
 8009178:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800917a:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800917e:	4293      	cmp	r3, r2
 8009180:	d103      	bne.n	800918a <_strtod_l+0xa12>
 8009182:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009184:	3301      	adds	r3, #1
 8009186:	f43f ad43 	beq.w	8008c10 <_strtod_l+0x498>
 800918a:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 8009388 <_strtod_l+0xc10>
 800918e:	f04f 3aff 	mov.w	sl, #4294967295
 8009192:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009194:	4620      	mov	r0, r4
 8009196:	f001 f867 	bl	800a268 <_Bfree>
 800919a:	9907      	ldr	r1, [sp, #28]
 800919c:	4620      	mov	r0, r4
 800919e:	f001 f863 	bl	800a268 <_Bfree>
 80091a2:	4631      	mov	r1, r6
 80091a4:	4620      	mov	r0, r4
 80091a6:	f001 f85f 	bl	800a268 <_Bfree>
 80091aa:	4629      	mov	r1, r5
 80091ac:	4620      	mov	r0, r4
 80091ae:	f001 f85b 	bl	800a268 <_Bfree>
 80091b2:	e613      	b.n	8008ddc <_strtod_l+0x664>
 80091b4:	f1ba 0f00 	cmp.w	sl, #0
 80091b8:	d11b      	bne.n	80091f2 <_strtod_l+0xa7a>
 80091ba:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091be:	b9f3      	cbnz	r3, 80091fe <_strtod_l+0xa86>
 80091c0:	4b6b      	ldr	r3, [pc, #428]	; (8009370 <_strtod_l+0xbf8>)
 80091c2:	2200      	movs	r2, #0
 80091c4:	4640      	mov	r0, r8
 80091c6:	4649      	mov	r1, r9
 80091c8:	f7f7 fc88 	bl	8000adc <__aeabi_dcmplt>
 80091cc:	b9d0      	cbnz	r0, 8009204 <_strtod_l+0xa8c>
 80091ce:	4640      	mov	r0, r8
 80091d0:	4649      	mov	r1, r9
 80091d2:	4b6b      	ldr	r3, [pc, #428]	; (8009380 <_strtod_l+0xc08>)
 80091d4:	2200      	movs	r2, #0
 80091d6:	f7f7 fa0f 	bl	80005f8 <__aeabi_dmul>
 80091da:	4680      	mov	r8, r0
 80091dc:	4689      	mov	r9, r1
 80091de:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80091e2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 80091e6:	931b      	str	r3, [sp, #108]	; 0x6c
 80091e8:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 80091ec:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80091f0:	e79b      	b.n	800912a <_strtod_l+0x9b2>
 80091f2:	f1ba 0f01 	cmp.w	sl, #1
 80091f6:	d102      	bne.n	80091fe <_strtod_l+0xa86>
 80091f8:	2f00      	cmp	r7, #0
 80091fa:	f43f ad7e 	beq.w	8008cfa <_strtod_l+0x582>
 80091fe:	4b61      	ldr	r3, [pc, #388]	; (8009384 <_strtod_l+0xc0c>)
 8009200:	2200      	movs	r2, #0
 8009202:	e78c      	b.n	800911e <_strtod_l+0x9a6>
 8009204:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8009380 <_strtod_l+0xc08>
 8009208:	f04f 0800 	mov.w	r8, #0
 800920c:	e7e7      	b.n	80091de <_strtod_l+0xa66>
 800920e:	4b5c      	ldr	r3, [pc, #368]	; (8009380 <_strtod_l+0xc08>)
 8009210:	4640      	mov	r0, r8
 8009212:	4649      	mov	r1, r9
 8009214:	2200      	movs	r2, #0
 8009216:	f7f7 f9ef 	bl	80005f8 <__aeabi_dmul>
 800921a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800921c:	4680      	mov	r8, r0
 800921e:	4689      	mov	r9, r1
 8009220:	b933      	cbnz	r3, 8009230 <_strtod_l+0xab8>
 8009222:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009226:	9012      	str	r0, [sp, #72]	; 0x48
 8009228:	9313      	str	r3, [sp, #76]	; 0x4c
 800922a:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800922e:	e7dd      	b.n	80091ec <_strtod_l+0xa74>
 8009230:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 8009234:	e7f9      	b.n	800922a <_strtod_l+0xab2>
 8009236:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800923a:	9b04      	ldr	r3, [sp, #16]
 800923c:	2b00      	cmp	r3, #0
 800923e:	d1a8      	bne.n	8009192 <_strtod_l+0xa1a>
 8009240:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009244:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009246:	0d1b      	lsrs	r3, r3, #20
 8009248:	051b      	lsls	r3, r3, #20
 800924a:	429a      	cmp	r2, r3
 800924c:	d1a1      	bne.n	8009192 <_strtod_l+0xa1a>
 800924e:	4640      	mov	r0, r8
 8009250:	4649      	mov	r1, r9
 8009252:	f7f7 fd09 	bl	8000c68 <__aeabi_d2lz>
 8009256:	f7f7 f9a1 	bl	800059c <__aeabi_l2d>
 800925a:	4602      	mov	r2, r0
 800925c:	460b      	mov	r3, r1
 800925e:	4640      	mov	r0, r8
 8009260:	4649      	mov	r1, r9
 8009262:	f7f7 f811 	bl	8000288 <__aeabi_dsub>
 8009266:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009268:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800926c:	ea43 030a 	orr.w	r3, r3, sl
 8009270:	4313      	orrs	r3, r2
 8009272:	4680      	mov	r8, r0
 8009274:	4689      	mov	r9, r1
 8009276:	d053      	beq.n	8009320 <_strtod_l+0xba8>
 8009278:	a335      	add	r3, pc, #212	; (adr r3, 8009350 <_strtod_l+0xbd8>)
 800927a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800927e:	f7f7 fc2d 	bl	8000adc <__aeabi_dcmplt>
 8009282:	2800      	cmp	r0, #0
 8009284:	f47f acce 	bne.w	8008c24 <_strtod_l+0x4ac>
 8009288:	a333      	add	r3, pc, #204	; (adr r3, 8009358 <_strtod_l+0xbe0>)
 800928a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800928e:	4640      	mov	r0, r8
 8009290:	4649      	mov	r1, r9
 8009292:	f7f7 fc41 	bl	8000b18 <__aeabi_dcmpgt>
 8009296:	2800      	cmp	r0, #0
 8009298:	f43f af7b 	beq.w	8009192 <_strtod_l+0xa1a>
 800929c:	e4c2      	b.n	8008c24 <_strtod_l+0x4ac>
 800929e:	9b04      	ldr	r3, [sp, #16]
 80092a0:	b333      	cbz	r3, 80092f0 <_strtod_l+0xb78>
 80092a2:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092a4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092a8:	d822      	bhi.n	80092f0 <_strtod_l+0xb78>
 80092aa:	a32d      	add	r3, pc, #180	; (adr r3, 8009360 <_strtod_l+0xbe8>)
 80092ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b0:	4640      	mov	r0, r8
 80092b2:	4649      	mov	r1, r9
 80092b4:	f7f7 fc1c 	bl	8000af0 <__aeabi_dcmple>
 80092b8:	b1a0      	cbz	r0, 80092e4 <_strtod_l+0xb6c>
 80092ba:	4649      	mov	r1, r9
 80092bc:	4640      	mov	r0, r8
 80092be:	f7f7 fc4b 	bl	8000b58 <__aeabi_d2uiz>
 80092c2:	2801      	cmp	r0, #1
 80092c4:	bf38      	it	cc
 80092c6:	2001      	movcc	r0, #1
 80092c8:	f7f7 f91c 	bl	8000504 <__aeabi_ui2d>
 80092cc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80092ce:	4680      	mov	r8, r0
 80092d0:	4689      	mov	r9, r1
 80092d2:	bb13      	cbnz	r3, 800931a <_strtod_l+0xba2>
 80092d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092d8:	9014      	str	r0, [sp, #80]	; 0x50
 80092da:	9315      	str	r3, [sp, #84]	; 0x54
 80092dc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 80092e0:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 80092e4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80092e6:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80092e8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80092ec:	1a9b      	subs	r3, r3, r2
 80092ee:	930d      	str	r3, [sp, #52]	; 0x34
 80092f0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80092f4:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 80092f8:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80092fc:	f001 fae0 	bl	800a8c0 <__ulp>
 8009300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009304:	ec53 2b10 	vmov	r2, r3, d0
 8009308:	f7f7 f976 	bl	80005f8 <__aeabi_dmul>
 800930c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009310:	f7f6 ffbc 	bl	800028c <__adddf3>
 8009314:	4682      	mov	sl, r0
 8009316:	468b      	mov	fp, r1
 8009318:	e78f      	b.n	800923a <_strtod_l+0xac2>
 800931a:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 800931e:	e7dd      	b.n	80092dc <_strtod_l+0xb64>
 8009320:	a311      	add	r3, pc, #68	; (adr r3, 8009368 <_strtod_l+0xbf0>)
 8009322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009326:	f7f7 fbd9 	bl	8000adc <__aeabi_dcmplt>
 800932a:	e7b4      	b.n	8009296 <_strtod_l+0xb1e>
 800932c:	2300      	movs	r3, #0
 800932e:	930e      	str	r3, [sp, #56]	; 0x38
 8009330:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8009332:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8009334:	6013      	str	r3, [r2, #0]
 8009336:	f7ff ba65 	b.w	8008804 <_strtod_l+0x8c>
 800933a:	2b65      	cmp	r3, #101	; 0x65
 800933c:	f43f ab5d 	beq.w	80089fa <_strtod_l+0x282>
 8009340:	2b45      	cmp	r3, #69	; 0x45
 8009342:	f43f ab5a 	beq.w	80089fa <_strtod_l+0x282>
 8009346:	2201      	movs	r2, #1
 8009348:	f7ff bb92 	b.w	8008a70 <_strtod_l+0x2f8>
 800934c:	f3af 8000 	nop.w
 8009350:	94a03595 	.word	0x94a03595
 8009354:	3fdfffff 	.word	0x3fdfffff
 8009358:	35afe535 	.word	0x35afe535
 800935c:	3fe00000 	.word	0x3fe00000
 8009360:	ffc00000 	.word	0xffc00000
 8009364:	41dfffff 	.word	0x41dfffff
 8009368:	94a03595 	.word	0x94a03595
 800936c:	3fcfffff 	.word	0x3fcfffff
 8009370:	3ff00000 	.word	0x3ff00000
 8009374:	7ff00000 	.word	0x7ff00000
 8009378:	7fe00000 	.word	0x7fe00000
 800937c:	7c9fffff 	.word	0x7c9fffff
 8009380:	3fe00000 	.word	0x3fe00000
 8009384:	bff00000 	.word	0xbff00000
 8009388:	7fefffff 	.word	0x7fefffff

0800938c <_strtod_r>:
 800938c:	4b01      	ldr	r3, [pc, #4]	; (8009394 <_strtod_r+0x8>)
 800938e:	f7ff b9f3 	b.w	8008778 <_strtod_l>
 8009392:	bf00      	nop
 8009394:	20000260 	.word	0x20000260

08009398 <_strtol_l.isra.0>:
 8009398:	2b01      	cmp	r3, #1
 800939a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800939e:	d001      	beq.n	80093a4 <_strtol_l.isra.0+0xc>
 80093a0:	2b24      	cmp	r3, #36	; 0x24
 80093a2:	d906      	bls.n	80093b2 <_strtol_l.isra.0+0x1a>
 80093a4:	f7fe fe7c 	bl	80080a0 <__errno>
 80093a8:	2316      	movs	r3, #22
 80093aa:	6003      	str	r3, [r0, #0]
 80093ac:	2000      	movs	r0, #0
 80093ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b2:	4f3a      	ldr	r7, [pc, #232]	; (800949c <_strtol_l.isra.0+0x104>)
 80093b4:	468e      	mov	lr, r1
 80093b6:	4676      	mov	r6, lr
 80093b8:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80093bc:	5de5      	ldrb	r5, [r4, r7]
 80093be:	f015 0508 	ands.w	r5, r5, #8
 80093c2:	d1f8      	bne.n	80093b6 <_strtol_l.isra.0+0x1e>
 80093c4:	2c2d      	cmp	r4, #45	; 0x2d
 80093c6:	d134      	bne.n	8009432 <_strtol_l.isra.0+0x9a>
 80093c8:	f89e 4000 	ldrb.w	r4, [lr]
 80093cc:	f04f 0801 	mov.w	r8, #1
 80093d0:	f106 0e02 	add.w	lr, r6, #2
 80093d4:	2b00      	cmp	r3, #0
 80093d6:	d05c      	beq.n	8009492 <_strtol_l.isra.0+0xfa>
 80093d8:	2b10      	cmp	r3, #16
 80093da:	d10c      	bne.n	80093f6 <_strtol_l.isra.0+0x5e>
 80093dc:	2c30      	cmp	r4, #48	; 0x30
 80093de:	d10a      	bne.n	80093f6 <_strtol_l.isra.0+0x5e>
 80093e0:	f89e 4000 	ldrb.w	r4, [lr]
 80093e4:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80093e8:	2c58      	cmp	r4, #88	; 0x58
 80093ea:	d14d      	bne.n	8009488 <_strtol_l.isra.0+0xf0>
 80093ec:	f89e 4001 	ldrb.w	r4, [lr, #1]
 80093f0:	2310      	movs	r3, #16
 80093f2:	f10e 0e02 	add.w	lr, lr, #2
 80093f6:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 80093fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80093fe:	2600      	movs	r6, #0
 8009400:	fbbc f9f3 	udiv	r9, ip, r3
 8009404:	4635      	mov	r5, r6
 8009406:	fb03 ca19 	mls	sl, r3, r9, ip
 800940a:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 800940e:	2f09      	cmp	r7, #9
 8009410:	d818      	bhi.n	8009444 <_strtol_l.isra.0+0xac>
 8009412:	463c      	mov	r4, r7
 8009414:	42a3      	cmp	r3, r4
 8009416:	dd24      	ble.n	8009462 <_strtol_l.isra.0+0xca>
 8009418:	2e00      	cmp	r6, #0
 800941a:	db1f      	blt.n	800945c <_strtol_l.isra.0+0xc4>
 800941c:	45a9      	cmp	r9, r5
 800941e:	d31d      	bcc.n	800945c <_strtol_l.isra.0+0xc4>
 8009420:	d101      	bne.n	8009426 <_strtol_l.isra.0+0x8e>
 8009422:	45a2      	cmp	sl, r4
 8009424:	db1a      	blt.n	800945c <_strtol_l.isra.0+0xc4>
 8009426:	fb05 4503 	mla	r5, r5, r3, r4
 800942a:	2601      	movs	r6, #1
 800942c:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009430:	e7eb      	b.n	800940a <_strtol_l.isra.0+0x72>
 8009432:	2c2b      	cmp	r4, #43	; 0x2b
 8009434:	bf08      	it	eq
 8009436:	f89e 4000 	ldrbeq.w	r4, [lr]
 800943a:	46a8      	mov	r8, r5
 800943c:	bf08      	it	eq
 800943e:	f106 0e02 	addeq.w	lr, r6, #2
 8009442:	e7c7      	b.n	80093d4 <_strtol_l.isra.0+0x3c>
 8009444:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009448:	2f19      	cmp	r7, #25
 800944a:	d801      	bhi.n	8009450 <_strtol_l.isra.0+0xb8>
 800944c:	3c37      	subs	r4, #55	; 0x37
 800944e:	e7e1      	b.n	8009414 <_strtol_l.isra.0+0x7c>
 8009450:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8009454:	2f19      	cmp	r7, #25
 8009456:	d804      	bhi.n	8009462 <_strtol_l.isra.0+0xca>
 8009458:	3c57      	subs	r4, #87	; 0x57
 800945a:	e7db      	b.n	8009414 <_strtol_l.isra.0+0x7c>
 800945c:	f04f 36ff 	mov.w	r6, #4294967295
 8009460:	e7e4      	b.n	800942c <_strtol_l.isra.0+0x94>
 8009462:	2e00      	cmp	r6, #0
 8009464:	da05      	bge.n	8009472 <_strtol_l.isra.0+0xda>
 8009466:	2322      	movs	r3, #34	; 0x22
 8009468:	6003      	str	r3, [r0, #0]
 800946a:	4665      	mov	r5, ip
 800946c:	b942      	cbnz	r2, 8009480 <_strtol_l.isra.0+0xe8>
 800946e:	4628      	mov	r0, r5
 8009470:	e79d      	b.n	80093ae <_strtol_l.isra.0+0x16>
 8009472:	f1b8 0f00 	cmp.w	r8, #0
 8009476:	d000      	beq.n	800947a <_strtol_l.isra.0+0xe2>
 8009478:	426d      	negs	r5, r5
 800947a:	2a00      	cmp	r2, #0
 800947c:	d0f7      	beq.n	800946e <_strtol_l.isra.0+0xd6>
 800947e:	b10e      	cbz	r6, 8009484 <_strtol_l.isra.0+0xec>
 8009480:	f10e 31ff 	add.w	r1, lr, #4294967295
 8009484:	6011      	str	r1, [r2, #0]
 8009486:	e7f2      	b.n	800946e <_strtol_l.isra.0+0xd6>
 8009488:	2430      	movs	r4, #48	; 0x30
 800948a:	2b00      	cmp	r3, #0
 800948c:	d1b3      	bne.n	80093f6 <_strtol_l.isra.0+0x5e>
 800948e:	2308      	movs	r3, #8
 8009490:	e7b1      	b.n	80093f6 <_strtol_l.isra.0+0x5e>
 8009492:	2c30      	cmp	r4, #48	; 0x30
 8009494:	d0a4      	beq.n	80093e0 <_strtol_l.isra.0+0x48>
 8009496:	230a      	movs	r3, #10
 8009498:	e7ad      	b.n	80093f6 <_strtol_l.isra.0+0x5e>
 800949a:	bf00      	nop
 800949c:	0800cb41 	.word	0x0800cb41

080094a0 <_strtol_r>:
 80094a0:	f7ff bf7a 	b.w	8009398 <_strtol_l.isra.0>

080094a4 <__swbuf_r>:
 80094a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094a6:	460e      	mov	r6, r1
 80094a8:	4614      	mov	r4, r2
 80094aa:	4605      	mov	r5, r0
 80094ac:	b118      	cbz	r0, 80094b6 <__swbuf_r+0x12>
 80094ae:	6983      	ldr	r3, [r0, #24]
 80094b0:	b90b      	cbnz	r3, 80094b6 <__swbuf_r+0x12>
 80094b2:	f000 f9f3 	bl	800989c <__sinit>
 80094b6:	4b21      	ldr	r3, [pc, #132]	; (800953c <__swbuf_r+0x98>)
 80094b8:	429c      	cmp	r4, r3
 80094ba:	d12b      	bne.n	8009514 <__swbuf_r+0x70>
 80094bc:	686c      	ldr	r4, [r5, #4]
 80094be:	69a3      	ldr	r3, [r4, #24]
 80094c0:	60a3      	str	r3, [r4, #8]
 80094c2:	89a3      	ldrh	r3, [r4, #12]
 80094c4:	071a      	lsls	r2, r3, #28
 80094c6:	d52f      	bpl.n	8009528 <__swbuf_r+0x84>
 80094c8:	6923      	ldr	r3, [r4, #16]
 80094ca:	b36b      	cbz	r3, 8009528 <__swbuf_r+0x84>
 80094cc:	6923      	ldr	r3, [r4, #16]
 80094ce:	6820      	ldr	r0, [r4, #0]
 80094d0:	1ac0      	subs	r0, r0, r3
 80094d2:	6963      	ldr	r3, [r4, #20]
 80094d4:	b2f6      	uxtb	r6, r6
 80094d6:	4283      	cmp	r3, r0
 80094d8:	4637      	mov	r7, r6
 80094da:	dc04      	bgt.n	80094e6 <__swbuf_r+0x42>
 80094dc:	4621      	mov	r1, r4
 80094de:	4628      	mov	r0, r5
 80094e0:	f000 f948 	bl	8009774 <_fflush_r>
 80094e4:	bb30      	cbnz	r0, 8009534 <__swbuf_r+0x90>
 80094e6:	68a3      	ldr	r3, [r4, #8]
 80094e8:	3b01      	subs	r3, #1
 80094ea:	60a3      	str	r3, [r4, #8]
 80094ec:	6823      	ldr	r3, [r4, #0]
 80094ee:	1c5a      	adds	r2, r3, #1
 80094f0:	6022      	str	r2, [r4, #0]
 80094f2:	701e      	strb	r6, [r3, #0]
 80094f4:	6963      	ldr	r3, [r4, #20]
 80094f6:	3001      	adds	r0, #1
 80094f8:	4283      	cmp	r3, r0
 80094fa:	d004      	beq.n	8009506 <__swbuf_r+0x62>
 80094fc:	89a3      	ldrh	r3, [r4, #12]
 80094fe:	07db      	lsls	r3, r3, #31
 8009500:	d506      	bpl.n	8009510 <__swbuf_r+0x6c>
 8009502:	2e0a      	cmp	r6, #10
 8009504:	d104      	bne.n	8009510 <__swbuf_r+0x6c>
 8009506:	4621      	mov	r1, r4
 8009508:	4628      	mov	r0, r5
 800950a:	f000 f933 	bl	8009774 <_fflush_r>
 800950e:	b988      	cbnz	r0, 8009534 <__swbuf_r+0x90>
 8009510:	4638      	mov	r0, r7
 8009512:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009514:	4b0a      	ldr	r3, [pc, #40]	; (8009540 <__swbuf_r+0x9c>)
 8009516:	429c      	cmp	r4, r3
 8009518:	d101      	bne.n	800951e <__swbuf_r+0x7a>
 800951a:	68ac      	ldr	r4, [r5, #8]
 800951c:	e7cf      	b.n	80094be <__swbuf_r+0x1a>
 800951e:	4b09      	ldr	r3, [pc, #36]	; (8009544 <__swbuf_r+0xa0>)
 8009520:	429c      	cmp	r4, r3
 8009522:	bf08      	it	eq
 8009524:	68ec      	ldreq	r4, [r5, #12]
 8009526:	e7ca      	b.n	80094be <__swbuf_r+0x1a>
 8009528:	4621      	mov	r1, r4
 800952a:	4628      	mov	r0, r5
 800952c:	f000 f81e 	bl	800956c <__swsetup_r>
 8009530:	2800      	cmp	r0, #0
 8009532:	d0cb      	beq.n	80094cc <__swbuf_r+0x28>
 8009534:	f04f 37ff 	mov.w	r7, #4294967295
 8009538:	e7ea      	b.n	8009510 <__swbuf_r+0x6c>
 800953a:	bf00      	nop
 800953c:	0800cc64 	.word	0x0800cc64
 8009540:	0800cc84 	.word	0x0800cc84
 8009544:	0800cc44 	.word	0x0800cc44

08009548 <_write_r>:
 8009548:	b538      	push	{r3, r4, r5, lr}
 800954a:	4d07      	ldr	r5, [pc, #28]	; (8009568 <_write_r+0x20>)
 800954c:	4604      	mov	r4, r0
 800954e:	4608      	mov	r0, r1
 8009550:	4611      	mov	r1, r2
 8009552:	2200      	movs	r2, #0
 8009554:	602a      	str	r2, [r5, #0]
 8009556:	461a      	mov	r2, r3
 8009558:	f7f7 ff54 	bl	8001404 <_write>
 800955c:	1c43      	adds	r3, r0, #1
 800955e:	d102      	bne.n	8009566 <_write_r+0x1e>
 8009560:	682b      	ldr	r3, [r5, #0]
 8009562:	b103      	cbz	r3, 8009566 <_write_r+0x1e>
 8009564:	6023      	str	r3, [r4, #0]
 8009566:	bd38      	pop	{r3, r4, r5, pc}
 8009568:	20000f68 	.word	0x20000f68

0800956c <__swsetup_r>:
 800956c:	4b32      	ldr	r3, [pc, #200]	; (8009638 <__swsetup_r+0xcc>)
 800956e:	b570      	push	{r4, r5, r6, lr}
 8009570:	681d      	ldr	r5, [r3, #0]
 8009572:	4606      	mov	r6, r0
 8009574:	460c      	mov	r4, r1
 8009576:	b125      	cbz	r5, 8009582 <__swsetup_r+0x16>
 8009578:	69ab      	ldr	r3, [r5, #24]
 800957a:	b913      	cbnz	r3, 8009582 <__swsetup_r+0x16>
 800957c:	4628      	mov	r0, r5
 800957e:	f000 f98d 	bl	800989c <__sinit>
 8009582:	4b2e      	ldr	r3, [pc, #184]	; (800963c <__swsetup_r+0xd0>)
 8009584:	429c      	cmp	r4, r3
 8009586:	d10f      	bne.n	80095a8 <__swsetup_r+0x3c>
 8009588:	686c      	ldr	r4, [r5, #4]
 800958a:	89a3      	ldrh	r3, [r4, #12]
 800958c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009590:	0719      	lsls	r1, r3, #28
 8009592:	d42c      	bmi.n	80095ee <__swsetup_r+0x82>
 8009594:	06dd      	lsls	r5, r3, #27
 8009596:	d411      	bmi.n	80095bc <__swsetup_r+0x50>
 8009598:	2309      	movs	r3, #9
 800959a:	6033      	str	r3, [r6, #0]
 800959c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095a0:	81a3      	strh	r3, [r4, #12]
 80095a2:	f04f 30ff 	mov.w	r0, #4294967295
 80095a6:	e03e      	b.n	8009626 <__swsetup_r+0xba>
 80095a8:	4b25      	ldr	r3, [pc, #148]	; (8009640 <__swsetup_r+0xd4>)
 80095aa:	429c      	cmp	r4, r3
 80095ac:	d101      	bne.n	80095b2 <__swsetup_r+0x46>
 80095ae:	68ac      	ldr	r4, [r5, #8]
 80095b0:	e7eb      	b.n	800958a <__swsetup_r+0x1e>
 80095b2:	4b24      	ldr	r3, [pc, #144]	; (8009644 <__swsetup_r+0xd8>)
 80095b4:	429c      	cmp	r4, r3
 80095b6:	bf08      	it	eq
 80095b8:	68ec      	ldreq	r4, [r5, #12]
 80095ba:	e7e6      	b.n	800958a <__swsetup_r+0x1e>
 80095bc:	0758      	lsls	r0, r3, #29
 80095be:	d512      	bpl.n	80095e6 <__swsetup_r+0x7a>
 80095c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095c2:	b141      	cbz	r1, 80095d6 <__swsetup_r+0x6a>
 80095c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80095c8:	4299      	cmp	r1, r3
 80095ca:	d002      	beq.n	80095d2 <__swsetup_r+0x66>
 80095cc:	4630      	mov	r0, r6
 80095ce:	f001 fad5 	bl	800ab7c <_free_r>
 80095d2:	2300      	movs	r3, #0
 80095d4:	6363      	str	r3, [r4, #52]	; 0x34
 80095d6:	89a3      	ldrh	r3, [r4, #12]
 80095d8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80095dc:	81a3      	strh	r3, [r4, #12]
 80095de:	2300      	movs	r3, #0
 80095e0:	6063      	str	r3, [r4, #4]
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	89a3      	ldrh	r3, [r4, #12]
 80095e8:	f043 0308 	orr.w	r3, r3, #8
 80095ec:	81a3      	strh	r3, [r4, #12]
 80095ee:	6923      	ldr	r3, [r4, #16]
 80095f0:	b94b      	cbnz	r3, 8009606 <__swsetup_r+0x9a>
 80095f2:	89a3      	ldrh	r3, [r4, #12]
 80095f4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80095f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095fc:	d003      	beq.n	8009606 <__swsetup_r+0x9a>
 80095fe:	4621      	mov	r1, r4
 8009600:	4630      	mov	r0, r6
 8009602:	f000 fd91 	bl	800a128 <__smakebuf_r>
 8009606:	89a0      	ldrh	r0, [r4, #12]
 8009608:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800960c:	f010 0301 	ands.w	r3, r0, #1
 8009610:	d00a      	beq.n	8009628 <__swsetup_r+0xbc>
 8009612:	2300      	movs	r3, #0
 8009614:	60a3      	str	r3, [r4, #8]
 8009616:	6963      	ldr	r3, [r4, #20]
 8009618:	425b      	negs	r3, r3
 800961a:	61a3      	str	r3, [r4, #24]
 800961c:	6923      	ldr	r3, [r4, #16]
 800961e:	b943      	cbnz	r3, 8009632 <__swsetup_r+0xc6>
 8009620:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009624:	d1ba      	bne.n	800959c <__swsetup_r+0x30>
 8009626:	bd70      	pop	{r4, r5, r6, pc}
 8009628:	0781      	lsls	r1, r0, #30
 800962a:	bf58      	it	pl
 800962c:	6963      	ldrpl	r3, [r4, #20]
 800962e:	60a3      	str	r3, [r4, #8]
 8009630:	e7f4      	b.n	800961c <__swsetup_r+0xb0>
 8009632:	2000      	movs	r0, #0
 8009634:	e7f7      	b.n	8009626 <__swsetup_r+0xba>
 8009636:	bf00      	nop
 8009638:	200001f8 	.word	0x200001f8
 800963c:	0800cc64 	.word	0x0800cc64
 8009640:	0800cc84 	.word	0x0800cc84
 8009644:	0800cc44 	.word	0x0800cc44

08009648 <_close_r>:
 8009648:	b538      	push	{r3, r4, r5, lr}
 800964a:	4d06      	ldr	r5, [pc, #24]	; (8009664 <_close_r+0x1c>)
 800964c:	2300      	movs	r3, #0
 800964e:	4604      	mov	r4, r0
 8009650:	4608      	mov	r0, r1
 8009652:	602b      	str	r3, [r5, #0]
 8009654:	f7fa faf9 	bl	8003c4a <_close>
 8009658:	1c43      	adds	r3, r0, #1
 800965a:	d102      	bne.n	8009662 <_close_r+0x1a>
 800965c:	682b      	ldr	r3, [r5, #0]
 800965e:	b103      	cbz	r3, 8009662 <_close_r+0x1a>
 8009660:	6023      	str	r3, [r4, #0]
 8009662:	bd38      	pop	{r3, r4, r5, pc}
 8009664:	20000f68 	.word	0x20000f68

08009668 <__sflush_r>:
 8009668:	898a      	ldrh	r2, [r1, #12]
 800966a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800966e:	4605      	mov	r5, r0
 8009670:	0710      	lsls	r0, r2, #28
 8009672:	460c      	mov	r4, r1
 8009674:	d458      	bmi.n	8009728 <__sflush_r+0xc0>
 8009676:	684b      	ldr	r3, [r1, #4]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dc05      	bgt.n	8009688 <__sflush_r+0x20>
 800967c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800967e:	2b00      	cmp	r3, #0
 8009680:	dc02      	bgt.n	8009688 <__sflush_r+0x20>
 8009682:	2000      	movs	r0, #0
 8009684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009688:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800968a:	2e00      	cmp	r6, #0
 800968c:	d0f9      	beq.n	8009682 <__sflush_r+0x1a>
 800968e:	2300      	movs	r3, #0
 8009690:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8009694:	682f      	ldr	r7, [r5, #0]
 8009696:	602b      	str	r3, [r5, #0]
 8009698:	d032      	beq.n	8009700 <__sflush_r+0x98>
 800969a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800969c:	89a3      	ldrh	r3, [r4, #12]
 800969e:	075a      	lsls	r2, r3, #29
 80096a0:	d505      	bpl.n	80096ae <__sflush_r+0x46>
 80096a2:	6863      	ldr	r3, [r4, #4]
 80096a4:	1ac0      	subs	r0, r0, r3
 80096a6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096a8:	b10b      	cbz	r3, 80096ae <__sflush_r+0x46>
 80096aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096ac:	1ac0      	subs	r0, r0, r3
 80096ae:	2300      	movs	r3, #0
 80096b0:	4602      	mov	r2, r0
 80096b2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096b4:	6a21      	ldr	r1, [r4, #32]
 80096b6:	4628      	mov	r0, r5
 80096b8:	47b0      	blx	r6
 80096ba:	1c43      	adds	r3, r0, #1
 80096bc:	89a3      	ldrh	r3, [r4, #12]
 80096be:	d106      	bne.n	80096ce <__sflush_r+0x66>
 80096c0:	6829      	ldr	r1, [r5, #0]
 80096c2:	291d      	cmp	r1, #29
 80096c4:	d82c      	bhi.n	8009720 <__sflush_r+0xb8>
 80096c6:	4a2a      	ldr	r2, [pc, #168]	; (8009770 <__sflush_r+0x108>)
 80096c8:	40ca      	lsrs	r2, r1
 80096ca:	07d6      	lsls	r6, r2, #31
 80096cc:	d528      	bpl.n	8009720 <__sflush_r+0xb8>
 80096ce:	2200      	movs	r2, #0
 80096d0:	6062      	str	r2, [r4, #4]
 80096d2:	04d9      	lsls	r1, r3, #19
 80096d4:	6922      	ldr	r2, [r4, #16]
 80096d6:	6022      	str	r2, [r4, #0]
 80096d8:	d504      	bpl.n	80096e4 <__sflush_r+0x7c>
 80096da:	1c42      	adds	r2, r0, #1
 80096dc:	d101      	bne.n	80096e2 <__sflush_r+0x7a>
 80096de:	682b      	ldr	r3, [r5, #0]
 80096e0:	b903      	cbnz	r3, 80096e4 <__sflush_r+0x7c>
 80096e2:	6560      	str	r0, [r4, #84]	; 0x54
 80096e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80096e6:	602f      	str	r7, [r5, #0]
 80096e8:	2900      	cmp	r1, #0
 80096ea:	d0ca      	beq.n	8009682 <__sflush_r+0x1a>
 80096ec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80096f0:	4299      	cmp	r1, r3
 80096f2:	d002      	beq.n	80096fa <__sflush_r+0x92>
 80096f4:	4628      	mov	r0, r5
 80096f6:	f001 fa41 	bl	800ab7c <_free_r>
 80096fa:	2000      	movs	r0, #0
 80096fc:	6360      	str	r0, [r4, #52]	; 0x34
 80096fe:	e7c1      	b.n	8009684 <__sflush_r+0x1c>
 8009700:	6a21      	ldr	r1, [r4, #32]
 8009702:	2301      	movs	r3, #1
 8009704:	4628      	mov	r0, r5
 8009706:	47b0      	blx	r6
 8009708:	1c41      	adds	r1, r0, #1
 800970a:	d1c7      	bne.n	800969c <__sflush_r+0x34>
 800970c:	682b      	ldr	r3, [r5, #0]
 800970e:	2b00      	cmp	r3, #0
 8009710:	d0c4      	beq.n	800969c <__sflush_r+0x34>
 8009712:	2b1d      	cmp	r3, #29
 8009714:	d001      	beq.n	800971a <__sflush_r+0xb2>
 8009716:	2b16      	cmp	r3, #22
 8009718:	d101      	bne.n	800971e <__sflush_r+0xb6>
 800971a:	602f      	str	r7, [r5, #0]
 800971c:	e7b1      	b.n	8009682 <__sflush_r+0x1a>
 800971e:	89a3      	ldrh	r3, [r4, #12]
 8009720:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009724:	81a3      	strh	r3, [r4, #12]
 8009726:	e7ad      	b.n	8009684 <__sflush_r+0x1c>
 8009728:	690f      	ldr	r7, [r1, #16]
 800972a:	2f00      	cmp	r7, #0
 800972c:	d0a9      	beq.n	8009682 <__sflush_r+0x1a>
 800972e:	0793      	lsls	r3, r2, #30
 8009730:	680e      	ldr	r6, [r1, #0]
 8009732:	bf08      	it	eq
 8009734:	694b      	ldreq	r3, [r1, #20]
 8009736:	600f      	str	r7, [r1, #0]
 8009738:	bf18      	it	ne
 800973a:	2300      	movne	r3, #0
 800973c:	eba6 0807 	sub.w	r8, r6, r7
 8009740:	608b      	str	r3, [r1, #8]
 8009742:	f1b8 0f00 	cmp.w	r8, #0
 8009746:	dd9c      	ble.n	8009682 <__sflush_r+0x1a>
 8009748:	6a21      	ldr	r1, [r4, #32]
 800974a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800974c:	4643      	mov	r3, r8
 800974e:	463a      	mov	r2, r7
 8009750:	4628      	mov	r0, r5
 8009752:	47b0      	blx	r6
 8009754:	2800      	cmp	r0, #0
 8009756:	dc06      	bgt.n	8009766 <__sflush_r+0xfe>
 8009758:	89a3      	ldrh	r3, [r4, #12]
 800975a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975e:	81a3      	strh	r3, [r4, #12]
 8009760:	f04f 30ff 	mov.w	r0, #4294967295
 8009764:	e78e      	b.n	8009684 <__sflush_r+0x1c>
 8009766:	4407      	add	r7, r0
 8009768:	eba8 0800 	sub.w	r8, r8, r0
 800976c:	e7e9      	b.n	8009742 <__sflush_r+0xda>
 800976e:	bf00      	nop
 8009770:	20400001 	.word	0x20400001

08009774 <_fflush_r>:
 8009774:	b538      	push	{r3, r4, r5, lr}
 8009776:	690b      	ldr	r3, [r1, #16]
 8009778:	4605      	mov	r5, r0
 800977a:	460c      	mov	r4, r1
 800977c:	b913      	cbnz	r3, 8009784 <_fflush_r+0x10>
 800977e:	2500      	movs	r5, #0
 8009780:	4628      	mov	r0, r5
 8009782:	bd38      	pop	{r3, r4, r5, pc}
 8009784:	b118      	cbz	r0, 800978e <_fflush_r+0x1a>
 8009786:	6983      	ldr	r3, [r0, #24]
 8009788:	b90b      	cbnz	r3, 800978e <_fflush_r+0x1a>
 800978a:	f000 f887 	bl	800989c <__sinit>
 800978e:	4b14      	ldr	r3, [pc, #80]	; (80097e0 <_fflush_r+0x6c>)
 8009790:	429c      	cmp	r4, r3
 8009792:	d11b      	bne.n	80097cc <_fflush_r+0x58>
 8009794:	686c      	ldr	r4, [r5, #4]
 8009796:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800979a:	2b00      	cmp	r3, #0
 800979c:	d0ef      	beq.n	800977e <_fflush_r+0xa>
 800979e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097a0:	07d0      	lsls	r0, r2, #31
 80097a2:	d404      	bmi.n	80097ae <_fflush_r+0x3a>
 80097a4:	0599      	lsls	r1, r3, #22
 80097a6:	d402      	bmi.n	80097ae <_fflush_r+0x3a>
 80097a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097aa:	f000 fc84 	bl	800a0b6 <__retarget_lock_acquire_recursive>
 80097ae:	4628      	mov	r0, r5
 80097b0:	4621      	mov	r1, r4
 80097b2:	f7ff ff59 	bl	8009668 <__sflush_r>
 80097b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097b8:	07da      	lsls	r2, r3, #31
 80097ba:	4605      	mov	r5, r0
 80097bc:	d4e0      	bmi.n	8009780 <_fflush_r+0xc>
 80097be:	89a3      	ldrh	r3, [r4, #12]
 80097c0:	059b      	lsls	r3, r3, #22
 80097c2:	d4dd      	bmi.n	8009780 <_fflush_r+0xc>
 80097c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097c6:	f000 fc77 	bl	800a0b8 <__retarget_lock_release_recursive>
 80097ca:	e7d9      	b.n	8009780 <_fflush_r+0xc>
 80097cc:	4b05      	ldr	r3, [pc, #20]	; (80097e4 <_fflush_r+0x70>)
 80097ce:	429c      	cmp	r4, r3
 80097d0:	d101      	bne.n	80097d6 <_fflush_r+0x62>
 80097d2:	68ac      	ldr	r4, [r5, #8]
 80097d4:	e7df      	b.n	8009796 <_fflush_r+0x22>
 80097d6:	4b04      	ldr	r3, [pc, #16]	; (80097e8 <_fflush_r+0x74>)
 80097d8:	429c      	cmp	r4, r3
 80097da:	bf08      	it	eq
 80097dc:	68ec      	ldreq	r4, [r5, #12]
 80097de:	e7da      	b.n	8009796 <_fflush_r+0x22>
 80097e0:	0800cc64 	.word	0x0800cc64
 80097e4:	0800cc84 	.word	0x0800cc84
 80097e8:	0800cc44 	.word	0x0800cc44

080097ec <std>:
 80097ec:	2300      	movs	r3, #0
 80097ee:	b510      	push	{r4, lr}
 80097f0:	4604      	mov	r4, r0
 80097f2:	e9c0 3300 	strd	r3, r3, [r0]
 80097f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80097fa:	6083      	str	r3, [r0, #8]
 80097fc:	8181      	strh	r1, [r0, #12]
 80097fe:	6643      	str	r3, [r0, #100]	; 0x64
 8009800:	81c2      	strh	r2, [r0, #14]
 8009802:	6183      	str	r3, [r0, #24]
 8009804:	4619      	mov	r1, r3
 8009806:	2208      	movs	r2, #8
 8009808:	305c      	adds	r0, #92	; 0x5c
 800980a:	f7fe fc73 	bl	80080f4 <memset>
 800980e:	4b05      	ldr	r3, [pc, #20]	; (8009824 <std+0x38>)
 8009810:	6263      	str	r3, [r4, #36]	; 0x24
 8009812:	4b05      	ldr	r3, [pc, #20]	; (8009828 <std+0x3c>)
 8009814:	62a3      	str	r3, [r4, #40]	; 0x28
 8009816:	4b05      	ldr	r3, [pc, #20]	; (800982c <std+0x40>)
 8009818:	62e3      	str	r3, [r4, #44]	; 0x2c
 800981a:	4b05      	ldr	r3, [pc, #20]	; (8009830 <std+0x44>)
 800981c:	6224      	str	r4, [r4, #32]
 800981e:	6323      	str	r3, [r4, #48]	; 0x30
 8009820:	bd10      	pop	{r4, pc}
 8009822:	bf00      	nop
 8009824:	080086b5 	.word	0x080086b5
 8009828:	080086db 	.word	0x080086db
 800982c:	08008713 	.word	0x08008713
 8009830:	08008737 	.word	0x08008737

08009834 <_cleanup_r>:
 8009834:	4901      	ldr	r1, [pc, #4]	; (800983c <_cleanup_r+0x8>)
 8009836:	f000 b8af 	b.w	8009998 <_fwalk_reent>
 800983a:	bf00      	nop
 800983c:	08009775 	.word	0x08009775

08009840 <__sfmoreglue>:
 8009840:	b570      	push	{r4, r5, r6, lr}
 8009842:	1e4a      	subs	r2, r1, #1
 8009844:	2568      	movs	r5, #104	; 0x68
 8009846:	4355      	muls	r5, r2
 8009848:	460e      	mov	r6, r1
 800984a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800984e:	f001 f9e5 	bl	800ac1c <_malloc_r>
 8009852:	4604      	mov	r4, r0
 8009854:	b140      	cbz	r0, 8009868 <__sfmoreglue+0x28>
 8009856:	2100      	movs	r1, #0
 8009858:	e9c0 1600 	strd	r1, r6, [r0]
 800985c:	300c      	adds	r0, #12
 800985e:	60a0      	str	r0, [r4, #8]
 8009860:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8009864:	f7fe fc46 	bl	80080f4 <memset>
 8009868:	4620      	mov	r0, r4
 800986a:	bd70      	pop	{r4, r5, r6, pc}

0800986c <__sfp_lock_acquire>:
 800986c:	4801      	ldr	r0, [pc, #4]	; (8009874 <__sfp_lock_acquire+0x8>)
 800986e:	f000 bc22 	b.w	800a0b6 <__retarget_lock_acquire_recursive>
 8009872:	bf00      	nop
 8009874:	20000f64 	.word	0x20000f64

08009878 <__sfp_lock_release>:
 8009878:	4801      	ldr	r0, [pc, #4]	; (8009880 <__sfp_lock_release+0x8>)
 800987a:	f000 bc1d 	b.w	800a0b8 <__retarget_lock_release_recursive>
 800987e:	bf00      	nop
 8009880:	20000f64 	.word	0x20000f64

08009884 <__sinit_lock_acquire>:
 8009884:	4801      	ldr	r0, [pc, #4]	; (800988c <__sinit_lock_acquire+0x8>)
 8009886:	f000 bc16 	b.w	800a0b6 <__retarget_lock_acquire_recursive>
 800988a:	bf00      	nop
 800988c:	20000f5f 	.word	0x20000f5f

08009890 <__sinit_lock_release>:
 8009890:	4801      	ldr	r0, [pc, #4]	; (8009898 <__sinit_lock_release+0x8>)
 8009892:	f000 bc11 	b.w	800a0b8 <__retarget_lock_release_recursive>
 8009896:	bf00      	nop
 8009898:	20000f5f 	.word	0x20000f5f

0800989c <__sinit>:
 800989c:	b510      	push	{r4, lr}
 800989e:	4604      	mov	r4, r0
 80098a0:	f7ff fff0 	bl	8009884 <__sinit_lock_acquire>
 80098a4:	69a3      	ldr	r3, [r4, #24]
 80098a6:	b11b      	cbz	r3, 80098b0 <__sinit+0x14>
 80098a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098ac:	f7ff bff0 	b.w	8009890 <__sinit_lock_release>
 80098b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098b4:	6523      	str	r3, [r4, #80]	; 0x50
 80098b6:	4b13      	ldr	r3, [pc, #76]	; (8009904 <__sinit+0x68>)
 80098b8:	4a13      	ldr	r2, [pc, #76]	; (8009908 <__sinit+0x6c>)
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80098be:	42a3      	cmp	r3, r4
 80098c0:	bf04      	itt	eq
 80098c2:	2301      	moveq	r3, #1
 80098c4:	61a3      	streq	r3, [r4, #24]
 80098c6:	4620      	mov	r0, r4
 80098c8:	f000 f820 	bl	800990c <__sfp>
 80098cc:	6060      	str	r0, [r4, #4]
 80098ce:	4620      	mov	r0, r4
 80098d0:	f000 f81c 	bl	800990c <__sfp>
 80098d4:	60a0      	str	r0, [r4, #8]
 80098d6:	4620      	mov	r0, r4
 80098d8:	f000 f818 	bl	800990c <__sfp>
 80098dc:	2200      	movs	r2, #0
 80098de:	60e0      	str	r0, [r4, #12]
 80098e0:	2104      	movs	r1, #4
 80098e2:	6860      	ldr	r0, [r4, #4]
 80098e4:	f7ff ff82 	bl	80097ec <std>
 80098e8:	68a0      	ldr	r0, [r4, #8]
 80098ea:	2201      	movs	r2, #1
 80098ec:	2109      	movs	r1, #9
 80098ee:	f7ff ff7d 	bl	80097ec <std>
 80098f2:	68e0      	ldr	r0, [r4, #12]
 80098f4:	2202      	movs	r2, #2
 80098f6:	2112      	movs	r1, #18
 80098f8:	f7ff ff78 	bl	80097ec <std>
 80098fc:	2301      	movs	r3, #1
 80098fe:	61a3      	str	r3, [r4, #24]
 8009900:	e7d2      	b.n	80098a8 <__sinit+0xc>
 8009902:	bf00      	nop
 8009904:	0800cad8 	.word	0x0800cad8
 8009908:	08009835 	.word	0x08009835

0800990c <__sfp>:
 800990c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800990e:	4607      	mov	r7, r0
 8009910:	f7ff ffac 	bl	800986c <__sfp_lock_acquire>
 8009914:	4b1e      	ldr	r3, [pc, #120]	; (8009990 <__sfp+0x84>)
 8009916:	681e      	ldr	r6, [r3, #0]
 8009918:	69b3      	ldr	r3, [r6, #24]
 800991a:	b913      	cbnz	r3, 8009922 <__sfp+0x16>
 800991c:	4630      	mov	r0, r6
 800991e:	f7ff ffbd 	bl	800989c <__sinit>
 8009922:	3648      	adds	r6, #72	; 0x48
 8009924:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009928:	3b01      	subs	r3, #1
 800992a:	d503      	bpl.n	8009934 <__sfp+0x28>
 800992c:	6833      	ldr	r3, [r6, #0]
 800992e:	b30b      	cbz	r3, 8009974 <__sfp+0x68>
 8009930:	6836      	ldr	r6, [r6, #0]
 8009932:	e7f7      	b.n	8009924 <__sfp+0x18>
 8009934:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009938:	b9d5      	cbnz	r5, 8009970 <__sfp+0x64>
 800993a:	4b16      	ldr	r3, [pc, #88]	; (8009994 <__sfp+0x88>)
 800993c:	60e3      	str	r3, [r4, #12]
 800993e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009942:	6665      	str	r5, [r4, #100]	; 0x64
 8009944:	f000 fbb6 	bl	800a0b4 <__retarget_lock_init_recursive>
 8009948:	f7ff ff96 	bl	8009878 <__sfp_lock_release>
 800994c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009950:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8009954:	6025      	str	r5, [r4, #0]
 8009956:	61a5      	str	r5, [r4, #24]
 8009958:	2208      	movs	r2, #8
 800995a:	4629      	mov	r1, r5
 800995c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009960:	f7fe fbc8 	bl	80080f4 <memset>
 8009964:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8009968:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800996c:	4620      	mov	r0, r4
 800996e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009970:	3468      	adds	r4, #104	; 0x68
 8009972:	e7d9      	b.n	8009928 <__sfp+0x1c>
 8009974:	2104      	movs	r1, #4
 8009976:	4638      	mov	r0, r7
 8009978:	f7ff ff62 	bl	8009840 <__sfmoreglue>
 800997c:	4604      	mov	r4, r0
 800997e:	6030      	str	r0, [r6, #0]
 8009980:	2800      	cmp	r0, #0
 8009982:	d1d5      	bne.n	8009930 <__sfp+0x24>
 8009984:	f7ff ff78 	bl	8009878 <__sfp_lock_release>
 8009988:	230c      	movs	r3, #12
 800998a:	603b      	str	r3, [r7, #0]
 800998c:	e7ee      	b.n	800996c <__sfp+0x60>
 800998e:	bf00      	nop
 8009990:	0800cad8 	.word	0x0800cad8
 8009994:	ffff0001 	.word	0xffff0001

08009998 <_fwalk_reent>:
 8009998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800999c:	4606      	mov	r6, r0
 800999e:	4688      	mov	r8, r1
 80099a0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099a4:	2700      	movs	r7, #0
 80099a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099aa:	f1b9 0901 	subs.w	r9, r9, #1
 80099ae:	d505      	bpl.n	80099bc <_fwalk_reent+0x24>
 80099b0:	6824      	ldr	r4, [r4, #0]
 80099b2:	2c00      	cmp	r4, #0
 80099b4:	d1f7      	bne.n	80099a6 <_fwalk_reent+0xe>
 80099b6:	4638      	mov	r0, r7
 80099b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099bc:	89ab      	ldrh	r3, [r5, #12]
 80099be:	2b01      	cmp	r3, #1
 80099c0:	d907      	bls.n	80099d2 <_fwalk_reent+0x3a>
 80099c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099c6:	3301      	adds	r3, #1
 80099c8:	d003      	beq.n	80099d2 <_fwalk_reent+0x3a>
 80099ca:	4629      	mov	r1, r5
 80099cc:	4630      	mov	r0, r6
 80099ce:	47c0      	blx	r8
 80099d0:	4307      	orrs	r7, r0
 80099d2:	3568      	adds	r5, #104	; 0x68
 80099d4:	e7e9      	b.n	80099aa <_fwalk_reent+0x12>

080099d6 <rshift>:
 80099d6:	6903      	ldr	r3, [r0, #16]
 80099d8:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 80099dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80099e0:	ea4f 1261 	mov.w	r2, r1, asr #5
 80099e4:	f100 0414 	add.w	r4, r0, #20
 80099e8:	dd45      	ble.n	8009a76 <rshift+0xa0>
 80099ea:	f011 011f 	ands.w	r1, r1, #31
 80099ee:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 80099f2:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 80099f6:	d10c      	bne.n	8009a12 <rshift+0x3c>
 80099f8:	f100 0710 	add.w	r7, r0, #16
 80099fc:	4629      	mov	r1, r5
 80099fe:	42b1      	cmp	r1, r6
 8009a00:	d334      	bcc.n	8009a6c <rshift+0x96>
 8009a02:	1a9b      	subs	r3, r3, r2
 8009a04:	009b      	lsls	r3, r3, #2
 8009a06:	1eea      	subs	r2, r5, #3
 8009a08:	4296      	cmp	r6, r2
 8009a0a:	bf38      	it	cc
 8009a0c:	2300      	movcc	r3, #0
 8009a0e:	4423      	add	r3, r4
 8009a10:	e015      	b.n	8009a3e <rshift+0x68>
 8009a12:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a16:	f1c1 0820 	rsb	r8, r1, #32
 8009a1a:	40cf      	lsrs	r7, r1
 8009a1c:	f105 0e04 	add.w	lr, r5, #4
 8009a20:	46a1      	mov	r9, r4
 8009a22:	4576      	cmp	r6, lr
 8009a24:	46f4      	mov	ip, lr
 8009a26:	d815      	bhi.n	8009a54 <rshift+0x7e>
 8009a28:	1a9b      	subs	r3, r3, r2
 8009a2a:	009a      	lsls	r2, r3, #2
 8009a2c:	3a04      	subs	r2, #4
 8009a2e:	3501      	adds	r5, #1
 8009a30:	42ae      	cmp	r6, r5
 8009a32:	bf38      	it	cc
 8009a34:	2200      	movcc	r2, #0
 8009a36:	18a3      	adds	r3, r4, r2
 8009a38:	50a7      	str	r7, [r4, r2]
 8009a3a:	b107      	cbz	r7, 8009a3e <rshift+0x68>
 8009a3c:	3304      	adds	r3, #4
 8009a3e:	1b1a      	subs	r2, r3, r4
 8009a40:	42a3      	cmp	r3, r4
 8009a42:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a46:	bf08      	it	eq
 8009a48:	2300      	moveq	r3, #0
 8009a4a:	6102      	str	r2, [r0, #16]
 8009a4c:	bf08      	it	eq
 8009a4e:	6143      	streq	r3, [r0, #20]
 8009a50:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a54:	f8dc c000 	ldr.w	ip, [ip]
 8009a58:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a5c:	ea4c 0707 	orr.w	r7, ip, r7
 8009a60:	f849 7b04 	str.w	r7, [r9], #4
 8009a64:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009a68:	40cf      	lsrs	r7, r1
 8009a6a:	e7da      	b.n	8009a22 <rshift+0x4c>
 8009a6c:	f851 cb04 	ldr.w	ip, [r1], #4
 8009a70:	f847 cf04 	str.w	ip, [r7, #4]!
 8009a74:	e7c3      	b.n	80099fe <rshift+0x28>
 8009a76:	4623      	mov	r3, r4
 8009a78:	e7e1      	b.n	8009a3e <rshift+0x68>

08009a7a <__hexdig_fun>:
 8009a7a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009a7e:	2b09      	cmp	r3, #9
 8009a80:	d802      	bhi.n	8009a88 <__hexdig_fun+0xe>
 8009a82:	3820      	subs	r0, #32
 8009a84:	b2c0      	uxtb	r0, r0
 8009a86:	4770      	bx	lr
 8009a88:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009a8c:	2b05      	cmp	r3, #5
 8009a8e:	d801      	bhi.n	8009a94 <__hexdig_fun+0x1a>
 8009a90:	3847      	subs	r0, #71	; 0x47
 8009a92:	e7f7      	b.n	8009a84 <__hexdig_fun+0xa>
 8009a94:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009a98:	2b05      	cmp	r3, #5
 8009a9a:	d801      	bhi.n	8009aa0 <__hexdig_fun+0x26>
 8009a9c:	3827      	subs	r0, #39	; 0x27
 8009a9e:	e7f1      	b.n	8009a84 <__hexdig_fun+0xa>
 8009aa0:	2000      	movs	r0, #0
 8009aa2:	4770      	bx	lr

08009aa4 <__gethex>:
 8009aa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa8:	ed2d 8b02 	vpush	{d8}
 8009aac:	b089      	sub	sp, #36	; 0x24
 8009aae:	ee08 0a10 	vmov	s16, r0
 8009ab2:	9304      	str	r3, [sp, #16]
 8009ab4:	4bbc      	ldr	r3, [pc, #752]	; (8009da8 <__gethex+0x304>)
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	9301      	str	r3, [sp, #4]
 8009aba:	4618      	mov	r0, r3
 8009abc:	468b      	mov	fp, r1
 8009abe:	4690      	mov	r8, r2
 8009ac0:	f7f6 fb86 	bl	80001d0 <strlen>
 8009ac4:	9b01      	ldr	r3, [sp, #4]
 8009ac6:	f8db 2000 	ldr.w	r2, [fp]
 8009aca:	4403      	add	r3, r0
 8009acc:	4682      	mov	sl, r0
 8009ace:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009ad2:	9305      	str	r3, [sp, #20]
 8009ad4:	1c93      	adds	r3, r2, #2
 8009ad6:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009ada:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009ade:	32fe      	adds	r2, #254	; 0xfe
 8009ae0:	18d1      	adds	r1, r2, r3
 8009ae2:	461f      	mov	r7, r3
 8009ae4:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009ae8:	9100      	str	r1, [sp, #0]
 8009aea:	2830      	cmp	r0, #48	; 0x30
 8009aec:	d0f8      	beq.n	8009ae0 <__gethex+0x3c>
 8009aee:	f7ff ffc4 	bl	8009a7a <__hexdig_fun>
 8009af2:	4604      	mov	r4, r0
 8009af4:	2800      	cmp	r0, #0
 8009af6:	d13a      	bne.n	8009b6e <__gethex+0xca>
 8009af8:	9901      	ldr	r1, [sp, #4]
 8009afa:	4652      	mov	r2, sl
 8009afc:	4638      	mov	r0, r7
 8009afe:	f001 ff59 	bl	800b9b4 <strncmp>
 8009b02:	4605      	mov	r5, r0
 8009b04:	2800      	cmp	r0, #0
 8009b06:	d168      	bne.n	8009bda <__gethex+0x136>
 8009b08:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b0c:	eb07 060a 	add.w	r6, r7, sl
 8009b10:	f7ff ffb3 	bl	8009a7a <__hexdig_fun>
 8009b14:	2800      	cmp	r0, #0
 8009b16:	d062      	beq.n	8009bde <__gethex+0x13a>
 8009b18:	4633      	mov	r3, r6
 8009b1a:	7818      	ldrb	r0, [r3, #0]
 8009b1c:	2830      	cmp	r0, #48	; 0x30
 8009b1e:	461f      	mov	r7, r3
 8009b20:	f103 0301 	add.w	r3, r3, #1
 8009b24:	d0f9      	beq.n	8009b1a <__gethex+0x76>
 8009b26:	f7ff ffa8 	bl	8009a7a <__hexdig_fun>
 8009b2a:	2301      	movs	r3, #1
 8009b2c:	fab0 f480 	clz	r4, r0
 8009b30:	0964      	lsrs	r4, r4, #5
 8009b32:	4635      	mov	r5, r6
 8009b34:	9300      	str	r3, [sp, #0]
 8009b36:	463a      	mov	r2, r7
 8009b38:	4616      	mov	r6, r2
 8009b3a:	3201      	adds	r2, #1
 8009b3c:	7830      	ldrb	r0, [r6, #0]
 8009b3e:	f7ff ff9c 	bl	8009a7a <__hexdig_fun>
 8009b42:	2800      	cmp	r0, #0
 8009b44:	d1f8      	bne.n	8009b38 <__gethex+0x94>
 8009b46:	9901      	ldr	r1, [sp, #4]
 8009b48:	4652      	mov	r2, sl
 8009b4a:	4630      	mov	r0, r6
 8009b4c:	f001 ff32 	bl	800b9b4 <strncmp>
 8009b50:	b980      	cbnz	r0, 8009b74 <__gethex+0xd0>
 8009b52:	b94d      	cbnz	r5, 8009b68 <__gethex+0xc4>
 8009b54:	eb06 050a 	add.w	r5, r6, sl
 8009b58:	462a      	mov	r2, r5
 8009b5a:	4616      	mov	r6, r2
 8009b5c:	3201      	adds	r2, #1
 8009b5e:	7830      	ldrb	r0, [r6, #0]
 8009b60:	f7ff ff8b 	bl	8009a7a <__hexdig_fun>
 8009b64:	2800      	cmp	r0, #0
 8009b66:	d1f8      	bne.n	8009b5a <__gethex+0xb6>
 8009b68:	1bad      	subs	r5, r5, r6
 8009b6a:	00ad      	lsls	r5, r5, #2
 8009b6c:	e004      	b.n	8009b78 <__gethex+0xd4>
 8009b6e:	2400      	movs	r4, #0
 8009b70:	4625      	mov	r5, r4
 8009b72:	e7e0      	b.n	8009b36 <__gethex+0x92>
 8009b74:	2d00      	cmp	r5, #0
 8009b76:	d1f7      	bne.n	8009b68 <__gethex+0xc4>
 8009b78:	7833      	ldrb	r3, [r6, #0]
 8009b7a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009b7e:	2b50      	cmp	r3, #80	; 0x50
 8009b80:	d13b      	bne.n	8009bfa <__gethex+0x156>
 8009b82:	7873      	ldrb	r3, [r6, #1]
 8009b84:	2b2b      	cmp	r3, #43	; 0x2b
 8009b86:	d02c      	beq.n	8009be2 <__gethex+0x13e>
 8009b88:	2b2d      	cmp	r3, #45	; 0x2d
 8009b8a:	d02e      	beq.n	8009bea <__gethex+0x146>
 8009b8c:	1c71      	adds	r1, r6, #1
 8009b8e:	f04f 0900 	mov.w	r9, #0
 8009b92:	7808      	ldrb	r0, [r1, #0]
 8009b94:	f7ff ff71 	bl	8009a7a <__hexdig_fun>
 8009b98:	1e43      	subs	r3, r0, #1
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b18      	cmp	r3, #24
 8009b9e:	d82c      	bhi.n	8009bfa <__gethex+0x156>
 8009ba0:	f1a0 0210 	sub.w	r2, r0, #16
 8009ba4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009ba8:	f7ff ff67 	bl	8009a7a <__hexdig_fun>
 8009bac:	1e43      	subs	r3, r0, #1
 8009bae:	b2db      	uxtb	r3, r3
 8009bb0:	2b18      	cmp	r3, #24
 8009bb2:	d91d      	bls.n	8009bf0 <__gethex+0x14c>
 8009bb4:	f1b9 0f00 	cmp.w	r9, #0
 8009bb8:	d000      	beq.n	8009bbc <__gethex+0x118>
 8009bba:	4252      	negs	r2, r2
 8009bbc:	4415      	add	r5, r2
 8009bbe:	f8cb 1000 	str.w	r1, [fp]
 8009bc2:	b1e4      	cbz	r4, 8009bfe <__gethex+0x15a>
 8009bc4:	9b00      	ldr	r3, [sp, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	bf14      	ite	ne
 8009bca:	2700      	movne	r7, #0
 8009bcc:	2706      	moveq	r7, #6
 8009bce:	4638      	mov	r0, r7
 8009bd0:	b009      	add	sp, #36	; 0x24
 8009bd2:	ecbd 8b02 	vpop	{d8}
 8009bd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009bda:	463e      	mov	r6, r7
 8009bdc:	4625      	mov	r5, r4
 8009bde:	2401      	movs	r4, #1
 8009be0:	e7ca      	b.n	8009b78 <__gethex+0xd4>
 8009be2:	f04f 0900 	mov.w	r9, #0
 8009be6:	1cb1      	adds	r1, r6, #2
 8009be8:	e7d3      	b.n	8009b92 <__gethex+0xee>
 8009bea:	f04f 0901 	mov.w	r9, #1
 8009bee:	e7fa      	b.n	8009be6 <__gethex+0x142>
 8009bf0:	230a      	movs	r3, #10
 8009bf2:	fb03 0202 	mla	r2, r3, r2, r0
 8009bf6:	3a10      	subs	r2, #16
 8009bf8:	e7d4      	b.n	8009ba4 <__gethex+0x100>
 8009bfa:	4631      	mov	r1, r6
 8009bfc:	e7df      	b.n	8009bbe <__gethex+0x11a>
 8009bfe:	1bf3      	subs	r3, r6, r7
 8009c00:	3b01      	subs	r3, #1
 8009c02:	4621      	mov	r1, r4
 8009c04:	2b07      	cmp	r3, #7
 8009c06:	dc0b      	bgt.n	8009c20 <__gethex+0x17c>
 8009c08:	ee18 0a10 	vmov	r0, s16
 8009c0c:	f000 faec 	bl	800a1e8 <_Balloc>
 8009c10:	4604      	mov	r4, r0
 8009c12:	b940      	cbnz	r0, 8009c26 <__gethex+0x182>
 8009c14:	4b65      	ldr	r3, [pc, #404]	; (8009dac <__gethex+0x308>)
 8009c16:	4602      	mov	r2, r0
 8009c18:	21de      	movs	r1, #222	; 0xde
 8009c1a:	4865      	ldr	r0, [pc, #404]	; (8009db0 <__gethex+0x30c>)
 8009c1c:	f001 ffa2 	bl	800bb64 <__assert_func>
 8009c20:	3101      	adds	r1, #1
 8009c22:	105b      	asrs	r3, r3, #1
 8009c24:	e7ee      	b.n	8009c04 <__gethex+0x160>
 8009c26:	f100 0914 	add.w	r9, r0, #20
 8009c2a:	f04f 0b00 	mov.w	fp, #0
 8009c2e:	f1ca 0301 	rsb	r3, sl, #1
 8009c32:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c36:	f8cd b000 	str.w	fp, [sp]
 8009c3a:	9306      	str	r3, [sp, #24]
 8009c3c:	42b7      	cmp	r7, r6
 8009c3e:	d340      	bcc.n	8009cc2 <__gethex+0x21e>
 8009c40:	9802      	ldr	r0, [sp, #8]
 8009c42:	9b00      	ldr	r3, [sp, #0]
 8009c44:	f840 3b04 	str.w	r3, [r0], #4
 8009c48:	eba0 0009 	sub.w	r0, r0, r9
 8009c4c:	1080      	asrs	r0, r0, #2
 8009c4e:	0146      	lsls	r6, r0, #5
 8009c50:	6120      	str	r0, [r4, #16]
 8009c52:	4618      	mov	r0, r3
 8009c54:	f000 fbbe 	bl	800a3d4 <__hi0bits>
 8009c58:	1a30      	subs	r0, r6, r0
 8009c5a:	f8d8 6000 	ldr.w	r6, [r8]
 8009c5e:	42b0      	cmp	r0, r6
 8009c60:	dd63      	ble.n	8009d2a <__gethex+0x286>
 8009c62:	1b87      	subs	r7, r0, r6
 8009c64:	4639      	mov	r1, r7
 8009c66:	4620      	mov	r0, r4
 8009c68:	f000 ff58 	bl	800ab1c <__any_on>
 8009c6c:	4682      	mov	sl, r0
 8009c6e:	b1a8      	cbz	r0, 8009c9c <__gethex+0x1f8>
 8009c70:	1e7b      	subs	r3, r7, #1
 8009c72:	1159      	asrs	r1, r3, #5
 8009c74:	f003 021f 	and.w	r2, r3, #31
 8009c78:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009c7c:	f04f 0a01 	mov.w	sl, #1
 8009c80:	fa0a f202 	lsl.w	r2, sl, r2
 8009c84:	420a      	tst	r2, r1
 8009c86:	d009      	beq.n	8009c9c <__gethex+0x1f8>
 8009c88:	4553      	cmp	r3, sl
 8009c8a:	dd05      	ble.n	8009c98 <__gethex+0x1f4>
 8009c8c:	1eb9      	subs	r1, r7, #2
 8009c8e:	4620      	mov	r0, r4
 8009c90:	f000 ff44 	bl	800ab1c <__any_on>
 8009c94:	2800      	cmp	r0, #0
 8009c96:	d145      	bne.n	8009d24 <__gethex+0x280>
 8009c98:	f04f 0a02 	mov.w	sl, #2
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f7ff fe99 	bl	80099d6 <rshift>
 8009ca4:	443d      	add	r5, r7
 8009ca6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009caa:	42ab      	cmp	r3, r5
 8009cac:	da4c      	bge.n	8009d48 <__gethex+0x2a4>
 8009cae:	ee18 0a10 	vmov	r0, s16
 8009cb2:	4621      	mov	r1, r4
 8009cb4:	f000 fad8 	bl	800a268 <_Bfree>
 8009cb8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cba:	2300      	movs	r3, #0
 8009cbc:	6013      	str	r3, [r2, #0]
 8009cbe:	27a3      	movs	r7, #163	; 0xa3
 8009cc0:	e785      	b.n	8009bce <__gethex+0x12a>
 8009cc2:	1e73      	subs	r3, r6, #1
 8009cc4:	9a05      	ldr	r2, [sp, #20]
 8009cc6:	9303      	str	r3, [sp, #12]
 8009cc8:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009ccc:	4293      	cmp	r3, r2
 8009cce:	d019      	beq.n	8009d04 <__gethex+0x260>
 8009cd0:	f1bb 0f20 	cmp.w	fp, #32
 8009cd4:	d107      	bne.n	8009ce6 <__gethex+0x242>
 8009cd6:	9b02      	ldr	r3, [sp, #8]
 8009cd8:	9a00      	ldr	r2, [sp, #0]
 8009cda:	f843 2b04 	str.w	r2, [r3], #4
 8009cde:	9302      	str	r3, [sp, #8]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9300      	str	r3, [sp, #0]
 8009ce4:	469b      	mov	fp, r3
 8009ce6:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009cea:	f7ff fec6 	bl	8009a7a <__hexdig_fun>
 8009cee:	9b00      	ldr	r3, [sp, #0]
 8009cf0:	f000 000f 	and.w	r0, r0, #15
 8009cf4:	fa00 f00b 	lsl.w	r0, r0, fp
 8009cf8:	4303      	orrs	r3, r0
 8009cfa:	9300      	str	r3, [sp, #0]
 8009cfc:	f10b 0b04 	add.w	fp, fp, #4
 8009d00:	9b03      	ldr	r3, [sp, #12]
 8009d02:	e00d      	b.n	8009d20 <__gethex+0x27c>
 8009d04:	9b03      	ldr	r3, [sp, #12]
 8009d06:	9a06      	ldr	r2, [sp, #24]
 8009d08:	4413      	add	r3, r2
 8009d0a:	42bb      	cmp	r3, r7
 8009d0c:	d3e0      	bcc.n	8009cd0 <__gethex+0x22c>
 8009d0e:	4618      	mov	r0, r3
 8009d10:	9901      	ldr	r1, [sp, #4]
 8009d12:	9307      	str	r3, [sp, #28]
 8009d14:	4652      	mov	r2, sl
 8009d16:	f001 fe4d 	bl	800b9b4 <strncmp>
 8009d1a:	9b07      	ldr	r3, [sp, #28]
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	d1d7      	bne.n	8009cd0 <__gethex+0x22c>
 8009d20:	461e      	mov	r6, r3
 8009d22:	e78b      	b.n	8009c3c <__gethex+0x198>
 8009d24:	f04f 0a03 	mov.w	sl, #3
 8009d28:	e7b8      	b.n	8009c9c <__gethex+0x1f8>
 8009d2a:	da0a      	bge.n	8009d42 <__gethex+0x29e>
 8009d2c:	1a37      	subs	r7, r6, r0
 8009d2e:	4621      	mov	r1, r4
 8009d30:	ee18 0a10 	vmov	r0, s16
 8009d34:	463a      	mov	r2, r7
 8009d36:	f000 fcb3 	bl	800a6a0 <__lshift>
 8009d3a:	1bed      	subs	r5, r5, r7
 8009d3c:	4604      	mov	r4, r0
 8009d3e:	f100 0914 	add.w	r9, r0, #20
 8009d42:	f04f 0a00 	mov.w	sl, #0
 8009d46:	e7ae      	b.n	8009ca6 <__gethex+0x202>
 8009d48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d4c:	42a8      	cmp	r0, r5
 8009d4e:	dd72      	ble.n	8009e36 <__gethex+0x392>
 8009d50:	1b45      	subs	r5, r0, r5
 8009d52:	42ae      	cmp	r6, r5
 8009d54:	dc36      	bgt.n	8009dc4 <__gethex+0x320>
 8009d56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d5a:	2b02      	cmp	r3, #2
 8009d5c:	d02a      	beq.n	8009db4 <__gethex+0x310>
 8009d5e:	2b03      	cmp	r3, #3
 8009d60:	d02c      	beq.n	8009dbc <__gethex+0x318>
 8009d62:	2b01      	cmp	r3, #1
 8009d64:	d115      	bne.n	8009d92 <__gethex+0x2ee>
 8009d66:	42ae      	cmp	r6, r5
 8009d68:	d113      	bne.n	8009d92 <__gethex+0x2ee>
 8009d6a:	2e01      	cmp	r6, #1
 8009d6c:	d10b      	bne.n	8009d86 <__gethex+0x2e2>
 8009d6e:	9a04      	ldr	r2, [sp, #16]
 8009d70:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009d74:	6013      	str	r3, [r2, #0]
 8009d76:	2301      	movs	r3, #1
 8009d78:	6123      	str	r3, [r4, #16]
 8009d7a:	f8c9 3000 	str.w	r3, [r9]
 8009d7e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009d80:	2762      	movs	r7, #98	; 0x62
 8009d82:	601c      	str	r4, [r3, #0]
 8009d84:	e723      	b.n	8009bce <__gethex+0x12a>
 8009d86:	1e71      	subs	r1, r6, #1
 8009d88:	4620      	mov	r0, r4
 8009d8a:	f000 fec7 	bl	800ab1c <__any_on>
 8009d8e:	2800      	cmp	r0, #0
 8009d90:	d1ed      	bne.n	8009d6e <__gethex+0x2ca>
 8009d92:	ee18 0a10 	vmov	r0, s16
 8009d96:	4621      	mov	r1, r4
 8009d98:	f000 fa66 	bl	800a268 <_Bfree>
 8009d9c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009d9e:	2300      	movs	r3, #0
 8009da0:	6013      	str	r3, [r2, #0]
 8009da2:	2750      	movs	r7, #80	; 0x50
 8009da4:	e713      	b.n	8009bce <__gethex+0x12a>
 8009da6:	bf00      	nop
 8009da8:	0800cd20 	.word	0x0800cd20
 8009dac:	0800cca4 	.word	0x0800cca4
 8009db0:	0800ccb5 	.word	0x0800ccb5
 8009db4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d1eb      	bne.n	8009d92 <__gethex+0x2ee>
 8009dba:	e7d8      	b.n	8009d6e <__gethex+0x2ca>
 8009dbc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dbe:	2b00      	cmp	r3, #0
 8009dc0:	d1d5      	bne.n	8009d6e <__gethex+0x2ca>
 8009dc2:	e7e6      	b.n	8009d92 <__gethex+0x2ee>
 8009dc4:	1e6f      	subs	r7, r5, #1
 8009dc6:	f1ba 0f00 	cmp.w	sl, #0
 8009dca:	d131      	bne.n	8009e30 <__gethex+0x38c>
 8009dcc:	b127      	cbz	r7, 8009dd8 <__gethex+0x334>
 8009dce:	4639      	mov	r1, r7
 8009dd0:	4620      	mov	r0, r4
 8009dd2:	f000 fea3 	bl	800ab1c <__any_on>
 8009dd6:	4682      	mov	sl, r0
 8009dd8:	117b      	asrs	r3, r7, #5
 8009dda:	2101      	movs	r1, #1
 8009ddc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009de0:	f007 071f 	and.w	r7, r7, #31
 8009de4:	fa01 f707 	lsl.w	r7, r1, r7
 8009de8:	421f      	tst	r7, r3
 8009dea:	4629      	mov	r1, r5
 8009dec:	4620      	mov	r0, r4
 8009dee:	bf18      	it	ne
 8009df0:	f04a 0a02 	orrne.w	sl, sl, #2
 8009df4:	1b76      	subs	r6, r6, r5
 8009df6:	f7ff fdee 	bl	80099d6 <rshift>
 8009dfa:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009dfe:	2702      	movs	r7, #2
 8009e00:	f1ba 0f00 	cmp.w	sl, #0
 8009e04:	d048      	beq.n	8009e98 <__gethex+0x3f4>
 8009e06:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d015      	beq.n	8009e3a <__gethex+0x396>
 8009e0e:	2b03      	cmp	r3, #3
 8009e10:	d017      	beq.n	8009e42 <__gethex+0x39e>
 8009e12:	2b01      	cmp	r3, #1
 8009e14:	d109      	bne.n	8009e2a <__gethex+0x386>
 8009e16:	f01a 0f02 	tst.w	sl, #2
 8009e1a:	d006      	beq.n	8009e2a <__gethex+0x386>
 8009e1c:	f8d9 0000 	ldr.w	r0, [r9]
 8009e20:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e24:	f01a 0f01 	tst.w	sl, #1
 8009e28:	d10e      	bne.n	8009e48 <__gethex+0x3a4>
 8009e2a:	f047 0710 	orr.w	r7, r7, #16
 8009e2e:	e033      	b.n	8009e98 <__gethex+0x3f4>
 8009e30:	f04f 0a01 	mov.w	sl, #1
 8009e34:	e7d0      	b.n	8009dd8 <__gethex+0x334>
 8009e36:	2701      	movs	r7, #1
 8009e38:	e7e2      	b.n	8009e00 <__gethex+0x35c>
 8009e3a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e3c:	f1c3 0301 	rsb	r3, r3, #1
 8009e40:	9315      	str	r3, [sp, #84]	; 0x54
 8009e42:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e44:	2b00      	cmp	r3, #0
 8009e46:	d0f0      	beq.n	8009e2a <__gethex+0x386>
 8009e48:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e4c:	f104 0314 	add.w	r3, r4, #20
 8009e50:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e54:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e58:	f04f 0c00 	mov.w	ip, #0
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e62:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e66:	d01c      	beq.n	8009ea2 <__gethex+0x3fe>
 8009e68:	3201      	adds	r2, #1
 8009e6a:	6002      	str	r2, [r0, #0]
 8009e6c:	2f02      	cmp	r7, #2
 8009e6e:	f104 0314 	add.w	r3, r4, #20
 8009e72:	d13f      	bne.n	8009ef4 <__gethex+0x450>
 8009e74:	f8d8 2000 	ldr.w	r2, [r8]
 8009e78:	3a01      	subs	r2, #1
 8009e7a:	42b2      	cmp	r2, r6
 8009e7c:	d10a      	bne.n	8009e94 <__gethex+0x3f0>
 8009e7e:	1171      	asrs	r1, r6, #5
 8009e80:	2201      	movs	r2, #1
 8009e82:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009e86:	f006 061f 	and.w	r6, r6, #31
 8009e8a:	fa02 f606 	lsl.w	r6, r2, r6
 8009e8e:	421e      	tst	r6, r3
 8009e90:	bf18      	it	ne
 8009e92:	4617      	movne	r7, r2
 8009e94:	f047 0720 	orr.w	r7, r7, #32
 8009e98:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009e9a:	601c      	str	r4, [r3, #0]
 8009e9c:	9b04      	ldr	r3, [sp, #16]
 8009e9e:	601d      	str	r5, [r3, #0]
 8009ea0:	e695      	b.n	8009bce <__gethex+0x12a>
 8009ea2:	4299      	cmp	r1, r3
 8009ea4:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ea8:	d8d8      	bhi.n	8009e5c <__gethex+0x3b8>
 8009eaa:	68a3      	ldr	r3, [r4, #8]
 8009eac:	459b      	cmp	fp, r3
 8009eae:	db19      	blt.n	8009ee4 <__gethex+0x440>
 8009eb0:	6861      	ldr	r1, [r4, #4]
 8009eb2:	ee18 0a10 	vmov	r0, s16
 8009eb6:	3101      	adds	r1, #1
 8009eb8:	f000 f996 	bl	800a1e8 <_Balloc>
 8009ebc:	4681      	mov	r9, r0
 8009ebe:	b918      	cbnz	r0, 8009ec8 <__gethex+0x424>
 8009ec0:	4b1a      	ldr	r3, [pc, #104]	; (8009f2c <__gethex+0x488>)
 8009ec2:	4602      	mov	r2, r0
 8009ec4:	2184      	movs	r1, #132	; 0x84
 8009ec6:	e6a8      	b.n	8009c1a <__gethex+0x176>
 8009ec8:	6922      	ldr	r2, [r4, #16]
 8009eca:	3202      	adds	r2, #2
 8009ecc:	f104 010c 	add.w	r1, r4, #12
 8009ed0:	0092      	lsls	r2, r2, #2
 8009ed2:	300c      	adds	r0, #12
 8009ed4:	f000 f97a 	bl	800a1cc <memcpy>
 8009ed8:	4621      	mov	r1, r4
 8009eda:	ee18 0a10 	vmov	r0, s16
 8009ede:	f000 f9c3 	bl	800a268 <_Bfree>
 8009ee2:	464c      	mov	r4, r9
 8009ee4:	6923      	ldr	r3, [r4, #16]
 8009ee6:	1c5a      	adds	r2, r3, #1
 8009ee8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009eec:	6122      	str	r2, [r4, #16]
 8009eee:	2201      	movs	r2, #1
 8009ef0:	615a      	str	r2, [r3, #20]
 8009ef2:	e7bb      	b.n	8009e6c <__gethex+0x3c8>
 8009ef4:	6922      	ldr	r2, [r4, #16]
 8009ef6:	455a      	cmp	r2, fp
 8009ef8:	dd0b      	ble.n	8009f12 <__gethex+0x46e>
 8009efa:	2101      	movs	r1, #1
 8009efc:	4620      	mov	r0, r4
 8009efe:	f7ff fd6a 	bl	80099d6 <rshift>
 8009f02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f06:	3501      	adds	r5, #1
 8009f08:	42ab      	cmp	r3, r5
 8009f0a:	f6ff aed0 	blt.w	8009cae <__gethex+0x20a>
 8009f0e:	2701      	movs	r7, #1
 8009f10:	e7c0      	b.n	8009e94 <__gethex+0x3f0>
 8009f12:	f016 061f 	ands.w	r6, r6, #31
 8009f16:	d0fa      	beq.n	8009f0e <__gethex+0x46a>
 8009f18:	449a      	add	sl, r3
 8009f1a:	f1c6 0620 	rsb	r6, r6, #32
 8009f1e:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009f22:	f000 fa57 	bl	800a3d4 <__hi0bits>
 8009f26:	42b0      	cmp	r0, r6
 8009f28:	dbe7      	blt.n	8009efa <__gethex+0x456>
 8009f2a:	e7f0      	b.n	8009f0e <__gethex+0x46a>
 8009f2c:	0800cca4 	.word	0x0800cca4

08009f30 <L_shift>:
 8009f30:	f1c2 0208 	rsb	r2, r2, #8
 8009f34:	0092      	lsls	r2, r2, #2
 8009f36:	b570      	push	{r4, r5, r6, lr}
 8009f38:	f1c2 0620 	rsb	r6, r2, #32
 8009f3c:	6843      	ldr	r3, [r0, #4]
 8009f3e:	6804      	ldr	r4, [r0, #0]
 8009f40:	fa03 f506 	lsl.w	r5, r3, r6
 8009f44:	432c      	orrs	r4, r5
 8009f46:	40d3      	lsrs	r3, r2
 8009f48:	6004      	str	r4, [r0, #0]
 8009f4a:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f4e:	4288      	cmp	r0, r1
 8009f50:	d3f4      	bcc.n	8009f3c <L_shift+0xc>
 8009f52:	bd70      	pop	{r4, r5, r6, pc}

08009f54 <__match>:
 8009f54:	b530      	push	{r4, r5, lr}
 8009f56:	6803      	ldr	r3, [r0, #0]
 8009f58:	3301      	adds	r3, #1
 8009f5a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f5e:	b914      	cbnz	r4, 8009f66 <__match+0x12>
 8009f60:	6003      	str	r3, [r0, #0]
 8009f62:	2001      	movs	r0, #1
 8009f64:	bd30      	pop	{r4, r5, pc}
 8009f66:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f6a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009f6e:	2d19      	cmp	r5, #25
 8009f70:	bf98      	it	ls
 8009f72:	3220      	addls	r2, #32
 8009f74:	42a2      	cmp	r2, r4
 8009f76:	d0f0      	beq.n	8009f5a <__match+0x6>
 8009f78:	2000      	movs	r0, #0
 8009f7a:	e7f3      	b.n	8009f64 <__match+0x10>

08009f7c <__hexnan>:
 8009f7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f80:	680b      	ldr	r3, [r1, #0]
 8009f82:	6801      	ldr	r1, [r0, #0]
 8009f84:	115e      	asrs	r6, r3, #5
 8009f86:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009f8a:	f013 031f 	ands.w	r3, r3, #31
 8009f8e:	b087      	sub	sp, #28
 8009f90:	bf18      	it	ne
 8009f92:	3604      	addne	r6, #4
 8009f94:	2500      	movs	r5, #0
 8009f96:	1f37      	subs	r7, r6, #4
 8009f98:	4682      	mov	sl, r0
 8009f9a:	4690      	mov	r8, r2
 8009f9c:	9301      	str	r3, [sp, #4]
 8009f9e:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fa2:	46b9      	mov	r9, r7
 8009fa4:	463c      	mov	r4, r7
 8009fa6:	9502      	str	r5, [sp, #8]
 8009fa8:	46ab      	mov	fp, r5
 8009faa:	784a      	ldrb	r2, [r1, #1]
 8009fac:	1c4b      	adds	r3, r1, #1
 8009fae:	9303      	str	r3, [sp, #12]
 8009fb0:	b342      	cbz	r2, 800a004 <__hexnan+0x88>
 8009fb2:	4610      	mov	r0, r2
 8009fb4:	9105      	str	r1, [sp, #20]
 8009fb6:	9204      	str	r2, [sp, #16]
 8009fb8:	f7ff fd5f 	bl	8009a7a <__hexdig_fun>
 8009fbc:	2800      	cmp	r0, #0
 8009fbe:	d14f      	bne.n	800a060 <__hexnan+0xe4>
 8009fc0:	9a04      	ldr	r2, [sp, #16]
 8009fc2:	9905      	ldr	r1, [sp, #20]
 8009fc4:	2a20      	cmp	r2, #32
 8009fc6:	d818      	bhi.n	8009ffa <__hexnan+0x7e>
 8009fc8:	9b02      	ldr	r3, [sp, #8]
 8009fca:	459b      	cmp	fp, r3
 8009fcc:	dd13      	ble.n	8009ff6 <__hexnan+0x7a>
 8009fce:	454c      	cmp	r4, r9
 8009fd0:	d206      	bcs.n	8009fe0 <__hexnan+0x64>
 8009fd2:	2d07      	cmp	r5, #7
 8009fd4:	dc04      	bgt.n	8009fe0 <__hexnan+0x64>
 8009fd6:	462a      	mov	r2, r5
 8009fd8:	4649      	mov	r1, r9
 8009fda:	4620      	mov	r0, r4
 8009fdc:	f7ff ffa8 	bl	8009f30 <L_shift>
 8009fe0:	4544      	cmp	r4, r8
 8009fe2:	d950      	bls.n	800a086 <__hexnan+0x10a>
 8009fe4:	2300      	movs	r3, #0
 8009fe6:	f1a4 0904 	sub.w	r9, r4, #4
 8009fea:	f844 3c04 	str.w	r3, [r4, #-4]
 8009fee:	f8cd b008 	str.w	fp, [sp, #8]
 8009ff2:	464c      	mov	r4, r9
 8009ff4:	461d      	mov	r5, r3
 8009ff6:	9903      	ldr	r1, [sp, #12]
 8009ff8:	e7d7      	b.n	8009faa <__hexnan+0x2e>
 8009ffa:	2a29      	cmp	r2, #41	; 0x29
 8009ffc:	d156      	bne.n	800a0ac <__hexnan+0x130>
 8009ffe:	3102      	adds	r1, #2
 800a000:	f8ca 1000 	str.w	r1, [sl]
 800a004:	f1bb 0f00 	cmp.w	fp, #0
 800a008:	d050      	beq.n	800a0ac <__hexnan+0x130>
 800a00a:	454c      	cmp	r4, r9
 800a00c:	d206      	bcs.n	800a01c <__hexnan+0xa0>
 800a00e:	2d07      	cmp	r5, #7
 800a010:	dc04      	bgt.n	800a01c <__hexnan+0xa0>
 800a012:	462a      	mov	r2, r5
 800a014:	4649      	mov	r1, r9
 800a016:	4620      	mov	r0, r4
 800a018:	f7ff ff8a 	bl	8009f30 <L_shift>
 800a01c:	4544      	cmp	r4, r8
 800a01e:	d934      	bls.n	800a08a <__hexnan+0x10e>
 800a020:	f1a8 0204 	sub.w	r2, r8, #4
 800a024:	4623      	mov	r3, r4
 800a026:	f853 1b04 	ldr.w	r1, [r3], #4
 800a02a:	f842 1f04 	str.w	r1, [r2, #4]!
 800a02e:	429f      	cmp	r7, r3
 800a030:	d2f9      	bcs.n	800a026 <__hexnan+0xaa>
 800a032:	1b3b      	subs	r3, r7, r4
 800a034:	f023 0303 	bic.w	r3, r3, #3
 800a038:	3304      	adds	r3, #4
 800a03a:	3401      	adds	r4, #1
 800a03c:	3e03      	subs	r6, #3
 800a03e:	42b4      	cmp	r4, r6
 800a040:	bf88      	it	hi
 800a042:	2304      	movhi	r3, #4
 800a044:	4443      	add	r3, r8
 800a046:	2200      	movs	r2, #0
 800a048:	f843 2b04 	str.w	r2, [r3], #4
 800a04c:	429f      	cmp	r7, r3
 800a04e:	d2fb      	bcs.n	800a048 <__hexnan+0xcc>
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	b91b      	cbnz	r3, 800a05c <__hexnan+0xe0>
 800a054:	4547      	cmp	r7, r8
 800a056:	d127      	bne.n	800a0a8 <__hexnan+0x12c>
 800a058:	2301      	movs	r3, #1
 800a05a:	603b      	str	r3, [r7, #0]
 800a05c:	2005      	movs	r0, #5
 800a05e:	e026      	b.n	800a0ae <__hexnan+0x132>
 800a060:	3501      	adds	r5, #1
 800a062:	2d08      	cmp	r5, #8
 800a064:	f10b 0b01 	add.w	fp, fp, #1
 800a068:	dd06      	ble.n	800a078 <__hexnan+0xfc>
 800a06a:	4544      	cmp	r4, r8
 800a06c:	d9c3      	bls.n	8009ff6 <__hexnan+0x7a>
 800a06e:	2300      	movs	r3, #0
 800a070:	f844 3c04 	str.w	r3, [r4, #-4]
 800a074:	2501      	movs	r5, #1
 800a076:	3c04      	subs	r4, #4
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	f000 000f 	and.w	r0, r0, #15
 800a07e:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a082:	6022      	str	r2, [r4, #0]
 800a084:	e7b7      	b.n	8009ff6 <__hexnan+0x7a>
 800a086:	2508      	movs	r5, #8
 800a088:	e7b5      	b.n	8009ff6 <__hexnan+0x7a>
 800a08a:	9b01      	ldr	r3, [sp, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d0df      	beq.n	800a050 <__hexnan+0xd4>
 800a090:	f04f 32ff 	mov.w	r2, #4294967295
 800a094:	f1c3 0320 	rsb	r3, r3, #32
 800a098:	fa22 f303 	lsr.w	r3, r2, r3
 800a09c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0a0:	401a      	ands	r2, r3
 800a0a2:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0a6:	e7d3      	b.n	800a050 <__hexnan+0xd4>
 800a0a8:	3f04      	subs	r7, #4
 800a0aa:	e7d1      	b.n	800a050 <__hexnan+0xd4>
 800a0ac:	2004      	movs	r0, #4
 800a0ae:	b007      	add	sp, #28
 800a0b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0b4 <__retarget_lock_init_recursive>:
 800a0b4:	4770      	bx	lr

0800a0b6 <__retarget_lock_acquire_recursive>:
 800a0b6:	4770      	bx	lr

0800a0b8 <__retarget_lock_release_recursive>:
 800a0b8:	4770      	bx	lr
	...

0800a0bc <_lseek_r>:
 800a0bc:	b538      	push	{r3, r4, r5, lr}
 800a0be:	4d07      	ldr	r5, [pc, #28]	; (800a0dc <_lseek_r+0x20>)
 800a0c0:	4604      	mov	r4, r0
 800a0c2:	4608      	mov	r0, r1
 800a0c4:	4611      	mov	r1, r2
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	602a      	str	r2, [r5, #0]
 800a0ca:	461a      	mov	r2, r3
 800a0cc:	f7f9 fde4 	bl	8003c98 <_lseek>
 800a0d0:	1c43      	adds	r3, r0, #1
 800a0d2:	d102      	bne.n	800a0da <_lseek_r+0x1e>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	b103      	cbz	r3, 800a0da <_lseek_r+0x1e>
 800a0d8:	6023      	str	r3, [r4, #0]
 800a0da:	bd38      	pop	{r3, r4, r5, pc}
 800a0dc:	20000f68 	.word	0x20000f68

0800a0e0 <__swhatbuf_r>:
 800a0e0:	b570      	push	{r4, r5, r6, lr}
 800a0e2:	460e      	mov	r6, r1
 800a0e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0e8:	2900      	cmp	r1, #0
 800a0ea:	b096      	sub	sp, #88	; 0x58
 800a0ec:	4614      	mov	r4, r2
 800a0ee:	461d      	mov	r5, r3
 800a0f0:	da07      	bge.n	800a102 <__swhatbuf_r+0x22>
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	602b      	str	r3, [r5, #0]
 800a0f6:	89b3      	ldrh	r3, [r6, #12]
 800a0f8:	061a      	lsls	r2, r3, #24
 800a0fa:	d410      	bmi.n	800a11e <__swhatbuf_r+0x3e>
 800a0fc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a100:	e00e      	b.n	800a120 <__swhatbuf_r+0x40>
 800a102:	466a      	mov	r2, sp
 800a104:	f001 fd5e 	bl	800bbc4 <_fstat_r>
 800a108:	2800      	cmp	r0, #0
 800a10a:	dbf2      	blt.n	800a0f2 <__swhatbuf_r+0x12>
 800a10c:	9a01      	ldr	r2, [sp, #4]
 800a10e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a112:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a116:	425a      	negs	r2, r3
 800a118:	415a      	adcs	r2, r3
 800a11a:	602a      	str	r2, [r5, #0]
 800a11c:	e7ee      	b.n	800a0fc <__swhatbuf_r+0x1c>
 800a11e:	2340      	movs	r3, #64	; 0x40
 800a120:	2000      	movs	r0, #0
 800a122:	6023      	str	r3, [r4, #0]
 800a124:	b016      	add	sp, #88	; 0x58
 800a126:	bd70      	pop	{r4, r5, r6, pc}

0800a128 <__smakebuf_r>:
 800a128:	898b      	ldrh	r3, [r1, #12]
 800a12a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a12c:	079d      	lsls	r5, r3, #30
 800a12e:	4606      	mov	r6, r0
 800a130:	460c      	mov	r4, r1
 800a132:	d507      	bpl.n	800a144 <__smakebuf_r+0x1c>
 800a134:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a138:	6023      	str	r3, [r4, #0]
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	2301      	movs	r3, #1
 800a13e:	6163      	str	r3, [r4, #20]
 800a140:	b002      	add	sp, #8
 800a142:	bd70      	pop	{r4, r5, r6, pc}
 800a144:	ab01      	add	r3, sp, #4
 800a146:	466a      	mov	r2, sp
 800a148:	f7ff ffca 	bl	800a0e0 <__swhatbuf_r>
 800a14c:	9900      	ldr	r1, [sp, #0]
 800a14e:	4605      	mov	r5, r0
 800a150:	4630      	mov	r0, r6
 800a152:	f000 fd63 	bl	800ac1c <_malloc_r>
 800a156:	b948      	cbnz	r0, 800a16c <__smakebuf_r+0x44>
 800a158:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a15c:	059a      	lsls	r2, r3, #22
 800a15e:	d4ef      	bmi.n	800a140 <__smakebuf_r+0x18>
 800a160:	f023 0303 	bic.w	r3, r3, #3
 800a164:	f043 0302 	orr.w	r3, r3, #2
 800a168:	81a3      	strh	r3, [r4, #12]
 800a16a:	e7e3      	b.n	800a134 <__smakebuf_r+0xc>
 800a16c:	4b0d      	ldr	r3, [pc, #52]	; (800a1a4 <__smakebuf_r+0x7c>)
 800a16e:	62b3      	str	r3, [r6, #40]	; 0x28
 800a170:	89a3      	ldrh	r3, [r4, #12]
 800a172:	6020      	str	r0, [r4, #0]
 800a174:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a178:	81a3      	strh	r3, [r4, #12]
 800a17a:	9b00      	ldr	r3, [sp, #0]
 800a17c:	6163      	str	r3, [r4, #20]
 800a17e:	9b01      	ldr	r3, [sp, #4]
 800a180:	6120      	str	r0, [r4, #16]
 800a182:	b15b      	cbz	r3, 800a19c <__smakebuf_r+0x74>
 800a184:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a188:	4630      	mov	r0, r6
 800a18a:	f001 fd2d 	bl	800bbe8 <_isatty_r>
 800a18e:	b128      	cbz	r0, 800a19c <__smakebuf_r+0x74>
 800a190:	89a3      	ldrh	r3, [r4, #12]
 800a192:	f023 0303 	bic.w	r3, r3, #3
 800a196:	f043 0301 	orr.w	r3, r3, #1
 800a19a:	81a3      	strh	r3, [r4, #12]
 800a19c:	89a0      	ldrh	r0, [r4, #12]
 800a19e:	4305      	orrs	r5, r0
 800a1a0:	81a5      	strh	r5, [r4, #12]
 800a1a2:	e7cd      	b.n	800a140 <__smakebuf_r+0x18>
 800a1a4:	08009835 	.word	0x08009835

0800a1a8 <__ascii_mbtowc>:
 800a1a8:	b082      	sub	sp, #8
 800a1aa:	b901      	cbnz	r1, 800a1ae <__ascii_mbtowc+0x6>
 800a1ac:	a901      	add	r1, sp, #4
 800a1ae:	b142      	cbz	r2, 800a1c2 <__ascii_mbtowc+0x1a>
 800a1b0:	b14b      	cbz	r3, 800a1c6 <__ascii_mbtowc+0x1e>
 800a1b2:	7813      	ldrb	r3, [r2, #0]
 800a1b4:	600b      	str	r3, [r1, #0]
 800a1b6:	7812      	ldrb	r2, [r2, #0]
 800a1b8:	1e10      	subs	r0, r2, #0
 800a1ba:	bf18      	it	ne
 800a1bc:	2001      	movne	r0, #1
 800a1be:	b002      	add	sp, #8
 800a1c0:	4770      	bx	lr
 800a1c2:	4610      	mov	r0, r2
 800a1c4:	e7fb      	b.n	800a1be <__ascii_mbtowc+0x16>
 800a1c6:	f06f 0001 	mvn.w	r0, #1
 800a1ca:	e7f8      	b.n	800a1be <__ascii_mbtowc+0x16>

0800a1cc <memcpy>:
 800a1cc:	440a      	add	r2, r1
 800a1ce:	4291      	cmp	r1, r2
 800a1d0:	f100 33ff 	add.w	r3, r0, #4294967295
 800a1d4:	d100      	bne.n	800a1d8 <memcpy+0xc>
 800a1d6:	4770      	bx	lr
 800a1d8:	b510      	push	{r4, lr}
 800a1da:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a1de:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a1e2:	4291      	cmp	r1, r2
 800a1e4:	d1f9      	bne.n	800a1da <memcpy+0xe>
 800a1e6:	bd10      	pop	{r4, pc}

0800a1e8 <_Balloc>:
 800a1e8:	b570      	push	{r4, r5, r6, lr}
 800a1ea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a1ec:	4604      	mov	r4, r0
 800a1ee:	460d      	mov	r5, r1
 800a1f0:	b976      	cbnz	r6, 800a210 <_Balloc+0x28>
 800a1f2:	2010      	movs	r0, #16
 800a1f4:	f001 fd08 	bl	800bc08 <malloc>
 800a1f8:	4602      	mov	r2, r0
 800a1fa:	6260      	str	r0, [r4, #36]	; 0x24
 800a1fc:	b920      	cbnz	r0, 800a208 <_Balloc+0x20>
 800a1fe:	4b18      	ldr	r3, [pc, #96]	; (800a260 <_Balloc+0x78>)
 800a200:	4818      	ldr	r0, [pc, #96]	; (800a264 <_Balloc+0x7c>)
 800a202:	2166      	movs	r1, #102	; 0x66
 800a204:	f001 fcae 	bl	800bb64 <__assert_func>
 800a208:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a20c:	6006      	str	r6, [r0, #0]
 800a20e:	60c6      	str	r6, [r0, #12]
 800a210:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a212:	68f3      	ldr	r3, [r6, #12]
 800a214:	b183      	cbz	r3, 800a238 <_Balloc+0x50>
 800a216:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a218:	68db      	ldr	r3, [r3, #12]
 800a21a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a21e:	b9b8      	cbnz	r0, 800a250 <_Balloc+0x68>
 800a220:	2101      	movs	r1, #1
 800a222:	fa01 f605 	lsl.w	r6, r1, r5
 800a226:	1d72      	adds	r2, r6, #5
 800a228:	0092      	lsls	r2, r2, #2
 800a22a:	4620      	mov	r0, r4
 800a22c:	f000 fc97 	bl	800ab5e <_calloc_r>
 800a230:	b160      	cbz	r0, 800a24c <_Balloc+0x64>
 800a232:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a236:	e00e      	b.n	800a256 <_Balloc+0x6e>
 800a238:	2221      	movs	r2, #33	; 0x21
 800a23a:	2104      	movs	r1, #4
 800a23c:	4620      	mov	r0, r4
 800a23e:	f000 fc8e 	bl	800ab5e <_calloc_r>
 800a242:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a244:	60f0      	str	r0, [r6, #12]
 800a246:	68db      	ldr	r3, [r3, #12]
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d1e4      	bne.n	800a216 <_Balloc+0x2e>
 800a24c:	2000      	movs	r0, #0
 800a24e:	bd70      	pop	{r4, r5, r6, pc}
 800a250:	6802      	ldr	r2, [r0, #0]
 800a252:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a256:	2300      	movs	r3, #0
 800a258:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a25c:	e7f7      	b.n	800a24e <_Balloc+0x66>
 800a25e:	bf00      	nop
 800a260:	0800cd34 	.word	0x0800cd34
 800a264:	0800cd4b 	.word	0x0800cd4b

0800a268 <_Bfree>:
 800a268:	b570      	push	{r4, r5, r6, lr}
 800a26a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a26c:	4605      	mov	r5, r0
 800a26e:	460c      	mov	r4, r1
 800a270:	b976      	cbnz	r6, 800a290 <_Bfree+0x28>
 800a272:	2010      	movs	r0, #16
 800a274:	f001 fcc8 	bl	800bc08 <malloc>
 800a278:	4602      	mov	r2, r0
 800a27a:	6268      	str	r0, [r5, #36]	; 0x24
 800a27c:	b920      	cbnz	r0, 800a288 <_Bfree+0x20>
 800a27e:	4b09      	ldr	r3, [pc, #36]	; (800a2a4 <_Bfree+0x3c>)
 800a280:	4809      	ldr	r0, [pc, #36]	; (800a2a8 <_Bfree+0x40>)
 800a282:	218a      	movs	r1, #138	; 0x8a
 800a284:	f001 fc6e 	bl	800bb64 <__assert_func>
 800a288:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a28c:	6006      	str	r6, [r0, #0]
 800a28e:	60c6      	str	r6, [r0, #12]
 800a290:	b13c      	cbz	r4, 800a2a2 <_Bfree+0x3a>
 800a292:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a294:	6862      	ldr	r2, [r4, #4]
 800a296:	68db      	ldr	r3, [r3, #12]
 800a298:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a29c:	6021      	str	r1, [r4, #0]
 800a29e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2a2:	bd70      	pop	{r4, r5, r6, pc}
 800a2a4:	0800cd34 	.word	0x0800cd34
 800a2a8:	0800cd4b 	.word	0x0800cd4b

0800a2ac <__multadd>:
 800a2ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2b0:	690e      	ldr	r6, [r1, #16]
 800a2b2:	4607      	mov	r7, r0
 800a2b4:	4698      	mov	r8, r3
 800a2b6:	460c      	mov	r4, r1
 800a2b8:	f101 0014 	add.w	r0, r1, #20
 800a2bc:	2300      	movs	r3, #0
 800a2be:	6805      	ldr	r5, [r0, #0]
 800a2c0:	b2a9      	uxth	r1, r5
 800a2c2:	fb02 8101 	mla	r1, r2, r1, r8
 800a2c6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a2ca:	0c2d      	lsrs	r5, r5, #16
 800a2cc:	fb02 c505 	mla	r5, r2, r5, ip
 800a2d0:	b289      	uxth	r1, r1
 800a2d2:	3301      	adds	r3, #1
 800a2d4:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a2d8:	429e      	cmp	r6, r3
 800a2da:	f840 1b04 	str.w	r1, [r0], #4
 800a2de:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a2e2:	dcec      	bgt.n	800a2be <__multadd+0x12>
 800a2e4:	f1b8 0f00 	cmp.w	r8, #0
 800a2e8:	d022      	beq.n	800a330 <__multadd+0x84>
 800a2ea:	68a3      	ldr	r3, [r4, #8]
 800a2ec:	42b3      	cmp	r3, r6
 800a2ee:	dc19      	bgt.n	800a324 <__multadd+0x78>
 800a2f0:	6861      	ldr	r1, [r4, #4]
 800a2f2:	4638      	mov	r0, r7
 800a2f4:	3101      	adds	r1, #1
 800a2f6:	f7ff ff77 	bl	800a1e8 <_Balloc>
 800a2fa:	4605      	mov	r5, r0
 800a2fc:	b928      	cbnz	r0, 800a30a <__multadd+0x5e>
 800a2fe:	4602      	mov	r2, r0
 800a300:	4b0d      	ldr	r3, [pc, #52]	; (800a338 <__multadd+0x8c>)
 800a302:	480e      	ldr	r0, [pc, #56]	; (800a33c <__multadd+0x90>)
 800a304:	21b5      	movs	r1, #181	; 0xb5
 800a306:	f001 fc2d 	bl	800bb64 <__assert_func>
 800a30a:	6922      	ldr	r2, [r4, #16]
 800a30c:	3202      	adds	r2, #2
 800a30e:	f104 010c 	add.w	r1, r4, #12
 800a312:	0092      	lsls	r2, r2, #2
 800a314:	300c      	adds	r0, #12
 800a316:	f7ff ff59 	bl	800a1cc <memcpy>
 800a31a:	4621      	mov	r1, r4
 800a31c:	4638      	mov	r0, r7
 800a31e:	f7ff ffa3 	bl	800a268 <_Bfree>
 800a322:	462c      	mov	r4, r5
 800a324:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a328:	3601      	adds	r6, #1
 800a32a:	f8c3 8014 	str.w	r8, [r3, #20]
 800a32e:	6126      	str	r6, [r4, #16]
 800a330:	4620      	mov	r0, r4
 800a332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a336:	bf00      	nop
 800a338:	0800cca4 	.word	0x0800cca4
 800a33c:	0800cd4b 	.word	0x0800cd4b

0800a340 <__s2b>:
 800a340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a344:	460c      	mov	r4, r1
 800a346:	4615      	mov	r5, r2
 800a348:	461f      	mov	r7, r3
 800a34a:	2209      	movs	r2, #9
 800a34c:	3308      	adds	r3, #8
 800a34e:	4606      	mov	r6, r0
 800a350:	fb93 f3f2 	sdiv	r3, r3, r2
 800a354:	2100      	movs	r1, #0
 800a356:	2201      	movs	r2, #1
 800a358:	429a      	cmp	r2, r3
 800a35a:	db09      	blt.n	800a370 <__s2b+0x30>
 800a35c:	4630      	mov	r0, r6
 800a35e:	f7ff ff43 	bl	800a1e8 <_Balloc>
 800a362:	b940      	cbnz	r0, 800a376 <__s2b+0x36>
 800a364:	4602      	mov	r2, r0
 800a366:	4b19      	ldr	r3, [pc, #100]	; (800a3cc <__s2b+0x8c>)
 800a368:	4819      	ldr	r0, [pc, #100]	; (800a3d0 <__s2b+0x90>)
 800a36a:	21ce      	movs	r1, #206	; 0xce
 800a36c:	f001 fbfa 	bl	800bb64 <__assert_func>
 800a370:	0052      	lsls	r2, r2, #1
 800a372:	3101      	adds	r1, #1
 800a374:	e7f0      	b.n	800a358 <__s2b+0x18>
 800a376:	9b08      	ldr	r3, [sp, #32]
 800a378:	6143      	str	r3, [r0, #20]
 800a37a:	2d09      	cmp	r5, #9
 800a37c:	f04f 0301 	mov.w	r3, #1
 800a380:	6103      	str	r3, [r0, #16]
 800a382:	dd16      	ble.n	800a3b2 <__s2b+0x72>
 800a384:	f104 0909 	add.w	r9, r4, #9
 800a388:	46c8      	mov	r8, r9
 800a38a:	442c      	add	r4, r5
 800a38c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a390:	4601      	mov	r1, r0
 800a392:	3b30      	subs	r3, #48	; 0x30
 800a394:	220a      	movs	r2, #10
 800a396:	4630      	mov	r0, r6
 800a398:	f7ff ff88 	bl	800a2ac <__multadd>
 800a39c:	45a0      	cmp	r8, r4
 800a39e:	d1f5      	bne.n	800a38c <__s2b+0x4c>
 800a3a0:	f1a5 0408 	sub.w	r4, r5, #8
 800a3a4:	444c      	add	r4, r9
 800a3a6:	1b2d      	subs	r5, r5, r4
 800a3a8:	1963      	adds	r3, r4, r5
 800a3aa:	42bb      	cmp	r3, r7
 800a3ac:	db04      	blt.n	800a3b8 <__s2b+0x78>
 800a3ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b2:	340a      	adds	r4, #10
 800a3b4:	2509      	movs	r5, #9
 800a3b6:	e7f6      	b.n	800a3a6 <__s2b+0x66>
 800a3b8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3bc:	4601      	mov	r1, r0
 800a3be:	3b30      	subs	r3, #48	; 0x30
 800a3c0:	220a      	movs	r2, #10
 800a3c2:	4630      	mov	r0, r6
 800a3c4:	f7ff ff72 	bl	800a2ac <__multadd>
 800a3c8:	e7ee      	b.n	800a3a8 <__s2b+0x68>
 800a3ca:	bf00      	nop
 800a3cc:	0800cca4 	.word	0x0800cca4
 800a3d0:	0800cd4b 	.word	0x0800cd4b

0800a3d4 <__hi0bits>:
 800a3d4:	0c03      	lsrs	r3, r0, #16
 800a3d6:	041b      	lsls	r3, r3, #16
 800a3d8:	b9d3      	cbnz	r3, 800a410 <__hi0bits+0x3c>
 800a3da:	0400      	lsls	r0, r0, #16
 800a3dc:	2310      	movs	r3, #16
 800a3de:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a3e2:	bf04      	itt	eq
 800a3e4:	0200      	lsleq	r0, r0, #8
 800a3e6:	3308      	addeq	r3, #8
 800a3e8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a3ec:	bf04      	itt	eq
 800a3ee:	0100      	lsleq	r0, r0, #4
 800a3f0:	3304      	addeq	r3, #4
 800a3f2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a3f6:	bf04      	itt	eq
 800a3f8:	0080      	lsleq	r0, r0, #2
 800a3fa:	3302      	addeq	r3, #2
 800a3fc:	2800      	cmp	r0, #0
 800a3fe:	db05      	blt.n	800a40c <__hi0bits+0x38>
 800a400:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a404:	f103 0301 	add.w	r3, r3, #1
 800a408:	bf08      	it	eq
 800a40a:	2320      	moveq	r3, #32
 800a40c:	4618      	mov	r0, r3
 800a40e:	4770      	bx	lr
 800a410:	2300      	movs	r3, #0
 800a412:	e7e4      	b.n	800a3de <__hi0bits+0xa>

0800a414 <__lo0bits>:
 800a414:	6803      	ldr	r3, [r0, #0]
 800a416:	f013 0207 	ands.w	r2, r3, #7
 800a41a:	4601      	mov	r1, r0
 800a41c:	d00b      	beq.n	800a436 <__lo0bits+0x22>
 800a41e:	07da      	lsls	r2, r3, #31
 800a420:	d424      	bmi.n	800a46c <__lo0bits+0x58>
 800a422:	0798      	lsls	r0, r3, #30
 800a424:	bf49      	itett	mi
 800a426:	085b      	lsrmi	r3, r3, #1
 800a428:	089b      	lsrpl	r3, r3, #2
 800a42a:	2001      	movmi	r0, #1
 800a42c:	600b      	strmi	r3, [r1, #0]
 800a42e:	bf5c      	itt	pl
 800a430:	600b      	strpl	r3, [r1, #0]
 800a432:	2002      	movpl	r0, #2
 800a434:	4770      	bx	lr
 800a436:	b298      	uxth	r0, r3
 800a438:	b9b0      	cbnz	r0, 800a468 <__lo0bits+0x54>
 800a43a:	0c1b      	lsrs	r3, r3, #16
 800a43c:	2010      	movs	r0, #16
 800a43e:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a442:	bf04      	itt	eq
 800a444:	0a1b      	lsreq	r3, r3, #8
 800a446:	3008      	addeq	r0, #8
 800a448:	071a      	lsls	r2, r3, #28
 800a44a:	bf04      	itt	eq
 800a44c:	091b      	lsreq	r3, r3, #4
 800a44e:	3004      	addeq	r0, #4
 800a450:	079a      	lsls	r2, r3, #30
 800a452:	bf04      	itt	eq
 800a454:	089b      	lsreq	r3, r3, #2
 800a456:	3002      	addeq	r0, #2
 800a458:	07da      	lsls	r2, r3, #31
 800a45a:	d403      	bmi.n	800a464 <__lo0bits+0x50>
 800a45c:	085b      	lsrs	r3, r3, #1
 800a45e:	f100 0001 	add.w	r0, r0, #1
 800a462:	d005      	beq.n	800a470 <__lo0bits+0x5c>
 800a464:	600b      	str	r3, [r1, #0]
 800a466:	4770      	bx	lr
 800a468:	4610      	mov	r0, r2
 800a46a:	e7e8      	b.n	800a43e <__lo0bits+0x2a>
 800a46c:	2000      	movs	r0, #0
 800a46e:	4770      	bx	lr
 800a470:	2020      	movs	r0, #32
 800a472:	4770      	bx	lr

0800a474 <__i2b>:
 800a474:	b510      	push	{r4, lr}
 800a476:	460c      	mov	r4, r1
 800a478:	2101      	movs	r1, #1
 800a47a:	f7ff feb5 	bl	800a1e8 <_Balloc>
 800a47e:	4602      	mov	r2, r0
 800a480:	b928      	cbnz	r0, 800a48e <__i2b+0x1a>
 800a482:	4b05      	ldr	r3, [pc, #20]	; (800a498 <__i2b+0x24>)
 800a484:	4805      	ldr	r0, [pc, #20]	; (800a49c <__i2b+0x28>)
 800a486:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a48a:	f001 fb6b 	bl	800bb64 <__assert_func>
 800a48e:	2301      	movs	r3, #1
 800a490:	6144      	str	r4, [r0, #20]
 800a492:	6103      	str	r3, [r0, #16]
 800a494:	bd10      	pop	{r4, pc}
 800a496:	bf00      	nop
 800a498:	0800cca4 	.word	0x0800cca4
 800a49c:	0800cd4b 	.word	0x0800cd4b

0800a4a0 <__multiply>:
 800a4a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4a4:	4614      	mov	r4, r2
 800a4a6:	690a      	ldr	r2, [r1, #16]
 800a4a8:	6923      	ldr	r3, [r4, #16]
 800a4aa:	429a      	cmp	r2, r3
 800a4ac:	bfb8      	it	lt
 800a4ae:	460b      	movlt	r3, r1
 800a4b0:	460d      	mov	r5, r1
 800a4b2:	bfbc      	itt	lt
 800a4b4:	4625      	movlt	r5, r4
 800a4b6:	461c      	movlt	r4, r3
 800a4b8:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a4bc:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a4c0:	68ab      	ldr	r3, [r5, #8]
 800a4c2:	6869      	ldr	r1, [r5, #4]
 800a4c4:	eb0a 0709 	add.w	r7, sl, r9
 800a4c8:	42bb      	cmp	r3, r7
 800a4ca:	b085      	sub	sp, #20
 800a4cc:	bfb8      	it	lt
 800a4ce:	3101      	addlt	r1, #1
 800a4d0:	f7ff fe8a 	bl	800a1e8 <_Balloc>
 800a4d4:	b930      	cbnz	r0, 800a4e4 <__multiply+0x44>
 800a4d6:	4602      	mov	r2, r0
 800a4d8:	4b42      	ldr	r3, [pc, #264]	; (800a5e4 <__multiply+0x144>)
 800a4da:	4843      	ldr	r0, [pc, #268]	; (800a5e8 <__multiply+0x148>)
 800a4dc:	f240 115d 	movw	r1, #349	; 0x15d
 800a4e0:	f001 fb40 	bl	800bb64 <__assert_func>
 800a4e4:	f100 0614 	add.w	r6, r0, #20
 800a4e8:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a4ec:	4633      	mov	r3, r6
 800a4ee:	2200      	movs	r2, #0
 800a4f0:	4543      	cmp	r3, r8
 800a4f2:	d31e      	bcc.n	800a532 <__multiply+0x92>
 800a4f4:	f105 0c14 	add.w	ip, r5, #20
 800a4f8:	f104 0314 	add.w	r3, r4, #20
 800a4fc:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a500:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a504:	9202      	str	r2, [sp, #8]
 800a506:	ebac 0205 	sub.w	r2, ip, r5
 800a50a:	3a15      	subs	r2, #21
 800a50c:	f022 0203 	bic.w	r2, r2, #3
 800a510:	3204      	adds	r2, #4
 800a512:	f105 0115 	add.w	r1, r5, #21
 800a516:	458c      	cmp	ip, r1
 800a518:	bf38      	it	cc
 800a51a:	2204      	movcc	r2, #4
 800a51c:	9201      	str	r2, [sp, #4]
 800a51e:	9a02      	ldr	r2, [sp, #8]
 800a520:	9303      	str	r3, [sp, #12]
 800a522:	429a      	cmp	r2, r3
 800a524:	d808      	bhi.n	800a538 <__multiply+0x98>
 800a526:	2f00      	cmp	r7, #0
 800a528:	dc55      	bgt.n	800a5d6 <__multiply+0x136>
 800a52a:	6107      	str	r7, [r0, #16]
 800a52c:	b005      	add	sp, #20
 800a52e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a532:	f843 2b04 	str.w	r2, [r3], #4
 800a536:	e7db      	b.n	800a4f0 <__multiply+0x50>
 800a538:	f8b3 a000 	ldrh.w	sl, [r3]
 800a53c:	f1ba 0f00 	cmp.w	sl, #0
 800a540:	d020      	beq.n	800a584 <__multiply+0xe4>
 800a542:	f105 0e14 	add.w	lr, r5, #20
 800a546:	46b1      	mov	r9, r6
 800a548:	2200      	movs	r2, #0
 800a54a:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a54e:	f8d9 b000 	ldr.w	fp, [r9]
 800a552:	b2a1      	uxth	r1, r4
 800a554:	fa1f fb8b 	uxth.w	fp, fp
 800a558:	fb0a b101 	mla	r1, sl, r1, fp
 800a55c:	4411      	add	r1, r2
 800a55e:	f8d9 2000 	ldr.w	r2, [r9]
 800a562:	0c24      	lsrs	r4, r4, #16
 800a564:	0c12      	lsrs	r2, r2, #16
 800a566:	fb0a 2404 	mla	r4, sl, r4, r2
 800a56a:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a56e:	b289      	uxth	r1, r1
 800a570:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a574:	45f4      	cmp	ip, lr
 800a576:	f849 1b04 	str.w	r1, [r9], #4
 800a57a:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a57e:	d8e4      	bhi.n	800a54a <__multiply+0xaa>
 800a580:	9901      	ldr	r1, [sp, #4]
 800a582:	5072      	str	r2, [r6, r1]
 800a584:	9a03      	ldr	r2, [sp, #12]
 800a586:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a58a:	3304      	adds	r3, #4
 800a58c:	f1b9 0f00 	cmp.w	r9, #0
 800a590:	d01f      	beq.n	800a5d2 <__multiply+0x132>
 800a592:	6834      	ldr	r4, [r6, #0]
 800a594:	f105 0114 	add.w	r1, r5, #20
 800a598:	46b6      	mov	lr, r6
 800a59a:	f04f 0a00 	mov.w	sl, #0
 800a59e:	880a      	ldrh	r2, [r1, #0]
 800a5a0:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a5a4:	fb09 b202 	mla	r2, r9, r2, fp
 800a5a8:	4492      	add	sl, r2
 800a5aa:	b2a4      	uxth	r4, r4
 800a5ac:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a5b0:	f84e 4b04 	str.w	r4, [lr], #4
 800a5b4:	f851 4b04 	ldr.w	r4, [r1], #4
 800a5b8:	f8be 2000 	ldrh.w	r2, [lr]
 800a5bc:	0c24      	lsrs	r4, r4, #16
 800a5be:	fb09 2404 	mla	r4, r9, r4, r2
 800a5c2:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a5c6:	458c      	cmp	ip, r1
 800a5c8:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a5cc:	d8e7      	bhi.n	800a59e <__multiply+0xfe>
 800a5ce:	9a01      	ldr	r2, [sp, #4]
 800a5d0:	50b4      	str	r4, [r6, r2]
 800a5d2:	3604      	adds	r6, #4
 800a5d4:	e7a3      	b.n	800a51e <__multiply+0x7e>
 800a5d6:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a5da:	2b00      	cmp	r3, #0
 800a5dc:	d1a5      	bne.n	800a52a <__multiply+0x8a>
 800a5de:	3f01      	subs	r7, #1
 800a5e0:	e7a1      	b.n	800a526 <__multiply+0x86>
 800a5e2:	bf00      	nop
 800a5e4:	0800cca4 	.word	0x0800cca4
 800a5e8:	0800cd4b 	.word	0x0800cd4b

0800a5ec <__pow5mult>:
 800a5ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a5f0:	4615      	mov	r5, r2
 800a5f2:	f012 0203 	ands.w	r2, r2, #3
 800a5f6:	4606      	mov	r6, r0
 800a5f8:	460f      	mov	r7, r1
 800a5fa:	d007      	beq.n	800a60c <__pow5mult+0x20>
 800a5fc:	4c25      	ldr	r4, [pc, #148]	; (800a694 <__pow5mult+0xa8>)
 800a5fe:	3a01      	subs	r2, #1
 800a600:	2300      	movs	r3, #0
 800a602:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a606:	f7ff fe51 	bl	800a2ac <__multadd>
 800a60a:	4607      	mov	r7, r0
 800a60c:	10ad      	asrs	r5, r5, #2
 800a60e:	d03d      	beq.n	800a68c <__pow5mult+0xa0>
 800a610:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a612:	b97c      	cbnz	r4, 800a634 <__pow5mult+0x48>
 800a614:	2010      	movs	r0, #16
 800a616:	f001 faf7 	bl	800bc08 <malloc>
 800a61a:	4602      	mov	r2, r0
 800a61c:	6270      	str	r0, [r6, #36]	; 0x24
 800a61e:	b928      	cbnz	r0, 800a62c <__pow5mult+0x40>
 800a620:	4b1d      	ldr	r3, [pc, #116]	; (800a698 <__pow5mult+0xac>)
 800a622:	481e      	ldr	r0, [pc, #120]	; (800a69c <__pow5mult+0xb0>)
 800a624:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a628:	f001 fa9c 	bl	800bb64 <__assert_func>
 800a62c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a630:	6004      	str	r4, [r0, #0]
 800a632:	60c4      	str	r4, [r0, #12]
 800a634:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a638:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a63c:	b94c      	cbnz	r4, 800a652 <__pow5mult+0x66>
 800a63e:	f240 2171 	movw	r1, #625	; 0x271
 800a642:	4630      	mov	r0, r6
 800a644:	f7ff ff16 	bl	800a474 <__i2b>
 800a648:	2300      	movs	r3, #0
 800a64a:	f8c8 0008 	str.w	r0, [r8, #8]
 800a64e:	4604      	mov	r4, r0
 800a650:	6003      	str	r3, [r0, #0]
 800a652:	f04f 0900 	mov.w	r9, #0
 800a656:	07eb      	lsls	r3, r5, #31
 800a658:	d50a      	bpl.n	800a670 <__pow5mult+0x84>
 800a65a:	4639      	mov	r1, r7
 800a65c:	4622      	mov	r2, r4
 800a65e:	4630      	mov	r0, r6
 800a660:	f7ff ff1e 	bl	800a4a0 <__multiply>
 800a664:	4639      	mov	r1, r7
 800a666:	4680      	mov	r8, r0
 800a668:	4630      	mov	r0, r6
 800a66a:	f7ff fdfd 	bl	800a268 <_Bfree>
 800a66e:	4647      	mov	r7, r8
 800a670:	106d      	asrs	r5, r5, #1
 800a672:	d00b      	beq.n	800a68c <__pow5mult+0xa0>
 800a674:	6820      	ldr	r0, [r4, #0]
 800a676:	b938      	cbnz	r0, 800a688 <__pow5mult+0x9c>
 800a678:	4622      	mov	r2, r4
 800a67a:	4621      	mov	r1, r4
 800a67c:	4630      	mov	r0, r6
 800a67e:	f7ff ff0f 	bl	800a4a0 <__multiply>
 800a682:	6020      	str	r0, [r4, #0]
 800a684:	f8c0 9000 	str.w	r9, [r0]
 800a688:	4604      	mov	r4, r0
 800a68a:	e7e4      	b.n	800a656 <__pow5mult+0x6a>
 800a68c:	4638      	mov	r0, r7
 800a68e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a692:	bf00      	nop
 800a694:	0800cea0 	.word	0x0800cea0
 800a698:	0800cd34 	.word	0x0800cd34
 800a69c:	0800cd4b 	.word	0x0800cd4b

0800a6a0 <__lshift>:
 800a6a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6a4:	460c      	mov	r4, r1
 800a6a6:	6849      	ldr	r1, [r1, #4]
 800a6a8:	6923      	ldr	r3, [r4, #16]
 800a6aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6ae:	68a3      	ldr	r3, [r4, #8]
 800a6b0:	4607      	mov	r7, r0
 800a6b2:	4691      	mov	r9, r2
 800a6b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6b8:	f108 0601 	add.w	r6, r8, #1
 800a6bc:	42b3      	cmp	r3, r6
 800a6be:	db0b      	blt.n	800a6d8 <__lshift+0x38>
 800a6c0:	4638      	mov	r0, r7
 800a6c2:	f7ff fd91 	bl	800a1e8 <_Balloc>
 800a6c6:	4605      	mov	r5, r0
 800a6c8:	b948      	cbnz	r0, 800a6de <__lshift+0x3e>
 800a6ca:	4602      	mov	r2, r0
 800a6cc:	4b28      	ldr	r3, [pc, #160]	; (800a770 <__lshift+0xd0>)
 800a6ce:	4829      	ldr	r0, [pc, #164]	; (800a774 <__lshift+0xd4>)
 800a6d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a6d4:	f001 fa46 	bl	800bb64 <__assert_func>
 800a6d8:	3101      	adds	r1, #1
 800a6da:	005b      	lsls	r3, r3, #1
 800a6dc:	e7ee      	b.n	800a6bc <__lshift+0x1c>
 800a6de:	2300      	movs	r3, #0
 800a6e0:	f100 0114 	add.w	r1, r0, #20
 800a6e4:	f100 0210 	add.w	r2, r0, #16
 800a6e8:	4618      	mov	r0, r3
 800a6ea:	4553      	cmp	r3, sl
 800a6ec:	db33      	blt.n	800a756 <__lshift+0xb6>
 800a6ee:	6920      	ldr	r0, [r4, #16]
 800a6f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a6f4:	f104 0314 	add.w	r3, r4, #20
 800a6f8:	f019 091f 	ands.w	r9, r9, #31
 800a6fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a700:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a704:	d02b      	beq.n	800a75e <__lshift+0xbe>
 800a706:	f1c9 0e20 	rsb	lr, r9, #32
 800a70a:	468a      	mov	sl, r1
 800a70c:	2200      	movs	r2, #0
 800a70e:	6818      	ldr	r0, [r3, #0]
 800a710:	fa00 f009 	lsl.w	r0, r0, r9
 800a714:	4302      	orrs	r2, r0
 800a716:	f84a 2b04 	str.w	r2, [sl], #4
 800a71a:	f853 2b04 	ldr.w	r2, [r3], #4
 800a71e:	459c      	cmp	ip, r3
 800a720:	fa22 f20e 	lsr.w	r2, r2, lr
 800a724:	d8f3      	bhi.n	800a70e <__lshift+0x6e>
 800a726:	ebac 0304 	sub.w	r3, ip, r4
 800a72a:	3b15      	subs	r3, #21
 800a72c:	f023 0303 	bic.w	r3, r3, #3
 800a730:	3304      	adds	r3, #4
 800a732:	f104 0015 	add.w	r0, r4, #21
 800a736:	4584      	cmp	ip, r0
 800a738:	bf38      	it	cc
 800a73a:	2304      	movcc	r3, #4
 800a73c:	50ca      	str	r2, [r1, r3]
 800a73e:	b10a      	cbz	r2, 800a744 <__lshift+0xa4>
 800a740:	f108 0602 	add.w	r6, r8, #2
 800a744:	3e01      	subs	r6, #1
 800a746:	4638      	mov	r0, r7
 800a748:	612e      	str	r6, [r5, #16]
 800a74a:	4621      	mov	r1, r4
 800a74c:	f7ff fd8c 	bl	800a268 <_Bfree>
 800a750:	4628      	mov	r0, r5
 800a752:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a756:	f842 0f04 	str.w	r0, [r2, #4]!
 800a75a:	3301      	adds	r3, #1
 800a75c:	e7c5      	b.n	800a6ea <__lshift+0x4a>
 800a75e:	3904      	subs	r1, #4
 800a760:	f853 2b04 	ldr.w	r2, [r3], #4
 800a764:	f841 2f04 	str.w	r2, [r1, #4]!
 800a768:	459c      	cmp	ip, r3
 800a76a:	d8f9      	bhi.n	800a760 <__lshift+0xc0>
 800a76c:	e7ea      	b.n	800a744 <__lshift+0xa4>
 800a76e:	bf00      	nop
 800a770:	0800cca4 	.word	0x0800cca4
 800a774:	0800cd4b 	.word	0x0800cd4b

0800a778 <__mcmp>:
 800a778:	b530      	push	{r4, r5, lr}
 800a77a:	6902      	ldr	r2, [r0, #16]
 800a77c:	690c      	ldr	r4, [r1, #16]
 800a77e:	1b12      	subs	r2, r2, r4
 800a780:	d10e      	bne.n	800a7a0 <__mcmp+0x28>
 800a782:	f100 0314 	add.w	r3, r0, #20
 800a786:	3114      	adds	r1, #20
 800a788:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a78c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a790:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a794:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a798:	42a5      	cmp	r5, r4
 800a79a:	d003      	beq.n	800a7a4 <__mcmp+0x2c>
 800a79c:	d305      	bcc.n	800a7aa <__mcmp+0x32>
 800a79e:	2201      	movs	r2, #1
 800a7a0:	4610      	mov	r0, r2
 800a7a2:	bd30      	pop	{r4, r5, pc}
 800a7a4:	4283      	cmp	r3, r0
 800a7a6:	d3f3      	bcc.n	800a790 <__mcmp+0x18>
 800a7a8:	e7fa      	b.n	800a7a0 <__mcmp+0x28>
 800a7aa:	f04f 32ff 	mov.w	r2, #4294967295
 800a7ae:	e7f7      	b.n	800a7a0 <__mcmp+0x28>

0800a7b0 <__mdiff>:
 800a7b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7b4:	460c      	mov	r4, r1
 800a7b6:	4606      	mov	r6, r0
 800a7b8:	4611      	mov	r1, r2
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	4617      	mov	r7, r2
 800a7be:	f7ff ffdb 	bl	800a778 <__mcmp>
 800a7c2:	1e05      	subs	r5, r0, #0
 800a7c4:	d110      	bne.n	800a7e8 <__mdiff+0x38>
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	4630      	mov	r0, r6
 800a7ca:	f7ff fd0d 	bl	800a1e8 <_Balloc>
 800a7ce:	b930      	cbnz	r0, 800a7de <__mdiff+0x2e>
 800a7d0:	4b39      	ldr	r3, [pc, #228]	; (800a8b8 <__mdiff+0x108>)
 800a7d2:	4602      	mov	r2, r0
 800a7d4:	f240 2132 	movw	r1, #562	; 0x232
 800a7d8:	4838      	ldr	r0, [pc, #224]	; (800a8bc <__mdiff+0x10c>)
 800a7da:	f001 f9c3 	bl	800bb64 <__assert_func>
 800a7de:	2301      	movs	r3, #1
 800a7e0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a7e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a7e8:	bfa4      	itt	ge
 800a7ea:	463b      	movge	r3, r7
 800a7ec:	4627      	movge	r7, r4
 800a7ee:	4630      	mov	r0, r6
 800a7f0:	6879      	ldr	r1, [r7, #4]
 800a7f2:	bfa6      	itte	ge
 800a7f4:	461c      	movge	r4, r3
 800a7f6:	2500      	movge	r5, #0
 800a7f8:	2501      	movlt	r5, #1
 800a7fa:	f7ff fcf5 	bl	800a1e8 <_Balloc>
 800a7fe:	b920      	cbnz	r0, 800a80a <__mdiff+0x5a>
 800a800:	4b2d      	ldr	r3, [pc, #180]	; (800a8b8 <__mdiff+0x108>)
 800a802:	4602      	mov	r2, r0
 800a804:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a808:	e7e6      	b.n	800a7d8 <__mdiff+0x28>
 800a80a:	693e      	ldr	r6, [r7, #16]
 800a80c:	60c5      	str	r5, [r0, #12]
 800a80e:	6925      	ldr	r5, [r4, #16]
 800a810:	f107 0114 	add.w	r1, r7, #20
 800a814:	f104 0914 	add.w	r9, r4, #20
 800a818:	f100 0e14 	add.w	lr, r0, #20
 800a81c:	f107 0210 	add.w	r2, r7, #16
 800a820:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a824:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a828:	46f2      	mov	sl, lr
 800a82a:	2700      	movs	r7, #0
 800a82c:	f859 3b04 	ldr.w	r3, [r9], #4
 800a830:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a834:	fa1f f883 	uxth.w	r8, r3
 800a838:	fa17 f78b 	uxtah	r7, r7, fp
 800a83c:	0c1b      	lsrs	r3, r3, #16
 800a83e:	eba7 0808 	sub.w	r8, r7, r8
 800a842:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a846:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a84a:	fa1f f888 	uxth.w	r8, r8
 800a84e:	141f      	asrs	r7, r3, #16
 800a850:	454d      	cmp	r5, r9
 800a852:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a856:	f84a 3b04 	str.w	r3, [sl], #4
 800a85a:	d8e7      	bhi.n	800a82c <__mdiff+0x7c>
 800a85c:	1b2b      	subs	r3, r5, r4
 800a85e:	3b15      	subs	r3, #21
 800a860:	f023 0303 	bic.w	r3, r3, #3
 800a864:	3304      	adds	r3, #4
 800a866:	3415      	adds	r4, #21
 800a868:	42a5      	cmp	r5, r4
 800a86a:	bf38      	it	cc
 800a86c:	2304      	movcc	r3, #4
 800a86e:	4419      	add	r1, r3
 800a870:	4473      	add	r3, lr
 800a872:	469e      	mov	lr, r3
 800a874:	460d      	mov	r5, r1
 800a876:	4565      	cmp	r5, ip
 800a878:	d30e      	bcc.n	800a898 <__mdiff+0xe8>
 800a87a:	f10c 0203 	add.w	r2, ip, #3
 800a87e:	1a52      	subs	r2, r2, r1
 800a880:	f022 0203 	bic.w	r2, r2, #3
 800a884:	3903      	subs	r1, #3
 800a886:	458c      	cmp	ip, r1
 800a888:	bf38      	it	cc
 800a88a:	2200      	movcc	r2, #0
 800a88c:	441a      	add	r2, r3
 800a88e:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a892:	b17b      	cbz	r3, 800a8b4 <__mdiff+0x104>
 800a894:	6106      	str	r6, [r0, #16]
 800a896:	e7a5      	b.n	800a7e4 <__mdiff+0x34>
 800a898:	f855 8b04 	ldr.w	r8, [r5], #4
 800a89c:	fa17 f488 	uxtah	r4, r7, r8
 800a8a0:	1422      	asrs	r2, r4, #16
 800a8a2:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a8a6:	b2a4      	uxth	r4, r4
 800a8a8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8ac:	f84e 4b04 	str.w	r4, [lr], #4
 800a8b0:	1417      	asrs	r7, r2, #16
 800a8b2:	e7e0      	b.n	800a876 <__mdiff+0xc6>
 800a8b4:	3e01      	subs	r6, #1
 800a8b6:	e7ea      	b.n	800a88e <__mdiff+0xde>
 800a8b8:	0800cca4 	.word	0x0800cca4
 800a8bc:	0800cd4b 	.word	0x0800cd4b

0800a8c0 <__ulp>:
 800a8c0:	b082      	sub	sp, #8
 800a8c2:	ed8d 0b00 	vstr	d0, [sp]
 800a8c6:	9b01      	ldr	r3, [sp, #4]
 800a8c8:	4912      	ldr	r1, [pc, #72]	; (800a914 <__ulp+0x54>)
 800a8ca:	4019      	ands	r1, r3
 800a8cc:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a8d0:	2900      	cmp	r1, #0
 800a8d2:	dd05      	ble.n	800a8e0 <__ulp+0x20>
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	460b      	mov	r3, r1
 800a8d8:	ec43 2b10 	vmov	d0, r2, r3
 800a8dc:	b002      	add	sp, #8
 800a8de:	4770      	bx	lr
 800a8e0:	4249      	negs	r1, r1
 800a8e2:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a8e6:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a8ea:	f04f 0200 	mov.w	r2, #0
 800a8ee:	f04f 0300 	mov.w	r3, #0
 800a8f2:	da04      	bge.n	800a8fe <__ulp+0x3e>
 800a8f4:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a8f8:	fa41 f300 	asr.w	r3, r1, r0
 800a8fc:	e7ec      	b.n	800a8d8 <__ulp+0x18>
 800a8fe:	f1a0 0114 	sub.w	r1, r0, #20
 800a902:	291e      	cmp	r1, #30
 800a904:	bfda      	itte	le
 800a906:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a90a:	fa20 f101 	lsrle.w	r1, r0, r1
 800a90e:	2101      	movgt	r1, #1
 800a910:	460a      	mov	r2, r1
 800a912:	e7e1      	b.n	800a8d8 <__ulp+0x18>
 800a914:	7ff00000 	.word	0x7ff00000

0800a918 <__b2d>:
 800a918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a91a:	6905      	ldr	r5, [r0, #16]
 800a91c:	f100 0714 	add.w	r7, r0, #20
 800a920:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a924:	1f2e      	subs	r6, r5, #4
 800a926:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a92a:	4620      	mov	r0, r4
 800a92c:	f7ff fd52 	bl	800a3d4 <__hi0bits>
 800a930:	f1c0 0320 	rsb	r3, r0, #32
 800a934:	280a      	cmp	r0, #10
 800a936:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a9b4 <__b2d+0x9c>
 800a93a:	600b      	str	r3, [r1, #0]
 800a93c:	dc14      	bgt.n	800a968 <__b2d+0x50>
 800a93e:	f1c0 0e0b 	rsb	lr, r0, #11
 800a942:	fa24 f10e 	lsr.w	r1, r4, lr
 800a946:	42b7      	cmp	r7, r6
 800a948:	ea41 030c 	orr.w	r3, r1, ip
 800a94c:	bf34      	ite	cc
 800a94e:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a952:	2100      	movcs	r1, #0
 800a954:	3015      	adds	r0, #21
 800a956:	fa04 f000 	lsl.w	r0, r4, r0
 800a95a:	fa21 f10e 	lsr.w	r1, r1, lr
 800a95e:	ea40 0201 	orr.w	r2, r0, r1
 800a962:	ec43 2b10 	vmov	d0, r2, r3
 800a966:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a968:	42b7      	cmp	r7, r6
 800a96a:	bf3a      	itte	cc
 800a96c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a970:	f1a5 0608 	subcc.w	r6, r5, #8
 800a974:	2100      	movcs	r1, #0
 800a976:	380b      	subs	r0, #11
 800a978:	d017      	beq.n	800a9aa <__b2d+0x92>
 800a97a:	f1c0 0c20 	rsb	ip, r0, #32
 800a97e:	fa04 f500 	lsl.w	r5, r4, r0
 800a982:	42be      	cmp	r6, r7
 800a984:	fa21 f40c 	lsr.w	r4, r1, ip
 800a988:	ea45 0504 	orr.w	r5, r5, r4
 800a98c:	bf8c      	ite	hi
 800a98e:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a992:	2400      	movls	r4, #0
 800a994:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a998:	fa01 f000 	lsl.w	r0, r1, r0
 800a99c:	fa24 f40c 	lsr.w	r4, r4, ip
 800a9a0:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9a4:	ea40 0204 	orr.w	r2, r0, r4
 800a9a8:	e7db      	b.n	800a962 <__b2d+0x4a>
 800a9aa:	ea44 030c 	orr.w	r3, r4, ip
 800a9ae:	460a      	mov	r2, r1
 800a9b0:	e7d7      	b.n	800a962 <__b2d+0x4a>
 800a9b2:	bf00      	nop
 800a9b4:	3ff00000 	.word	0x3ff00000

0800a9b8 <__d2b>:
 800a9b8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9bc:	4689      	mov	r9, r1
 800a9be:	2101      	movs	r1, #1
 800a9c0:	ec57 6b10 	vmov	r6, r7, d0
 800a9c4:	4690      	mov	r8, r2
 800a9c6:	f7ff fc0f 	bl	800a1e8 <_Balloc>
 800a9ca:	4604      	mov	r4, r0
 800a9cc:	b930      	cbnz	r0, 800a9dc <__d2b+0x24>
 800a9ce:	4602      	mov	r2, r0
 800a9d0:	4b25      	ldr	r3, [pc, #148]	; (800aa68 <__d2b+0xb0>)
 800a9d2:	4826      	ldr	r0, [pc, #152]	; (800aa6c <__d2b+0xb4>)
 800a9d4:	f240 310a 	movw	r1, #778	; 0x30a
 800a9d8:	f001 f8c4 	bl	800bb64 <__assert_func>
 800a9dc:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800a9e0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800a9e4:	bb35      	cbnz	r5, 800aa34 <__d2b+0x7c>
 800a9e6:	2e00      	cmp	r6, #0
 800a9e8:	9301      	str	r3, [sp, #4]
 800a9ea:	d028      	beq.n	800aa3e <__d2b+0x86>
 800a9ec:	4668      	mov	r0, sp
 800a9ee:	9600      	str	r6, [sp, #0]
 800a9f0:	f7ff fd10 	bl	800a414 <__lo0bits>
 800a9f4:	9900      	ldr	r1, [sp, #0]
 800a9f6:	b300      	cbz	r0, 800aa3a <__d2b+0x82>
 800a9f8:	9a01      	ldr	r2, [sp, #4]
 800a9fa:	f1c0 0320 	rsb	r3, r0, #32
 800a9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800aa02:	430b      	orrs	r3, r1
 800aa04:	40c2      	lsrs	r2, r0
 800aa06:	6163      	str	r3, [r4, #20]
 800aa08:	9201      	str	r2, [sp, #4]
 800aa0a:	9b01      	ldr	r3, [sp, #4]
 800aa0c:	61a3      	str	r3, [r4, #24]
 800aa0e:	2b00      	cmp	r3, #0
 800aa10:	bf14      	ite	ne
 800aa12:	2202      	movne	r2, #2
 800aa14:	2201      	moveq	r2, #1
 800aa16:	6122      	str	r2, [r4, #16]
 800aa18:	b1d5      	cbz	r5, 800aa50 <__d2b+0x98>
 800aa1a:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa1e:	4405      	add	r5, r0
 800aa20:	f8c9 5000 	str.w	r5, [r9]
 800aa24:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa28:	f8c8 0000 	str.w	r0, [r8]
 800aa2c:	4620      	mov	r0, r4
 800aa2e:	b003      	add	sp, #12
 800aa30:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa38:	e7d5      	b.n	800a9e6 <__d2b+0x2e>
 800aa3a:	6161      	str	r1, [r4, #20]
 800aa3c:	e7e5      	b.n	800aa0a <__d2b+0x52>
 800aa3e:	a801      	add	r0, sp, #4
 800aa40:	f7ff fce8 	bl	800a414 <__lo0bits>
 800aa44:	9b01      	ldr	r3, [sp, #4]
 800aa46:	6163      	str	r3, [r4, #20]
 800aa48:	2201      	movs	r2, #1
 800aa4a:	6122      	str	r2, [r4, #16]
 800aa4c:	3020      	adds	r0, #32
 800aa4e:	e7e3      	b.n	800aa18 <__d2b+0x60>
 800aa50:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa54:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa58:	f8c9 0000 	str.w	r0, [r9]
 800aa5c:	6918      	ldr	r0, [r3, #16]
 800aa5e:	f7ff fcb9 	bl	800a3d4 <__hi0bits>
 800aa62:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa66:	e7df      	b.n	800aa28 <__d2b+0x70>
 800aa68:	0800cca4 	.word	0x0800cca4
 800aa6c:	0800cd4b 	.word	0x0800cd4b

0800aa70 <__ratio>:
 800aa70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa74:	4688      	mov	r8, r1
 800aa76:	4669      	mov	r1, sp
 800aa78:	4681      	mov	r9, r0
 800aa7a:	f7ff ff4d 	bl	800a918 <__b2d>
 800aa7e:	a901      	add	r1, sp, #4
 800aa80:	4640      	mov	r0, r8
 800aa82:	ec55 4b10 	vmov	r4, r5, d0
 800aa86:	f7ff ff47 	bl	800a918 <__b2d>
 800aa8a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aa8e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aa92:	eba3 0c02 	sub.w	ip, r3, r2
 800aa96:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aa9a:	1a9b      	subs	r3, r3, r2
 800aa9c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aaa0:	ec51 0b10 	vmov	r0, r1, d0
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	bfd6      	itet	le
 800aaa8:	460a      	movle	r2, r1
 800aaaa:	462a      	movgt	r2, r5
 800aaac:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aab0:	468b      	mov	fp, r1
 800aab2:	462f      	mov	r7, r5
 800aab4:	bfd4      	ite	le
 800aab6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aaba:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aabe:	4620      	mov	r0, r4
 800aac0:	ee10 2a10 	vmov	r2, s0
 800aac4:	465b      	mov	r3, fp
 800aac6:	4639      	mov	r1, r7
 800aac8:	f7f5 fec0 	bl	800084c <__aeabi_ddiv>
 800aacc:	ec41 0b10 	vmov	d0, r0, r1
 800aad0:	b003      	add	sp, #12
 800aad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800aad6 <__copybits>:
 800aad6:	3901      	subs	r1, #1
 800aad8:	b570      	push	{r4, r5, r6, lr}
 800aada:	1149      	asrs	r1, r1, #5
 800aadc:	6914      	ldr	r4, [r2, #16]
 800aade:	3101      	adds	r1, #1
 800aae0:	f102 0314 	add.w	r3, r2, #20
 800aae4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800aae8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800aaec:	1f05      	subs	r5, r0, #4
 800aaee:	42a3      	cmp	r3, r4
 800aaf0:	d30c      	bcc.n	800ab0c <__copybits+0x36>
 800aaf2:	1aa3      	subs	r3, r4, r2
 800aaf4:	3b11      	subs	r3, #17
 800aaf6:	f023 0303 	bic.w	r3, r3, #3
 800aafa:	3211      	adds	r2, #17
 800aafc:	42a2      	cmp	r2, r4
 800aafe:	bf88      	it	hi
 800ab00:	2300      	movhi	r3, #0
 800ab02:	4418      	add	r0, r3
 800ab04:	2300      	movs	r3, #0
 800ab06:	4288      	cmp	r0, r1
 800ab08:	d305      	bcc.n	800ab16 <__copybits+0x40>
 800ab0a:	bd70      	pop	{r4, r5, r6, pc}
 800ab0c:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab10:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab14:	e7eb      	b.n	800aaee <__copybits+0x18>
 800ab16:	f840 3b04 	str.w	r3, [r0], #4
 800ab1a:	e7f4      	b.n	800ab06 <__copybits+0x30>

0800ab1c <__any_on>:
 800ab1c:	f100 0214 	add.w	r2, r0, #20
 800ab20:	6900      	ldr	r0, [r0, #16]
 800ab22:	114b      	asrs	r3, r1, #5
 800ab24:	4298      	cmp	r0, r3
 800ab26:	b510      	push	{r4, lr}
 800ab28:	db11      	blt.n	800ab4e <__any_on+0x32>
 800ab2a:	dd0a      	ble.n	800ab42 <__any_on+0x26>
 800ab2c:	f011 011f 	ands.w	r1, r1, #31
 800ab30:	d007      	beq.n	800ab42 <__any_on+0x26>
 800ab32:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab36:	fa24 f001 	lsr.w	r0, r4, r1
 800ab3a:	fa00 f101 	lsl.w	r1, r0, r1
 800ab3e:	428c      	cmp	r4, r1
 800ab40:	d10b      	bne.n	800ab5a <__any_on+0x3e>
 800ab42:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d803      	bhi.n	800ab52 <__any_on+0x36>
 800ab4a:	2000      	movs	r0, #0
 800ab4c:	bd10      	pop	{r4, pc}
 800ab4e:	4603      	mov	r3, r0
 800ab50:	e7f7      	b.n	800ab42 <__any_on+0x26>
 800ab52:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab56:	2900      	cmp	r1, #0
 800ab58:	d0f5      	beq.n	800ab46 <__any_on+0x2a>
 800ab5a:	2001      	movs	r0, #1
 800ab5c:	e7f6      	b.n	800ab4c <__any_on+0x30>

0800ab5e <_calloc_r>:
 800ab5e:	b513      	push	{r0, r1, r4, lr}
 800ab60:	434a      	muls	r2, r1
 800ab62:	4611      	mov	r1, r2
 800ab64:	9201      	str	r2, [sp, #4]
 800ab66:	f000 f859 	bl	800ac1c <_malloc_r>
 800ab6a:	4604      	mov	r4, r0
 800ab6c:	b118      	cbz	r0, 800ab76 <_calloc_r+0x18>
 800ab6e:	9a01      	ldr	r2, [sp, #4]
 800ab70:	2100      	movs	r1, #0
 800ab72:	f7fd fabf 	bl	80080f4 <memset>
 800ab76:	4620      	mov	r0, r4
 800ab78:	b002      	add	sp, #8
 800ab7a:	bd10      	pop	{r4, pc}

0800ab7c <_free_r>:
 800ab7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ab7e:	2900      	cmp	r1, #0
 800ab80:	d048      	beq.n	800ac14 <_free_r+0x98>
 800ab82:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab86:	9001      	str	r0, [sp, #4]
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	f1a1 0404 	sub.w	r4, r1, #4
 800ab8e:	bfb8      	it	lt
 800ab90:	18e4      	addlt	r4, r4, r3
 800ab92:	f001 f85b 	bl	800bc4c <__malloc_lock>
 800ab96:	4a20      	ldr	r2, [pc, #128]	; (800ac18 <_free_r+0x9c>)
 800ab98:	9801      	ldr	r0, [sp, #4]
 800ab9a:	6813      	ldr	r3, [r2, #0]
 800ab9c:	4615      	mov	r5, r2
 800ab9e:	b933      	cbnz	r3, 800abae <_free_r+0x32>
 800aba0:	6063      	str	r3, [r4, #4]
 800aba2:	6014      	str	r4, [r2, #0]
 800aba4:	b003      	add	sp, #12
 800aba6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abaa:	f001 b855 	b.w	800bc58 <__malloc_unlock>
 800abae:	42a3      	cmp	r3, r4
 800abb0:	d90b      	bls.n	800abca <_free_r+0x4e>
 800abb2:	6821      	ldr	r1, [r4, #0]
 800abb4:	1862      	adds	r2, r4, r1
 800abb6:	4293      	cmp	r3, r2
 800abb8:	bf04      	itt	eq
 800abba:	681a      	ldreq	r2, [r3, #0]
 800abbc:	685b      	ldreq	r3, [r3, #4]
 800abbe:	6063      	str	r3, [r4, #4]
 800abc0:	bf04      	itt	eq
 800abc2:	1852      	addeq	r2, r2, r1
 800abc4:	6022      	streq	r2, [r4, #0]
 800abc6:	602c      	str	r4, [r5, #0]
 800abc8:	e7ec      	b.n	800aba4 <_free_r+0x28>
 800abca:	461a      	mov	r2, r3
 800abcc:	685b      	ldr	r3, [r3, #4]
 800abce:	b10b      	cbz	r3, 800abd4 <_free_r+0x58>
 800abd0:	42a3      	cmp	r3, r4
 800abd2:	d9fa      	bls.n	800abca <_free_r+0x4e>
 800abd4:	6811      	ldr	r1, [r2, #0]
 800abd6:	1855      	adds	r5, r2, r1
 800abd8:	42a5      	cmp	r5, r4
 800abda:	d10b      	bne.n	800abf4 <_free_r+0x78>
 800abdc:	6824      	ldr	r4, [r4, #0]
 800abde:	4421      	add	r1, r4
 800abe0:	1854      	adds	r4, r2, r1
 800abe2:	42a3      	cmp	r3, r4
 800abe4:	6011      	str	r1, [r2, #0]
 800abe6:	d1dd      	bne.n	800aba4 <_free_r+0x28>
 800abe8:	681c      	ldr	r4, [r3, #0]
 800abea:	685b      	ldr	r3, [r3, #4]
 800abec:	6053      	str	r3, [r2, #4]
 800abee:	4421      	add	r1, r4
 800abf0:	6011      	str	r1, [r2, #0]
 800abf2:	e7d7      	b.n	800aba4 <_free_r+0x28>
 800abf4:	d902      	bls.n	800abfc <_free_r+0x80>
 800abf6:	230c      	movs	r3, #12
 800abf8:	6003      	str	r3, [r0, #0]
 800abfa:	e7d3      	b.n	800aba4 <_free_r+0x28>
 800abfc:	6825      	ldr	r5, [r4, #0]
 800abfe:	1961      	adds	r1, r4, r5
 800ac00:	428b      	cmp	r3, r1
 800ac02:	bf04      	itt	eq
 800ac04:	6819      	ldreq	r1, [r3, #0]
 800ac06:	685b      	ldreq	r3, [r3, #4]
 800ac08:	6063      	str	r3, [r4, #4]
 800ac0a:	bf04      	itt	eq
 800ac0c:	1949      	addeq	r1, r1, r5
 800ac0e:	6021      	streq	r1, [r4, #0]
 800ac10:	6054      	str	r4, [r2, #4]
 800ac12:	e7c7      	b.n	800aba4 <_free_r+0x28>
 800ac14:	b003      	add	sp, #12
 800ac16:	bd30      	pop	{r4, r5, pc}
 800ac18:	20000480 	.word	0x20000480

0800ac1c <_malloc_r>:
 800ac1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac1e:	1ccd      	adds	r5, r1, #3
 800ac20:	f025 0503 	bic.w	r5, r5, #3
 800ac24:	3508      	adds	r5, #8
 800ac26:	2d0c      	cmp	r5, #12
 800ac28:	bf38      	it	cc
 800ac2a:	250c      	movcc	r5, #12
 800ac2c:	2d00      	cmp	r5, #0
 800ac2e:	4606      	mov	r6, r0
 800ac30:	db01      	blt.n	800ac36 <_malloc_r+0x1a>
 800ac32:	42a9      	cmp	r1, r5
 800ac34:	d903      	bls.n	800ac3e <_malloc_r+0x22>
 800ac36:	230c      	movs	r3, #12
 800ac38:	6033      	str	r3, [r6, #0]
 800ac3a:	2000      	movs	r0, #0
 800ac3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac3e:	f001 f805 	bl	800bc4c <__malloc_lock>
 800ac42:	4921      	ldr	r1, [pc, #132]	; (800acc8 <_malloc_r+0xac>)
 800ac44:	680a      	ldr	r2, [r1, #0]
 800ac46:	4614      	mov	r4, r2
 800ac48:	b99c      	cbnz	r4, 800ac72 <_malloc_r+0x56>
 800ac4a:	4f20      	ldr	r7, [pc, #128]	; (800accc <_malloc_r+0xb0>)
 800ac4c:	683b      	ldr	r3, [r7, #0]
 800ac4e:	b923      	cbnz	r3, 800ac5a <_malloc_r+0x3e>
 800ac50:	4621      	mov	r1, r4
 800ac52:	4630      	mov	r0, r6
 800ac54:	f000 fe64 	bl	800b920 <_sbrk_r>
 800ac58:	6038      	str	r0, [r7, #0]
 800ac5a:	4629      	mov	r1, r5
 800ac5c:	4630      	mov	r0, r6
 800ac5e:	f000 fe5f 	bl	800b920 <_sbrk_r>
 800ac62:	1c43      	adds	r3, r0, #1
 800ac64:	d123      	bne.n	800acae <_malloc_r+0x92>
 800ac66:	230c      	movs	r3, #12
 800ac68:	6033      	str	r3, [r6, #0]
 800ac6a:	4630      	mov	r0, r6
 800ac6c:	f000 fff4 	bl	800bc58 <__malloc_unlock>
 800ac70:	e7e3      	b.n	800ac3a <_malloc_r+0x1e>
 800ac72:	6823      	ldr	r3, [r4, #0]
 800ac74:	1b5b      	subs	r3, r3, r5
 800ac76:	d417      	bmi.n	800aca8 <_malloc_r+0x8c>
 800ac78:	2b0b      	cmp	r3, #11
 800ac7a:	d903      	bls.n	800ac84 <_malloc_r+0x68>
 800ac7c:	6023      	str	r3, [r4, #0]
 800ac7e:	441c      	add	r4, r3
 800ac80:	6025      	str	r5, [r4, #0]
 800ac82:	e004      	b.n	800ac8e <_malloc_r+0x72>
 800ac84:	6863      	ldr	r3, [r4, #4]
 800ac86:	42a2      	cmp	r2, r4
 800ac88:	bf0c      	ite	eq
 800ac8a:	600b      	streq	r3, [r1, #0]
 800ac8c:	6053      	strne	r3, [r2, #4]
 800ac8e:	4630      	mov	r0, r6
 800ac90:	f000 ffe2 	bl	800bc58 <__malloc_unlock>
 800ac94:	f104 000b 	add.w	r0, r4, #11
 800ac98:	1d23      	adds	r3, r4, #4
 800ac9a:	f020 0007 	bic.w	r0, r0, #7
 800ac9e:	1ac2      	subs	r2, r0, r3
 800aca0:	d0cc      	beq.n	800ac3c <_malloc_r+0x20>
 800aca2:	1a1b      	subs	r3, r3, r0
 800aca4:	50a3      	str	r3, [r4, r2]
 800aca6:	e7c9      	b.n	800ac3c <_malloc_r+0x20>
 800aca8:	4622      	mov	r2, r4
 800acaa:	6864      	ldr	r4, [r4, #4]
 800acac:	e7cc      	b.n	800ac48 <_malloc_r+0x2c>
 800acae:	1cc4      	adds	r4, r0, #3
 800acb0:	f024 0403 	bic.w	r4, r4, #3
 800acb4:	42a0      	cmp	r0, r4
 800acb6:	d0e3      	beq.n	800ac80 <_malloc_r+0x64>
 800acb8:	1a21      	subs	r1, r4, r0
 800acba:	4630      	mov	r0, r6
 800acbc:	f000 fe30 	bl	800b920 <_sbrk_r>
 800acc0:	3001      	adds	r0, #1
 800acc2:	d1dd      	bne.n	800ac80 <_malloc_r+0x64>
 800acc4:	e7cf      	b.n	800ac66 <_malloc_r+0x4a>
 800acc6:	bf00      	nop
 800acc8:	20000480 	.word	0x20000480
 800accc:	20000484 	.word	0x20000484

0800acd0 <__ssputs_r>:
 800acd0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800acd4:	688e      	ldr	r6, [r1, #8]
 800acd6:	429e      	cmp	r6, r3
 800acd8:	4682      	mov	sl, r0
 800acda:	460c      	mov	r4, r1
 800acdc:	4690      	mov	r8, r2
 800acde:	461f      	mov	r7, r3
 800ace0:	d838      	bhi.n	800ad54 <__ssputs_r+0x84>
 800ace2:	898a      	ldrh	r2, [r1, #12]
 800ace4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ace8:	d032      	beq.n	800ad50 <__ssputs_r+0x80>
 800acea:	6825      	ldr	r5, [r4, #0]
 800acec:	6909      	ldr	r1, [r1, #16]
 800acee:	eba5 0901 	sub.w	r9, r5, r1
 800acf2:	6965      	ldr	r5, [r4, #20]
 800acf4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800acf8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800acfc:	3301      	adds	r3, #1
 800acfe:	444b      	add	r3, r9
 800ad00:	106d      	asrs	r5, r5, #1
 800ad02:	429d      	cmp	r5, r3
 800ad04:	bf38      	it	cc
 800ad06:	461d      	movcc	r5, r3
 800ad08:	0553      	lsls	r3, r2, #21
 800ad0a:	d531      	bpl.n	800ad70 <__ssputs_r+0xa0>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7ff ff85 	bl	800ac1c <_malloc_r>
 800ad12:	4606      	mov	r6, r0
 800ad14:	b950      	cbnz	r0, 800ad2c <__ssputs_r+0x5c>
 800ad16:	230c      	movs	r3, #12
 800ad18:	f8ca 3000 	str.w	r3, [sl]
 800ad1c:	89a3      	ldrh	r3, [r4, #12]
 800ad1e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad22:	81a3      	strh	r3, [r4, #12]
 800ad24:	f04f 30ff 	mov.w	r0, #4294967295
 800ad28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2c:	6921      	ldr	r1, [r4, #16]
 800ad2e:	464a      	mov	r2, r9
 800ad30:	f7ff fa4c 	bl	800a1cc <memcpy>
 800ad34:	89a3      	ldrh	r3, [r4, #12]
 800ad36:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad3a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad3e:	81a3      	strh	r3, [r4, #12]
 800ad40:	6126      	str	r6, [r4, #16]
 800ad42:	6165      	str	r5, [r4, #20]
 800ad44:	444e      	add	r6, r9
 800ad46:	eba5 0509 	sub.w	r5, r5, r9
 800ad4a:	6026      	str	r6, [r4, #0]
 800ad4c:	60a5      	str	r5, [r4, #8]
 800ad4e:	463e      	mov	r6, r7
 800ad50:	42be      	cmp	r6, r7
 800ad52:	d900      	bls.n	800ad56 <__ssputs_r+0x86>
 800ad54:	463e      	mov	r6, r7
 800ad56:	4632      	mov	r2, r6
 800ad58:	6820      	ldr	r0, [r4, #0]
 800ad5a:	4641      	mov	r1, r8
 800ad5c:	f000 ff5c 	bl	800bc18 <memmove>
 800ad60:	68a3      	ldr	r3, [r4, #8]
 800ad62:	6822      	ldr	r2, [r4, #0]
 800ad64:	1b9b      	subs	r3, r3, r6
 800ad66:	4432      	add	r2, r6
 800ad68:	60a3      	str	r3, [r4, #8]
 800ad6a:	6022      	str	r2, [r4, #0]
 800ad6c:	2000      	movs	r0, #0
 800ad6e:	e7db      	b.n	800ad28 <__ssputs_r+0x58>
 800ad70:	462a      	mov	r2, r5
 800ad72:	f000 ff77 	bl	800bc64 <_realloc_r>
 800ad76:	4606      	mov	r6, r0
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d1e1      	bne.n	800ad40 <__ssputs_r+0x70>
 800ad7c:	6921      	ldr	r1, [r4, #16]
 800ad7e:	4650      	mov	r0, sl
 800ad80:	f7ff fefc 	bl	800ab7c <_free_r>
 800ad84:	e7c7      	b.n	800ad16 <__ssputs_r+0x46>
	...

0800ad88 <_svfiprintf_r>:
 800ad88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad8c:	4698      	mov	r8, r3
 800ad8e:	898b      	ldrh	r3, [r1, #12]
 800ad90:	061b      	lsls	r3, r3, #24
 800ad92:	b09d      	sub	sp, #116	; 0x74
 800ad94:	4607      	mov	r7, r0
 800ad96:	460d      	mov	r5, r1
 800ad98:	4614      	mov	r4, r2
 800ad9a:	d50e      	bpl.n	800adba <_svfiprintf_r+0x32>
 800ad9c:	690b      	ldr	r3, [r1, #16]
 800ad9e:	b963      	cbnz	r3, 800adba <_svfiprintf_r+0x32>
 800ada0:	2140      	movs	r1, #64	; 0x40
 800ada2:	f7ff ff3b 	bl	800ac1c <_malloc_r>
 800ada6:	6028      	str	r0, [r5, #0]
 800ada8:	6128      	str	r0, [r5, #16]
 800adaa:	b920      	cbnz	r0, 800adb6 <_svfiprintf_r+0x2e>
 800adac:	230c      	movs	r3, #12
 800adae:	603b      	str	r3, [r7, #0]
 800adb0:	f04f 30ff 	mov.w	r0, #4294967295
 800adb4:	e0d1      	b.n	800af5a <_svfiprintf_r+0x1d2>
 800adb6:	2340      	movs	r3, #64	; 0x40
 800adb8:	616b      	str	r3, [r5, #20]
 800adba:	2300      	movs	r3, #0
 800adbc:	9309      	str	r3, [sp, #36]	; 0x24
 800adbe:	2320      	movs	r3, #32
 800adc0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adc4:	f8cd 800c 	str.w	r8, [sp, #12]
 800adc8:	2330      	movs	r3, #48	; 0x30
 800adca:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800af74 <_svfiprintf_r+0x1ec>
 800adce:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800add2:	f04f 0901 	mov.w	r9, #1
 800add6:	4623      	mov	r3, r4
 800add8:	469a      	mov	sl, r3
 800adda:	f813 2b01 	ldrb.w	r2, [r3], #1
 800adde:	b10a      	cbz	r2, 800ade4 <_svfiprintf_r+0x5c>
 800ade0:	2a25      	cmp	r2, #37	; 0x25
 800ade2:	d1f9      	bne.n	800add8 <_svfiprintf_r+0x50>
 800ade4:	ebba 0b04 	subs.w	fp, sl, r4
 800ade8:	d00b      	beq.n	800ae02 <_svfiprintf_r+0x7a>
 800adea:	465b      	mov	r3, fp
 800adec:	4622      	mov	r2, r4
 800adee:	4629      	mov	r1, r5
 800adf0:	4638      	mov	r0, r7
 800adf2:	f7ff ff6d 	bl	800acd0 <__ssputs_r>
 800adf6:	3001      	adds	r0, #1
 800adf8:	f000 80aa 	beq.w	800af50 <_svfiprintf_r+0x1c8>
 800adfc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800adfe:	445a      	add	r2, fp
 800ae00:	9209      	str	r2, [sp, #36]	; 0x24
 800ae02:	f89a 3000 	ldrb.w	r3, [sl]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	f000 80a2 	beq.w	800af50 <_svfiprintf_r+0x1c8>
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae16:	f10a 0a01 	add.w	sl, sl, #1
 800ae1a:	9304      	str	r3, [sp, #16]
 800ae1c:	9307      	str	r3, [sp, #28]
 800ae1e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae22:	931a      	str	r3, [sp, #104]	; 0x68
 800ae24:	4654      	mov	r4, sl
 800ae26:	2205      	movs	r2, #5
 800ae28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae2c:	4851      	ldr	r0, [pc, #324]	; (800af74 <_svfiprintf_r+0x1ec>)
 800ae2e:	f7f5 f9d7 	bl	80001e0 <memchr>
 800ae32:	9a04      	ldr	r2, [sp, #16]
 800ae34:	b9d8      	cbnz	r0, 800ae6e <_svfiprintf_r+0xe6>
 800ae36:	06d0      	lsls	r0, r2, #27
 800ae38:	bf44      	itt	mi
 800ae3a:	2320      	movmi	r3, #32
 800ae3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae40:	0711      	lsls	r1, r2, #28
 800ae42:	bf44      	itt	mi
 800ae44:	232b      	movmi	r3, #43	; 0x2b
 800ae46:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae4a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae4e:	2b2a      	cmp	r3, #42	; 0x2a
 800ae50:	d015      	beq.n	800ae7e <_svfiprintf_r+0xf6>
 800ae52:	9a07      	ldr	r2, [sp, #28]
 800ae54:	4654      	mov	r4, sl
 800ae56:	2000      	movs	r0, #0
 800ae58:	f04f 0c0a 	mov.w	ip, #10
 800ae5c:	4621      	mov	r1, r4
 800ae5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae62:	3b30      	subs	r3, #48	; 0x30
 800ae64:	2b09      	cmp	r3, #9
 800ae66:	d94e      	bls.n	800af06 <_svfiprintf_r+0x17e>
 800ae68:	b1b0      	cbz	r0, 800ae98 <_svfiprintf_r+0x110>
 800ae6a:	9207      	str	r2, [sp, #28]
 800ae6c:	e014      	b.n	800ae98 <_svfiprintf_r+0x110>
 800ae6e:	eba0 0308 	sub.w	r3, r0, r8
 800ae72:	fa09 f303 	lsl.w	r3, r9, r3
 800ae76:	4313      	orrs	r3, r2
 800ae78:	9304      	str	r3, [sp, #16]
 800ae7a:	46a2      	mov	sl, r4
 800ae7c:	e7d2      	b.n	800ae24 <_svfiprintf_r+0x9c>
 800ae7e:	9b03      	ldr	r3, [sp, #12]
 800ae80:	1d19      	adds	r1, r3, #4
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	9103      	str	r1, [sp, #12]
 800ae86:	2b00      	cmp	r3, #0
 800ae88:	bfbb      	ittet	lt
 800ae8a:	425b      	neglt	r3, r3
 800ae8c:	f042 0202 	orrlt.w	r2, r2, #2
 800ae90:	9307      	strge	r3, [sp, #28]
 800ae92:	9307      	strlt	r3, [sp, #28]
 800ae94:	bfb8      	it	lt
 800ae96:	9204      	strlt	r2, [sp, #16]
 800ae98:	7823      	ldrb	r3, [r4, #0]
 800ae9a:	2b2e      	cmp	r3, #46	; 0x2e
 800ae9c:	d10c      	bne.n	800aeb8 <_svfiprintf_r+0x130>
 800ae9e:	7863      	ldrb	r3, [r4, #1]
 800aea0:	2b2a      	cmp	r3, #42	; 0x2a
 800aea2:	d135      	bne.n	800af10 <_svfiprintf_r+0x188>
 800aea4:	9b03      	ldr	r3, [sp, #12]
 800aea6:	1d1a      	adds	r2, r3, #4
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	9203      	str	r2, [sp, #12]
 800aeac:	2b00      	cmp	r3, #0
 800aeae:	bfb8      	it	lt
 800aeb0:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeb4:	3402      	adds	r4, #2
 800aeb6:	9305      	str	r3, [sp, #20]
 800aeb8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800af84 <_svfiprintf_r+0x1fc>
 800aebc:	7821      	ldrb	r1, [r4, #0]
 800aebe:	2203      	movs	r2, #3
 800aec0:	4650      	mov	r0, sl
 800aec2:	f7f5 f98d 	bl	80001e0 <memchr>
 800aec6:	b140      	cbz	r0, 800aeda <_svfiprintf_r+0x152>
 800aec8:	2340      	movs	r3, #64	; 0x40
 800aeca:	eba0 000a 	sub.w	r0, r0, sl
 800aece:	fa03 f000 	lsl.w	r0, r3, r0
 800aed2:	9b04      	ldr	r3, [sp, #16]
 800aed4:	4303      	orrs	r3, r0
 800aed6:	3401      	adds	r4, #1
 800aed8:	9304      	str	r3, [sp, #16]
 800aeda:	f814 1b01 	ldrb.w	r1, [r4], #1
 800aede:	4826      	ldr	r0, [pc, #152]	; (800af78 <_svfiprintf_r+0x1f0>)
 800aee0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800aee4:	2206      	movs	r2, #6
 800aee6:	f7f5 f97b 	bl	80001e0 <memchr>
 800aeea:	2800      	cmp	r0, #0
 800aeec:	d038      	beq.n	800af60 <_svfiprintf_r+0x1d8>
 800aeee:	4b23      	ldr	r3, [pc, #140]	; (800af7c <_svfiprintf_r+0x1f4>)
 800aef0:	bb1b      	cbnz	r3, 800af3a <_svfiprintf_r+0x1b2>
 800aef2:	9b03      	ldr	r3, [sp, #12]
 800aef4:	3307      	adds	r3, #7
 800aef6:	f023 0307 	bic.w	r3, r3, #7
 800aefa:	3308      	adds	r3, #8
 800aefc:	9303      	str	r3, [sp, #12]
 800aefe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af00:	4433      	add	r3, r6
 800af02:	9309      	str	r3, [sp, #36]	; 0x24
 800af04:	e767      	b.n	800add6 <_svfiprintf_r+0x4e>
 800af06:	fb0c 3202 	mla	r2, ip, r2, r3
 800af0a:	460c      	mov	r4, r1
 800af0c:	2001      	movs	r0, #1
 800af0e:	e7a5      	b.n	800ae5c <_svfiprintf_r+0xd4>
 800af10:	2300      	movs	r3, #0
 800af12:	3401      	adds	r4, #1
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	4619      	mov	r1, r3
 800af18:	f04f 0c0a 	mov.w	ip, #10
 800af1c:	4620      	mov	r0, r4
 800af1e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af22:	3a30      	subs	r2, #48	; 0x30
 800af24:	2a09      	cmp	r2, #9
 800af26:	d903      	bls.n	800af30 <_svfiprintf_r+0x1a8>
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d0c5      	beq.n	800aeb8 <_svfiprintf_r+0x130>
 800af2c:	9105      	str	r1, [sp, #20]
 800af2e:	e7c3      	b.n	800aeb8 <_svfiprintf_r+0x130>
 800af30:	fb0c 2101 	mla	r1, ip, r1, r2
 800af34:	4604      	mov	r4, r0
 800af36:	2301      	movs	r3, #1
 800af38:	e7f0      	b.n	800af1c <_svfiprintf_r+0x194>
 800af3a:	ab03      	add	r3, sp, #12
 800af3c:	9300      	str	r3, [sp, #0]
 800af3e:	462a      	mov	r2, r5
 800af40:	4b0f      	ldr	r3, [pc, #60]	; (800af80 <_svfiprintf_r+0x1f8>)
 800af42:	a904      	add	r1, sp, #16
 800af44:	4638      	mov	r0, r7
 800af46:	f3af 8000 	nop.w
 800af4a:	1c42      	adds	r2, r0, #1
 800af4c:	4606      	mov	r6, r0
 800af4e:	d1d6      	bne.n	800aefe <_svfiprintf_r+0x176>
 800af50:	89ab      	ldrh	r3, [r5, #12]
 800af52:	065b      	lsls	r3, r3, #25
 800af54:	f53f af2c 	bmi.w	800adb0 <_svfiprintf_r+0x28>
 800af58:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af5a:	b01d      	add	sp, #116	; 0x74
 800af5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af60:	ab03      	add	r3, sp, #12
 800af62:	9300      	str	r3, [sp, #0]
 800af64:	462a      	mov	r2, r5
 800af66:	4b06      	ldr	r3, [pc, #24]	; (800af80 <_svfiprintf_r+0x1f8>)
 800af68:	a904      	add	r1, sp, #16
 800af6a:	4638      	mov	r0, r7
 800af6c:	f000 fa4c 	bl	800b408 <_printf_i>
 800af70:	e7eb      	b.n	800af4a <_svfiprintf_r+0x1c2>
 800af72:	bf00      	nop
 800af74:	0800ceac 	.word	0x0800ceac
 800af78:	0800ceb6 	.word	0x0800ceb6
 800af7c:	00000000 	.word	0x00000000
 800af80:	0800acd1 	.word	0x0800acd1
 800af84:	0800ceb2 	.word	0x0800ceb2

0800af88 <_sungetc_r>:
 800af88:	b538      	push	{r3, r4, r5, lr}
 800af8a:	1c4b      	adds	r3, r1, #1
 800af8c:	4614      	mov	r4, r2
 800af8e:	d103      	bne.n	800af98 <_sungetc_r+0x10>
 800af90:	f04f 35ff 	mov.w	r5, #4294967295
 800af94:	4628      	mov	r0, r5
 800af96:	bd38      	pop	{r3, r4, r5, pc}
 800af98:	8993      	ldrh	r3, [r2, #12]
 800af9a:	f023 0320 	bic.w	r3, r3, #32
 800af9e:	8193      	strh	r3, [r2, #12]
 800afa0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afa2:	6852      	ldr	r2, [r2, #4]
 800afa4:	b2cd      	uxtb	r5, r1
 800afa6:	b18b      	cbz	r3, 800afcc <_sungetc_r+0x44>
 800afa8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afaa:	4293      	cmp	r3, r2
 800afac:	dd08      	ble.n	800afc0 <_sungetc_r+0x38>
 800afae:	6823      	ldr	r3, [r4, #0]
 800afb0:	1e5a      	subs	r2, r3, #1
 800afb2:	6022      	str	r2, [r4, #0]
 800afb4:	f803 5c01 	strb.w	r5, [r3, #-1]
 800afb8:	6863      	ldr	r3, [r4, #4]
 800afba:	3301      	adds	r3, #1
 800afbc:	6063      	str	r3, [r4, #4]
 800afbe:	e7e9      	b.n	800af94 <_sungetc_r+0xc>
 800afc0:	4621      	mov	r1, r4
 800afc2:	f000 fd87 	bl	800bad4 <__submore>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	d0f1      	beq.n	800afae <_sungetc_r+0x26>
 800afca:	e7e1      	b.n	800af90 <_sungetc_r+0x8>
 800afcc:	6921      	ldr	r1, [r4, #16]
 800afce:	6823      	ldr	r3, [r4, #0]
 800afd0:	b151      	cbz	r1, 800afe8 <_sungetc_r+0x60>
 800afd2:	4299      	cmp	r1, r3
 800afd4:	d208      	bcs.n	800afe8 <_sungetc_r+0x60>
 800afd6:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800afda:	42a9      	cmp	r1, r5
 800afdc:	d104      	bne.n	800afe8 <_sungetc_r+0x60>
 800afde:	3b01      	subs	r3, #1
 800afe0:	3201      	adds	r2, #1
 800afe2:	6023      	str	r3, [r4, #0]
 800afe4:	6062      	str	r2, [r4, #4]
 800afe6:	e7d5      	b.n	800af94 <_sungetc_r+0xc>
 800afe8:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800afec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800aff0:	6363      	str	r3, [r4, #52]	; 0x34
 800aff2:	2303      	movs	r3, #3
 800aff4:	63a3      	str	r3, [r4, #56]	; 0x38
 800aff6:	4623      	mov	r3, r4
 800aff8:	f803 5f46 	strb.w	r5, [r3, #70]!
 800affc:	6023      	str	r3, [r4, #0]
 800affe:	2301      	movs	r3, #1
 800b000:	e7dc      	b.n	800afbc <_sungetc_r+0x34>

0800b002 <__ssrefill_r>:
 800b002:	b510      	push	{r4, lr}
 800b004:	460c      	mov	r4, r1
 800b006:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b008:	b169      	cbz	r1, 800b026 <__ssrefill_r+0x24>
 800b00a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b00e:	4299      	cmp	r1, r3
 800b010:	d001      	beq.n	800b016 <__ssrefill_r+0x14>
 800b012:	f7ff fdb3 	bl	800ab7c <_free_r>
 800b016:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b018:	6063      	str	r3, [r4, #4]
 800b01a:	2000      	movs	r0, #0
 800b01c:	6360      	str	r0, [r4, #52]	; 0x34
 800b01e:	b113      	cbz	r3, 800b026 <__ssrefill_r+0x24>
 800b020:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b022:	6023      	str	r3, [r4, #0]
 800b024:	bd10      	pop	{r4, pc}
 800b026:	6923      	ldr	r3, [r4, #16]
 800b028:	6023      	str	r3, [r4, #0]
 800b02a:	2300      	movs	r3, #0
 800b02c:	6063      	str	r3, [r4, #4]
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	f043 0320 	orr.w	r3, r3, #32
 800b034:	81a3      	strh	r3, [r4, #12]
 800b036:	f04f 30ff 	mov.w	r0, #4294967295
 800b03a:	e7f3      	b.n	800b024 <__ssrefill_r+0x22>

0800b03c <__ssvfiscanf_r>:
 800b03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b040:	460c      	mov	r4, r1
 800b042:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b046:	2100      	movs	r1, #0
 800b048:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b04c:	49b2      	ldr	r1, [pc, #712]	; (800b318 <__ssvfiscanf_r+0x2dc>)
 800b04e:	91a0      	str	r1, [sp, #640]	; 0x280
 800b050:	f10d 0804 	add.w	r8, sp, #4
 800b054:	49b1      	ldr	r1, [pc, #708]	; (800b31c <__ssvfiscanf_r+0x2e0>)
 800b056:	4fb2      	ldr	r7, [pc, #712]	; (800b320 <__ssvfiscanf_r+0x2e4>)
 800b058:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800b324 <__ssvfiscanf_r+0x2e8>
 800b05c:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b060:	4606      	mov	r6, r0
 800b062:	91a1      	str	r1, [sp, #644]	; 0x284
 800b064:	9300      	str	r3, [sp, #0]
 800b066:	f892 a000 	ldrb.w	sl, [r2]
 800b06a:	f1ba 0f00 	cmp.w	sl, #0
 800b06e:	f000 8151 	beq.w	800b314 <__ssvfiscanf_r+0x2d8>
 800b072:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b076:	f013 0308 	ands.w	r3, r3, #8
 800b07a:	f102 0501 	add.w	r5, r2, #1
 800b07e:	d019      	beq.n	800b0b4 <__ssvfiscanf_r+0x78>
 800b080:	6863      	ldr	r3, [r4, #4]
 800b082:	2b00      	cmp	r3, #0
 800b084:	dd0f      	ble.n	800b0a6 <__ssvfiscanf_r+0x6a>
 800b086:	6823      	ldr	r3, [r4, #0]
 800b088:	781a      	ldrb	r2, [r3, #0]
 800b08a:	5cba      	ldrb	r2, [r7, r2]
 800b08c:	0712      	lsls	r2, r2, #28
 800b08e:	d401      	bmi.n	800b094 <__ssvfiscanf_r+0x58>
 800b090:	462a      	mov	r2, r5
 800b092:	e7e8      	b.n	800b066 <__ssvfiscanf_r+0x2a>
 800b094:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b096:	3201      	adds	r2, #1
 800b098:	9245      	str	r2, [sp, #276]	; 0x114
 800b09a:	6862      	ldr	r2, [r4, #4]
 800b09c:	3301      	adds	r3, #1
 800b09e:	3a01      	subs	r2, #1
 800b0a0:	6062      	str	r2, [r4, #4]
 800b0a2:	6023      	str	r3, [r4, #0]
 800b0a4:	e7ec      	b.n	800b080 <__ssvfiscanf_r+0x44>
 800b0a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0a8:	4621      	mov	r1, r4
 800b0aa:	4630      	mov	r0, r6
 800b0ac:	4798      	blx	r3
 800b0ae:	2800      	cmp	r0, #0
 800b0b0:	d0e9      	beq.n	800b086 <__ssvfiscanf_r+0x4a>
 800b0b2:	e7ed      	b.n	800b090 <__ssvfiscanf_r+0x54>
 800b0b4:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b0b8:	f040 8083 	bne.w	800b1c2 <__ssvfiscanf_r+0x186>
 800b0bc:	9341      	str	r3, [sp, #260]	; 0x104
 800b0be:	9343      	str	r3, [sp, #268]	; 0x10c
 800b0c0:	7853      	ldrb	r3, [r2, #1]
 800b0c2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0c4:	bf02      	ittt	eq
 800b0c6:	2310      	moveq	r3, #16
 800b0c8:	1c95      	addeq	r5, r2, #2
 800b0ca:	9341      	streq	r3, [sp, #260]	; 0x104
 800b0cc:	220a      	movs	r2, #10
 800b0ce:	46ab      	mov	fp, r5
 800b0d0:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b0d4:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b0d8:	2b09      	cmp	r3, #9
 800b0da:	d91d      	bls.n	800b118 <__ssvfiscanf_r+0xdc>
 800b0dc:	4891      	ldr	r0, [pc, #580]	; (800b324 <__ssvfiscanf_r+0x2e8>)
 800b0de:	2203      	movs	r2, #3
 800b0e0:	f7f5 f87e 	bl	80001e0 <memchr>
 800b0e4:	b140      	cbz	r0, 800b0f8 <__ssvfiscanf_r+0xbc>
 800b0e6:	2301      	movs	r3, #1
 800b0e8:	eba0 0009 	sub.w	r0, r0, r9
 800b0ec:	fa03 f000 	lsl.w	r0, r3, r0
 800b0f0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b0f2:	4318      	orrs	r0, r3
 800b0f4:	9041      	str	r0, [sp, #260]	; 0x104
 800b0f6:	465d      	mov	r5, fp
 800b0f8:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b0fc:	2b78      	cmp	r3, #120	; 0x78
 800b0fe:	d806      	bhi.n	800b10e <__ssvfiscanf_r+0xd2>
 800b100:	2b57      	cmp	r3, #87	; 0x57
 800b102:	d810      	bhi.n	800b126 <__ssvfiscanf_r+0xea>
 800b104:	2b25      	cmp	r3, #37	; 0x25
 800b106:	d05c      	beq.n	800b1c2 <__ssvfiscanf_r+0x186>
 800b108:	d856      	bhi.n	800b1b8 <__ssvfiscanf_r+0x17c>
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d074      	beq.n	800b1f8 <__ssvfiscanf_r+0x1bc>
 800b10e:	2303      	movs	r3, #3
 800b110:	9347      	str	r3, [sp, #284]	; 0x11c
 800b112:	230a      	movs	r3, #10
 800b114:	9342      	str	r3, [sp, #264]	; 0x108
 800b116:	e081      	b.n	800b21c <__ssvfiscanf_r+0x1e0>
 800b118:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b11a:	fb02 1303 	mla	r3, r2, r3, r1
 800b11e:	3b30      	subs	r3, #48	; 0x30
 800b120:	9343      	str	r3, [sp, #268]	; 0x10c
 800b122:	465d      	mov	r5, fp
 800b124:	e7d3      	b.n	800b0ce <__ssvfiscanf_r+0x92>
 800b126:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b12a:	2a20      	cmp	r2, #32
 800b12c:	d8ef      	bhi.n	800b10e <__ssvfiscanf_r+0xd2>
 800b12e:	a101      	add	r1, pc, #4	; (adr r1, 800b134 <__ssvfiscanf_r+0xf8>)
 800b130:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b134:	0800b207 	.word	0x0800b207
 800b138:	0800b10f 	.word	0x0800b10f
 800b13c:	0800b10f 	.word	0x0800b10f
 800b140:	0800b265 	.word	0x0800b265
 800b144:	0800b10f 	.word	0x0800b10f
 800b148:	0800b10f 	.word	0x0800b10f
 800b14c:	0800b10f 	.word	0x0800b10f
 800b150:	0800b10f 	.word	0x0800b10f
 800b154:	0800b10f 	.word	0x0800b10f
 800b158:	0800b10f 	.word	0x0800b10f
 800b15c:	0800b10f 	.word	0x0800b10f
 800b160:	0800b27b 	.word	0x0800b27b
 800b164:	0800b251 	.word	0x0800b251
 800b168:	0800b1bf 	.word	0x0800b1bf
 800b16c:	0800b1bf 	.word	0x0800b1bf
 800b170:	0800b1bf 	.word	0x0800b1bf
 800b174:	0800b10f 	.word	0x0800b10f
 800b178:	0800b255 	.word	0x0800b255
 800b17c:	0800b10f 	.word	0x0800b10f
 800b180:	0800b10f 	.word	0x0800b10f
 800b184:	0800b10f 	.word	0x0800b10f
 800b188:	0800b10f 	.word	0x0800b10f
 800b18c:	0800b28b 	.word	0x0800b28b
 800b190:	0800b25d 	.word	0x0800b25d
 800b194:	0800b1ff 	.word	0x0800b1ff
 800b198:	0800b10f 	.word	0x0800b10f
 800b19c:	0800b10f 	.word	0x0800b10f
 800b1a0:	0800b287 	.word	0x0800b287
 800b1a4:	0800b10f 	.word	0x0800b10f
 800b1a8:	0800b251 	.word	0x0800b251
 800b1ac:	0800b10f 	.word	0x0800b10f
 800b1b0:	0800b10f 	.word	0x0800b10f
 800b1b4:	0800b207 	.word	0x0800b207
 800b1b8:	3b45      	subs	r3, #69	; 0x45
 800b1ba:	2b02      	cmp	r3, #2
 800b1bc:	d8a7      	bhi.n	800b10e <__ssvfiscanf_r+0xd2>
 800b1be:	2305      	movs	r3, #5
 800b1c0:	e02b      	b.n	800b21a <__ssvfiscanf_r+0x1de>
 800b1c2:	6863      	ldr	r3, [r4, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	dd0d      	ble.n	800b1e4 <__ssvfiscanf_r+0x1a8>
 800b1c8:	6823      	ldr	r3, [r4, #0]
 800b1ca:	781a      	ldrb	r2, [r3, #0]
 800b1cc:	4552      	cmp	r2, sl
 800b1ce:	f040 80a1 	bne.w	800b314 <__ssvfiscanf_r+0x2d8>
 800b1d2:	3301      	adds	r3, #1
 800b1d4:	6862      	ldr	r2, [r4, #4]
 800b1d6:	6023      	str	r3, [r4, #0]
 800b1d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b1da:	3a01      	subs	r2, #1
 800b1dc:	3301      	adds	r3, #1
 800b1de:	6062      	str	r2, [r4, #4]
 800b1e0:	9345      	str	r3, [sp, #276]	; 0x114
 800b1e2:	e755      	b.n	800b090 <__ssvfiscanf_r+0x54>
 800b1e4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b1e6:	4621      	mov	r1, r4
 800b1e8:	4630      	mov	r0, r6
 800b1ea:	4798      	blx	r3
 800b1ec:	2800      	cmp	r0, #0
 800b1ee:	d0eb      	beq.n	800b1c8 <__ssvfiscanf_r+0x18c>
 800b1f0:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b1f2:	2800      	cmp	r0, #0
 800b1f4:	f040 8084 	bne.w	800b300 <__ssvfiscanf_r+0x2c4>
 800b1f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b1fc:	e086      	b.n	800b30c <__ssvfiscanf_r+0x2d0>
 800b1fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b200:	f042 0220 	orr.w	r2, r2, #32
 800b204:	9241      	str	r2, [sp, #260]	; 0x104
 800b206:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b208:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b20c:	9241      	str	r2, [sp, #260]	; 0x104
 800b20e:	2210      	movs	r2, #16
 800b210:	2b6f      	cmp	r3, #111	; 0x6f
 800b212:	9242      	str	r2, [sp, #264]	; 0x108
 800b214:	bf34      	ite	cc
 800b216:	2303      	movcc	r3, #3
 800b218:	2304      	movcs	r3, #4
 800b21a:	9347      	str	r3, [sp, #284]	; 0x11c
 800b21c:	6863      	ldr	r3, [r4, #4]
 800b21e:	2b00      	cmp	r3, #0
 800b220:	dd41      	ble.n	800b2a6 <__ssvfiscanf_r+0x26a>
 800b222:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b224:	0659      	lsls	r1, r3, #25
 800b226:	d404      	bmi.n	800b232 <__ssvfiscanf_r+0x1f6>
 800b228:	6823      	ldr	r3, [r4, #0]
 800b22a:	781a      	ldrb	r2, [r3, #0]
 800b22c:	5cba      	ldrb	r2, [r7, r2]
 800b22e:	0712      	lsls	r2, r2, #28
 800b230:	d440      	bmi.n	800b2b4 <__ssvfiscanf_r+0x278>
 800b232:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b234:	2b02      	cmp	r3, #2
 800b236:	dc4f      	bgt.n	800b2d8 <__ssvfiscanf_r+0x29c>
 800b238:	466b      	mov	r3, sp
 800b23a:	4622      	mov	r2, r4
 800b23c:	a941      	add	r1, sp, #260	; 0x104
 800b23e:	4630      	mov	r0, r6
 800b240:	f000 fa08 	bl	800b654 <_scanf_chars>
 800b244:	2801      	cmp	r0, #1
 800b246:	d065      	beq.n	800b314 <__ssvfiscanf_r+0x2d8>
 800b248:	2802      	cmp	r0, #2
 800b24a:	f47f af21 	bne.w	800b090 <__ssvfiscanf_r+0x54>
 800b24e:	e7cf      	b.n	800b1f0 <__ssvfiscanf_r+0x1b4>
 800b250:	220a      	movs	r2, #10
 800b252:	e7dd      	b.n	800b210 <__ssvfiscanf_r+0x1d4>
 800b254:	2300      	movs	r3, #0
 800b256:	9342      	str	r3, [sp, #264]	; 0x108
 800b258:	2303      	movs	r3, #3
 800b25a:	e7de      	b.n	800b21a <__ssvfiscanf_r+0x1de>
 800b25c:	2308      	movs	r3, #8
 800b25e:	9342      	str	r3, [sp, #264]	; 0x108
 800b260:	2304      	movs	r3, #4
 800b262:	e7da      	b.n	800b21a <__ssvfiscanf_r+0x1de>
 800b264:	4629      	mov	r1, r5
 800b266:	4640      	mov	r0, r8
 800b268:	f000 fb6a 	bl	800b940 <__sccl>
 800b26c:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b26e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b272:	9341      	str	r3, [sp, #260]	; 0x104
 800b274:	4605      	mov	r5, r0
 800b276:	2301      	movs	r3, #1
 800b278:	e7cf      	b.n	800b21a <__ssvfiscanf_r+0x1de>
 800b27a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b27c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b280:	9341      	str	r3, [sp, #260]	; 0x104
 800b282:	2300      	movs	r3, #0
 800b284:	e7c9      	b.n	800b21a <__ssvfiscanf_r+0x1de>
 800b286:	2302      	movs	r3, #2
 800b288:	e7c7      	b.n	800b21a <__ssvfiscanf_r+0x1de>
 800b28a:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b28c:	06c3      	lsls	r3, r0, #27
 800b28e:	f53f aeff 	bmi.w	800b090 <__ssvfiscanf_r+0x54>
 800b292:	9b00      	ldr	r3, [sp, #0]
 800b294:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b296:	1d19      	adds	r1, r3, #4
 800b298:	9100      	str	r1, [sp, #0]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	07c0      	lsls	r0, r0, #31
 800b29e:	bf4c      	ite	mi
 800b2a0:	801a      	strhmi	r2, [r3, #0]
 800b2a2:	601a      	strpl	r2, [r3, #0]
 800b2a4:	e6f4      	b.n	800b090 <__ssvfiscanf_r+0x54>
 800b2a6:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2a8:	4621      	mov	r1, r4
 800b2aa:	4630      	mov	r0, r6
 800b2ac:	4798      	blx	r3
 800b2ae:	2800      	cmp	r0, #0
 800b2b0:	d0b7      	beq.n	800b222 <__ssvfiscanf_r+0x1e6>
 800b2b2:	e79d      	b.n	800b1f0 <__ssvfiscanf_r+0x1b4>
 800b2b4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2b6:	3201      	adds	r2, #1
 800b2b8:	9245      	str	r2, [sp, #276]	; 0x114
 800b2ba:	6862      	ldr	r2, [r4, #4]
 800b2bc:	3a01      	subs	r2, #1
 800b2be:	2a00      	cmp	r2, #0
 800b2c0:	6062      	str	r2, [r4, #4]
 800b2c2:	dd02      	ble.n	800b2ca <__ssvfiscanf_r+0x28e>
 800b2c4:	3301      	adds	r3, #1
 800b2c6:	6023      	str	r3, [r4, #0]
 800b2c8:	e7ae      	b.n	800b228 <__ssvfiscanf_r+0x1ec>
 800b2ca:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2cc:	4621      	mov	r1, r4
 800b2ce:	4630      	mov	r0, r6
 800b2d0:	4798      	blx	r3
 800b2d2:	2800      	cmp	r0, #0
 800b2d4:	d0a8      	beq.n	800b228 <__ssvfiscanf_r+0x1ec>
 800b2d6:	e78b      	b.n	800b1f0 <__ssvfiscanf_r+0x1b4>
 800b2d8:	2b04      	cmp	r3, #4
 800b2da:	dc06      	bgt.n	800b2ea <__ssvfiscanf_r+0x2ae>
 800b2dc:	466b      	mov	r3, sp
 800b2de:	4622      	mov	r2, r4
 800b2e0:	a941      	add	r1, sp, #260	; 0x104
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	f000 fa0e 	bl	800b704 <_scanf_i>
 800b2e8:	e7ac      	b.n	800b244 <__ssvfiscanf_r+0x208>
 800b2ea:	4b0f      	ldr	r3, [pc, #60]	; (800b328 <__ssvfiscanf_r+0x2ec>)
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	f43f aecf 	beq.w	800b090 <__ssvfiscanf_r+0x54>
 800b2f2:	466b      	mov	r3, sp
 800b2f4:	4622      	mov	r2, r4
 800b2f6:	a941      	add	r1, sp, #260	; 0x104
 800b2f8:	4630      	mov	r0, r6
 800b2fa:	f7fc ff03 	bl	8008104 <_scanf_float>
 800b2fe:	e7a1      	b.n	800b244 <__ssvfiscanf_r+0x208>
 800b300:	89a3      	ldrh	r3, [r4, #12]
 800b302:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b306:	bf18      	it	ne
 800b308:	f04f 30ff 	movne.w	r0, #4294967295
 800b30c:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b310:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b314:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b316:	e7f9      	b.n	800b30c <__ssvfiscanf_r+0x2d0>
 800b318:	0800af89 	.word	0x0800af89
 800b31c:	0800b003 	.word	0x0800b003
 800b320:	0800cb41 	.word	0x0800cb41
 800b324:	0800ceb2 	.word	0x0800ceb2
 800b328:	08008105 	.word	0x08008105

0800b32c <_printf_common>:
 800b32c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b330:	4616      	mov	r6, r2
 800b332:	4699      	mov	r9, r3
 800b334:	688a      	ldr	r2, [r1, #8]
 800b336:	690b      	ldr	r3, [r1, #16]
 800b338:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b33c:	4293      	cmp	r3, r2
 800b33e:	bfb8      	it	lt
 800b340:	4613      	movlt	r3, r2
 800b342:	6033      	str	r3, [r6, #0]
 800b344:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b348:	4607      	mov	r7, r0
 800b34a:	460c      	mov	r4, r1
 800b34c:	b10a      	cbz	r2, 800b352 <_printf_common+0x26>
 800b34e:	3301      	adds	r3, #1
 800b350:	6033      	str	r3, [r6, #0]
 800b352:	6823      	ldr	r3, [r4, #0]
 800b354:	0699      	lsls	r1, r3, #26
 800b356:	bf42      	ittt	mi
 800b358:	6833      	ldrmi	r3, [r6, #0]
 800b35a:	3302      	addmi	r3, #2
 800b35c:	6033      	strmi	r3, [r6, #0]
 800b35e:	6825      	ldr	r5, [r4, #0]
 800b360:	f015 0506 	ands.w	r5, r5, #6
 800b364:	d106      	bne.n	800b374 <_printf_common+0x48>
 800b366:	f104 0a19 	add.w	sl, r4, #25
 800b36a:	68e3      	ldr	r3, [r4, #12]
 800b36c:	6832      	ldr	r2, [r6, #0]
 800b36e:	1a9b      	subs	r3, r3, r2
 800b370:	42ab      	cmp	r3, r5
 800b372:	dc26      	bgt.n	800b3c2 <_printf_common+0x96>
 800b374:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b378:	1e13      	subs	r3, r2, #0
 800b37a:	6822      	ldr	r2, [r4, #0]
 800b37c:	bf18      	it	ne
 800b37e:	2301      	movne	r3, #1
 800b380:	0692      	lsls	r2, r2, #26
 800b382:	d42b      	bmi.n	800b3dc <_printf_common+0xb0>
 800b384:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b388:	4649      	mov	r1, r9
 800b38a:	4638      	mov	r0, r7
 800b38c:	47c0      	blx	r8
 800b38e:	3001      	adds	r0, #1
 800b390:	d01e      	beq.n	800b3d0 <_printf_common+0xa4>
 800b392:	6823      	ldr	r3, [r4, #0]
 800b394:	68e5      	ldr	r5, [r4, #12]
 800b396:	6832      	ldr	r2, [r6, #0]
 800b398:	f003 0306 	and.w	r3, r3, #6
 800b39c:	2b04      	cmp	r3, #4
 800b39e:	bf08      	it	eq
 800b3a0:	1aad      	subeq	r5, r5, r2
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	6922      	ldr	r2, [r4, #16]
 800b3a6:	bf0c      	ite	eq
 800b3a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3ac:	2500      	movne	r5, #0
 800b3ae:	4293      	cmp	r3, r2
 800b3b0:	bfc4      	itt	gt
 800b3b2:	1a9b      	subgt	r3, r3, r2
 800b3b4:	18ed      	addgt	r5, r5, r3
 800b3b6:	2600      	movs	r6, #0
 800b3b8:	341a      	adds	r4, #26
 800b3ba:	42b5      	cmp	r5, r6
 800b3bc:	d11a      	bne.n	800b3f4 <_printf_common+0xc8>
 800b3be:	2000      	movs	r0, #0
 800b3c0:	e008      	b.n	800b3d4 <_printf_common+0xa8>
 800b3c2:	2301      	movs	r3, #1
 800b3c4:	4652      	mov	r2, sl
 800b3c6:	4649      	mov	r1, r9
 800b3c8:	4638      	mov	r0, r7
 800b3ca:	47c0      	blx	r8
 800b3cc:	3001      	adds	r0, #1
 800b3ce:	d103      	bne.n	800b3d8 <_printf_common+0xac>
 800b3d0:	f04f 30ff 	mov.w	r0, #4294967295
 800b3d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3d8:	3501      	adds	r5, #1
 800b3da:	e7c6      	b.n	800b36a <_printf_common+0x3e>
 800b3dc:	18e1      	adds	r1, r4, r3
 800b3de:	1c5a      	adds	r2, r3, #1
 800b3e0:	2030      	movs	r0, #48	; 0x30
 800b3e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b3e6:	4422      	add	r2, r4
 800b3e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b3ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b3f0:	3302      	adds	r3, #2
 800b3f2:	e7c7      	b.n	800b384 <_printf_common+0x58>
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	4622      	mov	r2, r4
 800b3f8:	4649      	mov	r1, r9
 800b3fa:	4638      	mov	r0, r7
 800b3fc:	47c0      	blx	r8
 800b3fe:	3001      	adds	r0, #1
 800b400:	d0e6      	beq.n	800b3d0 <_printf_common+0xa4>
 800b402:	3601      	adds	r6, #1
 800b404:	e7d9      	b.n	800b3ba <_printf_common+0x8e>
	...

0800b408 <_printf_i>:
 800b408:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b40c:	460c      	mov	r4, r1
 800b40e:	4691      	mov	r9, r2
 800b410:	7e27      	ldrb	r7, [r4, #24]
 800b412:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b414:	2f78      	cmp	r7, #120	; 0x78
 800b416:	4680      	mov	r8, r0
 800b418:	469a      	mov	sl, r3
 800b41a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b41e:	d807      	bhi.n	800b430 <_printf_i+0x28>
 800b420:	2f62      	cmp	r7, #98	; 0x62
 800b422:	d80a      	bhi.n	800b43a <_printf_i+0x32>
 800b424:	2f00      	cmp	r7, #0
 800b426:	f000 80d8 	beq.w	800b5da <_printf_i+0x1d2>
 800b42a:	2f58      	cmp	r7, #88	; 0x58
 800b42c:	f000 80a3 	beq.w	800b576 <_printf_i+0x16e>
 800b430:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b434:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b438:	e03a      	b.n	800b4b0 <_printf_i+0xa8>
 800b43a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b43e:	2b15      	cmp	r3, #21
 800b440:	d8f6      	bhi.n	800b430 <_printf_i+0x28>
 800b442:	a001      	add	r0, pc, #4	; (adr r0, 800b448 <_printf_i+0x40>)
 800b444:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b448:	0800b4a1 	.word	0x0800b4a1
 800b44c:	0800b4b5 	.word	0x0800b4b5
 800b450:	0800b431 	.word	0x0800b431
 800b454:	0800b431 	.word	0x0800b431
 800b458:	0800b431 	.word	0x0800b431
 800b45c:	0800b431 	.word	0x0800b431
 800b460:	0800b4b5 	.word	0x0800b4b5
 800b464:	0800b431 	.word	0x0800b431
 800b468:	0800b431 	.word	0x0800b431
 800b46c:	0800b431 	.word	0x0800b431
 800b470:	0800b431 	.word	0x0800b431
 800b474:	0800b5c1 	.word	0x0800b5c1
 800b478:	0800b4e5 	.word	0x0800b4e5
 800b47c:	0800b5a3 	.word	0x0800b5a3
 800b480:	0800b431 	.word	0x0800b431
 800b484:	0800b431 	.word	0x0800b431
 800b488:	0800b5e3 	.word	0x0800b5e3
 800b48c:	0800b431 	.word	0x0800b431
 800b490:	0800b4e5 	.word	0x0800b4e5
 800b494:	0800b431 	.word	0x0800b431
 800b498:	0800b431 	.word	0x0800b431
 800b49c:	0800b5ab 	.word	0x0800b5ab
 800b4a0:	680b      	ldr	r3, [r1, #0]
 800b4a2:	1d1a      	adds	r2, r3, #4
 800b4a4:	681b      	ldr	r3, [r3, #0]
 800b4a6:	600a      	str	r2, [r1, #0]
 800b4a8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4ac:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4b0:	2301      	movs	r3, #1
 800b4b2:	e0a3      	b.n	800b5fc <_printf_i+0x1f4>
 800b4b4:	6825      	ldr	r5, [r4, #0]
 800b4b6:	6808      	ldr	r0, [r1, #0]
 800b4b8:	062e      	lsls	r6, r5, #24
 800b4ba:	f100 0304 	add.w	r3, r0, #4
 800b4be:	d50a      	bpl.n	800b4d6 <_printf_i+0xce>
 800b4c0:	6805      	ldr	r5, [r0, #0]
 800b4c2:	600b      	str	r3, [r1, #0]
 800b4c4:	2d00      	cmp	r5, #0
 800b4c6:	da03      	bge.n	800b4d0 <_printf_i+0xc8>
 800b4c8:	232d      	movs	r3, #45	; 0x2d
 800b4ca:	426d      	negs	r5, r5
 800b4cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b4d0:	485e      	ldr	r0, [pc, #376]	; (800b64c <_printf_i+0x244>)
 800b4d2:	230a      	movs	r3, #10
 800b4d4:	e019      	b.n	800b50a <_printf_i+0x102>
 800b4d6:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b4da:	6805      	ldr	r5, [r0, #0]
 800b4dc:	600b      	str	r3, [r1, #0]
 800b4de:	bf18      	it	ne
 800b4e0:	b22d      	sxthne	r5, r5
 800b4e2:	e7ef      	b.n	800b4c4 <_printf_i+0xbc>
 800b4e4:	680b      	ldr	r3, [r1, #0]
 800b4e6:	6825      	ldr	r5, [r4, #0]
 800b4e8:	1d18      	adds	r0, r3, #4
 800b4ea:	6008      	str	r0, [r1, #0]
 800b4ec:	0628      	lsls	r0, r5, #24
 800b4ee:	d501      	bpl.n	800b4f4 <_printf_i+0xec>
 800b4f0:	681d      	ldr	r5, [r3, #0]
 800b4f2:	e002      	b.n	800b4fa <_printf_i+0xf2>
 800b4f4:	0669      	lsls	r1, r5, #25
 800b4f6:	d5fb      	bpl.n	800b4f0 <_printf_i+0xe8>
 800b4f8:	881d      	ldrh	r5, [r3, #0]
 800b4fa:	4854      	ldr	r0, [pc, #336]	; (800b64c <_printf_i+0x244>)
 800b4fc:	2f6f      	cmp	r7, #111	; 0x6f
 800b4fe:	bf0c      	ite	eq
 800b500:	2308      	moveq	r3, #8
 800b502:	230a      	movne	r3, #10
 800b504:	2100      	movs	r1, #0
 800b506:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b50a:	6866      	ldr	r6, [r4, #4]
 800b50c:	60a6      	str	r6, [r4, #8]
 800b50e:	2e00      	cmp	r6, #0
 800b510:	bfa2      	ittt	ge
 800b512:	6821      	ldrge	r1, [r4, #0]
 800b514:	f021 0104 	bicge.w	r1, r1, #4
 800b518:	6021      	strge	r1, [r4, #0]
 800b51a:	b90d      	cbnz	r5, 800b520 <_printf_i+0x118>
 800b51c:	2e00      	cmp	r6, #0
 800b51e:	d04d      	beq.n	800b5bc <_printf_i+0x1b4>
 800b520:	4616      	mov	r6, r2
 800b522:	fbb5 f1f3 	udiv	r1, r5, r3
 800b526:	fb03 5711 	mls	r7, r3, r1, r5
 800b52a:	5dc7      	ldrb	r7, [r0, r7]
 800b52c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b530:	462f      	mov	r7, r5
 800b532:	42bb      	cmp	r3, r7
 800b534:	460d      	mov	r5, r1
 800b536:	d9f4      	bls.n	800b522 <_printf_i+0x11a>
 800b538:	2b08      	cmp	r3, #8
 800b53a:	d10b      	bne.n	800b554 <_printf_i+0x14c>
 800b53c:	6823      	ldr	r3, [r4, #0]
 800b53e:	07df      	lsls	r7, r3, #31
 800b540:	d508      	bpl.n	800b554 <_printf_i+0x14c>
 800b542:	6923      	ldr	r3, [r4, #16]
 800b544:	6861      	ldr	r1, [r4, #4]
 800b546:	4299      	cmp	r1, r3
 800b548:	bfde      	ittt	le
 800b54a:	2330      	movle	r3, #48	; 0x30
 800b54c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b550:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b554:	1b92      	subs	r2, r2, r6
 800b556:	6122      	str	r2, [r4, #16]
 800b558:	f8cd a000 	str.w	sl, [sp]
 800b55c:	464b      	mov	r3, r9
 800b55e:	aa03      	add	r2, sp, #12
 800b560:	4621      	mov	r1, r4
 800b562:	4640      	mov	r0, r8
 800b564:	f7ff fee2 	bl	800b32c <_printf_common>
 800b568:	3001      	adds	r0, #1
 800b56a:	d14c      	bne.n	800b606 <_printf_i+0x1fe>
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	b004      	add	sp, #16
 800b572:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b576:	4835      	ldr	r0, [pc, #212]	; (800b64c <_printf_i+0x244>)
 800b578:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b57c:	6823      	ldr	r3, [r4, #0]
 800b57e:	680e      	ldr	r6, [r1, #0]
 800b580:	061f      	lsls	r7, r3, #24
 800b582:	f856 5b04 	ldr.w	r5, [r6], #4
 800b586:	600e      	str	r6, [r1, #0]
 800b588:	d514      	bpl.n	800b5b4 <_printf_i+0x1ac>
 800b58a:	07d9      	lsls	r1, r3, #31
 800b58c:	bf44      	itt	mi
 800b58e:	f043 0320 	orrmi.w	r3, r3, #32
 800b592:	6023      	strmi	r3, [r4, #0]
 800b594:	b91d      	cbnz	r5, 800b59e <_printf_i+0x196>
 800b596:	6823      	ldr	r3, [r4, #0]
 800b598:	f023 0320 	bic.w	r3, r3, #32
 800b59c:	6023      	str	r3, [r4, #0]
 800b59e:	2310      	movs	r3, #16
 800b5a0:	e7b0      	b.n	800b504 <_printf_i+0xfc>
 800b5a2:	6823      	ldr	r3, [r4, #0]
 800b5a4:	f043 0320 	orr.w	r3, r3, #32
 800b5a8:	6023      	str	r3, [r4, #0]
 800b5aa:	2378      	movs	r3, #120	; 0x78
 800b5ac:	4828      	ldr	r0, [pc, #160]	; (800b650 <_printf_i+0x248>)
 800b5ae:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5b2:	e7e3      	b.n	800b57c <_printf_i+0x174>
 800b5b4:	065e      	lsls	r6, r3, #25
 800b5b6:	bf48      	it	mi
 800b5b8:	b2ad      	uxthmi	r5, r5
 800b5ba:	e7e6      	b.n	800b58a <_printf_i+0x182>
 800b5bc:	4616      	mov	r6, r2
 800b5be:	e7bb      	b.n	800b538 <_printf_i+0x130>
 800b5c0:	680b      	ldr	r3, [r1, #0]
 800b5c2:	6826      	ldr	r6, [r4, #0]
 800b5c4:	6960      	ldr	r0, [r4, #20]
 800b5c6:	1d1d      	adds	r5, r3, #4
 800b5c8:	600d      	str	r5, [r1, #0]
 800b5ca:	0635      	lsls	r5, r6, #24
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	d501      	bpl.n	800b5d4 <_printf_i+0x1cc>
 800b5d0:	6018      	str	r0, [r3, #0]
 800b5d2:	e002      	b.n	800b5da <_printf_i+0x1d2>
 800b5d4:	0671      	lsls	r1, r6, #25
 800b5d6:	d5fb      	bpl.n	800b5d0 <_printf_i+0x1c8>
 800b5d8:	8018      	strh	r0, [r3, #0]
 800b5da:	2300      	movs	r3, #0
 800b5dc:	6123      	str	r3, [r4, #16]
 800b5de:	4616      	mov	r6, r2
 800b5e0:	e7ba      	b.n	800b558 <_printf_i+0x150>
 800b5e2:	680b      	ldr	r3, [r1, #0]
 800b5e4:	1d1a      	adds	r2, r3, #4
 800b5e6:	600a      	str	r2, [r1, #0]
 800b5e8:	681e      	ldr	r6, [r3, #0]
 800b5ea:	6862      	ldr	r2, [r4, #4]
 800b5ec:	2100      	movs	r1, #0
 800b5ee:	4630      	mov	r0, r6
 800b5f0:	f7f4 fdf6 	bl	80001e0 <memchr>
 800b5f4:	b108      	cbz	r0, 800b5fa <_printf_i+0x1f2>
 800b5f6:	1b80      	subs	r0, r0, r6
 800b5f8:	6060      	str	r0, [r4, #4]
 800b5fa:	6863      	ldr	r3, [r4, #4]
 800b5fc:	6123      	str	r3, [r4, #16]
 800b5fe:	2300      	movs	r3, #0
 800b600:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b604:	e7a8      	b.n	800b558 <_printf_i+0x150>
 800b606:	6923      	ldr	r3, [r4, #16]
 800b608:	4632      	mov	r2, r6
 800b60a:	4649      	mov	r1, r9
 800b60c:	4640      	mov	r0, r8
 800b60e:	47d0      	blx	sl
 800b610:	3001      	adds	r0, #1
 800b612:	d0ab      	beq.n	800b56c <_printf_i+0x164>
 800b614:	6823      	ldr	r3, [r4, #0]
 800b616:	079b      	lsls	r3, r3, #30
 800b618:	d413      	bmi.n	800b642 <_printf_i+0x23a>
 800b61a:	68e0      	ldr	r0, [r4, #12]
 800b61c:	9b03      	ldr	r3, [sp, #12]
 800b61e:	4298      	cmp	r0, r3
 800b620:	bfb8      	it	lt
 800b622:	4618      	movlt	r0, r3
 800b624:	e7a4      	b.n	800b570 <_printf_i+0x168>
 800b626:	2301      	movs	r3, #1
 800b628:	4632      	mov	r2, r6
 800b62a:	4649      	mov	r1, r9
 800b62c:	4640      	mov	r0, r8
 800b62e:	47d0      	blx	sl
 800b630:	3001      	adds	r0, #1
 800b632:	d09b      	beq.n	800b56c <_printf_i+0x164>
 800b634:	3501      	adds	r5, #1
 800b636:	68e3      	ldr	r3, [r4, #12]
 800b638:	9903      	ldr	r1, [sp, #12]
 800b63a:	1a5b      	subs	r3, r3, r1
 800b63c:	42ab      	cmp	r3, r5
 800b63e:	dcf2      	bgt.n	800b626 <_printf_i+0x21e>
 800b640:	e7eb      	b.n	800b61a <_printf_i+0x212>
 800b642:	2500      	movs	r5, #0
 800b644:	f104 0619 	add.w	r6, r4, #25
 800b648:	e7f5      	b.n	800b636 <_printf_i+0x22e>
 800b64a:	bf00      	nop
 800b64c:	0800cebd 	.word	0x0800cebd
 800b650:	0800cece 	.word	0x0800cece

0800b654 <_scanf_chars>:
 800b654:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b658:	4615      	mov	r5, r2
 800b65a:	688a      	ldr	r2, [r1, #8]
 800b65c:	4680      	mov	r8, r0
 800b65e:	460c      	mov	r4, r1
 800b660:	b932      	cbnz	r2, 800b670 <_scanf_chars+0x1c>
 800b662:	698a      	ldr	r2, [r1, #24]
 800b664:	2a00      	cmp	r2, #0
 800b666:	bf0c      	ite	eq
 800b668:	2201      	moveq	r2, #1
 800b66a:	f04f 32ff 	movne.w	r2, #4294967295
 800b66e:	608a      	str	r2, [r1, #8]
 800b670:	6822      	ldr	r2, [r4, #0]
 800b672:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b700 <_scanf_chars+0xac>
 800b676:	06d1      	lsls	r1, r2, #27
 800b678:	bf5f      	itttt	pl
 800b67a:	681a      	ldrpl	r2, [r3, #0]
 800b67c:	1d11      	addpl	r1, r2, #4
 800b67e:	6019      	strpl	r1, [r3, #0]
 800b680:	6816      	ldrpl	r6, [r2, #0]
 800b682:	2700      	movs	r7, #0
 800b684:	69a0      	ldr	r0, [r4, #24]
 800b686:	b188      	cbz	r0, 800b6ac <_scanf_chars+0x58>
 800b688:	2801      	cmp	r0, #1
 800b68a:	d107      	bne.n	800b69c <_scanf_chars+0x48>
 800b68c:	682b      	ldr	r3, [r5, #0]
 800b68e:	781a      	ldrb	r2, [r3, #0]
 800b690:	6963      	ldr	r3, [r4, #20]
 800b692:	5c9b      	ldrb	r3, [r3, r2]
 800b694:	b953      	cbnz	r3, 800b6ac <_scanf_chars+0x58>
 800b696:	bb27      	cbnz	r7, 800b6e2 <_scanf_chars+0x8e>
 800b698:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b69c:	2802      	cmp	r0, #2
 800b69e:	d120      	bne.n	800b6e2 <_scanf_chars+0x8e>
 800b6a0:	682b      	ldr	r3, [r5, #0]
 800b6a2:	781b      	ldrb	r3, [r3, #0]
 800b6a4:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b6a8:	071b      	lsls	r3, r3, #28
 800b6aa:	d41a      	bmi.n	800b6e2 <_scanf_chars+0x8e>
 800b6ac:	6823      	ldr	r3, [r4, #0]
 800b6ae:	06da      	lsls	r2, r3, #27
 800b6b0:	bf5e      	ittt	pl
 800b6b2:	682b      	ldrpl	r3, [r5, #0]
 800b6b4:	781b      	ldrbpl	r3, [r3, #0]
 800b6b6:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b6ba:	682a      	ldr	r2, [r5, #0]
 800b6bc:	686b      	ldr	r3, [r5, #4]
 800b6be:	3201      	adds	r2, #1
 800b6c0:	602a      	str	r2, [r5, #0]
 800b6c2:	68a2      	ldr	r2, [r4, #8]
 800b6c4:	3b01      	subs	r3, #1
 800b6c6:	3a01      	subs	r2, #1
 800b6c8:	606b      	str	r3, [r5, #4]
 800b6ca:	3701      	adds	r7, #1
 800b6cc:	60a2      	str	r2, [r4, #8]
 800b6ce:	b142      	cbz	r2, 800b6e2 <_scanf_chars+0x8e>
 800b6d0:	2b00      	cmp	r3, #0
 800b6d2:	dcd7      	bgt.n	800b684 <_scanf_chars+0x30>
 800b6d4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b6d8:	4629      	mov	r1, r5
 800b6da:	4640      	mov	r0, r8
 800b6dc:	4798      	blx	r3
 800b6de:	2800      	cmp	r0, #0
 800b6e0:	d0d0      	beq.n	800b684 <_scanf_chars+0x30>
 800b6e2:	6823      	ldr	r3, [r4, #0]
 800b6e4:	f013 0310 	ands.w	r3, r3, #16
 800b6e8:	d105      	bne.n	800b6f6 <_scanf_chars+0xa2>
 800b6ea:	68e2      	ldr	r2, [r4, #12]
 800b6ec:	3201      	adds	r2, #1
 800b6ee:	60e2      	str	r2, [r4, #12]
 800b6f0:	69a2      	ldr	r2, [r4, #24]
 800b6f2:	b102      	cbz	r2, 800b6f6 <_scanf_chars+0xa2>
 800b6f4:	7033      	strb	r3, [r6, #0]
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	441f      	add	r7, r3
 800b6fa:	6127      	str	r7, [r4, #16]
 800b6fc:	2000      	movs	r0, #0
 800b6fe:	e7cb      	b.n	800b698 <_scanf_chars+0x44>
 800b700:	0800cb41 	.word	0x0800cb41

0800b704 <_scanf_i>:
 800b704:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b708:	4698      	mov	r8, r3
 800b70a:	4b74      	ldr	r3, [pc, #464]	; (800b8dc <_scanf_i+0x1d8>)
 800b70c:	460c      	mov	r4, r1
 800b70e:	4682      	mov	sl, r0
 800b710:	4616      	mov	r6, r2
 800b712:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b716:	b087      	sub	sp, #28
 800b718:	ab03      	add	r3, sp, #12
 800b71a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b71e:	4b70      	ldr	r3, [pc, #448]	; (800b8e0 <_scanf_i+0x1dc>)
 800b720:	69a1      	ldr	r1, [r4, #24]
 800b722:	4a70      	ldr	r2, [pc, #448]	; (800b8e4 <_scanf_i+0x1e0>)
 800b724:	2903      	cmp	r1, #3
 800b726:	bf18      	it	ne
 800b728:	461a      	movne	r2, r3
 800b72a:	68a3      	ldr	r3, [r4, #8]
 800b72c:	9201      	str	r2, [sp, #4]
 800b72e:	1e5a      	subs	r2, r3, #1
 800b730:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b734:	bf88      	it	hi
 800b736:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b73a:	4627      	mov	r7, r4
 800b73c:	bf82      	ittt	hi
 800b73e:	eb03 0905 	addhi.w	r9, r3, r5
 800b742:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b746:	60a3      	strhi	r3, [r4, #8]
 800b748:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b74c:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b750:	bf98      	it	ls
 800b752:	f04f 0900 	movls.w	r9, #0
 800b756:	6023      	str	r3, [r4, #0]
 800b758:	463d      	mov	r5, r7
 800b75a:	f04f 0b00 	mov.w	fp, #0
 800b75e:	6831      	ldr	r1, [r6, #0]
 800b760:	ab03      	add	r3, sp, #12
 800b762:	7809      	ldrb	r1, [r1, #0]
 800b764:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b768:	2202      	movs	r2, #2
 800b76a:	f7f4 fd39 	bl	80001e0 <memchr>
 800b76e:	b328      	cbz	r0, 800b7bc <_scanf_i+0xb8>
 800b770:	f1bb 0f01 	cmp.w	fp, #1
 800b774:	d159      	bne.n	800b82a <_scanf_i+0x126>
 800b776:	6862      	ldr	r2, [r4, #4]
 800b778:	b92a      	cbnz	r2, 800b786 <_scanf_i+0x82>
 800b77a:	6822      	ldr	r2, [r4, #0]
 800b77c:	2308      	movs	r3, #8
 800b77e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b782:	6063      	str	r3, [r4, #4]
 800b784:	6022      	str	r2, [r4, #0]
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b78c:	6022      	str	r2, [r4, #0]
 800b78e:	68a2      	ldr	r2, [r4, #8]
 800b790:	1e51      	subs	r1, r2, #1
 800b792:	60a1      	str	r1, [r4, #8]
 800b794:	b192      	cbz	r2, 800b7bc <_scanf_i+0xb8>
 800b796:	6832      	ldr	r2, [r6, #0]
 800b798:	1c51      	adds	r1, r2, #1
 800b79a:	6031      	str	r1, [r6, #0]
 800b79c:	7812      	ldrb	r2, [r2, #0]
 800b79e:	f805 2b01 	strb.w	r2, [r5], #1
 800b7a2:	6872      	ldr	r2, [r6, #4]
 800b7a4:	3a01      	subs	r2, #1
 800b7a6:	2a00      	cmp	r2, #0
 800b7a8:	6072      	str	r2, [r6, #4]
 800b7aa:	dc07      	bgt.n	800b7bc <_scanf_i+0xb8>
 800b7ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b7b0:	4631      	mov	r1, r6
 800b7b2:	4650      	mov	r0, sl
 800b7b4:	4790      	blx	r2
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	f040 8085 	bne.w	800b8c6 <_scanf_i+0x1c2>
 800b7bc:	f10b 0b01 	add.w	fp, fp, #1
 800b7c0:	f1bb 0f03 	cmp.w	fp, #3
 800b7c4:	d1cb      	bne.n	800b75e <_scanf_i+0x5a>
 800b7c6:	6863      	ldr	r3, [r4, #4]
 800b7c8:	b90b      	cbnz	r3, 800b7ce <_scanf_i+0xca>
 800b7ca:	230a      	movs	r3, #10
 800b7cc:	6063      	str	r3, [r4, #4]
 800b7ce:	6863      	ldr	r3, [r4, #4]
 800b7d0:	4945      	ldr	r1, [pc, #276]	; (800b8e8 <_scanf_i+0x1e4>)
 800b7d2:	6960      	ldr	r0, [r4, #20]
 800b7d4:	1ac9      	subs	r1, r1, r3
 800b7d6:	f000 f8b3 	bl	800b940 <__sccl>
 800b7da:	f04f 0b00 	mov.w	fp, #0
 800b7de:	68a3      	ldr	r3, [r4, #8]
 800b7e0:	6822      	ldr	r2, [r4, #0]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	d03d      	beq.n	800b862 <_scanf_i+0x15e>
 800b7e6:	6831      	ldr	r1, [r6, #0]
 800b7e8:	6960      	ldr	r0, [r4, #20]
 800b7ea:	f891 c000 	ldrb.w	ip, [r1]
 800b7ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b7f2:	2800      	cmp	r0, #0
 800b7f4:	d035      	beq.n	800b862 <_scanf_i+0x15e>
 800b7f6:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b7fa:	d124      	bne.n	800b846 <_scanf_i+0x142>
 800b7fc:	0510      	lsls	r0, r2, #20
 800b7fe:	d522      	bpl.n	800b846 <_scanf_i+0x142>
 800b800:	f10b 0b01 	add.w	fp, fp, #1
 800b804:	f1b9 0f00 	cmp.w	r9, #0
 800b808:	d003      	beq.n	800b812 <_scanf_i+0x10e>
 800b80a:	3301      	adds	r3, #1
 800b80c:	f109 39ff 	add.w	r9, r9, #4294967295
 800b810:	60a3      	str	r3, [r4, #8]
 800b812:	6873      	ldr	r3, [r6, #4]
 800b814:	3b01      	subs	r3, #1
 800b816:	2b00      	cmp	r3, #0
 800b818:	6073      	str	r3, [r6, #4]
 800b81a:	dd1b      	ble.n	800b854 <_scanf_i+0x150>
 800b81c:	6833      	ldr	r3, [r6, #0]
 800b81e:	3301      	adds	r3, #1
 800b820:	6033      	str	r3, [r6, #0]
 800b822:	68a3      	ldr	r3, [r4, #8]
 800b824:	3b01      	subs	r3, #1
 800b826:	60a3      	str	r3, [r4, #8]
 800b828:	e7d9      	b.n	800b7de <_scanf_i+0xda>
 800b82a:	f1bb 0f02 	cmp.w	fp, #2
 800b82e:	d1ae      	bne.n	800b78e <_scanf_i+0x8a>
 800b830:	6822      	ldr	r2, [r4, #0]
 800b832:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b836:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b83a:	d1bf      	bne.n	800b7bc <_scanf_i+0xb8>
 800b83c:	2310      	movs	r3, #16
 800b83e:	6063      	str	r3, [r4, #4]
 800b840:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b844:	e7a2      	b.n	800b78c <_scanf_i+0x88>
 800b846:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b84a:	6022      	str	r2, [r4, #0]
 800b84c:	780b      	ldrb	r3, [r1, #0]
 800b84e:	f805 3b01 	strb.w	r3, [r5], #1
 800b852:	e7de      	b.n	800b812 <_scanf_i+0x10e>
 800b854:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b858:	4631      	mov	r1, r6
 800b85a:	4650      	mov	r0, sl
 800b85c:	4798      	blx	r3
 800b85e:	2800      	cmp	r0, #0
 800b860:	d0df      	beq.n	800b822 <_scanf_i+0x11e>
 800b862:	6823      	ldr	r3, [r4, #0]
 800b864:	05d9      	lsls	r1, r3, #23
 800b866:	d50d      	bpl.n	800b884 <_scanf_i+0x180>
 800b868:	42bd      	cmp	r5, r7
 800b86a:	d909      	bls.n	800b880 <_scanf_i+0x17c>
 800b86c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b870:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b874:	4632      	mov	r2, r6
 800b876:	4650      	mov	r0, sl
 800b878:	4798      	blx	r3
 800b87a:	f105 39ff 	add.w	r9, r5, #4294967295
 800b87e:	464d      	mov	r5, r9
 800b880:	42bd      	cmp	r5, r7
 800b882:	d028      	beq.n	800b8d6 <_scanf_i+0x1d2>
 800b884:	6822      	ldr	r2, [r4, #0]
 800b886:	f012 0210 	ands.w	r2, r2, #16
 800b88a:	d113      	bne.n	800b8b4 <_scanf_i+0x1b0>
 800b88c:	702a      	strb	r2, [r5, #0]
 800b88e:	6863      	ldr	r3, [r4, #4]
 800b890:	9e01      	ldr	r6, [sp, #4]
 800b892:	4639      	mov	r1, r7
 800b894:	4650      	mov	r0, sl
 800b896:	47b0      	blx	r6
 800b898:	f8d8 3000 	ldr.w	r3, [r8]
 800b89c:	6821      	ldr	r1, [r4, #0]
 800b89e:	1d1a      	adds	r2, r3, #4
 800b8a0:	f8c8 2000 	str.w	r2, [r8]
 800b8a4:	f011 0f20 	tst.w	r1, #32
 800b8a8:	681b      	ldr	r3, [r3, #0]
 800b8aa:	d00f      	beq.n	800b8cc <_scanf_i+0x1c8>
 800b8ac:	6018      	str	r0, [r3, #0]
 800b8ae:	68e3      	ldr	r3, [r4, #12]
 800b8b0:	3301      	adds	r3, #1
 800b8b2:	60e3      	str	r3, [r4, #12]
 800b8b4:	1bed      	subs	r5, r5, r7
 800b8b6:	44ab      	add	fp, r5
 800b8b8:	6925      	ldr	r5, [r4, #16]
 800b8ba:	445d      	add	r5, fp
 800b8bc:	6125      	str	r5, [r4, #16]
 800b8be:	2000      	movs	r0, #0
 800b8c0:	b007      	add	sp, #28
 800b8c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8c6:	f04f 0b00 	mov.w	fp, #0
 800b8ca:	e7ca      	b.n	800b862 <_scanf_i+0x15e>
 800b8cc:	07ca      	lsls	r2, r1, #31
 800b8ce:	bf4c      	ite	mi
 800b8d0:	8018      	strhmi	r0, [r3, #0]
 800b8d2:	6018      	strpl	r0, [r3, #0]
 800b8d4:	e7eb      	b.n	800b8ae <_scanf_i+0x1aa>
 800b8d6:	2001      	movs	r0, #1
 800b8d8:	e7f2      	b.n	800b8c0 <_scanf_i+0x1bc>
 800b8da:	bf00      	nop
 800b8dc:	0800c048 	.word	0x0800c048
 800b8e0:	0800bad1 	.word	0x0800bad1
 800b8e4:	080094a1 	.word	0x080094a1
 800b8e8:	0800cef8 	.word	0x0800cef8

0800b8ec <_read_r>:
 800b8ec:	b538      	push	{r3, r4, r5, lr}
 800b8ee:	4d07      	ldr	r5, [pc, #28]	; (800b90c <_read_r+0x20>)
 800b8f0:	4604      	mov	r4, r0
 800b8f2:	4608      	mov	r0, r1
 800b8f4:	4611      	mov	r1, r2
 800b8f6:	2200      	movs	r2, #0
 800b8f8:	602a      	str	r2, [r5, #0]
 800b8fa:	461a      	mov	r2, r3
 800b8fc:	f7f8 f988 	bl	8003c10 <_read>
 800b900:	1c43      	adds	r3, r0, #1
 800b902:	d102      	bne.n	800b90a <_read_r+0x1e>
 800b904:	682b      	ldr	r3, [r5, #0]
 800b906:	b103      	cbz	r3, 800b90a <_read_r+0x1e>
 800b908:	6023      	str	r3, [r4, #0]
 800b90a:	bd38      	pop	{r3, r4, r5, pc}
 800b90c:	20000f68 	.word	0x20000f68

0800b910 <nan>:
 800b910:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b918 <nan+0x8>
 800b914:	4770      	bx	lr
 800b916:	bf00      	nop
 800b918:	00000000 	.word	0x00000000
 800b91c:	7ff80000 	.word	0x7ff80000

0800b920 <_sbrk_r>:
 800b920:	b538      	push	{r3, r4, r5, lr}
 800b922:	4d06      	ldr	r5, [pc, #24]	; (800b93c <_sbrk_r+0x1c>)
 800b924:	2300      	movs	r3, #0
 800b926:	4604      	mov	r4, r0
 800b928:	4608      	mov	r0, r1
 800b92a:	602b      	str	r3, [r5, #0]
 800b92c:	f7f8 f9c2 	bl	8003cb4 <_sbrk>
 800b930:	1c43      	adds	r3, r0, #1
 800b932:	d102      	bne.n	800b93a <_sbrk_r+0x1a>
 800b934:	682b      	ldr	r3, [r5, #0]
 800b936:	b103      	cbz	r3, 800b93a <_sbrk_r+0x1a>
 800b938:	6023      	str	r3, [r4, #0]
 800b93a:	bd38      	pop	{r3, r4, r5, pc}
 800b93c:	20000f68 	.word	0x20000f68

0800b940 <__sccl>:
 800b940:	b570      	push	{r4, r5, r6, lr}
 800b942:	780b      	ldrb	r3, [r1, #0]
 800b944:	4604      	mov	r4, r0
 800b946:	2b5e      	cmp	r3, #94	; 0x5e
 800b948:	bf0b      	itete	eq
 800b94a:	784b      	ldrbeq	r3, [r1, #1]
 800b94c:	1c48      	addne	r0, r1, #1
 800b94e:	1c88      	addeq	r0, r1, #2
 800b950:	2200      	movne	r2, #0
 800b952:	bf08      	it	eq
 800b954:	2201      	moveq	r2, #1
 800b956:	1e61      	subs	r1, r4, #1
 800b958:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b95c:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b960:	42a9      	cmp	r1, r5
 800b962:	d1fb      	bne.n	800b95c <__sccl+0x1c>
 800b964:	b90b      	cbnz	r3, 800b96a <__sccl+0x2a>
 800b966:	3801      	subs	r0, #1
 800b968:	bd70      	pop	{r4, r5, r6, pc}
 800b96a:	f082 0101 	eor.w	r1, r2, #1
 800b96e:	54e1      	strb	r1, [r4, r3]
 800b970:	1c42      	adds	r2, r0, #1
 800b972:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b976:	2d2d      	cmp	r5, #45	; 0x2d
 800b978:	f102 36ff 	add.w	r6, r2, #4294967295
 800b97c:	4610      	mov	r0, r2
 800b97e:	d006      	beq.n	800b98e <__sccl+0x4e>
 800b980:	2d5d      	cmp	r5, #93	; 0x5d
 800b982:	d0f1      	beq.n	800b968 <__sccl+0x28>
 800b984:	b90d      	cbnz	r5, 800b98a <__sccl+0x4a>
 800b986:	4630      	mov	r0, r6
 800b988:	e7ee      	b.n	800b968 <__sccl+0x28>
 800b98a:	462b      	mov	r3, r5
 800b98c:	e7ef      	b.n	800b96e <__sccl+0x2e>
 800b98e:	7816      	ldrb	r6, [r2, #0]
 800b990:	2e5d      	cmp	r6, #93	; 0x5d
 800b992:	d0fa      	beq.n	800b98a <__sccl+0x4a>
 800b994:	42b3      	cmp	r3, r6
 800b996:	dcf8      	bgt.n	800b98a <__sccl+0x4a>
 800b998:	4618      	mov	r0, r3
 800b99a:	3001      	adds	r0, #1
 800b99c:	4286      	cmp	r6, r0
 800b99e:	5421      	strb	r1, [r4, r0]
 800b9a0:	dcfb      	bgt.n	800b99a <__sccl+0x5a>
 800b9a2:	43d8      	mvns	r0, r3
 800b9a4:	4430      	add	r0, r6
 800b9a6:	1c5d      	adds	r5, r3, #1
 800b9a8:	42b3      	cmp	r3, r6
 800b9aa:	bfa8      	it	ge
 800b9ac:	2000      	movge	r0, #0
 800b9ae:	182b      	adds	r3, r5, r0
 800b9b0:	3202      	adds	r2, #2
 800b9b2:	e7de      	b.n	800b972 <__sccl+0x32>

0800b9b4 <strncmp>:
 800b9b4:	b510      	push	{r4, lr}
 800b9b6:	b16a      	cbz	r2, 800b9d4 <strncmp+0x20>
 800b9b8:	3901      	subs	r1, #1
 800b9ba:	1884      	adds	r4, r0, r2
 800b9bc:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b9c0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d103      	bne.n	800b9d0 <strncmp+0x1c>
 800b9c8:	42a0      	cmp	r0, r4
 800b9ca:	d001      	beq.n	800b9d0 <strncmp+0x1c>
 800b9cc:	2b00      	cmp	r3, #0
 800b9ce:	d1f5      	bne.n	800b9bc <strncmp+0x8>
 800b9d0:	1a98      	subs	r0, r3, r2
 800b9d2:	bd10      	pop	{r4, pc}
 800b9d4:	4610      	mov	r0, r2
 800b9d6:	e7fc      	b.n	800b9d2 <strncmp+0x1e>

0800b9d8 <_strtoul_l.isra.0>:
 800b9d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800b9dc:	4e3b      	ldr	r6, [pc, #236]	; (800bacc <_strtoul_l.isra.0+0xf4>)
 800b9de:	4686      	mov	lr, r0
 800b9e0:	468c      	mov	ip, r1
 800b9e2:	4660      	mov	r0, ip
 800b9e4:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800b9e8:	5da5      	ldrb	r5, [r4, r6]
 800b9ea:	f015 0508 	ands.w	r5, r5, #8
 800b9ee:	d1f8      	bne.n	800b9e2 <_strtoul_l.isra.0+0xa>
 800b9f0:	2c2d      	cmp	r4, #45	; 0x2d
 800b9f2:	d134      	bne.n	800ba5e <_strtoul_l.isra.0+0x86>
 800b9f4:	f89c 4000 	ldrb.w	r4, [ip]
 800b9f8:	f04f 0801 	mov.w	r8, #1
 800b9fc:	f100 0c02 	add.w	ip, r0, #2
 800ba00:	2b00      	cmp	r3, #0
 800ba02:	d05e      	beq.n	800bac2 <_strtoul_l.isra.0+0xea>
 800ba04:	2b10      	cmp	r3, #16
 800ba06:	d10c      	bne.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800ba08:	2c30      	cmp	r4, #48	; 0x30
 800ba0a:	d10a      	bne.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800ba0c:	f89c 0000 	ldrb.w	r0, [ip]
 800ba10:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba14:	2858      	cmp	r0, #88	; 0x58
 800ba16:	d14f      	bne.n	800bab8 <_strtoul_l.isra.0+0xe0>
 800ba18:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ba1c:	2310      	movs	r3, #16
 800ba1e:	f10c 0c02 	add.w	ip, ip, #2
 800ba22:	f04f 37ff 	mov.w	r7, #4294967295
 800ba26:	2500      	movs	r5, #0
 800ba28:	fbb7 f7f3 	udiv	r7, r7, r3
 800ba2c:	fb03 f907 	mul.w	r9, r3, r7
 800ba30:	ea6f 0909 	mvn.w	r9, r9
 800ba34:	4628      	mov	r0, r5
 800ba36:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ba3a:	2e09      	cmp	r6, #9
 800ba3c:	d818      	bhi.n	800ba70 <_strtoul_l.isra.0+0x98>
 800ba3e:	4634      	mov	r4, r6
 800ba40:	42a3      	cmp	r3, r4
 800ba42:	dd24      	ble.n	800ba8e <_strtoul_l.isra.0+0xb6>
 800ba44:	2d00      	cmp	r5, #0
 800ba46:	db1f      	blt.n	800ba88 <_strtoul_l.isra.0+0xb0>
 800ba48:	4287      	cmp	r7, r0
 800ba4a:	d31d      	bcc.n	800ba88 <_strtoul_l.isra.0+0xb0>
 800ba4c:	d101      	bne.n	800ba52 <_strtoul_l.isra.0+0x7a>
 800ba4e:	45a1      	cmp	r9, r4
 800ba50:	db1a      	blt.n	800ba88 <_strtoul_l.isra.0+0xb0>
 800ba52:	fb00 4003 	mla	r0, r0, r3, r4
 800ba56:	2501      	movs	r5, #1
 800ba58:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ba5c:	e7eb      	b.n	800ba36 <_strtoul_l.isra.0+0x5e>
 800ba5e:	2c2b      	cmp	r4, #43	; 0x2b
 800ba60:	bf08      	it	eq
 800ba62:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ba66:	46a8      	mov	r8, r5
 800ba68:	bf08      	it	eq
 800ba6a:	f100 0c02 	addeq.w	ip, r0, #2
 800ba6e:	e7c7      	b.n	800ba00 <_strtoul_l.isra.0+0x28>
 800ba70:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800ba74:	2e19      	cmp	r6, #25
 800ba76:	d801      	bhi.n	800ba7c <_strtoul_l.isra.0+0xa4>
 800ba78:	3c37      	subs	r4, #55	; 0x37
 800ba7a:	e7e1      	b.n	800ba40 <_strtoul_l.isra.0+0x68>
 800ba7c:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800ba80:	2e19      	cmp	r6, #25
 800ba82:	d804      	bhi.n	800ba8e <_strtoul_l.isra.0+0xb6>
 800ba84:	3c57      	subs	r4, #87	; 0x57
 800ba86:	e7db      	b.n	800ba40 <_strtoul_l.isra.0+0x68>
 800ba88:	f04f 35ff 	mov.w	r5, #4294967295
 800ba8c:	e7e4      	b.n	800ba58 <_strtoul_l.isra.0+0x80>
 800ba8e:	2d00      	cmp	r5, #0
 800ba90:	da07      	bge.n	800baa2 <_strtoul_l.isra.0+0xca>
 800ba92:	2322      	movs	r3, #34	; 0x22
 800ba94:	f8ce 3000 	str.w	r3, [lr]
 800ba98:	f04f 30ff 	mov.w	r0, #4294967295
 800ba9c:	b942      	cbnz	r2, 800bab0 <_strtoul_l.isra.0+0xd8>
 800ba9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800baa2:	f1b8 0f00 	cmp.w	r8, #0
 800baa6:	d000      	beq.n	800baaa <_strtoul_l.isra.0+0xd2>
 800baa8:	4240      	negs	r0, r0
 800baaa:	2a00      	cmp	r2, #0
 800baac:	d0f7      	beq.n	800ba9e <_strtoul_l.isra.0+0xc6>
 800baae:	b10d      	cbz	r5, 800bab4 <_strtoul_l.isra.0+0xdc>
 800bab0:	f10c 31ff 	add.w	r1, ip, #4294967295
 800bab4:	6011      	str	r1, [r2, #0]
 800bab6:	e7f2      	b.n	800ba9e <_strtoul_l.isra.0+0xc6>
 800bab8:	2430      	movs	r4, #48	; 0x30
 800baba:	2b00      	cmp	r3, #0
 800babc:	d1b1      	bne.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800babe:	2308      	movs	r3, #8
 800bac0:	e7af      	b.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800bac2:	2c30      	cmp	r4, #48	; 0x30
 800bac4:	d0a2      	beq.n	800ba0c <_strtoul_l.isra.0+0x34>
 800bac6:	230a      	movs	r3, #10
 800bac8:	e7ab      	b.n	800ba22 <_strtoul_l.isra.0+0x4a>
 800baca:	bf00      	nop
 800bacc:	0800cb41 	.word	0x0800cb41

0800bad0 <_strtoul_r>:
 800bad0:	f7ff bf82 	b.w	800b9d8 <_strtoul_l.isra.0>

0800bad4 <__submore>:
 800bad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bad8:	460c      	mov	r4, r1
 800bada:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800badc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bae0:	4299      	cmp	r1, r3
 800bae2:	d11d      	bne.n	800bb20 <__submore+0x4c>
 800bae4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bae8:	f7ff f898 	bl	800ac1c <_malloc_r>
 800baec:	b918      	cbnz	r0, 800baf6 <__submore+0x22>
 800baee:	f04f 30ff 	mov.w	r0, #4294967295
 800baf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800baf6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bafa:	63a3      	str	r3, [r4, #56]	; 0x38
 800bafc:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bb00:	6360      	str	r0, [r4, #52]	; 0x34
 800bb02:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bb06:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bb0a:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bb0e:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb12:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bb16:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bb1a:	6020      	str	r0, [r4, #0]
 800bb1c:	2000      	movs	r0, #0
 800bb1e:	e7e8      	b.n	800baf2 <__submore+0x1e>
 800bb20:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bb22:	0077      	lsls	r7, r6, #1
 800bb24:	463a      	mov	r2, r7
 800bb26:	f000 f89d 	bl	800bc64 <_realloc_r>
 800bb2a:	4605      	mov	r5, r0
 800bb2c:	2800      	cmp	r0, #0
 800bb2e:	d0de      	beq.n	800baee <__submore+0x1a>
 800bb30:	eb00 0806 	add.w	r8, r0, r6
 800bb34:	4601      	mov	r1, r0
 800bb36:	4632      	mov	r2, r6
 800bb38:	4640      	mov	r0, r8
 800bb3a:	f7fe fb47 	bl	800a1cc <memcpy>
 800bb3e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bb42:	f8c4 8000 	str.w	r8, [r4]
 800bb46:	e7e9      	b.n	800bb1c <__submore+0x48>

0800bb48 <__ascii_wctomb>:
 800bb48:	b149      	cbz	r1, 800bb5e <__ascii_wctomb+0x16>
 800bb4a:	2aff      	cmp	r2, #255	; 0xff
 800bb4c:	bf85      	ittet	hi
 800bb4e:	238a      	movhi	r3, #138	; 0x8a
 800bb50:	6003      	strhi	r3, [r0, #0]
 800bb52:	700a      	strbls	r2, [r1, #0]
 800bb54:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb58:	bf98      	it	ls
 800bb5a:	2001      	movls	r0, #1
 800bb5c:	4770      	bx	lr
 800bb5e:	4608      	mov	r0, r1
 800bb60:	4770      	bx	lr
	...

0800bb64 <__assert_func>:
 800bb64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb66:	4614      	mov	r4, r2
 800bb68:	461a      	mov	r2, r3
 800bb6a:	4b09      	ldr	r3, [pc, #36]	; (800bb90 <__assert_func+0x2c>)
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4605      	mov	r5, r0
 800bb70:	68d8      	ldr	r0, [r3, #12]
 800bb72:	b14c      	cbz	r4, 800bb88 <__assert_func+0x24>
 800bb74:	4b07      	ldr	r3, [pc, #28]	; (800bb94 <__assert_func+0x30>)
 800bb76:	9100      	str	r1, [sp, #0]
 800bb78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bb7c:	4906      	ldr	r1, [pc, #24]	; (800bb98 <__assert_func+0x34>)
 800bb7e:	462b      	mov	r3, r5
 800bb80:	f000 f80e 	bl	800bba0 <fiprintf>
 800bb84:	f000 f9ee 	bl	800bf64 <abort>
 800bb88:	4b04      	ldr	r3, [pc, #16]	; (800bb9c <__assert_func+0x38>)
 800bb8a:	461c      	mov	r4, r3
 800bb8c:	e7f3      	b.n	800bb76 <__assert_func+0x12>
 800bb8e:	bf00      	nop
 800bb90:	200001f8 	.word	0x200001f8
 800bb94:	0800cefa 	.word	0x0800cefa
 800bb98:	0800cf07 	.word	0x0800cf07
 800bb9c:	0800cf35 	.word	0x0800cf35

0800bba0 <fiprintf>:
 800bba0:	b40e      	push	{r1, r2, r3}
 800bba2:	b503      	push	{r0, r1, lr}
 800bba4:	4601      	mov	r1, r0
 800bba6:	ab03      	add	r3, sp, #12
 800bba8:	4805      	ldr	r0, [pc, #20]	; (800bbc0 <fiprintf+0x20>)
 800bbaa:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbae:	6800      	ldr	r0, [r0, #0]
 800bbb0:	9301      	str	r3, [sp, #4]
 800bbb2:	f000 f8a7 	bl	800bd04 <_vfiprintf_r>
 800bbb6:	b002      	add	sp, #8
 800bbb8:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbbc:	b003      	add	sp, #12
 800bbbe:	4770      	bx	lr
 800bbc0:	200001f8 	.word	0x200001f8

0800bbc4 <_fstat_r>:
 800bbc4:	b538      	push	{r3, r4, r5, lr}
 800bbc6:	4d07      	ldr	r5, [pc, #28]	; (800bbe4 <_fstat_r+0x20>)
 800bbc8:	2300      	movs	r3, #0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	4608      	mov	r0, r1
 800bbce:	4611      	mov	r1, r2
 800bbd0:	602b      	str	r3, [r5, #0]
 800bbd2:	f7f8 f846 	bl	8003c62 <_fstat>
 800bbd6:	1c43      	adds	r3, r0, #1
 800bbd8:	d102      	bne.n	800bbe0 <_fstat_r+0x1c>
 800bbda:	682b      	ldr	r3, [r5, #0]
 800bbdc:	b103      	cbz	r3, 800bbe0 <_fstat_r+0x1c>
 800bbde:	6023      	str	r3, [r4, #0]
 800bbe0:	bd38      	pop	{r3, r4, r5, pc}
 800bbe2:	bf00      	nop
 800bbe4:	20000f68 	.word	0x20000f68

0800bbe8 <_isatty_r>:
 800bbe8:	b538      	push	{r3, r4, r5, lr}
 800bbea:	4d06      	ldr	r5, [pc, #24]	; (800bc04 <_isatty_r+0x1c>)
 800bbec:	2300      	movs	r3, #0
 800bbee:	4604      	mov	r4, r0
 800bbf0:	4608      	mov	r0, r1
 800bbf2:	602b      	str	r3, [r5, #0]
 800bbf4:	f7f8 f845 	bl	8003c82 <_isatty>
 800bbf8:	1c43      	adds	r3, r0, #1
 800bbfa:	d102      	bne.n	800bc02 <_isatty_r+0x1a>
 800bbfc:	682b      	ldr	r3, [r5, #0]
 800bbfe:	b103      	cbz	r3, 800bc02 <_isatty_r+0x1a>
 800bc00:	6023      	str	r3, [r4, #0]
 800bc02:	bd38      	pop	{r3, r4, r5, pc}
 800bc04:	20000f68 	.word	0x20000f68

0800bc08 <malloc>:
 800bc08:	4b02      	ldr	r3, [pc, #8]	; (800bc14 <malloc+0xc>)
 800bc0a:	4601      	mov	r1, r0
 800bc0c:	6818      	ldr	r0, [r3, #0]
 800bc0e:	f7ff b805 	b.w	800ac1c <_malloc_r>
 800bc12:	bf00      	nop
 800bc14:	200001f8 	.word	0x200001f8

0800bc18 <memmove>:
 800bc18:	4288      	cmp	r0, r1
 800bc1a:	b510      	push	{r4, lr}
 800bc1c:	eb01 0402 	add.w	r4, r1, r2
 800bc20:	d902      	bls.n	800bc28 <memmove+0x10>
 800bc22:	4284      	cmp	r4, r0
 800bc24:	4623      	mov	r3, r4
 800bc26:	d807      	bhi.n	800bc38 <memmove+0x20>
 800bc28:	1e43      	subs	r3, r0, #1
 800bc2a:	42a1      	cmp	r1, r4
 800bc2c:	d008      	beq.n	800bc40 <memmove+0x28>
 800bc2e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc32:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc36:	e7f8      	b.n	800bc2a <memmove+0x12>
 800bc38:	4402      	add	r2, r0
 800bc3a:	4601      	mov	r1, r0
 800bc3c:	428a      	cmp	r2, r1
 800bc3e:	d100      	bne.n	800bc42 <memmove+0x2a>
 800bc40:	bd10      	pop	{r4, pc}
 800bc42:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc46:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc4a:	e7f7      	b.n	800bc3c <memmove+0x24>

0800bc4c <__malloc_lock>:
 800bc4c:	4801      	ldr	r0, [pc, #4]	; (800bc54 <__malloc_lock+0x8>)
 800bc4e:	f7fe ba32 	b.w	800a0b6 <__retarget_lock_acquire_recursive>
 800bc52:	bf00      	nop
 800bc54:	20000f60 	.word	0x20000f60

0800bc58 <__malloc_unlock>:
 800bc58:	4801      	ldr	r0, [pc, #4]	; (800bc60 <__malloc_unlock+0x8>)
 800bc5a:	f7fe ba2d 	b.w	800a0b8 <__retarget_lock_release_recursive>
 800bc5e:	bf00      	nop
 800bc60:	20000f60 	.word	0x20000f60

0800bc64 <_realloc_r>:
 800bc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc66:	4607      	mov	r7, r0
 800bc68:	4614      	mov	r4, r2
 800bc6a:	460e      	mov	r6, r1
 800bc6c:	b921      	cbnz	r1, 800bc78 <_realloc_r+0x14>
 800bc6e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bc72:	4611      	mov	r1, r2
 800bc74:	f7fe bfd2 	b.w	800ac1c <_malloc_r>
 800bc78:	b922      	cbnz	r2, 800bc84 <_realloc_r+0x20>
 800bc7a:	f7fe ff7f 	bl	800ab7c <_free_r>
 800bc7e:	4625      	mov	r5, r4
 800bc80:	4628      	mov	r0, r5
 800bc82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc84:	f000 f975 	bl	800bf72 <_malloc_usable_size_r>
 800bc88:	42a0      	cmp	r0, r4
 800bc8a:	d20f      	bcs.n	800bcac <_realloc_r+0x48>
 800bc8c:	4621      	mov	r1, r4
 800bc8e:	4638      	mov	r0, r7
 800bc90:	f7fe ffc4 	bl	800ac1c <_malloc_r>
 800bc94:	4605      	mov	r5, r0
 800bc96:	2800      	cmp	r0, #0
 800bc98:	d0f2      	beq.n	800bc80 <_realloc_r+0x1c>
 800bc9a:	4631      	mov	r1, r6
 800bc9c:	4622      	mov	r2, r4
 800bc9e:	f7fe fa95 	bl	800a1cc <memcpy>
 800bca2:	4631      	mov	r1, r6
 800bca4:	4638      	mov	r0, r7
 800bca6:	f7fe ff69 	bl	800ab7c <_free_r>
 800bcaa:	e7e9      	b.n	800bc80 <_realloc_r+0x1c>
 800bcac:	4635      	mov	r5, r6
 800bcae:	e7e7      	b.n	800bc80 <_realloc_r+0x1c>

0800bcb0 <__sfputc_r>:
 800bcb0:	6893      	ldr	r3, [r2, #8]
 800bcb2:	3b01      	subs	r3, #1
 800bcb4:	2b00      	cmp	r3, #0
 800bcb6:	b410      	push	{r4}
 800bcb8:	6093      	str	r3, [r2, #8]
 800bcba:	da08      	bge.n	800bcce <__sfputc_r+0x1e>
 800bcbc:	6994      	ldr	r4, [r2, #24]
 800bcbe:	42a3      	cmp	r3, r4
 800bcc0:	db01      	blt.n	800bcc6 <__sfputc_r+0x16>
 800bcc2:	290a      	cmp	r1, #10
 800bcc4:	d103      	bne.n	800bcce <__sfputc_r+0x1e>
 800bcc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcca:	f7fd bbeb 	b.w	80094a4 <__swbuf_r>
 800bcce:	6813      	ldr	r3, [r2, #0]
 800bcd0:	1c58      	adds	r0, r3, #1
 800bcd2:	6010      	str	r0, [r2, #0]
 800bcd4:	7019      	strb	r1, [r3, #0]
 800bcd6:	4608      	mov	r0, r1
 800bcd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bcdc:	4770      	bx	lr

0800bcde <__sfputs_r>:
 800bcde:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bce0:	4606      	mov	r6, r0
 800bce2:	460f      	mov	r7, r1
 800bce4:	4614      	mov	r4, r2
 800bce6:	18d5      	adds	r5, r2, r3
 800bce8:	42ac      	cmp	r4, r5
 800bcea:	d101      	bne.n	800bcf0 <__sfputs_r+0x12>
 800bcec:	2000      	movs	r0, #0
 800bcee:	e007      	b.n	800bd00 <__sfputs_r+0x22>
 800bcf0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bcf4:	463a      	mov	r2, r7
 800bcf6:	4630      	mov	r0, r6
 800bcf8:	f7ff ffda 	bl	800bcb0 <__sfputc_r>
 800bcfc:	1c43      	adds	r3, r0, #1
 800bcfe:	d1f3      	bne.n	800bce8 <__sfputs_r+0xa>
 800bd00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd04 <_vfiprintf_r>:
 800bd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd08:	460d      	mov	r5, r1
 800bd0a:	b09d      	sub	sp, #116	; 0x74
 800bd0c:	4614      	mov	r4, r2
 800bd0e:	4698      	mov	r8, r3
 800bd10:	4606      	mov	r6, r0
 800bd12:	b118      	cbz	r0, 800bd1c <_vfiprintf_r+0x18>
 800bd14:	6983      	ldr	r3, [r0, #24]
 800bd16:	b90b      	cbnz	r3, 800bd1c <_vfiprintf_r+0x18>
 800bd18:	f7fd fdc0 	bl	800989c <__sinit>
 800bd1c:	4b89      	ldr	r3, [pc, #548]	; (800bf44 <_vfiprintf_r+0x240>)
 800bd1e:	429d      	cmp	r5, r3
 800bd20:	d11b      	bne.n	800bd5a <_vfiprintf_r+0x56>
 800bd22:	6875      	ldr	r5, [r6, #4]
 800bd24:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd26:	07d9      	lsls	r1, r3, #31
 800bd28:	d405      	bmi.n	800bd36 <_vfiprintf_r+0x32>
 800bd2a:	89ab      	ldrh	r3, [r5, #12]
 800bd2c:	059a      	lsls	r2, r3, #22
 800bd2e:	d402      	bmi.n	800bd36 <_vfiprintf_r+0x32>
 800bd30:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd32:	f7fe f9c0 	bl	800a0b6 <__retarget_lock_acquire_recursive>
 800bd36:	89ab      	ldrh	r3, [r5, #12]
 800bd38:	071b      	lsls	r3, r3, #28
 800bd3a:	d501      	bpl.n	800bd40 <_vfiprintf_r+0x3c>
 800bd3c:	692b      	ldr	r3, [r5, #16]
 800bd3e:	b9eb      	cbnz	r3, 800bd7c <_vfiprintf_r+0x78>
 800bd40:	4629      	mov	r1, r5
 800bd42:	4630      	mov	r0, r6
 800bd44:	f7fd fc12 	bl	800956c <__swsetup_r>
 800bd48:	b1c0      	cbz	r0, 800bd7c <_vfiprintf_r+0x78>
 800bd4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd4c:	07dc      	lsls	r4, r3, #31
 800bd4e:	d50e      	bpl.n	800bd6e <_vfiprintf_r+0x6a>
 800bd50:	f04f 30ff 	mov.w	r0, #4294967295
 800bd54:	b01d      	add	sp, #116	; 0x74
 800bd56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd5a:	4b7b      	ldr	r3, [pc, #492]	; (800bf48 <_vfiprintf_r+0x244>)
 800bd5c:	429d      	cmp	r5, r3
 800bd5e:	d101      	bne.n	800bd64 <_vfiprintf_r+0x60>
 800bd60:	68b5      	ldr	r5, [r6, #8]
 800bd62:	e7df      	b.n	800bd24 <_vfiprintf_r+0x20>
 800bd64:	4b79      	ldr	r3, [pc, #484]	; (800bf4c <_vfiprintf_r+0x248>)
 800bd66:	429d      	cmp	r5, r3
 800bd68:	bf08      	it	eq
 800bd6a:	68f5      	ldreq	r5, [r6, #12]
 800bd6c:	e7da      	b.n	800bd24 <_vfiprintf_r+0x20>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	0598      	lsls	r0, r3, #22
 800bd72:	d4ed      	bmi.n	800bd50 <_vfiprintf_r+0x4c>
 800bd74:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd76:	f7fe f99f 	bl	800a0b8 <__retarget_lock_release_recursive>
 800bd7a:	e7e9      	b.n	800bd50 <_vfiprintf_r+0x4c>
 800bd7c:	2300      	movs	r3, #0
 800bd7e:	9309      	str	r3, [sp, #36]	; 0x24
 800bd80:	2320      	movs	r3, #32
 800bd82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd86:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd8a:	2330      	movs	r3, #48	; 0x30
 800bd8c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf50 <_vfiprintf_r+0x24c>
 800bd90:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd94:	f04f 0901 	mov.w	r9, #1
 800bd98:	4623      	mov	r3, r4
 800bd9a:	469a      	mov	sl, r3
 800bd9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bda0:	b10a      	cbz	r2, 800bda6 <_vfiprintf_r+0xa2>
 800bda2:	2a25      	cmp	r2, #37	; 0x25
 800bda4:	d1f9      	bne.n	800bd9a <_vfiprintf_r+0x96>
 800bda6:	ebba 0b04 	subs.w	fp, sl, r4
 800bdaa:	d00b      	beq.n	800bdc4 <_vfiprintf_r+0xc0>
 800bdac:	465b      	mov	r3, fp
 800bdae:	4622      	mov	r2, r4
 800bdb0:	4629      	mov	r1, r5
 800bdb2:	4630      	mov	r0, r6
 800bdb4:	f7ff ff93 	bl	800bcde <__sfputs_r>
 800bdb8:	3001      	adds	r0, #1
 800bdba:	f000 80aa 	beq.w	800bf12 <_vfiprintf_r+0x20e>
 800bdbe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdc0:	445a      	add	r2, fp
 800bdc2:	9209      	str	r2, [sp, #36]	; 0x24
 800bdc4:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc8:	2b00      	cmp	r3, #0
 800bdca:	f000 80a2 	beq.w	800bf12 <_vfiprintf_r+0x20e>
 800bdce:	2300      	movs	r3, #0
 800bdd0:	f04f 32ff 	mov.w	r2, #4294967295
 800bdd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bdd8:	f10a 0a01 	add.w	sl, sl, #1
 800bddc:	9304      	str	r3, [sp, #16]
 800bdde:	9307      	str	r3, [sp, #28]
 800bde0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bde4:	931a      	str	r3, [sp, #104]	; 0x68
 800bde6:	4654      	mov	r4, sl
 800bde8:	2205      	movs	r2, #5
 800bdea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bdee:	4858      	ldr	r0, [pc, #352]	; (800bf50 <_vfiprintf_r+0x24c>)
 800bdf0:	f7f4 f9f6 	bl	80001e0 <memchr>
 800bdf4:	9a04      	ldr	r2, [sp, #16]
 800bdf6:	b9d8      	cbnz	r0, 800be30 <_vfiprintf_r+0x12c>
 800bdf8:	06d1      	lsls	r1, r2, #27
 800bdfa:	bf44      	itt	mi
 800bdfc:	2320      	movmi	r3, #32
 800bdfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be02:	0713      	lsls	r3, r2, #28
 800be04:	bf44      	itt	mi
 800be06:	232b      	movmi	r3, #43	; 0x2b
 800be08:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be0c:	f89a 3000 	ldrb.w	r3, [sl]
 800be10:	2b2a      	cmp	r3, #42	; 0x2a
 800be12:	d015      	beq.n	800be40 <_vfiprintf_r+0x13c>
 800be14:	9a07      	ldr	r2, [sp, #28]
 800be16:	4654      	mov	r4, sl
 800be18:	2000      	movs	r0, #0
 800be1a:	f04f 0c0a 	mov.w	ip, #10
 800be1e:	4621      	mov	r1, r4
 800be20:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be24:	3b30      	subs	r3, #48	; 0x30
 800be26:	2b09      	cmp	r3, #9
 800be28:	d94e      	bls.n	800bec8 <_vfiprintf_r+0x1c4>
 800be2a:	b1b0      	cbz	r0, 800be5a <_vfiprintf_r+0x156>
 800be2c:	9207      	str	r2, [sp, #28]
 800be2e:	e014      	b.n	800be5a <_vfiprintf_r+0x156>
 800be30:	eba0 0308 	sub.w	r3, r0, r8
 800be34:	fa09 f303 	lsl.w	r3, r9, r3
 800be38:	4313      	orrs	r3, r2
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	46a2      	mov	sl, r4
 800be3e:	e7d2      	b.n	800bde6 <_vfiprintf_r+0xe2>
 800be40:	9b03      	ldr	r3, [sp, #12]
 800be42:	1d19      	adds	r1, r3, #4
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	9103      	str	r1, [sp, #12]
 800be48:	2b00      	cmp	r3, #0
 800be4a:	bfbb      	ittet	lt
 800be4c:	425b      	neglt	r3, r3
 800be4e:	f042 0202 	orrlt.w	r2, r2, #2
 800be52:	9307      	strge	r3, [sp, #28]
 800be54:	9307      	strlt	r3, [sp, #28]
 800be56:	bfb8      	it	lt
 800be58:	9204      	strlt	r2, [sp, #16]
 800be5a:	7823      	ldrb	r3, [r4, #0]
 800be5c:	2b2e      	cmp	r3, #46	; 0x2e
 800be5e:	d10c      	bne.n	800be7a <_vfiprintf_r+0x176>
 800be60:	7863      	ldrb	r3, [r4, #1]
 800be62:	2b2a      	cmp	r3, #42	; 0x2a
 800be64:	d135      	bne.n	800bed2 <_vfiprintf_r+0x1ce>
 800be66:	9b03      	ldr	r3, [sp, #12]
 800be68:	1d1a      	adds	r2, r3, #4
 800be6a:	681b      	ldr	r3, [r3, #0]
 800be6c:	9203      	str	r2, [sp, #12]
 800be6e:	2b00      	cmp	r3, #0
 800be70:	bfb8      	it	lt
 800be72:	f04f 33ff 	movlt.w	r3, #4294967295
 800be76:	3402      	adds	r4, #2
 800be78:	9305      	str	r3, [sp, #20]
 800be7a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf60 <_vfiprintf_r+0x25c>
 800be7e:	7821      	ldrb	r1, [r4, #0]
 800be80:	2203      	movs	r2, #3
 800be82:	4650      	mov	r0, sl
 800be84:	f7f4 f9ac 	bl	80001e0 <memchr>
 800be88:	b140      	cbz	r0, 800be9c <_vfiprintf_r+0x198>
 800be8a:	2340      	movs	r3, #64	; 0x40
 800be8c:	eba0 000a 	sub.w	r0, r0, sl
 800be90:	fa03 f000 	lsl.w	r0, r3, r0
 800be94:	9b04      	ldr	r3, [sp, #16]
 800be96:	4303      	orrs	r3, r0
 800be98:	3401      	adds	r4, #1
 800be9a:	9304      	str	r3, [sp, #16]
 800be9c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bea0:	482c      	ldr	r0, [pc, #176]	; (800bf54 <_vfiprintf_r+0x250>)
 800bea2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bea6:	2206      	movs	r2, #6
 800bea8:	f7f4 f99a 	bl	80001e0 <memchr>
 800beac:	2800      	cmp	r0, #0
 800beae:	d03f      	beq.n	800bf30 <_vfiprintf_r+0x22c>
 800beb0:	4b29      	ldr	r3, [pc, #164]	; (800bf58 <_vfiprintf_r+0x254>)
 800beb2:	bb1b      	cbnz	r3, 800befc <_vfiprintf_r+0x1f8>
 800beb4:	9b03      	ldr	r3, [sp, #12]
 800beb6:	3307      	adds	r3, #7
 800beb8:	f023 0307 	bic.w	r3, r3, #7
 800bebc:	3308      	adds	r3, #8
 800bebe:	9303      	str	r3, [sp, #12]
 800bec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec2:	443b      	add	r3, r7
 800bec4:	9309      	str	r3, [sp, #36]	; 0x24
 800bec6:	e767      	b.n	800bd98 <_vfiprintf_r+0x94>
 800bec8:	fb0c 3202 	mla	r2, ip, r2, r3
 800becc:	460c      	mov	r4, r1
 800bece:	2001      	movs	r0, #1
 800bed0:	e7a5      	b.n	800be1e <_vfiprintf_r+0x11a>
 800bed2:	2300      	movs	r3, #0
 800bed4:	3401      	adds	r4, #1
 800bed6:	9305      	str	r3, [sp, #20]
 800bed8:	4619      	mov	r1, r3
 800beda:	f04f 0c0a 	mov.w	ip, #10
 800bede:	4620      	mov	r0, r4
 800bee0:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bee4:	3a30      	subs	r2, #48	; 0x30
 800bee6:	2a09      	cmp	r2, #9
 800bee8:	d903      	bls.n	800bef2 <_vfiprintf_r+0x1ee>
 800beea:	2b00      	cmp	r3, #0
 800beec:	d0c5      	beq.n	800be7a <_vfiprintf_r+0x176>
 800beee:	9105      	str	r1, [sp, #20]
 800bef0:	e7c3      	b.n	800be7a <_vfiprintf_r+0x176>
 800bef2:	fb0c 2101 	mla	r1, ip, r1, r2
 800bef6:	4604      	mov	r4, r0
 800bef8:	2301      	movs	r3, #1
 800befa:	e7f0      	b.n	800bede <_vfiprintf_r+0x1da>
 800befc:	ab03      	add	r3, sp, #12
 800befe:	9300      	str	r3, [sp, #0]
 800bf00:	462a      	mov	r2, r5
 800bf02:	4b16      	ldr	r3, [pc, #88]	; (800bf5c <_vfiprintf_r+0x258>)
 800bf04:	a904      	add	r1, sp, #16
 800bf06:	4630      	mov	r0, r6
 800bf08:	f3af 8000 	nop.w
 800bf0c:	4607      	mov	r7, r0
 800bf0e:	1c78      	adds	r0, r7, #1
 800bf10:	d1d6      	bne.n	800bec0 <_vfiprintf_r+0x1bc>
 800bf12:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf14:	07d9      	lsls	r1, r3, #31
 800bf16:	d405      	bmi.n	800bf24 <_vfiprintf_r+0x220>
 800bf18:	89ab      	ldrh	r3, [r5, #12]
 800bf1a:	059a      	lsls	r2, r3, #22
 800bf1c:	d402      	bmi.n	800bf24 <_vfiprintf_r+0x220>
 800bf1e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf20:	f7fe f8ca 	bl	800a0b8 <__retarget_lock_release_recursive>
 800bf24:	89ab      	ldrh	r3, [r5, #12]
 800bf26:	065b      	lsls	r3, r3, #25
 800bf28:	f53f af12 	bmi.w	800bd50 <_vfiprintf_r+0x4c>
 800bf2c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf2e:	e711      	b.n	800bd54 <_vfiprintf_r+0x50>
 800bf30:	ab03      	add	r3, sp, #12
 800bf32:	9300      	str	r3, [sp, #0]
 800bf34:	462a      	mov	r2, r5
 800bf36:	4b09      	ldr	r3, [pc, #36]	; (800bf5c <_vfiprintf_r+0x258>)
 800bf38:	a904      	add	r1, sp, #16
 800bf3a:	4630      	mov	r0, r6
 800bf3c:	f7ff fa64 	bl	800b408 <_printf_i>
 800bf40:	e7e4      	b.n	800bf0c <_vfiprintf_r+0x208>
 800bf42:	bf00      	nop
 800bf44:	0800cc64 	.word	0x0800cc64
 800bf48:	0800cc84 	.word	0x0800cc84
 800bf4c:	0800cc44 	.word	0x0800cc44
 800bf50:	0800ceac 	.word	0x0800ceac
 800bf54:	0800ceb6 	.word	0x0800ceb6
 800bf58:	00000000 	.word	0x00000000
 800bf5c:	0800bcdf 	.word	0x0800bcdf
 800bf60:	0800ceb2 	.word	0x0800ceb2

0800bf64 <abort>:
 800bf64:	b508      	push	{r3, lr}
 800bf66:	2006      	movs	r0, #6
 800bf68:	f000 f834 	bl	800bfd4 <raise>
 800bf6c:	2001      	movs	r0, #1
 800bf6e:	f7f7 fe45 	bl	8003bfc <_exit>

0800bf72 <_malloc_usable_size_r>:
 800bf72:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bf76:	1f18      	subs	r0, r3, #4
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	bfbc      	itt	lt
 800bf7c:	580b      	ldrlt	r3, [r1, r0]
 800bf7e:	18c0      	addlt	r0, r0, r3
 800bf80:	4770      	bx	lr

0800bf82 <_raise_r>:
 800bf82:	291f      	cmp	r1, #31
 800bf84:	b538      	push	{r3, r4, r5, lr}
 800bf86:	4604      	mov	r4, r0
 800bf88:	460d      	mov	r5, r1
 800bf8a:	d904      	bls.n	800bf96 <_raise_r+0x14>
 800bf8c:	2316      	movs	r3, #22
 800bf8e:	6003      	str	r3, [r0, #0]
 800bf90:	f04f 30ff 	mov.w	r0, #4294967295
 800bf94:	bd38      	pop	{r3, r4, r5, pc}
 800bf96:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bf98:	b112      	cbz	r2, 800bfa0 <_raise_r+0x1e>
 800bf9a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bf9e:	b94b      	cbnz	r3, 800bfb4 <_raise_r+0x32>
 800bfa0:	4620      	mov	r0, r4
 800bfa2:	f000 f831 	bl	800c008 <_getpid_r>
 800bfa6:	462a      	mov	r2, r5
 800bfa8:	4601      	mov	r1, r0
 800bfaa:	4620      	mov	r0, r4
 800bfac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfb0:	f000 b818 	b.w	800bfe4 <_kill_r>
 800bfb4:	2b01      	cmp	r3, #1
 800bfb6:	d00a      	beq.n	800bfce <_raise_r+0x4c>
 800bfb8:	1c59      	adds	r1, r3, #1
 800bfba:	d103      	bne.n	800bfc4 <_raise_r+0x42>
 800bfbc:	2316      	movs	r3, #22
 800bfbe:	6003      	str	r3, [r0, #0]
 800bfc0:	2001      	movs	r0, #1
 800bfc2:	e7e7      	b.n	800bf94 <_raise_r+0x12>
 800bfc4:	2400      	movs	r4, #0
 800bfc6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800bfca:	4628      	mov	r0, r5
 800bfcc:	4798      	blx	r3
 800bfce:	2000      	movs	r0, #0
 800bfd0:	e7e0      	b.n	800bf94 <_raise_r+0x12>
	...

0800bfd4 <raise>:
 800bfd4:	4b02      	ldr	r3, [pc, #8]	; (800bfe0 <raise+0xc>)
 800bfd6:	4601      	mov	r1, r0
 800bfd8:	6818      	ldr	r0, [r3, #0]
 800bfda:	f7ff bfd2 	b.w	800bf82 <_raise_r>
 800bfde:	bf00      	nop
 800bfe0:	200001f8 	.word	0x200001f8

0800bfe4 <_kill_r>:
 800bfe4:	b538      	push	{r3, r4, r5, lr}
 800bfe6:	4d07      	ldr	r5, [pc, #28]	; (800c004 <_kill_r+0x20>)
 800bfe8:	2300      	movs	r3, #0
 800bfea:	4604      	mov	r4, r0
 800bfec:	4608      	mov	r0, r1
 800bfee:	4611      	mov	r1, r2
 800bff0:	602b      	str	r3, [r5, #0]
 800bff2:	f7f7 fdf3 	bl	8003bdc <_kill>
 800bff6:	1c43      	adds	r3, r0, #1
 800bff8:	d102      	bne.n	800c000 <_kill_r+0x1c>
 800bffa:	682b      	ldr	r3, [r5, #0]
 800bffc:	b103      	cbz	r3, 800c000 <_kill_r+0x1c>
 800bffe:	6023      	str	r3, [r4, #0]
 800c000:	bd38      	pop	{r3, r4, r5, pc}
 800c002:	bf00      	nop
 800c004:	20000f68 	.word	0x20000f68

0800c008 <_getpid_r>:
 800c008:	f7f7 bde0 	b.w	8003bcc <_getpid>

0800c00c <_init>:
 800c00c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c00e:	bf00      	nop
 800c010:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c012:	bc08      	pop	{r3}
 800c014:	469e      	mov	lr, r3
 800c016:	4770      	bx	lr

0800c018 <_fini>:
 800c018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01a:	bf00      	nop
 800c01c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c01e:	bc08      	pop	{r3}
 800c020:	469e      	mov	lr, r3
 800c022:	4770      	bx	lr
