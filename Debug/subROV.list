
subROV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000078c4  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008554  08008554  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08008554  08008554  00018554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800855c  0800855c  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800855c  0800855c  0001855c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008560  08008560  00018560  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08008564  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a94  20000244  080087a8  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000cd8  080087a8  00020cd8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   000158a1  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003060  00000000  00000000  00035b15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00038b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001088  00000000  00000000  00039d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002296f  00000000  00000000  0003adc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001464e  00000000  00000000  0005d72f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d00cf  00000000  00000000  00071d7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141e4c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  00141ea0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000244 	.word	0x20000244
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007a34 	.word	0x08007a34

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000248 	.word	0x20000248
 80001c4:	08007a34 	.word	0x08007a34

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <PID_init>:
};
//Roll,Pitch,Yaw,z x y
float target_ver[6];
int pidinit = 0;
void PID_init()
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    target_ver[0] = 0;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <PID_init+0x2c>)
 80004c6:	f04f 0200 	mov.w	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
    target_ver[1] = 0;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <PID_init+0x2c>)
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
    target_ver[2] = yaw;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <PID_init+0x30>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <PID_init+0x2c>)
 80004da:	6093      	str	r3, [r2, #8]
    pidinit = 1;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <PID_init+0x34>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	200002cc 	.word	0x200002cc
 80004f0:	20000344 	.word	0x20000344
 80004f4:	20000260 	.word	0x20000260

080004f8 <PID_CTRL>:

void PID_CTRL() //综合控制 encodeL左侧编码器 encodeR右侧编码器
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	; 0x24
 80004fc:	af00      	add	r7, sp, #0
    //out += Kpr * (err - err1) + Tir * err+Tdr*(err-2*err1+err2); //
    //增量式PID方程 输出=输出+P*(本次误差-上次误差)+I*本次误差
    float err[6];

    if (target_ver[2] > 180)
 80004fe:	4b96      	ldr	r3, [pc, #600]	; (8000758 <PID_CTRL+0x260>)
 8000500:	edd3 7a02 	vldr	s15, [r3, #8]
 8000504:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800075c <PID_CTRL+0x264>
 8000508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800050c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000510:	dd09      	ble.n	8000526 <PID_CTRL+0x2e>
        target_ver[2] -= 360;
 8000512:	4b91      	ldr	r3, [pc, #580]	; (8000758 <PID_CTRL+0x260>)
 8000514:	edd3 7a02 	vldr	s15, [r3, #8]
 8000518:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8000760 <PID_CTRL+0x268>
 800051c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000520:	4b8d      	ldr	r3, [pc, #564]	; (8000758 <PID_CTRL+0x260>)
 8000522:	edc3 7a02 	vstr	s15, [r3, #8]
    if (target_ver[2] < -180)
 8000526:	4b8c      	ldr	r3, [pc, #560]	; (8000758 <PID_CTRL+0x260>)
 8000528:	edd3 7a02 	vldr	s15, [r3, #8]
 800052c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8000764 <PID_CTRL+0x26c>
 8000530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000538:	d509      	bpl.n	800054e <PID_CTRL+0x56>
        target_ver[2] += 360;
 800053a:	4b87      	ldr	r3, [pc, #540]	; (8000758 <PID_CTRL+0x260>)
 800053c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000540:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000760 <PID_CTRL+0x268>
 8000544:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000548:	4b83      	ldr	r3, [pc, #524]	; (8000758 <PID_CTRL+0x260>)
 800054a:	edc3 7a02 	vstr	s15, [r3, #8]

    err[0] = target_ver[0] - roll;  //求误差
 800054e:	4b82      	ldr	r3, [pc, #520]	; (8000758 <PID_CTRL+0x260>)
 8000550:	ed93 7a00 	vldr	s14, [r3]
 8000554:	4b84      	ldr	r3, [pc, #528]	; (8000768 <PID_CTRL+0x270>)
 8000556:	edd3 7a00 	vldr	s15, [r3]
 800055a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055e:	edc7 7a01 	vstr	s15, [r7, #4]
    err[1] = target_ver[1] - pitch; //求误差
 8000562:	4b7d      	ldr	r3, [pc, #500]	; (8000758 <PID_CTRL+0x260>)
 8000564:	ed93 7a01 	vldr	s14, [r3, #4]
 8000568:	4b80      	ldr	r3, [pc, #512]	; (800076c <PID_CTRL+0x274>)
 800056a:	edd3 7a00 	vldr	s15, [r3]
 800056e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000572:	edc7 7a02 	vstr	s15, [r7, #8]
    err[2] = target_ver[2] - yaw;   //求误差
 8000576:	4b78      	ldr	r3, [pc, #480]	; (8000758 <PID_CTRL+0x260>)
 8000578:	ed93 7a02 	vldr	s14, [r3, #8]
 800057c:	4b7c      	ldr	r3, [pc, #496]	; (8000770 <PID_CTRL+0x278>)
 800057e:	edd3 7a00 	vldr	s15, [r3]
 8000582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000586:	edc7 7a03 	vstr	s15, [r7, #12]

    if (err[2] > 180)
 800058a:	edd7 7a03 	vldr	s15, [r7, #12]
 800058e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800075c <PID_CTRL+0x264>
 8000592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059a:	dd07      	ble.n	80005ac <PID_CTRL+0xb4>
        err[2] -= 360;
 800059c:	edd7 7a03 	vldr	s15, [r7, #12]
 80005a0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000760 <PID_CTRL+0x268>
 80005a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005a8:	edc7 7a03 	vstr	s15, [r7, #12]
    if (err[2] < -180)
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000764 <PID_CTRL+0x26c>
 80005b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005bc:	d507      	bpl.n	80005ce <PID_CTRL+0xd6>
        err[2] += 360;
 80005be:	edd7 7a03 	vldr	s15, [r7, #12]
 80005c2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000760 <PID_CTRL+0x268>
 80005c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005ca:	edc7 7a03 	vstr	s15, [r7, #12]

    err[3] = target_ver[3]; //求误差
 80005ce:	4b62      	ldr	r3, [pc, #392]	; (8000758 <PID_CTRL+0x260>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	613b      	str	r3, [r7, #16]
    err[4] = target_ver[4]; //求误差
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <PID_CTRL+0x260>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	617b      	str	r3, [r7, #20]
    err[5] = target_ver[5]; //求误差
 80005da:	4b5f      	ldr	r3, [pc, #380]	; (8000758 <PID_CTRL+0x260>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
 80005e4:	e0ad      	b.n	8000742 <PID_CTRL+0x24a>
    {
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4]) + pid_ver[i][1] * err[i] + pid_ver[i][2] * (err[i] - 2 * pid_ver[i][4] + pid_ver[i][5]);
 80005e6:	4963      	ldr	r1, [pc, #396]	; (8000774 <PID_CTRL+0x27c>)
 80005e8:	69fa      	ldr	r2, [r7, #28]
 80005ea:	4613      	mov	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	330c      	adds	r3, #12
 80005f6:	ed93 7a00 	vldr	s14, [r3]
 80005fa:	495e      	ldr	r1, [pc, #376]	; (8000774 <PID_CTRL+0x27c>)
 80005fc:	69fa      	ldr	r2, [r7, #28]
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	edd3 6a00 	vldr	s13, [r3]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	f107 0220 	add.w	r2, r7, #32
 8000614:	4413      	add	r3, r2
 8000616:	3b1c      	subs	r3, #28
 8000618:	ed93 6a00 	vldr	s12, [r3]
 800061c:	4955      	ldr	r1, [pc, #340]	; (8000774 <PID_CTRL+0x27c>)
 800061e:	69fa      	ldr	r2, [r7, #28]
 8000620:	4613      	mov	r3, r2
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	3310      	adds	r3, #16
 800062c:	edd3 7a00 	vldr	s15, [r3]
 8000630:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000634:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000638:	494e      	ldr	r1, [pc, #312]	; (8000774 <PID_CTRL+0x27c>)
 800063a:	69fa      	ldr	r2, [r7, #28]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	3304      	adds	r3, #4
 8000648:	ed93 6a00 	vldr	s12, [r3]
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	f107 0220 	add.w	r2, r7, #32
 8000654:	4413      	add	r3, r2
 8000656:	3b1c      	subs	r3, #28
 8000658:	edd3 7a00 	vldr	s15, [r3]
 800065c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000660:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000664:	4943      	ldr	r1, [pc, #268]	; (8000774 <PID_CTRL+0x27c>)
 8000666:	69fa      	ldr	r2, [r7, #28]
 8000668:	4613      	mov	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	3308      	adds	r3, #8
 8000674:	ed93 6a00 	vldr	s12, [r3]
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	f107 0220 	add.w	r2, r7, #32
 8000680:	4413      	add	r3, r2
 8000682:	3b1c      	subs	r3, #28
 8000684:	edd3 5a00 	vldr	s11, [r3]
 8000688:	493a      	ldr	r1, [pc, #232]	; (8000774 <PID_CTRL+0x27c>)
 800068a:	69fa      	ldr	r2, [r7, #28]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	440b      	add	r3, r1
 8000696:	3310      	adds	r3, #16
 8000698:	edd3 7a00 	vldr	s15, [r3]
 800069c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006a0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80006a4:	4933      	ldr	r1, [pc, #204]	; (8000774 <PID_CTRL+0x27c>)
 80006a6:	69fa      	ldr	r2, [r7, #28]
 80006a8:	4613      	mov	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	3314      	adds	r3, #20
 80006b4:	edd3 7a00 	vldr	s15, [r3]
 80006b8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80006bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80006c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80006c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c8:	492a      	ldr	r1, [pc, #168]	; (8000774 <PID_CTRL+0x27c>)
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	440b      	add	r3, r1
 80006d6:	330c      	adds	r3, #12
 80006d8:	edc3 7a00 	vstr	s15, [r3]
        dof6[i] = pid_ver[i][3];       //输出到6自由度
 80006dc:	4925      	ldr	r1, [pc, #148]	; (8000774 <PID_CTRL+0x27c>)
 80006de:	69fa      	ldr	r2, [r7, #28]
 80006e0:	4613      	mov	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	440b      	add	r3, r1
 80006ea:	330c      	adds	r3, #12
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4922      	ldr	r1, [pc, #136]	; (8000778 <PID_CTRL+0x280>)
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	601a      	str	r2, [r3, #0]
        pid_ver[i][5] = pid_ver[i][4]; //更新上上次误差
 80006f8:	491e      	ldr	r1, [pc, #120]	; (8000774 <PID_CTRL+0x27c>)
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	4613      	mov	r3, r2
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	3310      	adds	r3, #16
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <PID_CTRL+0x27c>)
 800070c:	69fa      	ldr	r2, [r7, #28]
 800070e:	4613      	mov	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	1a9b      	subs	r3, r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4403      	add	r3, r0
 8000718:	3314      	adds	r3, #20
 800071a:	6019      	str	r1, [r3, #0]
        pid_ver[i][4] = err[i];        //更新上次误差
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	f107 0220 	add.w	r2, r7, #32
 8000724:	4413      	add	r3, r2
 8000726:	3b1c      	subs	r3, #28
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <PID_CTRL+0x27c>)
 800072c:	69fa      	ldr	r2, [r7, #28]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4403      	add	r3, r0
 8000738:	3310      	adds	r3, #16
 800073a:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < 6; i++)
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	3301      	adds	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	2b05      	cmp	r3, #5
 8000746:	f77f af4e 	ble.w	80005e6 <PID_CTRL+0xee>
    }
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3724      	adds	r7, #36	; 0x24
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	200002cc 	.word	0x200002cc
 800075c:	43340000 	.word	0x43340000
 8000760:	43b40000 	.word	0x43b40000
 8000764:	c3340000 	.word	0xc3340000
 8000768:	2000034c 	.word	0x2000034c
 800076c:	20000348 	.word	0x20000348
 8000770:	20000344 	.word	0x20000344
 8000774:	20000000 	.word	0x20000000
 8000778:	20000264 	.word	0x20000264

0800077c <VRUinit>:
float pitch, roll, yaw,*dat;
int tim;
UART_HandleTypeDef *VRUhuart;

void VRUinit(UART_HandleTypeDef *huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	VRUhuart = huart;
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <VRUinit+0x30>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68da      	ldr	r2, [r3, #12]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 0210 	orr.w	r2, r2, #16
 8000798:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, ch110, 82);
 800079a:	2252      	movs	r2, #82	; 0x52
 800079c:	4904      	ldr	r1, [pc, #16]	; (80007b0 <VRUinit+0x34>)
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f005 fd7c 	bl	800629c <HAL_UART_Receive_DMA>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200002ec 	.word	0x200002ec
 80007b0:	200002f0 	.word	0x200002f0

080007b4 <VRUupdate>:
//从串口中断触发 每次执行 提取姿态数据
void VRUupdate()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	float * datflo;
	datflo=(float *) (ch110 + 18);
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <VRUupdate+0x5c>)
 80007bc:	603b      	str	r3, [r7, #0]
	/*
	roll = *(float *) (ch110 + 54);
	pitch = *(float *) (ch110 + 58);
	yaw = *(float *) (ch110 + 62);
	*/
	roll = datflo[9];
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <VRUupdate+0x60>)
 80007c4:	6013      	str	r3, [r2, #0]
	pitch = datflo[10];
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <VRUupdate+0x64>)
 80007cc:	6013      	str	r3, [r2, #0]
	yaw = datflo[11];
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <VRUupdate+0x68>)
 80007d4:	6013      	str	r3, [r2, #0]

	for(int i=0;i<16;i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e00c      	b.n	80007f6 <VRUupdate+0x42>
	{
		frame.fdata[i] = datflo[i];
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <VRUupdate+0x6c>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	ddef      	ble.n	80007dc <VRUupdate+0x28>
		//3角速度XYZ
		//6磁强度XYZ
		//9欧拉角Roll Pitch Yaw
		//12四元数WXYZ
	}
    if(pidinit == 0)
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <VRUupdate+0x70>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <VRUupdate+0x54>
        PID_init();
 8000804:	f7ff fe5c 	bl	80004c0 <PID_init>
    if(pidinit == 1)
    {
        PID_CTRL();
        setmotor();
    }*/
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000302 	.word	0x20000302
 8000814:	2000034c 	.word	0x2000034c
 8000818:	20000348 	.word	0x20000348
 800081c:	20000344 	.word	0x20000344
 8000820:	200000a8 	.word	0x200000a8
 8000824:	20000260 	.word	0x20000260

08000828 <VRUerror>:
void VRUerror()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    HAL_UART_AbortReceive(VRUhuart);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <VRUerror+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f005 fd63 	bl	80062fc <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(VRUhuart, ch110, 82);
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <VRUerror+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2252      	movs	r2, #82	; 0x52
 800083c:	4903      	ldr	r1, [pc, #12]	; (800084c <VRUerror+0x24>)
 800083e:	4618      	mov	r0, r3
 8000840:	f005 fd2c 	bl	800629c <HAL_UART_Receive_DMA>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200002ec 	.word	0x200002ec
 800084c:	200002f0 	.word	0x200002f0

08000850 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*) ptr, len, 300);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b29a      	uxth	r2, r3
 8000860:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <_write+0x28>)
 8000868:	f005 fc41 	bl	80060ee <HAL_UART_Transmit>
	return len;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000514 	.word	0x20000514

0800087c <HAL_UART_RxCpltCallback>:
void delay_ms(unsigned int ms) {
	HAL_Delay(ms);
	return;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_UART_RxCpltCallback+0x1c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d101      	bne.n	8000890 <HAL_UART_RxCpltCallback+0x14>
	{
		VRUupdate();
 800088c:	f7ff ff92 	bl	80007b4 <VRUupdate>
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	20000770 	.word	0x20000770

0800089c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_UART_ErrorCallback+0x1c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d101      	bne.n	80008b0 <HAL_UART_ErrorCallback+0x14>
	{
		VRUerror();
 80008ac:	f7ff ffbc 	bl	8000828 <VRUerror>
	}
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000770 	.word	0x20000770

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f002 fa3f 	bl	8002d44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f861 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f000 fda5 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ce:	f000 fd65 	bl	800139c <MX_DMA_Init>
  MX_ADC1_Init();
 80008d2:	f000 f8c5 	bl	8000a60 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008d6:	f000 f915 	bl	8000b04 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008da:	f000 f949 	bl	8000b70 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008de:	f000 f997 	bl	8000c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008e2:	f000 f9e1 	bl	8000ca8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008e6:	f000 fa77 	bl	8000dd8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80008ea:	f000 fb0d 	bl	8000f08 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008ee:	f000 fb6f 	bl	8000fd0 <MX_TIM8_Init>
  MX_UART4_Init();
 80008f2:	f000 fc81 	bl	80011f8 <MX_UART4_Init>
  MX_UART5_Init();
 80008f6:	f000 fca9 	bl	800124c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80008fa:	f000 fcd1 	bl	80012a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008fe:	f000 fcf9 	bl	80012f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000902:	f000 fd21 	bl	8001348 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8000906:	f000 fc27 	bl	8001158 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//delay function sppeeort
 800090a:	4817      	ldr	r0, [pc, #92]	; (8000968 <main+0xac>)
 800090c:	f004 fb0e 	bl	8004f2c <HAL_TIM_Base_Start>

  motorinit();
 8000910:	f000 feac 	bl	800166c <motorinit>

	HAL_TIM_Base_Start_IT(&htim1);
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <main+0xb0>)
 8000916:	f004 fb71 	bl	8004ffc <HAL_TIM_Base_Start_IT>

	VRUinit(&huart2);
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <main+0xb4>)
 800091c:	f7ff ff2e 	bl	800077c <VRUinit>
	OLED_Init();
 8000920:	f001 f9e0 	bl	8001ce4 <OLED_Init>
	//PID_init();
	remoteInit(&huart5);
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <main+0xb8>)
 8000926:	f001 fa89 	bl	8001e3c <remoteInit>
	remoteInit(&huart1);
 800092a:	4813      	ldr	r0, [pc, #76]	; (8000978 <main+0xbc>)
 800092c:	f001 fa86 	bl	8001e3c <remoteInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello\r\n");
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <main+0xc0>)
 8000932:	f006 fc27 	bl	8007184 <puts>
  OLED_ShowString(0,0,"runing...");
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <main+0xc4>)
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f001 f9a0 	bl	8001c80 <OLED_ShowString>

  while (1)
  {
	  OLED_ShowString(0,12,"run time:");
 8000940:	4a10      	ldr	r2, [pc, #64]	; (8000984 <main+0xc8>)
 8000942:	210c      	movs	r1, #12
 8000944:	2000      	movs	r0, #0
 8000946:	f001 f99b 	bl	8001c80 <OLED_ShowString>
	  OLED_ShowNumber(0, 24, HAL_GetTick()/1000, 3, 12);
 800094a:	f002 fa31 	bl	8002db0 <HAL_GetTick>
 800094e:	4603      	mov	r3, r0
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <main+0xcc>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	099a      	lsrs	r2, r3, #6
 8000958:	230c      	movs	r3, #12
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2303      	movs	r3, #3
 800095e:	2118      	movs	r1, #24
 8000960:	2000      	movs	r0, #0
 8000962:	f001 f91f 	bl	8001ba4 <OLED_ShowNumber>
	  OLED_ShowString(0,12,"run time:");
 8000966:	e7eb      	b.n	8000940 <main+0x84>
 8000968:	20000728 	.word	0x20000728
 800096c:	20000644 	.word	0x20000644
 8000970:	20000770 	.word	0x20000770
 8000974:	20000514 	.word	0x20000514
 8000978:	20000600 	.word	0x20000600
 800097c:	08007a4c 	.word	0x08007a4c
 8000980:	08007a54 	.word	0x08007a54
 8000984:	08007a60 	.word	0x08007a60
 8000988:	10624dd3 	.word	0x10624dd3

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f006 fb7c 	bl	8007098 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <SystemClock_Config+0xcc>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <SystemClock_Config+0xd0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009fc:	2308      	movs	r3, #8
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fb04 	bl	8004020 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a1e:	f000 fe1f 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2105      	movs	r1, #5
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fd65 	bl	8004510 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a4c:	f000 fe08 	bl	8001660 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_ADC1_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <MX_ADC1_Init+0xa0>)
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ac2:	f002 f9a5 	bl	8002e10 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000acc:	f000 fdc8 	bl	8001660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ae2:	f002 f9d9 	bl	8002e98 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aec:	f000 fdb8 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	20000558 	.word	0x20000558
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b50:	220a      	movs	r2, #10
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b56:	f003 ff09 	bl	800496c <HAL_SPI_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b60:	f000 fd7e 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	200006d0 	.word	0x200006d0
 8000b6c:	40013000 	.word	0x40013000

08000b70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <MX_TIM1_Init+0x9c>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b94:	22a7      	movs	r2, #167	; 0xa7
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bba:	f004 f967 	bl	8004e8c <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 fd4c 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bd6:	f004 fd5f 	bl	8005698 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000be0:	f000 fd3e 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bf2:	f005 f94d 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bfc:	f000 fd30 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000644 	.word	0x20000644
 8000c0c:	40010000 	.word	0x40010000

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c36:	2253      	movs	r2, #83	; 0x53
 8000c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c56:	f004 f919 	bl	8004e8c <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c60:	f000 fcfe 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c72:	f004 fd11 	bl	8005698 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f000 fcf0 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c8e:	f005 f8ff 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 fce2 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000728 	.word	0x20000728

08000ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd8:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <MX_TIM3_Init+0x12c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfe:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d00:	f004 f8c4 	bl	8004e8c <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d0a:	f000 fca9 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d1c:	f004 fcbc 	bl	8005698 <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d26:	f000 fc9b 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d2a:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d2c:	f004 f9d6 	bl	80050dc <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d36:	f000 fc93 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4619      	mov	r1, r3
 8000d48:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d4a:	f005 f8a1 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d54:	f000 fc84 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2360      	movs	r3, #96	; 0x60
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d70:	f004 fbd4 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d7a:	f000 fc71 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2204      	movs	r2, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d86:	f004 fbc9 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d90:	f000 fc66 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2208      	movs	r2, #8
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d9c:	f004 fbbe 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000da6:	f000 fc5b 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	220c      	movs	r2, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000db2:	f004 fbb3 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000dbc:	f000 fc50 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000dc2:	f001 fab7 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200004cc 	.word	0x200004cc
 8000dd4:	40000400 	.word	0x40000400

08000dd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	; (8000f04 <MX_TIM4_Init+0x12c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e10:	2253      	movs	r2, #83	; 0x53
 8000e12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e2e:	4834      	ldr	r0, [pc, #208]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e30:	f004 f82c 	bl	8004e8c <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e3a:	f000 fc11 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482d      	ldr	r0, [pc, #180]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e4c:	f004 fc24 	bl	8005698 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e56:	f000 fc03 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e5a:	4829      	ldr	r0, [pc, #164]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e5c:	f004 f93e 	bl	80050dc <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e66:	f000 fbfb 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	4619      	mov	r1, r3
 8000e78:	4821      	ldr	r0, [pc, #132]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e7a:	f005 f809 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e84:	f000 fbec 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ea0:	f004 fb3c 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000eaa:	f000 fbd9 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000eb6:	f004 fb31 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ec0:	f000 fbce 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ecc:	f004 fb26 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000ed6:	f000 fbc3 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	220c      	movs	r2, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ee2:	f004 fb1b 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000eec:	f000 fbb8 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ef2:	f001 fa1f 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	; 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200003f8 	.word	0x200003f8
 8000f04:	40000800 	.word	0x40000800

08000f08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <MX_TIM5_Init+0xc4>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f50:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f52:	f004 f8c3 	bl	80050dc <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 fb80 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f70:	f004 ff8e 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000f7a:	f000 fb71 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2360      	movs	r3, #96	; 0x60
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2208      	movs	r2, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f96:	f004 fac1 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 fb5e 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000fac:	f004 fab6 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000fb6:	f000 fb53 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000fbc:	f001 f9ba 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	20000484 	.word	0x20000484
 8000fcc:	40000c00 	.word	0x40000c00

08000fd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	; 0x58
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f006 f845 	bl	8007098 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800100e:	4b50      	ldr	r3, [pc, #320]	; (8001150 <MX_TIM8_Init+0x180>)
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <MX_TIM8_Init+0x184>)
 8001012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8001014:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <MX_TIM8_Init+0x180>)
 8001016:	22a7      	movs	r2, #167	; 0xa7
 8001018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <MX_TIM8_Init+0x180>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <MX_TIM8_Init+0x180>)
 8001022:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001026:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <MX_TIM8_Init+0x180>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <MX_TIM8_Init+0x180>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <MX_TIM8_Init+0x180>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800103a:	4845      	ldr	r0, [pc, #276]	; (8001150 <MX_TIM8_Init+0x180>)
 800103c:	f003 ff26 	bl	8004e8c <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001046:	f000 fb0b 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001054:	4619      	mov	r1, r3
 8001056:	483e      	ldr	r0, [pc, #248]	; (8001150 <MX_TIM8_Init+0x180>)
 8001058:	f004 fb1e 	bl	8005698 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001062:	f000 fafd 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001066:	483a      	ldr	r0, [pc, #232]	; (8001150 <MX_TIM8_Init+0x180>)
 8001068:	f004 f838 	bl	80050dc <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001072:	f000 faf5 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800107e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001082:	4619      	mov	r1, r3
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <MX_TIM8_Init+0x180>)
 8001086:	f004 ff03 	bl	8005e90 <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001090:	f000 fae6 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4825      	ldr	r0, [pc, #148]	; (8001150 <MX_TIM8_Init+0x180>)
 80010ba:	f004 fa2f 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80010c4:	f000 facc 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	2204      	movs	r2, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <MX_TIM8_Init+0x180>)
 80010d2:	f004 fa23 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80010dc:	f000 fac0 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	2208      	movs	r2, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <MX_TIM8_Init+0x180>)
 80010ea:	f004 fa17 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80010f4:	f000 fab4 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	220c      	movs	r2, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_TIM8_Init+0x180>)
 8001102:	f004 fa0b 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800110c:	f000 faa8 	bl	8001660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001128:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM8_Init+0x180>)
 8001134:	f004 ff28 	bl	8005f88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800113e:	f000 fa8f 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM8_Init+0x180>)
 8001144:	f001 f8f6 	bl	8002334 <HAL_TIM_MspPostInit>

}
 8001148:	bf00      	nop
 800114a:	3758      	adds	r7, #88	; 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200003b0 	.word	0x200003b0
 8001154:	40010400 	.word	0x40010400

08001158 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <MX_TIM12_Init+0x9c>)
 8001174:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_TIM12_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_TIM12_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001196:	4816      	ldr	r0, [pc, #88]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001198:	f003 ffa0 	bl	80050dc <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011a2:	f000 fa5d 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011be:	f004 f9ad 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011c8:	f000 fa4a 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2204      	movs	r2, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011d4:	f004 f9a2 	bl	800551c <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80011de:	f000 fa3f 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011e4:	f001 f8a6 	bl	8002334 <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000814 	.word	0x20000814
 80011f4:	40001800 	.word	0x40001800

080011f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_UART4_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_UART4_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_UART4_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_UART4_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_UART4_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_UART4_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_UART4_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_UART4_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_UART4_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_UART4_Init+0x4c>)
 8001230:	f004 ff10 	bl	8006054 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 fa11 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	2000068c 	.word	0x2000068c
 8001248:	40004c00 	.word	0x40004c00

0800124c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_UART5_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_UART5_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_UART5_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_UART5_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_UART5_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_UART5_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_UART5_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_UART5_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_UART5_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_UART5_Init+0x4c>)
 8001284:	f004 fee6 	bl	8006054 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f9e7 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000514 	.word	0x20000514
 800129c:	40005000 	.word	0x40005000

080012a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART1_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d8:	f004 febc 	bl	8006054 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 f9bd 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000600 	.word	0x20000600
 80012f0:	40011000 	.word	0x40011000

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_USART2_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800132c:	f004 fe92 	bl	8006054 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001336:	f000 f993 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000770 	.word	0x20000770
 8001344:	40004400 	.word	0x40004400

08001348 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_USART3_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001380:	f004 fe68 	bl	8006054 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 f969 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	20000440 	.word	0x20000440
 8001398:	40004800 	.word	0x40004800

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_DMA_Init+0x78>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <MX_DMA_Init+0x78>)
 80013ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_DMA_Init+0x78>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_DMA_Init+0x78>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_DMA_Init+0x78>)
 80013c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_DMA_Init+0x78>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	200b      	movs	r0, #11
 80013e0:	f002 f830 	bl	8003444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013e4:	200b      	movs	r0, #11
 80013e6:	f002 f849 	bl	800347c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2010      	movs	r0, #16
 80013f0:	f002 f828 	bl	8003444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013f4:	2010      	movs	r0, #16
 80013f6:	f002 f841 	bl	800347c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	203a      	movs	r0, #58	; 0x3a
 8001400:	f002 f820 	bl	8003444 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001404:	203a      	movs	r0, #58	; 0x3a
 8001406:	f002 f839 	bl	800347c <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a57      	ldr	r2, [pc, #348]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a50      	ldr	r2, [pc, #320]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <MX_GPIO_Init+0x17c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <MX_GPIO_Init+0x17c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a49      	ldr	r2, [pc, #292]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a42      	ldr	r2, [pc, #264]	; (8001594 <MX_GPIO_Init+0x17c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b40      	ldr	r3, [pc, #256]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a34      	ldr	r2, [pc, #208]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CSN_GPIO_Port, OLED_CSN_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014dc:	482e      	ldr	r0, [pc, #184]	; (8001598 <MX_GPIO_Init+0x180>)
 80014de:	f002 fd85 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	21c0      	movs	r1, #192	; 0xc0
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_GPIO_Init+0x184>)
 80014e8:	f002 fd80 	bl	8003fec <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014ec:	2360      	movs	r3, #96	; 0x60
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014fc:	2303      	movs	r3, #3
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4826      	ldr	r0, [pc, #152]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001508:	f002 fbd4 	bl	8003cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CSN_Pin */
  GPIO_InitStruct.Pin = OLED_CSN_Pin;
 800150c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CSN_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	481c      	ldr	r0, [pc, #112]	; (8001598 <MX_GPIO_Init+0x180>)
 8001526:	f002 fbc5 	bl	8003cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <MX_GPIO_Init+0x184>)
 8001542:	f002 fbb7 	bl	8003cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001558:	2303      	movs	r3, #3
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_GPIO_Init+0x184>)
 8001564:	f002 fba6 	bl	8003cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800157a:	2303      	movs	r3, #3
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_GPIO_Init+0x184>)
 8001586:	f002 fb95 	bl	8003cb4 <HAL_GPIO_Init>

}
 800158a:	bf00      	nop
 800158c:	3730      	adds	r7, #48	; 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a24      	ldr	r2, [pc, #144]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d102      	bne.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80015b6:	f001 fbe7 	bl	8002d88 <HAL_IncTick>
      if(pidinit==1)
    	  PID_CTRL();
      setmotor();
  }
  /* USER CODE END Callback 1 */
}
 80015ba:	e03e      	b.n	800163a <HAL_TIM_PeriodElapsedCallback+0x96>
  else if(htim->Instance == TIM1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d139      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x96>
	  HAL_UART_Transmit_IT(&huart5, (unsigned char *)&frame, sizeof(frame));
 80015c6:	226c      	movs	r2, #108	; 0x6c
 80015c8:	4920      	ldr	r1, [pc, #128]	; (800164c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015ca:	4821      	ldr	r0, [pc, #132]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015cc:	f004 fe21 	bl	8006212 <HAL_UART_Transmit_IT>
	  OLED_Refresh_Gram();
 80015d0:	f000 f980 	bl	80018d4 <OLED_Refresh_Gram>
      target_ver[0] = ch_float[0]*30;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015e4:	edc3 7a00 	vstr	s15, [r3]
      target_ver[1] = ch_float[1]*30;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ee:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015f8:	edc3 7a01 	vstr	s15, [r3, #4]
      target_ver[2] -= ch_float[2];
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001604:	edd3 7a02 	vldr	s15, [r3, #8]
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800160e:	edc3 7a02 	vstr	s15, [r3, #8]
      target_ver[3] = ch_float[3]; //求误�??
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001618:	60d3      	str	r3, [r2, #12]
      target_ver[4] = ch_float[4]; //求误�??
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001620:	6113      	str	r3, [r2, #16]
      target_ver[5] = ch_float[5]; //求误�??
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001628:	6153      	str	r3, [r2, #20]
      if(pidinit==1)
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x92>
    	  PID_CTRL();
 8001632:	f7fe ff61 	bl	80004f8 <PID_CTRL>
      setmotor();
 8001636:	f000 f841 	bl	80016bc <setmotor>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40001400 	.word	0x40001400
 8001648:	40010000 	.word	0x40010000
 800164c:	200000a8 	.word	0x200000a8
 8001650:	20000514 	.word	0x20000514
 8001654:	200002a0 	.word	0x200002a0
 8001658:	200002cc 	.word	0x200002cc
 800165c:	20000260 	.word	0x20000260

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
}
 8001666:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001668:	e7fe      	b.n	8001668 <Error_Handler+0x8>
	...

0800166c <motorinit>:
		{ 1.0f, 1.0f, 0, 0,1.0f, 0, 0, 0, 0, },
		{ -1.0f, 1.0f, 0, 0, 1.0f, 0, 0, 0, 0, }, };*/
float motor[8];
//每次执行会将六自由度dof6转换为8个电机通道 并赋值
void motorinit()
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim4;
	extern TIM_HandleTypeDef htim8;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001670:	2100      	movs	r1, #0
 8001672:	4810      	ldr	r0, [pc, #64]	; (80016b4 <motorinit+0x48>)
 8001674:	f003 fd82 	bl	800517c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001678:	2104      	movs	r1, #4
 800167a:	480e      	ldr	r0, [pc, #56]	; (80016b4 <motorinit+0x48>)
 800167c:	f003 fd7e 	bl	800517c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001680:	2108      	movs	r1, #8
 8001682:	480c      	ldr	r0, [pc, #48]	; (80016b4 <motorinit+0x48>)
 8001684:	f003 fd7a 	bl	800517c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001688:	210c      	movs	r1, #12
 800168a:	480a      	ldr	r0, [pc, #40]	; (80016b4 <motorinit+0x48>)
 800168c:	f003 fd76 	bl	800517c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001690:	2100      	movs	r1, #0
 8001692:	4809      	ldr	r0, [pc, #36]	; (80016b8 <motorinit+0x4c>)
 8001694:	f003 fd72 	bl	800517c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001698:	2104      	movs	r1, #4
 800169a:	4807      	ldr	r0, [pc, #28]	; (80016b8 <motorinit+0x4c>)
 800169c:	f003 fd6e 	bl	800517c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80016a0:	2108      	movs	r1, #8
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <motorinit+0x4c>)
 80016a4:	f003 fd6a 	bl	800517c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016a8:	210c      	movs	r1, #12
 80016aa:	4803      	ldr	r0, [pc, #12]	; (80016b8 <motorinit+0x4c>)
 80016ac:	f003 fd66 	bl	800517c <HAL_TIM_PWM_Start>
}
 80016b0:	bf00      	nop
 80016b2:	bd80      	pop	{r7, pc}
 80016b4:	200003f8 	.word	0x200003f8
 80016b8:	200003b0 	.word	0x200003b0

080016bc <setmotor>:
void setmotor()
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b084      	sub	sp, #16
 80016c0:	af00      	add	r7, sp, #0
    int time = HAL_GetTick();
 80016c2:	f001 fb75 	bl	8002db0 <HAL_GetTick>
 80016c6:	4603      	mov	r3, r0
 80016c8:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 8; i++)
 80016ca:	2300      	movs	r3, #0
 80016cc:	60fb      	str	r3, [r7, #12]
 80016ce:	e05d      	b.n	800178c <setmotor+0xd0>
    {
        float tmp = 0;
 80016d0:	f04f 0300 	mov.w	r3, #0
 80016d4:	60bb      	str	r3, [r7, #8]
        for (int j = 0; j < 6; j++)
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
 80016da:	e01c      	b.n	8001716 <setmotor+0x5a>
            tmp += hcc[i][j] * dof6[j];
 80016dc:	4973      	ldr	r1, [pc, #460]	; (80018ac <setmotor+0x1f0>)
 80016de:	68fa      	ldr	r2, [r7, #12]
 80016e0:	4613      	mov	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4413      	add	r3, r2
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	687a      	ldr	r2, [r7, #4]
 80016ea:	4413      	add	r3, r2
 80016ec:	009b      	lsls	r3, r3, #2
 80016ee:	440b      	add	r3, r1
 80016f0:	ed93 7a00 	vldr	s14, [r3]
 80016f4:	4a6e      	ldr	r2, [pc, #440]	; (80018b0 <setmotor+0x1f4>)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	009b      	lsls	r3, r3, #2
 80016fa:	4413      	add	r3, r2
 80016fc:	edd3 7a00 	vldr	s15, [r3]
 8001700:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001704:	ed97 7a02 	vldr	s14, [r7, #8]
 8001708:	ee77 7a27 	vadd.f32	s15, s14, s15
 800170c:	edc7 7a02 	vstr	s15, [r7, #8]
        for (int j = 0; j < 6; j++)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	3301      	adds	r3, #1
 8001714:	607b      	str	r3, [r7, #4]
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2b05      	cmp	r3, #5
 800171a:	dddf      	ble.n	80016dc <setmotor+0x20>
        if(tmp > 1)
 800171c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001720:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001724:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001728:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800172c:	dd02      	ble.n	8001734 <setmotor+0x78>
            tmp = 1;
 800172e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001732:	60bb      	str	r3, [r7, #8]
        if(tmp < -1)
 8001734:	edd7 7a02 	vldr	s15, [r7, #8]
 8001738:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800173c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001740:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001744:	d501      	bpl.n	800174a <setmotor+0x8e>
            tmp = -1;
 8001746:	4b5b      	ldr	r3, [pc, #364]	; (80018b4 <setmotor+0x1f8>)
 8001748:	60bb      	str	r3, [r7, #8]
        if(time<10000||lock==0)//初始化||没有解开锁定
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001750:	4293      	cmp	r3, r2
 8001752:	dd03      	ble.n	800175c <setmotor+0xa0>
 8001754:	4b58      	ldr	r3, [pc, #352]	; (80018b8 <setmotor+0x1fc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d107      	bne.n	800176c <setmotor+0xb0>
			motor[i] = 0;
 800175c:	4a57      	ldr	r2, [pc, #348]	; (80018bc <setmotor+0x200>)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	009b      	lsls	r3, r3, #2
 8001762:	4413      	add	r3, r2
 8001764:	f04f 0200 	mov.w	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	e005      	b.n	8001778 <setmotor+0xbc>
        else
        	motor[i] = tmp;
 800176c:	4a53      	ldr	r2, [pc, #332]	; (80018bc <setmotor+0x200>)
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	009b      	lsls	r3, r3, #2
 8001772:	4413      	add	r3, r2
 8001774:	68ba      	ldr	r2, [r7, #8]
 8001776:	601a      	str	r2, [r3, #0]
        frame.fdata[i + 16] = tmp;//回传数据
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	3310      	adds	r3, #16
 800177c:	4a50      	ldr	r2, [pc, #320]	; (80018c0 <setmotor+0x204>)
 800177e:	009b      	lsls	r3, r3, #2
 8001780:	4413      	add	r3, r2
 8001782:	68ba      	ldr	r2, [r7, #8]
 8001784:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	3301      	adds	r3, #1
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	2b07      	cmp	r3, #7
 8001790:	dd9e      	ble.n	80016d0 <setmotor+0x14>
    }

    MOTOR_1 = motor[0] * MOTOR_WAY + MOTOR_CENTER;
 8001792:	4b4a      	ldr	r3, [pc, #296]	; (80018bc <setmotor+0x200>)
 8001794:	edd3 7a00 	vldr	s15, [r3]
 8001798:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80018c4 <setmotor+0x208>
 800179c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017a0:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80018c8 <setmotor+0x20c>
 80017a4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a8:	4b48      	ldr	r3, [pc, #288]	; (80018cc <setmotor+0x210>)
 80017aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ae:	ee17 2a90 	vmov	r2, s15
 80017b2:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_2 = motor[1] * MOTOR_WAY + MOTOR_CENTER;
 80017b4:	4b41      	ldr	r3, [pc, #260]	; (80018bc <setmotor+0x200>)
 80017b6:	edd3 7a01 	vldr	s15, [r3, #4]
 80017ba:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80018c4 <setmotor+0x208>
 80017be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017c2:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80018c8 <setmotor+0x20c>
 80017c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ca:	4b40      	ldr	r3, [pc, #256]	; (80018cc <setmotor+0x210>)
 80017cc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017d0:	ee17 2a90 	vmov	r2, s15
 80017d4:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_3 = motor[2] * MOTOR_WAY + MOTOR_CENTER;
 80017d6:	4b39      	ldr	r3, [pc, #228]	; (80018bc <setmotor+0x200>)
 80017d8:	edd3 7a02 	vldr	s15, [r3, #8]
 80017dc:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80018c4 <setmotor+0x208>
 80017e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e4:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80018c8 <setmotor+0x20c>
 80017e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017ec:	4b37      	ldr	r3, [pc, #220]	; (80018cc <setmotor+0x210>)
 80017ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017f2:	ee17 2a90 	vmov	r2, s15
 80017f6:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_4 = motor[3] * MOTOR_WAY + MOTOR_CENTER;
 80017f8:	4b30      	ldr	r3, [pc, #192]	; (80018bc <setmotor+0x200>)
 80017fa:	edd3 7a03 	vldr	s15, [r3, #12]
 80017fe:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80018c4 <setmotor+0x208>
 8001802:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001806:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80018c8 <setmotor+0x20c>
 800180a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800180e:	4b2f      	ldr	r3, [pc, #188]	; (80018cc <setmotor+0x210>)
 8001810:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001814:	ee17 2a90 	vmov	r2, s15
 8001818:	641a      	str	r2, [r3, #64]	; 0x40
    MOTOR_5 = motor[4] * MOTOR_WAY + MOTOR_CENTER;
 800181a:	4b28      	ldr	r3, [pc, #160]	; (80018bc <setmotor+0x200>)
 800181c:	edd3 7a04 	vldr	s15, [r3, #16]
 8001820:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80018c4 <setmotor+0x208>
 8001824:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001828:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80018c8 <setmotor+0x20c>
 800182c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001830:	4b27      	ldr	r3, [pc, #156]	; (80018d0 <setmotor+0x214>)
 8001832:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001836:	ee17 2a90 	vmov	r2, s15
 800183a:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_6 = motor[5] * MOTOR_WAY + MOTOR_CENTER;
 800183c:	4b1f      	ldr	r3, [pc, #124]	; (80018bc <setmotor+0x200>)
 800183e:	edd3 7a05 	vldr	s15, [r3, #20]
 8001842:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80018c4 <setmotor+0x208>
 8001846:	ee67 7a87 	vmul.f32	s15, s15, s14
 800184a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80018c8 <setmotor+0x20c>
 800184e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001852:	4b1f      	ldr	r3, [pc, #124]	; (80018d0 <setmotor+0x214>)
 8001854:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001858:	ee17 2a90 	vmov	r2, s15
 800185c:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_7 = motor[6] * MOTOR_WAY + MOTOR_CENTER;
 800185e:	4b17      	ldr	r3, [pc, #92]	; (80018bc <setmotor+0x200>)
 8001860:	edd3 7a06 	vldr	s15, [r3, #24]
 8001864:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018c4 <setmotor+0x208>
 8001868:	ee67 7a87 	vmul.f32	s15, s15, s14
 800186c:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80018c8 <setmotor+0x20c>
 8001870:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001874:	4b16      	ldr	r3, [pc, #88]	; (80018d0 <setmotor+0x214>)
 8001876:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800187a:	ee17 2a90 	vmov	r2, s15
 800187e:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_8 = motor[7] * MOTOR_WAY + MOTOR_CENTER;
 8001880:	4b0e      	ldr	r3, [pc, #56]	; (80018bc <setmotor+0x200>)
 8001882:	edd3 7a07 	vldr	s15, [r3, #28]
 8001886:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80018c4 <setmotor+0x208>
 800188a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80018c8 <setmotor+0x20c>
 8001892:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001896:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <setmotor+0x214>)
 8001898:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800189c:	ee17 2a90 	vmov	r2, s15
 80018a0:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	20000114 	.word	0x20000114
 80018b0:	20000264 	.word	0x20000264
 80018b4:	bf800000 	.word	0xbf800000
 80018b8:	2000027c 	.word	0x2000027c
 80018bc:	2000085c 	.word	0x2000085c
 80018c0:	200000a8 	.word	0x200000a8
 80018c4:	44480000 	.word	0x44480000
 80018c8:	44bb8000 	.word	0x44bb8000
 80018cc:	40000800 	.word	0x40000800
 80018d0:	40010400 	.word	0x40010400

080018d4 <OLED_Refresh_Gram>:
extern SPI_HandleTypeDef hspi1;

  
u8 OLED_GRAM[8][128];	   //内部定义了一块GRAM
void OLED_Refresh_Gram(void) //把32内部的GRAM刷新到OLED里面显示
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
	//u8 i,n;
	for(int i=0;i<8;i++)
 80018da:	2300      	movs	r3, #0
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	e01b      	b.n	8001918 <OLED_Refresh_Gram+0x44>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	3b50      	subs	r3, #80	; 0x50
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	2100      	movs	r1, #0
 80018ea:	4618      	mov	r0, r3
 80018ec:	f000 f820 	bl	8001930 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 80018f0:	2100      	movs	r1, #0
 80018f2:	2000      	movs	r0, #0
 80018f4:	f000 f81c 	bl	8001930 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 80018f8:	2100      	movs	r1, #0
 80018fa:	2010      	movs	r0, #16
 80018fc:	f000 f818 	bl	8001930 <OLED_WR_Byte>
		//OLED_RS_Set();
		HAL_SPI_Transmit(&hspi1, OLED_GRAM[i], 128, 10);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	01db      	lsls	r3, r3, #7
 8001904:	4a08      	ldr	r2, [pc, #32]	; (8001928 <OLED_Refresh_Gram+0x54>)
 8001906:	1899      	adds	r1, r3, r2
 8001908:	230a      	movs	r3, #10
 800190a:	2280      	movs	r2, #128	; 0x80
 800190c:	4807      	ldr	r0, [pc, #28]	; (800192c <OLED_Refresh_Gram+0x58>)
 800190e:	f003 f8b6 	bl	8004a7e <HAL_SPI_Transmit>
	for(int i=0;i<8;i++)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	3301      	adds	r3, #1
 8001916:	607b      	str	r3, [r7, #4]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2b07      	cmp	r3, #7
 800191c:	dde0      	ble.n	80018e0 <OLED_Refresh_Gram+0xc>
		//for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
	}
}
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	3708      	adds	r7, #8
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}
 8001928:	2000087c 	.word	0x2000087c
 800192c:	200006d0 	.word	0x200006d0

08001930 <OLED_WR_Byte>:
函数功能：向OLED写入一个字节
入口参数：dat:要写入的数据/命令  ，cmd:数据/命令标志 0,表示命令;1,表示数据;
返 回 值：无
**************************************************************************/
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8001930:	b580      	push	{r7, lr}
 8001932:	b082      	sub	sp, #8
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	460a      	mov	r2, r1
 800193a:	71fb      	strb	r3, [r7, #7]
 800193c:	4613      	mov	r3, r2
 800193e:	71bb      	strb	r3, [r7, #6]
	//u8 i;
	if(cmd)
 8001940:	79bb      	ldrb	r3, [r7, #6]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d005      	beq.n	8001952 <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 8001946:	2201      	movs	r2, #1
 8001948:	2180      	movs	r1, #128	; 0x80
 800194a:	480c      	ldr	r0, [pc, #48]	; (800197c <OLED_WR_Byte+0x4c>)
 800194c:	f002 fb4e 	bl	8003fec <HAL_GPIO_WritePin>
 8001950:	e004      	b.n	800195c <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();
 8001952:	2200      	movs	r2, #0
 8001954:	2180      	movs	r1, #128	; 0x80
 8001956:	4809      	ldr	r0, [pc, #36]	; (800197c <OLED_WR_Byte+0x4c>)
 8001958:	f002 fb48 	bl	8003fec <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 10);
 800195c:	1df9      	adds	r1, r7, #7
 800195e:	230a      	movs	r3, #10
 8001960:	2201      	movs	r2, #1
 8001962:	4807      	ldr	r0, [pc, #28]	; (8001980 <OLED_WR_Byte+0x50>)
 8001964:	f003 f88b 	bl	8004a7e <HAL_SPI_Transmit>
		   OLED_SDIN_Clr();
		OLED_SCLK_Set();
		dat<<=1;   
	}				 		  
	*/
	OLED_RS_Set();   	  
 8001968:	2201      	movs	r2, #1
 800196a:	2180      	movs	r1, #128	; 0x80
 800196c:	4803      	ldr	r0, [pc, #12]	; (800197c <OLED_WR_Byte+0x4c>)
 800196e:	f002 fb3d 	bl	8003fec <HAL_GPIO_WritePin>
} 
 8001972:	bf00      	nop
 8001974:	3708      	adds	r7, #8
 8001976:	46bd      	mov	sp, r7
 8001978:	bd80      	pop	{r7, pc}
 800197a:	bf00      	nop
 800197c:	40020400 	.word	0x40020400
 8001980:	200006d0 	.word	0x200006d0

08001984 <OLED_Clear>:
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}	
////////////////////////////////////////////////////////////////////////////////
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
	u8 i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[i][n]=0X00;
 800198a:	2300      	movs	r3, #0
 800198c:	71fb      	strb	r3, [r7, #7]
 800198e:	e014      	b.n	80019ba <OLED_Clear+0x36>
 8001990:	2300      	movs	r3, #0
 8001992:	71bb      	strb	r3, [r7, #6]
 8001994:	e00a      	b.n	80019ac <OLED_Clear+0x28>
 8001996:	79fa      	ldrb	r2, [r7, #7]
 8001998:	79bb      	ldrb	r3, [r7, #6]
 800199a:	490d      	ldr	r1, [pc, #52]	; (80019d0 <OLED_Clear+0x4c>)
 800199c:	01d2      	lsls	r2, r2, #7
 800199e:	440a      	add	r2, r1
 80019a0:	4413      	add	r3, r2
 80019a2:	2200      	movs	r2, #0
 80019a4:	701a      	strb	r2, [r3, #0]
 80019a6:	79bb      	ldrb	r3, [r7, #6]
 80019a8:	3301      	adds	r3, #1
 80019aa:	71bb      	strb	r3, [r7, #6]
 80019ac:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	daf0      	bge.n	8001996 <OLED_Clear+0x12>
 80019b4:	79fb      	ldrb	r3, [r7, #7]
 80019b6:	3301      	adds	r3, #1
 80019b8:	71fb      	strb	r3, [r7, #7]
 80019ba:	79fb      	ldrb	r3, [r7, #7]
 80019bc:	2b07      	cmp	r3, #7
 80019be:	d9e7      	bls.n	8001990 <OLED_Clear+0xc>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
		//for(k=0;k<128;k++)OLED_WR_Byte(OLED_GRAM[j][k],OLED_DATA);
	}
	//OLED_Refresh_Gram();//更新显示
	 */
}
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	370c      	adds	r7, #12
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	2000087c 	.word	0x2000087c

080019d4 <OLED_DrawPoint>:
函数功能：在OLED中画点
入口参数：坐标:x：0~127，y:0~63  ，t:1 填充 0,清空		
返 回 值：无
**************************************************************************/
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b085      	sub	sp, #20
 80019d8:	af00      	add	r7, sp, #0
 80019da:	4603      	mov	r3, r0
 80019dc:	71fb      	strb	r3, [r7, #7]
 80019de:	460b      	mov	r3, r1
 80019e0:	71bb      	strb	r3, [r7, #6]
 80019e2:	4613      	mov	r3, r2
 80019e4:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 80019e6:	2300      	movs	r3, #0
 80019e8:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 80019ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	db41      	blt.n	8001a76 <OLED_DrawPoint+0xa2>
 80019f2:	79bb      	ldrb	r3, [r7, #6]
 80019f4:	2b3f      	cmp	r3, #63	; 0x3f
 80019f6:	d83e      	bhi.n	8001a76 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80019f8:	79bb      	ldrb	r3, [r7, #6]
 80019fa:	08db      	lsrs	r3, r3, #3
 80019fc:	b2db      	uxtb	r3, r3
 80019fe:	f1c3 0307 	rsb	r3, r3, #7
 8001a02:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001a04:	79bb      	ldrb	r3, [r7, #6]
 8001a06:	f003 0307 	and.w	r3, r3, #7
 8001a0a:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001a0c:	7b7b      	ldrb	r3, [r7, #13]
 8001a0e:	f1c3 0307 	rsb	r3, r3, #7
 8001a12:	2201      	movs	r2, #1
 8001a14:	fa02 f303 	lsl.w	r3, r2, r3
 8001a18:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[pos][x]|=temp;
 8001a1a:	797b      	ldrb	r3, [r7, #5]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d012      	beq.n	8001a46 <OLED_DrawPoint+0x72>
 8001a20:	7bba      	ldrb	r2, [r7, #14]
 8001a22:	79fb      	ldrb	r3, [r7, #7]
 8001a24:	4917      	ldr	r1, [pc, #92]	; (8001a84 <OLED_DrawPoint+0xb0>)
 8001a26:	01d2      	lsls	r2, r2, #7
 8001a28:	440a      	add	r2, r1
 8001a2a:	4413      	add	r3, r2
 8001a2c:	7818      	ldrb	r0, [r3, #0]
 8001a2e:	7bba      	ldrb	r2, [r7, #14]
 8001a30:	79fb      	ldrb	r3, [r7, #7]
 8001a32:	7bf9      	ldrb	r1, [r7, #15]
 8001a34:	4301      	orrs	r1, r0
 8001a36:	b2c8      	uxtb	r0, r1
 8001a38:	4912      	ldr	r1, [pc, #72]	; (8001a84 <OLED_DrawPoint+0xb0>)
 8001a3a:	01d2      	lsls	r2, r2, #7
 8001a3c:	440a      	add	r2, r1
 8001a3e:	4413      	add	r3, r2
 8001a40:	4602      	mov	r2, r0
 8001a42:	701a      	strb	r2, [r3, #0]
 8001a44:	e018      	b.n	8001a78 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[pos][x]&=~temp;
 8001a46:	7bba      	ldrb	r2, [r7, #14]
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	490e      	ldr	r1, [pc, #56]	; (8001a84 <OLED_DrawPoint+0xb0>)
 8001a4c:	01d2      	lsls	r2, r2, #7
 8001a4e:	440a      	add	r2, r1
 8001a50:	4413      	add	r3, r2
 8001a52:	781b      	ldrb	r3, [r3, #0]
 8001a54:	b25a      	sxtb	r2, r3
 8001a56:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a5a:	43db      	mvns	r3, r3
 8001a5c:	b25b      	sxtb	r3, r3
 8001a5e:	4013      	ands	r3, r2
 8001a60:	b259      	sxtb	r1, r3
 8001a62:	7bba      	ldrb	r2, [r7, #14]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	b2c8      	uxtb	r0, r1
 8001a68:	4906      	ldr	r1, [pc, #24]	; (8001a84 <OLED_DrawPoint+0xb0>)
 8001a6a:	01d2      	lsls	r2, r2, #7
 8001a6c:	440a      	add	r2, r1
 8001a6e:	4413      	add	r3, r2
 8001a70:	4602      	mov	r2, r0
 8001a72:	701a      	strb	r2, [r3, #0]
 8001a74:	e000      	b.n	8001a78 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 8001a76:	bf00      	nop
}
 8001a78:	3714      	adds	r7, #20
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	2000087c 	.word	0x2000087c

08001a88 <OLED_ShowChar>:
函数功能：在指定的位置显示一个字符
入口参数：坐标:x：0~127，y:0~63 ，mode:0,反白显示;1,正常显示	，size:选择字体 12-16		
返 回 值：无
**************************************************************************/
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{      			    
 8001a88:	b590      	push	{r4, r7, lr}
 8001a8a:	b085      	sub	sp, #20
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4604      	mov	r4, r0
 8001a90:	4608      	mov	r0, r1
 8001a92:	4611      	mov	r1, r2
 8001a94:	461a      	mov	r2, r3
 8001a96:	4623      	mov	r3, r4
 8001a98:	71fb      	strb	r3, [r7, #7]
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71bb      	strb	r3, [r7, #6]
 8001a9e:	460b      	mov	r3, r1
 8001aa0:	717b      	strb	r3, [r7, #5]
 8001aa2:	4613      	mov	r3, r2
 8001aa4:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 8001aa6:	79bb      	ldrb	r3, [r7, #6]
 8001aa8:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值				   
 8001aaa:	797b      	ldrb	r3, [r7, #5]
 8001aac:	3b20      	subs	r3, #32
 8001aae:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	73bb      	strb	r3, [r7, #14]
 8001ab4:	e04d      	b.n	8001b52 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 8001ab6:	793b      	ldrb	r3, [r7, #4]
 8001ab8:	2b0c      	cmp	r3, #12
 8001aba:	d10b      	bne.n	8001ad4 <OLED_ShowChar+0x4c>
 8001abc:	797a      	ldrb	r2, [r7, #5]
 8001abe:	7bb9      	ldrb	r1, [r7, #14]
 8001ac0:	4828      	ldr	r0, [pc, #160]	; (8001b64 <OLED_ShowChar+0xdc>)
 8001ac2:	4613      	mov	r3, r2
 8001ac4:	005b      	lsls	r3, r3, #1
 8001ac6:	4413      	add	r3, r2
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	4403      	add	r3, r0
 8001acc:	440b      	add	r3, r1
 8001ace:	781b      	ldrb	r3, [r3, #0]
 8001ad0:	73fb      	strb	r3, [r7, #15]
 8001ad2:	e007      	b.n	8001ae4 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体 	                          
 8001ad4:	797a      	ldrb	r2, [r7, #5]
 8001ad6:	7bbb      	ldrb	r3, [r7, #14]
 8001ad8:	4923      	ldr	r1, [pc, #140]	; (8001b68 <OLED_ShowChar+0xe0>)
 8001ada:	0112      	lsls	r2, r2, #4
 8001adc:	440a      	add	r2, r1
 8001ade:	4413      	add	r3, r2
 8001ae0:	781b      	ldrb	r3, [r3, #0]
 8001ae2:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	737b      	strb	r3, [r7, #13]
 8001ae8:	e02d      	b.n	8001b46 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001aea:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	da07      	bge.n	8001b02 <OLED_ShowChar+0x7a>
 8001af2:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001af6:	79b9      	ldrb	r1, [r7, #6]
 8001af8:	79fb      	ldrb	r3, [r7, #7]
 8001afa:	4618      	mov	r0, r3
 8001afc:	f7ff ff6a 	bl	80019d4 <OLED_DrawPoint>
 8001b00:	e00c      	b.n	8001b1c <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001b02:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	bf0c      	ite	eq
 8001b0a:	2301      	moveq	r3, #1
 8001b0c:	2300      	movne	r3, #0
 8001b0e:	b2db      	uxtb	r3, r3
 8001b10:	461a      	mov	r2, r3
 8001b12:	79b9      	ldrb	r1, [r7, #6]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff5c 	bl	80019d4 <OLED_DrawPoint>
			temp<<=1;
 8001b1c:	7bfb      	ldrb	r3, [r7, #15]
 8001b1e:	005b      	lsls	r3, r3, #1
 8001b20:	73fb      	strb	r3, [r7, #15]
			y++;
 8001b22:	79bb      	ldrb	r3, [r7, #6]
 8001b24:	3301      	adds	r3, #1
 8001b26:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001b28:	79ba      	ldrb	r2, [r7, #6]
 8001b2a:	7b3b      	ldrb	r3, [r7, #12]
 8001b2c:	1ad2      	subs	r2, r2, r3
 8001b2e:	793b      	ldrb	r3, [r7, #4]
 8001b30:	429a      	cmp	r2, r3
 8001b32:	d105      	bne.n	8001b40 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001b34:	7b3b      	ldrb	r3, [r7, #12]
 8001b36:	71bb      	strb	r3, [r7, #6]
				x++;
 8001b38:	79fb      	ldrb	r3, [r7, #7]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	71fb      	strb	r3, [r7, #7]
				break;
 8001b3e:	e005      	b.n	8001b4c <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001b40:	7b7b      	ldrb	r3, [r7, #13]
 8001b42:	3301      	adds	r3, #1
 8001b44:	737b      	strb	r3, [r7, #13]
 8001b46:	7b7b      	ldrb	r3, [r7, #13]
 8001b48:	2b07      	cmp	r3, #7
 8001b4a:	d9ce      	bls.n	8001aea <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001b4c:	7bbb      	ldrb	r3, [r7, #14]
 8001b4e:	3301      	adds	r3, #1
 8001b50:	73bb      	strb	r3, [r7, #14]
 8001b52:	7bba      	ldrb	r2, [r7, #14]
 8001b54:	793b      	ldrb	r3, [r7, #4]
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d3ad      	bcc.n	8001ab6 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	3714      	adds	r7, #20
 8001b60:	46bd      	mov	sp, r7
 8001b62:	bd90      	pop	{r4, r7, pc}
 8001b64:	08007a6c 	.word	0x08007a6c
 8001b68:	08007ee0 	.word	0x08007ee0

08001b6c <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	b085      	sub	sp, #20
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	460a      	mov	r2, r1
 8001b76:	71fb      	strb	r3, [r7, #7]
 8001b78:	4613      	mov	r3, r2
 8001b7a:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8001b80:	e004      	b.n	8001b8c <oled_pow+0x20>
 8001b82:	79fa      	ldrb	r2, [r7, #7]
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	fb02 f303 	mul.w	r3, r2, r3
 8001b8a:	60fb      	str	r3, [r7, #12]
 8001b8c:	79bb      	ldrb	r3, [r7, #6]
 8001b8e:	1e5a      	subs	r2, r3, #1
 8001b90:	71ba      	strb	r2, [r7, #6]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1f5      	bne.n	8001b82 <oled_pow+0x16>
	return result;
 8001b96:	68fb      	ldr	r3, [r7, #12]
}	
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3714      	adds	r7, #20
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba2:	4770      	bx	lr

08001ba4 <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：坐标:x：0~127，y:0~63 ；num:数值(0~4294967295)；mode:0,填充模式 1,叠加模式； size:选择字体 12-16		
返 回 值：无
**************************************************************************/  
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 8001ba4:	b590      	push	{r4, r7, lr}
 8001ba6:	b087      	sub	sp, #28
 8001ba8:	af02      	add	r7, sp, #8
 8001baa:	603a      	str	r2, [r7, #0]
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	71fb      	strb	r3, [r7, #7]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	71bb      	strb	r3, [r7, #6]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 8001bba:	2300      	movs	r3, #0
 8001bbc:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	73fb      	strb	r3, [r7, #15]
 8001bc2:	e051      	b.n	8001c68 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8001bc4:	797a      	ldrb	r2, [r7, #5]
 8001bc6:	7bfb      	ldrb	r3, [r7, #15]
 8001bc8:	1ad3      	subs	r3, r2, r3
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	3b01      	subs	r3, #1
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	200a      	movs	r0, #10
 8001bd4:	f7ff ffca 	bl	8001b6c <oled_pow>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	683b      	ldr	r3, [r7, #0]
 8001bdc:	fbb3 f1f2 	udiv	r1, r3, r2
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <OLED_ShowNumber+0xd8>)
 8001be2:	fba3 2301 	umull	r2, r3, r3, r1
 8001be6:	08da      	lsrs	r2, r3, #3
 8001be8:	4613      	mov	r3, r2
 8001bea:	009b      	lsls	r3, r3, #2
 8001bec:	4413      	add	r3, r2
 8001bee:	005b      	lsls	r3, r3, #1
 8001bf0:	1aca      	subs	r2, r1, r3
 8001bf2:	4613      	mov	r3, r2
 8001bf4:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d11d      	bne.n	8001c38 <OLED_ShowNumber+0x94>
 8001bfc:	7bfa      	ldrb	r2, [r7, #15]
 8001bfe:	797b      	ldrb	r3, [r7, #5]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	429a      	cmp	r2, r3
 8001c04:	da18      	bge.n	8001c38 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 8001c06:	7b7b      	ldrb	r3, [r7, #13]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d113      	bne.n	8001c34 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8001c0c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c10:	085b      	lsrs	r3, r3, #1
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	fb12 f303 	smulbb	r3, r2, r3
 8001c1a:	b2da      	uxtb	r2, r3
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	4413      	add	r3, r2
 8001c20:	b2d8      	uxtb	r0, r3
 8001c22:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c26:	79b9      	ldrb	r1, [r7, #6]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	9200      	str	r2, [sp, #0]
 8001c2c:	2220      	movs	r2, #32
 8001c2e:	f7ff ff2b 	bl	8001a88 <OLED_ShowChar>
				continue;
 8001c32:	e016      	b.n	8001c62 <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 8001c34:	2301      	movs	r3, #1
 8001c36:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 8001c38:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c3c:	085b      	lsrs	r3, r3, #1
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	7bfa      	ldrb	r2, [r7, #15]
 8001c42:	fb12 f303 	smulbb	r3, r2, r3
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2d8      	uxtb	r0, r3
 8001c4e:	7b7b      	ldrb	r3, [r7, #13]
 8001c50:	3330      	adds	r3, #48	; 0x30
 8001c52:	b2da      	uxtb	r2, r3
 8001c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c58:	79b9      	ldrb	r1, [r7, #6]
 8001c5a:	2401      	movs	r4, #1
 8001c5c:	9400      	str	r4, [sp, #0]
 8001c5e:	f7ff ff13 	bl	8001a88 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	3301      	adds	r3, #1
 8001c66:	73fb      	strb	r3, [r7, #15]
 8001c68:	7bfa      	ldrb	r2, [r7, #15]
 8001c6a:	797b      	ldrb	r3, [r7, #5]
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d3a9      	bcc.n	8001bc4 <OLED_ShowNumber+0x20>
	}
} 
 8001c70:	bf00      	nop
 8001c72:	bf00      	nop
 8001c74:	3714      	adds	r7, #20
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd90      	pop	{r4, r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	cccccccd 	.word	0xcccccccd

08001c80 <OLED_ShowString>:
函数功能：显示字符串
入口参数：坐标:x：0~127，y:0~63 ；*p:字符串起始地址；
返 回 值：无
**************************************************************************/  
void OLED_ShowString(u8 x,u8 y,const char *p)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b084      	sub	sp, #16
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4603      	mov	r3, r0
 8001c88:	603a      	str	r2, [r7, #0]
 8001c8a:	71fb      	strb	r3, [r7, #7]
 8001c8c:	460b      	mov	r3, r1
 8001c8e:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001c90:	e01f      	b.n	8001cd2 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001c92:	79fb      	ldrb	r3, [r7, #7]
 8001c94:	2b7a      	cmp	r3, #122	; 0x7a
 8001c96:	d904      	bls.n	8001ca2 <OLED_ShowString+0x22>
 8001c98:	2300      	movs	r3, #0
 8001c9a:	71fb      	strb	r3, [r7, #7]
 8001c9c:	79bb      	ldrb	r3, [r7, #6]
 8001c9e:	3310      	adds	r3, #16
 8001ca0:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	2b3a      	cmp	r3, #58	; 0x3a
 8001ca6:	d905      	bls.n	8001cb4 <OLED_ShowString+0x34>
 8001ca8:	2300      	movs	r3, #0
 8001caa:	71fb      	strb	r3, [r7, #7]
 8001cac:	79fb      	ldrb	r3, [r7, #7]
 8001cae:	71bb      	strb	r3, [r7, #6]
 8001cb0:	f7ff fe68 	bl	8001984 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001cb4:	683b      	ldr	r3, [r7, #0]
 8001cb6:	781a      	ldrb	r2, [r3, #0]
 8001cb8:	79b9      	ldrb	r1, [r7, #6]
 8001cba:	79f8      	ldrb	r0, [r7, #7]
 8001cbc:	2301      	movs	r3, #1
 8001cbe:	9300      	str	r3, [sp, #0]
 8001cc0:	230c      	movs	r3, #12
 8001cc2:	f7ff fee1 	bl	8001a88 <OLED_ShowChar>
        x+=8;
 8001cc6:	79fb      	ldrb	r3, [r7, #7]
 8001cc8:	3308      	adds	r3, #8
 8001cca:	71fb      	strb	r3, [r7, #7]
        p++;
 8001ccc:	683b      	ldr	r3, [r7, #0]
 8001cce:	3301      	adds	r3, #1
 8001cd0:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d1db      	bne.n	8001c92 <OLED_ShowString+0x12>
    }  
}	
 8001cda:	bf00      	nop
 8001cdc:	bf00      	nop
 8001cde:	3708      	adds	r7, #8
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <OLED_Init>:
函数功能：初始化OLED
入口参数：无
返 回 值：无
**************************************************************************/ 
void OLED_Init(void)
{ 	 	 
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b082      	sub	sp, #8
 8001ce8:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 8001cea:	2200      	movs	r2, #0
 8001cec:	2140      	movs	r1, #64	; 0x40
 8001cee:	4851      	ldr	r0, [pc, #324]	; (8001e34 <OLED_Init+0x150>)
 8001cf0:	f002 f97c 	bl	8003fec <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cf4:	2001      	movs	r0, #1
 8001cf6:	f001 f867 	bl	8002dc8 <HAL_Delay>
	OLED_RST_Set();   //OLED复位
 8001cfa:	2201      	movs	r2, #1
 8001cfc:	2140      	movs	r1, #64	; 0x40
 8001cfe:	484d      	ldr	r0, [pc, #308]	; (8001e34 <OLED_Init+0x150>)
 8001d00:	f002 f974 	bl	8003fec <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 8001d04:	2100      	movs	r1, #0
 8001d06:	20ae      	movs	r0, #174	; 0xae
 8001d08:	f7ff fe12 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	20d5      	movs	r0, #213	; 0xd5
 8001d10:	f7ff fe0e 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 8001d14:	2100      	movs	r1, #0
 8001d16:	2050      	movs	r0, #80	; 0x50
 8001d18:	f7ff fe0a 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	20a8      	movs	r0, #168	; 0xa8
 8001d20:	f7ff fe06 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
 8001d24:	2100      	movs	r1, #0
 8001d26:	203f      	movs	r0, #63	; 0x3f
 8001d28:	f7ff fe02 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	20d3      	movs	r0, #211	; 0xd3
 8001d30:	f7ff fdfe 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 8001d34:	2100      	movs	r1, #0
 8001d36:	2000      	movs	r0, #0
 8001d38:	f7ff fdfa 	bl	8001930 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	2040      	movs	r0, #64	; 0x40
 8001d40:	f7ff fdf6 	bl	8001930 <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 8001d44:	2100      	movs	r1, #0
 8001d46:	208d      	movs	r0, #141	; 0x8d
 8001d48:	f7ff fdf2 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2014      	movs	r0, #20
 8001d50:	f7ff fdee 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 8001d54:	2100      	movs	r1, #0
 8001d56:	2020      	movs	r0, #32
 8001d58:	f7ff fdea 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	2002      	movs	r0, #2
 8001d60:	f7ff fde6 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 8001d64:	2100      	movs	r1, #0
 8001d66:	20a1      	movs	r0, #161	; 0xa1
 8001d68:	f7ff fde2 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	20c0      	movs	r0, #192	; 0xc0
 8001d70:	f7ff fdde 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 8001d74:	2100      	movs	r1, #0
 8001d76:	20da      	movs	r0, #218	; 0xda
 8001d78:	f7ff fdda 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2012      	movs	r0, #18
 8001d80:	f7ff fdd6 	bl	8001930 <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 8001d84:	2100      	movs	r1, #0
 8001d86:	2081      	movs	r0, #129	; 0x81
 8001d88:	f7ff fdd2 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	20ef      	movs	r0, #239	; 0xef
 8001d90:	f7ff fdce 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 8001d94:	2100      	movs	r1, #0
 8001d96:	20d9      	movs	r0, #217	; 0xd9
 8001d98:	f7ff fdca 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	20f1      	movs	r0, #241	; 0xf1
 8001da0:	f7ff fdc6 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 8001da4:	2100      	movs	r1, #0
 8001da6:	20db      	movs	r0, #219	; 0xdb
 8001da8:	f7ff fdc2 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001dac:	2100      	movs	r1, #0
 8001dae:	2030      	movs	r0, #48	; 0x30
 8001db0:	f7ff fdbe 	bl	8001930 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 8001db4:	2100      	movs	r1, #0
 8001db6:	20a4      	movs	r0, #164	; 0xa4
 8001db8:	f7ff fdba 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	20a6      	movs	r0, #166	; 0xa6
 8001dc0:	f7ff fdb6 	bl	8001930 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
 8001dc4:	2100      	movs	r1, #0
 8001dc6:	20af      	movs	r0, #175	; 0xaf
 8001dc8:	f7ff fdb2 	bl	8001930 <OLED_WR_Byte>
	OLED_Clear();                //清屏
 8001dcc:	f7ff fdda 	bl	8001984 <OLED_Clear>
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	71fb      	strb	r3, [r7, #7]
 8001dd4:	e026      	b.n	8001e24 <OLED_Init+0x140>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8001dd6:	79fb      	ldrb	r3, [r7, #7]
 8001dd8:	3b50      	subs	r3, #80	; 0x50
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2100      	movs	r1, #0
 8001dde:	4618      	mov	r0, r3
 8001de0:	f7ff fda6 	bl	8001930 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8001de4:	2100      	movs	r1, #0
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff fda2 	bl	8001930 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8001dec:	2100      	movs	r1, #0
 8001dee:	2010      	movs	r0, #16
 8001df0:	f7ff fd9e 	bl	8001930 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[i][n],OLED_DATA);
 8001df4:	2300      	movs	r3, #0
 8001df6:	71bb      	strb	r3, [r7, #6]
 8001df8:	e00d      	b.n	8001e16 <OLED_Init+0x132>
 8001dfa:	79fa      	ldrb	r2, [r7, #7]
 8001dfc:	79bb      	ldrb	r3, [r7, #6]
 8001dfe:	490e      	ldr	r1, [pc, #56]	; (8001e38 <OLED_Init+0x154>)
 8001e00:	01d2      	lsls	r2, r2, #7
 8001e02:	440a      	add	r2, r1
 8001e04:	4413      	add	r3, r2
 8001e06:	781b      	ldrb	r3, [r3, #0]
 8001e08:	2101      	movs	r1, #1
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7ff fd90 	bl	8001930 <OLED_WR_Byte>
 8001e10:	79bb      	ldrb	r3, [r7, #6]
 8001e12:	3301      	adds	r3, #1
 8001e14:	71bb      	strb	r3, [r7, #6]
 8001e16:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	daed      	bge.n	8001dfa <OLED_Init+0x116>
	for(i=0;i<8;i++)  
 8001e1e:	79fb      	ldrb	r3, [r7, #7]
 8001e20:	3301      	adds	r3, #1
 8001e22:	71fb      	strb	r3, [r7, #7]
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b07      	cmp	r3, #7
 8001e28:	d9d5      	bls.n	8001dd6 <OLED_Init+0xf2>
	}   
}  
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	40020400 	.word	0x40020400
 8001e38:	2000087c 	.word	0x2000087c

08001e3c <remoteInit>:
float ch_float[6] = { }; //遥控器通道
//Roll Factor,Pitch Factor,Yaw Factor,Throttle Factor,Forward Factor,Lateral Factor
float conf=0;
float val=0;
void remoteInit(UART_HandleTypeDef *huart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f042 0210 	orr.w	r2, r2, #16
 8001e52:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8001e54:	2219      	movs	r2, #25
 8001e56:	4904      	ldr	r1, [pc, #16]	; (8001e68 <remoteInit+0x2c>)
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f004 fa1f 	bl	800629c <HAL_UART_Receive_DMA>
}
 8001e5e:	bf00      	nop
 8001e60:	3708      	adds	r7, #8
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}
 8001e66:	bf00      	nop
 8001e68:	20000280 	.word	0x20000280

08001e6c <remote>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void remote(uint8_t * remoteBuffer)
{
 8001e6c:	b490      	push	{r4, r7}
 8001e6e:	b086      	sub	sp, #24
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
	float *dat = (float*)(remoteBuffer+4);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	3304      	adds	r3, #4
 8001e78:	617b      	str	r3, [r7, #20]
	if(remoteBuffer[3]==0x00)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	3303      	adds	r3, #3
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d108      	bne.n	8001e96 <remote+0x2a>
	{
		ch_float[4]=dat[1];
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	4a4b      	ldr	r2, [pc, #300]	; (8001fb8 <remote+0x14c>)
 8001e8a:	6113      	str	r3, [r2, #16]
		ch_float[5]=dat[0];
 8001e8c:	697b      	ldr	r3, [r7, #20]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a49      	ldr	r2, [pc, #292]	; (8001fb8 <remote+0x14c>)
 8001e92:	6153      	str	r3, [r2, #20]
	}else if(remoteBuffer[3]==0x05)
	{
		ch_float[2]=dat[0];
		ch_float[3]=dat[1];
	}
}
 8001e94:	e08a      	b.n	8001fac <remote+0x140>
	}else if(remoteBuffer[3]==0x01)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b01      	cmp	r3, #1
 8001e9e:	d108      	bne.n	8001eb2 <remote+0x46>
		ch_float[0]=dat[0];
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a44      	ldr	r2, [pc, #272]	; (8001fb8 <remote+0x14c>)
 8001ea6:	6013      	str	r3, [r2, #0]
		ch_float[1]=dat[1];
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a42      	ldr	r2, [pc, #264]	; (8001fb8 <remote+0x14c>)
 8001eae:	6053      	str	r3, [r2, #4]
}
 8001eb0:	e07c      	b.n	8001fac <remote+0x140>
	}else if(remoteBuffer[3]==0x02)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b02      	cmp	r3, #2
 8001eba:	d106      	bne.n	8001eca <remote+0x5e>
		lock = remoteBuffer[7];
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	3307      	adds	r3, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b3d      	ldr	r3, [pc, #244]	; (8001fbc <remote+0x150>)
 8001ec6:	601a      	str	r2, [r3, #0]
}
 8001ec8:	e070      	b.n	8001fac <remote+0x140>
	}else if(remoteBuffer[3]==0x03)//通道选择
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3303      	adds	r3, #3
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	2b03      	cmp	r3, #3
 8001ed2:	d12e      	bne.n	8001f32 <remote+0xc6>
		conf=dat[0];
 8001ed4:	697b      	ldr	r3, [r7, #20]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a39      	ldr	r2, [pc, #228]	; (8001fc0 <remote+0x154>)
 8001eda:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8001edc:	4b38      	ldr	r3, [pc, #224]	; (8001fc0 <remote+0x154>)
 8001ede:	edd3 7a00 	vldr	s15, [r3]
 8001ee2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ee6:	ee17 3a90 	vmov	r3, s15
 8001eea:	60fb      	str	r3, [r7, #12]
		val=pid_ver[i_conf/3][i_conf%3];
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	4a35      	ldr	r2, [pc, #212]	; (8001fc4 <remote+0x158>)
 8001ef0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ef4:	17db      	asrs	r3, r3, #31
 8001ef6:	1ad0      	subs	r0, r2, r3
 8001ef8:	68f9      	ldr	r1, [r7, #12]
 8001efa:	4b32      	ldr	r3, [pc, #200]	; (8001fc4 <remote+0x158>)
 8001efc:	fb83 3201 	smull	r3, r2, r3, r1
 8001f00:	17cb      	asrs	r3, r1, #31
 8001f02:	1ad2      	subs	r2, r2, r3
 8001f04:	4613      	mov	r3, r2
 8001f06:	005b      	lsls	r3, r3, #1
 8001f08:	4413      	add	r3, r2
 8001f0a:	1aca      	subs	r2, r1, r3
 8001f0c:	492e      	ldr	r1, [pc, #184]	; (8001fc8 <remote+0x15c>)
 8001f0e:	4603      	mov	r3, r0
 8001f10:	00db      	lsls	r3, r3, #3
 8001f12:	1a1b      	subs	r3, r3, r0
 8001f14:	4413      	add	r3, r2
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	440b      	add	r3, r1
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a2b      	ldr	r2, [pc, #172]	; (8001fcc <remote+0x160>)
 8001f1e:	6013      	str	r3, [r2, #0]
		frame.fdata[24]=conf;
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <remote+0x154>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4a2a      	ldr	r2, [pc, #168]	; (8001fd0 <remote+0x164>)
 8001f26:	6613      	str	r3, [r2, #96]	; 0x60
		frame.fdata[25]=val;
 8001f28:	4b28      	ldr	r3, [pc, #160]	; (8001fcc <remote+0x160>)
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	4a28      	ldr	r2, [pc, #160]	; (8001fd0 <remote+0x164>)
 8001f2e:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001f30:	e03c      	b.n	8001fac <remote+0x140>
	}else if(remoteBuffer[3]==0x04)//通道值
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	3303      	adds	r3, #3
 8001f36:	781b      	ldrb	r3, [r3, #0]
 8001f38:	2b04      	cmp	r3, #4
 8001f3a:	d12a      	bne.n	8001f92 <remote+0x126>
		val=dat[0];
 8001f3c:	697b      	ldr	r3, [r7, #20]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a22      	ldr	r2, [pc, #136]	; (8001fcc <remote+0x160>)
 8001f42:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8001f44:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <remote+0x154>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f4e:	ee17 3a90 	vmov	r3, s15
 8001f52:	613b      	str	r3, [r7, #16]
		pid_ver[i_conf/3][i_conf%3]=val;
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	4a1b      	ldr	r2, [pc, #108]	; (8001fc4 <remote+0x158>)
 8001f58:	fb82 1203 	smull	r1, r2, r2, r3
 8001f5c:	17db      	asrs	r3, r3, #31
 8001f5e:	1ad0      	subs	r0, r2, r3
 8001f60:	6939      	ldr	r1, [r7, #16]
 8001f62:	4b18      	ldr	r3, [pc, #96]	; (8001fc4 <remote+0x158>)
 8001f64:	fb83 3201 	smull	r3, r2, r3, r1
 8001f68:	17cb      	asrs	r3, r1, #31
 8001f6a:	1ad2      	subs	r2, r2, r3
 8001f6c:	4613      	mov	r3, r2
 8001f6e:	005b      	lsls	r3, r3, #1
 8001f70:	4413      	add	r3, r2
 8001f72:	1aca      	subs	r2, r1, r3
 8001f74:	4b15      	ldr	r3, [pc, #84]	; (8001fcc <remote+0x160>)
 8001f76:	6819      	ldr	r1, [r3, #0]
 8001f78:	4c13      	ldr	r4, [pc, #76]	; (8001fc8 <remote+0x15c>)
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	00db      	lsls	r3, r3, #3
 8001f7e:	1a1b      	subs	r3, r3, r0
 8001f80:	4413      	add	r3, r2
 8001f82:	009b      	lsls	r3, r3, #2
 8001f84:	4423      	add	r3, r4
 8001f86:	6019      	str	r1, [r3, #0]
		frame.fdata[25]=val;
 8001f88:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <remote+0x160>)
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4a10      	ldr	r2, [pc, #64]	; (8001fd0 <remote+0x164>)
 8001f8e:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001f90:	e00c      	b.n	8001fac <remote+0x140>
	}else if(remoteBuffer[3]==0x05)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	3303      	adds	r3, #3
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d107      	bne.n	8001fac <remote+0x140>
		ch_float[2]=dat[0];
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a05      	ldr	r2, [pc, #20]	; (8001fb8 <remote+0x14c>)
 8001fa2:	6093      	str	r3, [r2, #8]
		ch_float[3]=dat[1];
 8001fa4:	697b      	ldr	r3, [r7, #20]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	4a03      	ldr	r2, [pc, #12]	; (8001fb8 <remote+0x14c>)
 8001faa:	60d3      	str	r3, [r2, #12]
}
 8001fac:	bf00      	nop
 8001fae:	3718      	adds	r7, #24
 8001fb0:	46bd      	mov	sp, r7
 8001fb2:	bc90      	pop	{r4, r7}
 8001fb4:	4770      	bx	lr
 8001fb6:	bf00      	nop
 8001fb8:	200002a0 	.word	0x200002a0
 8001fbc:	2000027c 	.word	0x2000027c
 8001fc0:	200002b8 	.word	0x200002b8
 8001fc4:	55555556 	.word	0x55555556
 8001fc8:	20000000 	.word	0x20000000
 8001fcc:	200002bc 	.word	0x200002bc
 8001fd0:	200000a8 	.word	0x200000a8

08001fd4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	b083      	sub	sp, #12
 8001fd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	607b      	str	r3, [r7, #4]
 8001fde:	4b10      	ldr	r3, [pc, #64]	; (8002020 <HAL_MspInit+0x4c>)
 8001fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fe2:	4a0f      	ldr	r2, [pc, #60]	; (8002020 <HAL_MspInit+0x4c>)
 8001fe4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fe8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fea:	4b0d      	ldr	r3, [pc, #52]	; (8002020 <HAL_MspInit+0x4c>)
 8001fec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ff2:	607b      	str	r3, [r7, #4]
 8001ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	603b      	str	r3, [r7, #0]
 8001ffa:	4b09      	ldr	r3, [pc, #36]	; (8002020 <HAL_MspInit+0x4c>)
 8001ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffe:	4a08      	ldr	r2, [pc, #32]	; (8002020 <HAL_MspInit+0x4c>)
 8002000:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002004:	6413      	str	r3, [r2, #64]	; 0x40
 8002006:	4b06      	ldr	r3, [pc, #24]	; (8002020 <HAL_MspInit+0x4c>)
 8002008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800200a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200e:	603b      	str	r3, [r7, #0]
 8002010:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002012:	bf00      	nop
 8002014:	370c      	adds	r7, #12
 8002016:	46bd      	mov	sp, r7
 8002018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201c:	4770      	bx	lr
 800201e:	bf00      	nop
 8002020:	40023800 	.word	0x40023800

08002024 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b08a      	sub	sp, #40	; 0x28
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 0314 	add.w	r3, r7, #20
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	4a17      	ldr	r2, [pc, #92]	; (80020a0 <HAL_ADC_MspInit+0x7c>)
 8002042:	4293      	cmp	r3, r2
 8002044:	d127      	bne.n	8002096 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002046:	2300      	movs	r3, #0
 8002048:	613b      	str	r3, [r7, #16]
 800204a:	4b16      	ldr	r3, [pc, #88]	; (80020a4 <HAL_ADC_MspInit+0x80>)
 800204c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204e:	4a15      	ldr	r2, [pc, #84]	; (80020a4 <HAL_ADC_MspInit+0x80>)
 8002050:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002054:	6453      	str	r3, [r2, #68]	; 0x44
 8002056:	4b13      	ldr	r3, [pc, #76]	; (80020a4 <HAL_ADC_MspInit+0x80>)
 8002058:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800205a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205e:	613b      	str	r3, [r7, #16]
 8002060:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	60fb      	str	r3, [r7, #12]
 8002066:	4b0f      	ldr	r3, [pc, #60]	; (80020a4 <HAL_ADC_MspInit+0x80>)
 8002068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800206a:	4a0e      	ldr	r2, [pc, #56]	; (80020a4 <HAL_ADC_MspInit+0x80>)
 800206c:	f043 0301 	orr.w	r3, r3, #1
 8002070:	6313      	str	r3, [r2, #48]	; 0x30
 8002072:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_ADC_MspInit+0x80>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	f003 0301 	and.w	r3, r3, #1
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800207e:	2310      	movs	r3, #16
 8002080:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002082:	2303      	movs	r3, #3
 8002084:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002086:	2300      	movs	r3, #0
 8002088:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800208a:	f107 0314 	add.w	r3, r7, #20
 800208e:	4619      	mov	r1, r3
 8002090:	4805      	ldr	r0, [pc, #20]	; (80020a8 <HAL_ADC_MspInit+0x84>)
 8002092:	f001 fe0f 	bl	8003cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002096:	bf00      	nop
 8002098:	3728      	adds	r7, #40	; 0x28
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40012000 	.word	0x40012000
 80020a4:	40023800 	.word	0x40023800
 80020a8:	40020000 	.word	0x40020000

080020ac <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08a      	sub	sp, #40	; 0x28
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020b4:	f107 0314 	add.w	r3, r7, #20
 80020b8:	2200      	movs	r2, #0
 80020ba:	601a      	str	r2, [r3, #0]
 80020bc:	605a      	str	r2, [r3, #4]
 80020be:	609a      	str	r2, [r3, #8]
 80020c0:	60da      	str	r2, [r3, #12]
 80020c2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a28      	ldr	r2, [pc, #160]	; (800216c <HAL_SPI_MspInit+0xc0>)
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d149      	bne.n	8002162 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ce:	2300      	movs	r3, #0
 80020d0:	613b      	str	r3, [r7, #16]
 80020d2:	4b27      	ldr	r3, [pc, #156]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 80020d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d6:	4a26      	ldr	r2, [pc, #152]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 80020d8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020dc:	6453      	str	r3, [r2, #68]	; 0x44
 80020de:	4b24      	ldr	r3, [pc, #144]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 80020e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020e6:	613b      	str	r3, [r7, #16]
 80020e8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60fb      	str	r3, [r7, #12]
 80020ee:	4b20      	ldr	r3, [pc, #128]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 80020f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f2:	4a1f      	ldr	r2, [pc, #124]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 80020f4:	f043 0301 	orr.w	r3, r3, #1
 80020f8:	6313      	str	r3, [r2, #48]	; 0x30
 80020fa:	4b1d      	ldr	r3, [pc, #116]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	f003 0301 	and.w	r3, r3, #1
 8002102:	60fb      	str	r3, [r7, #12]
 8002104:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60bb      	str	r3, [r7, #8]
 800210a:	4b19      	ldr	r3, [pc, #100]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a18      	ldr	r2, [pc, #96]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 8002110:	f043 0302 	orr.w	r3, r3, #2
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b16      	ldr	r3, [pc, #88]	; (8002170 <HAL_SPI_MspInit+0xc4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	60bb      	str	r3, [r7, #8]
 8002120:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002122:	2320      	movs	r3, #32
 8002124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002126:	2302      	movs	r3, #2
 8002128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800212a:	2300      	movs	r3, #0
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800212e:	2303      	movs	r3, #3
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002132:	2305      	movs	r3, #5
 8002134:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002136:	f107 0314 	add.w	r3, r7, #20
 800213a:	4619      	mov	r1, r3
 800213c:	480d      	ldr	r0, [pc, #52]	; (8002174 <HAL_SPI_MspInit+0xc8>)
 800213e:	f001 fdb9 	bl	8003cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002142:	2330      	movs	r3, #48	; 0x30
 8002144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214e:	2303      	movs	r3, #3
 8002150:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002152:	2305      	movs	r3, #5
 8002154:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002156:	f107 0314 	add.w	r3, r7, #20
 800215a:	4619      	mov	r1, r3
 800215c:	4806      	ldr	r0, [pc, #24]	; (8002178 <HAL_SPI_MspInit+0xcc>)
 800215e:	f001 fda9 	bl	8003cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002162:	bf00      	nop
 8002164:	3728      	adds	r7, #40	; 0x28
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}
 800216a:	bf00      	nop
 800216c:	40013000 	.word	0x40013000
 8002170:	40023800 	.word	0x40023800
 8002174:	40020000 	.word	0x40020000
 8002178:	40020400 	.word	0x40020400

0800217c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	b088      	sub	sp, #32
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	4a36      	ldr	r2, [pc, #216]	; (8002264 <HAL_TIM_Base_MspInit+0xe8>)
 800218a:	4293      	cmp	r3, r2
 800218c:	d116      	bne.n	80021bc <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800218e:	2300      	movs	r3, #0
 8002190:	61fb      	str	r3, [r7, #28]
 8002192:	4b35      	ldr	r3, [pc, #212]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	4a34      	ldr	r2, [pc, #208]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002198:	f043 0301 	orr.w	r3, r3, #1
 800219c:	6453      	str	r3, [r2, #68]	; 0x44
 800219e:	4b32      	ldr	r3, [pc, #200]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 80021a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	61fb      	str	r3, [r7, #28]
 80021a8:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021aa:	2200      	movs	r2, #0
 80021ac:	2100      	movs	r1, #0
 80021ae:	2019      	movs	r0, #25
 80021b0:	f001 f948 	bl	8003444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021b4:	2019      	movs	r0, #25
 80021b6:	f001 f961 	bl	800347c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021ba:	e04e      	b.n	800225a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021c4:	d10e      	bne.n	80021e4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021c6:	2300      	movs	r3, #0
 80021c8:	61bb      	str	r3, [r7, #24]
 80021ca:	4b27      	ldr	r3, [pc, #156]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 80021cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ce:	4a26      	ldr	r2, [pc, #152]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 80021d0:	f043 0301 	orr.w	r3, r3, #1
 80021d4:	6413      	str	r3, [r2, #64]	; 0x40
 80021d6:	4b24      	ldr	r3, [pc, #144]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 80021d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021da:	f003 0301 	and.w	r3, r3, #1
 80021de:	61bb      	str	r3, [r7, #24]
 80021e0:	69bb      	ldr	r3, [r7, #24]
}
 80021e2:	e03a      	b.n	800225a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a20      	ldr	r2, [pc, #128]	; (800226c <HAL_TIM_Base_MspInit+0xf0>)
 80021ea:	4293      	cmp	r3, r2
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021ee:	2300      	movs	r3, #0
 80021f0:	617b      	str	r3, [r7, #20]
 80021f2:	4b1d      	ldr	r3, [pc, #116]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	4a1c      	ldr	r2, [pc, #112]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 80021f8:	f043 0302 	orr.w	r3, r3, #2
 80021fc:	6413      	str	r3, [r2, #64]	; 0x40
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002202:	f003 0302 	and.w	r3, r3, #2
 8002206:	617b      	str	r3, [r7, #20]
 8002208:	697b      	ldr	r3, [r7, #20]
}
 800220a:	e026      	b.n	800225a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a17      	ldr	r2, [pc, #92]	; (8002270 <HAL_TIM_Base_MspInit+0xf4>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d10e      	bne.n	8002234 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002216:	2300      	movs	r3, #0
 8002218:	613b      	str	r3, [r7, #16]
 800221a:	4b13      	ldr	r3, [pc, #76]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	4a12      	ldr	r2, [pc, #72]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002220:	f043 0304 	orr.w	r3, r3, #4
 8002224:	6413      	str	r3, [r2, #64]	; 0x40
 8002226:	4b10      	ldr	r3, [pc, #64]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222a:	f003 0304 	and.w	r3, r3, #4
 800222e:	613b      	str	r3, [r7, #16]
 8002230:	693b      	ldr	r3, [r7, #16]
}
 8002232:	e012      	b.n	800225a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4a0e      	ldr	r2, [pc, #56]	; (8002274 <HAL_TIM_Base_MspInit+0xf8>)
 800223a:	4293      	cmp	r3, r2
 800223c:	d10d      	bne.n	800225a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800223e:	2300      	movs	r3, #0
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	4b09      	ldr	r3, [pc, #36]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002244:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002246:	4a08      	ldr	r2, [pc, #32]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002248:	f043 0302 	orr.w	r3, r3, #2
 800224c:	6453      	str	r3, [r2, #68]	; 0x44
 800224e:	4b06      	ldr	r3, [pc, #24]	; (8002268 <HAL_TIM_Base_MspInit+0xec>)
 8002250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002252:	f003 0302 	and.w	r3, r3, #2
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
}
 800225a:	bf00      	nop
 800225c:	3720      	adds	r7, #32
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	40010000 	.word	0x40010000
 8002268:	40023800 	.word	0x40023800
 800226c:	40000400 	.word	0x40000400
 8002270:	40000800 	.word	0x40000800
 8002274:	40010400 	.word	0x40010400

08002278 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b08a      	sub	sp, #40	; 0x28
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002280:	f107 0314 	add.w	r3, r7, #20
 8002284:	2200      	movs	r2, #0
 8002286:	601a      	str	r2, [r3, #0]
 8002288:	605a      	str	r2, [r3, #4]
 800228a:	609a      	str	r2, [r3, #8]
 800228c:	60da      	str	r2, [r3, #12]
 800228e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM5)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	4a23      	ldr	r2, [pc, #140]	; (8002324 <HAL_TIM_PWM_MspInit+0xac>)
 8002296:	4293      	cmp	r3, r2
 8002298:	d12c      	bne.n	80022f4 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	613b      	str	r3, [r7, #16]
 800229e:	4b22      	ldr	r3, [pc, #136]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a21      	ldr	r2, [pc, #132]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 80022a4:	f043 0308 	orr.w	r3, r3, #8
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b1f      	ldr	r3, [pc, #124]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 0308 	and.w	r3, r3, #8
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	60fb      	str	r3, [r7, #12]
 80022ba:	4b1b      	ldr	r3, [pc, #108]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	4a1a      	ldr	r2, [pc, #104]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 80022c0:	f043 0301 	orr.w	r3, r3, #1
 80022c4:	6313      	str	r3, [r2, #48]	; 0x30
 80022c6:	4b18      	ldr	r3, [pc, #96]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 80022c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022d2:	2303      	movs	r3, #3
 80022d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022d6:	2302      	movs	r3, #2
 80022d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022da:	2300      	movs	r3, #0
 80022dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022de:	2300      	movs	r3, #0
 80022e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022e2:	2302      	movs	r3, #2
 80022e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022e6:	f107 0314 	add.w	r3, r7, #20
 80022ea:	4619      	mov	r1, r3
 80022ec:	480f      	ldr	r0, [pc, #60]	; (800232c <HAL_TIM_PWM_MspInit+0xb4>)
 80022ee:	f001 fce1 	bl	8003cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80022f2:	e012      	b.n	800231a <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM12)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a0d      	ldr	r2, [pc, #52]	; (8002330 <HAL_TIM_PWM_MspInit+0xb8>)
 80022fa:	4293      	cmp	r3, r2
 80022fc:	d10d      	bne.n	800231a <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022fe:	2300      	movs	r3, #0
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	4b09      	ldr	r3, [pc, #36]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 8002304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002306:	4a08      	ldr	r2, [pc, #32]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 8002308:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800230c:	6413      	str	r3, [r2, #64]	; 0x40
 800230e:	4b06      	ldr	r3, [pc, #24]	; (8002328 <HAL_TIM_PWM_MspInit+0xb0>)
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
}
 800231a:	bf00      	nop
 800231c:	3728      	adds	r7, #40	; 0x28
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
 8002322:	bf00      	nop
 8002324:	40000c00 	.word	0x40000c00
 8002328:	40023800 	.word	0x40023800
 800232c:	40020000 	.word	0x40020000
 8002330:	40001800 	.word	0x40001800

08002334 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b08e      	sub	sp, #56	; 0x38
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800233c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002340:	2200      	movs	r2, #0
 8002342:	601a      	str	r2, [r3, #0]
 8002344:	605a      	str	r2, [r3, #4]
 8002346:	609a      	str	r2, [r3, #8]
 8002348:	60da      	str	r2, [r3, #12]
 800234a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	4a6a      	ldr	r2, [pc, #424]	; (80024fc <HAL_TIM_MspPostInit+0x1c8>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d13c      	bne.n	80023d0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	623b      	str	r3, [r7, #32]
 800235a:	4b69      	ldr	r3, [pc, #420]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a68      	ldr	r2, [pc, #416]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b66      	ldr	r3, [pc, #408]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	623b      	str	r3, [r7, #32]
 8002370:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	61fb      	str	r3, [r7, #28]
 8002376:	4b62      	ldr	r3, [pc, #392]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a61      	ldr	r2, [pc, #388]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 800237c:	f043 0302 	orr.w	r3, r3, #2
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b5f      	ldr	r3, [pc, #380]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0302 	and.w	r3, r3, #2
 800238a:	61fb      	str	r3, [r7, #28]
 800238c:	69fb      	ldr	r3, [r7, #28]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800238e:	23c0      	movs	r3, #192	; 0xc0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002392:	2302      	movs	r3, #2
 8002394:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002396:	2300      	movs	r3, #0
 8002398:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800239a:	2300      	movs	r3, #0
 800239c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800239e:	2302      	movs	r3, #2
 80023a0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023a6:	4619      	mov	r1, r3
 80023a8:	4856      	ldr	r0, [pc, #344]	; (8002504 <HAL_TIM_MspPostInit+0x1d0>)
 80023aa:	f001 fc83 	bl	8003cb4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ae:	2303      	movs	r3, #3
 80023b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023b2:	2302      	movs	r3, #2
 80023b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b6:	2300      	movs	r3, #0
 80023b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ba:	2300      	movs	r3, #0
 80023bc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023be:	2302      	movs	r3, #2
 80023c0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c6:	4619      	mov	r1, r3
 80023c8:	484f      	ldr	r0, [pc, #316]	; (8002508 <HAL_TIM_MspPostInit+0x1d4>)
 80023ca:	f001 fc73 	bl	8003cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023ce:	e091      	b.n	80024f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	4a4d      	ldr	r2, [pc, #308]	; (800250c <HAL_TIM_MspPostInit+0x1d8>)
 80023d6:	4293      	cmp	r3, r2
 80023d8:	d11f      	bne.n	800241a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023da:	2300      	movs	r3, #0
 80023dc:	61bb      	str	r3, [r7, #24]
 80023de:	4b48      	ldr	r3, [pc, #288]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 80023e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e2:	4a47      	ldr	r2, [pc, #284]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 80023e4:	f043 0308 	orr.w	r3, r3, #8
 80023e8:	6313      	str	r3, [r2, #48]	; 0x30
 80023ea:	4b45      	ldr	r3, [pc, #276]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 80023ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ee:	f003 0308 	and.w	r3, r3, #8
 80023f2:	61bb      	str	r3, [r7, #24]
 80023f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023f6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80023fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023fc:	2302      	movs	r3, #2
 80023fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002400:	2300      	movs	r3, #0
 8002402:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002404:	2300      	movs	r3, #0
 8002406:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002408:	2302      	movs	r3, #2
 800240a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800240c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002410:	4619      	mov	r1, r3
 8002412:	483f      	ldr	r0, [pc, #252]	; (8002510 <HAL_TIM_MspPostInit+0x1dc>)
 8002414:	f001 fc4e 	bl	8003cb4 <HAL_GPIO_Init>
}
 8002418:	e06c      	b.n	80024f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	4a3d      	ldr	r2, [pc, #244]	; (8002514 <HAL_TIM_MspPostInit+0x1e0>)
 8002420:	4293      	cmp	r3, r2
 8002422:	d11e      	bne.n	8002462 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002424:	2300      	movs	r3, #0
 8002426:	617b      	str	r3, [r7, #20]
 8002428:	4b35      	ldr	r3, [pc, #212]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 800242a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800242c:	4a34      	ldr	r2, [pc, #208]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 800242e:	f043 0301 	orr.w	r3, r3, #1
 8002432:	6313      	str	r3, [r2, #48]	; 0x30
 8002434:	4b32      	ldr	r3, [pc, #200]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 8002436:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002438:	f003 0301 	and.w	r3, r3, #1
 800243c:	617b      	str	r3, [r7, #20]
 800243e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002440:	230c      	movs	r3, #12
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002444:	2302      	movs	r3, #2
 8002446:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800244c:	2300      	movs	r3, #0
 800244e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002450:	2302      	movs	r3, #2
 8002452:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002454:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002458:	4619      	mov	r1, r3
 800245a:	482a      	ldr	r0, [pc, #168]	; (8002504 <HAL_TIM_MspPostInit+0x1d0>)
 800245c:	f001 fc2a 	bl	8003cb4 <HAL_GPIO_Init>
}
 8002460:	e048      	b.n	80024f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a2c      	ldr	r2, [pc, #176]	; (8002518 <HAL_TIM_MspPostInit+0x1e4>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d11f      	bne.n	80024ac <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800246c:	2300      	movs	r3, #0
 800246e:	613b      	str	r3, [r7, #16]
 8002470:	4b23      	ldr	r3, [pc, #140]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002474:	4a22      	ldr	r2, [pc, #136]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 8002476:	f043 0304 	orr.w	r3, r3, #4
 800247a:	6313      	str	r3, [r2, #48]	; 0x30
 800247c:	4b20      	ldr	r3, [pc, #128]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 800247e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002480:	f003 0304 	and.w	r3, r3, #4
 8002484:	613b      	str	r3, [r7, #16]
 8002486:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002488:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800248e:	2302      	movs	r3, #2
 8002490:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002492:	2300      	movs	r3, #0
 8002494:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002496:	2300      	movs	r3, #0
 8002498:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800249a:	2303      	movs	r3, #3
 800249c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800249e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024a2:	4619      	mov	r1, r3
 80024a4:	481d      	ldr	r0, [pc, #116]	; (800251c <HAL_TIM_MspPostInit+0x1e8>)
 80024a6:	f001 fc05 	bl	8003cb4 <HAL_GPIO_Init>
}
 80024aa:	e023      	b.n	80024f4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a1b      	ldr	r2, [pc, #108]	; (8002520 <HAL_TIM_MspPostInit+0x1ec>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d11e      	bne.n	80024f4 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b11      	ldr	r3, [pc, #68]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 80024bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024be:	4a10      	ldr	r2, [pc, #64]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	6313      	str	r3, [r2, #48]	; 0x30
 80024c6:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <HAL_TIM_MspPostInit+0x1cc>)
 80024c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ca:	f003 0302 	and.w	r3, r3, #2
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024d2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d8:	2302      	movs	r3, #2
 80024da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024dc:	2300      	movs	r3, #0
 80024de:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e0:	2300      	movs	r3, #0
 80024e2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024e4:	2309      	movs	r3, #9
 80024e6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024ec:	4619      	mov	r1, r3
 80024ee:	4806      	ldr	r0, [pc, #24]	; (8002508 <HAL_TIM_MspPostInit+0x1d4>)
 80024f0:	f001 fbe0 	bl	8003cb4 <HAL_GPIO_Init>
}
 80024f4:	bf00      	nop
 80024f6:	3738      	adds	r7, #56	; 0x38
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd80      	pop	{r7, pc}
 80024fc:	40000400 	.word	0x40000400
 8002500:	40023800 	.word	0x40023800
 8002504:	40020000 	.word	0x40020000
 8002508:	40020400 	.word	0x40020400
 800250c:	40000800 	.word	0x40000800
 8002510:	40020c00 	.word	0x40020c00
 8002514:	40000c00 	.word	0x40000c00
 8002518:	40010400 	.word	0x40010400
 800251c:	40020800 	.word	0x40020800
 8002520:	40001800 	.word	0x40001800

08002524 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b092      	sub	sp, #72	; 0x48
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a91      	ldr	r2, [pc, #580]	; (8002788 <HAL_UART_MspInit+0x264>)
 8002542:	4293      	cmp	r3, r2
 8002544:	d12d      	bne.n	80025a2 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002546:	2300      	movs	r3, #0
 8002548:	633b      	str	r3, [r7, #48]	; 0x30
 800254a:	4b90      	ldr	r3, [pc, #576]	; (800278c <HAL_UART_MspInit+0x268>)
 800254c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254e:	4a8f      	ldr	r2, [pc, #572]	; (800278c <HAL_UART_MspInit+0x268>)
 8002550:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002554:	6413      	str	r3, [r2, #64]	; 0x40
 8002556:	4b8d      	ldr	r3, [pc, #564]	; (800278c <HAL_UART_MspInit+0x268>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800255a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800255e:	633b      	str	r3, [r7, #48]	; 0x30
 8002560:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002566:	4b89      	ldr	r3, [pc, #548]	; (800278c <HAL_UART_MspInit+0x268>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a88      	ldr	r2, [pc, #544]	; (800278c <HAL_UART_MspInit+0x268>)
 800256c:	f043 0304 	orr.w	r3, r3, #4
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b86      	ldr	r3, [pc, #536]	; (800278c <HAL_UART_MspInit+0x268>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0304 	and.w	r3, r3, #4
 800257a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800257c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800257e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002582:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002588:	2301      	movs	r3, #1
 800258a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800258c:	2303      	movs	r3, #3
 800258e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002590:	2308      	movs	r3, #8
 8002592:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002594:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002598:	4619      	mov	r1, r3
 800259a:	487d      	ldr	r0, [pc, #500]	; (8002790 <HAL_UART_MspInit+0x26c>)
 800259c:	f001 fb8a 	bl	8003cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80025a0:	e1a3      	b.n	80028ea <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==UART5)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a7b      	ldr	r2, [pc, #492]	; (8002794 <HAL_UART_MspInit+0x270>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	f040 8083 	bne.w	80026b4 <HAL_UART_MspInit+0x190>
    __HAL_RCC_UART5_CLK_ENABLE();
 80025ae:	2300      	movs	r3, #0
 80025b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b2:	4b76      	ldr	r3, [pc, #472]	; (800278c <HAL_UART_MspInit+0x268>)
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	4a75      	ldr	r2, [pc, #468]	; (800278c <HAL_UART_MspInit+0x268>)
 80025b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025bc:	6413      	str	r3, [r2, #64]	; 0x40
 80025be:	4b73      	ldr	r3, [pc, #460]	; (800278c <HAL_UART_MspInit+0x268>)
 80025c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ca:	2300      	movs	r3, #0
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
 80025ce:	4b6f      	ldr	r3, [pc, #444]	; (800278c <HAL_UART_MspInit+0x268>)
 80025d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025d2:	4a6e      	ldr	r2, [pc, #440]	; (800278c <HAL_UART_MspInit+0x268>)
 80025d4:	f043 0304 	orr.w	r3, r3, #4
 80025d8:	6313      	str	r3, [r2, #48]	; 0x30
 80025da:	4b6c      	ldr	r3, [pc, #432]	; (800278c <HAL_UART_MspInit+0x268>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	f003 0304 	and.w	r3, r3, #4
 80025e2:	627b      	str	r3, [r7, #36]	; 0x24
 80025e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
 80025ea:	4b68      	ldr	r3, [pc, #416]	; (800278c <HAL_UART_MspInit+0x268>)
 80025ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ee:	4a67      	ldr	r2, [pc, #412]	; (800278c <HAL_UART_MspInit+0x268>)
 80025f0:	f043 0308 	orr.w	r3, r3, #8
 80025f4:	6313      	str	r3, [r2, #48]	; 0x30
 80025f6:	4b65      	ldr	r3, [pc, #404]	; (800278c <HAL_UART_MspInit+0x268>)
 80025f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fa:	f003 0308 	and.w	r3, r3, #8
 80025fe:	623b      	str	r3, [r7, #32]
 8002600:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002602:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002606:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002608:	2302      	movs	r3, #2
 800260a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800260c:	2301      	movs	r3, #1
 800260e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002610:	2303      	movs	r3, #3
 8002612:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002614:	2308      	movs	r3, #8
 8002616:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002618:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800261c:	4619      	mov	r1, r3
 800261e:	485c      	ldr	r0, [pc, #368]	; (8002790 <HAL_UART_MspInit+0x26c>)
 8002620:	f001 fb48 	bl	8003cb4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002624:	2304      	movs	r3, #4
 8002626:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002628:	2302      	movs	r3, #2
 800262a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800262c:	2301      	movs	r3, #1
 800262e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002630:	2303      	movs	r3, #3
 8002632:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002634:	2308      	movs	r3, #8
 8002636:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002638:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800263c:	4619      	mov	r1, r3
 800263e:	4856      	ldr	r0, [pc, #344]	; (8002798 <HAL_UART_MspInit+0x274>)
 8002640:	f001 fb38 	bl	8003cb4 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002644:	4b55      	ldr	r3, [pc, #340]	; (800279c <HAL_UART_MspInit+0x278>)
 8002646:	4a56      	ldr	r2, [pc, #344]	; (80027a0 <HAL_UART_MspInit+0x27c>)
 8002648:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800264a:	4b54      	ldr	r3, [pc, #336]	; (800279c <HAL_UART_MspInit+0x278>)
 800264c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002650:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002652:	4b52      	ldr	r3, [pc, #328]	; (800279c <HAL_UART_MspInit+0x278>)
 8002654:	2200      	movs	r2, #0
 8002656:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002658:	4b50      	ldr	r3, [pc, #320]	; (800279c <HAL_UART_MspInit+0x278>)
 800265a:	2200      	movs	r2, #0
 800265c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800265e:	4b4f      	ldr	r3, [pc, #316]	; (800279c <HAL_UART_MspInit+0x278>)
 8002660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002664:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002666:	4b4d      	ldr	r3, [pc, #308]	; (800279c <HAL_UART_MspInit+0x278>)
 8002668:	2200      	movs	r2, #0
 800266a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800266c:	4b4b      	ldr	r3, [pc, #300]	; (800279c <HAL_UART_MspInit+0x278>)
 800266e:	2200      	movs	r2, #0
 8002670:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002672:	4b4a      	ldr	r3, [pc, #296]	; (800279c <HAL_UART_MspInit+0x278>)
 8002674:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002678:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800267a:	4b48      	ldr	r3, [pc, #288]	; (800279c <HAL_UART_MspInit+0x278>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002680:	4b46      	ldr	r3, [pc, #280]	; (800279c <HAL_UART_MspInit+0x278>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002686:	4845      	ldr	r0, [pc, #276]	; (800279c <HAL_UART_MspInit+0x278>)
 8002688:	f000 ff06 	bl	8003498 <HAL_DMA_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002692:	f7fe ffe5 	bl	8001660 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a40      	ldr	r2, [pc, #256]	; (800279c <HAL_UART_MspInit+0x278>)
 800269a:	639a      	str	r2, [r3, #56]	; 0x38
 800269c:	4a3f      	ldr	r2, [pc, #252]	; (800279c <HAL_UART_MspInit+0x278>)
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80026a2:	2200      	movs	r2, #0
 80026a4:	2100      	movs	r1, #0
 80026a6:	2035      	movs	r0, #53	; 0x35
 80026a8:	f000 fecc 	bl	8003444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80026ac:	2035      	movs	r0, #53	; 0x35
 80026ae:	f000 fee5 	bl	800347c <HAL_NVIC_EnableIRQ>
}
 80026b2:	e11a      	b.n	80028ea <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==USART1)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a3a      	ldr	r2, [pc, #232]	; (80027a4 <HAL_UART_MspInit+0x280>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d17a      	bne.n	80027b4 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	61fb      	str	r3, [r7, #28]
 80026c2:	4b32      	ldr	r3, [pc, #200]	; (800278c <HAL_UART_MspInit+0x268>)
 80026c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c6:	4a31      	ldr	r2, [pc, #196]	; (800278c <HAL_UART_MspInit+0x268>)
 80026c8:	f043 0310 	orr.w	r3, r3, #16
 80026cc:	6453      	str	r3, [r2, #68]	; 0x44
 80026ce:	4b2f      	ldr	r3, [pc, #188]	; (800278c <HAL_UART_MspInit+0x268>)
 80026d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d2:	f003 0310 	and.w	r3, r3, #16
 80026d6:	61fb      	str	r3, [r7, #28]
 80026d8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026da:	2300      	movs	r3, #0
 80026dc:	61bb      	str	r3, [r7, #24]
 80026de:	4b2b      	ldr	r3, [pc, #172]	; (800278c <HAL_UART_MspInit+0x268>)
 80026e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026e2:	4a2a      	ldr	r2, [pc, #168]	; (800278c <HAL_UART_MspInit+0x268>)
 80026e4:	f043 0301 	orr.w	r3, r3, #1
 80026e8:	6313      	str	r3, [r2, #48]	; 0x30
 80026ea:	4b28      	ldr	r3, [pc, #160]	; (800278c <HAL_UART_MspInit+0x268>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	f003 0301 	and.w	r3, r3, #1
 80026f2:	61bb      	str	r3, [r7, #24]
 80026f4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026f6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026fa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026fc:	2302      	movs	r3, #2
 80026fe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002700:	2300      	movs	r3, #0
 8002702:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002704:	2303      	movs	r3, #3
 8002706:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002708:	2307      	movs	r3, #7
 800270a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800270c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002710:	4619      	mov	r1, r3
 8002712:	4825      	ldr	r0, [pc, #148]	; (80027a8 <HAL_UART_MspInit+0x284>)
 8002714:	f001 face 	bl	8003cb4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002718:	4b24      	ldr	r3, [pc, #144]	; (80027ac <HAL_UART_MspInit+0x288>)
 800271a:	4a25      	ldr	r2, [pc, #148]	; (80027b0 <HAL_UART_MspInit+0x28c>)
 800271c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800271e:	4b23      	ldr	r3, [pc, #140]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002720:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002724:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002726:	4b21      	ldr	r3, [pc, #132]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002728:	2200      	movs	r2, #0
 800272a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800272c:	4b1f      	ldr	r3, [pc, #124]	; (80027ac <HAL_UART_MspInit+0x288>)
 800272e:	2200      	movs	r2, #0
 8002730:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002732:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002734:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002738:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800273a:	4b1c      	ldr	r3, [pc, #112]	; (80027ac <HAL_UART_MspInit+0x288>)
 800273c:	2200      	movs	r2, #0
 800273e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002740:	4b1a      	ldr	r3, [pc, #104]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002742:	2200      	movs	r2, #0
 8002744:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002746:	4b19      	ldr	r3, [pc, #100]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800274c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002750:	2200      	movs	r2, #0
 8002752:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002754:	4b15      	ldr	r3, [pc, #84]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002756:	2200      	movs	r2, #0
 8002758:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800275a:	4814      	ldr	r0, [pc, #80]	; (80027ac <HAL_UART_MspInit+0x288>)
 800275c:	f000 fe9c 	bl	8003498 <HAL_DMA_Init>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d001      	beq.n	800276a <HAL_UART_MspInit+0x246>
      Error_Handler();
 8002766:	f7fe ff7b 	bl	8001660 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a0f      	ldr	r2, [pc, #60]	; (80027ac <HAL_UART_MspInit+0x288>)
 800276e:	639a      	str	r2, [r3, #56]	; 0x38
 8002770:	4a0e      	ldr	r2, [pc, #56]	; (80027ac <HAL_UART_MspInit+0x288>)
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002776:	2200      	movs	r2, #0
 8002778:	2100      	movs	r1, #0
 800277a:	2025      	movs	r0, #37	; 0x25
 800277c:	f000 fe62 	bl	8003444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002780:	2025      	movs	r0, #37	; 0x25
 8002782:	f000 fe7b 	bl	800347c <HAL_NVIC_EnableIRQ>
}
 8002786:	e0b0      	b.n	80028ea <HAL_UART_MspInit+0x3c6>
 8002788:	40004c00 	.word	0x40004c00
 800278c:	40023800 	.word	0x40023800
 8002790:	40020800 	.word	0x40020800
 8002794:	40005000 	.word	0x40005000
 8002798:	40020c00 	.word	0x40020c00
 800279c:	200007b4 	.word	0x200007b4
 80027a0:	40026010 	.word	0x40026010
 80027a4:	40011000 	.word	0x40011000
 80027a8:	40020000 	.word	0x40020000
 80027ac:	200005a0 	.word	0x200005a0
 80027b0:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4a4e      	ldr	r2, [pc, #312]	; (80028f4 <HAL_UART_MspInit+0x3d0>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d163      	bne.n	8002886 <HAL_UART_MspInit+0x362>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027be:	2300      	movs	r3, #0
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	4b4d      	ldr	r3, [pc, #308]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80027c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c6:	4a4c      	ldr	r2, [pc, #304]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80027c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027cc:	6413      	str	r3, [r2, #64]	; 0x40
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80027d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d6:	617b      	str	r3, [r7, #20]
 80027d8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	613b      	str	r3, [r7, #16]
 80027de:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80027e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e2:	4a45      	ldr	r2, [pc, #276]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80027e4:	f043 0308 	orr.w	r3, r3, #8
 80027e8:	6313      	str	r3, [r2, #48]	; 0x30
 80027ea:	4b43      	ldr	r3, [pc, #268]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80027ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ee:	f003 0308 	and.w	r3, r3, #8
 80027f2:	613b      	str	r3, [r7, #16]
 80027f4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027f6:	2360      	movs	r3, #96	; 0x60
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027fa:	2302      	movs	r3, #2
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027fe:	2300      	movs	r3, #0
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002802:	2303      	movs	r3, #3
 8002804:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002806:	2307      	movs	r3, #7
 8002808:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800280a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800280e:	4619      	mov	r1, r3
 8002810:	483a      	ldr	r0, [pc, #232]	; (80028fc <HAL_UART_MspInit+0x3d8>)
 8002812:	f001 fa4f 	bl	8003cb4 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002816:	4b3a      	ldr	r3, [pc, #232]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 8002818:	4a3a      	ldr	r2, [pc, #232]	; (8002904 <HAL_UART_MspInit+0x3e0>)
 800281a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800281c:	4b38      	ldr	r3, [pc, #224]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 800281e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002822:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002824:	4b36      	ldr	r3, [pc, #216]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800282a:	4b35      	ldr	r3, [pc, #212]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 800282c:	2200      	movs	r2, #0
 800282e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002830:	4b33      	ldr	r3, [pc, #204]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 8002832:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002836:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002838:	4b31      	ldr	r3, [pc, #196]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 800283a:	2200      	movs	r2, #0
 800283c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800283e:	4b30      	ldr	r3, [pc, #192]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 8002840:	2200      	movs	r2, #0
 8002842:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002844:	4b2e      	ldr	r3, [pc, #184]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 8002846:	f44f 7280 	mov.w	r2, #256	; 0x100
 800284a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800284c:	4b2c      	ldr	r3, [pc, #176]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 800284e:	2200      	movs	r2, #0
 8002850:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002852:	4b2b      	ldr	r3, [pc, #172]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 8002854:	2200      	movs	r2, #0
 8002856:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002858:	4829      	ldr	r0, [pc, #164]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 800285a:	f000 fe1d 	bl	8003498 <HAL_DMA_Init>
 800285e:	4603      	mov	r3, r0
 8002860:	2b00      	cmp	r3, #0
 8002862:	d001      	beq.n	8002868 <HAL_UART_MspInit+0x344>
      Error_Handler();
 8002864:	f7fe fefc 	bl	8001660 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	4a25      	ldr	r2, [pc, #148]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 800286c:	639a      	str	r2, [r3, #56]	; 0x38
 800286e:	4a24      	ldr	r2, [pc, #144]	; (8002900 <HAL_UART_MspInit+0x3dc>)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002874:	2200      	movs	r2, #0
 8002876:	2100      	movs	r1, #0
 8002878:	2026      	movs	r0, #38	; 0x26
 800287a:	f000 fde3 	bl	8003444 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800287e:	2026      	movs	r0, #38	; 0x26
 8002880:	f000 fdfc 	bl	800347c <HAL_NVIC_EnableIRQ>
}
 8002884:	e031      	b.n	80028ea <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==USART3)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a1f      	ldr	r2, [pc, #124]	; (8002908 <HAL_UART_MspInit+0x3e4>)
 800288c:	4293      	cmp	r3, r2
 800288e:	d12c      	bne.n	80028ea <HAL_UART_MspInit+0x3c6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002890:	2300      	movs	r3, #0
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	4b18      	ldr	r3, [pc, #96]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 8002896:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002898:	4a17      	ldr	r2, [pc, #92]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 800289a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800289e:	6413      	str	r3, [r2, #64]	; 0x40
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80028a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028a8:	60fb      	str	r3, [r7, #12]
 80028aa:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028ac:	2300      	movs	r3, #0
 80028ae:	60bb      	str	r3, [r7, #8]
 80028b0:	4b11      	ldr	r3, [pc, #68]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80028b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b4:	4a10      	ldr	r2, [pc, #64]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80028b6:	f043 0302 	orr.w	r3, r3, #2
 80028ba:	6313      	str	r3, [r2, #48]	; 0x30
 80028bc:	4b0e      	ldr	r3, [pc, #56]	; (80028f8 <HAL_UART_MspInit+0x3d4>)
 80028be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	60bb      	str	r3, [r7, #8]
 80028c6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028c8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028cc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028ce:	2302      	movs	r3, #2
 80028d0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028d2:	2300      	movs	r3, #0
 80028d4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028d6:	2303      	movs	r3, #3
 80028d8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028da:	2307      	movs	r3, #7
 80028dc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028de:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028e2:	4619      	mov	r1, r3
 80028e4:	4809      	ldr	r0, [pc, #36]	; (800290c <HAL_UART_MspInit+0x3e8>)
 80028e6:	f001 f9e5 	bl	8003cb4 <HAL_GPIO_Init>
}
 80028ea:	bf00      	nop
 80028ec:	3748      	adds	r7, #72	; 0x48
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40004400 	.word	0x40004400
 80028f8:	40023800 	.word	0x40023800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	20000350 	.word	0x20000350
 8002904:	40026088 	.word	0x40026088
 8002908:	40004800 	.word	0x40004800
 800290c:	40020400 	.word	0x40020400

08002910 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002910:	b580      	push	{r7, lr}
 8002912:	b08c      	sub	sp, #48	; 0x30
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002918:	2300      	movs	r3, #0
 800291a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800291c:	2300      	movs	r3, #0
 800291e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002920:	2200      	movs	r2, #0
 8002922:	6879      	ldr	r1, [r7, #4]
 8002924:	2037      	movs	r0, #55	; 0x37
 8002926:	f000 fd8d 	bl	8003444 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800292a:	2037      	movs	r0, #55	; 0x37
 800292c:	f000 fda6 	bl	800347c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002930:	2300      	movs	r3, #0
 8002932:	60fb      	str	r3, [r7, #12]
 8002934:	4b1f      	ldr	r3, [pc, #124]	; (80029b4 <HAL_InitTick+0xa4>)
 8002936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002938:	4a1e      	ldr	r2, [pc, #120]	; (80029b4 <HAL_InitTick+0xa4>)
 800293a:	f043 0320 	orr.w	r3, r3, #32
 800293e:	6413      	str	r3, [r2, #64]	; 0x40
 8002940:	4b1c      	ldr	r3, [pc, #112]	; (80029b4 <HAL_InitTick+0xa4>)
 8002942:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002944:	f003 0320 	and.w	r3, r3, #32
 8002948:	60fb      	str	r3, [r7, #12]
 800294a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800294c:	f107 0210 	add.w	r2, r7, #16
 8002950:	f107 0314 	add.w	r3, r7, #20
 8002954:	4611      	mov	r1, r2
 8002956:	4618      	mov	r0, r3
 8002958:	f001 ffd6 	bl	8004908 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800295c:	f001 ffac 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8002960:	4603      	mov	r3, r0
 8002962:	005b      	lsls	r3, r3, #1
 8002964:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002968:	4a13      	ldr	r2, [pc, #76]	; (80029b8 <HAL_InitTick+0xa8>)
 800296a:	fba2 2303 	umull	r2, r3, r2, r3
 800296e:	0c9b      	lsrs	r3, r3, #18
 8002970:	3b01      	subs	r3, #1
 8002972:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002974:	4b11      	ldr	r3, [pc, #68]	; (80029bc <HAL_InitTick+0xac>)
 8002976:	4a12      	ldr	r2, [pc, #72]	; (80029c0 <HAL_InitTick+0xb0>)
 8002978:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800297a:	4b10      	ldr	r3, [pc, #64]	; (80029bc <HAL_InitTick+0xac>)
 800297c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002980:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002982:	4a0e      	ldr	r2, [pc, #56]	; (80029bc <HAL_InitTick+0xac>)
 8002984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002986:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002988:	4b0c      	ldr	r3, [pc, #48]	; (80029bc <HAL_InitTick+0xac>)
 800298a:	2200      	movs	r2, #0
 800298c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800298e:	4b0b      	ldr	r3, [pc, #44]	; (80029bc <HAL_InitTick+0xac>)
 8002990:	2200      	movs	r2, #0
 8002992:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002994:	4809      	ldr	r0, [pc, #36]	; (80029bc <HAL_InitTick+0xac>)
 8002996:	f002 fa79 	bl	8004e8c <HAL_TIM_Base_Init>
 800299a:	4603      	mov	r3, r0
 800299c:	2b00      	cmp	r3, #0
 800299e:	d104      	bne.n	80029aa <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 80029a0:	4806      	ldr	r0, [pc, #24]	; (80029bc <HAL_InitTick+0xac>)
 80029a2:	f002 fb2b 	bl	8004ffc <HAL_TIM_Base_Start_IT>
 80029a6:	4603      	mov	r3, r0
 80029a8:	e000      	b.n	80029ac <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
}
 80029ac:	4618      	mov	r0, r3
 80029ae:	3730      	adds	r7, #48	; 0x30
 80029b0:	46bd      	mov	sp, r7
 80029b2:	bd80      	pop	{r7, pc}
 80029b4:	40023800 	.word	0x40023800
 80029b8:	431bde83 	.word	0x431bde83
 80029bc:	20000c7c 	.word	0x20000c7c
 80029c0:	40001400 	.word	0x40001400

080029c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c4:	b480      	push	{r7}
 80029c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029c8:	e7fe      	b.n	80029c8 <NMI_Handler+0x4>

080029ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ca:	b480      	push	{r7}
 80029cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029ce:	e7fe      	b.n	80029ce <HardFault_Handler+0x4>

080029d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029d4:	e7fe      	b.n	80029d4 <MemManage_Handler+0x4>

080029d6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029d6:	b480      	push	{r7}
 80029d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029da:	e7fe      	b.n	80029da <BusFault_Handler+0x4>

080029dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029dc:	b480      	push	{r7}
 80029de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029e0:	e7fe      	b.n	80029e0 <UsageFault_Handler+0x4>

080029e2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029e2:	b480      	push	{r7}
 80029e4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr
	...

08002a1c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a1c:	b580      	push	{r7, lr}
 8002a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002a20:	4802      	ldr	r0, [pc, #8]	; (8002a2c <DMA1_Stream0_IRQHandler+0x10>)
 8002a22:	f000 fed1 	bl	80037c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a26:	bf00      	nop
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	200007b4 	.word	0x200007b4

08002a30 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a34:	4802      	ldr	r0, [pc, #8]	; (8002a40 <DMA1_Stream5_IRQHandler+0x10>)
 8002a36:	f000 fec7 	bl	80037c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a3a:	bf00      	nop
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000350 	.word	0x20000350

08002a44 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a48:	4802      	ldr	r0, [pc, #8]	; (8002a54 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a4a:	f002 fc5f 	bl	800530c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a4e:	bf00      	nop
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	bf00      	nop
 8002a54:	20000644 	.word	0x20000644

08002a58 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	extern unsigned char remoteBuffer[32];
	    if(USART1->SR & 0x10)
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <USART1_IRQHandler+0x60>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0310 	and.w	r3, r3, #16
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d01f      	beq.n	8002aaa <USART1_IRQHandler+0x52>
	    {
	        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
 8002a6e:	4b13      	ldr	r3, [pc, #76]	; (8002abc <USART1_IRQHandler+0x64>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	607b      	str	r3, [r7, #4]
 8002a76:	4b11      	ldr	r3, [pc, #68]	; (8002abc <USART1_IRQHandler+0x64>)
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	685b      	ldr	r3, [r3, #4]
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	687b      	ldr	r3, [r7, #4]
	        HAL_UART_AbortReceive(&huart1);
 8002a80:	480e      	ldr	r0, [pc, #56]	; (8002abc <USART1_IRQHandler+0x64>)
 8002a82:	f003 fc3b 	bl	80062fc <HAL_UART_AbortReceive>
	        HAL_UART_Receive_DMA(&huart1, remoteBuffer+16, 25);
 8002a86:	4b0e      	ldr	r3, [pc, #56]	; (8002ac0 <USART1_IRQHandler+0x68>)
 8002a88:	2219      	movs	r2, #25
 8002a8a:	4619      	mov	r1, r3
 8002a8c:	480b      	ldr	r0, [pc, #44]	; (8002abc <USART1_IRQHandler+0x64>)
 8002a8e:	f003 fc05 	bl	800629c <HAL_UART_Receive_DMA>
	        if (0x5a == remoteBuffer[16]&&0xa5 == remoteBuffer[17])
 8002a92:	4b0c      	ldr	r3, [pc, #48]	; (8002ac4 <USART1_IRQHandler+0x6c>)
 8002a94:	7c1b      	ldrb	r3, [r3, #16]
 8002a96:	2b5a      	cmp	r3, #90	; 0x5a
 8002a98:	d107      	bne.n	8002aaa <USART1_IRQHandler+0x52>
 8002a9a:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <USART1_IRQHandler+0x6c>)
 8002a9c:	7c5b      	ldrb	r3, [r3, #17]
 8002a9e:	2ba5      	cmp	r3, #165	; 0xa5
 8002aa0:	d103      	bne.n	8002aaa <USART1_IRQHandler+0x52>
	        {
	        	void remote(uint8_t * remoteBuffer);

	        	remote(remoteBuffer + 16);
 8002aa2:	4b07      	ldr	r3, [pc, #28]	; (8002ac0 <USART1_IRQHandler+0x68>)
 8002aa4:	4618      	mov	r0, r3
 8002aa6:	f7ff f9e1 	bl	8001e6c <remote>
	        }
	    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002aaa:	4804      	ldr	r0, [pc, #16]	; (8002abc <USART1_IRQHandler+0x64>)
 8002aac:	f003 fc82 	bl	80063b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	3708      	adds	r7, #8
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	bd80      	pop	{r7, pc}
 8002ab8:	40011000 	.word	0x40011000
 8002abc:	20000600 	.word	0x20000600
 8002ac0:	20000290 	.word	0x20000290
 8002ac4:	20000280 	.word	0x20000280

08002ac8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b082      	sub	sp, #8
 8002acc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern unsigned char ch110[82];
    if(USART2->SR & 0x10)
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <USART2_IRQHandler+0x50>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d016      	beq.n	8002b08 <USART2_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002ada:	2300      	movs	r3, #0
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <USART2_IRQHandler+0x54>)
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	607b      	str	r3, [r7, #4]
 8002ae6:	4b0d      	ldr	r3, [pc, #52]	; (8002b1c <USART2_IRQHandler+0x54>)
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	607b      	str	r3, [r7, #4]
 8002aee:	687b      	ldr	r3, [r7, #4]
        if(ch110[0] != 0x5a)
 8002af0:	4b0b      	ldr	r3, [pc, #44]	; (8002b20 <USART2_IRQHandler+0x58>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b5a      	cmp	r3, #90	; 0x5a
 8002af6:	d007      	beq.n	8002b08 <USART2_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart2);
 8002af8:	4808      	ldr	r0, [pc, #32]	; (8002b1c <USART2_IRQHandler+0x54>)
 8002afa:	f003 fbff 	bl	80062fc <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart2, ch110, 82);
 8002afe:	2252      	movs	r2, #82	; 0x52
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <USART2_IRQHandler+0x58>)
 8002b02:	4806      	ldr	r0, [pc, #24]	; (8002b1c <USART2_IRQHandler+0x54>)
 8002b04:	f003 fbca 	bl	800629c <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002b08:	4804      	ldr	r0, [pc, #16]	; (8002b1c <USART2_IRQHandler+0x54>)
 8002b0a:	f003 fc53 	bl	80063b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002b0e:	bf00      	nop
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40004400 	.word	0x40004400
 8002b1c:	20000770 	.word	0x20000770
 8002b20:	200002f0 	.word	0x200002f0

08002b24 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b082      	sub	sp, #8
 8002b28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

    extern unsigned char remoteBuffer[32];
    if(UART5->SR & 0x10)
 8002b2a:	4b15      	ldr	r3, [pc, #84]	; (8002b80 <UART5_IRQHandler+0x5c>)
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f003 0310 	and.w	r3, r3, #16
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d01d      	beq.n	8002b72 <UART5_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8002b36:	2300      	movs	r3, #0
 8002b38:	607b      	str	r3, [r7, #4]
 8002b3a:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <UART5_IRQHandler+0x60>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	607b      	str	r3, [r7, #4]
 8002b42:	4b10      	ldr	r3, [pc, #64]	; (8002b84 <UART5_IRQHandler+0x60>)
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	607b      	str	r3, [r7, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart5);
 8002b4c:	480d      	ldr	r0, [pc, #52]	; (8002b84 <UART5_IRQHandler+0x60>)
 8002b4e:	f003 fbd5 	bl	80062fc <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart5, remoteBuffer, 25);
 8002b52:	2219      	movs	r2, #25
 8002b54:	490c      	ldr	r1, [pc, #48]	; (8002b88 <UART5_IRQHandler+0x64>)
 8002b56:	480b      	ldr	r0, [pc, #44]	; (8002b84 <UART5_IRQHandler+0x60>)
 8002b58:	f003 fba0 	bl	800629c <HAL_UART_Receive_DMA>
        if (0x5a == remoteBuffer[0]&&0xa5 == remoteBuffer[1])
 8002b5c:	4b0a      	ldr	r3, [pc, #40]	; (8002b88 <UART5_IRQHandler+0x64>)
 8002b5e:	781b      	ldrb	r3, [r3, #0]
 8002b60:	2b5a      	cmp	r3, #90	; 0x5a
 8002b62:	d106      	bne.n	8002b72 <UART5_IRQHandler+0x4e>
 8002b64:	4b08      	ldr	r3, [pc, #32]	; (8002b88 <UART5_IRQHandler+0x64>)
 8002b66:	785b      	ldrb	r3, [r3, #1]
 8002b68:	2ba5      	cmp	r3, #165	; 0xa5
 8002b6a:	d102      	bne.n	8002b72 <UART5_IRQHandler+0x4e>
        {
        	void remote(uint8_t * remoteBuffer);

        	remote(remoteBuffer);
 8002b6c:	4806      	ldr	r0, [pc, #24]	; (8002b88 <UART5_IRQHandler+0x64>)
 8002b6e:	f7ff f97d 	bl	8001e6c <remote>
        }
    }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002b72:	4804      	ldr	r0, [pc, #16]	; (8002b84 <UART5_IRQHandler+0x60>)
 8002b74:	f003 fc1e 	bl	80063b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002b78:	bf00      	nop
 8002b7a:	3708      	adds	r7, #8
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40005000 	.word	0x40005000
 8002b84:	20000514 	.word	0x20000514
 8002b88:	20000280 	.word	0x20000280

08002b8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b90:	4802      	ldr	r0, [pc, #8]	; (8002b9c <TIM7_IRQHandler+0x10>)
 8002b92:	f002 fbbb 	bl	800530c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	20000c7c 	.word	0x20000c7c

08002ba0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002ba4:	4802      	ldr	r0, [pc, #8]	; (8002bb0 <DMA2_Stream2_IRQHandler+0x10>)
 8002ba6:	f000 fe0f 	bl	80037c8 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200005a0 	.word	0x200005a0

08002bb4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b086      	sub	sp, #24
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bc0:	2300      	movs	r3, #0
 8002bc2:	617b      	str	r3, [r7, #20]
 8002bc4:	e00a      	b.n	8002bdc <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002bc6:	f3af 8000 	nop.w
 8002bca:	4601      	mov	r1, r0
 8002bcc:	68bb      	ldr	r3, [r7, #8]
 8002bce:	1c5a      	adds	r2, r3, #1
 8002bd0:	60ba      	str	r2, [r7, #8]
 8002bd2:	b2ca      	uxtb	r2, r1
 8002bd4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002bd6:	697b      	ldr	r3, [r7, #20]
 8002bd8:	3301      	adds	r3, #1
 8002bda:	617b      	str	r3, [r7, #20]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	429a      	cmp	r2, r3
 8002be2:	dbf0      	blt.n	8002bc6 <_read+0x12>
	}

return len;
 8002be4:	687b      	ldr	r3, [r7, #4]
}
 8002be6:	4618      	mov	r0, r3
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <_close>:
	}
	return len;
}

int _close(int file)
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
	return -1;
 8002bf6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c16:	605a      	str	r2, [r3, #4]
	return 0;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr

08002c26 <_isatty>:

int _isatty(int file)
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
	return 1;
 8002c2e:	2301      	movs	r3, #1
}
 8002c30:	4618      	mov	r0, r3
 8002c32:	370c      	adds	r7, #12
 8002c34:	46bd      	mov	sp, r7
 8002c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3a:	4770      	bx	lr

08002c3c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b085      	sub	sp, #20
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	60f8      	str	r0, [r7, #12]
 8002c44:	60b9      	str	r1, [r7, #8]
 8002c46:	607a      	str	r2, [r7, #4]
	return 0;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3714      	adds	r7, #20
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b086      	sub	sp, #24
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002c60:	4a14      	ldr	r2, [pc, #80]	; (8002cb4 <_sbrk+0x5c>)
 8002c62:	4b15      	ldr	r3, [pc, #84]	; (8002cb8 <_sbrk+0x60>)
 8002c64:	1ad3      	subs	r3, r2, r3
 8002c66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002c68:	697b      	ldr	r3, [r7, #20]
 8002c6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c6c:	4b13      	ldr	r3, [pc, #76]	; (8002cbc <_sbrk+0x64>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d102      	bne.n	8002c7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c74:	4b11      	ldr	r3, [pc, #68]	; (8002cbc <_sbrk+0x64>)
 8002c76:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <_sbrk+0x68>)
 8002c78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <_sbrk+0x64>)
 8002c7c:	681a      	ldr	r2, [r3, #0]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	4413      	add	r3, r2
 8002c82:	693a      	ldr	r2, [r7, #16]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d207      	bcs.n	8002c98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c88:	f004 f9dc 	bl	8007044 <__errno>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	220c      	movs	r2, #12
 8002c90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002c92:	f04f 33ff 	mov.w	r3, #4294967295
 8002c96:	e009      	b.n	8002cac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c98:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <_sbrk+0x64>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c9e:	4b07      	ldr	r3, [pc, #28]	; (8002cbc <_sbrk+0x64>)
 8002ca0:	681a      	ldr	r2, [r3, #0]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4413      	add	r3, r2
 8002ca6:	4a05      	ldr	r2, [pc, #20]	; (8002cbc <_sbrk+0x64>)
 8002ca8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002caa:	68fb      	ldr	r3, [r7, #12]
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3718      	adds	r7, #24
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}
 8002cb4:	20020000 	.word	0x20020000
 8002cb8:	00000400 	.word	0x00000400
 8002cbc:	200002c0 	.word	0x200002c0
 8002cc0:	20000cd8 	.word	0x20000cd8

08002cc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cc8:	4b08      	ldr	r3, [pc, #32]	; (8002cec <SystemInit+0x28>)
 8002cca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cce:	4a07      	ldr	r2, [pc, #28]	; (8002cec <SystemInit+0x28>)
 8002cd0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cd4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002cd8:	4b04      	ldr	r3, [pc, #16]	; (8002cec <SystemInit+0x28>)
 8002cda:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002cde:	609a      	str	r2, [r3, #8]
#endif
}
 8002ce0:	bf00      	nop
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce8:	4770      	bx	lr
 8002cea:	bf00      	nop
 8002cec:	e000ed00 	.word	0xe000ed00

08002cf0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002cf0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d28 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002cf4:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002cf6:	e003      	b.n	8002d00 <LoopCopyDataInit>

08002cf8 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002cf8:	4b0c      	ldr	r3, [pc, #48]	; (8002d2c <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002cfa:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002cfc:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002cfe:	3104      	adds	r1, #4

08002d00 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002d00:	480b      	ldr	r0, [pc, #44]	; (8002d30 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002d02:	4b0c      	ldr	r3, [pc, #48]	; (8002d34 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002d04:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002d06:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002d08:	d3f6      	bcc.n	8002cf8 <CopyDataInit>
  ldr  r2, =_sbss
 8002d0a:	4a0b      	ldr	r2, [pc, #44]	; (8002d38 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002d0c:	e002      	b.n	8002d14 <LoopFillZerobss>

08002d0e <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002d0e:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002d10:	f842 3b04 	str.w	r3, [r2], #4

08002d14 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002d14:	4b09      	ldr	r3, [pc, #36]	; (8002d3c <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002d16:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002d18:	d3f9      	bcc.n	8002d0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002d1a:	f7ff ffd3 	bl	8002cc4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002d1e:	f004 f997 	bl	8007050 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d22:	f7fd fdcb 	bl	80008bc <main>
  bx  lr    
 8002d26:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002d28:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002d2c:	08008564 	.word	0x08008564
  ldr  r0, =_sdata
 8002d30:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002d34:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8002d38:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8002d3c:	20000cd8 	.word	0x20000cd8

08002d40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d40:	e7fe      	b.n	8002d40 <ADC_IRQHandler>
	...

08002d44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d48:	4b0e      	ldr	r3, [pc, #56]	; (8002d84 <HAL_Init+0x40>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a0d      	ldr	r2, [pc, #52]	; (8002d84 <HAL_Init+0x40>)
 8002d4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_Init+0x40>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	4a0a      	ldr	r2, [pc, #40]	; (8002d84 <HAL_Init+0x40>)
 8002d5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d60:	4b08      	ldr	r3, [pc, #32]	; (8002d84 <HAL_Init+0x40>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a07      	ldr	r2, [pc, #28]	; (8002d84 <HAL_Init+0x40>)
 8002d66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d6c:	2003      	movs	r0, #3
 8002d6e:	f000 fb5e 	bl	800342e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d72:	2000      	movs	r0, #0
 8002d74:	f7ff fdcc 	bl	8002910 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d78:	f7ff f92c 	bl	8001fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023c00 	.word	0x40023c00

08002d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d8c:	4b06      	ldr	r3, [pc, #24]	; (8002da8 <HAL_IncTick+0x20>)
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	461a      	mov	r2, r3
 8002d92:	4b06      	ldr	r3, [pc, #24]	; (8002dac <HAL_IncTick+0x24>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	4413      	add	r3, r2
 8002d98:	4a04      	ldr	r2, [pc, #16]	; (8002dac <HAL_IncTick+0x24>)
 8002d9a:	6013      	str	r3, [r2, #0]
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	200001dc 	.word	0x200001dc
 8002dac:	20000cc4 	.word	0x20000cc4

08002db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002db0:	b480      	push	{r7}
 8002db2:	af00      	add	r7, sp, #0
  return uwTick;
 8002db4:	4b03      	ldr	r3, [pc, #12]	; (8002dc4 <HAL_GetTick+0x14>)
 8002db6:	681b      	ldr	r3, [r3, #0]
}
 8002db8:	4618      	mov	r0, r3
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	20000cc4 	.word	0x20000cc4

08002dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002dd0:	f7ff ffee 	bl	8002db0 <HAL_GetTick>
 8002dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de0:	d005      	beq.n	8002dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002de2:	4b0a      	ldr	r3, [pc, #40]	; (8002e0c <HAL_Delay+0x44>)
 8002de4:	781b      	ldrb	r3, [r3, #0]
 8002de6:	461a      	mov	r2, r3
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	4413      	add	r3, r2
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002dee:	bf00      	nop
 8002df0:	f7ff ffde 	bl	8002db0 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	68bb      	ldr	r3, [r7, #8]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	68fa      	ldr	r2, [r7, #12]
 8002dfc:	429a      	cmp	r2, r3
 8002dfe:	d8f7      	bhi.n	8002df0 <HAL_Delay+0x28>
  {
  }
}
 8002e00:	bf00      	nop
 8002e02:	bf00      	nop
 8002e04:	3710      	adds	r7, #16
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
 8002e0a:	bf00      	nop
 8002e0c:	200001dc 	.word	0x200001dc

08002e10 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e10:	b580      	push	{r7, lr}
 8002e12:	b084      	sub	sp, #16
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d101      	bne.n	8002e26 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e033      	b.n	8002e8e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d109      	bne.n	8002e42 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f7ff f8f8 	bl	8002024 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2200      	movs	r2, #0
 8002e38:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e46:	f003 0310 	and.w	r3, r3, #16
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d118      	bne.n	8002e80 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e52:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002e56:	f023 0302 	bic.w	r3, r3, #2
 8002e5a:	f043 0202 	orr.w	r2, r3, #2
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 f93a 	bl	80030dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2200      	movs	r2, #0
 8002e6c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e72:	f023 0303 	bic.w	r3, r3, #3
 8002e76:	f043 0201 	orr.w	r2, r3, #1
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e7e:	e001      	b.n	8002e84 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	2200      	movs	r2, #0
 8002e88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e8e:	4618      	mov	r0, r3
 8002e90:	3710      	adds	r7, #16
 8002e92:	46bd      	mov	sp, r7
 8002e94:	bd80      	pop	{r7, pc}
	...

08002e98 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e98:	b480      	push	{r7}
 8002e9a:	b085      	sub	sp, #20
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
 8002ea0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002ea2:	2300      	movs	r3, #0
 8002ea4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002eac:	2b01      	cmp	r3, #1
 8002eae:	d101      	bne.n	8002eb4 <HAL_ADC_ConfigChannel+0x1c>
 8002eb0:	2302      	movs	r3, #2
 8002eb2:	e105      	b.n	80030c0 <HAL_ADC_ConfigChannel+0x228>
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b09      	cmp	r3, #9
 8002ec2:	d925      	bls.n	8002f10 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	68d9      	ldr	r1, [r3, #12]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	b29b      	uxth	r3, r3
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	005b      	lsls	r3, r3, #1
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b1e      	subs	r3, #30
 8002eda:	2207      	movs	r2, #7
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	68d9      	ldr	r1, [r3, #12]
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	689a      	ldr	r2, [r3, #8]
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	b29b      	uxth	r3, r3
 8002efa:	4618      	mov	r0, r3
 8002efc:	4603      	mov	r3, r0
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	4403      	add	r3, r0
 8002f02:	3b1e      	subs	r3, #30
 8002f04:	409a      	lsls	r2, r3
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	e022      	b.n	8002f56 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6919      	ldr	r1, [r3, #16]
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	461a      	mov	r2, r3
 8002f1e:	4613      	mov	r3, r2
 8002f20:	005b      	lsls	r3, r3, #1
 8002f22:	4413      	add	r3, r2
 8002f24:	2207      	movs	r2, #7
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6919      	ldr	r1, [r3, #16]
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	689a      	ldr	r2, [r3, #8]
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	b29b      	uxth	r3, r3
 8002f44:	4618      	mov	r0, r3
 8002f46:	4603      	mov	r3, r0
 8002f48:	005b      	lsls	r3, r3, #1
 8002f4a:	4403      	add	r3, r0
 8002f4c:	409a      	lsls	r2, r3
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	430a      	orrs	r2, r1
 8002f54:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d824      	bhi.n	8002fa8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	4613      	mov	r3, r2
 8002f6a:	009b      	lsls	r3, r3, #2
 8002f6c:	4413      	add	r3, r2
 8002f6e:	3b05      	subs	r3, #5
 8002f70:	221f      	movs	r2, #31
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	43da      	mvns	r2, r3
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	400a      	ands	r2, r1
 8002f7e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685a      	ldr	r2, [r3, #4]
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	3b05      	subs	r3, #5
 8002f9a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	430a      	orrs	r2, r1
 8002fa4:	635a      	str	r2, [r3, #52]	; 0x34
 8002fa6:	e04c      	b.n	8003042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	2b0c      	cmp	r3, #12
 8002fae:	d824      	bhi.n	8002ffa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685a      	ldr	r2, [r3, #4]
 8002fba:	4613      	mov	r3, r2
 8002fbc:	009b      	lsls	r3, r3, #2
 8002fbe:	4413      	add	r3, r2
 8002fc0:	3b23      	subs	r3, #35	; 0x23
 8002fc2:	221f      	movs	r2, #31
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43da      	mvns	r2, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	400a      	ands	r2, r1
 8002fd0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	b29b      	uxth	r3, r3
 8002fde:	4618      	mov	r0, r3
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685a      	ldr	r2, [r3, #4]
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	009b      	lsls	r3, r3, #2
 8002fe8:	4413      	add	r3, r2
 8002fea:	3b23      	subs	r3, #35	; 0x23
 8002fec:	fa00 f203 	lsl.w	r2, r0, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	631a      	str	r2, [r3, #48]	; 0x30
 8002ff8:	e023      	b.n	8003042 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	685a      	ldr	r2, [r3, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	4413      	add	r3, r2
 800300a:	3b41      	subs	r3, #65	; 0x41
 800300c:	221f      	movs	r2, #31
 800300e:	fa02 f303 	lsl.w	r3, r2, r3
 8003012:	43da      	mvns	r2, r3
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	400a      	ands	r2, r1
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	b29b      	uxth	r3, r3
 8003028:	4618      	mov	r0, r3
 800302a:	683b      	ldr	r3, [r7, #0]
 800302c:	685a      	ldr	r2, [r3, #4]
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	3b41      	subs	r3, #65	; 0x41
 8003036:	fa00 f203 	lsl.w	r2, r0, r3
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	430a      	orrs	r2, r1
 8003040:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003042:	4b22      	ldr	r3, [pc, #136]	; (80030cc <HAL_ADC_ConfigChannel+0x234>)
 8003044:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4a21      	ldr	r2, [pc, #132]	; (80030d0 <HAL_ADC_ConfigChannel+0x238>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d109      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x1cc>
 8003050:	683b      	ldr	r3, [r7, #0]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	2b12      	cmp	r3, #18
 8003056:	d105      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4a19      	ldr	r2, [pc, #100]	; (80030d0 <HAL_ADC_ConfigChannel+0x238>)
 800306a:	4293      	cmp	r3, r2
 800306c:	d123      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x21e>
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	2b10      	cmp	r3, #16
 8003074:	d003      	beq.n	800307e <HAL_ADC_ConfigChannel+0x1e6>
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	2b11      	cmp	r3, #17
 800307c:	d11b      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	2b10      	cmp	r3, #16
 8003090:	d111      	bne.n	80030b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003092:	4b10      	ldr	r3, [pc, #64]	; (80030d4 <HAL_ADC_ConfigChannel+0x23c>)
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	4a10      	ldr	r2, [pc, #64]	; (80030d8 <HAL_ADC_ConfigChannel+0x240>)
 8003098:	fba2 2303 	umull	r2, r3, r2, r3
 800309c:	0c9a      	lsrs	r2, r3, #18
 800309e:	4613      	mov	r3, r2
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030a8:	e002      	b.n	80030b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	3b01      	subs	r3, #1
 80030ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d1f9      	bne.n	80030aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2200      	movs	r2, #0
 80030ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	4618      	mov	r0, r3
 80030c2:	3714      	adds	r7, #20
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40012300 	.word	0x40012300
 80030d0:	40012000 	.word	0x40012000
 80030d4:	200001d4 	.word	0x200001d4
 80030d8:	431bde83 	.word	0x431bde83

080030dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80030dc:	b480      	push	{r7}
 80030de:	b085      	sub	sp, #20
 80030e0:	af00      	add	r7, sp, #0
 80030e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030e4:	4b79      	ldr	r3, [pc, #484]	; (80032cc <ADC_Init+0x1f0>)
 80030e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	685b      	ldr	r3, [r3, #4]
 80030ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	685a      	ldr	r2, [r3, #4]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	431a      	orrs	r2, r3
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003110:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	6859      	ldr	r1, [r3, #4]
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	691b      	ldr	r3, [r3, #16]
 800311c:	021a      	lsls	r2, r3, #8
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	685a      	ldr	r2, [r3, #4]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003134:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	689a      	ldr	r2, [r3, #8]
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	689a      	ldr	r2, [r3, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6899      	ldr	r1, [r3, #8]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	68da      	ldr	r2, [r3, #12]
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316e:	4a58      	ldr	r2, [pc, #352]	; (80032d0 <ADC_Init+0x1f4>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d022      	beq.n	80031ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003182:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	6899      	ldr	r1, [r3, #8]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	430a      	orrs	r2, r1
 8003194:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	6899      	ldr	r1, [r3, #8]
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	609a      	str	r2, [r3, #8]
 80031b8:	e00f      	b.n	80031da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	689a      	ldr	r2, [r3, #8]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80031c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	689a      	ldr	r2, [r3, #8]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80031d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	689a      	ldr	r2, [r3, #8]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f022 0202 	bic.w	r2, r2, #2
 80031e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	6899      	ldr	r1, [r3, #8]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	7e1b      	ldrb	r3, [r3, #24]
 80031f4:	005a      	lsls	r2, r3, #1
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	430a      	orrs	r2, r1
 80031fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003204:	2b00      	cmp	r3, #0
 8003206:	d01b      	beq.n	8003240 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	685a      	ldr	r2, [r3, #4]
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003216:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	685a      	ldr	r2, [r3, #4]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003226:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	6859      	ldr	r1, [r3, #4]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003232:	3b01      	subs	r3, #1
 8003234:	035a      	lsls	r2, r3, #13
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	e007      	b.n	8003250 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	685a      	ldr	r2, [r3, #4]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800324e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800325e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	69db      	ldr	r3, [r3, #28]
 800326a:	3b01      	subs	r3, #1
 800326c:	051a      	lsls	r2, r3, #20
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	430a      	orrs	r2, r1
 8003274:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003284:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	6899      	ldr	r1, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003292:	025a      	lsls	r2, r3, #9
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	430a      	orrs	r2, r1
 800329a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80032aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	6899      	ldr	r1, [r3, #8]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	695b      	ldr	r3, [r3, #20]
 80032b6:	029a      	lsls	r2, r3, #10
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	bf00      	nop
 80032c2:	3714      	adds	r7, #20
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	40012300 	.word	0x40012300
 80032d0:	0f000001 	.word	0x0f000001

080032d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b085      	sub	sp, #20
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80032e4:	4b0c      	ldr	r3, [pc, #48]	; (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 80032e6:	68db      	ldr	r3, [r3, #12]
 80032e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80032ea:	68ba      	ldr	r2, [r7, #8]
 80032ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80032f0:	4013      	ands	r3, r2
 80032f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80032fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003306:	4a04      	ldr	r2, [pc, #16]	; (8003318 <__NVIC_SetPriorityGrouping+0x44>)
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	60d3      	str	r3, [r2, #12]
}
 800330c:	bf00      	nop
 800330e:	3714      	adds	r7, #20
 8003310:	46bd      	mov	sp, r7
 8003312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003316:	4770      	bx	lr
 8003318:	e000ed00 	.word	0xe000ed00

0800331c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800331c:	b480      	push	{r7}
 800331e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003320:	4b04      	ldr	r3, [pc, #16]	; (8003334 <__NVIC_GetPriorityGrouping+0x18>)
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	0a1b      	lsrs	r3, r3, #8
 8003326:	f003 0307 	and.w	r3, r3, #7
}
 800332a:	4618      	mov	r0, r3
 800332c:	46bd      	mov	sp, r7
 800332e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003332:	4770      	bx	lr
 8003334:	e000ed00 	.word	0xe000ed00

08003338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003338:	b480      	push	{r7}
 800333a:	b083      	sub	sp, #12
 800333c:	af00      	add	r7, sp, #0
 800333e:	4603      	mov	r3, r0
 8003340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003346:	2b00      	cmp	r3, #0
 8003348:	db0b      	blt.n	8003362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800334a:	79fb      	ldrb	r3, [r7, #7]
 800334c:	f003 021f 	and.w	r2, r3, #31
 8003350:	4907      	ldr	r1, [pc, #28]	; (8003370 <__NVIC_EnableIRQ+0x38>)
 8003352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	2001      	movs	r0, #1
 800335a:	fa00 f202 	lsl.w	r2, r0, r2
 800335e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003362:	bf00      	nop
 8003364:	370c      	adds	r7, #12
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
 800336e:	bf00      	nop
 8003370:	e000e100 	.word	0xe000e100

08003374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003374:	b480      	push	{r7}
 8003376:	b083      	sub	sp, #12
 8003378:	af00      	add	r7, sp, #0
 800337a:	4603      	mov	r3, r0
 800337c:	6039      	str	r1, [r7, #0]
 800337e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003384:	2b00      	cmp	r3, #0
 8003386:	db0a      	blt.n	800339e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	b2da      	uxtb	r2, r3
 800338c:	490c      	ldr	r1, [pc, #48]	; (80033c0 <__NVIC_SetPriority+0x4c>)
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	0112      	lsls	r2, r2, #4
 8003394:	b2d2      	uxtb	r2, r2
 8003396:	440b      	add	r3, r1
 8003398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800339c:	e00a      	b.n	80033b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800339e:	683b      	ldr	r3, [r7, #0]
 80033a0:	b2da      	uxtb	r2, r3
 80033a2:	4908      	ldr	r1, [pc, #32]	; (80033c4 <__NVIC_SetPriority+0x50>)
 80033a4:	79fb      	ldrb	r3, [r7, #7]
 80033a6:	f003 030f 	and.w	r3, r3, #15
 80033aa:	3b04      	subs	r3, #4
 80033ac:	0112      	lsls	r2, r2, #4
 80033ae:	b2d2      	uxtb	r2, r2
 80033b0:	440b      	add	r3, r1
 80033b2:	761a      	strb	r2, [r3, #24]
}
 80033b4:	bf00      	nop
 80033b6:	370c      	adds	r7, #12
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	e000e100 	.word	0xe000e100
 80033c4:	e000ed00 	.word	0xe000ed00

080033c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80033c8:	b480      	push	{r7}
 80033ca:	b089      	sub	sp, #36	; 0x24
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	60f8      	str	r0, [r7, #12]
 80033d0:	60b9      	str	r1, [r7, #8]
 80033d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 0307 	and.w	r3, r3, #7
 80033da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80033dc:	69fb      	ldr	r3, [r7, #28]
 80033de:	f1c3 0307 	rsb	r3, r3, #7
 80033e2:	2b04      	cmp	r3, #4
 80033e4:	bf28      	it	cs
 80033e6:	2304      	movcs	r3, #4
 80033e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	3304      	adds	r3, #4
 80033ee:	2b06      	cmp	r3, #6
 80033f0:	d902      	bls.n	80033f8 <NVIC_EncodePriority+0x30>
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3b03      	subs	r3, #3
 80033f6:	e000      	b.n	80033fa <NVIC_EncodePriority+0x32>
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003400:	69bb      	ldr	r3, [r7, #24]
 8003402:	fa02 f303 	lsl.w	r3, r2, r3
 8003406:	43da      	mvns	r2, r3
 8003408:	68bb      	ldr	r3, [r7, #8]
 800340a:	401a      	ands	r2, r3
 800340c:	697b      	ldr	r3, [r7, #20]
 800340e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003410:	f04f 31ff 	mov.w	r1, #4294967295
 8003414:	697b      	ldr	r3, [r7, #20]
 8003416:	fa01 f303 	lsl.w	r3, r1, r3
 800341a:	43d9      	mvns	r1, r3
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003420:	4313      	orrs	r3, r2
         );
}
 8003422:	4618      	mov	r0, r3
 8003424:	3724      	adds	r7, #36	; 0x24
 8003426:	46bd      	mov	sp, r7
 8003428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800342c:	4770      	bx	lr

0800342e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7ff ff4c 	bl	80032d4 <__NVIC_SetPriorityGrouping>
}
 800343c:	bf00      	nop
 800343e:	3708      	adds	r7, #8
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003444:	b580      	push	{r7, lr}
 8003446:	b086      	sub	sp, #24
 8003448:	af00      	add	r7, sp, #0
 800344a:	4603      	mov	r3, r0
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	607a      	str	r2, [r7, #4]
 8003450:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003452:	2300      	movs	r3, #0
 8003454:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003456:	f7ff ff61 	bl	800331c <__NVIC_GetPriorityGrouping>
 800345a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800345c:	687a      	ldr	r2, [r7, #4]
 800345e:	68b9      	ldr	r1, [r7, #8]
 8003460:	6978      	ldr	r0, [r7, #20]
 8003462:	f7ff ffb1 	bl	80033c8 <NVIC_EncodePriority>
 8003466:	4602      	mov	r2, r0
 8003468:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800346c:	4611      	mov	r1, r2
 800346e:	4618      	mov	r0, r3
 8003470:	f7ff ff80 	bl	8003374 <__NVIC_SetPriority>
}
 8003474:	bf00      	nop
 8003476:	3718      	adds	r7, #24
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}

0800347c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	4603      	mov	r3, r0
 8003484:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003486:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800348a:	4618      	mov	r0, r3
 800348c:	f7ff ff54 	bl	8003338 <__NVIC_EnableIRQ>
}
 8003490:	bf00      	nop
 8003492:	3708      	adds	r7, #8
 8003494:	46bd      	mov	sp, r7
 8003496:	bd80      	pop	{r7, pc}

08003498 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003498:	b580      	push	{r7, lr}
 800349a:	b086      	sub	sp, #24
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80034a0:	2300      	movs	r3, #0
 80034a2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80034a4:	f7ff fc84 	bl	8002db0 <HAL_GetTick>
 80034a8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e099      	b.n	80035e8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2202      	movs	r2, #2
 80034c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f022 0201 	bic.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034d4:	e00f      	b.n	80034f6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80034d6:	f7ff fc6b 	bl	8002db0 <HAL_GetTick>
 80034da:	4602      	mov	r2, r0
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	1ad3      	subs	r3, r2, r3
 80034e0:	2b05      	cmp	r3, #5
 80034e2:	d908      	bls.n	80034f6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	2220      	movs	r2, #32
 80034e8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	2203      	movs	r2, #3
 80034ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	e078      	b.n	80035e8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d1e8      	bne.n	80034d6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4b38      	ldr	r3, [pc, #224]	; (80035f0 <HAL_DMA_Init+0x158>)
 8003510:	4013      	ands	r3, r2
 8003512:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	685a      	ldr	r2, [r3, #4]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003522:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	691b      	ldr	r3, [r3, #16]
 8003528:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800352e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	699b      	ldr	r3, [r3, #24]
 8003534:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800353a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a1b      	ldr	r3, [r3, #32]
 8003540:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	4313      	orrs	r3, r2
 8003546:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354c:	2b04      	cmp	r3, #4
 800354e:	d107      	bne.n	8003560 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003558:	4313      	orrs	r3, r2
 800355a:	697a      	ldr	r2, [r7, #20]
 800355c:	4313      	orrs	r3, r2
 800355e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	697a      	ldr	r2, [r7, #20]
 8003566:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	f023 0307 	bic.w	r3, r3, #7
 8003576:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003586:	2b04      	cmp	r3, #4
 8003588:	d117      	bne.n	80035ba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358e:	697a      	ldr	r2, [r7, #20]
 8003590:	4313      	orrs	r3, r2
 8003592:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800359c:	6878      	ldr	r0, [r7, #4]
 800359e:	f000 fb0d 	bl	8003bbc <DMA_CheckFifoParam>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d008      	beq.n	80035ba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2240      	movs	r2, #64	; 0x40
 80035ac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2201      	movs	r2, #1
 80035b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80035b6:	2301      	movs	r3, #1
 80035b8:	e016      	b.n	80035e8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	697a      	ldr	r2, [r7, #20]
 80035c0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 fac4 	bl	8003b50 <DMA_CalcBaseAndBitshift>
 80035c8:	4603      	mov	r3, r0
 80035ca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035d0:	223f      	movs	r2, #63	; 0x3f
 80035d2:	409a      	lsls	r2, r3
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2201      	movs	r2, #1
 80035e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80035e6:	2300      	movs	r3, #0
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	f010803f 	.word	0xf010803f

080035f4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b086      	sub	sp, #24
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	60f8      	str	r0, [r7, #12]
 80035fc:	60b9      	str	r1, [r7, #8]
 80035fe:	607a      	str	r2, [r7, #4]
 8003600:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003602:	2300      	movs	r3, #0
 8003604:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800360a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003612:	2b01      	cmp	r3, #1
 8003614:	d101      	bne.n	800361a <HAL_DMA_Start_IT+0x26>
 8003616:	2302      	movs	r3, #2
 8003618:	e040      	b.n	800369c <HAL_DMA_Start_IT+0xa8>
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003628:	b2db      	uxtb	r3, r3
 800362a:	2b01      	cmp	r3, #1
 800362c:	d12f      	bne.n	800368e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	2202      	movs	r2, #2
 8003632:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	2200      	movs	r2, #0
 800363a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	687a      	ldr	r2, [r7, #4]
 8003640:	68b9      	ldr	r1, [r7, #8]
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f000 fa56 	bl	8003af4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364c:	223f      	movs	r2, #63	; 0x3f
 800364e:	409a      	lsls	r2, r3
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f042 0216 	orr.w	r2, r2, #22
 8003662:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	2b00      	cmp	r3, #0
 800366a:	d007      	beq.n	800367c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	681a      	ldr	r2, [r3, #0]
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f042 0208 	orr.w	r2, r2, #8
 800367a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	681a      	ldr	r2, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f042 0201 	orr.w	r2, r2, #1
 800368a:	601a      	str	r2, [r3, #0]
 800368c:	e005      	b.n	800369a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	2200      	movs	r2, #0
 8003692:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003696:	2302      	movs	r3, #2
 8003698:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800369a:	7dfb      	ldrb	r3, [r7, #23]
}
 800369c:	4618      	mov	r0, r3
 800369e:	3718      	adds	r7, #24
 80036a0:	46bd      	mov	sp, r7
 80036a2:	bd80      	pop	{r7, pc}

080036a4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036b0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80036b2:	f7ff fb7d 	bl	8002db0 <HAL_GetTick>
 80036b6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d008      	beq.n	80036d6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2280      	movs	r2, #128	; 0x80
 80036c8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e052      	b.n	800377c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	681a      	ldr	r2, [r3, #0]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0216 	bic.w	r2, r2, #22
 80036e4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	695a      	ldr	r2, [r3, #20]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80036f4:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d103      	bne.n	8003706 <HAL_DMA_Abort+0x62>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003702:	2b00      	cmp	r3, #0
 8003704:	d007      	beq.n	8003716 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	681a      	ldr	r2, [r3, #0]
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f022 0208 	bic.w	r2, r2, #8
 8003714:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0201 	bic.w	r2, r2, #1
 8003724:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003726:	e013      	b.n	8003750 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003728:	f7ff fb42 	bl	8002db0 <HAL_GetTick>
 800372c:	4602      	mov	r2, r0
 800372e:	68bb      	ldr	r3, [r7, #8]
 8003730:	1ad3      	subs	r3, r2, r3
 8003732:	2b05      	cmp	r3, #5
 8003734:	d90c      	bls.n	8003750 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	2220      	movs	r2, #32
 800373a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2200      	movs	r2, #0
 8003740:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	2203      	movs	r2, #3
 8003748:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800374c:	2303      	movs	r3, #3
 800374e:	e015      	b.n	800377c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f003 0301 	and.w	r3, r3, #1
 800375a:	2b00      	cmp	r3, #0
 800375c:	d1e4      	bne.n	8003728 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003762:	223f      	movs	r2, #63	; 0x3f
 8003764:	409a      	lsls	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2200      	movs	r2, #0
 800376e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	2201      	movs	r2, #1
 8003776:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	3710      	adds	r7, #16
 8003780:	46bd      	mov	sp, r7
 8003782:	bd80      	pop	{r7, pc}

08003784 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003784:	b480      	push	{r7}
 8003786:	b083      	sub	sp, #12
 8003788:	af00      	add	r7, sp, #0
 800378a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003792:	b2db      	uxtb	r3, r3
 8003794:	2b02      	cmp	r3, #2
 8003796:	d004      	beq.n	80037a2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e00c      	b.n	80037bc <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2205      	movs	r2, #5
 80037a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	681a      	ldr	r2, [r3, #0]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f022 0201 	bic.w	r2, r2, #1
 80037b8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	370c      	adds	r7, #12
 80037c0:	46bd      	mov	sp, r7
 80037c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c6:	4770      	bx	lr

080037c8 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80037c8:	b580      	push	{r7, lr}
 80037ca:	b086      	sub	sp, #24
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80037d0:	2300      	movs	r3, #0
 80037d2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80037d4:	4b92      	ldr	r3, [pc, #584]	; (8003a20 <HAL_DMA_IRQHandler+0x258>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	4a92      	ldr	r2, [pc, #584]	; (8003a24 <HAL_DMA_IRQHandler+0x25c>)
 80037da:	fba2 2303 	umull	r2, r3, r2, r3
 80037de:	0a9b      	lsrs	r3, r3, #10
 80037e0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80037e6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80037e8:	693b      	ldr	r3, [r7, #16]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f2:	2208      	movs	r2, #8
 80037f4:	409a      	lsls	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	4013      	ands	r3, r2
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d01a      	beq.n	8003834 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f003 0304 	and.w	r3, r3, #4
 8003808:	2b00      	cmp	r3, #0
 800380a:	d013      	beq.n	8003834 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681a      	ldr	r2, [r3, #0]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f022 0204 	bic.w	r2, r2, #4
 800381a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003820:	2208      	movs	r2, #8
 8003822:	409a      	lsls	r2, r3
 8003824:	693b      	ldr	r3, [r7, #16]
 8003826:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800382c:	f043 0201 	orr.w	r2, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003838:	2201      	movs	r2, #1
 800383a:	409a      	lsls	r2, r3
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	4013      	ands	r3, r2
 8003840:	2b00      	cmp	r3, #0
 8003842:	d012      	beq.n	800386a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800384e:	2b00      	cmp	r3, #0
 8003850:	d00b      	beq.n	800386a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	2201      	movs	r2, #1
 8003858:	409a      	lsls	r2, r3
 800385a:	693b      	ldr	r3, [r7, #16]
 800385c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003862:	f043 0202 	orr.w	r2, r3, #2
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800386e:	2204      	movs	r2, #4
 8003870:	409a      	lsls	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	4013      	ands	r3, r2
 8003876:	2b00      	cmp	r3, #0
 8003878:	d012      	beq.n	80038a0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	f003 0302 	and.w	r3, r3, #2
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00b      	beq.n	80038a0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800388c:	2204      	movs	r2, #4
 800388e:	409a      	lsls	r2, r3
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003898:	f043 0204 	orr.w	r2, r3, #4
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038a4:	2210      	movs	r2, #16
 80038a6:	409a      	lsls	r2, r3
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	4013      	ands	r3, r2
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d043      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 0308 	and.w	r3, r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d03c      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038c2:	2210      	movs	r2, #16
 80038c4:	409a      	lsls	r2, r3
 80038c6:	693b      	ldr	r3, [r7, #16]
 80038c8:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d018      	beq.n	800390a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d108      	bne.n	80038f8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d024      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f2:	6878      	ldr	r0, [r7, #4]
 80038f4:	4798      	blx	r3
 80038f6:	e01f      	b.n	8003938 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d01b      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003904:	6878      	ldr	r0, [r7, #4]
 8003906:	4798      	blx	r3
 8003908:	e016      	b.n	8003938 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003914:	2b00      	cmp	r3, #0
 8003916:	d107      	bne.n	8003928 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	f022 0208 	bic.w	r2, r2, #8
 8003926:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	2b00      	cmp	r3, #0
 800392e:	d003      	beq.n	8003938 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003934:	6878      	ldr	r0, [r7, #4]
 8003936:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393c:	2220      	movs	r2, #32
 800393e:	409a      	lsls	r2, r3
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4013      	ands	r3, r2
 8003944:	2b00      	cmp	r3, #0
 8003946:	f000 808e 	beq.w	8003a66 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f003 0310 	and.w	r3, r3, #16
 8003954:	2b00      	cmp	r3, #0
 8003956:	f000 8086 	beq.w	8003a66 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	2220      	movs	r2, #32
 8003960:	409a      	lsls	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800396c:	b2db      	uxtb	r3, r3
 800396e:	2b05      	cmp	r3, #5
 8003970:	d136      	bne.n	80039e0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f022 0216 	bic.w	r2, r2, #22
 8003980:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	695a      	ldr	r2, [r3, #20]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003990:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003996:	2b00      	cmp	r3, #0
 8003998:	d103      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x1da>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d007      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	681a      	ldr	r2, [r3, #0]
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	f022 0208 	bic.w	r2, r2, #8
 80039b0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039b6:	223f      	movs	r2, #63	; 0x3f
 80039b8:	409a      	lsls	r2, r3
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2201      	movs	r2, #1
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d07d      	beq.n	8003ad2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
        }
        return;
 80039de:	e078      	b.n	8003ad2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d01c      	beq.n	8003a28 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d108      	bne.n	8003a0e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d030      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	6878      	ldr	r0, [r7, #4]
 8003a0a:	4798      	blx	r3
 8003a0c:	e02b      	b.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d027      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a1a:	6878      	ldr	r0, [r7, #4]
 8003a1c:	4798      	blx	r3
 8003a1e:	e022      	b.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
 8003a20:	200001d4 	.word	0x200001d4
 8003a24:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d10f      	bne.n	8003a56 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	681a      	ldr	r2, [r3, #0]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f022 0210 	bic.w	r2, r2, #16
 8003a44:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2200      	movs	r2, #0
 8003a4a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2201      	movs	r2, #1
 8003a52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d003      	beq.n	8003a66 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d032      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a72:	f003 0301 	and.w	r3, r3, #1
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d022      	beq.n	8003ac0 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2205      	movs	r2, #5
 8003a7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	681a      	ldr	r2, [r3, #0]
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f022 0201 	bic.w	r2, r2, #1
 8003a90:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	3301      	adds	r3, #1
 8003a96:	60bb      	str	r3, [r7, #8]
 8003a98:	697a      	ldr	r2, [r7, #20]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	d307      	bcc.n	8003aae <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	f003 0301 	and.w	r3, r3, #1
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d1f2      	bne.n	8003a92 <HAL_DMA_IRQHandler+0x2ca>
 8003aac:	e000      	b.n	8003ab0 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003aae:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2201      	movs	r2, #1
 8003abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d005      	beq.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	4798      	blx	r3
 8003ad0:	e000      	b.n	8003ad4 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003ad2:	bf00      	nop
    }
  }
}
 8003ad4:	3718      	adds	r7, #24
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}
 8003ada:	bf00      	nop

08003adc <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003af4:	b480      	push	{r7}
 8003af6:	b085      	sub	sp, #20
 8003af8:	af00      	add	r7, sp, #0
 8003afa:	60f8      	str	r0, [r7, #12]
 8003afc:	60b9      	str	r1, [r7, #8]
 8003afe:	607a      	str	r2, [r7, #4]
 8003b00:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003b10:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	683a      	ldr	r2, [r7, #0]
 8003b18:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	689b      	ldr	r3, [r3, #8]
 8003b1e:	2b40      	cmp	r3, #64	; 0x40
 8003b20:	d108      	bne.n	8003b34 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	68ba      	ldr	r2, [r7, #8]
 8003b30:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003b32:	e007      	b.n	8003b44 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	68ba      	ldr	r2, [r7, #8]
 8003b3a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	687a      	ldr	r2, [r7, #4]
 8003b42:	60da      	str	r2, [r3, #12]
}
 8003b44:	bf00      	nop
 8003b46:	3714      	adds	r7, #20
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b4e:	4770      	bx	lr

08003b50 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	3b10      	subs	r3, #16
 8003b60:	4a14      	ldr	r2, [pc, #80]	; (8003bb4 <DMA_CalcBaseAndBitshift+0x64>)
 8003b62:	fba2 2303 	umull	r2, r3, r2, r3
 8003b66:	091b      	lsrs	r3, r3, #4
 8003b68:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003b6a:	4a13      	ldr	r2, [pc, #76]	; (8003bb8 <DMA_CalcBaseAndBitshift+0x68>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	4413      	add	r3, r2
 8003b70:	781b      	ldrb	r3, [r3, #0]
 8003b72:	461a      	mov	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d909      	bls.n	8003b92 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b86:	f023 0303 	bic.w	r3, r3, #3
 8003b8a:	1d1a      	adds	r2, r3, #4
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b90:	e007      	b.n	8003ba2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b9a:	f023 0303 	bic.w	r3, r3, #3
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb0:	4770      	bx	lr
 8003bb2:	bf00      	nop
 8003bb4:	aaaaaaab 	.word	0xaaaaaaab
 8003bb8:	080084e8 	.word	0x080084e8

08003bbc <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bcc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	699b      	ldr	r3, [r3, #24]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d11f      	bne.n	8003c16 <DMA_CheckFifoParam+0x5a>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	2b03      	cmp	r3, #3
 8003bda:	d856      	bhi.n	8003c8a <DMA_CheckFifoParam+0xce>
 8003bdc:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <DMA_CheckFifoParam+0x28>)
 8003bde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be2:	bf00      	nop
 8003be4:	08003bf5 	.word	0x08003bf5
 8003be8:	08003c07 	.word	0x08003c07
 8003bec:	08003bf5 	.word	0x08003bf5
 8003bf0:	08003c8b 	.word	0x08003c8b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d046      	beq.n	8003c8e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c04:	e043      	b.n	8003c8e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c0e:	d140      	bne.n	8003c92 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c14:	e03d      	b.n	8003c92 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	699b      	ldr	r3, [r3, #24]
 8003c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c1e:	d121      	bne.n	8003c64 <DMA_CheckFifoParam+0xa8>
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	2b03      	cmp	r3, #3
 8003c24:	d837      	bhi.n	8003c96 <DMA_CheckFifoParam+0xda>
 8003c26:	a201      	add	r2, pc, #4	; (adr r2, 8003c2c <DMA_CheckFifoParam+0x70>)
 8003c28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c2c:	08003c3d 	.word	0x08003c3d
 8003c30:	08003c43 	.word	0x08003c43
 8003c34:	08003c3d 	.word	0x08003c3d
 8003c38:	08003c55 	.word	0x08003c55
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	73fb      	strb	r3, [r7, #15]
      break;
 8003c40:	e030      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d025      	beq.n	8003c9a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c52:	e022      	b.n	8003c9a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c58:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003c5c:	d11f      	bne.n	8003c9e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003c62:	e01c      	b.n	8003c9e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003c64:	68bb      	ldr	r3, [r7, #8]
 8003c66:	2b02      	cmp	r3, #2
 8003c68:	d903      	bls.n	8003c72 <DMA_CheckFifoParam+0xb6>
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	2b03      	cmp	r3, #3
 8003c6e:	d003      	beq.n	8003c78 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003c70:	e018      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	73fb      	strb	r3, [r7, #15]
      break;
 8003c76:	e015      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c7c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d00e      	beq.n	8003ca2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	73fb      	strb	r3, [r7, #15]
      break;
 8003c88:	e00b      	b.n	8003ca2 <DMA_CheckFifoParam+0xe6>
      break;
 8003c8a:	bf00      	nop
 8003c8c:	e00a      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8003c8e:	bf00      	nop
 8003c90:	e008      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8003c92:	bf00      	nop
 8003c94:	e006      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8003c96:	bf00      	nop
 8003c98:	e004      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8003c9a:	bf00      	nop
 8003c9c:	e002      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003c9e:	bf00      	nop
 8003ca0:	e000      	b.n	8003ca4 <DMA_CheckFifoParam+0xe8>
      break;
 8003ca2:	bf00      	nop
    }
  } 
  
  return status; 
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	3714      	adds	r7, #20
 8003caa:	46bd      	mov	sp, r7
 8003cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop

08003cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b089      	sub	sp, #36	; 0x24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
 8003cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003cc2:	2300      	movs	r3, #0
 8003cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cca:	2300      	movs	r3, #0
 8003ccc:	61fb      	str	r3, [r7, #28]
 8003cce:	e16b      	b.n	8003fa8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	697a      	ldr	r2, [r7, #20]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	697b      	ldr	r3, [r7, #20]
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	f040 815a 	bne.w	8003fa2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003cee:	683b      	ldr	r3, [r7, #0]
 8003cf0:	685b      	ldr	r3, [r3, #4]
 8003cf2:	f003 0303 	and.w	r3, r3, #3
 8003cf6:	2b01      	cmp	r3, #1
 8003cf8:	d005      	beq.n	8003d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cfa:	683b      	ldr	r3, [r7, #0]
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003d02:	2b02      	cmp	r3, #2
 8003d04:	d130      	bne.n	8003d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003d0c:	69fb      	ldr	r3, [r7, #28]
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	2203      	movs	r2, #3
 8003d12:	fa02 f303 	lsl.w	r3, r2, r3
 8003d16:	43db      	mvns	r3, r3
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	69fb      	ldr	r3, [r7, #28]
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2a:	69ba      	ldr	r2, [r7, #24]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	69ba      	ldr	r2, [r7, #24]
 8003d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003d3c:	2201      	movs	r2, #1
 8003d3e:	69fb      	ldr	r3, [r7, #28]
 8003d40:	fa02 f303 	lsl.w	r3, r2, r3
 8003d44:	43db      	mvns	r3, r3
 8003d46:	69ba      	ldr	r2, [r7, #24]
 8003d48:	4013      	ands	r3, r2
 8003d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	091b      	lsrs	r3, r3, #4
 8003d52:	f003 0201 	and.w	r2, r3, #1
 8003d56:	69fb      	ldr	r3, [r7, #28]
 8003d58:	fa02 f303 	lsl.w	r3, r2, r3
 8003d5c:	69ba      	ldr	r2, [r7, #24]
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	69ba      	ldr	r2, [r7, #24]
 8003d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	f003 0303 	and.w	r3, r3, #3
 8003d70:	2b03      	cmp	r3, #3
 8003d72:	d017      	beq.n	8003da4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d7a:	69fb      	ldr	r3, [r7, #28]
 8003d7c:	005b      	lsls	r3, r3, #1
 8003d7e:	2203      	movs	r2, #3
 8003d80:	fa02 f303 	lsl.w	r3, r2, r3
 8003d84:	43db      	mvns	r3, r3
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	4013      	ands	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	689a      	ldr	r2, [r3, #8]
 8003d90:	69fb      	ldr	r3, [r7, #28]
 8003d92:	005b      	lsls	r3, r3, #1
 8003d94:	fa02 f303 	lsl.w	r3, r2, r3
 8003d98:	69ba      	ldr	r2, [r7, #24]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003da4:	683b      	ldr	r3, [r7, #0]
 8003da6:	685b      	ldr	r3, [r3, #4]
 8003da8:	f003 0303 	and.w	r3, r3, #3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d123      	bne.n	8003df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	08da      	lsrs	r2, r3, #3
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	3208      	adds	r2, #8
 8003db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	f003 0307 	and.w	r3, r3, #7
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	220f      	movs	r2, #15
 8003dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dcc:	43db      	mvns	r3, r3
 8003dce:	69ba      	ldr	r2, [r7, #24]
 8003dd0:	4013      	ands	r3, r2
 8003dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	691a      	ldr	r2, [r3, #16]
 8003dd8:	69fb      	ldr	r3, [r7, #28]
 8003dda:	f003 0307 	and.w	r3, r3, #7
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	fa02 f303 	lsl.w	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	4313      	orrs	r3, r2
 8003de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003dea:	69fb      	ldr	r3, [r7, #28]
 8003dec:	08da      	lsrs	r2, r3, #3
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	3208      	adds	r2, #8
 8003df2:	69b9      	ldr	r1, [r7, #24]
 8003df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003dfe:	69fb      	ldr	r3, [r7, #28]
 8003e00:	005b      	lsls	r3, r3, #1
 8003e02:	2203      	movs	r2, #3
 8003e04:	fa02 f303 	lsl.w	r3, r2, r3
 8003e08:	43db      	mvns	r3, r3
 8003e0a:	69ba      	ldr	r2, [r7, #24]
 8003e0c:	4013      	ands	r3, r2
 8003e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685b      	ldr	r3, [r3, #4]
 8003e14:	f003 0203 	and.w	r2, r3, #3
 8003e18:	69fb      	ldr	r3, [r7, #28]
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	f000 80b4 	beq.w	8003fa2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e3a:	2300      	movs	r3, #0
 8003e3c:	60fb      	str	r3, [r7, #12]
 8003e3e:	4b60      	ldr	r3, [pc, #384]	; (8003fc0 <HAL_GPIO_Init+0x30c>)
 8003e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e42:	4a5f      	ldr	r2, [pc, #380]	; (8003fc0 <HAL_GPIO_Init+0x30c>)
 8003e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003e48:	6453      	str	r3, [r2, #68]	; 0x44
 8003e4a:	4b5d      	ldr	r3, [pc, #372]	; (8003fc0 <HAL_GPIO_Init+0x30c>)
 8003e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e52:	60fb      	str	r3, [r7, #12]
 8003e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003e56:	4a5b      	ldr	r2, [pc, #364]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003e58:	69fb      	ldr	r3, [r7, #28]
 8003e5a:	089b      	lsrs	r3, r3, #2
 8003e5c:	3302      	adds	r3, #2
 8003e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003e64:	69fb      	ldr	r3, [r7, #28]
 8003e66:	f003 0303 	and.w	r3, r3, #3
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	220f      	movs	r2, #15
 8003e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8003e72:	43db      	mvns	r3, r3
 8003e74:	69ba      	ldr	r2, [r7, #24]
 8003e76:	4013      	ands	r3, r2
 8003e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	4a52      	ldr	r2, [pc, #328]	; (8003fc8 <HAL_GPIO_Init+0x314>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d02b      	beq.n	8003eda <HAL_GPIO_Init+0x226>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	4a51      	ldr	r2, [pc, #324]	; (8003fcc <HAL_GPIO_Init+0x318>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d025      	beq.n	8003ed6 <HAL_GPIO_Init+0x222>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	4a50      	ldr	r2, [pc, #320]	; (8003fd0 <HAL_GPIO_Init+0x31c>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d01f      	beq.n	8003ed2 <HAL_GPIO_Init+0x21e>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	4a4f      	ldr	r2, [pc, #316]	; (8003fd4 <HAL_GPIO_Init+0x320>)
 8003e96:	4293      	cmp	r3, r2
 8003e98:	d019      	beq.n	8003ece <HAL_GPIO_Init+0x21a>
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	4a4e      	ldr	r2, [pc, #312]	; (8003fd8 <HAL_GPIO_Init+0x324>)
 8003e9e:	4293      	cmp	r3, r2
 8003ea0:	d013      	beq.n	8003eca <HAL_GPIO_Init+0x216>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	4a4d      	ldr	r2, [pc, #308]	; (8003fdc <HAL_GPIO_Init+0x328>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00d      	beq.n	8003ec6 <HAL_GPIO_Init+0x212>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	4a4c      	ldr	r2, [pc, #304]	; (8003fe0 <HAL_GPIO_Init+0x32c>)
 8003eae:	4293      	cmp	r3, r2
 8003eb0:	d007      	beq.n	8003ec2 <HAL_GPIO_Init+0x20e>
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	4a4b      	ldr	r2, [pc, #300]	; (8003fe4 <HAL_GPIO_Init+0x330>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d101      	bne.n	8003ebe <HAL_GPIO_Init+0x20a>
 8003eba:	2307      	movs	r3, #7
 8003ebc:	e00e      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003ebe:	2308      	movs	r3, #8
 8003ec0:	e00c      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003ec2:	2306      	movs	r3, #6
 8003ec4:	e00a      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003ec6:	2305      	movs	r3, #5
 8003ec8:	e008      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003eca:	2304      	movs	r3, #4
 8003ecc:	e006      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003ece:	2303      	movs	r3, #3
 8003ed0:	e004      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003ed2:	2302      	movs	r3, #2
 8003ed4:	e002      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003ed6:	2301      	movs	r3, #1
 8003ed8:	e000      	b.n	8003edc <HAL_GPIO_Init+0x228>
 8003eda:	2300      	movs	r3, #0
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	f002 0203 	and.w	r2, r2, #3
 8003ee2:	0092      	lsls	r2, r2, #2
 8003ee4:	4093      	lsls	r3, r2
 8003ee6:	69ba      	ldr	r2, [r7, #24]
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003eec:	4935      	ldr	r1, [pc, #212]	; (8003fc4 <HAL_GPIO_Init+0x310>)
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	089b      	lsrs	r3, r3, #2
 8003ef2:	3302      	adds	r3, #2
 8003ef4:	69ba      	ldr	r2, [r7, #24]
 8003ef6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003efa:	4b3b      	ldr	r3, [pc, #236]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f00:	693b      	ldr	r3, [r7, #16]
 8003f02:	43db      	mvns	r3, r3
 8003f04:	69ba      	ldr	r2, [r7, #24]
 8003f06:	4013      	ands	r3, r2
 8003f08:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003f16:	69ba      	ldr	r2, [r7, #24]
 8003f18:	693b      	ldr	r3, [r7, #16]
 8003f1a:	4313      	orrs	r3, r2
 8003f1c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003f1e:	4a32      	ldr	r2, [pc, #200]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003f20:	69bb      	ldr	r3, [r7, #24]
 8003f22:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003f24:	4b30      	ldr	r3, [pc, #192]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003f26:	685b      	ldr	r3, [r3, #4]
 8003f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f2a:	693b      	ldr	r3, [r7, #16]
 8003f2c:	43db      	mvns	r3, r3
 8003f2e:	69ba      	ldr	r2, [r7, #24]
 8003f30:	4013      	ands	r3, r2
 8003f32:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	685b      	ldr	r3, [r3, #4]
 8003f38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d003      	beq.n	8003f48 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003f40:	69ba      	ldr	r2, [r7, #24]
 8003f42:	693b      	ldr	r3, [r7, #16]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003f48:	4a27      	ldr	r2, [pc, #156]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003f4e:	4b26      	ldr	r3, [pc, #152]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003f50:	689b      	ldr	r3, [r3, #8]
 8003f52:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f54:	693b      	ldr	r3, [r7, #16]
 8003f56:	43db      	mvns	r3, r3
 8003f58:	69ba      	ldr	r2, [r7, #24]
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003f6a:	69ba      	ldr	r2, [r7, #24]
 8003f6c:	693b      	ldr	r3, [r7, #16]
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003f72:	4a1d      	ldr	r2, [pc, #116]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f78:	4b1b      	ldr	r3, [pc, #108]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f7e:	693b      	ldr	r3, [r7, #16]
 8003f80:	43db      	mvns	r3, r3
 8003f82:	69ba      	ldr	r2, [r7, #24]
 8003f84:	4013      	ands	r3, r2
 8003f86:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	685b      	ldr	r3, [r3, #4]
 8003f8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d003      	beq.n	8003f9c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f94:	69ba      	ldr	r2, [r7, #24]
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f9c:	4a12      	ldr	r2, [pc, #72]	; (8003fe8 <HAL_GPIO_Init+0x334>)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003fa2:	69fb      	ldr	r3, [r7, #28]
 8003fa4:	3301      	adds	r3, #1
 8003fa6:	61fb      	str	r3, [r7, #28]
 8003fa8:	69fb      	ldr	r3, [r7, #28]
 8003faa:	2b0f      	cmp	r3, #15
 8003fac:	f67f ae90 	bls.w	8003cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003fb0:	bf00      	nop
 8003fb2:	bf00      	nop
 8003fb4:	3724      	adds	r7, #36	; 0x24
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbc:	4770      	bx	lr
 8003fbe:	bf00      	nop
 8003fc0:	40023800 	.word	0x40023800
 8003fc4:	40013800 	.word	0x40013800
 8003fc8:	40020000 	.word	0x40020000
 8003fcc:	40020400 	.word	0x40020400
 8003fd0:	40020800 	.word	0x40020800
 8003fd4:	40020c00 	.word	0x40020c00
 8003fd8:	40021000 	.word	0x40021000
 8003fdc:	40021400 	.word	0x40021400
 8003fe0:	40021800 	.word	0x40021800
 8003fe4:	40021c00 	.word	0x40021c00
 8003fe8:	40013c00 	.word	0x40013c00

08003fec <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b083      	sub	sp, #12
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	807b      	strh	r3, [r7, #2]
 8003ff8:	4613      	mov	r3, r2
 8003ffa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ffc:	787b      	ldrb	r3, [r7, #1]
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d003      	beq.n	800400a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004002:	887a      	ldrh	r2, [r7, #2]
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004008:	e003      	b.n	8004012 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	041a      	lsls	r2, r3, #16
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	619a      	str	r2, [r3, #24]
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401c:	4770      	bx	lr
	...

08004020 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b086      	sub	sp, #24
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	2b00      	cmp	r3, #0
 800402c:	d101      	bne.n	8004032 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800402e:	2301      	movs	r3, #1
 8004030:	e264      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f003 0301 	and.w	r3, r3, #1
 800403a:	2b00      	cmp	r3, #0
 800403c:	d075      	beq.n	800412a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800403e:	4ba3      	ldr	r3, [pc, #652]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
 8004046:	2b04      	cmp	r3, #4
 8004048:	d00c      	beq.n	8004064 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4ba0      	ldr	r3, [pc, #640]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004052:	2b08      	cmp	r3, #8
 8004054:	d112      	bne.n	800407c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004056:	4b9d      	ldr	r3, [pc, #628]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004058:	685b      	ldr	r3, [r3, #4]
 800405a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800405e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004062:	d10b      	bne.n	800407c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004064:	4b99      	ldr	r3, [pc, #612]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800406c:	2b00      	cmp	r3, #0
 800406e:	d05b      	beq.n	8004128 <HAL_RCC_OscConfig+0x108>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	2b00      	cmp	r3, #0
 8004076:	d157      	bne.n	8004128 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004078:	2301      	movs	r3, #1
 800407a:	e23f      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004084:	d106      	bne.n	8004094 <HAL_RCC_OscConfig+0x74>
 8004086:	4b91      	ldr	r3, [pc, #580]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a90      	ldr	r2, [pc, #576]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 800408c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004090:	6013      	str	r3, [r2, #0]
 8004092:	e01d      	b.n	80040d0 <HAL_RCC_OscConfig+0xb0>
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800409c:	d10c      	bne.n	80040b8 <HAL_RCC_OscConfig+0x98>
 800409e:	4b8b      	ldr	r3, [pc, #556]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a8a      	ldr	r2, [pc, #552]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	4b88      	ldr	r3, [pc, #544]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a87      	ldr	r2, [pc, #540]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e00b      	b.n	80040d0 <HAL_RCC_OscConfig+0xb0>
 80040b8:	4b84      	ldr	r3, [pc, #528]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a83      	ldr	r2, [pc, #524]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040c2:	6013      	str	r3, [r2, #0]
 80040c4:	4b81      	ldr	r3, [pc, #516]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a80      	ldr	r2, [pc, #512]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040ca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040ce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d8:	f7fe fe6a 	bl	8002db0 <HAL_GetTick>
 80040dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040de:	e008      	b.n	80040f2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040e0:	f7fe fe66 	bl	8002db0 <HAL_GetTick>
 80040e4:	4602      	mov	r2, r0
 80040e6:	693b      	ldr	r3, [r7, #16]
 80040e8:	1ad3      	subs	r3, r2, r3
 80040ea:	2b64      	cmp	r3, #100	; 0x64
 80040ec:	d901      	bls.n	80040f2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040ee:	2303      	movs	r3, #3
 80040f0:	e204      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040f2:	4b76      	ldr	r3, [pc, #472]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d0f0      	beq.n	80040e0 <HAL_RCC_OscConfig+0xc0>
 80040fe:	e014      	b.n	800412a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fe fe56 	bl	8002db0 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004108:	f7fe fe52 	bl	8002db0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b64      	cmp	r3, #100	; 0x64
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e1f0      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800411a:	4b6c      	ldr	r3, [pc, #432]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0xe8>
 8004126:	e000      	b.n	800412a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004128:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	f003 0302 	and.w	r3, r3, #2
 8004132:	2b00      	cmp	r3, #0
 8004134:	d063      	beq.n	80041fe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004136:	4b65      	ldr	r3, [pc, #404]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00b      	beq.n	800415a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b62      	ldr	r3, [pc, #392]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800414a:	2b08      	cmp	r3, #8
 800414c:	d11c      	bne.n	8004188 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800414e:	4b5f      	ldr	r3, [pc, #380]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004156:	2b00      	cmp	r3, #0
 8004158:	d116      	bne.n	8004188 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800415a:	4b5c      	ldr	r3, [pc, #368]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d005      	beq.n	8004172 <HAL_RCC_OscConfig+0x152>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	68db      	ldr	r3, [r3, #12]
 800416a:	2b01      	cmp	r3, #1
 800416c:	d001      	beq.n	8004172 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	e1c4      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004172:	4b56      	ldr	r3, [pc, #344]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	691b      	ldr	r3, [r3, #16]
 800417e:	00db      	lsls	r3, r3, #3
 8004180:	4952      	ldr	r1, [pc, #328]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004182:	4313      	orrs	r3, r2
 8004184:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004186:	e03a      	b.n	80041fe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d020      	beq.n	80041d2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004190:	4b4f      	ldr	r3, [pc, #316]	; (80042d0 <HAL_RCC_OscConfig+0x2b0>)
 8004192:	2201      	movs	r2, #1
 8004194:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004196:	f7fe fe0b 	bl	8002db0 <HAL_GetTick>
 800419a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800419c:	e008      	b.n	80041b0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800419e:	f7fe fe07 	bl	8002db0 <HAL_GetTick>
 80041a2:	4602      	mov	r2, r0
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	1ad3      	subs	r3, r2, r3
 80041a8:	2b02      	cmp	r3, #2
 80041aa:	d901      	bls.n	80041b0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041ac:	2303      	movs	r3, #3
 80041ae:	e1a5      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041b0:	4b46      	ldr	r3, [pc, #280]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f003 0302 	and.w	r3, r3, #2
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d0f0      	beq.n	800419e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041bc:	4b43      	ldr	r3, [pc, #268]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	691b      	ldr	r3, [r3, #16]
 80041c8:	00db      	lsls	r3, r3, #3
 80041ca:	4940      	ldr	r1, [pc, #256]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80041cc:	4313      	orrs	r3, r2
 80041ce:	600b      	str	r3, [r1, #0]
 80041d0:	e015      	b.n	80041fe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041d2:	4b3f      	ldr	r3, [pc, #252]	; (80042d0 <HAL_RCC_OscConfig+0x2b0>)
 80041d4:	2200      	movs	r2, #0
 80041d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d8:	f7fe fdea 	bl	8002db0 <HAL_GetTick>
 80041dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041de:	e008      	b.n	80041f2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041e0:	f7fe fde6 	bl	8002db0 <HAL_GetTick>
 80041e4:	4602      	mov	r2, r0
 80041e6:	693b      	ldr	r3, [r7, #16]
 80041e8:	1ad3      	subs	r3, r2, r3
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d901      	bls.n	80041f2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e184      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041f2:	4b36      	ldr	r3, [pc, #216]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0302 	and.w	r3, r3, #2
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d1f0      	bne.n	80041e0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	f003 0308 	and.w	r3, r3, #8
 8004206:	2b00      	cmp	r3, #0
 8004208:	d030      	beq.n	800426c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	2b00      	cmp	r3, #0
 8004210:	d016      	beq.n	8004240 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004212:	4b30      	ldr	r3, [pc, #192]	; (80042d4 <HAL_RCC_OscConfig+0x2b4>)
 8004214:	2201      	movs	r2, #1
 8004216:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004218:	f7fe fdca 	bl	8002db0 <HAL_GetTick>
 800421c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800421e:	e008      	b.n	8004232 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004220:	f7fe fdc6 	bl	8002db0 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	1ad3      	subs	r3, r2, r3
 800422a:	2b02      	cmp	r3, #2
 800422c:	d901      	bls.n	8004232 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800422e:	2303      	movs	r3, #3
 8004230:	e164      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004232:	4b26      	ldr	r3, [pc, #152]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004234:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004236:	f003 0302 	and.w	r3, r3, #2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d0f0      	beq.n	8004220 <HAL_RCC_OscConfig+0x200>
 800423e:	e015      	b.n	800426c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004240:	4b24      	ldr	r3, [pc, #144]	; (80042d4 <HAL_RCC_OscConfig+0x2b4>)
 8004242:	2200      	movs	r2, #0
 8004244:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004246:	f7fe fdb3 	bl	8002db0 <HAL_GetTick>
 800424a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800424c:	e008      	b.n	8004260 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800424e:	f7fe fdaf 	bl	8002db0 <HAL_GetTick>
 8004252:	4602      	mov	r2, r0
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	1ad3      	subs	r3, r2, r3
 8004258:	2b02      	cmp	r3, #2
 800425a:	d901      	bls.n	8004260 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800425c:	2303      	movs	r3, #3
 800425e:	e14d      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b1a      	ldr	r3, [pc, #104]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1f0      	bne.n	800424e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 80a0 	beq.w	80043ba <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b13      	ldr	r3, [pc, #76]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b0f      	ldr	r3, [pc, #60]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a0e      	ldr	r2, [pc, #56]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	4b0c      	ldr	r3, [pc, #48]	; (80042cc <HAL_RCC_OscConfig+0x2ac>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b0b      	ldr	r3, [pc, #44]	; (80042d8 <HAL_RCC_OscConfig+0x2b8>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d121      	bne.n	80042fa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b08      	ldr	r3, [pc, #32]	; (80042d8 <HAL_RCC_OscConfig+0x2b8>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a07      	ldr	r2, [pc, #28]	; (80042d8 <HAL_RCC_OscConfig+0x2b8>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fe fd75 	bl	8002db0 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e011      	b.n	80042ee <HAL_RCC_OscConfig+0x2ce>
 80042ca:	bf00      	nop
 80042cc:	40023800 	.word	0x40023800
 80042d0:	42470000 	.word	0x42470000
 80042d4:	42470e80 	.word	0x42470e80
 80042d8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042dc:	f7fe fd68 	bl	8002db0 <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e106      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042ee:	4b85      	ldr	r3, [pc, #532]	; (8004504 <HAL_RCC_OscConfig+0x4e4>)
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b01      	cmp	r3, #1
 8004300:	d106      	bne.n	8004310 <HAL_RCC_OscConfig+0x2f0>
 8004302:	4b81      	ldr	r3, [pc, #516]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004306:	4a80      	ldr	r2, [pc, #512]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004308:	f043 0301 	orr.w	r3, r3, #1
 800430c:	6713      	str	r3, [r2, #112]	; 0x70
 800430e:	e01c      	b.n	800434a <HAL_RCC_OscConfig+0x32a>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	2b05      	cmp	r3, #5
 8004316:	d10c      	bne.n	8004332 <HAL_RCC_OscConfig+0x312>
 8004318:	4b7b      	ldr	r3, [pc, #492]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 800431a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800431c:	4a7a      	ldr	r2, [pc, #488]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 800431e:	f043 0304 	orr.w	r3, r3, #4
 8004322:	6713      	str	r3, [r2, #112]	; 0x70
 8004324:	4b78      	ldr	r3, [pc, #480]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	4a77      	ldr	r2, [pc, #476]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 800432a:	f043 0301 	orr.w	r3, r3, #1
 800432e:	6713      	str	r3, [r2, #112]	; 0x70
 8004330:	e00b      	b.n	800434a <HAL_RCC_OscConfig+0x32a>
 8004332:	4b75      	ldr	r3, [pc, #468]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004336:	4a74      	ldr	r2, [pc, #464]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004338:	f023 0301 	bic.w	r3, r3, #1
 800433c:	6713      	str	r3, [r2, #112]	; 0x70
 800433e:	4b72      	ldr	r3, [pc, #456]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004340:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004342:	4a71      	ldr	r2, [pc, #452]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004344:	f023 0304 	bic.w	r3, r3, #4
 8004348:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d015      	beq.n	800437e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004352:	f7fe fd2d 	bl	8002db0 <HAL_GetTick>
 8004356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004358:	e00a      	b.n	8004370 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800435a:	f7fe fd29 	bl	8002db0 <HAL_GetTick>
 800435e:	4602      	mov	r2, r0
 8004360:	693b      	ldr	r3, [r7, #16]
 8004362:	1ad3      	subs	r3, r2, r3
 8004364:	f241 3288 	movw	r2, #5000	; 0x1388
 8004368:	4293      	cmp	r3, r2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e0c5      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004370:	4b65      	ldr	r3, [pc, #404]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004374:	f003 0302 	and.w	r3, r3, #2
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0ee      	beq.n	800435a <HAL_RCC_OscConfig+0x33a>
 800437c:	e014      	b.n	80043a8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800437e:	f7fe fd17 	bl	8002db0 <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004384:	e00a      	b.n	800439c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004386:	f7fe fd13 	bl	8002db0 <HAL_GetTick>
 800438a:	4602      	mov	r2, r0
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	1ad3      	subs	r3, r2, r3
 8004390:	f241 3288 	movw	r2, #5000	; 0x1388
 8004394:	4293      	cmp	r3, r2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e0af      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800439c:	4b5a      	ldr	r3, [pc, #360]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 800439e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043a0:	f003 0302 	and.w	r3, r3, #2
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d1ee      	bne.n	8004386 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80043a8:	7dfb      	ldrb	r3, [r7, #23]
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d105      	bne.n	80043ba <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80043ae:	4b56      	ldr	r3, [pc, #344]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 80043b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043b2:	4a55      	ldr	r2, [pc, #340]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 80043b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043b8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	699b      	ldr	r3, [r3, #24]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	f000 809b 	beq.w	80044fa <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043c4:	4b50      	ldr	r3, [pc, #320]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 80043c6:	689b      	ldr	r3, [r3, #8]
 80043c8:	f003 030c 	and.w	r3, r3, #12
 80043cc:	2b08      	cmp	r3, #8
 80043ce:	d05c      	beq.n	800448a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	699b      	ldr	r3, [r3, #24]
 80043d4:	2b02      	cmp	r3, #2
 80043d6:	d141      	bne.n	800445c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d8:	4b4c      	ldr	r3, [pc, #304]	; (800450c <HAL_RCC_OscConfig+0x4ec>)
 80043da:	2200      	movs	r2, #0
 80043dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043de:	f7fe fce7 	bl	8002db0 <HAL_GetTick>
 80043e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e4:	e008      	b.n	80043f8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043e6:	f7fe fce3 	bl	8002db0 <HAL_GetTick>
 80043ea:	4602      	mov	r2, r0
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d901      	bls.n	80043f8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80043f4:	2303      	movs	r3, #3
 80043f6:	e081      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f8:	4b43      	ldr	r3, [pc, #268]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d1f0      	bne.n	80043e6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69da      	ldr	r2, [r3, #28]
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	6a1b      	ldr	r3, [r3, #32]
 800440c:	431a      	orrs	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004412:	019b      	lsls	r3, r3, #6
 8004414:	431a      	orrs	r2, r3
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441a:	085b      	lsrs	r3, r3, #1
 800441c:	3b01      	subs	r3, #1
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	431a      	orrs	r2, r3
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004426:	061b      	lsls	r3, r3, #24
 8004428:	4937      	ldr	r1, [pc, #220]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 800442a:	4313      	orrs	r3, r2
 800442c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800442e:	4b37      	ldr	r3, [pc, #220]	; (800450c <HAL_RCC_OscConfig+0x4ec>)
 8004430:	2201      	movs	r2, #1
 8004432:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004434:	f7fe fcbc 	bl	8002db0 <HAL_GetTick>
 8004438:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443a:	e008      	b.n	800444e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800443c:	f7fe fcb8 	bl	8002db0 <HAL_GetTick>
 8004440:	4602      	mov	r2, r0
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	1ad3      	subs	r3, r2, r3
 8004446:	2b02      	cmp	r3, #2
 8004448:	d901      	bls.n	800444e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800444a:	2303      	movs	r3, #3
 800444c:	e056      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800444e:	4b2e      	ldr	r3, [pc, #184]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004456:	2b00      	cmp	r3, #0
 8004458:	d0f0      	beq.n	800443c <HAL_RCC_OscConfig+0x41c>
 800445a:	e04e      	b.n	80044fa <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800445c:	4b2b      	ldr	r3, [pc, #172]	; (800450c <HAL_RCC_OscConfig+0x4ec>)
 800445e:	2200      	movs	r2, #0
 8004460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004462:	f7fe fca5 	bl	8002db0 <HAL_GetTick>
 8004466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004468:	e008      	b.n	800447c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800446a:	f7fe fca1 	bl	8002db0 <HAL_GetTick>
 800446e:	4602      	mov	r2, r0
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	1ad3      	subs	r3, r2, r3
 8004474:	2b02      	cmp	r3, #2
 8004476:	d901      	bls.n	800447c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004478:	2303      	movs	r3, #3
 800447a:	e03f      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800447c:	4b22      	ldr	r3, [pc, #136]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004484:	2b00      	cmp	r3, #0
 8004486:	d1f0      	bne.n	800446a <HAL_RCC_OscConfig+0x44a>
 8004488:	e037      	b.n	80044fa <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	699b      	ldr	r3, [r3, #24]
 800448e:	2b01      	cmp	r3, #1
 8004490:	d101      	bne.n	8004496 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004492:	2301      	movs	r3, #1
 8004494:	e032      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004496:	4b1c      	ldr	r3, [pc, #112]	; (8004508 <HAL_RCC_OscConfig+0x4e8>)
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d028      	beq.n	80044f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044a4:	68fb      	ldr	r3, [r7, #12]
 80044a6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d121      	bne.n	80044f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044bc:	429a      	cmp	r2, r3
 80044be:	d11a      	bne.n	80044f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044c0:	68fa      	ldr	r2, [r7, #12]
 80044c2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044c6:	4013      	ands	r3, r2
 80044c8:	687a      	ldr	r2, [r7, #4]
 80044ca:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044cc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d111      	bne.n	80044f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	085b      	lsrs	r3, r3, #1
 80044de:	3b01      	subs	r3, #1
 80044e0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d107      	bne.n	80044f6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044f0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044f2:	429a      	cmp	r2, r3
 80044f4:	d001      	beq.n	80044fa <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80044f6:	2301      	movs	r3, #1
 80044f8:	e000      	b.n	80044fc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3718      	adds	r7, #24
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	40007000 	.word	0x40007000
 8004508:	40023800 	.word	0x40023800
 800450c:	42470060 	.word	0x42470060

08004510 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b084      	sub	sp, #16
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
 8004518:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2b00      	cmp	r3, #0
 800451e:	d101      	bne.n	8004524 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004520:	2301      	movs	r3, #1
 8004522:	e0cc      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004524:	4b68      	ldr	r3, [pc, #416]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	429a      	cmp	r2, r3
 8004530:	d90c      	bls.n	800454c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004532:	4b65      	ldr	r3, [pc, #404]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004534:	683a      	ldr	r2, [r7, #0]
 8004536:	b2d2      	uxtb	r2, r2
 8004538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800453a:	4b63      	ldr	r3, [pc, #396]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f003 0307 	and.w	r3, r3, #7
 8004542:	683a      	ldr	r2, [r7, #0]
 8004544:	429a      	cmp	r2, r3
 8004546:	d001      	beq.n	800454c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004548:	2301      	movs	r3, #1
 800454a:	e0b8      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0302 	and.w	r3, r3, #2
 8004554:	2b00      	cmp	r3, #0
 8004556:	d020      	beq.n	800459a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 0304 	and.w	r3, r3, #4
 8004560:	2b00      	cmp	r3, #0
 8004562:	d005      	beq.n	8004570 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004564:	4b59      	ldr	r3, [pc, #356]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004566:	689b      	ldr	r3, [r3, #8]
 8004568:	4a58      	ldr	r2, [pc, #352]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800456a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800456e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f003 0308 	and.w	r3, r3, #8
 8004578:	2b00      	cmp	r3, #0
 800457a:	d005      	beq.n	8004588 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800457c:	4b53      	ldr	r3, [pc, #332]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	4a52      	ldr	r2, [pc, #328]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004582:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004586:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004588:	4b50      	ldr	r3, [pc, #320]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	494d      	ldr	r1, [pc, #308]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004596:	4313      	orrs	r3, r2
 8004598:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d044      	beq.n	8004630 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	685b      	ldr	r3, [r3, #4]
 80045aa:	2b01      	cmp	r3, #1
 80045ac:	d107      	bne.n	80045be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045ae:	4b47      	ldr	r3, [pc, #284]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d119      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ba:	2301      	movs	r3, #1
 80045bc:	e07f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	2b02      	cmp	r3, #2
 80045c4:	d003      	beq.n	80045ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045ca:	2b03      	cmp	r3, #3
 80045cc:	d107      	bne.n	80045de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045ce:	4b3f      	ldr	r3, [pc, #252]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d109      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045da:	2301      	movs	r3, #1
 80045dc:	e06f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045de:	4b3b      	ldr	r3, [pc, #236]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e067      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045ee:	4b37      	ldr	r3, [pc, #220]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	689b      	ldr	r3, [r3, #8]
 80045f2:	f023 0203 	bic.w	r2, r3, #3
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	685b      	ldr	r3, [r3, #4]
 80045fa:	4934      	ldr	r1, [pc, #208]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	4313      	orrs	r3, r2
 80045fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004600:	f7fe fbd6 	bl	8002db0 <HAL_GetTick>
 8004604:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004606:	e00a      	b.n	800461e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004608:	f7fe fbd2 	bl	8002db0 <HAL_GetTick>
 800460c:	4602      	mov	r2, r0
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	1ad3      	subs	r3, r2, r3
 8004612:	f241 3288 	movw	r2, #5000	; 0x1388
 8004616:	4293      	cmp	r3, r2
 8004618:	d901      	bls.n	800461e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800461a:	2303      	movs	r3, #3
 800461c:	e04f      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800461e:	4b2b      	ldr	r3, [pc, #172]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	f003 020c 	and.w	r2, r3, #12
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	685b      	ldr	r3, [r3, #4]
 800462a:	009b      	lsls	r3, r3, #2
 800462c:	429a      	cmp	r2, r3
 800462e:	d1eb      	bne.n	8004608 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004630:	4b25      	ldr	r3, [pc, #148]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	429a      	cmp	r2, r3
 800463c:	d20c      	bcs.n	8004658 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800463e:	4b22      	ldr	r3, [pc, #136]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	b2d2      	uxtb	r2, r2
 8004644:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004646:	4b20      	ldr	r3, [pc, #128]	; (80046c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f003 0307 	and.w	r3, r3, #7
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	429a      	cmp	r2, r3
 8004652:	d001      	beq.n	8004658 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004654:	2301      	movs	r3, #1
 8004656:	e032      	b.n	80046be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	f003 0304 	and.w	r3, r3, #4
 8004660:	2b00      	cmp	r3, #0
 8004662:	d008      	beq.n	8004676 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004664:	4b19      	ldr	r3, [pc, #100]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	689b      	ldr	r3, [r3, #8]
 8004668:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	68db      	ldr	r3, [r3, #12]
 8004670:	4916      	ldr	r1, [pc, #88]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004672:	4313      	orrs	r3, r2
 8004674:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f003 0308 	and.w	r3, r3, #8
 800467e:	2b00      	cmp	r3, #0
 8004680:	d009      	beq.n	8004696 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004682:	4b12      	ldr	r3, [pc, #72]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004684:	689b      	ldr	r3, [r3, #8]
 8004686:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	00db      	lsls	r3, r3, #3
 8004690:	490e      	ldr	r1, [pc, #56]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	4313      	orrs	r3, r2
 8004694:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004696:	f000 f821 	bl	80046dc <HAL_RCC_GetSysClockFreq>
 800469a:	4602      	mov	r2, r0
 800469c:	4b0b      	ldr	r3, [pc, #44]	; (80046cc <HAL_RCC_ClockConfig+0x1bc>)
 800469e:	689b      	ldr	r3, [r3, #8]
 80046a0:	091b      	lsrs	r3, r3, #4
 80046a2:	f003 030f 	and.w	r3, r3, #15
 80046a6:	490a      	ldr	r1, [pc, #40]	; (80046d0 <HAL_RCC_ClockConfig+0x1c0>)
 80046a8:	5ccb      	ldrb	r3, [r1, r3]
 80046aa:	fa22 f303 	lsr.w	r3, r2, r3
 80046ae:	4a09      	ldr	r2, [pc, #36]	; (80046d4 <HAL_RCC_ClockConfig+0x1c4>)
 80046b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046b2:	4b09      	ldr	r3, [pc, #36]	; (80046d8 <HAL_RCC_ClockConfig+0x1c8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fe f92a 	bl	8002910 <HAL_InitTick>

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	40023c00 	.word	0x40023c00
 80046cc:	40023800 	.word	0x40023800
 80046d0:	080084d0 	.word	0x080084d0
 80046d4:	200001d4 	.word	0x200001d4
 80046d8:	200001d8 	.word	0x200001d8

080046dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80046e0:	b084      	sub	sp, #16
 80046e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	2300      	movs	r3, #0
 80046ea:	60fb      	str	r3, [r7, #12]
 80046ec:	2300      	movs	r3, #0
 80046ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80046f0:	2300      	movs	r3, #0
 80046f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046f4:	4b67      	ldr	r3, [pc, #412]	; (8004894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80046f6:	689b      	ldr	r3, [r3, #8]
 80046f8:	f003 030c 	and.w	r3, r3, #12
 80046fc:	2b08      	cmp	r3, #8
 80046fe:	d00d      	beq.n	800471c <HAL_RCC_GetSysClockFreq+0x40>
 8004700:	2b08      	cmp	r3, #8
 8004702:	f200 80bd 	bhi.w	8004880 <HAL_RCC_GetSysClockFreq+0x1a4>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x34>
 800470a:	2b04      	cmp	r3, #4
 800470c:	d003      	beq.n	8004716 <HAL_RCC_GetSysClockFreq+0x3a>
 800470e:	e0b7      	b.n	8004880 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004710:	4b61      	ldr	r3, [pc, #388]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004712:	60bb      	str	r3, [r7, #8]
       break;
 8004714:	e0b7      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004716:	4b61      	ldr	r3, [pc, #388]	; (800489c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004718:	60bb      	str	r3, [r7, #8]
      break;
 800471a:	e0b4      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800471c:	4b5d      	ldr	r3, [pc, #372]	; (8004894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800471e:	685b      	ldr	r3, [r3, #4]
 8004720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004724:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004726:	4b5b      	ldr	r3, [pc, #364]	; (8004894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d04d      	beq.n	80047ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004732:	4b58      	ldr	r3, [pc, #352]	; (8004894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004734:	685b      	ldr	r3, [r3, #4]
 8004736:	099b      	lsrs	r3, r3, #6
 8004738:	461a      	mov	r2, r3
 800473a:	f04f 0300 	mov.w	r3, #0
 800473e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8004742:	f04f 0100 	mov.w	r1, #0
 8004746:	ea02 0800 	and.w	r8, r2, r0
 800474a:	ea03 0901 	and.w	r9, r3, r1
 800474e:	4640      	mov	r0, r8
 8004750:	4649      	mov	r1, r9
 8004752:	f04f 0200 	mov.w	r2, #0
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	014b      	lsls	r3, r1, #5
 800475c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004760:	0142      	lsls	r2, r0, #5
 8004762:	4610      	mov	r0, r2
 8004764:	4619      	mov	r1, r3
 8004766:	ebb0 0008 	subs.w	r0, r0, r8
 800476a:	eb61 0109 	sbc.w	r1, r1, r9
 800476e:	f04f 0200 	mov.w	r2, #0
 8004772:	f04f 0300 	mov.w	r3, #0
 8004776:	018b      	lsls	r3, r1, #6
 8004778:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800477c:	0182      	lsls	r2, r0, #6
 800477e:	1a12      	subs	r2, r2, r0
 8004780:	eb63 0301 	sbc.w	r3, r3, r1
 8004784:	f04f 0000 	mov.w	r0, #0
 8004788:	f04f 0100 	mov.w	r1, #0
 800478c:	00d9      	lsls	r1, r3, #3
 800478e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004792:	00d0      	lsls	r0, r2, #3
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	eb12 0208 	adds.w	r2, r2, r8
 800479c:	eb43 0309 	adc.w	r3, r3, r9
 80047a0:	f04f 0000 	mov.w	r0, #0
 80047a4:	f04f 0100 	mov.w	r1, #0
 80047a8:	0259      	lsls	r1, r3, #9
 80047aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80047ae:	0250      	lsls	r0, r2, #9
 80047b0:	4602      	mov	r2, r0
 80047b2:	460b      	mov	r3, r1
 80047b4:	4610      	mov	r0, r2
 80047b6:	4619      	mov	r1, r3
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	461a      	mov	r2, r3
 80047bc:	f04f 0300 	mov.w	r3, #0
 80047c0:	f7fb fd02 	bl	80001c8 <__aeabi_uldivmod>
 80047c4:	4602      	mov	r2, r0
 80047c6:	460b      	mov	r3, r1
 80047c8:	4613      	mov	r3, r2
 80047ca:	60fb      	str	r3, [r7, #12]
 80047cc:	e04a      	b.n	8004864 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ce:	4b31      	ldr	r3, [pc, #196]	; (8004894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047d0:	685b      	ldr	r3, [r3, #4]
 80047d2:	099b      	lsrs	r3, r3, #6
 80047d4:	461a      	mov	r2, r3
 80047d6:	f04f 0300 	mov.w	r3, #0
 80047da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047de:	f04f 0100 	mov.w	r1, #0
 80047e2:	ea02 0400 	and.w	r4, r2, r0
 80047e6:	ea03 0501 	and.w	r5, r3, r1
 80047ea:	4620      	mov	r0, r4
 80047ec:	4629      	mov	r1, r5
 80047ee:	f04f 0200 	mov.w	r2, #0
 80047f2:	f04f 0300 	mov.w	r3, #0
 80047f6:	014b      	lsls	r3, r1, #5
 80047f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80047fc:	0142      	lsls	r2, r0, #5
 80047fe:	4610      	mov	r0, r2
 8004800:	4619      	mov	r1, r3
 8004802:	1b00      	subs	r0, r0, r4
 8004804:	eb61 0105 	sbc.w	r1, r1, r5
 8004808:	f04f 0200 	mov.w	r2, #0
 800480c:	f04f 0300 	mov.w	r3, #0
 8004810:	018b      	lsls	r3, r1, #6
 8004812:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004816:	0182      	lsls	r2, r0, #6
 8004818:	1a12      	subs	r2, r2, r0
 800481a:	eb63 0301 	sbc.w	r3, r3, r1
 800481e:	f04f 0000 	mov.w	r0, #0
 8004822:	f04f 0100 	mov.w	r1, #0
 8004826:	00d9      	lsls	r1, r3, #3
 8004828:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800482c:	00d0      	lsls	r0, r2, #3
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	1912      	adds	r2, r2, r4
 8004834:	eb45 0303 	adc.w	r3, r5, r3
 8004838:	f04f 0000 	mov.w	r0, #0
 800483c:	f04f 0100 	mov.w	r1, #0
 8004840:	0299      	lsls	r1, r3, #10
 8004842:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004846:	0290      	lsls	r0, r2, #10
 8004848:	4602      	mov	r2, r0
 800484a:	460b      	mov	r3, r1
 800484c:	4610      	mov	r0, r2
 800484e:	4619      	mov	r1, r3
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	461a      	mov	r2, r3
 8004854:	f04f 0300 	mov.w	r3, #0
 8004858:	f7fb fcb6 	bl	80001c8 <__aeabi_uldivmod>
 800485c:	4602      	mov	r2, r0
 800485e:	460b      	mov	r3, r1
 8004860:	4613      	mov	r3, r2
 8004862:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004864:	4b0b      	ldr	r3, [pc, #44]	; (8004894 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	0c1b      	lsrs	r3, r3, #16
 800486a:	f003 0303 	and.w	r3, r3, #3
 800486e:	3301      	adds	r3, #1
 8004870:	005b      	lsls	r3, r3, #1
 8004872:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004874:	68fa      	ldr	r2, [r7, #12]
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	fbb2 f3f3 	udiv	r3, r2, r3
 800487c:	60bb      	str	r3, [r7, #8]
      break;
 800487e:	e002      	b.n	8004886 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004880:	4b05      	ldr	r3, [pc, #20]	; (8004898 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8004882:	60bb      	str	r3, [r7, #8]
      break;
 8004884:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004886:	68bb      	ldr	r3, [r7, #8]
}
 8004888:	4618      	mov	r0, r3
 800488a:	3710      	adds	r7, #16
 800488c:	46bd      	mov	sp, r7
 800488e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004892:	bf00      	nop
 8004894:	40023800 	.word	0x40023800
 8004898:	00f42400 	.word	0x00f42400
 800489c:	007a1200 	.word	0x007a1200

080048a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048a0:	b480      	push	{r7}
 80048a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048a4:	4b03      	ldr	r3, [pc, #12]	; (80048b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80048a6:	681b      	ldr	r3, [r3, #0]
}
 80048a8:	4618      	mov	r0, r3
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	200001d4 	.word	0x200001d4

080048b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048b8:	b580      	push	{r7, lr}
 80048ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048bc:	f7ff fff0 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048c0:	4602      	mov	r2, r0
 80048c2:	4b05      	ldr	r3, [pc, #20]	; (80048d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80048c4:	689b      	ldr	r3, [r3, #8]
 80048c6:	0a9b      	lsrs	r3, r3, #10
 80048c8:	f003 0307 	and.w	r3, r3, #7
 80048cc:	4903      	ldr	r1, [pc, #12]	; (80048dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80048ce:	5ccb      	ldrb	r3, [r1, r3]
 80048d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	bd80      	pop	{r7, pc}
 80048d8:	40023800 	.word	0x40023800
 80048dc:	080084e0 	.word	0x080084e0

080048e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80048e0:	b580      	push	{r7, lr}
 80048e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80048e4:	f7ff ffdc 	bl	80048a0 <HAL_RCC_GetHCLKFreq>
 80048e8:	4602      	mov	r2, r0
 80048ea:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_RCC_GetPCLK2Freq+0x20>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	0b5b      	lsrs	r3, r3, #13
 80048f0:	f003 0307 	and.w	r3, r3, #7
 80048f4:	4903      	ldr	r1, [pc, #12]	; (8004904 <HAL_RCC_GetPCLK2Freq+0x24>)
 80048f6:	5ccb      	ldrb	r3, [r1, r3]
 80048f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	bd80      	pop	{r7, pc}
 8004900:	40023800 	.word	0x40023800
 8004904:	080084e0 	.word	0x080084e0

08004908 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004908:	b480      	push	{r7}
 800490a:	b083      	sub	sp, #12
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	220f      	movs	r2, #15
 8004916:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004918:	4b12      	ldr	r3, [pc, #72]	; (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	f003 0203 	and.w	r2, r3, #3
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004924:	4b0f      	ldr	r3, [pc, #60]	; (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 8004926:	689b      	ldr	r3, [r3, #8]
 8004928:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004930:	4b0c      	ldr	r3, [pc, #48]	; (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 8004932:	689b      	ldr	r3, [r3, #8]
 8004934:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800493c:	4b09      	ldr	r3, [pc, #36]	; (8004964 <HAL_RCC_GetClockConfig+0x5c>)
 800493e:	689b      	ldr	r3, [r3, #8]
 8004940:	08db      	lsrs	r3, r3, #3
 8004942:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800494a:	4b07      	ldr	r3, [pc, #28]	; (8004968 <HAL_RCC_GetClockConfig+0x60>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0207 	and.w	r2, r3, #7
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	601a      	str	r2, [r3, #0]
}
 8004956:	bf00      	nop
 8004958:	370c      	adds	r7, #12
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40023800 	.word	0x40023800
 8004968:	40023c00 	.word	0x40023c00

0800496c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800496c:	b580      	push	{r7, lr}
 800496e:	b082      	sub	sp, #8
 8004970:	af00      	add	r7, sp, #0
 8004972:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d101      	bne.n	800497e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e07b      	b.n	8004a76 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004982:	2b00      	cmp	r3, #0
 8004984:	d108      	bne.n	8004998 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	685b      	ldr	r3, [r3, #4]
 800498a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800498e:	d009      	beq.n	80049a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	61da      	str	r2, [r3, #28]
 8004996:	e005      	b.n	80049a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2200      	movs	r2, #0
 800499c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2200      	movs	r2, #0
 80049a8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d106      	bne.n	80049c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	2200      	movs	r2, #0
 80049ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80049be:	6878      	ldr	r0, [r7, #4]
 80049c0:	f7fd fb74 	bl	80020ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2202      	movs	r2, #2
 80049c8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	68db      	ldr	r3, [r3, #12]
 80049f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	691b      	ldr	r3, [r3, #16]
 80049fc:	f003 0302 	and.w	r3, r3, #2
 8004a00:	431a      	orrs	r2, r3
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	695b      	ldr	r3, [r3, #20]
 8004a06:	f003 0301 	and.w	r3, r3, #1
 8004a0a:	431a      	orrs	r2, r3
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	699b      	ldr	r3, [r3, #24]
 8004a10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a14:	431a      	orrs	r2, r3
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	69db      	ldr	r3, [r3, #28]
 8004a1a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004a1e:	431a      	orrs	r2, r3
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	6a1b      	ldr	r3, [r3, #32]
 8004a24:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a28:	ea42 0103 	orr.w	r1, r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a30:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	430a      	orrs	r2, r1
 8004a3a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	699b      	ldr	r3, [r3, #24]
 8004a40:	0c1b      	lsrs	r3, r3, #16
 8004a42:	f003 0104 	and.w	r1, r3, #4
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a4a:	f003 0210 	and.w	r2, r3, #16
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	430a      	orrs	r2, r1
 8004a54:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	69da      	ldr	r2, [r3, #28]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a64:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b088      	sub	sp, #32
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	60f8      	str	r0, [r7, #12]
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	603b      	str	r3, [r7, #0]
 8004a8a:	4613      	mov	r3, r2
 8004a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d101      	bne.n	8004aa0 <HAL_SPI_Transmit+0x22>
 8004a9c:	2302      	movs	r3, #2
 8004a9e:	e126      	b.n	8004cee <HAL_SPI_Transmit+0x270>
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2201      	movs	r2, #1
 8004aa4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004aa8:	f7fe f982 	bl	8002db0 <HAL_GetTick>
 8004aac:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004aae:	88fb      	ldrh	r3, [r7, #6]
 8004ab0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d002      	beq.n	8004ac4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004abe:	2302      	movs	r3, #2
 8004ac0:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ac2:	e10b      	b.n	8004cdc <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004ac4:	68bb      	ldr	r3, [r7, #8]
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d002      	beq.n	8004ad0 <HAL_SPI_Transmit+0x52>
 8004aca:	88fb      	ldrh	r3, [r7, #6]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d102      	bne.n	8004ad6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004ad4:	e102      	b.n	8004cdc <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	2203      	movs	r2, #3
 8004ada:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	68ba      	ldr	r2, [r7, #8]
 8004ae8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	88fa      	ldrh	r2, [r7, #6]
 8004aee:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	88fa      	ldrh	r2, [r7, #6]
 8004af4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	2200      	movs	r2, #0
 8004afa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	2200      	movs	r2, #0
 8004b00:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	2200      	movs	r2, #0
 8004b06:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	2200      	movs	r2, #0
 8004b12:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	689b      	ldr	r3, [r3, #8]
 8004b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004b1c:	d10f      	bne.n	8004b3e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681a      	ldr	r2, [r3, #0]
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b2c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b3c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b48:	2b40      	cmp	r3, #64	; 0x40
 8004b4a:	d007      	beq.n	8004b5c <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	681a      	ldr	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b5a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b64:	d14b      	bne.n	8004bfe <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d002      	beq.n	8004b74 <HAL_SPI_Transmit+0xf6>
 8004b6e:	8afb      	ldrh	r3, [r7, #22]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d13e      	bne.n	8004bf2 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b78:	881a      	ldrh	r2, [r3, #0]
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	1c9a      	adds	r2, r3, #2
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	3b01      	subs	r3, #1
 8004b92:	b29a      	uxth	r2, r3
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b98:	e02b      	b.n	8004bf2 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	f003 0302 	and.w	r3, r3, #2
 8004ba4:	2b02      	cmp	r3, #2
 8004ba6:	d112      	bne.n	8004bce <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bac:	881a      	ldrh	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb8:	1c9a      	adds	r2, r3, #2
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bc2:	b29b      	uxth	r3, r3
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bcc:	e011      	b.n	8004bf2 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bce:	f7fe f8ef 	bl	8002db0 <HAL_GetTick>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	683a      	ldr	r2, [r7, #0]
 8004bda:	429a      	cmp	r2, r3
 8004bdc:	d803      	bhi.n	8004be6 <HAL_SPI_Transmit+0x168>
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004be4:	d102      	bne.n	8004bec <HAL_SPI_Transmit+0x16e>
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d102      	bne.n	8004bf2 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bec:	2303      	movs	r3, #3
 8004bee:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bf0:	e074      	b.n	8004cdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bf6:	b29b      	uxth	r3, r3
 8004bf8:	2b00      	cmp	r3, #0
 8004bfa:	d1ce      	bne.n	8004b9a <HAL_SPI_Transmit+0x11c>
 8004bfc:	e04c      	b.n	8004c98 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <HAL_SPI_Transmit+0x18e>
 8004c06:	8afb      	ldrh	r3, [r7, #22]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	d140      	bne.n	8004c8e <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	330c      	adds	r3, #12
 8004c16:	7812      	ldrb	r2, [r2, #0]
 8004c18:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c1e:	1c5a      	adds	r2, r3, #1
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	3b01      	subs	r3, #1
 8004c2c:	b29a      	uxth	r2, r3
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c32:	e02c      	b.n	8004c8e <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	689b      	ldr	r3, [r3, #8]
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b02      	cmp	r3, #2
 8004c40:	d113      	bne.n	8004c6a <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	330c      	adds	r3, #12
 8004c4c:	7812      	ldrb	r2, [r2, #0]
 8004c4e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c54:	1c5a      	adds	r2, r3, #1
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c68:	e011      	b.n	8004c8e <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c6a:	f7fe f8a1 	bl	8002db0 <HAL_GetTick>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	1ad3      	subs	r3, r2, r3
 8004c74:	683a      	ldr	r2, [r7, #0]
 8004c76:	429a      	cmp	r2, r3
 8004c78:	d803      	bhi.n	8004c82 <HAL_SPI_Transmit+0x204>
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c80:	d102      	bne.n	8004c88 <HAL_SPI_Transmit+0x20a>
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d102      	bne.n	8004c8e <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c88:	2303      	movs	r3, #3
 8004c8a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c8c:	e026      	b.n	8004cdc <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c92:	b29b      	uxth	r3, r3
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d1cd      	bne.n	8004c34 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	6839      	ldr	r1, [r7, #0]
 8004c9c:	68f8      	ldr	r0, [r7, #12]
 8004c9e:	f000 f8b3 	bl	8004e08 <SPI_EndRxTxTransaction>
 8004ca2:	4603      	mov	r3, r0
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d002      	beq.n	8004cae <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	2220      	movs	r2, #32
 8004cac:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b00      	cmp	r3, #0
 8004cb4:	d10a      	bne.n	8004ccc <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	613b      	str	r3, [r7, #16]
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	68db      	ldr	r3, [r3, #12]
 8004cc0:	613b      	str	r3, [r7, #16]
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	613b      	str	r3, [r7, #16]
 8004cca:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d002      	beq.n	8004cda <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	77fb      	strb	r3, [r7, #31]
 8004cd8:	e000      	b.n	8004cdc <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cda:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2201      	movs	r2, #1
 8004ce0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cec:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	3720      	adds	r7, #32
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b088      	sub	sp, #32
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	603b      	str	r3, [r7, #0]
 8004d04:	4613      	mov	r3, r2
 8004d06:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004d08:	f7fe f852 	bl	8002db0 <HAL_GetTick>
 8004d0c:	4602      	mov	r2, r0
 8004d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d10:	1a9b      	subs	r3, r3, r2
 8004d12:	683a      	ldr	r2, [r7, #0]
 8004d14:	4413      	add	r3, r2
 8004d16:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004d18:	f7fe f84a 	bl	8002db0 <HAL_GetTick>
 8004d1c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004d1e:	4b39      	ldr	r3, [pc, #228]	; (8004e04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	015b      	lsls	r3, r3, #5
 8004d24:	0d1b      	lsrs	r3, r3, #20
 8004d26:	69fa      	ldr	r2, [r7, #28]
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d2e:	e054      	b.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d36:	d050      	beq.n	8004dda <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d38:	f7fe f83a 	bl	8002db0 <HAL_GetTick>
 8004d3c:	4602      	mov	r2, r0
 8004d3e:	69bb      	ldr	r3, [r7, #24]
 8004d40:	1ad3      	subs	r3, r2, r3
 8004d42:	69fa      	ldr	r2, [r7, #28]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d902      	bls.n	8004d4e <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d13d      	bne.n	8004dca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	685a      	ldr	r2, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d5c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d66:	d111      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	689b      	ldr	r3, [r3, #8]
 8004d6c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d70:	d004      	beq.n	8004d7c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d7a:	d107      	bne.n	8004d8c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	681a      	ldr	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d8a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d90:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d94:	d10f      	bne.n	8004db6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004da4:	601a      	str	r2, [r3, #0]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004db4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2201      	movs	r2, #1
 8004dba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	2200      	movs	r2, #0
 8004dc2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004dc6:	2303      	movs	r3, #3
 8004dc8:	e017      	b.n	8004dfa <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d101      	bne.n	8004dd4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004dd0:	2300      	movs	r3, #0
 8004dd2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	3b01      	subs	r3, #1
 8004dd8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	689a      	ldr	r2, [r3, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	4013      	ands	r3, r2
 8004de4:	68ba      	ldr	r2, [r7, #8]
 8004de6:	429a      	cmp	r2, r3
 8004de8:	bf0c      	ite	eq
 8004dea:	2301      	moveq	r3, #1
 8004dec:	2300      	movne	r3, #0
 8004dee:	b2db      	uxtb	r3, r3
 8004df0:	461a      	mov	r2, r3
 8004df2:	79fb      	ldrb	r3, [r7, #7]
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d19b      	bne.n	8004d30 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004df8:	2300      	movs	r3, #0
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3720      	adds	r7, #32
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	bd80      	pop	{r7, pc}
 8004e02:	bf00      	nop
 8004e04:	200001d4 	.word	0x200001d4

08004e08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004e14:	4b1b      	ldr	r3, [pc, #108]	; (8004e84 <SPI_EndRxTxTransaction+0x7c>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a1b      	ldr	r2, [pc, #108]	; (8004e88 <SPI_EndRxTxTransaction+0x80>)
 8004e1a:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1e:	0d5b      	lsrs	r3, r3, #21
 8004e20:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004e24:	fb02 f303 	mul.w	r3, r2, r3
 8004e28:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	685b      	ldr	r3, [r3, #4]
 8004e2e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e32:	d112      	bne.n	8004e5a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	9300      	str	r3, [sp, #0]
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	2180      	movs	r1, #128	; 0x80
 8004e3e:	68f8      	ldr	r0, [r7, #12]
 8004e40:	f7ff ff5a 	bl	8004cf8 <SPI_WaitFlagStateUntilTimeout>
 8004e44:	4603      	mov	r3, r0
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	d016      	beq.n	8004e78 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e4e:	f043 0220 	orr.w	r2, r3, #32
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e56:	2303      	movs	r3, #3
 8004e58:	e00f      	b.n	8004e7a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d00a      	beq.n	8004e76 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	3b01      	subs	r3, #1
 8004e64:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e70:	2b80      	cmp	r3, #128	; 0x80
 8004e72:	d0f2      	beq.n	8004e5a <SPI_EndRxTxTransaction+0x52>
 8004e74:	e000      	b.n	8004e78 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e76:	bf00      	nop
  }

  return HAL_OK;
 8004e78:	2300      	movs	r3, #0
}
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}
 8004e82:	bf00      	nop
 8004e84:	200001d4 	.word	0x200001d4
 8004e88:	165e9f81 	.word	0x165e9f81

08004e8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d101      	bne.n	8004e9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e041      	b.n	8004f22 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d106      	bne.n	8004eb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004eb2:	6878      	ldr	r0, [r7, #4]
 8004eb4:	f7fd f962 	bl	800217c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2202      	movs	r2, #2
 8004ebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681a      	ldr	r2, [r3, #0]
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	3304      	adds	r3, #4
 8004ec8:	4619      	mov	r1, r3
 8004eca:	4610      	mov	r0, r2
 8004ecc:	f000 fcd0 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2201      	movs	r2, #1
 8004f14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2201      	movs	r2, #1
 8004f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004f20:	2300      	movs	r3, #0
}
 8004f22:	4618      	mov	r0, r3
 8004f24:	3708      	adds	r7, #8
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
	...

08004f2c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f2c:	b480      	push	{r7}
 8004f2e:	b085      	sub	sp, #20
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f3a:	b2db      	uxtb	r3, r3
 8004f3c:	2b01      	cmp	r3, #1
 8004f3e:	d001      	beq.n	8004f44 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f40:	2301      	movs	r3, #1
 8004f42:	e046      	b.n	8004fd2 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a23      	ldr	r2, [pc, #140]	; (8004fe0 <HAL_TIM_Base_Start+0xb4>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d022      	beq.n	8004f9c <HAL_TIM_Base_Start+0x70>
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f5e:	d01d      	beq.n	8004f9c <HAL_TIM_Base_Start+0x70>
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a1f      	ldr	r2, [pc, #124]	; (8004fe4 <HAL_TIM_Base_Start+0xb8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d018      	beq.n	8004f9c <HAL_TIM_Base_Start+0x70>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	4a1e      	ldr	r2, [pc, #120]	; (8004fe8 <HAL_TIM_Base_Start+0xbc>)
 8004f70:	4293      	cmp	r3, r2
 8004f72:	d013      	beq.n	8004f9c <HAL_TIM_Base_Start+0x70>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a1c      	ldr	r2, [pc, #112]	; (8004fec <HAL_TIM_Base_Start+0xc0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d00e      	beq.n	8004f9c <HAL_TIM_Base_Start+0x70>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a1b      	ldr	r2, [pc, #108]	; (8004ff0 <HAL_TIM_Base_Start+0xc4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d009      	beq.n	8004f9c <HAL_TIM_Base_Start+0x70>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a19      	ldr	r2, [pc, #100]	; (8004ff4 <HAL_TIM_Base_Start+0xc8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d004      	beq.n	8004f9c <HAL_TIM_Base_Start+0x70>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a18      	ldr	r2, [pc, #96]	; (8004ff8 <HAL_TIM_Base_Start+0xcc>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d111      	bne.n	8004fc0 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	f003 0307 	and.w	r3, r3, #7
 8004fa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b06      	cmp	r3, #6
 8004fac:	d010      	beq.n	8004fd0 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	681a      	ldr	r2, [r3, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f042 0201 	orr.w	r2, r2, #1
 8004fbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fbe:	e007      	b.n	8004fd0 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	681a      	ldr	r2, [r3, #0]
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	f042 0201 	orr.w	r2, r2, #1
 8004fce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fd0:	2300      	movs	r3, #0
}
 8004fd2:	4618      	mov	r0, r3
 8004fd4:	3714      	adds	r7, #20
 8004fd6:	46bd      	mov	sp, r7
 8004fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fdc:	4770      	bx	lr
 8004fde:	bf00      	nop
 8004fe0:	40010000 	.word	0x40010000
 8004fe4:	40000400 	.word	0x40000400
 8004fe8:	40000800 	.word	0x40000800
 8004fec:	40000c00 	.word	0x40000c00
 8004ff0:	40010400 	.word	0x40010400
 8004ff4:	40014000 	.word	0x40014000
 8004ff8:	40001800 	.word	0x40001800

08004ffc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800500a:	b2db      	uxtb	r3, r3
 800500c:	2b01      	cmp	r3, #1
 800500e:	d001      	beq.n	8005014 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005010:	2301      	movs	r3, #1
 8005012:	e04e      	b.n	80050b2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2202      	movs	r2, #2
 8005018:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	68da      	ldr	r2, [r3, #12]
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f042 0201 	orr.w	r2, r2, #1
 800502a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	4a23      	ldr	r2, [pc, #140]	; (80050c0 <HAL_TIM_Base_Start_IT+0xc4>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d022      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503e:	d01d      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a1f      	ldr	r2, [pc, #124]	; (80050c4 <HAL_TIM_Base_Start_IT+0xc8>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d018      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1e      	ldr	r2, [pc, #120]	; (80050c8 <HAL_TIM_Base_Start_IT+0xcc>)
 8005050:	4293      	cmp	r3, r2
 8005052:	d013      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a1c      	ldr	r2, [pc, #112]	; (80050cc <HAL_TIM_Base_Start_IT+0xd0>)
 800505a:	4293      	cmp	r3, r2
 800505c:	d00e      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_TIM_Base_Start_IT+0xd4>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d009      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	4a19      	ldr	r2, [pc, #100]	; (80050d4 <HAL_TIM_Base_Start_IT+0xd8>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d004      	beq.n	800507c <HAL_TIM_Base_Start_IT+0x80>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a18      	ldr	r2, [pc, #96]	; (80050d8 <HAL_TIM_Base_Start_IT+0xdc>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d111      	bne.n	80050a0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	689b      	ldr	r3, [r3, #8]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2b06      	cmp	r3, #6
 800508c:	d010      	beq.n	80050b0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	681a      	ldr	r2, [r3, #0]
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f042 0201 	orr.w	r2, r2, #1
 800509c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800509e:	e007      	b.n	80050b0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	681a      	ldr	r2, [r3, #0]
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f042 0201 	orr.w	r2, r2, #1
 80050ae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80050b0:	2300      	movs	r3, #0
}
 80050b2:	4618      	mov	r0, r3
 80050b4:	3714      	adds	r7, #20
 80050b6:	46bd      	mov	sp, r7
 80050b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	40010000 	.word	0x40010000
 80050c4:	40000400 	.word	0x40000400
 80050c8:	40000800 	.word	0x40000800
 80050cc:	40000c00 	.word	0x40000c00
 80050d0:	40010400 	.word	0x40010400
 80050d4:	40014000 	.word	0x40014000
 80050d8:	40001800 	.word	0x40001800

080050dc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b082      	sub	sp, #8
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d101      	bne.n	80050ee <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e041      	b.n	8005172 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050f4:	b2db      	uxtb	r3, r3
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d106      	bne.n	8005108 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2200      	movs	r2, #0
 80050fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f7fd f8b8 	bl	8002278 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	2202      	movs	r2, #2
 800510c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681a      	ldr	r2, [r3, #0]
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	3304      	adds	r3, #4
 8005118:	4619      	mov	r1, r3
 800511a:	4610      	mov	r0, r2
 800511c:	f000 fba8 	bl	8005870 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	2201      	movs	r2, #1
 8005124:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	2201      	movs	r2, #1
 800512c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	2201      	movs	r2, #1
 8005134:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2201      	movs	r2, #1
 800513c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2201      	movs	r2, #1
 8005144:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2201      	movs	r2, #1
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2201      	movs	r2, #1
 8005154:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	2201      	movs	r2, #1
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	2201      	movs	r2, #1
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2201      	movs	r2, #1
 800516c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005170:	2300      	movs	r3, #0
}
 8005172:	4618      	mov	r0, r3
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
	...

0800517c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800517c:	b580      	push	{r7, lr}
 800517e:	b084      	sub	sp, #16
 8005180:	af00      	add	r7, sp, #0
 8005182:	6078      	str	r0, [r7, #4]
 8005184:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d109      	bne.n	80051a0 <HAL_TIM_PWM_Start+0x24>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005192:	b2db      	uxtb	r3, r3
 8005194:	2b01      	cmp	r3, #1
 8005196:	bf14      	ite	ne
 8005198:	2301      	movne	r3, #1
 800519a:	2300      	moveq	r3, #0
 800519c:	b2db      	uxtb	r3, r3
 800519e:	e022      	b.n	80051e6 <HAL_TIM_PWM_Start+0x6a>
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	2b04      	cmp	r3, #4
 80051a4:	d109      	bne.n	80051ba <HAL_TIM_PWM_Start+0x3e>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80051ac:	b2db      	uxtb	r3, r3
 80051ae:	2b01      	cmp	r3, #1
 80051b0:	bf14      	ite	ne
 80051b2:	2301      	movne	r3, #1
 80051b4:	2300      	moveq	r3, #0
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	e015      	b.n	80051e6 <HAL_TIM_PWM_Start+0x6a>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b08      	cmp	r3, #8
 80051be:	d109      	bne.n	80051d4 <HAL_TIM_PWM_Start+0x58>
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80051c6:	b2db      	uxtb	r3, r3
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	bf14      	ite	ne
 80051cc:	2301      	movne	r3, #1
 80051ce:	2300      	moveq	r3, #0
 80051d0:	b2db      	uxtb	r3, r3
 80051d2:	e008      	b.n	80051e6 <HAL_TIM_PWM_Start+0x6a>
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80051da:	b2db      	uxtb	r3, r3
 80051dc:	2b01      	cmp	r3, #1
 80051de:	bf14      	ite	ne
 80051e0:	2301      	movne	r3, #1
 80051e2:	2300      	moveq	r3, #0
 80051e4:	b2db      	uxtb	r3, r3
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d001      	beq.n	80051ee <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e07c      	b.n	80052e8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ee:	683b      	ldr	r3, [r7, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d104      	bne.n	80051fe <HAL_TIM_PWM_Start+0x82>
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2202      	movs	r2, #2
 80051f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051fc:	e013      	b.n	8005226 <HAL_TIM_PWM_Start+0xaa>
 80051fe:	683b      	ldr	r3, [r7, #0]
 8005200:	2b04      	cmp	r3, #4
 8005202:	d104      	bne.n	800520e <HAL_TIM_PWM_Start+0x92>
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2202      	movs	r2, #2
 8005208:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800520c:	e00b      	b.n	8005226 <HAL_TIM_PWM_Start+0xaa>
 800520e:	683b      	ldr	r3, [r7, #0]
 8005210:	2b08      	cmp	r3, #8
 8005212:	d104      	bne.n	800521e <HAL_TIM_PWM_Start+0xa2>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2202      	movs	r2, #2
 8005218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800521c:	e003      	b.n	8005226 <HAL_TIM_PWM_Start+0xaa>
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	2202      	movs	r2, #2
 8005222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	2201      	movs	r2, #1
 800522c:	6839      	ldr	r1, [r7, #0]
 800522e:	4618      	mov	r0, r3
 8005230:	f000 fe08 	bl	8005e44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	4a2d      	ldr	r2, [pc, #180]	; (80052f0 <HAL_TIM_PWM_Start+0x174>)
 800523a:	4293      	cmp	r3, r2
 800523c:	d004      	beq.n	8005248 <HAL_TIM_PWM_Start+0xcc>
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <HAL_TIM_PWM_Start+0x178>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d101      	bne.n	800524c <HAL_TIM_PWM_Start+0xd0>
 8005248:	2301      	movs	r3, #1
 800524a:	e000      	b.n	800524e <HAL_TIM_PWM_Start+0xd2>
 800524c:	2300      	movs	r3, #0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005260:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	4a22      	ldr	r2, [pc, #136]	; (80052f0 <HAL_TIM_PWM_Start+0x174>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d022      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x136>
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005274:	d01d      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x136>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	4a1f      	ldr	r2, [pc, #124]	; (80052f8 <HAL_TIM_PWM_Start+0x17c>)
 800527c:	4293      	cmp	r3, r2
 800527e:	d018      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x136>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a1d      	ldr	r2, [pc, #116]	; (80052fc <HAL_TIM_PWM_Start+0x180>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d013      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x136>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a1c      	ldr	r2, [pc, #112]	; (8005300 <HAL_TIM_PWM_Start+0x184>)
 8005290:	4293      	cmp	r3, r2
 8005292:	d00e      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x136>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	4a16      	ldr	r2, [pc, #88]	; (80052f4 <HAL_TIM_PWM_Start+0x178>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d009      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x136>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	4a18      	ldr	r2, [pc, #96]	; (8005304 <HAL_TIM_PWM_Start+0x188>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d004      	beq.n	80052b2 <HAL_TIM_PWM_Start+0x136>
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a16      	ldr	r2, [pc, #88]	; (8005308 <HAL_TIM_PWM_Start+0x18c>)
 80052ae:	4293      	cmp	r3, r2
 80052b0:	d111      	bne.n	80052d6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	f003 0307 	and.w	r3, r3, #7
 80052bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	2b06      	cmp	r3, #6
 80052c2:	d010      	beq.n	80052e6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681a      	ldr	r2, [r3, #0]
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f042 0201 	orr.w	r2, r2, #1
 80052d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80052d4:	e007      	b.n	80052e6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681a      	ldr	r2, [r3, #0]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f042 0201 	orr.w	r2, r2, #1
 80052e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3710      	adds	r7, #16
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40010000 	.word	0x40010000
 80052f4:	40010400 	.word	0x40010400
 80052f8:	40000400 	.word	0x40000400
 80052fc:	40000800 	.word	0x40000800
 8005300:	40000c00 	.word	0x40000c00
 8005304:	40014000 	.word	0x40014000
 8005308:	40001800 	.word	0x40001800

0800530c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800530c:	b580      	push	{r7, lr}
 800530e:	b082      	sub	sp, #8
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	691b      	ldr	r3, [r3, #16]
 800531a:	f003 0302 	and.w	r3, r3, #2
 800531e:	2b02      	cmp	r3, #2
 8005320:	d122      	bne.n	8005368 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	f003 0302 	and.w	r3, r3, #2
 800532c:	2b02      	cmp	r3, #2
 800532e:	d11b      	bne.n	8005368 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f06f 0202 	mvn.w	r2, #2
 8005338:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2201      	movs	r2, #1
 800533e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	699b      	ldr	r3, [r3, #24]
 8005346:	f003 0303 	and.w	r3, r3, #3
 800534a:	2b00      	cmp	r3, #0
 800534c:	d003      	beq.n	8005356 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800534e:	6878      	ldr	r0, [r7, #4]
 8005350:	f000 fa70 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 8005354:	e005      	b.n	8005362 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005356:	6878      	ldr	r0, [r7, #4]
 8005358:	f000 fa62 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800535c:	6878      	ldr	r0, [r7, #4]
 800535e:	f000 fa73 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	2200      	movs	r2, #0
 8005366:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	691b      	ldr	r3, [r3, #16]
 800536e:	f003 0304 	and.w	r3, r3, #4
 8005372:	2b04      	cmp	r3, #4
 8005374:	d122      	bne.n	80053bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	68db      	ldr	r3, [r3, #12]
 800537c:	f003 0304 	and.w	r3, r3, #4
 8005380:	2b04      	cmp	r3, #4
 8005382:	d11b      	bne.n	80053bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f06f 0204 	mvn.w	r2, #4
 800538c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2202      	movs	r2, #2
 8005392:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	699b      	ldr	r3, [r3, #24]
 800539a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 fa46 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 80053a8:	e005      	b.n	80053b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 fa38 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fa49 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2200      	movs	r2, #0
 80053ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0308 	and.w	r3, r3, #8
 80053c6:	2b08      	cmp	r3, #8
 80053c8:	d122      	bne.n	8005410 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0308 	and.w	r3, r3, #8
 80053d4:	2b08      	cmp	r3, #8
 80053d6:	d11b      	bne.n	8005410 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0208 	mvn.w	r2, #8
 80053e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	2204      	movs	r2, #4
 80053e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69db      	ldr	r3, [r3, #28]
 80053ee:	f003 0303 	and.w	r3, r3, #3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d003      	beq.n	80053fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa1c 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 80053fc:	e005      	b.n	800540a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f000 fa0e 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fa1f 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	2200      	movs	r2, #0
 800540e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	691b      	ldr	r3, [r3, #16]
 8005416:	f003 0310 	and.w	r3, r3, #16
 800541a:	2b10      	cmp	r3, #16
 800541c:	d122      	bne.n	8005464 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f003 0310 	and.w	r3, r3, #16
 8005428:	2b10      	cmp	r3, #16
 800542a:	d11b      	bne.n	8005464 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f06f 0210 	mvn.w	r2, #16
 8005434:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2208      	movs	r2, #8
 800543a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	69db      	ldr	r3, [r3, #28]
 8005442:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005446:	2b00      	cmp	r3, #0
 8005448:	d003      	beq.n	8005452 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800544a:	6878      	ldr	r0, [r7, #4]
 800544c:	f000 f9f2 	bl	8005834 <HAL_TIM_IC_CaptureCallback>
 8005450:	e005      	b.n	800545e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005452:	6878      	ldr	r0, [r7, #4]
 8005454:	f000 f9e4 	bl	8005820 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005458:	6878      	ldr	r0, [r7, #4]
 800545a:	f000 f9f5 	bl	8005848 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	2200      	movs	r2, #0
 8005462:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691b      	ldr	r3, [r3, #16]
 800546a:	f003 0301 	and.w	r3, r3, #1
 800546e:	2b01      	cmp	r3, #1
 8005470:	d10e      	bne.n	8005490 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	68db      	ldr	r3, [r3, #12]
 8005478:	f003 0301 	and.w	r3, r3, #1
 800547c:	2b01      	cmp	r3, #1
 800547e:	d107      	bne.n	8005490 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	f06f 0201 	mvn.w	r2, #1
 8005488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800548a:	6878      	ldr	r0, [r7, #4]
 800548c:	f7fc f88a 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	691b      	ldr	r3, [r3, #16]
 8005496:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800549a:	2b80      	cmp	r3, #128	; 0x80
 800549c:	d10e      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	68db      	ldr	r3, [r3, #12]
 80054a4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054a8:	2b80      	cmp	r3, #128	; 0x80
 80054aa:	d107      	bne.n	80054bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80054b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80054b6:	6878      	ldr	r0, [r7, #4]
 80054b8:	f000 fdc2 	bl	8006040 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c6:	2b40      	cmp	r3, #64	; 0x40
 80054c8:	d10e      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68db      	ldr	r3, [r3, #12]
 80054d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054d4:	2b40      	cmp	r3, #64	; 0x40
 80054d6:	d107      	bne.n	80054e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80054e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80054e2:	6878      	ldr	r0, [r7, #4]
 80054e4:	f000 f9ba 	bl	800585c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	691b      	ldr	r3, [r3, #16]
 80054ee:	f003 0320 	and.w	r3, r3, #32
 80054f2:	2b20      	cmp	r3, #32
 80054f4:	d10e      	bne.n	8005514 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	f003 0320 	and.w	r3, r3, #32
 8005500:	2b20      	cmp	r3, #32
 8005502:	d107      	bne.n	8005514 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0220 	mvn.w	r2, #32
 800550c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 fd8c 	bl	800602c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005514:	bf00      	nop
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}

0800551c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800551c:	b580      	push	{r7, lr}
 800551e:	b084      	sub	sp, #16
 8005520:	af00      	add	r7, sp, #0
 8005522:	60f8      	str	r0, [r7, #12]
 8005524:	60b9      	str	r1, [r7, #8]
 8005526:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800552e:	2b01      	cmp	r3, #1
 8005530:	d101      	bne.n	8005536 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005532:	2302      	movs	r3, #2
 8005534:	e0ac      	b.n	8005690 <HAL_TIM_PWM_ConfigChannel+0x174>
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	2201      	movs	r2, #1
 800553a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	2b0c      	cmp	r3, #12
 8005542:	f200 809f 	bhi.w	8005684 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005546:	a201      	add	r2, pc, #4	; (adr r2, 800554c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005548:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800554c:	08005581 	.word	0x08005581
 8005550:	08005685 	.word	0x08005685
 8005554:	08005685 	.word	0x08005685
 8005558:	08005685 	.word	0x08005685
 800555c:	080055c1 	.word	0x080055c1
 8005560:	08005685 	.word	0x08005685
 8005564:	08005685 	.word	0x08005685
 8005568:	08005685 	.word	0x08005685
 800556c:	08005603 	.word	0x08005603
 8005570:	08005685 	.word	0x08005685
 8005574:	08005685 	.word	0x08005685
 8005578:	08005685 	.word	0x08005685
 800557c:	08005643 	.word	0x08005643
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	68b9      	ldr	r1, [r7, #8]
 8005586:	4618      	mov	r0, r3
 8005588:	f000 fa12 	bl	80059b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	699a      	ldr	r2, [r3, #24]
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0208 	orr.w	r2, r2, #8
 800559a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f022 0204 	bic.w	r2, r2, #4
 80055aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	6999      	ldr	r1, [r3, #24]
 80055b2:	68bb      	ldr	r3, [r7, #8]
 80055b4:	691a      	ldr	r2, [r3, #16]
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	430a      	orrs	r2, r1
 80055bc:	619a      	str	r2, [r3, #24]
      break;
 80055be:	e062      	b.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	68b9      	ldr	r1, [r7, #8]
 80055c6:	4618      	mov	r0, r3
 80055c8:	f000 fa62 	bl	8005a90 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	699a      	ldr	r2, [r3, #24]
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	6999      	ldr	r1, [r3, #24]
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	021a      	lsls	r2, r3, #8
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	430a      	orrs	r2, r1
 80055fe:	619a      	str	r2, [r3, #24]
      break;
 8005600:	e041      	b.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	68b9      	ldr	r1, [r7, #8]
 8005608:	4618      	mov	r0, r3
 800560a:	f000 fab7 	bl	8005b7c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800560e:	68fb      	ldr	r3, [r7, #12]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	69da      	ldr	r2, [r3, #28]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f042 0208 	orr.w	r2, r2, #8
 800561c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f022 0204 	bic.w	r2, r2, #4
 800562c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69d9      	ldr	r1, [r3, #28]
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	691a      	ldr	r2, [r3, #16]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	430a      	orrs	r2, r1
 800563e:	61da      	str	r2, [r3, #28]
      break;
 8005640:	e021      	b.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	68b9      	ldr	r1, [r7, #8]
 8005648:	4618      	mov	r0, r3
 800564a:	f000 fb0b 	bl	8005c64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	69da      	ldr	r2, [r3, #28]
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800565c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800566c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69d9      	ldr	r1, [r3, #28]
 8005674:	68bb      	ldr	r3, [r7, #8]
 8005676:	691b      	ldr	r3, [r3, #16]
 8005678:	021a      	lsls	r2, r3, #8
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	430a      	orrs	r2, r1
 8005680:	61da      	str	r2, [r3, #28]
      break;
 8005682:	e000      	b.n	8005686 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005684:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005686:	68fb      	ldr	r3, [r7, #12]
 8005688:	2200      	movs	r2, #0
 800568a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800568e:	2300      	movs	r3, #0
}
 8005690:	4618      	mov	r0, r3
 8005692:	3710      	adds	r7, #16
 8005694:	46bd      	mov	sp, r7
 8005696:	bd80      	pop	{r7, pc}

08005698 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b084      	sub	sp, #16
 800569c:	af00      	add	r7, sp, #0
 800569e:	6078      	str	r0, [r7, #4]
 80056a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d101      	bne.n	80056b0 <HAL_TIM_ConfigClockSource+0x18>
 80056ac:	2302      	movs	r3, #2
 80056ae:	e0b3      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x180>
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2201      	movs	r2, #1
 80056b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2202      	movs	r2, #2
 80056bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	689b      	ldr	r3, [r3, #8]
 80056c6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056ce:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056d6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	68fa      	ldr	r2, [r7, #12]
 80056de:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056e0:	683b      	ldr	r3, [r7, #0]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056e8:	d03e      	beq.n	8005768 <HAL_TIM_ConfigClockSource+0xd0>
 80056ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80056ee:	f200 8087 	bhi.w	8005800 <HAL_TIM_ConfigClockSource+0x168>
 80056f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056f6:	f000 8085 	beq.w	8005804 <HAL_TIM_ConfigClockSource+0x16c>
 80056fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056fe:	d87f      	bhi.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
 8005700:	2b70      	cmp	r3, #112	; 0x70
 8005702:	d01a      	beq.n	800573a <HAL_TIM_ConfigClockSource+0xa2>
 8005704:	2b70      	cmp	r3, #112	; 0x70
 8005706:	d87b      	bhi.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
 8005708:	2b60      	cmp	r3, #96	; 0x60
 800570a:	d050      	beq.n	80057ae <HAL_TIM_ConfigClockSource+0x116>
 800570c:	2b60      	cmp	r3, #96	; 0x60
 800570e:	d877      	bhi.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
 8005710:	2b50      	cmp	r3, #80	; 0x50
 8005712:	d03c      	beq.n	800578e <HAL_TIM_ConfigClockSource+0xf6>
 8005714:	2b50      	cmp	r3, #80	; 0x50
 8005716:	d873      	bhi.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
 8005718:	2b40      	cmp	r3, #64	; 0x40
 800571a:	d058      	beq.n	80057ce <HAL_TIM_ConfigClockSource+0x136>
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d86f      	bhi.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
 8005720:	2b30      	cmp	r3, #48	; 0x30
 8005722:	d064      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x156>
 8005724:	2b30      	cmp	r3, #48	; 0x30
 8005726:	d86b      	bhi.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
 8005728:	2b20      	cmp	r3, #32
 800572a:	d060      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x156>
 800572c:	2b20      	cmp	r3, #32
 800572e:	d867      	bhi.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
 8005730:	2b00      	cmp	r3, #0
 8005732:	d05c      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x156>
 8005734:	2b10      	cmp	r3, #16
 8005736:	d05a      	beq.n	80057ee <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8005738:	e062      	b.n	8005800 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	6818      	ldr	r0, [r3, #0]
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	6899      	ldr	r1, [r3, #8]
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	685a      	ldr	r2, [r3, #4]
 8005746:	683b      	ldr	r3, [r7, #0]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	f000 fb5b 	bl	8005e04 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	689b      	ldr	r3, [r3, #8]
 8005754:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800575c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68fa      	ldr	r2, [r7, #12]
 8005764:	609a      	str	r2, [r3, #8]
      break;
 8005766:	e04e      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	6899      	ldr	r1, [r3, #8]
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685a      	ldr	r2, [r3, #4]
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	68db      	ldr	r3, [r3, #12]
 8005778:	f000 fb44 	bl	8005e04 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689a      	ldr	r2, [r3, #8]
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800578a:	609a      	str	r2, [r3, #8]
      break;
 800578c:	e03b      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6818      	ldr	r0, [r3, #0]
 8005792:	683b      	ldr	r3, [r7, #0]
 8005794:	6859      	ldr	r1, [r3, #4]
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	68db      	ldr	r3, [r3, #12]
 800579a:	461a      	mov	r2, r3
 800579c:	f000 fab8 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	2150      	movs	r1, #80	; 0x50
 80057a6:	4618      	mov	r0, r3
 80057a8:	f000 fb11 	bl	8005dce <TIM_ITRx_SetConfig>
      break;
 80057ac:	e02b      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	6818      	ldr	r0, [r3, #0]
 80057b2:	683b      	ldr	r3, [r7, #0]
 80057b4:	6859      	ldr	r1, [r3, #4]
 80057b6:	683b      	ldr	r3, [r7, #0]
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	461a      	mov	r2, r3
 80057bc:	f000 fad7 	bl	8005d6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	2160      	movs	r1, #96	; 0x60
 80057c6:	4618      	mov	r0, r3
 80057c8:	f000 fb01 	bl	8005dce <TIM_ITRx_SetConfig>
      break;
 80057cc:	e01b      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6818      	ldr	r0, [r3, #0]
 80057d2:	683b      	ldr	r3, [r7, #0]
 80057d4:	6859      	ldr	r1, [r3, #4]
 80057d6:	683b      	ldr	r3, [r7, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	461a      	mov	r2, r3
 80057dc:	f000 fa98 	bl	8005d10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2140      	movs	r1, #64	; 0x40
 80057e6:	4618      	mov	r0, r3
 80057e8:	f000 faf1 	bl	8005dce <TIM_ITRx_SetConfig>
      break;
 80057ec:	e00b      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681a      	ldr	r2, [r3, #0]
 80057f2:	683b      	ldr	r3, [r7, #0]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	4619      	mov	r1, r3
 80057f8:	4610      	mov	r0, r2
 80057fa:	f000 fae8 	bl	8005dce <TIM_ITRx_SetConfig>
        break;
 80057fe:	e002      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005800:	bf00      	nop
 8005802:	e000      	b.n	8005806 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005804:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	2201      	movs	r2, #1
 800580a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2200      	movs	r2, #0
 8005812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3710      	adds	r7, #16
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005820:	b480      	push	{r7}
 8005822:	b083      	sub	sp, #12
 8005824:	af00      	add	r7, sp, #0
 8005826:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005828:	bf00      	nop
 800582a:	370c      	adds	r7, #12
 800582c:	46bd      	mov	sp, r7
 800582e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005832:	4770      	bx	lr

08005834 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005834:	b480      	push	{r7}
 8005836:	b083      	sub	sp, #12
 8005838:	af00      	add	r7, sp, #0
 800583a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800583c:	bf00      	nop
 800583e:	370c      	adds	r7, #12
 8005840:	46bd      	mov	sp, r7
 8005842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005846:	4770      	bx	lr

08005848 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005848:	b480      	push	{r7}
 800584a:	b083      	sub	sp, #12
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005850:	bf00      	nop
 8005852:	370c      	adds	r7, #12
 8005854:	46bd      	mov	sp, r7
 8005856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585a:	4770      	bx	lr

0800585c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800585c:	b480      	push	{r7}
 800585e:	b083      	sub	sp, #12
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005864:	bf00      	nop
 8005866:	370c      	adds	r7, #12
 8005868:	46bd      	mov	sp, r7
 800586a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800586e:	4770      	bx	lr

08005870 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005870:	b480      	push	{r7}
 8005872:	b085      	sub	sp, #20
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	4a40      	ldr	r2, [pc, #256]	; (8005984 <TIM_Base_SetConfig+0x114>)
 8005884:	4293      	cmp	r3, r2
 8005886:	d013      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800588e:	d00f      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	4a3d      	ldr	r2, [pc, #244]	; (8005988 <TIM_Base_SetConfig+0x118>)
 8005894:	4293      	cmp	r3, r2
 8005896:	d00b      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	4a3c      	ldr	r2, [pc, #240]	; (800598c <TIM_Base_SetConfig+0x11c>)
 800589c:	4293      	cmp	r3, r2
 800589e:	d007      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	4a3b      	ldr	r2, [pc, #236]	; (8005990 <TIM_Base_SetConfig+0x120>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d003      	beq.n	80058b0 <TIM_Base_SetConfig+0x40>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	4a3a      	ldr	r2, [pc, #232]	; (8005994 <TIM_Base_SetConfig+0x124>)
 80058ac:	4293      	cmp	r3, r2
 80058ae:	d108      	bne.n	80058c2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058b8:	683b      	ldr	r3, [r7, #0]
 80058ba:	685b      	ldr	r3, [r3, #4]
 80058bc:	68fa      	ldr	r2, [r7, #12]
 80058be:	4313      	orrs	r3, r2
 80058c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	4a2f      	ldr	r2, [pc, #188]	; (8005984 <TIM_Base_SetConfig+0x114>)
 80058c6:	4293      	cmp	r3, r2
 80058c8:	d02b      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058d0:	d027      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	4a2c      	ldr	r2, [pc, #176]	; (8005988 <TIM_Base_SetConfig+0x118>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d023      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	4a2b      	ldr	r2, [pc, #172]	; (800598c <TIM_Base_SetConfig+0x11c>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d01f      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4a2a      	ldr	r2, [pc, #168]	; (8005990 <TIM_Base_SetConfig+0x120>)
 80058e6:	4293      	cmp	r3, r2
 80058e8:	d01b      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	4a29      	ldr	r2, [pc, #164]	; (8005994 <TIM_Base_SetConfig+0x124>)
 80058ee:	4293      	cmp	r3, r2
 80058f0:	d017      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	4a28      	ldr	r2, [pc, #160]	; (8005998 <TIM_Base_SetConfig+0x128>)
 80058f6:	4293      	cmp	r3, r2
 80058f8:	d013      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	4a27      	ldr	r2, [pc, #156]	; (800599c <TIM_Base_SetConfig+0x12c>)
 80058fe:	4293      	cmp	r3, r2
 8005900:	d00f      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4a26      	ldr	r2, [pc, #152]	; (80059a0 <TIM_Base_SetConfig+0x130>)
 8005906:	4293      	cmp	r3, r2
 8005908:	d00b      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	4a25      	ldr	r2, [pc, #148]	; (80059a4 <TIM_Base_SetConfig+0x134>)
 800590e:	4293      	cmp	r3, r2
 8005910:	d007      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	4a24      	ldr	r2, [pc, #144]	; (80059a8 <TIM_Base_SetConfig+0x138>)
 8005916:	4293      	cmp	r3, r2
 8005918:	d003      	beq.n	8005922 <TIM_Base_SetConfig+0xb2>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4a23      	ldr	r2, [pc, #140]	; (80059ac <TIM_Base_SetConfig+0x13c>)
 800591e:	4293      	cmp	r3, r2
 8005920:	d108      	bne.n	8005934 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005928:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	68db      	ldr	r3, [r3, #12]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	4313      	orrs	r3, r2
 8005932:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800593a:	683b      	ldr	r3, [r7, #0]
 800593c:	695b      	ldr	r3, [r3, #20]
 800593e:	4313      	orrs	r3, r2
 8005940:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	68fa      	ldr	r2, [r7, #12]
 8005946:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	689a      	ldr	r2, [r3, #8]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	4a0a      	ldr	r2, [pc, #40]	; (8005984 <TIM_Base_SetConfig+0x114>)
 800595c:	4293      	cmp	r3, r2
 800595e:	d003      	beq.n	8005968 <TIM_Base_SetConfig+0xf8>
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	4a0c      	ldr	r2, [pc, #48]	; (8005994 <TIM_Base_SetConfig+0x124>)
 8005964:	4293      	cmp	r3, r2
 8005966:	d103      	bne.n	8005970 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	691a      	ldr	r2, [r3, #16]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	615a      	str	r2, [r3, #20]
}
 8005976:	bf00      	nop
 8005978:	3714      	adds	r7, #20
 800597a:	46bd      	mov	sp, r7
 800597c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005980:	4770      	bx	lr
 8005982:	bf00      	nop
 8005984:	40010000 	.word	0x40010000
 8005988:	40000400 	.word	0x40000400
 800598c:	40000800 	.word	0x40000800
 8005990:	40000c00 	.word	0x40000c00
 8005994:	40010400 	.word	0x40010400
 8005998:	40014000 	.word	0x40014000
 800599c:	40014400 	.word	0x40014400
 80059a0:	40014800 	.word	0x40014800
 80059a4:	40001800 	.word	0x40001800
 80059a8:	40001c00 	.word	0x40001c00
 80059ac:	40002000 	.word	0x40002000

080059b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b087      	sub	sp, #28
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	6a1b      	ldr	r3, [r3, #32]
 80059be:	f023 0201 	bic.w	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	6a1b      	ldr	r3, [r3, #32]
 80059ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	699b      	ldr	r3, [r3, #24]
 80059d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	f023 0303 	bic.w	r3, r3, #3
 80059e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	68fa      	ldr	r2, [r7, #12]
 80059ee:	4313      	orrs	r3, r2
 80059f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f023 0302 	bic.w	r3, r3, #2
 80059f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059fa:	683b      	ldr	r3, [r7, #0]
 80059fc:	689b      	ldr	r3, [r3, #8]
 80059fe:	697a      	ldr	r2, [r7, #20]
 8005a00:	4313      	orrs	r3, r2
 8005a02:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	4a20      	ldr	r2, [pc, #128]	; (8005a88 <TIM_OC1_SetConfig+0xd8>)
 8005a08:	4293      	cmp	r3, r2
 8005a0a:	d003      	beq.n	8005a14 <TIM_OC1_SetConfig+0x64>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <TIM_OC1_SetConfig+0xdc>)
 8005a10:	4293      	cmp	r3, r2
 8005a12:	d10c      	bne.n	8005a2e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0308 	bic.w	r3, r3, #8
 8005a1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68db      	ldr	r3, [r3, #12]
 8005a20:	697a      	ldr	r2, [r7, #20]
 8005a22:	4313      	orrs	r3, r2
 8005a24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f023 0304 	bic.w	r3, r3, #4
 8005a2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	4a15      	ldr	r2, [pc, #84]	; (8005a88 <TIM_OC1_SetConfig+0xd8>)
 8005a32:	4293      	cmp	r3, r2
 8005a34:	d003      	beq.n	8005a3e <TIM_OC1_SetConfig+0x8e>
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	4a14      	ldr	r2, [pc, #80]	; (8005a8c <TIM_OC1_SetConfig+0xdc>)
 8005a3a:	4293      	cmp	r3, r2
 8005a3c:	d111      	bne.n	8005a62 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a4e:	683b      	ldr	r3, [r7, #0]
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	693a      	ldr	r2, [r7, #16]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	693a      	ldr	r2, [r7, #16]
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	693a      	ldr	r2, [r7, #16]
 8005a66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	68fa      	ldr	r2, [r7, #12]
 8005a6c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	685a      	ldr	r2, [r3, #4]
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	697a      	ldr	r2, [r7, #20]
 8005a7a:	621a      	str	r2, [r3, #32]
}
 8005a7c:	bf00      	nop
 8005a7e:	371c      	adds	r7, #28
 8005a80:	46bd      	mov	sp, r7
 8005a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a86:	4770      	bx	lr
 8005a88:	40010000 	.word	0x40010000
 8005a8c:	40010400 	.word	0x40010400

08005a90 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b087      	sub	sp, #28
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
 8005a98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6a1b      	ldr	r3, [r3, #32]
 8005a9e:	f023 0210 	bic.w	r2, r3, #16
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	699b      	ldr	r3, [r3, #24]
 8005ab6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005abe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ac8:	683b      	ldr	r3, [r7, #0]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	021b      	lsls	r3, r3, #8
 8005ace:	68fa      	ldr	r2, [r7, #12]
 8005ad0:	4313      	orrs	r3, r2
 8005ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	f023 0320 	bic.w	r3, r3, #32
 8005ada:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	689b      	ldr	r3, [r3, #8]
 8005ae0:	011b      	lsls	r3, r3, #4
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	4a22      	ldr	r2, [pc, #136]	; (8005b74 <TIM_OC2_SetConfig+0xe4>)
 8005aec:	4293      	cmp	r3, r2
 8005aee:	d003      	beq.n	8005af8 <TIM_OC2_SetConfig+0x68>
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	4a21      	ldr	r2, [pc, #132]	; (8005b78 <TIM_OC2_SetConfig+0xe8>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d10d      	bne.n	8005b14 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005afe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	68db      	ldr	r3, [r3, #12]
 8005b04:	011b      	lsls	r3, r3, #4
 8005b06:	697a      	ldr	r2, [r7, #20]
 8005b08:	4313      	orrs	r3, r2
 8005b0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005b0c:	697b      	ldr	r3, [r7, #20]
 8005b0e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b12:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	4a17      	ldr	r2, [pc, #92]	; (8005b74 <TIM_OC2_SetConfig+0xe4>)
 8005b18:	4293      	cmp	r3, r2
 8005b1a:	d003      	beq.n	8005b24 <TIM_OC2_SetConfig+0x94>
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4a16      	ldr	r2, [pc, #88]	; (8005b78 <TIM_OC2_SetConfig+0xe8>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d113      	bne.n	8005b4c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005b24:	693b      	ldr	r3, [r7, #16]
 8005b26:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005b2a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005b2c:	693b      	ldr	r3, [r7, #16]
 8005b2e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b32:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	009b      	lsls	r3, r3, #2
 8005b3a:	693a      	ldr	r2, [r7, #16]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005b40:	683b      	ldr	r3, [r7, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	009b      	lsls	r3, r3, #2
 8005b46:	693a      	ldr	r2, [r7, #16]
 8005b48:	4313      	orrs	r3, r2
 8005b4a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	693a      	ldr	r2, [r7, #16]
 8005b50:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	68fa      	ldr	r2, [r7, #12]
 8005b56:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	685a      	ldr	r2, [r3, #4]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	697a      	ldr	r2, [r7, #20]
 8005b64:	621a      	str	r2, [r3, #32]
}
 8005b66:	bf00      	nop
 8005b68:	371c      	adds	r7, #28
 8005b6a:	46bd      	mov	sp, r7
 8005b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b70:	4770      	bx	lr
 8005b72:	bf00      	nop
 8005b74:	40010000 	.word	0x40010000
 8005b78:	40010400 	.word	0x40010400

08005b7c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b7c:	b480      	push	{r7}
 8005b7e:	b087      	sub	sp, #28
 8005b80:	af00      	add	r7, sp, #0
 8005b82:	6078      	str	r0, [r7, #4]
 8005b84:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	6a1b      	ldr	r3, [r3, #32]
 8005b8a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	6a1b      	ldr	r3, [r3, #32]
 8005b96:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	685b      	ldr	r3, [r3, #4]
 8005b9c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	69db      	ldr	r3, [r3, #28]
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005baa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	f023 0303 	bic.w	r3, r3, #3
 8005bb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005bb4:	683b      	ldr	r3, [r7, #0]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	68fa      	ldr	r2, [r7, #12]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005bc4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	689b      	ldr	r3, [r3, #8]
 8005bca:	021b      	lsls	r3, r3, #8
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	4a21      	ldr	r2, [pc, #132]	; (8005c5c <TIM_OC3_SetConfig+0xe0>)
 8005bd6:	4293      	cmp	r3, r2
 8005bd8:	d003      	beq.n	8005be2 <TIM_OC3_SetConfig+0x66>
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	4a20      	ldr	r2, [pc, #128]	; (8005c60 <TIM_OC3_SetConfig+0xe4>)
 8005bde:	4293      	cmp	r3, r2
 8005be0:	d10d      	bne.n	8005bfe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005be8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bea:	683b      	ldr	r3, [r7, #0]
 8005bec:	68db      	ldr	r3, [r3, #12]
 8005bee:	021b      	lsls	r3, r3, #8
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	4313      	orrs	r3, r2
 8005bf4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bfc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	4a16      	ldr	r2, [pc, #88]	; (8005c5c <TIM_OC3_SetConfig+0xe0>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d003      	beq.n	8005c0e <TIM_OC3_SetConfig+0x92>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	4a15      	ldr	r2, [pc, #84]	; (8005c60 <TIM_OC3_SetConfig+0xe4>)
 8005c0a:	4293      	cmp	r3, r2
 8005c0c:	d113      	bne.n	8005c36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005c0e:	693b      	ldr	r3, [r7, #16]
 8005c10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005c14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	011b      	lsls	r3, r3, #4
 8005c24:	693a      	ldr	r2, [r7, #16]
 8005c26:	4313      	orrs	r3, r2
 8005c28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	699b      	ldr	r3, [r3, #24]
 8005c2e:	011b      	lsls	r3, r3, #4
 8005c30:	693a      	ldr	r2, [r7, #16]
 8005c32:	4313      	orrs	r3, r2
 8005c34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	693a      	ldr	r2, [r7, #16]
 8005c3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	68fa      	ldr	r2, [r7, #12]
 8005c40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	685a      	ldr	r2, [r3, #4]
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	697a      	ldr	r2, [r7, #20]
 8005c4e:	621a      	str	r2, [r3, #32]
}
 8005c50:	bf00      	nop
 8005c52:	371c      	adds	r7, #28
 8005c54:	46bd      	mov	sp, r7
 8005c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c5a:	4770      	bx	lr
 8005c5c:	40010000 	.word	0x40010000
 8005c60:	40010400 	.word	0x40010400

08005c64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b087      	sub	sp, #28
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
 8005c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6a1b      	ldr	r3, [r3, #32]
 8005c72:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6a1b      	ldr	r3, [r3, #32]
 8005c7e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	685b      	ldr	r3, [r3, #4]
 8005c84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	69db      	ldr	r3, [r3, #28]
 8005c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c9c:	683b      	ldr	r3, [r7, #0]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	021b      	lsls	r3, r3, #8
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4313      	orrs	r3, r2
 8005ca6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	689b      	ldr	r3, [r3, #8]
 8005cb4:	031b      	lsls	r3, r3, #12
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	4a12      	ldr	r2, [pc, #72]	; (8005d08 <TIM_OC4_SetConfig+0xa4>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	d003      	beq.n	8005ccc <TIM_OC4_SetConfig+0x68>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	4a11      	ldr	r2, [pc, #68]	; (8005d0c <TIM_OC4_SetConfig+0xa8>)
 8005cc8:	4293      	cmp	r3, r2
 8005cca:	d109      	bne.n	8005ce0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ccc:	697b      	ldr	r3, [r7, #20]
 8005cce:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cd2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	695b      	ldr	r3, [r3, #20]
 8005cd8:	019b      	lsls	r3, r3, #6
 8005cda:	697a      	ldr	r2, [r7, #20]
 8005cdc:	4313      	orrs	r3, r2
 8005cde:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	697a      	ldr	r2, [r7, #20]
 8005ce4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68fa      	ldr	r2, [r7, #12]
 8005cea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	685a      	ldr	r2, [r3, #4]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	621a      	str	r2, [r3, #32]
}
 8005cfa:	bf00      	nop
 8005cfc:	371c      	adds	r7, #28
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d04:	4770      	bx	lr
 8005d06:	bf00      	nop
 8005d08:	40010000 	.word	0x40010000
 8005d0c:	40010400 	.word	0x40010400

08005d10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	60b9      	str	r1, [r7, #8]
 8005d1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6a1b      	ldr	r3, [r3, #32]
 8005d20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	6a1b      	ldr	r3, [r3, #32]
 8005d26:	f023 0201 	bic.w	r2, r3, #1
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	699b      	ldr	r3, [r3, #24]
 8005d32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d34:	693b      	ldr	r3, [r7, #16]
 8005d36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d46:	697b      	ldr	r3, [r7, #20]
 8005d48:	f023 030a 	bic.w	r3, r3, #10
 8005d4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005d4e:	697a      	ldr	r2, [r7, #20]
 8005d50:	68bb      	ldr	r3, [r7, #8]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	693a      	ldr	r2, [r7, #16]
 8005d5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	697a      	ldr	r2, [r7, #20]
 8005d60:	621a      	str	r2, [r3, #32]
}
 8005d62:	bf00      	nop
 8005d64:	371c      	adds	r7, #28
 8005d66:	46bd      	mov	sp, r7
 8005d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6c:	4770      	bx	lr

08005d6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d6e:	b480      	push	{r7}
 8005d70:	b087      	sub	sp, #28
 8005d72:	af00      	add	r7, sp, #0
 8005d74:	60f8      	str	r0, [r7, #12]
 8005d76:	60b9      	str	r1, [r7, #8]
 8005d78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005d7a:	68fb      	ldr	r3, [r7, #12]
 8005d7c:	6a1b      	ldr	r3, [r3, #32]
 8005d7e:	f023 0210 	bic.w	r2, r3, #16
 8005d82:	68fb      	ldr	r3, [r7, #12]
 8005d84:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	699b      	ldr	r3, [r3, #24]
 8005d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	6a1b      	ldr	r3, [r3, #32]
 8005d90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005d92:	697b      	ldr	r3, [r7, #20]
 8005d94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005d98:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	031b      	lsls	r3, r3, #12
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	4313      	orrs	r3, r2
 8005da2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005da4:	693b      	ldr	r3, [r7, #16]
 8005da6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005daa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005dac:	68bb      	ldr	r3, [r7, #8]
 8005dae:	011b      	lsls	r3, r3, #4
 8005db0:	693a      	ldr	r2, [r7, #16]
 8005db2:	4313      	orrs	r3, r2
 8005db4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	697a      	ldr	r2, [r7, #20]
 8005dba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	693a      	ldr	r2, [r7, #16]
 8005dc0:	621a      	str	r2, [r3, #32]
}
 8005dc2:	bf00      	nop
 8005dc4:	371c      	adds	r7, #28
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr

08005dce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005dce:	b480      	push	{r7}
 8005dd0:	b085      	sub	sp, #20
 8005dd2:	af00      	add	r7, sp, #0
 8005dd4:	6078      	str	r0, [r7, #4]
 8005dd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	689b      	ldr	r3, [r3, #8]
 8005ddc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005de4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005de6:	683a      	ldr	r2, [r7, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4313      	orrs	r3, r2
 8005dec:	f043 0307 	orr.w	r3, r3, #7
 8005df0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	68fa      	ldr	r2, [r7, #12]
 8005df6:	609a      	str	r2, [r3, #8]
}
 8005df8:	bf00      	nop
 8005dfa:	3714      	adds	r7, #20
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e02:	4770      	bx	lr

08005e04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005e04:	b480      	push	{r7}
 8005e06:	b087      	sub	sp, #28
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	60f8      	str	r0, [r7, #12]
 8005e0c:	60b9      	str	r1, [r7, #8]
 8005e0e:	607a      	str	r2, [r7, #4]
 8005e10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	689b      	ldr	r3, [r3, #8]
 8005e16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005e18:	697b      	ldr	r3, [r7, #20]
 8005e1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005e1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005e20:	683b      	ldr	r3, [r7, #0]
 8005e22:	021a      	lsls	r2, r3, #8
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	431a      	orrs	r2, r3
 8005e28:	68bb      	ldr	r3, [r7, #8]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	697a      	ldr	r2, [r7, #20]
 8005e36:	609a      	str	r2, [r3, #8]
}
 8005e38:	bf00      	nop
 8005e3a:	371c      	adds	r7, #28
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005e44:	b480      	push	{r7}
 8005e46:	b087      	sub	sp, #28
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005e50:	68bb      	ldr	r3, [r7, #8]
 8005e52:	f003 031f 	and.w	r3, r3, #31
 8005e56:	2201      	movs	r2, #1
 8005e58:	fa02 f303 	lsl.w	r3, r2, r3
 8005e5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	6a1a      	ldr	r2, [r3, #32]
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	43db      	mvns	r3, r3
 8005e66:	401a      	ands	r2, r3
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	6a1a      	ldr	r2, [r3, #32]
 8005e70:	68bb      	ldr	r3, [r7, #8]
 8005e72:	f003 031f 	and.w	r3, r3, #31
 8005e76:	6879      	ldr	r1, [r7, #4]
 8005e78:	fa01 f303 	lsl.w	r3, r1, r3
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	621a      	str	r2, [r3, #32]
}
 8005e82:	bf00      	nop
 8005e84:	371c      	adds	r7, #28
 8005e86:	46bd      	mov	sp, r7
 8005e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e8c:	4770      	bx	lr
	...

08005e90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d101      	bne.n	8005ea8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	e05a      	b.n	8005f5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2202      	movs	r2, #2
 8005eb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	685b      	ldr	r3, [r3, #4]
 8005ebe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	689b      	ldr	r3, [r3, #8]
 8005ec6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ece:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	68fa      	ldr	r2, [r7, #12]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4a21      	ldr	r2, [pc, #132]	; (8005f6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ee8:	4293      	cmp	r3, r2
 8005eea:	d022      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ef4:	d01d      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	4a1d      	ldr	r2, [pc, #116]	; (8005f70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005efc:	4293      	cmp	r3, r2
 8005efe:	d018      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a1b      	ldr	r2, [pc, #108]	; (8005f74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d013      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a1a      	ldr	r2, [pc, #104]	; (8005f78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d00e      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a18      	ldr	r2, [pc, #96]	; (8005f7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d009      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a17      	ldr	r2, [pc, #92]	; (8005f80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d004      	beq.n	8005f32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a15      	ldr	r2, [pc, #84]	; (8005f84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d10c      	bne.n	8005f4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005f32:	68bb      	ldr	r3, [r7, #8]
 8005f34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	685b      	ldr	r3, [r3, #4]
 8005f3e:	68ba      	ldr	r2, [r7, #8]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	68ba      	ldr	r2, [r7, #8]
 8005f4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f5c:	2300      	movs	r3, #0
}
 8005f5e:	4618      	mov	r0, r3
 8005f60:	3714      	adds	r7, #20
 8005f62:	46bd      	mov	sp, r7
 8005f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f68:	4770      	bx	lr
 8005f6a:	bf00      	nop
 8005f6c:	40010000 	.word	0x40010000
 8005f70:	40000400 	.word	0x40000400
 8005f74:	40000800 	.word	0x40000800
 8005f78:	40000c00 	.word	0x40000c00
 8005f7c:	40010400 	.word	0x40010400
 8005f80:	40014000 	.word	0x40014000
 8005f84:	40001800 	.word	0x40001800

08005f88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005f88:	b480      	push	{r7}
 8005f8a:	b085      	sub	sp, #20
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f9c:	2b01      	cmp	r3, #1
 8005f9e:	d101      	bne.n	8005fa4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	e03d      	b.n	8006020 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	4313      	orrs	r3, r2
 8005fc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	4313      	orrs	r3, r2
 8005fe2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	691b      	ldr	r3, [r3, #16]
 8005fee:	4313      	orrs	r3, r2
 8005ff0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	695b      	ldr	r3, [r3, #20]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	69db      	ldr	r3, [r3, #28]
 800600a:	4313      	orrs	r3, r2
 800600c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	2200      	movs	r2, #0
 800601a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006034:	bf00      	nop
 8006036:	370c      	adds	r7, #12
 8006038:	46bd      	mov	sp, r7
 800603a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603e:	4770      	bx	lr

08006040 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006040:	b480      	push	{r7}
 8006042:	b083      	sub	sp, #12
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006048:	bf00      	nop
 800604a:	370c      	adds	r7, #12
 800604c:	46bd      	mov	sp, r7
 800604e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006052:	4770      	bx	lr

08006054 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006054:	b580      	push	{r7, lr}
 8006056:	b082      	sub	sp, #8
 8006058:	af00      	add	r7, sp, #0
 800605a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d101      	bne.n	8006066 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006062:	2301      	movs	r3, #1
 8006064:	e03f      	b.n	80060e6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800606c:	b2db      	uxtb	r3, r3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d106      	bne.n	8006080 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f7fc fa52 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2224      	movs	r2, #36	; 0x24
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	68da      	ldr	r2, [r3, #12]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006096:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 fe0b 	bl	8006cb4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	691a      	ldr	r2, [r3, #16]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80060ac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695a      	ldr	r2, [r3, #20]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80060bc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	68da      	ldr	r2, [r3, #12]
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060cc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	2200      	movs	r2, #0
 80060d2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2220      	movs	r2, #32
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	2220      	movs	r2, #32
 80060e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80060e4:	2300      	movs	r3, #0
}
 80060e6:	4618      	mov	r0, r3
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}

080060ee <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80060ee:	b580      	push	{r7, lr}
 80060f0:	b08a      	sub	sp, #40	; 0x28
 80060f2:	af02      	add	r7, sp, #8
 80060f4:	60f8      	str	r0, [r7, #12]
 80060f6:	60b9      	str	r1, [r7, #8]
 80060f8:	603b      	str	r3, [r7, #0]
 80060fa:	4613      	mov	r3, r2
 80060fc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80060fe:	2300      	movs	r3, #0
 8006100:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006108:	b2db      	uxtb	r3, r3
 800610a:	2b20      	cmp	r3, #32
 800610c:	d17c      	bne.n	8006208 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800610e:	68bb      	ldr	r3, [r7, #8]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d002      	beq.n	800611a <HAL_UART_Transmit+0x2c>
 8006114:	88fb      	ldrh	r3, [r7, #6]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e075      	b.n	800620a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006124:	2b01      	cmp	r3, #1
 8006126:	d101      	bne.n	800612c <HAL_UART_Transmit+0x3e>
 8006128:	2302      	movs	r3, #2
 800612a:	e06e      	b.n	800620a <HAL_UART_Transmit+0x11c>
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	2201      	movs	r2, #1
 8006130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	2200      	movs	r2, #0
 8006138:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	2221      	movs	r2, #33	; 0x21
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006142:	f7fc fe35 	bl	8002db0 <HAL_GetTick>
 8006146:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	88fa      	ldrh	r2, [r7, #6]
 800614c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	88fa      	ldrh	r2, [r7, #6]
 8006152:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	689b      	ldr	r3, [r3, #8]
 8006158:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800615c:	d108      	bne.n	8006170 <HAL_UART_Transmit+0x82>
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	691b      	ldr	r3, [r3, #16]
 8006162:	2b00      	cmp	r3, #0
 8006164:	d104      	bne.n	8006170 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006166:	2300      	movs	r3, #0
 8006168:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800616a:	68bb      	ldr	r3, [r7, #8]
 800616c:	61bb      	str	r3, [r7, #24]
 800616e:	e003      	b.n	8006178 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006170:	68bb      	ldr	r3, [r7, #8]
 8006172:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006174:	2300      	movs	r3, #0
 8006176:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	2200      	movs	r2, #0
 800617c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006180:	e02a      	b.n	80061d8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	9300      	str	r3, [sp, #0]
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	2200      	movs	r2, #0
 800618a:	2180      	movs	r1, #128	; 0x80
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f000 fb8d 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 8006192:	4603      	mov	r3, r0
 8006194:	2b00      	cmp	r3, #0
 8006196:	d001      	beq.n	800619c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006198:	2303      	movs	r3, #3
 800619a:	e036      	b.n	800620a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800619c:	69fb      	ldr	r3, [r7, #28]
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d10b      	bne.n	80061ba <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80061a2:	69bb      	ldr	r3, [r7, #24]
 80061a4:	881b      	ldrh	r3, [r3, #0]
 80061a6:	461a      	mov	r2, r3
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80061b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	3302      	adds	r3, #2
 80061b6:	61bb      	str	r3, [r7, #24]
 80061b8:	e007      	b.n	80061ca <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80061ba:	69fb      	ldr	r3, [r7, #28]
 80061bc:	781a      	ldrb	r2, [r3, #0]
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80061c4:	69fb      	ldr	r3, [r7, #28]
 80061c6:	3301      	adds	r3, #1
 80061c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061ce:	b29b      	uxth	r3, r3
 80061d0:	3b01      	subs	r3, #1
 80061d2:	b29a      	uxth	r2, r3
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80061dc:	b29b      	uxth	r3, r3
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d1cf      	bne.n	8006182 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80061e2:	683b      	ldr	r3, [r7, #0]
 80061e4:	9300      	str	r3, [sp, #0]
 80061e6:	697b      	ldr	r3, [r7, #20]
 80061e8:	2200      	movs	r2, #0
 80061ea:	2140      	movs	r1, #64	; 0x40
 80061ec:	68f8      	ldr	r0, [r7, #12]
 80061ee:	f000 fb5d 	bl	80068ac <UART_WaitOnFlagUntilTimeout>
 80061f2:	4603      	mov	r3, r0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d001      	beq.n	80061fc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80061f8:	2303      	movs	r3, #3
 80061fa:	e006      	b.n	800620a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	2220      	movs	r2, #32
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006204:	2300      	movs	r3, #0
 8006206:	e000      	b.n	800620a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006208:	2302      	movs	r3, #2
  }
}
 800620a:	4618      	mov	r0, r3
 800620c:	3720      	adds	r7, #32
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}

08006212 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006212:	b480      	push	{r7}
 8006214:	b085      	sub	sp, #20
 8006216:	af00      	add	r7, sp, #0
 8006218:	60f8      	str	r0, [r7, #12]
 800621a:	60b9      	str	r1, [r7, #8]
 800621c:	4613      	mov	r3, r2
 800621e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b20      	cmp	r3, #32
 800622a:	d130      	bne.n	800628e <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	2b00      	cmp	r3, #0
 8006230:	d002      	beq.n	8006238 <HAL_UART_Transmit_IT+0x26>
 8006232:	88fb      	ldrh	r3, [r7, #6]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d101      	bne.n	800623c <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006238:	2301      	movs	r3, #1
 800623a:	e029      	b.n	8006290 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006242:	2b01      	cmp	r3, #1
 8006244:	d101      	bne.n	800624a <HAL_UART_Transmit_IT+0x38>
 8006246:	2302      	movs	r3, #2
 8006248:	e022      	b.n	8006290 <HAL_UART_Transmit_IT+0x7e>
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	2201      	movs	r2, #1
 800624e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	68ba      	ldr	r2, [r7, #8]
 8006256:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	88fa      	ldrh	r2, [r7, #6]
 800625c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	88fa      	ldrh	r2, [r7, #6]
 8006262:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	2221      	movs	r2, #33	; 0x21
 800626e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	2200      	movs	r2, #0
 8006276:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68da      	ldr	r2, [r3, #12]
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006288:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800628a:	2300      	movs	r3, #0
 800628c:	e000      	b.n	8006290 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800628e:	2302      	movs	r3, #2
  }
}
 8006290:	4618      	mov	r0, r3
 8006292:	3714      	adds	r7, #20
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800629c:	b580      	push	{r7, lr}
 800629e:	b084      	sub	sp, #16
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	60f8      	str	r0, [r7, #12]
 80062a4:	60b9      	str	r1, [r7, #8]
 80062a6:	4613      	mov	r3, r2
 80062a8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80062b0:	b2db      	uxtb	r3, r3
 80062b2:	2b20      	cmp	r3, #32
 80062b4:	d11d      	bne.n	80062f2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80062b6:	68bb      	ldr	r3, [r7, #8]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d002      	beq.n	80062c2 <HAL_UART_Receive_DMA+0x26>
 80062bc:	88fb      	ldrh	r3, [r7, #6]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e016      	b.n	80062f4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062cc:	2b01      	cmp	r3, #1
 80062ce:	d101      	bne.n	80062d4 <HAL_UART_Receive_DMA+0x38>
 80062d0:	2302      	movs	r3, #2
 80062d2:	e00f      	b.n	80062f4 <HAL_UART_Receive_DMA+0x58>
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	2201      	movs	r2, #1
 80062d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	2200      	movs	r2, #0
 80062e0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80062e2:	88fb      	ldrh	r3, [r7, #6]
 80062e4:	461a      	mov	r2, r3
 80062e6:	68b9      	ldr	r1, [r7, #8]
 80062e8:	68f8      	ldr	r0, [r7, #12]
 80062ea:	f000 fb29 	bl	8006940 <UART_Start_Receive_DMA>
 80062ee:	4603      	mov	r3, r0
 80062f0:	e000      	b.n	80062f4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80062f2:	2302      	movs	r3, #2
  }
}
 80062f4:	4618      	mov	r0, r3
 80062f6:	3710      	adds	r7, #16
 80062f8:	46bd      	mov	sp, r7
 80062fa:	bd80      	pop	{r7, pc}

080062fc <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80062fc:	b580      	push	{r7, lr}
 80062fe:	b082      	sub	sp, #8
 8006300:	af00      	add	r7, sp, #0
 8006302:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	68da      	ldr	r2, [r3, #12]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006312:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	695a      	ldr	r2, [r3, #20]
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	f022 0201 	bic.w	r2, r2, #1
 8006322:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006328:	2b01      	cmp	r3, #1
 800632a:	d107      	bne.n	800633c <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	68da      	ldr	r2, [r3, #12]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f022 0210 	bic.w	r2, r2, #16
 800633a:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	695b      	ldr	r3, [r3, #20]
 8006342:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006346:	2b40      	cmp	r3, #64	; 0x40
 8006348:	d124      	bne.n	8006394 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	695a      	ldr	r2, [r3, #20]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006358:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800635e:	2b00      	cmp	r3, #0
 8006360:	d018      	beq.n	8006394 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006366:	2200      	movs	r2, #0
 8006368:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800636e:	4618      	mov	r0, r3
 8006370:	f7fd f998 	bl	80036a4 <HAL_DMA_Abort>
 8006374:	4603      	mov	r3, r0
 8006376:	2b00      	cmp	r3, #0
 8006378:	d00c      	beq.n	8006394 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800637e:	4618      	mov	r0, r3
 8006380:	f7fd fbac 	bl	8003adc <HAL_DMA_GetError>
 8006384:	4603      	mov	r3, r0
 8006386:	2b20      	cmp	r3, #32
 8006388:	d104      	bne.n	8006394 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2210      	movs	r2, #16
 800638e:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006390:	2303      	movs	r3, #3
 8006392:	e00a      	b.n	80063aa <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2200      	movs	r2, #0
 8006398:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	2220      	movs	r2, #32
 800639e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2200      	movs	r2, #0
 80063a6:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 80063a8:	2300      	movs	r3, #0
}
 80063aa:	4618      	mov	r0, r3
 80063ac:	3708      	adds	r7, #8
 80063ae:	46bd      	mov	sp, r7
 80063b0:	bd80      	pop	{r7, pc}
	...

080063b4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08a      	sub	sp, #40	; 0x28
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	68db      	ldr	r3, [r3, #12]
 80063ca:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 80063d8:	2300      	movs	r3, #0
 80063da:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80063dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063de:	f003 030f 	and.w	r3, r3, #15
 80063e2:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80063e4:	69bb      	ldr	r3, [r7, #24]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d10d      	bne.n	8006406 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80063ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ec:	f003 0320 	and.w	r3, r3, #32
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d008      	beq.n	8006406 <HAL_UART_IRQHandler+0x52>
 80063f4:	6a3b      	ldr	r3, [r7, #32]
 80063f6:	f003 0320 	and.w	r3, r3, #32
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d003      	beq.n	8006406 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f000 fbc1 	bl	8006b86 <UART_Receive_IT>
      return;
 8006404:	e17c      	b.n	8006700 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006406:	69bb      	ldr	r3, [r7, #24]
 8006408:	2b00      	cmp	r3, #0
 800640a:	f000 80b1 	beq.w	8006570 <HAL_UART_IRQHandler+0x1bc>
 800640e:	69fb      	ldr	r3, [r7, #28]
 8006410:	f003 0301 	and.w	r3, r3, #1
 8006414:	2b00      	cmp	r3, #0
 8006416:	d105      	bne.n	8006424 <HAL_UART_IRQHandler+0x70>
 8006418:	6a3b      	ldr	r3, [r7, #32]
 800641a:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800641e:	2b00      	cmp	r3, #0
 8006420:	f000 80a6 	beq.w	8006570 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006426:	f003 0301 	and.w	r3, r3, #1
 800642a:	2b00      	cmp	r3, #0
 800642c:	d00a      	beq.n	8006444 <HAL_UART_IRQHandler+0x90>
 800642e:	6a3b      	ldr	r3, [r7, #32]
 8006430:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006434:	2b00      	cmp	r3, #0
 8006436:	d005      	beq.n	8006444 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800643c:	f043 0201 	orr.w	r2, r3, #1
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006446:	f003 0304 	and.w	r3, r3, #4
 800644a:	2b00      	cmp	r3, #0
 800644c:	d00a      	beq.n	8006464 <HAL_UART_IRQHandler+0xb0>
 800644e:	69fb      	ldr	r3, [r7, #28]
 8006450:	f003 0301 	and.w	r3, r3, #1
 8006454:	2b00      	cmp	r3, #0
 8006456:	d005      	beq.n	8006464 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800645c:	f043 0202 	orr.w	r2, r3, #2
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <HAL_UART_IRQHandler+0xd0>
 800646e:	69fb      	ldr	r3, [r7, #28]
 8006470:	f003 0301 	and.w	r3, r3, #1
 8006474:	2b00      	cmp	r3, #0
 8006476:	d005      	beq.n	8006484 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800647c:	f043 0204 	orr.w	r2, r3, #4
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006486:	f003 0308 	and.w	r3, r3, #8
 800648a:	2b00      	cmp	r3, #0
 800648c:	d00f      	beq.n	80064ae <HAL_UART_IRQHandler+0xfa>
 800648e:	6a3b      	ldr	r3, [r7, #32]
 8006490:	f003 0320 	and.w	r3, r3, #32
 8006494:	2b00      	cmp	r3, #0
 8006496:	d104      	bne.n	80064a2 <HAL_UART_IRQHandler+0xee>
 8006498:	69fb      	ldr	r3, [r7, #28]
 800649a:	f003 0301 	and.w	r3, r3, #1
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d005      	beq.n	80064ae <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064a6:	f043 0208 	orr.w	r2, r3, #8
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	f000 811f 	beq.w	80066f6 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ba:	f003 0320 	and.w	r3, r3, #32
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d007      	beq.n	80064d2 <HAL_UART_IRQHandler+0x11e>
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	f003 0320 	and.w	r3, r3, #32
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d002      	beq.n	80064d2 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80064cc:	6878      	ldr	r0, [r7, #4]
 80064ce:	f000 fb5a 	bl	8006b86 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	695b      	ldr	r3, [r3, #20]
 80064d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064dc:	2b40      	cmp	r3, #64	; 0x40
 80064de:	bf0c      	ite	eq
 80064e0:	2301      	moveq	r3, #1
 80064e2:	2300      	movne	r3, #0
 80064e4:	b2db      	uxtb	r3, r3
 80064e6:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ec:	f003 0308 	and.w	r3, r3, #8
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <HAL_UART_IRQHandler+0x146>
 80064f4:	697b      	ldr	r3, [r7, #20]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d031      	beq.n	800655e <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80064fa:	6878      	ldr	r0, [r7, #4]
 80064fc:	f000 fa9a 	bl	8006a34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	695b      	ldr	r3, [r3, #20]
 8006506:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800650a:	2b40      	cmp	r3, #64	; 0x40
 800650c:	d123      	bne.n	8006556 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	695a      	ldr	r2, [r3, #20]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800651c:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006522:	2b00      	cmp	r3, #0
 8006524:	d013      	beq.n	800654e <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800652a:	4a77      	ldr	r2, [pc, #476]	; (8006708 <HAL_UART_IRQHandler+0x354>)
 800652c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006532:	4618      	mov	r0, r3
 8006534:	f7fd f926 	bl	8003784 <HAL_DMA_Abort_IT>
 8006538:	4603      	mov	r3, r0
 800653a:	2b00      	cmp	r3, #0
 800653c:	d016      	beq.n	800656c <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006544:	687a      	ldr	r2, [r7, #4]
 8006546:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006548:	4610      	mov	r0, r2
 800654a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800654c:	e00e      	b.n	800656c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f7fa f9a4 	bl	800089c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006554:	e00a      	b.n	800656c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006556:	6878      	ldr	r0, [r7, #4]
 8006558:	f7fa f9a0 	bl	800089c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800655c:	e006      	b.n	800656c <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f7fa f99c 	bl	800089c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2200      	movs	r2, #0
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800656a:	e0c4      	b.n	80066f6 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800656c:	bf00      	nop
    return;
 800656e:	e0c2      	b.n	80066f6 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006574:	2b01      	cmp	r3, #1
 8006576:	f040 80a2 	bne.w	80066be <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800657a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800657c:	f003 0310 	and.w	r3, r3, #16
 8006580:	2b00      	cmp	r3, #0
 8006582:	f000 809c 	beq.w	80066be <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006586:	6a3b      	ldr	r3, [r7, #32]
 8006588:	f003 0310 	and.w	r3, r3, #16
 800658c:	2b00      	cmp	r3, #0
 800658e:	f000 8096 	beq.w	80066be <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006592:	2300      	movs	r3, #0
 8006594:	60fb      	str	r3, [r7, #12]
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	60fb      	str	r3, [r7, #12]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	685b      	ldr	r3, [r3, #4]
 80065a4:	60fb      	str	r3, [r7, #12]
 80065a6:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	695b      	ldr	r3, [r3, #20]
 80065ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065b2:	2b40      	cmp	r3, #64	; 0x40
 80065b4:	d14f      	bne.n	8006656 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	685b      	ldr	r3, [r3, #4]
 80065be:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80065c0:	8a3b      	ldrh	r3, [r7, #16]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	f000 8099 	beq.w	80066fa <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80065cc:	8a3a      	ldrh	r2, [r7, #16]
 80065ce:	429a      	cmp	r2, r3
 80065d0:	f080 8093 	bcs.w	80066fa <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	8a3a      	ldrh	r2, [r7, #16]
 80065d8:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	69db      	ldr	r3, [r3, #28]
 80065e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80065e4:	d02b      	beq.n	800663e <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	68da      	ldr	r2, [r3, #12]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80065f4:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	695a      	ldr	r2, [r3, #20]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f022 0201 	bic.w	r2, r2, #1
 8006604:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	695a      	ldr	r2, [r3, #20]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006614:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2220      	movs	r2, #32
 800661a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	68da      	ldr	r2, [r3, #12]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f022 0210 	bic.w	r2, r2, #16
 8006632:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006638:	4618      	mov	r0, r3
 800663a:	f7fd f833 	bl	80036a4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006646:	b29b      	uxth	r3, r3
 8006648:	1ad3      	subs	r3, r2, r3
 800664a:	b29b      	uxth	r3, r3
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 f870 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006654:	e051      	b.n	80066fa <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800665e:	b29b      	uxth	r3, r3
 8006660:	1ad3      	subs	r3, r2, r3
 8006662:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006668:	b29b      	uxth	r3, r3
 800666a:	2b00      	cmp	r3, #0
 800666c:	d047      	beq.n	80066fe <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800666e:	8a7b      	ldrh	r3, [r7, #18]
 8006670:	2b00      	cmp	r3, #0
 8006672:	d044      	beq.n	80066fe <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	68da      	ldr	r2, [r3, #12]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006682:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	695a      	ldr	r2, [r3, #20]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f022 0201 	bic.w	r2, r2, #1
 8006692:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2220      	movs	r2, #32
 8006698:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f022 0210 	bic.w	r2, r2, #16
 80066b0:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80066b2:	8a7b      	ldrh	r3, [r7, #18]
 80066b4:	4619      	mov	r1, r3
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 f83c 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80066bc:	e01f      	b.n	80066fe <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80066be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d008      	beq.n	80066da <HAL_UART_IRQHandler+0x326>
 80066c8:	6a3b      	ldr	r3, [r7, #32]
 80066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80066d2:	6878      	ldr	r0, [r7, #4]
 80066d4:	f000 f9ef 	bl	8006ab6 <UART_Transmit_IT>
    return;
 80066d8:	e012      	b.n	8006700 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80066da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d00d      	beq.n	8006700 <HAL_UART_IRQHandler+0x34c>
 80066e4:	6a3b      	ldr	r3, [r7, #32]
 80066e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d008      	beq.n	8006700 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f000 fa31 	bl	8006b56 <UART_EndTransmit_IT>
    return;
 80066f4:	e004      	b.n	8006700 <HAL_UART_IRQHandler+0x34c>
    return;
 80066f6:	bf00      	nop
 80066f8:	e002      	b.n	8006700 <HAL_UART_IRQHandler+0x34c>
      return;
 80066fa:	bf00      	nop
 80066fc:	e000      	b.n	8006700 <HAL_UART_IRQHandler+0x34c>
      return;
 80066fe:	bf00      	nop
  }
}
 8006700:	3728      	adds	r7, #40	; 0x28
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	08006a8f 	.word	0x08006a8f

0800670c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800670c:	b480      	push	{r7}
 800670e:	b083      	sub	sp, #12
 8006710:	af00      	add	r7, sp, #0
 8006712:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006714:	bf00      	nop
 8006716:	370c      	adds	r7, #12
 8006718:	46bd      	mov	sp, r7
 800671a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671e:	4770      	bx	lr

08006720 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006720:	b480      	push	{r7}
 8006722:	b083      	sub	sp, #12
 8006724:	af00      	add	r7, sp, #0
 8006726:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8006728:	bf00      	nop
 800672a:	370c      	adds	r7, #12
 800672c:	46bd      	mov	sp, r7
 800672e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006732:	4770      	bx	lr

08006734 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006734:	b480      	push	{r7}
 8006736:	b083      	sub	sp, #12
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
 800673c:	460b      	mov	r3, r1
 800673e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006740:	bf00      	nop
 8006742:	370c      	adds	r7, #12
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr

0800674c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006758:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006764:	2b00      	cmp	r3, #0
 8006766:	d12a      	bne.n	80067be <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	2200      	movs	r2, #0
 800676c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800676e:	68fb      	ldr	r3, [r7, #12]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	68da      	ldr	r2, [r3, #12]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800677c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	695a      	ldr	r2, [r3, #20]
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	681b      	ldr	r3, [r3, #0]
 8006788:	f022 0201 	bic.w	r2, r2, #1
 800678c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	695a      	ldr	r2, [r3, #20]
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800679c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	2220      	movs	r2, #32
 80067a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067aa:	2b01      	cmp	r3, #1
 80067ac:	d107      	bne.n	80067be <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	68da      	ldr	r2, [r3, #12]
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f022 0210 	bic.w	r2, r2, #16
 80067bc:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067c2:	2b01      	cmp	r3, #1
 80067c4:	d106      	bne.n	80067d4 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067ca:	4619      	mov	r1, r3
 80067cc:	68f8      	ldr	r0, [r7, #12]
 80067ce:	f7ff ffb1 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80067d2:	e002      	b.n	80067da <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80067d4:	68f8      	ldr	r0, [r7, #12]
 80067d6:	f7fa f851 	bl	800087c <HAL_UART_RxCpltCallback>
}
 80067da:	bf00      	nop
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067ee:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067f4:	2b01      	cmp	r3, #1
 80067f6:	d108      	bne.n	800680a <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80067fc:	085b      	lsrs	r3, r3, #1
 80067fe:	b29b      	uxth	r3, r3
 8006800:	4619      	mov	r1, r3
 8006802:	68f8      	ldr	r0, [r7, #12]
 8006804:	f7ff ff96 	bl	8006734 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8006808:	e002      	b.n	8006810 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800680a:	68f8      	ldr	r0, [r7, #12]
 800680c:	f7ff ff88 	bl	8006720 <HAL_UART_RxHalfCpltCallback>
}
 8006810:	bf00      	nop
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b084      	sub	sp, #16
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006828:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800682a:	68bb      	ldr	r3, [r7, #8]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006834:	2b80      	cmp	r3, #128	; 0x80
 8006836:	bf0c      	ite	eq
 8006838:	2301      	moveq	r3, #1
 800683a:	2300      	movne	r3, #0
 800683c:	b2db      	uxtb	r3, r3
 800683e:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006846:	b2db      	uxtb	r3, r3
 8006848:	2b21      	cmp	r3, #33	; 0x21
 800684a:	d108      	bne.n	800685e <UART_DMAError+0x46>
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d005      	beq.n	800685e <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006852:	68bb      	ldr	r3, [r7, #8]
 8006854:	2200      	movs	r2, #0
 8006856:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006858:	68b8      	ldr	r0, [r7, #8]
 800685a:	f000 f8d5 	bl	8006a08 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800685e:	68bb      	ldr	r3, [r7, #8]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006868:	2b40      	cmp	r3, #64	; 0x40
 800686a:	bf0c      	ite	eq
 800686c:	2301      	moveq	r3, #1
 800686e:	2300      	movne	r3, #0
 8006870:	b2db      	uxtb	r3, r3
 8006872:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006874:	68bb      	ldr	r3, [r7, #8]
 8006876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b22      	cmp	r3, #34	; 0x22
 800687e:	d108      	bne.n	8006892 <UART_DMAError+0x7a>
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2200      	movs	r2, #0
 800688a:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800688c:	68b8      	ldr	r0, [r7, #8]
 800688e:	f000 f8d1 	bl	8006a34 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006896:	f043 0210 	orr.w	r2, r3, #16
 800689a:	68bb      	ldr	r3, [r7, #8]
 800689c:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800689e:	68b8      	ldr	r0, [r7, #8]
 80068a0:	f7f9 fffc 	bl	800089c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80068a4:	bf00      	nop
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b084      	sub	sp, #16
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	60f8      	str	r0, [r7, #12]
 80068b4:	60b9      	str	r1, [r7, #8]
 80068b6:	603b      	str	r3, [r7, #0]
 80068b8:	4613      	mov	r3, r2
 80068ba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80068bc:	e02c      	b.n	8006918 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80068be:	69bb      	ldr	r3, [r7, #24]
 80068c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068c4:	d028      	beq.n	8006918 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80068c6:	69bb      	ldr	r3, [r7, #24]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d007      	beq.n	80068dc <UART_WaitOnFlagUntilTimeout+0x30>
 80068cc:	f7fc fa70 	bl	8002db0 <HAL_GetTick>
 80068d0:	4602      	mov	r2, r0
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	1ad3      	subs	r3, r2, r3
 80068d6:	69ba      	ldr	r2, [r7, #24]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d21d      	bcs.n	8006918 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80068dc:	68fb      	ldr	r3, [r7, #12]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	68da      	ldr	r2, [r3, #12]
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80068ea:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	695a      	ldr	r2, [r3, #20]
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f022 0201 	bic.w	r2, r2, #1
 80068fa:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	2220      	movs	r2, #32
 8006900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	2220      	movs	r2, #32
 8006908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2200      	movs	r2, #0
 8006910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006914:	2303      	movs	r3, #3
 8006916:	e00f      	b.n	8006938 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	681a      	ldr	r2, [r3, #0]
 800691e:	68bb      	ldr	r3, [r7, #8]
 8006920:	4013      	ands	r3, r2
 8006922:	68ba      	ldr	r2, [r7, #8]
 8006924:	429a      	cmp	r2, r3
 8006926:	bf0c      	ite	eq
 8006928:	2301      	moveq	r3, #1
 800692a:	2300      	movne	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	461a      	mov	r2, r3
 8006930:	79fb      	ldrb	r3, [r7, #7]
 8006932:	429a      	cmp	r2, r3
 8006934:	d0c3      	beq.n	80068be <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006936:	2300      	movs	r3, #0
}
 8006938:	4618      	mov	r0, r3
 800693a:	3710      	adds	r7, #16
 800693c:	46bd      	mov	sp, r7
 800693e:	bd80      	pop	{r7, pc}

08006940 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006940:	b580      	push	{r7, lr}
 8006942:	b086      	sub	sp, #24
 8006944:	af00      	add	r7, sp, #0
 8006946:	60f8      	str	r0, [r7, #12]
 8006948:	60b9      	str	r1, [r7, #8]
 800694a:	4613      	mov	r3, r2
 800694c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 800694e:	68ba      	ldr	r2, [r7, #8]
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	88fa      	ldrh	r2, [r7, #6]
 8006958:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	2200      	movs	r2, #0
 800695e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006960:	68fb      	ldr	r3, [r7, #12]
 8006962:	2222      	movs	r2, #34	; 0x22
 8006964:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006968:	68fb      	ldr	r3, [r7, #12]
 800696a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800696c:	4a23      	ldr	r2, [pc, #140]	; (80069fc <UART_Start_Receive_DMA+0xbc>)
 800696e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006974:	4a22      	ldr	r2, [pc, #136]	; (8006a00 <UART_Start_Receive_DMA+0xc0>)
 8006976:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800697c:	4a21      	ldr	r2, [pc, #132]	; (8006a04 <UART_Start_Receive_DMA+0xc4>)
 800697e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006984:	2200      	movs	r2, #0
 8006986:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006988:	f107 0308 	add.w	r3, r7, #8
 800698c:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	3304      	adds	r3, #4
 8006998:	4619      	mov	r1, r3
 800699a:	697b      	ldr	r3, [r7, #20]
 800699c:	681a      	ldr	r2, [r3, #0]
 800699e:	88fb      	ldrh	r3, [r7, #6]
 80069a0:	f7fc fe28 	bl	80035f4 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80069a4:	2300      	movs	r3, #0
 80069a6:	613b      	str	r3, [r7, #16]
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	613b      	str	r3, [r7, #16]
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	613b      	str	r3, [r7, #16]
 80069b8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	2200      	movs	r2, #0
 80069be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	68da      	ldr	r2, [r3, #12]
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80069d0:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	695a      	ldr	r2, [r3, #20]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f042 0201 	orr.w	r2, r2, #1
 80069e0:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	695a      	ldr	r2, [r3, #20]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80069f0:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3718      	adds	r7, #24
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}
 80069fc:	0800674d 	.word	0x0800674d
 8006a00:	080067e3 	.word	0x080067e3
 8006a04:	08006819 	.word	0x08006819

08006a08 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b083      	sub	sp, #12
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68da      	ldr	r2, [r3, #12]
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006a1e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	2220      	movs	r2, #32
 8006a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006a28:	bf00      	nop
 8006a2a:	370c      	adds	r7, #12
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a32:	4770      	bx	lr

08006a34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b083      	sub	sp, #12
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68da      	ldr	r2, [r3, #12]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006a4a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695a      	ldr	r2, [r3, #20]
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	f022 0201 	bic.w	r2, r2, #1
 8006a5a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a60:	2b01      	cmp	r3, #1
 8006a62:	d107      	bne.n	8006a74 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	68da      	ldr	r2, [r3, #12]
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f022 0210 	bic.w	r2, r2, #16
 8006a72:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	2220      	movs	r2, #32
 8006a78:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2200      	movs	r2, #0
 8006a80:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006a82:	bf00      	nop
 8006a84:	370c      	adds	r7, #12
 8006a86:	46bd      	mov	sp, r7
 8006a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8c:	4770      	bx	lr

08006a8e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006a8e:	b580      	push	{r7, lr}
 8006a90:	b084      	sub	sp, #16
 8006a92:	af00      	add	r7, sp, #0
 8006a94:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	2200      	movs	r2, #0
 8006aa6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f7f9 fef7 	bl	800089c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}

08006ab6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006ab6:	b480      	push	{r7}
 8006ab8:	b085      	sub	sp, #20
 8006aba:	af00      	add	r7, sp, #0
 8006abc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ac4:	b2db      	uxtb	r3, r3
 8006ac6:	2b21      	cmp	r3, #33	; 0x21
 8006ac8:	d13e      	bne.n	8006b48 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	689b      	ldr	r3, [r3, #8]
 8006ace:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ad2:	d114      	bne.n	8006afe <UART_Transmit_IT+0x48>
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	691b      	ldr	r3, [r3, #16]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d110      	bne.n	8006afe <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a1b      	ldr	r3, [r3, #32]
 8006ae0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	461a      	mov	r2, r3
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006af0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	1c9a      	adds	r2, r3, #2
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	621a      	str	r2, [r3, #32]
 8006afc:	e008      	b.n	8006b10 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	1c59      	adds	r1, r3, #1
 8006b04:	687a      	ldr	r2, [r7, #4]
 8006b06:	6211      	str	r1, [r2, #32]
 8006b08:	781a      	ldrb	r2, [r3, #0]
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006b14:	b29b      	uxth	r3, r3
 8006b16:	3b01      	subs	r3, #1
 8006b18:	b29b      	uxth	r3, r3
 8006b1a:	687a      	ldr	r2, [r7, #4]
 8006b1c:	4619      	mov	r1, r3
 8006b1e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d10f      	bne.n	8006b44 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	68da      	ldr	r2, [r3, #12]
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006b32:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68da      	ldr	r2, [r3, #12]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006b42:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006b44:	2300      	movs	r3, #0
 8006b46:	e000      	b.n	8006b4a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006b48:	2302      	movs	r3, #2
  }
}
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	3714      	adds	r7, #20
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr

08006b56 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006b56:	b580      	push	{r7, lr}
 8006b58:	b082      	sub	sp, #8
 8006b5a:	af00      	add	r7, sp, #0
 8006b5c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	68da      	ldr	r2, [r3, #12]
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b6c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006b76:	6878      	ldr	r0, [r7, #4]
 8006b78:	f7ff fdc8 	bl	800670c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006b7c:	2300      	movs	r3, #0
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b084      	sub	sp, #16
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b94:	b2db      	uxtb	r3, r3
 8006b96:	2b22      	cmp	r3, #34	; 0x22
 8006b98:	f040 8087 	bne.w	8006caa <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	689b      	ldr	r3, [r3, #8]
 8006ba0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ba4:	d117      	bne.n	8006bd6 <UART_Receive_IT+0x50>
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	691b      	ldr	r3, [r3, #16]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d113      	bne.n	8006bd6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006bae:	2300      	movs	r3, #0
 8006bb0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	685b      	ldr	r3, [r3, #4]
 8006bbe:	b29b      	uxth	r3, r3
 8006bc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006bc4:	b29a      	uxth	r2, r3
 8006bc6:	68bb      	ldr	r3, [r7, #8]
 8006bc8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bce:	1c9a      	adds	r2, r3, #2
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	629a      	str	r2, [r3, #40]	; 0x28
 8006bd4:	e026      	b.n	8006c24 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bda:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006bdc:	2300      	movs	r3, #0
 8006bde:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	689b      	ldr	r3, [r3, #8]
 8006be4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be8:	d007      	beq.n	8006bfa <UART_Receive_IT+0x74>
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d10a      	bne.n	8006c08 <UART_Receive_IT+0x82>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d106      	bne.n	8006c08 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	685b      	ldr	r3, [r3, #4]
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	68fb      	ldr	r3, [r7, #12]
 8006c04:	701a      	strb	r2, [r3, #0]
 8006c06:	e008      	b.n	8006c1a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	681b      	ldr	r3, [r3, #0]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	b2db      	uxtb	r3, r3
 8006c10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006c14:	b2da      	uxtb	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c1e:	1c5a      	adds	r2, r3, #1
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006c28:	b29b      	uxth	r3, r3
 8006c2a:	3b01      	subs	r3, #1
 8006c2c:	b29b      	uxth	r3, r3
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	4619      	mov	r1, r3
 8006c32:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d136      	bne.n	8006ca6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	68da      	ldr	r2, [r3, #12]
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	f022 0220 	bic.w	r2, r2, #32
 8006c46:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68da      	ldr	r2, [r3, #12]
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006c56:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	695a      	ldr	r2, [r3, #20]
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	f022 0201 	bic.w	r2, r2, #1
 8006c66:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2220      	movs	r2, #32
 8006c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c74:	2b01      	cmp	r3, #1
 8006c76:	d10e      	bne.n	8006c96 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	681b      	ldr	r3, [r3, #0]
 8006c7c:	68da      	ldr	r2, [r3, #12]
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	f022 0210 	bic.w	r2, r2, #16
 8006c86:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006c8c:	4619      	mov	r1, r3
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f7ff fd50 	bl	8006734 <HAL_UARTEx_RxEventCallback>
 8006c94:	e002      	b.n	8006c9c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006c96:	6878      	ldr	r0, [r7, #4]
 8006c98:	f7f9 fdf0 	bl	800087c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	e002      	b.n	8006cac <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	e000      	b.n	8006cac <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006caa:	2302      	movs	r3, #2
  }
}
 8006cac:	4618      	mov	r0, r3
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}

08006cb4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cb8:	b09f      	sub	sp, #124	; 0x7c
 8006cba:	af00      	add	r7, sp, #0
 8006cbc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006cbe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	691b      	ldr	r3, [r3, #16]
 8006cc4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	68d9      	ldr	r1, [r3, #12]
 8006ccc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cce:	681a      	ldr	r2, [r3, #0]
 8006cd0:	ea40 0301 	orr.w	r3, r0, r1
 8006cd4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006cd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cdc:	691b      	ldr	r3, [r3, #16]
 8006cde:	431a      	orrs	r2, r3
 8006ce0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce2:	695b      	ldr	r3, [r3, #20]
 8006ce4:	431a      	orrs	r2, r3
 8006ce6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ce8:	69db      	ldr	r3, [r3, #28]
 8006cea:	4313      	orrs	r3, r2
 8006cec:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006cee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	68db      	ldr	r3, [r3, #12]
 8006cf4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cf8:	f021 010c 	bic.w	r1, r1, #12
 8006cfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d02:	430b      	orrs	r3, r1
 8006d04:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006d06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006d10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d12:	6999      	ldr	r1, [r3, #24]
 8006d14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d16:	681a      	ldr	r2, [r3, #0]
 8006d18:	ea40 0301 	orr.w	r3, r0, r1
 8006d1c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006d1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d20:	681a      	ldr	r2, [r3, #0]
 8006d22:	4bc5      	ldr	r3, [pc, #788]	; (8007038 <UART_SetConfig+0x384>)
 8006d24:	429a      	cmp	r2, r3
 8006d26:	d004      	beq.n	8006d32 <UART_SetConfig+0x7e>
 8006d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d2a:	681a      	ldr	r2, [r3, #0]
 8006d2c:	4bc3      	ldr	r3, [pc, #780]	; (800703c <UART_SetConfig+0x388>)
 8006d2e:	429a      	cmp	r2, r3
 8006d30:	d103      	bne.n	8006d3a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006d32:	f7fd fdd5 	bl	80048e0 <HAL_RCC_GetPCLK2Freq>
 8006d36:	6778      	str	r0, [r7, #116]	; 0x74
 8006d38:	e002      	b.n	8006d40 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006d3a:	f7fd fdbd 	bl	80048b8 <HAL_RCC_GetPCLK1Freq>
 8006d3e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006d40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d42:	69db      	ldr	r3, [r3, #28]
 8006d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006d48:	f040 80b6 	bne.w	8006eb8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d4e:	461c      	mov	r4, r3
 8006d50:	f04f 0500 	mov.w	r5, #0
 8006d54:	4622      	mov	r2, r4
 8006d56:	462b      	mov	r3, r5
 8006d58:	1891      	adds	r1, r2, r2
 8006d5a:	6439      	str	r1, [r7, #64]	; 0x40
 8006d5c:	415b      	adcs	r3, r3
 8006d5e:	647b      	str	r3, [r7, #68]	; 0x44
 8006d60:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d64:	1912      	adds	r2, r2, r4
 8006d66:	eb45 0303 	adc.w	r3, r5, r3
 8006d6a:	f04f 0000 	mov.w	r0, #0
 8006d6e:	f04f 0100 	mov.w	r1, #0
 8006d72:	00d9      	lsls	r1, r3, #3
 8006d74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d78:	00d0      	lsls	r0, r2, #3
 8006d7a:	4602      	mov	r2, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	1911      	adds	r1, r2, r4
 8006d80:	6639      	str	r1, [r7, #96]	; 0x60
 8006d82:	416b      	adcs	r3, r5
 8006d84:	667b      	str	r3, [r7, #100]	; 0x64
 8006d86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	461a      	mov	r2, r3
 8006d8c:	f04f 0300 	mov.w	r3, #0
 8006d90:	1891      	adds	r1, r2, r2
 8006d92:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d94:	415b      	adcs	r3, r3
 8006d96:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d98:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d9c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006da0:	f7f9 fa12 	bl	80001c8 <__aeabi_uldivmod>
 8006da4:	4602      	mov	r2, r0
 8006da6:	460b      	mov	r3, r1
 8006da8:	4ba5      	ldr	r3, [pc, #660]	; (8007040 <UART_SetConfig+0x38c>)
 8006daa:	fba3 2302 	umull	r2, r3, r3, r2
 8006dae:	095b      	lsrs	r3, r3, #5
 8006db0:	011e      	lsls	r6, r3, #4
 8006db2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006db4:	461c      	mov	r4, r3
 8006db6:	f04f 0500 	mov.w	r5, #0
 8006dba:	4622      	mov	r2, r4
 8006dbc:	462b      	mov	r3, r5
 8006dbe:	1891      	adds	r1, r2, r2
 8006dc0:	6339      	str	r1, [r7, #48]	; 0x30
 8006dc2:	415b      	adcs	r3, r3
 8006dc4:	637b      	str	r3, [r7, #52]	; 0x34
 8006dc6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006dca:	1912      	adds	r2, r2, r4
 8006dcc:	eb45 0303 	adc.w	r3, r5, r3
 8006dd0:	f04f 0000 	mov.w	r0, #0
 8006dd4:	f04f 0100 	mov.w	r1, #0
 8006dd8:	00d9      	lsls	r1, r3, #3
 8006dda:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006dde:	00d0      	lsls	r0, r2, #3
 8006de0:	4602      	mov	r2, r0
 8006de2:	460b      	mov	r3, r1
 8006de4:	1911      	adds	r1, r2, r4
 8006de6:	65b9      	str	r1, [r7, #88]	; 0x58
 8006de8:	416b      	adcs	r3, r5
 8006dea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006dec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dee:	685b      	ldr	r3, [r3, #4]
 8006df0:	461a      	mov	r2, r3
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	1891      	adds	r1, r2, r2
 8006df8:	62b9      	str	r1, [r7, #40]	; 0x28
 8006dfa:	415b      	adcs	r3, r3
 8006dfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006dfe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006e02:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006e06:	f7f9 f9df 	bl	80001c8 <__aeabi_uldivmod>
 8006e0a:	4602      	mov	r2, r0
 8006e0c:	460b      	mov	r3, r1
 8006e0e:	4b8c      	ldr	r3, [pc, #560]	; (8007040 <UART_SetConfig+0x38c>)
 8006e10:	fba3 1302 	umull	r1, r3, r3, r2
 8006e14:	095b      	lsrs	r3, r3, #5
 8006e16:	2164      	movs	r1, #100	; 0x64
 8006e18:	fb01 f303 	mul.w	r3, r1, r3
 8006e1c:	1ad3      	subs	r3, r2, r3
 8006e1e:	00db      	lsls	r3, r3, #3
 8006e20:	3332      	adds	r3, #50	; 0x32
 8006e22:	4a87      	ldr	r2, [pc, #540]	; (8007040 <UART_SetConfig+0x38c>)
 8006e24:	fba2 2303 	umull	r2, r3, r2, r3
 8006e28:	095b      	lsrs	r3, r3, #5
 8006e2a:	005b      	lsls	r3, r3, #1
 8006e2c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006e30:	441e      	add	r6, r3
 8006e32:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e34:	4618      	mov	r0, r3
 8006e36:	f04f 0100 	mov.w	r1, #0
 8006e3a:	4602      	mov	r2, r0
 8006e3c:	460b      	mov	r3, r1
 8006e3e:	1894      	adds	r4, r2, r2
 8006e40:	623c      	str	r4, [r7, #32]
 8006e42:	415b      	adcs	r3, r3
 8006e44:	627b      	str	r3, [r7, #36]	; 0x24
 8006e46:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e4a:	1812      	adds	r2, r2, r0
 8006e4c:	eb41 0303 	adc.w	r3, r1, r3
 8006e50:	f04f 0400 	mov.w	r4, #0
 8006e54:	f04f 0500 	mov.w	r5, #0
 8006e58:	00dd      	lsls	r5, r3, #3
 8006e5a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e5e:	00d4      	lsls	r4, r2, #3
 8006e60:	4622      	mov	r2, r4
 8006e62:	462b      	mov	r3, r5
 8006e64:	1814      	adds	r4, r2, r0
 8006e66:	653c      	str	r4, [r7, #80]	; 0x50
 8006e68:	414b      	adcs	r3, r1
 8006e6a:	657b      	str	r3, [r7, #84]	; 0x54
 8006e6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e6e:	685b      	ldr	r3, [r3, #4]
 8006e70:	461a      	mov	r2, r3
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	1891      	adds	r1, r2, r2
 8006e78:	61b9      	str	r1, [r7, #24]
 8006e7a:	415b      	adcs	r3, r3
 8006e7c:	61fb      	str	r3, [r7, #28]
 8006e7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e82:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e86:	f7f9 f99f 	bl	80001c8 <__aeabi_uldivmod>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	460b      	mov	r3, r1
 8006e8e:	4b6c      	ldr	r3, [pc, #432]	; (8007040 <UART_SetConfig+0x38c>)
 8006e90:	fba3 1302 	umull	r1, r3, r3, r2
 8006e94:	095b      	lsrs	r3, r3, #5
 8006e96:	2164      	movs	r1, #100	; 0x64
 8006e98:	fb01 f303 	mul.w	r3, r1, r3
 8006e9c:	1ad3      	subs	r3, r2, r3
 8006e9e:	00db      	lsls	r3, r3, #3
 8006ea0:	3332      	adds	r3, #50	; 0x32
 8006ea2:	4a67      	ldr	r2, [pc, #412]	; (8007040 <UART_SetConfig+0x38c>)
 8006ea4:	fba2 2303 	umull	r2, r3, r2, r3
 8006ea8:	095b      	lsrs	r3, r3, #5
 8006eaa:	f003 0207 	and.w	r2, r3, #7
 8006eae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4432      	add	r2, r6
 8006eb4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006eb6:	e0b9      	b.n	800702c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006eb8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eba:	461c      	mov	r4, r3
 8006ebc:	f04f 0500 	mov.w	r5, #0
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	462b      	mov	r3, r5
 8006ec4:	1891      	adds	r1, r2, r2
 8006ec6:	6139      	str	r1, [r7, #16]
 8006ec8:	415b      	adcs	r3, r3
 8006eca:	617b      	str	r3, [r7, #20]
 8006ecc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006ed0:	1912      	adds	r2, r2, r4
 8006ed2:	eb45 0303 	adc.w	r3, r5, r3
 8006ed6:	f04f 0000 	mov.w	r0, #0
 8006eda:	f04f 0100 	mov.w	r1, #0
 8006ede:	00d9      	lsls	r1, r3, #3
 8006ee0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ee4:	00d0      	lsls	r0, r2, #3
 8006ee6:	4602      	mov	r2, r0
 8006ee8:	460b      	mov	r3, r1
 8006eea:	eb12 0804 	adds.w	r8, r2, r4
 8006eee:	eb43 0905 	adc.w	r9, r3, r5
 8006ef2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ef4:	685b      	ldr	r3, [r3, #4]
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	f04f 0100 	mov.w	r1, #0
 8006efc:	f04f 0200 	mov.w	r2, #0
 8006f00:	f04f 0300 	mov.w	r3, #0
 8006f04:	008b      	lsls	r3, r1, #2
 8006f06:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f0a:	0082      	lsls	r2, r0, #2
 8006f0c:	4640      	mov	r0, r8
 8006f0e:	4649      	mov	r1, r9
 8006f10:	f7f9 f95a 	bl	80001c8 <__aeabi_uldivmod>
 8006f14:	4602      	mov	r2, r0
 8006f16:	460b      	mov	r3, r1
 8006f18:	4b49      	ldr	r3, [pc, #292]	; (8007040 <UART_SetConfig+0x38c>)
 8006f1a:	fba3 2302 	umull	r2, r3, r3, r2
 8006f1e:	095b      	lsrs	r3, r3, #5
 8006f20:	011e      	lsls	r6, r3, #4
 8006f22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f24:	4618      	mov	r0, r3
 8006f26:	f04f 0100 	mov.w	r1, #0
 8006f2a:	4602      	mov	r2, r0
 8006f2c:	460b      	mov	r3, r1
 8006f2e:	1894      	adds	r4, r2, r2
 8006f30:	60bc      	str	r4, [r7, #8]
 8006f32:	415b      	adcs	r3, r3
 8006f34:	60fb      	str	r3, [r7, #12]
 8006f36:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006f3a:	1812      	adds	r2, r2, r0
 8006f3c:	eb41 0303 	adc.w	r3, r1, r3
 8006f40:	f04f 0400 	mov.w	r4, #0
 8006f44:	f04f 0500 	mov.w	r5, #0
 8006f48:	00dd      	lsls	r5, r3, #3
 8006f4a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f4e:	00d4      	lsls	r4, r2, #3
 8006f50:	4622      	mov	r2, r4
 8006f52:	462b      	mov	r3, r5
 8006f54:	1814      	adds	r4, r2, r0
 8006f56:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f58:	414b      	adcs	r3, r1
 8006f5a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f5e:	685b      	ldr	r3, [r3, #4]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f04f 0100 	mov.w	r1, #0
 8006f66:	f04f 0200 	mov.w	r2, #0
 8006f6a:	f04f 0300 	mov.w	r3, #0
 8006f6e:	008b      	lsls	r3, r1, #2
 8006f70:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f74:	0082      	lsls	r2, r0, #2
 8006f76:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f7a:	f7f9 f925 	bl	80001c8 <__aeabi_uldivmod>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	460b      	mov	r3, r1
 8006f82:	4b2f      	ldr	r3, [pc, #188]	; (8007040 <UART_SetConfig+0x38c>)
 8006f84:	fba3 1302 	umull	r1, r3, r3, r2
 8006f88:	095b      	lsrs	r3, r3, #5
 8006f8a:	2164      	movs	r1, #100	; 0x64
 8006f8c:	fb01 f303 	mul.w	r3, r1, r3
 8006f90:	1ad3      	subs	r3, r2, r3
 8006f92:	011b      	lsls	r3, r3, #4
 8006f94:	3332      	adds	r3, #50	; 0x32
 8006f96:	4a2a      	ldr	r2, [pc, #168]	; (8007040 <UART_SetConfig+0x38c>)
 8006f98:	fba2 2303 	umull	r2, r3, r2, r3
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006fa2:	441e      	add	r6, r3
 8006fa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f04f 0100 	mov.w	r1, #0
 8006fac:	4602      	mov	r2, r0
 8006fae:	460b      	mov	r3, r1
 8006fb0:	1894      	adds	r4, r2, r2
 8006fb2:	603c      	str	r4, [r7, #0]
 8006fb4:	415b      	adcs	r3, r3
 8006fb6:	607b      	str	r3, [r7, #4]
 8006fb8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006fbc:	1812      	adds	r2, r2, r0
 8006fbe:	eb41 0303 	adc.w	r3, r1, r3
 8006fc2:	f04f 0400 	mov.w	r4, #0
 8006fc6:	f04f 0500 	mov.w	r5, #0
 8006fca:	00dd      	lsls	r5, r3, #3
 8006fcc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006fd0:	00d4      	lsls	r4, r2, #3
 8006fd2:	4622      	mov	r2, r4
 8006fd4:	462b      	mov	r3, r5
 8006fd6:	eb12 0a00 	adds.w	sl, r2, r0
 8006fda:	eb43 0b01 	adc.w	fp, r3, r1
 8006fde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fe0:	685b      	ldr	r3, [r3, #4]
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	f04f 0100 	mov.w	r1, #0
 8006fe8:	f04f 0200 	mov.w	r2, #0
 8006fec:	f04f 0300 	mov.w	r3, #0
 8006ff0:	008b      	lsls	r3, r1, #2
 8006ff2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ff6:	0082      	lsls	r2, r0, #2
 8006ff8:	4650      	mov	r0, sl
 8006ffa:	4659      	mov	r1, fp
 8006ffc:	f7f9 f8e4 	bl	80001c8 <__aeabi_uldivmod>
 8007000:	4602      	mov	r2, r0
 8007002:	460b      	mov	r3, r1
 8007004:	4b0e      	ldr	r3, [pc, #56]	; (8007040 <UART_SetConfig+0x38c>)
 8007006:	fba3 1302 	umull	r1, r3, r3, r2
 800700a:	095b      	lsrs	r3, r3, #5
 800700c:	2164      	movs	r1, #100	; 0x64
 800700e:	fb01 f303 	mul.w	r3, r1, r3
 8007012:	1ad3      	subs	r3, r2, r3
 8007014:	011b      	lsls	r3, r3, #4
 8007016:	3332      	adds	r3, #50	; 0x32
 8007018:	4a09      	ldr	r2, [pc, #36]	; (8007040 <UART_SetConfig+0x38c>)
 800701a:	fba2 2303 	umull	r2, r3, r2, r3
 800701e:	095b      	lsrs	r3, r3, #5
 8007020:	f003 020f 	and.w	r2, r3, #15
 8007024:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	4432      	add	r2, r6
 800702a:	609a      	str	r2, [r3, #8]
}
 800702c:	bf00      	nop
 800702e:	377c      	adds	r7, #124	; 0x7c
 8007030:	46bd      	mov	sp, r7
 8007032:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007036:	bf00      	nop
 8007038:	40011000 	.word	0x40011000
 800703c:	40011400 	.word	0x40011400
 8007040:	51eb851f 	.word	0x51eb851f

08007044 <__errno>:
 8007044:	4b01      	ldr	r3, [pc, #4]	; (800704c <__errno+0x8>)
 8007046:	6818      	ldr	r0, [r3, #0]
 8007048:	4770      	bx	lr
 800704a:	bf00      	nop
 800704c:	200001e0 	.word	0x200001e0

08007050 <__libc_init_array>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	4d0d      	ldr	r5, [pc, #52]	; (8007088 <__libc_init_array+0x38>)
 8007054:	4c0d      	ldr	r4, [pc, #52]	; (800708c <__libc_init_array+0x3c>)
 8007056:	1b64      	subs	r4, r4, r5
 8007058:	10a4      	asrs	r4, r4, #2
 800705a:	2600      	movs	r6, #0
 800705c:	42a6      	cmp	r6, r4
 800705e:	d109      	bne.n	8007074 <__libc_init_array+0x24>
 8007060:	4d0b      	ldr	r5, [pc, #44]	; (8007090 <__libc_init_array+0x40>)
 8007062:	4c0c      	ldr	r4, [pc, #48]	; (8007094 <__libc_init_array+0x44>)
 8007064:	f000 fce6 	bl	8007a34 <_init>
 8007068:	1b64      	subs	r4, r4, r5
 800706a:	10a4      	asrs	r4, r4, #2
 800706c:	2600      	movs	r6, #0
 800706e:	42a6      	cmp	r6, r4
 8007070:	d105      	bne.n	800707e <__libc_init_array+0x2e>
 8007072:	bd70      	pop	{r4, r5, r6, pc}
 8007074:	f855 3b04 	ldr.w	r3, [r5], #4
 8007078:	4798      	blx	r3
 800707a:	3601      	adds	r6, #1
 800707c:	e7ee      	b.n	800705c <__libc_init_array+0xc>
 800707e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007082:	4798      	blx	r3
 8007084:	3601      	adds	r6, #1
 8007086:	e7f2      	b.n	800706e <__libc_init_array+0x1e>
 8007088:	0800855c 	.word	0x0800855c
 800708c:	0800855c 	.word	0x0800855c
 8007090:	0800855c 	.word	0x0800855c
 8007094:	08008560 	.word	0x08008560

08007098 <memset>:
 8007098:	4402      	add	r2, r0
 800709a:	4603      	mov	r3, r0
 800709c:	4293      	cmp	r3, r2
 800709e:	d100      	bne.n	80070a2 <memset+0xa>
 80070a0:	4770      	bx	lr
 80070a2:	f803 1b01 	strb.w	r1, [r3], #1
 80070a6:	e7f9      	b.n	800709c <memset+0x4>

080070a8 <_puts_r>:
 80070a8:	b570      	push	{r4, r5, r6, lr}
 80070aa:	460e      	mov	r6, r1
 80070ac:	4605      	mov	r5, r0
 80070ae:	b118      	cbz	r0, 80070b8 <_puts_r+0x10>
 80070b0:	6983      	ldr	r3, [r0, #24]
 80070b2:	b90b      	cbnz	r3, 80070b8 <_puts_r+0x10>
 80070b4:	f000 fa48 	bl	8007548 <__sinit>
 80070b8:	69ab      	ldr	r3, [r5, #24]
 80070ba:	68ac      	ldr	r4, [r5, #8]
 80070bc:	b913      	cbnz	r3, 80070c4 <_puts_r+0x1c>
 80070be:	4628      	mov	r0, r5
 80070c0:	f000 fa42 	bl	8007548 <__sinit>
 80070c4:	4b2c      	ldr	r3, [pc, #176]	; (8007178 <_puts_r+0xd0>)
 80070c6:	429c      	cmp	r4, r3
 80070c8:	d120      	bne.n	800710c <_puts_r+0x64>
 80070ca:	686c      	ldr	r4, [r5, #4]
 80070cc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070ce:	07db      	lsls	r3, r3, #31
 80070d0:	d405      	bmi.n	80070de <_puts_r+0x36>
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	0598      	lsls	r0, r3, #22
 80070d6:	d402      	bmi.n	80070de <_puts_r+0x36>
 80070d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070da:	f000 fad3 	bl	8007684 <__retarget_lock_acquire_recursive>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	0719      	lsls	r1, r3, #28
 80070e2:	d51d      	bpl.n	8007120 <_puts_r+0x78>
 80070e4:	6923      	ldr	r3, [r4, #16]
 80070e6:	b1db      	cbz	r3, 8007120 <_puts_r+0x78>
 80070e8:	3e01      	subs	r6, #1
 80070ea:	68a3      	ldr	r3, [r4, #8]
 80070ec:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80070f0:	3b01      	subs	r3, #1
 80070f2:	60a3      	str	r3, [r4, #8]
 80070f4:	bb39      	cbnz	r1, 8007146 <_puts_r+0x9e>
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	da38      	bge.n	800716c <_puts_r+0xc4>
 80070fa:	4622      	mov	r2, r4
 80070fc:	210a      	movs	r1, #10
 80070fe:	4628      	mov	r0, r5
 8007100:	f000 f848 	bl	8007194 <__swbuf_r>
 8007104:	3001      	adds	r0, #1
 8007106:	d011      	beq.n	800712c <_puts_r+0x84>
 8007108:	250a      	movs	r5, #10
 800710a:	e011      	b.n	8007130 <_puts_r+0x88>
 800710c:	4b1b      	ldr	r3, [pc, #108]	; (800717c <_puts_r+0xd4>)
 800710e:	429c      	cmp	r4, r3
 8007110:	d101      	bne.n	8007116 <_puts_r+0x6e>
 8007112:	68ac      	ldr	r4, [r5, #8]
 8007114:	e7da      	b.n	80070cc <_puts_r+0x24>
 8007116:	4b1a      	ldr	r3, [pc, #104]	; (8007180 <_puts_r+0xd8>)
 8007118:	429c      	cmp	r4, r3
 800711a:	bf08      	it	eq
 800711c:	68ec      	ldreq	r4, [r5, #12]
 800711e:	e7d5      	b.n	80070cc <_puts_r+0x24>
 8007120:	4621      	mov	r1, r4
 8007122:	4628      	mov	r0, r5
 8007124:	f000 f888 	bl	8007238 <__swsetup_r>
 8007128:	2800      	cmp	r0, #0
 800712a:	d0dd      	beq.n	80070e8 <_puts_r+0x40>
 800712c:	f04f 35ff 	mov.w	r5, #4294967295
 8007130:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007132:	07da      	lsls	r2, r3, #31
 8007134:	d405      	bmi.n	8007142 <_puts_r+0x9a>
 8007136:	89a3      	ldrh	r3, [r4, #12]
 8007138:	059b      	lsls	r3, r3, #22
 800713a:	d402      	bmi.n	8007142 <_puts_r+0x9a>
 800713c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800713e:	f000 faa2 	bl	8007686 <__retarget_lock_release_recursive>
 8007142:	4628      	mov	r0, r5
 8007144:	bd70      	pop	{r4, r5, r6, pc}
 8007146:	2b00      	cmp	r3, #0
 8007148:	da04      	bge.n	8007154 <_puts_r+0xac>
 800714a:	69a2      	ldr	r2, [r4, #24]
 800714c:	429a      	cmp	r2, r3
 800714e:	dc06      	bgt.n	800715e <_puts_r+0xb6>
 8007150:	290a      	cmp	r1, #10
 8007152:	d004      	beq.n	800715e <_puts_r+0xb6>
 8007154:	6823      	ldr	r3, [r4, #0]
 8007156:	1c5a      	adds	r2, r3, #1
 8007158:	6022      	str	r2, [r4, #0]
 800715a:	7019      	strb	r1, [r3, #0]
 800715c:	e7c5      	b.n	80070ea <_puts_r+0x42>
 800715e:	4622      	mov	r2, r4
 8007160:	4628      	mov	r0, r5
 8007162:	f000 f817 	bl	8007194 <__swbuf_r>
 8007166:	3001      	adds	r0, #1
 8007168:	d1bf      	bne.n	80070ea <_puts_r+0x42>
 800716a:	e7df      	b.n	800712c <_puts_r+0x84>
 800716c:	6823      	ldr	r3, [r4, #0]
 800716e:	250a      	movs	r5, #10
 8007170:	1c5a      	adds	r2, r3, #1
 8007172:	6022      	str	r2, [r4, #0]
 8007174:	701d      	strb	r5, [r3, #0]
 8007176:	e7db      	b.n	8007130 <_puts_r+0x88>
 8007178:	08008514 	.word	0x08008514
 800717c:	08008534 	.word	0x08008534
 8007180:	080084f4 	.word	0x080084f4

08007184 <puts>:
 8007184:	4b02      	ldr	r3, [pc, #8]	; (8007190 <puts+0xc>)
 8007186:	4601      	mov	r1, r0
 8007188:	6818      	ldr	r0, [r3, #0]
 800718a:	f7ff bf8d 	b.w	80070a8 <_puts_r>
 800718e:	bf00      	nop
 8007190:	200001e0 	.word	0x200001e0

08007194 <__swbuf_r>:
 8007194:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007196:	460e      	mov	r6, r1
 8007198:	4614      	mov	r4, r2
 800719a:	4605      	mov	r5, r0
 800719c:	b118      	cbz	r0, 80071a6 <__swbuf_r+0x12>
 800719e:	6983      	ldr	r3, [r0, #24]
 80071a0:	b90b      	cbnz	r3, 80071a6 <__swbuf_r+0x12>
 80071a2:	f000 f9d1 	bl	8007548 <__sinit>
 80071a6:	4b21      	ldr	r3, [pc, #132]	; (800722c <__swbuf_r+0x98>)
 80071a8:	429c      	cmp	r4, r3
 80071aa:	d12b      	bne.n	8007204 <__swbuf_r+0x70>
 80071ac:	686c      	ldr	r4, [r5, #4]
 80071ae:	69a3      	ldr	r3, [r4, #24]
 80071b0:	60a3      	str	r3, [r4, #8]
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	071a      	lsls	r2, r3, #28
 80071b6:	d52f      	bpl.n	8007218 <__swbuf_r+0x84>
 80071b8:	6923      	ldr	r3, [r4, #16]
 80071ba:	b36b      	cbz	r3, 8007218 <__swbuf_r+0x84>
 80071bc:	6923      	ldr	r3, [r4, #16]
 80071be:	6820      	ldr	r0, [r4, #0]
 80071c0:	1ac0      	subs	r0, r0, r3
 80071c2:	6963      	ldr	r3, [r4, #20]
 80071c4:	b2f6      	uxtb	r6, r6
 80071c6:	4283      	cmp	r3, r0
 80071c8:	4637      	mov	r7, r6
 80071ca:	dc04      	bgt.n	80071d6 <__swbuf_r+0x42>
 80071cc:	4621      	mov	r1, r4
 80071ce:	4628      	mov	r0, r5
 80071d0:	f000 f926 	bl	8007420 <_fflush_r>
 80071d4:	bb30      	cbnz	r0, 8007224 <__swbuf_r+0x90>
 80071d6:	68a3      	ldr	r3, [r4, #8]
 80071d8:	3b01      	subs	r3, #1
 80071da:	60a3      	str	r3, [r4, #8]
 80071dc:	6823      	ldr	r3, [r4, #0]
 80071de:	1c5a      	adds	r2, r3, #1
 80071e0:	6022      	str	r2, [r4, #0]
 80071e2:	701e      	strb	r6, [r3, #0]
 80071e4:	6963      	ldr	r3, [r4, #20]
 80071e6:	3001      	adds	r0, #1
 80071e8:	4283      	cmp	r3, r0
 80071ea:	d004      	beq.n	80071f6 <__swbuf_r+0x62>
 80071ec:	89a3      	ldrh	r3, [r4, #12]
 80071ee:	07db      	lsls	r3, r3, #31
 80071f0:	d506      	bpl.n	8007200 <__swbuf_r+0x6c>
 80071f2:	2e0a      	cmp	r6, #10
 80071f4:	d104      	bne.n	8007200 <__swbuf_r+0x6c>
 80071f6:	4621      	mov	r1, r4
 80071f8:	4628      	mov	r0, r5
 80071fa:	f000 f911 	bl	8007420 <_fflush_r>
 80071fe:	b988      	cbnz	r0, 8007224 <__swbuf_r+0x90>
 8007200:	4638      	mov	r0, r7
 8007202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007204:	4b0a      	ldr	r3, [pc, #40]	; (8007230 <__swbuf_r+0x9c>)
 8007206:	429c      	cmp	r4, r3
 8007208:	d101      	bne.n	800720e <__swbuf_r+0x7a>
 800720a:	68ac      	ldr	r4, [r5, #8]
 800720c:	e7cf      	b.n	80071ae <__swbuf_r+0x1a>
 800720e:	4b09      	ldr	r3, [pc, #36]	; (8007234 <__swbuf_r+0xa0>)
 8007210:	429c      	cmp	r4, r3
 8007212:	bf08      	it	eq
 8007214:	68ec      	ldreq	r4, [r5, #12]
 8007216:	e7ca      	b.n	80071ae <__swbuf_r+0x1a>
 8007218:	4621      	mov	r1, r4
 800721a:	4628      	mov	r0, r5
 800721c:	f000 f80c 	bl	8007238 <__swsetup_r>
 8007220:	2800      	cmp	r0, #0
 8007222:	d0cb      	beq.n	80071bc <__swbuf_r+0x28>
 8007224:	f04f 37ff 	mov.w	r7, #4294967295
 8007228:	e7ea      	b.n	8007200 <__swbuf_r+0x6c>
 800722a:	bf00      	nop
 800722c:	08008514 	.word	0x08008514
 8007230:	08008534 	.word	0x08008534
 8007234:	080084f4 	.word	0x080084f4

08007238 <__swsetup_r>:
 8007238:	4b32      	ldr	r3, [pc, #200]	; (8007304 <__swsetup_r+0xcc>)
 800723a:	b570      	push	{r4, r5, r6, lr}
 800723c:	681d      	ldr	r5, [r3, #0]
 800723e:	4606      	mov	r6, r0
 8007240:	460c      	mov	r4, r1
 8007242:	b125      	cbz	r5, 800724e <__swsetup_r+0x16>
 8007244:	69ab      	ldr	r3, [r5, #24]
 8007246:	b913      	cbnz	r3, 800724e <__swsetup_r+0x16>
 8007248:	4628      	mov	r0, r5
 800724a:	f000 f97d 	bl	8007548 <__sinit>
 800724e:	4b2e      	ldr	r3, [pc, #184]	; (8007308 <__swsetup_r+0xd0>)
 8007250:	429c      	cmp	r4, r3
 8007252:	d10f      	bne.n	8007274 <__swsetup_r+0x3c>
 8007254:	686c      	ldr	r4, [r5, #4]
 8007256:	89a3      	ldrh	r3, [r4, #12]
 8007258:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800725c:	0719      	lsls	r1, r3, #28
 800725e:	d42c      	bmi.n	80072ba <__swsetup_r+0x82>
 8007260:	06dd      	lsls	r5, r3, #27
 8007262:	d411      	bmi.n	8007288 <__swsetup_r+0x50>
 8007264:	2309      	movs	r3, #9
 8007266:	6033      	str	r3, [r6, #0]
 8007268:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800726c:	81a3      	strh	r3, [r4, #12]
 800726e:	f04f 30ff 	mov.w	r0, #4294967295
 8007272:	e03e      	b.n	80072f2 <__swsetup_r+0xba>
 8007274:	4b25      	ldr	r3, [pc, #148]	; (800730c <__swsetup_r+0xd4>)
 8007276:	429c      	cmp	r4, r3
 8007278:	d101      	bne.n	800727e <__swsetup_r+0x46>
 800727a:	68ac      	ldr	r4, [r5, #8]
 800727c:	e7eb      	b.n	8007256 <__swsetup_r+0x1e>
 800727e:	4b24      	ldr	r3, [pc, #144]	; (8007310 <__swsetup_r+0xd8>)
 8007280:	429c      	cmp	r4, r3
 8007282:	bf08      	it	eq
 8007284:	68ec      	ldreq	r4, [r5, #12]
 8007286:	e7e6      	b.n	8007256 <__swsetup_r+0x1e>
 8007288:	0758      	lsls	r0, r3, #29
 800728a:	d512      	bpl.n	80072b2 <__swsetup_r+0x7a>
 800728c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800728e:	b141      	cbz	r1, 80072a2 <__swsetup_r+0x6a>
 8007290:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007294:	4299      	cmp	r1, r3
 8007296:	d002      	beq.n	800729e <__swsetup_r+0x66>
 8007298:	4630      	mov	r0, r6
 800729a:	f000 fa59 	bl	8007750 <_free_r>
 800729e:	2300      	movs	r3, #0
 80072a0:	6363      	str	r3, [r4, #52]	; 0x34
 80072a2:	89a3      	ldrh	r3, [r4, #12]
 80072a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80072a8:	81a3      	strh	r3, [r4, #12]
 80072aa:	2300      	movs	r3, #0
 80072ac:	6063      	str	r3, [r4, #4]
 80072ae:	6923      	ldr	r3, [r4, #16]
 80072b0:	6023      	str	r3, [r4, #0]
 80072b2:	89a3      	ldrh	r3, [r4, #12]
 80072b4:	f043 0308 	orr.w	r3, r3, #8
 80072b8:	81a3      	strh	r3, [r4, #12]
 80072ba:	6923      	ldr	r3, [r4, #16]
 80072bc:	b94b      	cbnz	r3, 80072d2 <__swsetup_r+0x9a>
 80072be:	89a3      	ldrh	r3, [r4, #12]
 80072c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80072c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80072c8:	d003      	beq.n	80072d2 <__swsetup_r+0x9a>
 80072ca:	4621      	mov	r1, r4
 80072cc:	4630      	mov	r0, r6
 80072ce:	f000 f9ff 	bl	80076d0 <__smakebuf_r>
 80072d2:	89a0      	ldrh	r0, [r4, #12]
 80072d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80072d8:	f010 0301 	ands.w	r3, r0, #1
 80072dc:	d00a      	beq.n	80072f4 <__swsetup_r+0xbc>
 80072de:	2300      	movs	r3, #0
 80072e0:	60a3      	str	r3, [r4, #8]
 80072e2:	6963      	ldr	r3, [r4, #20]
 80072e4:	425b      	negs	r3, r3
 80072e6:	61a3      	str	r3, [r4, #24]
 80072e8:	6923      	ldr	r3, [r4, #16]
 80072ea:	b943      	cbnz	r3, 80072fe <__swsetup_r+0xc6>
 80072ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80072f0:	d1ba      	bne.n	8007268 <__swsetup_r+0x30>
 80072f2:	bd70      	pop	{r4, r5, r6, pc}
 80072f4:	0781      	lsls	r1, r0, #30
 80072f6:	bf58      	it	pl
 80072f8:	6963      	ldrpl	r3, [r4, #20]
 80072fa:	60a3      	str	r3, [r4, #8]
 80072fc:	e7f4      	b.n	80072e8 <__swsetup_r+0xb0>
 80072fe:	2000      	movs	r0, #0
 8007300:	e7f7      	b.n	80072f2 <__swsetup_r+0xba>
 8007302:	bf00      	nop
 8007304:	200001e0 	.word	0x200001e0
 8007308:	08008514 	.word	0x08008514
 800730c:	08008534 	.word	0x08008534
 8007310:	080084f4 	.word	0x080084f4

08007314 <__sflush_r>:
 8007314:	898a      	ldrh	r2, [r1, #12]
 8007316:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800731a:	4605      	mov	r5, r0
 800731c:	0710      	lsls	r0, r2, #28
 800731e:	460c      	mov	r4, r1
 8007320:	d458      	bmi.n	80073d4 <__sflush_r+0xc0>
 8007322:	684b      	ldr	r3, [r1, #4]
 8007324:	2b00      	cmp	r3, #0
 8007326:	dc05      	bgt.n	8007334 <__sflush_r+0x20>
 8007328:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800732a:	2b00      	cmp	r3, #0
 800732c:	dc02      	bgt.n	8007334 <__sflush_r+0x20>
 800732e:	2000      	movs	r0, #0
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007336:	2e00      	cmp	r6, #0
 8007338:	d0f9      	beq.n	800732e <__sflush_r+0x1a>
 800733a:	2300      	movs	r3, #0
 800733c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007340:	682f      	ldr	r7, [r5, #0]
 8007342:	602b      	str	r3, [r5, #0]
 8007344:	d032      	beq.n	80073ac <__sflush_r+0x98>
 8007346:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007348:	89a3      	ldrh	r3, [r4, #12]
 800734a:	075a      	lsls	r2, r3, #29
 800734c:	d505      	bpl.n	800735a <__sflush_r+0x46>
 800734e:	6863      	ldr	r3, [r4, #4]
 8007350:	1ac0      	subs	r0, r0, r3
 8007352:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007354:	b10b      	cbz	r3, 800735a <__sflush_r+0x46>
 8007356:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007358:	1ac0      	subs	r0, r0, r3
 800735a:	2300      	movs	r3, #0
 800735c:	4602      	mov	r2, r0
 800735e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007360:	6a21      	ldr	r1, [r4, #32]
 8007362:	4628      	mov	r0, r5
 8007364:	47b0      	blx	r6
 8007366:	1c43      	adds	r3, r0, #1
 8007368:	89a3      	ldrh	r3, [r4, #12]
 800736a:	d106      	bne.n	800737a <__sflush_r+0x66>
 800736c:	6829      	ldr	r1, [r5, #0]
 800736e:	291d      	cmp	r1, #29
 8007370:	d82c      	bhi.n	80073cc <__sflush_r+0xb8>
 8007372:	4a2a      	ldr	r2, [pc, #168]	; (800741c <__sflush_r+0x108>)
 8007374:	40ca      	lsrs	r2, r1
 8007376:	07d6      	lsls	r6, r2, #31
 8007378:	d528      	bpl.n	80073cc <__sflush_r+0xb8>
 800737a:	2200      	movs	r2, #0
 800737c:	6062      	str	r2, [r4, #4]
 800737e:	04d9      	lsls	r1, r3, #19
 8007380:	6922      	ldr	r2, [r4, #16]
 8007382:	6022      	str	r2, [r4, #0]
 8007384:	d504      	bpl.n	8007390 <__sflush_r+0x7c>
 8007386:	1c42      	adds	r2, r0, #1
 8007388:	d101      	bne.n	800738e <__sflush_r+0x7a>
 800738a:	682b      	ldr	r3, [r5, #0]
 800738c:	b903      	cbnz	r3, 8007390 <__sflush_r+0x7c>
 800738e:	6560      	str	r0, [r4, #84]	; 0x54
 8007390:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007392:	602f      	str	r7, [r5, #0]
 8007394:	2900      	cmp	r1, #0
 8007396:	d0ca      	beq.n	800732e <__sflush_r+0x1a>
 8007398:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800739c:	4299      	cmp	r1, r3
 800739e:	d002      	beq.n	80073a6 <__sflush_r+0x92>
 80073a0:	4628      	mov	r0, r5
 80073a2:	f000 f9d5 	bl	8007750 <_free_r>
 80073a6:	2000      	movs	r0, #0
 80073a8:	6360      	str	r0, [r4, #52]	; 0x34
 80073aa:	e7c1      	b.n	8007330 <__sflush_r+0x1c>
 80073ac:	6a21      	ldr	r1, [r4, #32]
 80073ae:	2301      	movs	r3, #1
 80073b0:	4628      	mov	r0, r5
 80073b2:	47b0      	blx	r6
 80073b4:	1c41      	adds	r1, r0, #1
 80073b6:	d1c7      	bne.n	8007348 <__sflush_r+0x34>
 80073b8:	682b      	ldr	r3, [r5, #0]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d0c4      	beq.n	8007348 <__sflush_r+0x34>
 80073be:	2b1d      	cmp	r3, #29
 80073c0:	d001      	beq.n	80073c6 <__sflush_r+0xb2>
 80073c2:	2b16      	cmp	r3, #22
 80073c4:	d101      	bne.n	80073ca <__sflush_r+0xb6>
 80073c6:	602f      	str	r7, [r5, #0]
 80073c8:	e7b1      	b.n	800732e <__sflush_r+0x1a>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073d0:	81a3      	strh	r3, [r4, #12]
 80073d2:	e7ad      	b.n	8007330 <__sflush_r+0x1c>
 80073d4:	690f      	ldr	r7, [r1, #16]
 80073d6:	2f00      	cmp	r7, #0
 80073d8:	d0a9      	beq.n	800732e <__sflush_r+0x1a>
 80073da:	0793      	lsls	r3, r2, #30
 80073dc:	680e      	ldr	r6, [r1, #0]
 80073de:	bf08      	it	eq
 80073e0:	694b      	ldreq	r3, [r1, #20]
 80073e2:	600f      	str	r7, [r1, #0]
 80073e4:	bf18      	it	ne
 80073e6:	2300      	movne	r3, #0
 80073e8:	eba6 0807 	sub.w	r8, r6, r7
 80073ec:	608b      	str	r3, [r1, #8]
 80073ee:	f1b8 0f00 	cmp.w	r8, #0
 80073f2:	dd9c      	ble.n	800732e <__sflush_r+0x1a>
 80073f4:	6a21      	ldr	r1, [r4, #32]
 80073f6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073f8:	4643      	mov	r3, r8
 80073fa:	463a      	mov	r2, r7
 80073fc:	4628      	mov	r0, r5
 80073fe:	47b0      	blx	r6
 8007400:	2800      	cmp	r0, #0
 8007402:	dc06      	bgt.n	8007412 <__sflush_r+0xfe>
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800740a:	81a3      	strh	r3, [r4, #12]
 800740c:	f04f 30ff 	mov.w	r0, #4294967295
 8007410:	e78e      	b.n	8007330 <__sflush_r+0x1c>
 8007412:	4407      	add	r7, r0
 8007414:	eba8 0800 	sub.w	r8, r8, r0
 8007418:	e7e9      	b.n	80073ee <__sflush_r+0xda>
 800741a:	bf00      	nop
 800741c:	20400001 	.word	0x20400001

08007420 <_fflush_r>:
 8007420:	b538      	push	{r3, r4, r5, lr}
 8007422:	690b      	ldr	r3, [r1, #16]
 8007424:	4605      	mov	r5, r0
 8007426:	460c      	mov	r4, r1
 8007428:	b913      	cbnz	r3, 8007430 <_fflush_r+0x10>
 800742a:	2500      	movs	r5, #0
 800742c:	4628      	mov	r0, r5
 800742e:	bd38      	pop	{r3, r4, r5, pc}
 8007430:	b118      	cbz	r0, 800743a <_fflush_r+0x1a>
 8007432:	6983      	ldr	r3, [r0, #24]
 8007434:	b90b      	cbnz	r3, 800743a <_fflush_r+0x1a>
 8007436:	f000 f887 	bl	8007548 <__sinit>
 800743a:	4b14      	ldr	r3, [pc, #80]	; (800748c <_fflush_r+0x6c>)
 800743c:	429c      	cmp	r4, r3
 800743e:	d11b      	bne.n	8007478 <_fflush_r+0x58>
 8007440:	686c      	ldr	r4, [r5, #4]
 8007442:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007446:	2b00      	cmp	r3, #0
 8007448:	d0ef      	beq.n	800742a <_fflush_r+0xa>
 800744a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800744c:	07d0      	lsls	r0, r2, #31
 800744e:	d404      	bmi.n	800745a <_fflush_r+0x3a>
 8007450:	0599      	lsls	r1, r3, #22
 8007452:	d402      	bmi.n	800745a <_fflush_r+0x3a>
 8007454:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007456:	f000 f915 	bl	8007684 <__retarget_lock_acquire_recursive>
 800745a:	4628      	mov	r0, r5
 800745c:	4621      	mov	r1, r4
 800745e:	f7ff ff59 	bl	8007314 <__sflush_r>
 8007462:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007464:	07da      	lsls	r2, r3, #31
 8007466:	4605      	mov	r5, r0
 8007468:	d4e0      	bmi.n	800742c <_fflush_r+0xc>
 800746a:	89a3      	ldrh	r3, [r4, #12]
 800746c:	059b      	lsls	r3, r3, #22
 800746e:	d4dd      	bmi.n	800742c <_fflush_r+0xc>
 8007470:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007472:	f000 f908 	bl	8007686 <__retarget_lock_release_recursive>
 8007476:	e7d9      	b.n	800742c <_fflush_r+0xc>
 8007478:	4b05      	ldr	r3, [pc, #20]	; (8007490 <_fflush_r+0x70>)
 800747a:	429c      	cmp	r4, r3
 800747c:	d101      	bne.n	8007482 <_fflush_r+0x62>
 800747e:	68ac      	ldr	r4, [r5, #8]
 8007480:	e7df      	b.n	8007442 <_fflush_r+0x22>
 8007482:	4b04      	ldr	r3, [pc, #16]	; (8007494 <_fflush_r+0x74>)
 8007484:	429c      	cmp	r4, r3
 8007486:	bf08      	it	eq
 8007488:	68ec      	ldreq	r4, [r5, #12]
 800748a:	e7da      	b.n	8007442 <_fflush_r+0x22>
 800748c:	08008514 	.word	0x08008514
 8007490:	08008534 	.word	0x08008534
 8007494:	080084f4 	.word	0x080084f4

08007498 <std>:
 8007498:	2300      	movs	r3, #0
 800749a:	b510      	push	{r4, lr}
 800749c:	4604      	mov	r4, r0
 800749e:	e9c0 3300 	strd	r3, r3, [r0]
 80074a2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80074a6:	6083      	str	r3, [r0, #8]
 80074a8:	8181      	strh	r1, [r0, #12]
 80074aa:	6643      	str	r3, [r0, #100]	; 0x64
 80074ac:	81c2      	strh	r2, [r0, #14]
 80074ae:	6183      	str	r3, [r0, #24]
 80074b0:	4619      	mov	r1, r3
 80074b2:	2208      	movs	r2, #8
 80074b4:	305c      	adds	r0, #92	; 0x5c
 80074b6:	f7ff fdef 	bl	8007098 <memset>
 80074ba:	4b05      	ldr	r3, [pc, #20]	; (80074d0 <std+0x38>)
 80074bc:	6263      	str	r3, [r4, #36]	; 0x24
 80074be:	4b05      	ldr	r3, [pc, #20]	; (80074d4 <std+0x3c>)
 80074c0:	62a3      	str	r3, [r4, #40]	; 0x28
 80074c2:	4b05      	ldr	r3, [pc, #20]	; (80074d8 <std+0x40>)
 80074c4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80074c6:	4b05      	ldr	r3, [pc, #20]	; (80074dc <std+0x44>)
 80074c8:	6224      	str	r4, [r4, #32]
 80074ca:	6323      	str	r3, [r4, #48]	; 0x30
 80074cc:	bd10      	pop	{r4, pc}
 80074ce:	bf00      	nop
 80074d0:	080078c5 	.word	0x080078c5
 80074d4:	080078e7 	.word	0x080078e7
 80074d8:	0800791f 	.word	0x0800791f
 80074dc:	08007943 	.word	0x08007943

080074e0 <_cleanup_r>:
 80074e0:	4901      	ldr	r1, [pc, #4]	; (80074e8 <_cleanup_r+0x8>)
 80074e2:	f000 b8af 	b.w	8007644 <_fwalk_reent>
 80074e6:	bf00      	nop
 80074e8:	08007421 	.word	0x08007421

080074ec <__sfmoreglue>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	1e4a      	subs	r2, r1, #1
 80074f0:	2568      	movs	r5, #104	; 0x68
 80074f2:	4355      	muls	r5, r2
 80074f4:	460e      	mov	r6, r1
 80074f6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074fa:	f000 f979 	bl	80077f0 <_malloc_r>
 80074fe:	4604      	mov	r4, r0
 8007500:	b140      	cbz	r0, 8007514 <__sfmoreglue+0x28>
 8007502:	2100      	movs	r1, #0
 8007504:	e9c0 1600 	strd	r1, r6, [r0]
 8007508:	300c      	adds	r0, #12
 800750a:	60a0      	str	r0, [r4, #8]
 800750c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007510:	f7ff fdc2 	bl	8007098 <memset>
 8007514:	4620      	mov	r0, r4
 8007516:	bd70      	pop	{r4, r5, r6, pc}

08007518 <__sfp_lock_acquire>:
 8007518:	4801      	ldr	r0, [pc, #4]	; (8007520 <__sfp_lock_acquire+0x8>)
 800751a:	f000 b8b3 	b.w	8007684 <__retarget_lock_acquire_recursive>
 800751e:	bf00      	nop
 8007520:	20000cd0 	.word	0x20000cd0

08007524 <__sfp_lock_release>:
 8007524:	4801      	ldr	r0, [pc, #4]	; (800752c <__sfp_lock_release+0x8>)
 8007526:	f000 b8ae 	b.w	8007686 <__retarget_lock_release_recursive>
 800752a:	bf00      	nop
 800752c:	20000cd0 	.word	0x20000cd0

08007530 <__sinit_lock_acquire>:
 8007530:	4801      	ldr	r0, [pc, #4]	; (8007538 <__sinit_lock_acquire+0x8>)
 8007532:	f000 b8a7 	b.w	8007684 <__retarget_lock_acquire_recursive>
 8007536:	bf00      	nop
 8007538:	20000ccb 	.word	0x20000ccb

0800753c <__sinit_lock_release>:
 800753c:	4801      	ldr	r0, [pc, #4]	; (8007544 <__sinit_lock_release+0x8>)
 800753e:	f000 b8a2 	b.w	8007686 <__retarget_lock_release_recursive>
 8007542:	bf00      	nop
 8007544:	20000ccb 	.word	0x20000ccb

08007548 <__sinit>:
 8007548:	b510      	push	{r4, lr}
 800754a:	4604      	mov	r4, r0
 800754c:	f7ff fff0 	bl	8007530 <__sinit_lock_acquire>
 8007550:	69a3      	ldr	r3, [r4, #24]
 8007552:	b11b      	cbz	r3, 800755c <__sinit+0x14>
 8007554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007558:	f7ff bff0 	b.w	800753c <__sinit_lock_release>
 800755c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007560:	6523      	str	r3, [r4, #80]	; 0x50
 8007562:	4b13      	ldr	r3, [pc, #76]	; (80075b0 <__sinit+0x68>)
 8007564:	4a13      	ldr	r2, [pc, #76]	; (80075b4 <__sinit+0x6c>)
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	62a2      	str	r2, [r4, #40]	; 0x28
 800756a:	42a3      	cmp	r3, r4
 800756c:	bf04      	itt	eq
 800756e:	2301      	moveq	r3, #1
 8007570:	61a3      	streq	r3, [r4, #24]
 8007572:	4620      	mov	r0, r4
 8007574:	f000 f820 	bl	80075b8 <__sfp>
 8007578:	6060      	str	r0, [r4, #4]
 800757a:	4620      	mov	r0, r4
 800757c:	f000 f81c 	bl	80075b8 <__sfp>
 8007580:	60a0      	str	r0, [r4, #8]
 8007582:	4620      	mov	r0, r4
 8007584:	f000 f818 	bl	80075b8 <__sfp>
 8007588:	2200      	movs	r2, #0
 800758a:	60e0      	str	r0, [r4, #12]
 800758c:	2104      	movs	r1, #4
 800758e:	6860      	ldr	r0, [r4, #4]
 8007590:	f7ff ff82 	bl	8007498 <std>
 8007594:	68a0      	ldr	r0, [r4, #8]
 8007596:	2201      	movs	r2, #1
 8007598:	2109      	movs	r1, #9
 800759a:	f7ff ff7d 	bl	8007498 <std>
 800759e:	68e0      	ldr	r0, [r4, #12]
 80075a0:	2202      	movs	r2, #2
 80075a2:	2112      	movs	r1, #18
 80075a4:	f7ff ff78 	bl	8007498 <std>
 80075a8:	2301      	movs	r3, #1
 80075aa:	61a3      	str	r3, [r4, #24]
 80075ac:	e7d2      	b.n	8007554 <__sinit+0xc>
 80075ae:	bf00      	nop
 80075b0:	080084f0 	.word	0x080084f0
 80075b4:	080074e1 	.word	0x080074e1

080075b8 <__sfp>:
 80075b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075ba:	4607      	mov	r7, r0
 80075bc:	f7ff ffac 	bl	8007518 <__sfp_lock_acquire>
 80075c0:	4b1e      	ldr	r3, [pc, #120]	; (800763c <__sfp+0x84>)
 80075c2:	681e      	ldr	r6, [r3, #0]
 80075c4:	69b3      	ldr	r3, [r6, #24]
 80075c6:	b913      	cbnz	r3, 80075ce <__sfp+0x16>
 80075c8:	4630      	mov	r0, r6
 80075ca:	f7ff ffbd 	bl	8007548 <__sinit>
 80075ce:	3648      	adds	r6, #72	; 0x48
 80075d0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80075d4:	3b01      	subs	r3, #1
 80075d6:	d503      	bpl.n	80075e0 <__sfp+0x28>
 80075d8:	6833      	ldr	r3, [r6, #0]
 80075da:	b30b      	cbz	r3, 8007620 <__sfp+0x68>
 80075dc:	6836      	ldr	r6, [r6, #0]
 80075de:	e7f7      	b.n	80075d0 <__sfp+0x18>
 80075e0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80075e4:	b9d5      	cbnz	r5, 800761c <__sfp+0x64>
 80075e6:	4b16      	ldr	r3, [pc, #88]	; (8007640 <__sfp+0x88>)
 80075e8:	60e3      	str	r3, [r4, #12]
 80075ea:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80075ee:	6665      	str	r5, [r4, #100]	; 0x64
 80075f0:	f000 f847 	bl	8007682 <__retarget_lock_init_recursive>
 80075f4:	f7ff ff96 	bl	8007524 <__sfp_lock_release>
 80075f8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075fc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007600:	6025      	str	r5, [r4, #0]
 8007602:	61a5      	str	r5, [r4, #24]
 8007604:	2208      	movs	r2, #8
 8007606:	4629      	mov	r1, r5
 8007608:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800760c:	f7ff fd44 	bl	8007098 <memset>
 8007610:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007614:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007618:	4620      	mov	r0, r4
 800761a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800761c:	3468      	adds	r4, #104	; 0x68
 800761e:	e7d9      	b.n	80075d4 <__sfp+0x1c>
 8007620:	2104      	movs	r1, #4
 8007622:	4638      	mov	r0, r7
 8007624:	f7ff ff62 	bl	80074ec <__sfmoreglue>
 8007628:	4604      	mov	r4, r0
 800762a:	6030      	str	r0, [r6, #0]
 800762c:	2800      	cmp	r0, #0
 800762e:	d1d5      	bne.n	80075dc <__sfp+0x24>
 8007630:	f7ff ff78 	bl	8007524 <__sfp_lock_release>
 8007634:	230c      	movs	r3, #12
 8007636:	603b      	str	r3, [r7, #0]
 8007638:	e7ee      	b.n	8007618 <__sfp+0x60>
 800763a:	bf00      	nop
 800763c:	080084f0 	.word	0x080084f0
 8007640:	ffff0001 	.word	0xffff0001

08007644 <_fwalk_reent>:
 8007644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007648:	4606      	mov	r6, r0
 800764a:	4688      	mov	r8, r1
 800764c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007650:	2700      	movs	r7, #0
 8007652:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007656:	f1b9 0901 	subs.w	r9, r9, #1
 800765a:	d505      	bpl.n	8007668 <_fwalk_reent+0x24>
 800765c:	6824      	ldr	r4, [r4, #0]
 800765e:	2c00      	cmp	r4, #0
 8007660:	d1f7      	bne.n	8007652 <_fwalk_reent+0xe>
 8007662:	4638      	mov	r0, r7
 8007664:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007668:	89ab      	ldrh	r3, [r5, #12]
 800766a:	2b01      	cmp	r3, #1
 800766c:	d907      	bls.n	800767e <_fwalk_reent+0x3a>
 800766e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007672:	3301      	adds	r3, #1
 8007674:	d003      	beq.n	800767e <_fwalk_reent+0x3a>
 8007676:	4629      	mov	r1, r5
 8007678:	4630      	mov	r0, r6
 800767a:	47c0      	blx	r8
 800767c:	4307      	orrs	r7, r0
 800767e:	3568      	adds	r5, #104	; 0x68
 8007680:	e7e9      	b.n	8007656 <_fwalk_reent+0x12>

08007682 <__retarget_lock_init_recursive>:
 8007682:	4770      	bx	lr

08007684 <__retarget_lock_acquire_recursive>:
 8007684:	4770      	bx	lr

08007686 <__retarget_lock_release_recursive>:
 8007686:	4770      	bx	lr

08007688 <__swhatbuf_r>:
 8007688:	b570      	push	{r4, r5, r6, lr}
 800768a:	460e      	mov	r6, r1
 800768c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007690:	2900      	cmp	r1, #0
 8007692:	b096      	sub	sp, #88	; 0x58
 8007694:	4614      	mov	r4, r2
 8007696:	461d      	mov	r5, r3
 8007698:	da07      	bge.n	80076aa <__swhatbuf_r+0x22>
 800769a:	2300      	movs	r3, #0
 800769c:	602b      	str	r3, [r5, #0]
 800769e:	89b3      	ldrh	r3, [r6, #12]
 80076a0:	061a      	lsls	r2, r3, #24
 80076a2:	d410      	bmi.n	80076c6 <__swhatbuf_r+0x3e>
 80076a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80076a8:	e00e      	b.n	80076c8 <__swhatbuf_r+0x40>
 80076aa:	466a      	mov	r2, sp
 80076ac:	f000 f970 	bl	8007990 <_fstat_r>
 80076b0:	2800      	cmp	r0, #0
 80076b2:	dbf2      	blt.n	800769a <__swhatbuf_r+0x12>
 80076b4:	9a01      	ldr	r2, [sp, #4]
 80076b6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80076ba:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80076be:	425a      	negs	r2, r3
 80076c0:	415a      	adcs	r2, r3
 80076c2:	602a      	str	r2, [r5, #0]
 80076c4:	e7ee      	b.n	80076a4 <__swhatbuf_r+0x1c>
 80076c6:	2340      	movs	r3, #64	; 0x40
 80076c8:	2000      	movs	r0, #0
 80076ca:	6023      	str	r3, [r4, #0]
 80076cc:	b016      	add	sp, #88	; 0x58
 80076ce:	bd70      	pop	{r4, r5, r6, pc}

080076d0 <__smakebuf_r>:
 80076d0:	898b      	ldrh	r3, [r1, #12]
 80076d2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80076d4:	079d      	lsls	r5, r3, #30
 80076d6:	4606      	mov	r6, r0
 80076d8:	460c      	mov	r4, r1
 80076da:	d507      	bpl.n	80076ec <__smakebuf_r+0x1c>
 80076dc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80076e0:	6023      	str	r3, [r4, #0]
 80076e2:	6123      	str	r3, [r4, #16]
 80076e4:	2301      	movs	r3, #1
 80076e6:	6163      	str	r3, [r4, #20]
 80076e8:	b002      	add	sp, #8
 80076ea:	bd70      	pop	{r4, r5, r6, pc}
 80076ec:	ab01      	add	r3, sp, #4
 80076ee:	466a      	mov	r2, sp
 80076f0:	f7ff ffca 	bl	8007688 <__swhatbuf_r>
 80076f4:	9900      	ldr	r1, [sp, #0]
 80076f6:	4605      	mov	r5, r0
 80076f8:	4630      	mov	r0, r6
 80076fa:	f000 f879 	bl	80077f0 <_malloc_r>
 80076fe:	b948      	cbnz	r0, 8007714 <__smakebuf_r+0x44>
 8007700:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007704:	059a      	lsls	r2, r3, #22
 8007706:	d4ef      	bmi.n	80076e8 <__smakebuf_r+0x18>
 8007708:	f023 0303 	bic.w	r3, r3, #3
 800770c:	f043 0302 	orr.w	r3, r3, #2
 8007710:	81a3      	strh	r3, [r4, #12]
 8007712:	e7e3      	b.n	80076dc <__smakebuf_r+0xc>
 8007714:	4b0d      	ldr	r3, [pc, #52]	; (800774c <__smakebuf_r+0x7c>)
 8007716:	62b3      	str	r3, [r6, #40]	; 0x28
 8007718:	89a3      	ldrh	r3, [r4, #12]
 800771a:	6020      	str	r0, [r4, #0]
 800771c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007720:	81a3      	strh	r3, [r4, #12]
 8007722:	9b00      	ldr	r3, [sp, #0]
 8007724:	6163      	str	r3, [r4, #20]
 8007726:	9b01      	ldr	r3, [sp, #4]
 8007728:	6120      	str	r0, [r4, #16]
 800772a:	b15b      	cbz	r3, 8007744 <__smakebuf_r+0x74>
 800772c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007730:	4630      	mov	r0, r6
 8007732:	f000 f93f 	bl	80079b4 <_isatty_r>
 8007736:	b128      	cbz	r0, 8007744 <__smakebuf_r+0x74>
 8007738:	89a3      	ldrh	r3, [r4, #12]
 800773a:	f023 0303 	bic.w	r3, r3, #3
 800773e:	f043 0301 	orr.w	r3, r3, #1
 8007742:	81a3      	strh	r3, [r4, #12]
 8007744:	89a0      	ldrh	r0, [r4, #12]
 8007746:	4305      	orrs	r5, r0
 8007748:	81a5      	strh	r5, [r4, #12]
 800774a:	e7cd      	b.n	80076e8 <__smakebuf_r+0x18>
 800774c:	080074e1 	.word	0x080074e1

08007750 <_free_r>:
 8007750:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007752:	2900      	cmp	r1, #0
 8007754:	d048      	beq.n	80077e8 <_free_r+0x98>
 8007756:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800775a:	9001      	str	r0, [sp, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	f1a1 0404 	sub.w	r4, r1, #4
 8007762:	bfb8      	it	lt
 8007764:	18e4      	addlt	r4, r4, r3
 8007766:	f000 f947 	bl	80079f8 <__malloc_lock>
 800776a:	4a20      	ldr	r2, [pc, #128]	; (80077ec <_free_r+0x9c>)
 800776c:	9801      	ldr	r0, [sp, #4]
 800776e:	6813      	ldr	r3, [r2, #0]
 8007770:	4615      	mov	r5, r2
 8007772:	b933      	cbnz	r3, 8007782 <_free_r+0x32>
 8007774:	6063      	str	r3, [r4, #4]
 8007776:	6014      	str	r4, [r2, #0]
 8007778:	b003      	add	sp, #12
 800777a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800777e:	f000 b941 	b.w	8007a04 <__malloc_unlock>
 8007782:	42a3      	cmp	r3, r4
 8007784:	d90b      	bls.n	800779e <_free_r+0x4e>
 8007786:	6821      	ldr	r1, [r4, #0]
 8007788:	1862      	adds	r2, r4, r1
 800778a:	4293      	cmp	r3, r2
 800778c:	bf04      	itt	eq
 800778e:	681a      	ldreq	r2, [r3, #0]
 8007790:	685b      	ldreq	r3, [r3, #4]
 8007792:	6063      	str	r3, [r4, #4]
 8007794:	bf04      	itt	eq
 8007796:	1852      	addeq	r2, r2, r1
 8007798:	6022      	streq	r2, [r4, #0]
 800779a:	602c      	str	r4, [r5, #0]
 800779c:	e7ec      	b.n	8007778 <_free_r+0x28>
 800779e:	461a      	mov	r2, r3
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	b10b      	cbz	r3, 80077a8 <_free_r+0x58>
 80077a4:	42a3      	cmp	r3, r4
 80077a6:	d9fa      	bls.n	800779e <_free_r+0x4e>
 80077a8:	6811      	ldr	r1, [r2, #0]
 80077aa:	1855      	adds	r5, r2, r1
 80077ac:	42a5      	cmp	r5, r4
 80077ae:	d10b      	bne.n	80077c8 <_free_r+0x78>
 80077b0:	6824      	ldr	r4, [r4, #0]
 80077b2:	4421      	add	r1, r4
 80077b4:	1854      	adds	r4, r2, r1
 80077b6:	42a3      	cmp	r3, r4
 80077b8:	6011      	str	r1, [r2, #0]
 80077ba:	d1dd      	bne.n	8007778 <_free_r+0x28>
 80077bc:	681c      	ldr	r4, [r3, #0]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	6053      	str	r3, [r2, #4]
 80077c2:	4421      	add	r1, r4
 80077c4:	6011      	str	r1, [r2, #0]
 80077c6:	e7d7      	b.n	8007778 <_free_r+0x28>
 80077c8:	d902      	bls.n	80077d0 <_free_r+0x80>
 80077ca:	230c      	movs	r3, #12
 80077cc:	6003      	str	r3, [r0, #0]
 80077ce:	e7d3      	b.n	8007778 <_free_r+0x28>
 80077d0:	6825      	ldr	r5, [r4, #0]
 80077d2:	1961      	adds	r1, r4, r5
 80077d4:	428b      	cmp	r3, r1
 80077d6:	bf04      	itt	eq
 80077d8:	6819      	ldreq	r1, [r3, #0]
 80077da:	685b      	ldreq	r3, [r3, #4]
 80077dc:	6063      	str	r3, [r4, #4]
 80077de:	bf04      	itt	eq
 80077e0:	1949      	addeq	r1, r1, r5
 80077e2:	6021      	streq	r1, [r4, #0]
 80077e4:	6054      	str	r4, [r2, #4]
 80077e6:	e7c7      	b.n	8007778 <_free_r+0x28>
 80077e8:	b003      	add	sp, #12
 80077ea:	bd30      	pop	{r4, r5, pc}
 80077ec:	200002c4 	.word	0x200002c4

080077f0 <_malloc_r>:
 80077f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f2:	1ccd      	adds	r5, r1, #3
 80077f4:	f025 0503 	bic.w	r5, r5, #3
 80077f8:	3508      	adds	r5, #8
 80077fa:	2d0c      	cmp	r5, #12
 80077fc:	bf38      	it	cc
 80077fe:	250c      	movcc	r5, #12
 8007800:	2d00      	cmp	r5, #0
 8007802:	4606      	mov	r6, r0
 8007804:	db01      	blt.n	800780a <_malloc_r+0x1a>
 8007806:	42a9      	cmp	r1, r5
 8007808:	d903      	bls.n	8007812 <_malloc_r+0x22>
 800780a:	230c      	movs	r3, #12
 800780c:	6033      	str	r3, [r6, #0]
 800780e:	2000      	movs	r0, #0
 8007810:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007812:	f000 f8f1 	bl	80079f8 <__malloc_lock>
 8007816:	4921      	ldr	r1, [pc, #132]	; (800789c <_malloc_r+0xac>)
 8007818:	680a      	ldr	r2, [r1, #0]
 800781a:	4614      	mov	r4, r2
 800781c:	b99c      	cbnz	r4, 8007846 <_malloc_r+0x56>
 800781e:	4f20      	ldr	r7, [pc, #128]	; (80078a0 <_malloc_r+0xb0>)
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	b923      	cbnz	r3, 800782e <_malloc_r+0x3e>
 8007824:	4621      	mov	r1, r4
 8007826:	4630      	mov	r0, r6
 8007828:	f000 f83c 	bl	80078a4 <_sbrk_r>
 800782c:	6038      	str	r0, [r7, #0]
 800782e:	4629      	mov	r1, r5
 8007830:	4630      	mov	r0, r6
 8007832:	f000 f837 	bl	80078a4 <_sbrk_r>
 8007836:	1c43      	adds	r3, r0, #1
 8007838:	d123      	bne.n	8007882 <_malloc_r+0x92>
 800783a:	230c      	movs	r3, #12
 800783c:	6033      	str	r3, [r6, #0]
 800783e:	4630      	mov	r0, r6
 8007840:	f000 f8e0 	bl	8007a04 <__malloc_unlock>
 8007844:	e7e3      	b.n	800780e <_malloc_r+0x1e>
 8007846:	6823      	ldr	r3, [r4, #0]
 8007848:	1b5b      	subs	r3, r3, r5
 800784a:	d417      	bmi.n	800787c <_malloc_r+0x8c>
 800784c:	2b0b      	cmp	r3, #11
 800784e:	d903      	bls.n	8007858 <_malloc_r+0x68>
 8007850:	6023      	str	r3, [r4, #0]
 8007852:	441c      	add	r4, r3
 8007854:	6025      	str	r5, [r4, #0]
 8007856:	e004      	b.n	8007862 <_malloc_r+0x72>
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	42a2      	cmp	r2, r4
 800785c:	bf0c      	ite	eq
 800785e:	600b      	streq	r3, [r1, #0]
 8007860:	6053      	strne	r3, [r2, #4]
 8007862:	4630      	mov	r0, r6
 8007864:	f000 f8ce 	bl	8007a04 <__malloc_unlock>
 8007868:	f104 000b 	add.w	r0, r4, #11
 800786c:	1d23      	adds	r3, r4, #4
 800786e:	f020 0007 	bic.w	r0, r0, #7
 8007872:	1ac2      	subs	r2, r0, r3
 8007874:	d0cc      	beq.n	8007810 <_malloc_r+0x20>
 8007876:	1a1b      	subs	r3, r3, r0
 8007878:	50a3      	str	r3, [r4, r2]
 800787a:	e7c9      	b.n	8007810 <_malloc_r+0x20>
 800787c:	4622      	mov	r2, r4
 800787e:	6864      	ldr	r4, [r4, #4]
 8007880:	e7cc      	b.n	800781c <_malloc_r+0x2c>
 8007882:	1cc4      	adds	r4, r0, #3
 8007884:	f024 0403 	bic.w	r4, r4, #3
 8007888:	42a0      	cmp	r0, r4
 800788a:	d0e3      	beq.n	8007854 <_malloc_r+0x64>
 800788c:	1a21      	subs	r1, r4, r0
 800788e:	4630      	mov	r0, r6
 8007890:	f000 f808 	bl	80078a4 <_sbrk_r>
 8007894:	3001      	adds	r0, #1
 8007896:	d1dd      	bne.n	8007854 <_malloc_r+0x64>
 8007898:	e7cf      	b.n	800783a <_malloc_r+0x4a>
 800789a:	bf00      	nop
 800789c:	200002c4 	.word	0x200002c4
 80078a0:	200002c8 	.word	0x200002c8

080078a4 <_sbrk_r>:
 80078a4:	b538      	push	{r3, r4, r5, lr}
 80078a6:	4d06      	ldr	r5, [pc, #24]	; (80078c0 <_sbrk_r+0x1c>)
 80078a8:	2300      	movs	r3, #0
 80078aa:	4604      	mov	r4, r0
 80078ac:	4608      	mov	r0, r1
 80078ae:	602b      	str	r3, [r5, #0]
 80078b0:	f7fb f9d2 	bl	8002c58 <_sbrk>
 80078b4:	1c43      	adds	r3, r0, #1
 80078b6:	d102      	bne.n	80078be <_sbrk_r+0x1a>
 80078b8:	682b      	ldr	r3, [r5, #0]
 80078ba:	b103      	cbz	r3, 80078be <_sbrk_r+0x1a>
 80078bc:	6023      	str	r3, [r4, #0]
 80078be:	bd38      	pop	{r3, r4, r5, pc}
 80078c0:	20000cd4 	.word	0x20000cd4

080078c4 <__sread>:
 80078c4:	b510      	push	{r4, lr}
 80078c6:	460c      	mov	r4, r1
 80078c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078cc:	f000 f8a0 	bl	8007a10 <_read_r>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	bfab      	itete	ge
 80078d4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80078d6:	89a3      	ldrhlt	r3, [r4, #12]
 80078d8:	181b      	addge	r3, r3, r0
 80078da:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80078de:	bfac      	ite	ge
 80078e0:	6563      	strge	r3, [r4, #84]	; 0x54
 80078e2:	81a3      	strhlt	r3, [r4, #12]
 80078e4:	bd10      	pop	{r4, pc}

080078e6 <__swrite>:
 80078e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078ea:	461f      	mov	r7, r3
 80078ec:	898b      	ldrh	r3, [r1, #12]
 80078ee:	05db      	lsls	r3, r3, #23
 80078f0:	4605      	mov	r5, r0
 80078f2:	460c      	mov	r4, r1
 80078f4:	4616      	mov	r6, r2
 80078f6:	d505      	bpl.n	8007904 <__swrite+0x1e>
 80078f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80078fc:	2302      	movs	r3, #2
 80078fe:	2200      	movs	r2, #0
 8007900:	f000 f868 	bl	80079d4 <_lseek_r>
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800790a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800790e:	81a3      	strh	r3, [r4, #12]
 8007910:	4632      	mov	r2, r6
 8007912:	463b      	mov	r3, r7
 8007914:	4628      	mov	r0, r5
 8007916:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800791a:	f000 b817 	b.w	800794c <_write_r>

0800791e <__sseek>:
 800791e:	b510      	push	{r4, lr}
 8007920:	460c      	mov	r4, r1
 8007922:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007926:	f000 f855 	bl	80079d4 <_lseek_r>
 800792a:	1c43      	adds	r3, r0, #1
 800792c:	89a3      	ldrh	r3, [r4, #12]
 800792e:	bf15      	itete	ne
 8007930:	6560      	strne	r0, [r4, #84]	; 0x54
 8007932:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007936:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800793a:	81a3      	strheq	r3, [r4, #12]
 800793c:	bf18      	it	ne
 800793e:	81a3      	strhne	r3, [r4, #12]
 8007940:	bd10      	pop	{r4, pc}

08007942 <__sclose>:
 8007942:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007946:	f000 b813 	b.w	8007970 <_close_r>
	...

0800794c <_write_r>:
 800794c:	b538      	push	{r3, r4, r5, lr}
 800794e:	4d07      	ldr	r5, [pc, #28]	; (800796c <_write_r+0x20>)
 8007950:	4604      	mov	r4, r0
 8007952:	4608      	mov	r0, r1
 8007954:	4611      	mov	r1, r2
 8007956:	2200      	movs	r2, #0
 8007958:	602a      	str	r2, [r5, #0]
 800795a:	461a      	mov	r2, r3
 800795c:	f7f8 ff78 	bl	8000850 <_write>
 8007960:	1c43      	adds	r3, r0, #1
 8007962:	d102      	bne.n	800796a <_write_r+0x1e>
 8007964:	682b      	ldr	r3, [r5, #0]
 8007966:	b103      	cbz	r3, 800796a <_write_r+0x1e>
 8007968:	6023      	str	r3, [r4, #0]
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	20000cd4 	.word	0x20000cd4

08007970 <_close_r>:
 8007970:	b538      	push	{r3, r4, r5, lr}
 8007972:	4d06      	ldr	r5, [pc, #24]	; (800798c <_close_r+0x1c>)
 8007974:	2300      	movs	r3, #0
 8007976:	4604      	mov	r4, r0
 8007978:	4608      	mov	r0, r1
 800797a:	602b      	str	r3, [r5, #0]
 800797c:	f7fb f937 	bl	8002bee <_close>
 8007980:	1c43      	adds	r3, r0, #1
 8007982:	d102      	bne.n	800798a <_close_r+0x1a>
 8007984:	682b      	ldr	r3, [r5, #0]
 8007986:	b103      	cbz	r3, 800798a <_close_r+0x1a>
 8007988:	6023      	str	r3, [r4, #0]
 800798a:	bd38      	pop	{r3, r4, r5, pc}
 800798c:	20000cd4 	.word	0x20000cd4

08007990 <_fstat_r>:
 8007990:	b538      	push	{r3, r4, r5, lr}
 8007992:	4d07      	ldr	r5, [pc, #28]	; (80079b0 <_fstat_r+0x20>)
 8007994:	2300      	movs	r3, #0
 8007996:	4604      	mov	r4, r0
 8007998:	4608      	mov	r0, r1
 800799a:	4611      	mov	r1, r2
 800799c:	602b      	str	r3, [r5, #0]
 800799e:	f7fb f932 	bl	8002c06 <_fstat>
 80079a2:	1c43      	adds	r3, r0, #1
 80079a4:	d102      	bne.n	80079ac <_fstat_r+0x1c>
 80079a6:	682b      	ldr	r3, [r5, #0]
 80079a8:	b103      	cbz	r3, 80079ac <_fstat_r+0x1c>
 80079aa:	6023      	str	r3, [r4, #0]
 80079ac:	bd38      	pop	{r3, r4, r5, pc}
 80079ae:	bf00      	nop
 80079b0:	20000cd4 	.word	0x20000cd4

080079b4 <_isatty_r>:
 80079b4:	b538      	push	{r3, r4, r5, lr}
 80079b6:	4d06      	ldr	r5, [pc, #24]	; (80079d0 <_isatty_r+0x1c>)
 80079b8:	2300      	movs	r3, #0
 80079ba:	4604      	mov	r4, r0
 80079bc:	4608      	mov	r0, r1
 80079be:	602b      	str	r3, [r5, #0]
 80079c0:	f7fb f931 	bl	8002c26 <_isatty>
 80079c4:	1c43      	adds	r3, r0, #1
 80079c6:	d102      	bne.n	80079ce <_isatty_r+0x1a>
 80079c8:	682b      	ldr	r3, [r5, #0]
 80079ca:	b103      	cbz	r3, 80079ce <_isatty_r+0x1a>
 80079cc:	6023      	str	r3, [r4, #0]
 80079ce:	bd38      	pop	{r3, r4, r5, pc}
 80079d0:	20000cd4 	.word	0x20000cd4

080079d4 <_lseek_r>:
 80079d4:	b538      	push	{r3, r4, r5, lr}
 80079d6:	4d07      	ldr	r5, [pc, #28]	; (80079f4 <_lseek_r+0x20>)
 80079d8:	4604      	mov	r4, r0
 80079da:	4608      	mov	r0, r1
 80079dc:	4611      	mov	r1, r2
 80079de:	2200      	movs	r2, #0
 80079e0:	602a      	str	r2, [r5, #0]
 80079e2:	461a      	mov	r2, r3
 80079e4:	f7fb f92a 	bl	8002c3c <_lseek>
 80079e8:	1c43      	adds	r3, r0, #1
 80079ea:	d102      	bne.n	80079f2 <_lseek_r+0x1e>
 80079ec:	682b      	ldr	r3, [r5, #0]
 80079ee:	b103      	cbz	r3, 80079f2 <_lseek_r+0x1e>
 80079f0:	6023      	str	r3, [r4, #0]
 80079f2:	bd38      	pop	{r3, r4, r5, pc}
 80079f4:	20000cd4 	.word	0x20000cd4

080079f8 <__malloc_lock>:
 80079f8:	4801      	ldr	r0, [pc, #4]	; (8007a00 <__malloc_lock+0x8>)
 80079fa:	f7ff be43 	b.w	8007684 <__retarget_lock_acquire_recursive>
 80079fe:	bf00      	nop
 8007a00:	20000ccc 	.word	0x20000ccc

08007a04 <__malloc_unlock>:
 8007a04:	4801      	ldr	r0, [pc, #4]	; (8007a0c <__malloc_unlock+0x8>)
 8007a06:	f7ff be3e 	b.w	8007686 <__retarget_lock_release_recursive>
 8007a0a:	bf00      	nop
 8007a0c:	20000ccc 	.word	0x20000ccc

08007a10 <_read_r>:
 8007a10:	b538      	push	{r3, r4, r5, lr}
 8007a12:	4d07      	ldr	r5, [pc, #28]	; (8007a30 <_read_r+0x20>)
 8007a14:	4604      	mov	r4, r0
 8007a16:	4608      	mov	r0, r1
 8007a18:	4611      	mov	r1, r2
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	602a      	str	r2, [r5, #0]
 8007a1e:	461a      	mov	r2, r3
 8007a20:	f7fb f8c8 	bl	8002bb4 <_read>
 8007a24:	1c43      	adds	r3, r0, #1
 8007a26:	d102      	bne.n	8007a2e <_read_r+0x1e>
 8007a28:	682b      	ldr	r3, [r5, #0]
 8007a2a:	b103      	cbz	r3, 8007a2e <_read_r+0x1e>
 8007a2c:	6023      	str	r3, [r4, #0]
 8007a2e:	bd38      	pop	{r3, r4, r5, pc}
 8007a30:	20000cd4 	.word	0x20000cd4

08007a34 <_init>:
 8007a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a36:	bf00      	nop
 8007a38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a3a:	bc08      	pop	{r3}
 8007a3c:	469e      	mov	lr, r3
 8007a3e:	4770      	bx	lr

08007a40 <_fini>:
 8007a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a42:	bf00      	nop
 8007a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007a46:	bc08      	pop	{r3}
 8007a48:	469e      	mov	lr, r3
 8007a4a:	4770      	bx	lr
