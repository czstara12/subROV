
subROV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007980  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08007b08  08007b08  00017b08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008610  08008610  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08008610  08008610  00018610  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008618  08008618  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008618  08008618  00018618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800861c  0800861c  0001861c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08008620  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000af4  20000244  08008864  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000d38  08008864  00020d38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015910  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000305c  00000000  00000000  00035b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d8  00000000  00000000  00038be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010a0  00000000  00000000  00039db8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002296f  00000000  00000000  0003ae58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146cb  00000000  00000000  0005d7c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0110  00000000  00000000  00071e92  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00141fa2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005038  00000000  00000000  00141ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000244 	.word	0x20000244
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08007af0 	.word	0x08007af0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000248 	.word	0x20000248
 80001c4:	08007af0 	.word	0x08007af0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <PID_init>:
};
//Roll,Pitch,Yaw,z x y
float target_ver[6];
int pidinit = 0;
void PID_init()
{
 80004c0:	b480      	push	{r7}
 80004c2:	af00      	add	r7, sp, #0
    target_ver[0] = 0;
 80004c4:	4b09      	ldr	r3, [pc, #36]	; (80004ec <PID_init+0x2c>)
 80004c6:	f04f 0200 	mov.w	r2, #0
 80004ca:	601a      	str	r2, [r3, #0]
    target_ver[1] = 0;
 80004cc:	4b07      	ldr	r3, [pc, #28]	; (80004ec <PID_init+0x2c>)
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	605a      	str	r2, [r3, #4]
    target_ver[2] = yaw;
 80004d4:	4b06      	ldr	r3, [pc, #24]	; (80004f0 <PID_init+0x30>)
 80004d6:	681b      	ldr	r3, [r3, #0]
 80004d8:	4a04      	ldr	r2, [pc, #16]	; (80004ec <PID_init+0x2c>)
 80004da:	6093      	str	r3, [r2, #8]
    pidinit = 1;
 80004dc:	4b05      	ldr	r3, [pc, #20]	; (80004f4 <PID_init+0x34>)
 80004de:	2201      	movs	r2, #1
 80004e0:	601a      	str	r2, [r3, #0]
}
 80004e2:	bf00      	nop
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr
 80004ec:	200002cc 	.word	0x200002cc
 80004f0:	20000344 	.word	0x20000344
 80004f4:	20000260 	.word	0x20000260

080004f8 <PID_CTRL>:

void PID_CTRL() //综合控制 encodeL左侧编码器 encodeR右侧编码器
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	; 0x24
 80004fc:	af00      	add	r7, sp, #0
    //out += Kpr * (err - err1) + Tir * err+Tdr*(err-2*err1+err2); //
    //增量式PID方程 输出=输出+P*(本次误差-上次误差)+I*本次误差
    float err[6];

    if (target_ver[2] > 180)
 80004fe:	4b96      	ldr	r3, [pc, #600]	; (8000758 <PID_CTRL+0x260>)
 8000500:	edd3 7a02 	vldr	s15, [r3, #8]
 8000504:	ed9f 7a95 	vldr	s14, [pc, #596]	; 800075c <PID_CTRL+0x264>
 8000508:	eef4 7ac7 	vcmpe.f32	s15, s14
 800050c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000510:	dd09      	ble.n	8000526 <PID_CTRL+0x2e>
        target_ver[2] -= 360;
 8000512:	4b91      	ldr	r3, [pc, #580]	; (8000758 <PID_CTRL+0x260>)
 8000514:	edd3 7a02 	vldr	s15, [r3, #8]
 8000518:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8000760 <PID_CTRL+0x268>
 800051c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000520:	4b8d      	ldr	r3, [pc, #564]	; (8000758 <PID_CTRL+0x260>)
 8000522:	edc3 7a02 	vstr	s15, [r3, #8]
    if (target_ver[2] < -180)
 8000526:	4b8c      	ldr	r3, [pc, #560]	; (8000758 <PID_CTRL+0x260>)
 8000528:	edd3 7a02 	vldr	s15, [r3, #8]
 800052c:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 8000764 <PID_CTRL+0x26c>
 8000530:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000538:	d509      	bpl.n	800054e <PID_CTRL+0x56>
        target_ver[2] += 360;
 800053a:	4b87      	ldr	r3, [pc, #540]	; (8000758 <PID_CTRL+0x260>)
 800053c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000540:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000760 <PID_CTRL+0x268>
 8000544:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000548:	4b83      	ldr	r3, [pc, #524]	; (8000758 <PID_CTRL+0x260>)
 800054a:	edc3 7a02 	vstr	s15, [r3, #8]

    err[0] = target_ver[0] - roll;  //求误差
 800054e:	4b82      	ldr	r3, [pc, #520]	; (8000758 <PID_CTRL+0x260>)
 8000550:	ed93 7a00 	vldr	s14, [r3]
 8000554:	4b84      	ldr	r3, [pc, #528]	; (8000768 <PID_CTRL+0x270>)
 8000556:	edd3 7a00 	vldr	s15, [r3]
 800055a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800055e:	edc7 7a01 	vstr	s15, [r7, #4]
    err[1] = target_ver[1] - pitch; //求误差
 8000562:	4b7d      	ldr	r3, [pc, #500]	; (8000758 <PID_CTRL+0x260>)
 8000564:	ed93 7a01 	vldr	s14, [r3, #4]
 8000568:	4b80      	ldr	r3, [pc, #512]	; (800076c <PID_CTRL+0x274>)
 800056a:	edd3 7a00 	vldr	s15, [r3]
 800056e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000572:	edc7 7a02 	vstr	s15, [r7, #8]
    err[2] = target_ver[2] - yaw;   //求误差
 8000576:	4b78      	ldr	r3, [pc, #480]	; (8000758 <PID_CTRL+0x260>)
 8000578:	ed93 7a02 	vldr	s14, [r3, #8]
 800057c:	4b7c      	ldr	r3, [pc, #496]	; (8000770 <PID_CTRL+0x278>)
 800057e:	edd3 7a00 	vldr	s15, [r3]
 8000582:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000586:	edc7 7a03 	vstr	s15, [r7, #12]

    if (err[2] > 180)
 800058a:	edd7 7a03 	vldr	s15, [r7, #12]
 800058e:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800075c <PID_CTRL+0x264>
 8000592:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800059a:	dd07      	ble.n	80005ac <PID_CTRL+0xb4>
        err[2] -= 360;
 800059c:	edd7 7a03 	vldr	s15, [r7, #12]
 80005a0:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000760 <PID_CTRL+0x268>
 80005a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005a8:	edc7 7a03 	vstr	s15, [r7, #12]
    if (err[2] < -180)
 80005ac:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b0:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000764 <PID_CTRL+0x26c>
 80005b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005bc:	d507      	bpl.n	80005ce <PID_CTRL+0xd6>
        err[2] += 360;
 80005be:	edd7 7a03 	vldr	s15, [r7, #12]
 80005c2:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000760 <PID_CTRL+0x268>
 80005c6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005ca:	edc7 7a03 	vstr	s15, [r7, #12]

    err[3] = target_ver[3]; //求误差
 80005ce:	4b62      	ldr	r3, [pc, #392]	; (8000758 <PID_CTRL+0x260>)
 80005d0:	68db      	ldr	r3, [r3, #12]
 80005d2:	613b      	str	r3, [r7, #16]
    err[4] = target_ver[4]; //求误差
 80005d4:	4b60      	ldr	r3, [pc, #384]	; (8000758 <PID_CTRL+0x260>)
 80005d6:	691b      	ldr	r3, [r3, #16]
 80005d8:	617b      	str	r3, [r7, #20]
    err[5] = target_ver[5]; //求误差
 80005da:	4b5f      	ldr	r3, [pc, #380]	; (8000758 <PID_CTRL+0x260>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 80005e0:	2300      	movs	r3, #0
 80005e2:	61fb      	str	r3, [r7, #28]
 80005e4:	e0ad      	b.n	8000742 <PID_CTRL+0x24a>
    {
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4]) + pid_ver[i][1] * err[i] + pid_ver[i][2] * (err[i] - 2 * pid_ver[i][4] + pid_ver[i][5]);
 80005e6:	4963      	ldr	r1, [pc, #396]	; (8000774 <PID_CTRL+0x27c>)
 80005e8:	69fa      	ldr	r2, [r7, #28]
 80005ea:	4613      	mov	r3, r2
 80005ec:	00db      	lsls	r3, r3, #3
 80005ee:	1a9b      	subs	r3, r3, r2
 80005f0:	009b      	lsls	r3, r3, #2
 80005f2:	440b      	add	r3, r1
 80005f4:	330c      	adds	r3, #12
 80005f6:	ed93 7a00 	vldr	s14, [r3]
 80005fa:	495e      	ldr	r1, [pc, #376]	; (8000774 <PID_CTRL+0x27c>)
 80005fc:	69fa      	ldr	r2, [r7, #28]
 80005fe:	4613      	mov	r3, r2
 8000600:	00db      	lsls	r3, r3, #3
 8000602:	1a9b      	subs	r3, r3, r2
 8000604:	009b      	lsls	r3, r3, #2
 8000606:	440b      	add	r3, r1
 8000608:	edd3 6a00 	vldr	s13, [r3]
 800060c:	69fb      	ldr	r3, [r7, #28]
 800060e:	009b      	lsls	r3, r3, #2
 8000610:	f107 0220 	add.w	r2, r7, #32
 8000614:	4413      	add	r3, r2
 8000616:	3b1c      	subs	r3, #28
 8000618:	ed93 6a00 	vldr	s12, [r3]
 800061c:	4955      	ldr	r1, [pc, #340]	; (8000774 <PID_CTRL+0x27c>)
 800061e:	69fa      	ldr	r2, [r7, #28]
 8000620:	4613      	mov	r3, r2
 8000622:	00db      	lsls	r3, r3, #3
 8000624:	1a9b      	subs	r3, r3, r2
 8000626:	009b      	lsls	r3, r3, #2
 8000628:	440b      	add	r3, r1
 800062a:	3310      	adds	r3, #16
 800062c:	edd3 7a00 	vldr	s15, [r3]
 8000630:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000634:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000638:	494e      	ldr	r1, [pc, #312]	; (8000774 <PID_CTRL+0x27c>)
 800063a:	69fa      	ldr	r2, [r7, #28]
 800063c:	4613      	mov	r3, r2
 800063e:	00db      	lsls	r3, r3, #3
 8000640:	1a9b      	subs	r3, r3, r2
 8000642:	009b      	lsls	r3, r3, #2
 8000644:	440b      	add	r3, r1
 8000646:	3304      	adds	r3, #4
 8000648:	ed93 6a00 	vldr	s12, [r3]
 800064c:	69fb      	ldr	r3, [r7, #28]
 800064e:	009b      	lsls	r3, r3, #2
 8000650:	f107 0220 	add.w	r2, r7, #32
 8000654:	4413      	add	r3, r2
 8000656:	3b1c      	subs	r3, #28
 8000658:	edd3 7a00 	vldr	s15, [r3]
 800065c:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000660:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000664:	4943      	ldr	r1, [pc, #268]	; (8000774 <PID_CTRL+0x27c>)
 8000666:	69fa      	ldr	r2, [r7, #28]
 8000668:	4613      	mov	r3, r2
 800066a:	00db      	lsls	r3, r3, #3
 800066c:	1a9b      	subs	r3, r3, r2
 800066e:	009b      	lsls	r3, r3, #2
 8000670:	440b      	add	r3, r1
 8000672:	3308      	adds	r3, #8
 8000674:	ed93 6a00 	vldr	s12, [r3]
 8000678:	69fb      	ldr	r3, [r7, #28]
 800067a:	009b      	lsls	r3, r3, #2
 800067c:	f107 0220 	add.w	r2, r7, #32
 8000680:	4413      	add	r3, r2
 8000682:	3b1c      	subs	r3, #28
 8000684:	edd3 5a00 	vldr	s11, [r3]
 8000688:	493a      	ldr	r1, [pc, #232]	; (8000774 <PID_CTRL+0x27c>)
 800068a:	69fa      	ldr	r2, [r7, #28]
 800068c:	4613      	mov	r3, r2
 800068e:	00db      	lsls	r3, r3, #3
 8000690:	1a9b      	subs	r3, r3, r2
 8000692:	009b      	lsls	r3, r3, #2
 8000694:	440b      	add	r3, r1
 8000696:	3310      	adds	r3, #16
 8000698:	edd3 7a00 	vldr	s15, [r3]
 800069c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006a0:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80006a4:	4933      	ldr	r1, [pc, #204]	; (8000774 <PID_CTRL+0x27c>)
 80006a6:	69fa      	ldr	r2, [r7, #28]
 80006a8:	4613      	mov	r3, r2
 80006aa:	00db      	lsls	r3, r3, #3
 80006ac:	1a9b      	subs	r3, r3, r2
 80006ae:	009b      	lsls	r3, r3, #2
 80006b0:	440b      	add	r3, r1
 80006b2:	3314      	adds	r3, #20
 80006b4:	edd3 7a00 	vldr	s15, [r3]
 80006b8:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80006bc:	ee66 7a27 	vmul.f32	s15, s12, s15
 80006c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80006c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006c8:	492a      	ldr	r1, [pc, #168]	; (8000774 <PID_CTRL+0x27c>)
 80006ca:	69fa      	ldr	r2, [r7, #28]
 80006cc:	4613      	mov	r3, r2
 80006ce:	00db      	lsls	r3, r3, #3
 80006d0:	1a9b      	subs	r3, r3, r2
 80006d2:	009b      	lsls	r3, r3, #2
 80006d4:	440b      	add	r3, r1
 80006d6:	330c      	adds	r3, #12
 80006d8:	edc3 7a00 	vstr	s15, [r3]
        dof6[i] = pid_ver[i][3];       //输出到6自由度
 80006dc:	4925      	ldr	r1, [pc, #148]	; (8000774 <PID_CTRL+0x27c>)
 80006de:	69fa      	ldr	r2, [r7, #28]
 80006e0:	4613      	mov	r3, r2
 80006e2:	00db      	lsls	r3, r3, #3
 80006e4:	1a9b      	subs	r3, r3, r2
 80006e6:	009b      	lsls	r3, r3, #2
 80006e8:	440b      	add	r3, r1
 80006ea:	330c      	adds	r3, #12
 80006ec:	681a      	ldr	r2, [r3, #0]
 80006ee:	4922      	ldr	r1, [pc, #136]	; (8000778 <PID_CTRL+0x280>)
 80006f0:	69fb      	ldr	r3, [r7, #28]
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	440b      	add	r3, r1
 80006f6:	601a      	str	r2, [r3, #0]
        pid_ver[i][5] = pid_ver[i][4]; //更新上上次误差
 80006f8:	491e      	ldr	r1, [pc, #120]	; (8000774 <PID_CTRL+0x27c>)
 80006fa:	69fa      	ldr	r2, [r7, #28]
 80006fc:	4613      	mov	r3, r2
 80006fe:	00db      	lsls	r3, r3, #3
 8000700:	1a9b      	subs	r3, r3, r2
 8000702:	009b      	lsls	r3, r3, #2
 8000704:	440b      	add	r3, r1
 8000706:	3310      	adds	r3, #16
 8000708:	6819      	ldr	r1, [r3, #0]
 800070a:	481a      	ldr	r0, [pc, #104]	; (8000774 <PID_CTRL+0x27c>)
 800070c:	69fa      	ldr	r2, [r7, #28]
 800070e:	4613      	mov	r3, r2
 8000710:	00db      	lsls	r3, r3, #3
 8000712:	1a9b      	subs	r3, r3, r2
 8000714:	009b      	lsls	r3, r3, #2
 8000716:	4403      	add	r3, r0
 8000718:	3314      	adds	r3, #20
 800071a:	6019      	str	r1, [r3, #0]
        pid_ver[i][4] = err[i];        //更新上次误差
 800071c:	69fb      	ldr	r3, [r7, #28]
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	f107 0220 	add.w	r2, r7, #32
 8000724:	4413      	add	r3, r2
 8000726:	3b1c      	subs	r3, #28
 8000728:	6819      	ldr	r1, [r3, #0]
 800072a:	4812      	ldr	r0, [pc, #72]	; (8000774 <PID_CTRL+0x27c>)
 800072c:	69fa      	ldr	r2, [r7, #28]
 800072e:	4613      	mov	r3, r2
 8000730:	00db      	lsls	r3, r3, #3
 8000732:	1a9b      	subs	r3, r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4403      	add	r3, r0
 8000738:	3310      	adds	r3, #16
 800073a:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < 6; i++)
 800073c:	69fb      	ldr	r3, [r7, #28]
 800073e:	3301      	adds	r3, #1
 8000740:	61fb      	str	r3, [r7, #28]
 8000742:	69fb      	ldr	r3, [r7, #28]
 8000744:	2b05      	cmp	r3, #5
 8000746:	f77f af4e 	ble.w	80005e6 <PID_CTRL+0xee>
    }
}
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	3724      	adds	r7, #36	; 0x24
 8000750:	46bd      	mov	sp, r7
 8000752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000756:	4770      	bx	lr
 8000758:	200002cc 	.word	0x200002cc
 800075c:	43340000 	.word	0x43340000
 8000760:	43b40000 	.word	0x43b40000
 8000764:	c3340000 	.word	0xc3340000
 8000768:	2000034c 	.word	0x2000034c
 800076c:	20000348 	.word	0x20000348
 8000770:	20000344 	.word	0x20000344
 8000774:	20000000 	.word	0x20000000
 8000778:	20000264 	.word	0x20000264

0800077c <VRUinit>:
float pitch, roll, yaw,*dat;
int tim;
UART_HandleTypeDef *VRUhuart;

void VRUinit(UART_HandleTypeDef *huart)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	b082      	sub	sp, #8
 8000780:	af00      	add	r7, sp, #0
 8000782:	6078      	str	r0, [r7, #4]
	VRUhuart = huart;
 8000784:	4a09      	ldr	r2, [pc, #36]	; (80007ac <VRUinit+0x30>)
 8000786:	687b      	ldr	r3, [r7, #4]
 8000788:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	681b      	ldr	r3, [r3, #0]
 800078e:	68da      	ldr	r2, [r3, #12]
 8000790:	687b      	ldr	r3, [r7, #4]
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	f042 0210 	orr.w	r2, r2, #16
 8000798:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, ch110, 82);
 800079a:	2252      	movs	r2, #82	; 0x52
 800079c:	4904      	ldr	r1, [pc, #16]	; (80007b0 <VRUinit+0x34>)
 800079e:	6878      	ldr	r0, [r7, #4]
 80007a0:	f005 fdda 	bl	8006358 <HAL_UART_Receive_DMA>
}
 80007a4:	bf00      	nop
 80007a6:	3708      	adds	r7, #8
 80007a8:	46bd      	mov	sp, r7
 80007aa:	bd80      	pop	{r7, pc}
 80007ac:	200002ec 	.word	0x200002ec
 80007b0:	200002f0 	.word	0x200002f0

080007b4 <VRUupdate>:
//从串口中断触发 每次执行 提取姿态数据
void VRUupdate()
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
	float * datflo;
	datflo=(float *) (ch110 + 18);
 80007ba:	4b15      	ldr	r3, [pc, #84]	; (8000810 <VRUupdate+0x5c>)
 80007bc:	603b      	str	r3, [r7, #0]
	/*
	roll = *(float *) (ch110 + 54);
	pitch = *(float *) (ch110 + 58);
	yaw = *(float *) (ch110 + 62);
	*/
	roll = datflo[9];
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007c2:	4a14      	ldr	r2, [pc, #80]	; (8000814 <VRUupdate+0x60>)
 80007c4:	6013      	str	r3, [r2, #0]
	pitch = datflo[10];
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007ca:	4a13      	ldr	r2, [pc, #76]	; (8000818 <VRUupdate+0x64>)
 80007cc:	6013      	str	r3, [r2, #0]
	yaw = datflo[11];
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007d2:	4a12      	ldr	r2, [pc, #72]	; (800081c <VRUupdate+0x68>)
 80007d4:	6013      	str	r3, [r2, #0]

	for(int i=0;i<16;i++)
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	e00c      	b.n	80007f6 <VRUupdate+0x42>
	{
		frame.fdata[i] = datflo[i];
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	683a      	ldr	r2, [r7, #0]
 80007e2:	4413      	add	r3, r2
 80007e4:	681a      	ldr	r2, [r3, #0]
 80007e6:	490e      	ldr	r1, [pc, #56]	; (8000820 <VRUupdate+0x6c>)
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	009b      	lsls	r3, r3, #2
 80007ec:	440b      	add	r3, r1
 80007ee:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3301      	adds	r3, #1
 80007f4:	607b      	str	r3, [r7, #4]
 80007f6:	687b      	ldr	r3, [r7, #4]
 80007f8:	2b0f      	cmp	r3, #15
 80007fa:	ddef      	ble.n	80007dc <VRUupdate+0x28>
		//3角速度XYZ
		//6磁强度XYZ
		//9欧拉角Roll Pitch Yaw
		//12四元数WXYZ
	}
    if(pidinit == 0)
 80007fc:	4b09      	ldr	r3, [pc, #36]	; (8000824 <VRUupdate+0x70>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	2b00      	cmp	r3, #0
 8000802:	d101      	bne.n	8000808 <VRUupdate+0x54>
        PID_init();
 8000804:	f7ff fe5c 	bl	80004c0 <PID_init>
    if(pidinit == 1)
    {
        PID_CTRL();
        setmotor();
    }*/
}
 8000808:	bf00      	nop
 800080a:	3708      	adds	r7, #8
 800080c:	46bd      	mov	sp, r7
 800080e:	bd80      	pop	{r7, pc}
 8000810:	20000302 	.word	0x20000302
 8000814:	2000034c 	.word	0x2000034c
 8000818:	20000348 	.word	0x20000348
 800081c:	20000344 	.word	0x20000344
 8000820:	200000a8 	.word	0x200000a8
 8000824:	20000260 	.word	0x20000260

08000828 <VRUerror>:
void VRUerror()
{
 8000828:	b580      	push	{r7, lr}
 800082a:	af00      	add	r7, sp, #0
    HAL_UART_AbortReceive(VRUhuart);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <VRUerror+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4618      	mov	r0, r3
 8000832:	f005 fdc1 	bl	80063b8 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(VRUhuart, ch110, 82);
 8000836:	4b04      	ldr	r3, [pc, #16]	; (8000848 <VRUerror+0x20>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	2252      	movs	r2, #82	; 0x52
 800083c:	4903      	ldr	r1, [pc, #12]	; (800084c <VRUerror+0x24>)
 800083e:	4618      	mov	r0, r3
 8000840:	f005 fd8a 	bl	8006358 <HAL_UART_Receive_DMA>
}
 8000844:	bf00      	nop
 8000846:	bd80      	pop	{r7, pc}
 8000848:	200002ec 	.word	0x200002ec
 800084c:	200002f0 	.word	0x200002f0

08000850 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000850:	b580      	push	{r7, lr}
 8000852:	b084      	sub	sp, #16
 8000854:	af00      	add	r7, sp, #0
 8000856:	60f8      	str	r0, [r7, #12]
 8000858:	60b9      	str	r1, [r7, #8]
 800085a:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 300);
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	b29a      	uxth	r2, r3
 8000860:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8000864:	68b9      	ldr	r1, [r7, #8]
 8000866:	4804      	ldr	r0, [pc, #16]	; (8000878 <_write+0x28>)
 8000868:	f005 fc9f 	bl	80061aa <HAL_UART_Transmit>
	return len;
 800086c:	687b      	ldr	r3, [r7, #4]
}
 800086e:	4618      	mov	r0, r3
 8000870:	3710      	adds	r7, #16
 8000872:	46bd      	mov	sp, r7
 8000874:	bd80      	pop	{r7, pc}
 8000876:	bf00      	nop
 8000878:	20000660 	.word	0x20000660

0800087c <HAL_UART_RxCpltCallback>:
void delay_ms(unsigned int ms) {
	HAL_Delay(ms);
	return;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4a04      	ldr	r2, [pc, #16]	; (8000898 <HAL_UART_RxCpltCallback+0x1c>)
 8000888:	4293      	cmp	r3, r2
 800088a:	d101      	bne.n	8000890 <HAL_UART_RxCpltCallback+0x14>
	{
		VRUupdate();
 800088c:	f7ff ff92 	bl	80007b4 <VRUupdate>
	}
}
 8000890:	bf00      	nop
 8000892:	3708      	adds	r7, #8
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}
 8000898:	200007d0 	.word	0x200007d0

0800089c <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	4a04      	ldr	r2, [pc, #16]	; (80008b8 <HAL_UART_ErrorCallback+0x1c>)
 80008a8:	4293      	cmp	r3, r2
 80008aa:	d101      	bne.n	80008b0 <HAL_UART_ErrorCallback+0x14>
	{
		VRUerror();
 80008ac:	f7ff ffbc 	bl	8000828 <VRUerror>
	}
}
 80008b0:	bf00      	nop
 80008b2:	3708      	adds	r7, #8
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200007d0 	.word	0x200007d0

080008bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b082      	sub	sp, #8
 80008c0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008c2:	f002 fa9d 	bl	8002e00 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008c6:	f000 f861 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008ca:	f000 fdad 	bl	8001428 <MX_GPIO_Init>
  MX_DMA_Init();
 80008ce:	f000 fd65 	bl	800139c <MX_DMA_Init>
  MX_ADC1_Init();
 80008d2:	f000 f8c5 	bl	8000a60 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008d6:	f000 f915 	bl	8000b04 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008da:	f000 f949 	bl	8000b70 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008de:	f000 f997 	bl	8000c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008e2:	f000 f9e1 	bl	8000ca8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008e6:	f000 fa77 	bl	8000dd8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80008ea:	f000 fb0d 	bl	8000f08 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008ee:	f000 fb6f 	bl	8000fd0 <MX_TIM8_Init>
  MX_UART4_Init();
 80008f2:	f000 fc81 	bl	80011f8 <MX_UART4_Init>
  MX_UART5_Init();
 80008f6:	f000 fca9 	bl	800124c <MX_UART5_Init>
  MX_USART1_UART_Init();
 80008fa:	f000 fcd1 	bl	80012a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 80008fe:	f000 fcf9 	bl	80012f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000902:	f000 fd21 	bl	8001348 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 8000906:	f000 fc27 	bl	8001158 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//delay function sppeeort
 800090a:	4817      	ldr	r0, [pc, #92]	; (8000968 <main+0xac>)
 800090c:	f004 fb6c 	bl	8004fe8 <HAL_TIM_Base_Start>

  motorinit();
 8000910:	f000 feba 	bl	8001688 <motorinit>

	HAL_TIM_Base_Start_IT(&htim1);
 8000914:	4815      	ldr	r0, [pc, #84]	; (800096c <main+0xb0>)
 8000916:	f004 fbcf 	bl	80050b8 <HAL_TIM_Base_Start_IT>

	VRUinit(&huart2);
 800091a:	4815      	ldr	r0, [pc, #84]	; (8000970 <main+0xb4>)
 800091c:	f7ff ff2e 	bl	800077c <VRUinit>
	OLED_Init();
 8000920:	f001 f9ee 	bl	8001d00 <OLED_Init>
	//PID_init();
	remoteInit(&huart5);
 8000924:	4813      	ldr	r0, [pc, #76]	; (8000974 <main+0xb8>)
 8000926:	f001 fa97 	bl	8001e58 <remoteInit>
	remoteInit(&huart1);
 800092a:	4813      	ldr	r0, [pc, #76]	; (8000978 <main+0xbc>)
 800092c:	f001 fa94 	bl	8001e58 <remoteInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello\r\n");
 8000930:	4812      	ldr	r0, [pc, #72]	; (800097c <main+0xc0>)
 8000932:	f006 fc85 	bl	8007240 <puts>
  OLED_ShowString(0,0,"runing...");
 8000936:	4a12      	ldr	r2, [pc, #72]	; (8000980 <main+0xc4>)
 8000938:	2100      	movs	r1, #0
 800093a:	2000      	movs	r0, #0
 800093c:	f001 f9ae 	bl	8001c9c <OLED_ShowString>

  while (1)
  {
	  OLED_ShowString(0,12,"run time:");
 8000940:	4a10      	ldr	r2, [pc, #64]	; (8000984 <main+0xc8>)
 8000942:	210c      	movs	r1, #12
 8000944:	2000      	movs	r0, #0
 8000946:	f001 f9a9 	bl	8001c9c <OLED_ShowString>
	  OLED_ShowNumber(0, 24, HAL_GetTick()/1000, 3, 12);
 800094a:	f002 fa8f 	bl	8002e6c <HAL_GetTick>
 800094e:	4603      	mov	r3, r0
 8000950:	4a0d      	ldr	r2, [pc, #52]	; (8000988 <main+0xcc>)
 8000952:	fba2 2303 	umull	r2, r3, r2, r3
 8000956:	099a      	lsrs	r2, r3, #6
 8000958:	230c      	movs	r3, #12
 800095a:	9300      	str	r3, [sp, #0]
 800095c:	2303      	movs	r3, #3
 800095e:	2118      	movs	r1, #24
 8000960:	2000      	movs	r0, #0
 8000962:	f001 f92d 	bl	8001bc0 <OLED_ShowNumber>
	  OLED_ShowString(0,12,"run time:");
 8000966:	e7eb      	b.n	8000940 <main+0x84>
 8000968:	20000788 	.word	0x20000788
 800096c:	200006a4 	.word	0x200006a4
 8000970:	200007d0 	.word	0x200007d0
 8000974:	20000574 	.word	0x20000574
 8000978:	20000660 	.word	0x20000660
 800097c:	08007b08 	.word	0x08007b08
 8000980:	08007b10 	.word	0x08007b10
 8000984:	08007b1c 	.word	0x08007b1c
 8000988:	10624dd3 	.word	0x10624dd3

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f006 fbda 	bl	8007154 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <SystemClock_Config+0xcc>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <SystemClock_Config+0xd0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009fc:	2308      	movs	r3, #8
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fb62 	bl	80040dc <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a1e:	f000 fe2d 	bl	800167c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2105      	movs	r1, #5
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fdc3 	bl	80045cc <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a4c:	f000 fe16 	bl	800167c <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_ADC1_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <MX_ADC1_Init+0xa0>)
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ac2:	f002 fa03 	bl	8002ecc <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000acc:	f000 fdd6 	bl	800167c <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ae2:	f002 fa37 	bl	8002f54 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aec:	f000 fdc6 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	200005b8 	.word	0x200005b8
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b50:	220a      	movs	r2, #10
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b56:	f003 ff67 	bl	8004a28 <HAL_SPI_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b60:	f000 fd8c 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000730 	.word	0x20000730
 8000b6c:	40013000 	.word	0x40013000

08000b70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <MX_TIM1_Init+0x9c>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b94:	22a7      	movs	r2, #167	; 0xa7
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bba:	f004 f9c5 	bl	8004f48 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 fd5a 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bd6:	f004 fdbd 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000be0:	f000 fd4c 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bf2:	f005 f9ab 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bfc:	f000 fd3e 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	200006a4 	.word	0x200006a4
 8000c0c:	40010000 	.word	0x40010000

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c36:	2253      	movs	r2, #83	; 0x53
 8000c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c56:	f004 f977 	bl	8004f48 <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c60:	f000 fd0c 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c72:	f004 fd6f 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f000 fcfe 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c8e:	f005 f95d 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 fcf0 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	20000788 	.word	0x20000788

08000ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd8:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <MX_TIM3_Init+0x12c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfe:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d00:	f004 f922 	bl	8004f48 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d0a:	f000 fcb7 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d1c:	f004 fd1a 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d26:	f000 fca9 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d2a:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d2c:	f004 fa34 	bl	8005198 <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d36:	f000 fca1 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4619      	mov	r1, r3
 8000d48:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d4a:	f005 f8ff 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d54:	f000 fc92 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2360      	movs	r3, #96	; 0x60
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d70:	f004 fc32 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d7a:	f000 fc7f 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2204      	movs	r2, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d86:	f004 fc27 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d90:	f000 fc74 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2208      	movs	r2, #8
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d9c:	f004 fc1c 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000da6:	f000 fc69 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	220c      	movs	r2, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000db2:	f004 fc11 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000dbc:	f000 fc5e 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000dc2:	f001 fac5 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	2000052c 	.word	0x2000052c
 8000dd4:	40000400 	.word	0x40000400

08000dd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	; (8000f04 <MX_TIM4_Init+0x12c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e10:	2253      	movs	r2, #83	; 0x53
 8000e12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e2e:	4834      	ldr	r0, [pc, #208]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e30:	f004 f88a 	bl	8004f48 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e3a:	f000 fc1f 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482d      	ldr	r0, [pc, #180]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e4c:	f004 fc82 	bl	8005754 <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e56:	f000 fc11 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e5a:	4829      	ldr	r0, [pc, #164]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e5c:	f004 f99c 	bl	8005198 <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e66:	f000 fc09 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	4619      	mov	r1, r3
 8000e78:	4821      	ldr	r0, [pc, #132]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e7a:	f005 f867 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e84:	f000 fbfa 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ea0:	f004 fb9a 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000eaa:	f000 fbe7 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000eb6:	f004 fb8f 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ec0:	f000 fbdc 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ecc:	f004 fb84 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000ed6:	f000 fbd1 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	220c      	movs	r2, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ee2:	f004 fb79 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000eec:	f000 fbc6 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ef2:	f001 fa2d 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	; 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	20000458 	.word	0x20000458
 8000f04:	40000800 	.word	0x40000800

08000f08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <MX_TIM5_Init+0xc4>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f50:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f52:	f004 f921 	bl	8005198 <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 fb8e 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f70:	f004 ffec 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000f7a:	f000 fb7f 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2360      	movs	r3, #96	; 0x60
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2208      	movs	r2, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f96:	f004 fb1f 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 fb6c 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000fac:	f004 fb14 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000fb6:	f000 fb61 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000fbc:	f001 f9c8 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200004e4 	.word	0x200004e4
 8000fcc:	40000c00 	.word	0x40000c00

08000fd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	; 0x58
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f006 f8a3 	bl	8007154 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800100e:	4b50      	ldr	r3, [pc, #320]	; (8001150 <MX_TIM8_Init+0x180>)
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <MX_TIM8_Init+0x184>)
 8001012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8001014:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <MX_TIM8_Init+0x180>)
 8001016:	22a7      	movs	r2, #167	; 0xa7
 8001018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <MX_TIM8_Init+0x180>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <MX_TIM8_Init+0x180>)
 8001022:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001026:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <MX_TIM8_Init+0x180>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <MX_TIM8_Init+0x180>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <MX_TIM8_Init+0x180>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800103a:	4845      	ldr	r0, [pc, #276]	; (8001150 <MX_TIM8_Init+0x180>)
 800103c:	f003 ff84 	bl	8004f48 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001046:	f000 fb19 	bl	800167c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001054:	4619      	mov	r1, r3
 8001056:	483e      	ldr	r0, [pc, #248]	; (8001150 <MX_TIM8_Init+0x180>)
 8001058:	f004 fb7c 	bl	8005754 <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001062:	f000 fb0b 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001066:	483a      	ldr	r0, [pc, #232]	; (8001150 <MX_TIM8_Init+0x180>)
 8001068:	f004 f896 	bl	8005198 <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001072:	f000 fb03 	bl	800167c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800107e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001082:	4619      	mov	r1, r3
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <MX_TIM8_Init+0x180>)
 8001086:	f004 ff61 	bl	8005f4c <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001090:	f000 faf4 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4825      	ldr	r0, [pc, #148]	; (8001150 <MX_TIM8_Init+0x180>)
 80010ba:	f004 fa8d 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80010c4:	f000 fada 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	2204      	movs	r2, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <MX_TIM8_Init+0x180>)
 80010d2:	f004 fa81 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80010dc:	f000 face 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	2208      	movs	r2, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <MX_TIM8_Init+0x180>)
 80010ea:	f004 fa75 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80010f4:	f000 fac2 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	220c      	movs	r2, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_TIM8_Init+0x180>)
 8001102:	f004 fa69 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800110c:	f000 fab6 	bl	800167c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001128:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM8_Init+0x180>)
 8001134:	f004 ff86 	bl	8006044 <HAL_TIMEx_ConfigBreakDeadTime>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800113e:	f000 fa9d 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM8_Init+0x180>)
 8001144:	f001 f904 	bl	8002350 <HAL_TIM_MspPostInit>

}
 8001148:	bf00      	nop
 800114a:	3758      	adds	r7, #88	; 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000410 	.word	0x20000410
 8001154:	40010400 	.word	0x40010400

08001158 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <MX_TIM12_Init+0x9c>)
 8001174:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_TIM12_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_TIM12_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001196:	4816      	ldr	r0, [pc, #88]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001198:	f003 fffe 	bl	8005198 <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011a2:	f000 fa6b 	bl	800167c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011be:	f004 fa0b 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011c8:	f000 fa58 	bl	800167c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2204      	movs	r2, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011d4:	f004 fa00 	bl	80055d8 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80011de:	f000 fa4d 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011e4:	f001 f8b4 	bl	8002350 <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	20000874 	.word	0x20000874
 80011f4:	40001800 	.word	0x40001800

080011f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_UART4_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_UART4_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_UART4_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_UART4_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_UART4_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_UART4_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_UART4_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_UART4_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_UART4_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_UART4_Init+0x4c>)
 8001230:	f004 ff6e 	bl	8006110 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 fa1f 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200006ec 	.word	0x200006ec
 8001248:	40004c00 	.word	0x40004c00

0800124c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_UART5_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_UART5_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_UART5_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_UART5_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_UART5_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_UART5_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_UART5_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_UART5_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_UART5_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_UART5_Init+0x4c>)
 8001284:	f004 ff44 	bl	8006110 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f9f5 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000574 	.word	0x20000574
 800129c:	40005000 	.word	0x40005000

080012a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART1_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d8:	f004 ff1a 	bl	8006110 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 f9cb 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	20000660 	.word	0x20000660
 80012f0:	40011000 	.word	0x40011000

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_USART2_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800132c:	f004 fef0 	bl	8006110 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001336:	f000 f9a1 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	200007d0 	.word	0x200007d0
 8001344:	40004400 	.word	0x40004400

08001348 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_USART3_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001380:	f004 fec6 	bl	8006110 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 f977 	bl	800167c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	200004a0 	.word	0x200004a0
 8001398:	40004800 	.word	0x40004800

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b1f      	ldr	r3, [pc, #124]	; (8001424 <MX_DMA_Init+0x88>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1e      	ldr	r2, [pc, #120]	; (8001424 <MX_DMA_Init+0x88>)
 80013ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b1c      	ldr	r3, [pc, #112]	; (8001424 <MX_DMA_Init+0x88>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b18      	ldr	r3, [pc, #96]	; (8001424 <MX_DMA_Init+0x88>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a17      	ldr	r2, [pc, #92]	; (8001424 <MX_DMA_Init+0x88>)
 80013c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b15      	ldr	r3, [pc, #84]	; (8001424 <MX_DMA_Init+0x88>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	200b      	movs	r0, #11
 80013e0:	f002 f88e 	bl	8003500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013e4:	200b      	movs	r0, #11
 80013e6:	f002 f8a7 	bl	8003538 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	200d      	movs	r0, #13
 80013f0:	f002 f886 	bl	8003500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 80013f4:	200d      	movs	r0, #13
 80013f6:	f002 f89f 	bl	8003538 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	2010      	movs	r0, #16
 8001400:	f002 f87e 	bl	8003500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001404:	2010      	movs	r0, #16
 8001406:	f002 f897 	bl	8003538 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 800140a:	2200      	movs	r2, #0
 800140c:	2100      	movs	r1, #0
 800140e:	203a      	movs	r0, #58	; 0x3a
 8001410:	f002 f876 	bl	8003500 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001414:	203a      	movs	r0, #58	; 0x3a
 8001416:	f002 f88f 	bl	8003538 <HAL_NVIC_EnableIRQ>

}
 800141a:	bf00      	nop
 800141c:	3708      	adds	r7, #8
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800

08001428 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001428:	b580      	push	{r7, lr}
 800142a:	b08c      	sub	sp, #48	; 0x30
 800142c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800142e:	f107 031c 	add.w	r3, r7, #28
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]
 8001438:	609a      	str	r2, [r3, #8]
 800143a:	60da      	str	r2, [r3, #12]
 800143c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800143e:	2300      	movs	r3, #0
 8001440:	61bb      	str	r3, [r7, #24]
 8001442:	4b58      	ldr	r3, [pc, #352]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a57      	ldr	r2, [pc, #348]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001448:	f043 0310 	orr.w	r3, r3, #16
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b55      	ldr	r3, [pc, #340]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0310 	and.w	r3, r3, #16
 8001456:	61bb      	str	r3, [r7, #24]
 8001458:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001460:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001462:	4a50      	ldr	r2, [pc, #320]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001464:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001468:	6313      	str	r3, [r2, #48]	; 0x30
 800146a:	4b4e      	ldr	r3, [pc, #312]	; (80015a4 <MX_GPIO_Init+0x17c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001472:	617b      	str	r3, [r7, #20]
 8001474:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001476:	2300      	movs	r3, #0
 8001478:	613b      	str	r3, [r7, #16]
 800147a:	4b4a      	ldr	r3, [pc, #296]	; (80015a4 <MX_GPIO_Init+0x17c>)
 800147c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147e:	4a49      	ldr	r2, [pc, #292]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001480:	f043 0301 	orr.w	r3, r3, #1
 8001484:	6313      	str	r3, [r2, #48]	; 0x30
 8001486:	4b47      	ldr	r3, [pc, #284]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	f003 0301 	and.w	r3, r3, #1
 800148e:	613b      	str	r3, [r7, #16]
 8001490:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	60fb      	str	r3, [r7, #12]
 8001496:	4b43      	ldr	r3, [pc, #268]	; (80015a4 <MX_GPIO_Init+0x17c>)
 8001498:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800149a:	4a42      	ldr	r2, [pc, #264]	; (80015a4 <MX_GPIO_Init+0x17c>)
 800149c:	f043 0302 	orr.w	r3, r3, #2
 80014a0:	6313      	str	r3, [r2, #48]	; 0x30
 80014a2:	4b40      	ldr	r3, [pc, #256]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	60fb      	str	r3, [r7, #12]
 80014ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
 80014b2:	4b3c      	ldr	r3, [pc, #240]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a3b      	ldr	r2, [pc, #236]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014b8:	f043 0308 	orr.w	r3, r3, #8
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b39      	ldr	r3, [pc, #228]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0308 	and.w	r3, r3, #8
 80014c6:	60bb      	str	r3, [r7, #8]
 80014c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ca:	2300      	movs	r3, #0
 80014cc:	607b      	str	r3, [r7, #4]
 80014ce:	4b35      	ldr	r3, [pc, #212]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d2:	4a34      	ldr	r2, [pc, #208]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014d4:	f043 0304 	orr.w	r3, r3, #4
 80014d8:	6313      	str	r3, [r2, #48]	; 0x30
 80014da:	4b32      	ldr	r3, [pc, #200]	; (80015a4 <MX_GPIO_Init+0x17c>)
 80014dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014de:	f003 0304 	and.w	r3, r3, #4
 80014e2:	607b      	str	r3, [r7, #4]
 80014e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CSN_GPIO_Port, OLED_CSN_Pin, GPIO_PIN_RESET);
 80014e6:	2200      	movs	r2, #0
 80014e8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ec:	482e      	ldr	r0, [pc, #184]	; (80015a8 <MX_GPIO_Init+0x180>)
 80014ee:	f002 fddb 	bl	80040a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80014f2:	2200      	movs	r2, #0
 80014f4:	21c0      	movs	r1, #192	; 0xc0
 80014f6:	482d      	ldr	r0, [pc, #180]	; (80015ac <MX_GPIO_Init+0x184>)
 80014f8:	f002 fdd6 	bl	80040a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014fc:	2360      	movs	r3, #96	; 0x60
 80014fe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001500:	2302      	movs	r3, #2
 8001502:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001504:	2300      	movs	r3, #0
 8001506:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	2300      	movs	r3, #0
 800150a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800150c:	2303      	movs	r3, #3
 800150e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001510:	f107 031c 	add.w	r3, r7, #28
 8001514:	4619      	mov	r1, r3
 8001516:	4826      	ldr	r0, [pc, #152]	; (80015b0 <MX_GPIO_Init+0x188>)
 8001518:	f002 fc2a 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CSN_Pin */
  GPIO_InitStruct.Pin = OLED_CSN_Pin;
 800151c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001520:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001522:	2301      	movs	r3, #1
 8001524:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152a:	2303      	movs	r3, #3
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CSN_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 031c 	add.w	r3, r7, #28
 8001532:	4619      	mov	r1, r3
 8001534:	481c      	ldr	r0, [pc, #112]	; (80015a8 <MX_GPIO_Init+0x180>)
 8001536:	f002 fc1b 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 800153a:	23c0      	movs	r3, #192	; 0xc0
 800153c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153e:	2301      	movs	r3, #1
 8001540:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001542:	2300      	movs	r3, #0
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001546:	2303      	movs	r3, #3
 8001548:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f107 031c 	add.w	r3, r7, #28
 800154e:	4619      	mov	r1, r3
 8001550:	4816      	ldr	r0, [pc, #88]	; (80015ac <MX_GPIO_Init+0x184>)
 8001552:	f002 fc0d 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001556:	f44f 7380 	mov.w	r3, #256	; 0x100
 800155a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800155c:	2302      	movs	r3, #2
 800155e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001560:	2300      	movs	r3, #0
 8001562:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001564:	2300      	movs	r3, #0
 8001566:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001568:	2303      	movs	r3, #3
 800156a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800156c:	f107 031c 	add.w	r3, r7, #28
 8001570:	4619      	mov	r1, r3
 8001572:	480e      	ldr	r0, [pc, #56]	; (80015ac <MX_GPIO_Init+0x184>)
 8001574:	f002 fbfc 	bl	8003d70 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001578:	f44f 7300 	mov.w	r3, #512	; 0x200
 800157c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157e:	2302      	movs	r3, #2
 8001580:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001582:	2300      	movs	r3, #0
 8001584:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001586:	2300      	movs	r3, #0
 8001588:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800158a:	2303      	movs	r3, #3
 800158c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800158e:	f107 031c 	add.w	r3, r7, #28
 8001592:	4619      	mov	r1, r3
 8001594:	4805      	ldr	r0, [pc, #20]	; (80015ac <MX_GPIO_Init+0x184>)
 8001596:	f002 fbeb 	bl	8003d70 <HAL_GPIO_Init>

}
 800159a:	bf00      	nop
 800159c:	3730      	adds	r7, #48	; 0x30
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800
 80015a8:	40020000 	.word	0x40020000
 80015ac:	40020400 	.word	0x40020400
 80015b0:	40021000 	.word	0x40021000

080015b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a26      	ldr	r2, [pc, #152]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d102      	bne.n	80015cc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80015c6:	f001 fc3d 	bl	8002e44 <HAL_IncTick>
      if(pidinit==1&&lock!=0)
    	  PID_CTRL();
      setmotor();
  }
  /* USER CODE END Callback 1 */
}
 80015ca:	e042      	b.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x9e>
  else if(htim->Instance == TIM1)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a23      	ldr	r2, [pc, #140]	; (8001660 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d13d      	bne.n	8001652 <HAL_TIM_PeriodElapsedCallback+0x9e>
	  HAL_UART_Transmit_IT(&huart5, (unsigned char *)&frame, sizeof(frame));
 80015d6:	226c      	movs	r2, #108	; 0x6c
 80015d8:	4922      	ldr	r1, [pc, #136]	; (8001664 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015da:	4823      	ldr	r0, [pc, #140]	; (8001668 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015dc:	f004 fe77 	bl	80062ce <HAL_UART_Transmit_IT>
	  OLED_Refresh_Gram();
 80015e0:	f000 f986 	bl	80018f0 <OLED_Refresh_Gram>
      target_ver[0] = ch_float[0]*30;
 80015e4:	4b21      	ldr	r3, [pc, #132]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015ee:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f2:	4b1f      	ldr	r3, [pc, #124]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80015f4:	edc3 7a00 	vstr	s15, [r3]
      target_ver[1] = ch_float[1]*30;
 80015f8:	4b1c      	ldr	r3, [pc, #112]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80015fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80015fe:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8001602:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001606:	4b1a      	ldr	r3, [pc, #104]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001608:	edc3 7a01 	vstr	s15, [r3, #4]
      target_ver[2] -= ch_float[2];
 800160c:	4b18      	ldr	r3, [pc, #96]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800160e:	ed93 7a02 	vldr	s14, [r3, #8]
 8001612:	4b16      	ldr	r3, [pc, #88]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001614:	edd3 7a02 	vldr	s15, [r3, #8]
 8001618:	ee77 7a67 	vsub.f32	s15, s14, s15
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 800161e:	edc3 7a02 	vstr	s15, [r3, #8]
      target_ver[3] = ch_float[3]; //求误�???
 8001622:	4b12      	ldr	r3, [pc, #72]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001624:	68db      	ldr	r3, [r3, #12]
 8001626:	4a12      	ldr	r2, [pc, #72]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001628:	60d3      	str	r3, [r2, #12]
      target_ver[4] = ch_float[4]; //求误�???
 800162a:	4b10      	ldr	r3, [pc, #64]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800162c:	691b      	ldr	r3, [r3, #16]
 800162e:	4a10      	ldr	r2, [pc, #64]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001630:	6113      	str	r3, [r2, #16]
      target_ver[5] = ch_float[5]; //求误�???
 8001632:	4b0e      	ldr	r3, [pc, #56]	; (800166c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8001634:	695b      	ldr	r3, [r3, #20]
 8001636:	4a0e      	ldr	r2, [pc, #56]	; (8001670 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001638:	6153      	str	r3, [r2, #20]
      if(pidinit==1&&lock!=0)
 800163a:	4b0e      	ldr	r3, [pc, #56]	; (8001674 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	2b01      	cmp	r3, #1
 8001640:	d105      	bne.n	800164e <HAL_TIM_PeriodElapsedCallback+0x9a>
 8001642:	4b0d      	ldr	r3, [pc, #52]	; (8001678 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <HAL_TIM_PeriodElapsedCallback+0x9a>
    	  PID_CTRL();
 800164a:	f7fe ff55 	bl	80004f8 <PID_CTRL>
      setmotor();
 800164e:	f000 f843 	bl	80016d8 <setmotor>
}
 8001652:	bf00      	nop
 8001654:	3708      	adds	r7, #8
 8001656:	46bd      	mov	sp, r7
 8001658:	bd80      	pop	{r7, pc}
 800165a:	bf00      	nop
 800165c:	40001400 	.word	0x40001400
 8001660:	40010000 	.word	0x40010000
 8001664:	200000a8 	.word	0x200000a8
 8001668:	20000574 	.word	0x20000574
 800166c:	200002a0 	.word	0x200002a0
 8001670:	200002cc 	.word	0x200002cc
 8001674:	20000260 	.word	0x20000260
 8001678:	2000027c 	.word	0x2000027c

0800167c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800167c:	b480      	push	{r7}
 800167e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001680:	b672      	cpsid	i
}
 8001682:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001684:	e7fe      	b.n	8001684 <Error_Handler+0x8>
	...

08001688 <motorinit>:
		{ 1.0f, 1.0f, 0, 0,1.0f, 0, 0, 0, 0, },
		{ -1.0f, 1.0f, 0, 0, 1.0f, 0, 0, 0, 0, }, };*/
float motor[8];
//每次执行会将六自由度dof6转换为8个电机通道 并赋值
void motorinit()
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim4;
	extern TIM_HandleTypeDef htim8;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	4810      	ldr	r0, [pc, #64]	; (80016d0 <motorinit+0x48>)
 8001690:	f003 fdd2 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001694:	2104      	movs	r1, #4
 8001696:	480e      	ldr	r0, [pc, #56]	; (80016d0 <motorinit+0x48>)
 8001698:	f003 fdce 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800169c:	2108      	movs	r1, #8
 800169e:	480c      	ldr	r0, [pc, #48]	; (80016d0 <motorinit+0x48>)
 80016a0:	f003 fdca 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80016a4:	210c      	movs	r1, #12
 80016a6:	480a      	ldr	r0, [pc, #40]	; (80016d0 <motorinit+0x48>)
 80016a8:	f003 fdc6 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80016ac:	2100      	movs	r1, #0
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <motorinit+0x4c>)
 80016b0:	f003 fdc2 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80016b4:	2104      	movs	r1, #4
 80016b6:	4807      	ldr	r0, [pc, #28]	; (80016d4 <motorinit+0x4c>)
 80016b8:	f003 fdbe 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80016bc:	2108      	movs	r1, #8
 80016be:	4805      	ldr	r0, [pc, #20]	; (80016d4 <motorinit+0x4c>)
 80016c0:	f003 fdba 	bl	8005238 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016c4:	210c      	movs	r1, #12
 80016c6:	4803      	ldr	r0, [pc, #12]	; (80016d4 <motorinit+0x4c>)
 80016c8:	f003 fdb6 	bl	8005238 <HAL_TIM_PWM_Start>
}
 80016cc:	bf00      	nop
 80016ce:	bd80      	pop	{r7, pc}
 80016d0:	20000458 	.word	0x20000458
 80016d4:	20000410 	.word	0x20000410

080016d8 <setmotor>:
void setmotor()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b084      	sub	sp, #16
 80016dc:	af00      	add	r7, sp, #0
    int time = HAL_GetTick();
 80016de:	f001 fbc5 	bl	8002e6c <HAL_GetTick>
 80016e2:	4603      	mov	r3, r0
 80016e4:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 8; i++)
 80016e6:	2300      	movs	r3, #0
 80016e8:	60fb      	str	r3, [r7, #12]
 80016ea:	e05d      	b.n	80017a8 <setmotor+0xd0>
    {
        float tmp = 0;
 80016ec:	f04f 0300 	mov.w	r3, #0
 80016f0:	60bb      	str	r3, [r7, #8]
        for (int j = 0; j < 6; j++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	607b      	str	r3, [r7, #4]
 80016f6:	e01c      	b.n	8001732 <setmotor+0x5a>
            tmp += hcc[i][j] * dof6[j];
 80016f8:	4973      	ldr	r1, [pc, #460]	; (80018c8 <setmotor+0x1f0>)
 80016fa:	68fa      	ldr	r2, [r7, #12]
 80016fc:	4613      	mov	r3, r2
 80016fe:	005b      	lsls	r3, r3, #1
 8001700:	4413      	add	r3, r2
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	687a      	ldr	r2, [r7, #4]
 8001706:	4413      	add	r3, r2
 8001708:	009b      	lsls	r3, r3, #2
 800170a:	440b      	add	r3, r1
 800170c:	ed93 7a00 	vldr	s14, [r3]
 8001710:	4a6e      	ldr	r2, [pc, #440]	; (80018cc <setmotor+0x1f4>)
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	4413      	add	r3, r2
 8001718:	edd3 7a00 	vldr	s15, [r3]
 800171c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001720:	ed97 7a02 	vldr	s14, [r7, #8]
 8001724:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001728:	edc7 7a02 	vstr	s15, [r7, #8]
        for (int j = 0; j < 6; j++)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3301      	adds	r3, #1
 8001730:	607b      	str	r3, [r7, #4]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2b05      	cmp	r3, #5
 8001736:	dddf      	ble.n	80016f8 <setmotor+0x20>
        if(tmp > 1)
 8001738:	edd7 7a02 	vldr	s15, [r7, #8]
 800173c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001740:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001744:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001748:	dd02      	ble.n	8001750 <setmotor+0x78>
            tmp = 1;
 800174a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800174e:	60bb      	str	r3, [r7, #8]
        if(tmp < -1)
 8001750:	edd7 7a02 	vldr	s15, [r7, #8]
 8001754:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001758:	eef4 7ac7 	vcmpe.f32	s15, s14
 800175c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001760:	d501      	bpl.n	8001766 <setmotor+0x8e>
            tmp = -1;
 8001762:	4b5b      	ldr	r3, [pc, #364]	; (80018d0 <setmotor+0x1f8>)
 8001764:	60bb      	str	r3, [r7, #8]
        if(time<10000||lock==0)//初始化||没有解开锁定
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	f242 720f 	movw	r2, #9999	; 0x270f
 800176c:	4293      	cmp	r3, r2
 800176e:	dd03      	ble.n	8001778 <setmotor+0xa0>
 8001770:	4b58      	ldr	r3, [pc, #352]	; (80018d4 <setmotor+0x1fc>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	2b00      	cmp	r3, #0
 8001776:	d107      	bne.n	8001788 <setmotor+0xb0>
			motor[i] = 0;
 8001778:	4a57      	ldr	r2, [pc, #348]	; (80018d8 <setmotor+0x200>)
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	4413      	add	r3, r2
 8001780:	f04f 0200 	mov.w	r2, #0
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	e005      	b.n	8001794 <setmotor+0xbc>
        else
        	motor[i] = tmp;
 8001788:	4a53      	ldr	r2, [pc, #332]	; (80018d8 <setmotor+0x200>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	68ba      	ldr	r2, [r7, #8]
 8001792:	601a      	str	r2, [r3, #0]
        frame.fdata[i + 16] = tmp;//回传数据
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	3310      	adds	r3, #16
 8001798:	4a50      	ldr	r2, [pc, #320]	; (80018dc <setmotor+0x204>)
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	68ba      	ldr	r2, [r7, #8]
 80017a0:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	3301      	adds	r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	2b07      	cmp	r3, #7
 80017ac:	dd9e      	ble.n	80016ec <setmotor+0x14>
    }

    MOTOR_1 = motor[0] * MOTOR_WAY + MOTOR_CENTER;
 80017ae:	4b4a      	ldr	r3, [pc, #296]	; (80018d8 <setmotor+0x200>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80018e0 <setmotor+0x208>
 80017b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017bc:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80018e4 <setmotor+0x20c>
 80017c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c4:	4b48      	ldr	r3, [pc, #288]	; (80018e8 <setmotor+0x210>)
 80017c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ca:	ee17 2a90 	vmov	r2, s15
 80017ce:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_2 = motor[1] * MOTOR_WAY + MOTOR_CENTER;
 80017d0:	4b41      	ldr	r3, [pc, #260]	; (80018d8 <setmotor+0x200>)
 80017d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80017d6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80018e0 <setmotor+0x208>
 80017da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017de:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80018e4 <setmotor+0x20c>
 80017e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e6:	4b40      	ldr	r3, [pc, #256]	; (80018e8 <setmotor+0x210>)
 80017e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ec:	ee17 2a90 	vmov	r2, s15
 80017f0:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_3 = motor[2] * MOTOR_WAY + MOTOR_CENTER;
 80017f2:	4b39      	ldr	r3, [pc, #228]	; (80018d8 <setmotor+0x200>)
 80017f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017f8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80018e0 <setmotor+0x208>
 80017fc:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001800:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80018e4 <setmotor+0x20c>
 8001804:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001808:	4b37      	ldr	r3, [pc, #220]	; (80018e8 <setmotor+0x210>)
 800180a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800180e:	ee17 2a90 	vmov	r2, s15
 8001812:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_4 = motor[3] * MOTOR_WAY + MOTOR_CENTER;
 8001814:	4b30      	ldr	r3, [pc, #192]	; (80018d8 <setmotor+0x200>)
 8001816:	edd3 7a03 	vldr	s15, [r3, #12]
 800181a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80018e0 <setmotor+0x208>
 800181e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001822:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80018e4 <setmotor+0x20c>
 8001826:	ee77 7a87 	vadd.f32	s15, s15, s14
 800182a:	4b2f      	ldr	r3, [pc, #188]	; (80018e8 <setmotor+0x210>)
 800182c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001830:	ee17 2a90 	vmov	r2, s15
 8001834:	641a      	str	r2, [r3, #64]	; 0x40
    MOTOR_5 = motor[4] * MOTOR_WAY + MOTOR_CENTER;
 8001836:	4b28      	ldr	r3, [pc, #160]	; (80018d8 <setmotor+0x200>)
 8001838:	edd3 7a04 	vldr	s15, [r3, #16]
 800183c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80018e0 <setmotor+0x208>
 8001840:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001844:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80018e4 <setmotor+0x20c>
 8001848:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <setmotor+0x214>)
 800184e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001852:	ee17 2a90 	vmov	r2, s15
 8001856:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_6 = motor[5] * MOTOR_WAY + MOTOR_CENTER;
 8001858:	4b1f      	ldr	r3, [pc, #124]	; (80018d8 <setmotor+0x200>)
 800185a:	edd3 7a05 	vldr	s15, [r3, #20]
 800185e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80018e0 <setmotor+0x208>
 8001862:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001866:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80018e4 <setmotor+0x20c>
 800186a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800186e:	4b1f      	ldr	r3, [pc, #124]	; (80018ec <setmotor+0x214>)
 8001870:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001874:	ee17 2a90 	vmov	r2, s15
 8001878:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_7 = motor[6] * MOTOR_WAY + MOTOR_CENTER;
 800187a:	4b17      	ldr	r3, [pc, #92]	; (80018d8 <setmotor+0x200>)
 800187c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001880:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018e0 <setmotor+0x208>
 8001884:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001888:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80018e4 <setmotor+0x20c>
 800188c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001890:	4b16      	ldr	r3, [pc, #88]	; (80018ec <setmotor+0x214>)
 8001892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001896:	ee17 2a90 	vmov	r2, s15
 800189a:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_8 = motor[7] * MOTOR_WAY + MOTOR_CENTER;
 800189c:	4b0e      	ldr	r3, [pc, #56]	; (80018d8 <setmotor+0x200>)
 800189e:	edd3 7a07 	vldr	s15, [r3, #28]
 80018a2:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80018e0 <setmotor+0x208>
 80018a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018aa:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80018e4 <setmotor+0x20c>
 80018ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80018b2:	4b0e      	ldr	r3, [pc, #56]	; (80018ec <setmotor+0x214>)
 80018b4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80018b8:	ee17 2a90 	vmov	r2, s15
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
}
 80018be:	bf00      	nop
 80018c0:	3710      	adds	r7, #16
 80018c2:	46bd      	mov	sp, r7
 80018c4:	bd80      	pop	{r7, pc}
 80018c6:	bf00      	nop
 80018c8:	20000114 	.word	0x20000114
 80018cc:	20000264 	.word	0x20000264
 80018d0:	bf800000 	.word	0xbf800000
 80018d4:	2000027c 	.word	0x2000027c
 80018d8:	200008bc 	.word	0x200008bc
 80018dc:	200000a8 	.word	0x200000a8
 80018e0:	44480000 	.word	0x44480000
 80018e4:	44bb8000 	.word	0x44bb8000
 80018e8:	40000800 	.word	0x40000800
 80018ec:	40010400 	.word	0x40010400

080018f0 <OLED_Refresh_Gram>:
extern SPI_HandleTypeDef hspi1;

  
u8 OLED_GRAM[8][128];	   //内部定义了一块GRAM
void OLED_Refresh_Gram(void) //把32内部的GRAM刷新到OLED里面显示
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
	//u8 i,n;
	for(int i=0;i<8;i++)
 80018f6:	2300      	movs	r3, #0
 80018f8:	607b      	str	r3, [r7, #4]
 80018fa:	e01b      	b.n	8001934 <OLED_Refresh_Gram+0x44>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	b2db      	uxtb	r3, r3
 8001900:	3b50      	subs	r3, #80	; 0x50
 8001902:	b2db      	uxtb	r3, r3
 8001904:	2100      	movs	r1, #0
 8001906:	4618      	mov	r0, r3
 8001908:	f000 f820 	bl	800194c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 800190c:	2100      	movs	r1, #0
 800190e:	2000      	movs	r0, #0
 8001910:	f000 f81c 	bl	800194c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 8001914:	2100      	movs	r1, #0
 8001916:	2010      	movs	r0, #16
 8001918:	f000 f818 	bl	800194c <OLED_WR_Byte>
		//OLED_RS_Set();
		HAL_SPI_Transmit(&hspi1, OLED_GRAM[i], 128, 10);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	01db      	lsls	r3, r3, #7
 8001920:	4a08      	ldr	r2, [pc, #32]	; (8001944 <OLED_Refresh_Gram+0x54>)
 8001922:	1899      	adds	r1, r3, r2
 8001924:	230a      	movs	r3, #10
 8001926:	2280      	movs	r2, #128	; 0x80
 8001928:	4807      	ldr	r0, [pc, #28]	; (8001948 <OLED_Refresh_Gram+0x58>)
 800192a:	f003 f906 	bl	8004b3a <HAL_SPI_Transmit>
	for(int i=0;i<8;i++)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	3301      	adds	r3, #1
 8001932:	607b      	str	r3, [r7, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2b07      	cmp	r3, #7
 8001938:	dde0      	ble.n	80018fc <OLED_Refresh_Gram+0xc>
		//for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
	}
}
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	3708      	adds	r7, #8
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200008dc 	.word	0x200008dc
 8001948:	20000730 	.word	0x20000730

0800194c <OLED_WR_Byte>:
函数功能：向OLED写入一个字节
入口参数：dat:要写入的数据/命令  ，cmd:数据/命令标志 0,表示命令;1,表示数据;
返 回 值：无
**************************************************************************/
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	4603      	mov	r3, r0
 8001954:	460a      	mov	r2, r1
 8001956:	71fb      	strb	r3, [r7, #7]
 8001958:	4613      	mov	r3, r2
 800195a:	71bb      	strb	r3, [r7, #6]
	//u8 i;
	if(cmd)
 800195c:	79bb      	ldrb	r3, [r7, #6]
 800195e:	2b00      	cmp	r3, #0
 8001960:	d005      	beq.n	800196e <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 8001962:	2201      	movs	r2, #1
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	480c      	ldr	r0, [pc, #48]	; (8001998 <OLED_WR_Byte+0x4c>)
 8001968:	f002 fb9e 	bl	80040a8 <HAL_GPIO_WritePin>
 800196c:	e004      	b.n	8001978 <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();
 800196e:	2200      	movs	r2, #0
 8001970:	2180      	movs	r1, #128	; 0x80
 8001972:	4809      	ldr	r0, [pc, #36]	; (8001998 <OLED_WR_Byte+0x4c>)
 8001974:	f002 fb98 	bl	80040a8 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 10);
 8001978:	1df9      	adds	r1, r7, #7
 800197a:	230a      	movs	r3, #10
 800197c:	2201      	movs	r2, #1
 800197e:	4807      	ldr	r0, [pc, #28]	; (800199c <OLED_WR_Byte+0x50>)
 8001980:	f003 f8db 	bl	8004b3a <HAL_SPI_Transmit>
		   OLED_SDIN_Clr();
		OLED_SCLK_Set();
		dat<<=1;   
	}				 		  
	*/
	OLED_RS_Set();   	  
 8001984:	2201      	movs	r2, #1
 8001986:	2180      	movs	r1, #128	; 0x80
 8001988:	4803      	ldr	r0, [pc, #12]	; (8001998 <OLED_WR_Byte+0x4c>)
 800198a:	f002 fb8d 	bl	80040a8 <HAL_GPIO_WritePin>
} 
 800198e:	bf00      	nop
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	40020400 	.word	0x40020400
 800199c:	20000730 	.word	0x20000730

080019a0 <OLED_Clear>:
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}	
////////////////////////////////////////////////////////////////////////////////
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 80019a0:	b480      	push	{r7}
 80019a2:	b083      	sub	sp, #12
 80019a4:	af00      	add	r7, sp, #0
	u8 i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[i][n]=0X00;
 80019a6:	2300      	movs	r3, #0
 80019a8:	71fb      	strb	r3, [r7, #7]
 80019aa:	e014      	b.n	80019d6 <OLED_Clear+0x36>
 80019ac:	2300      	movs	r3, #0
 80019ae:	71bb      	strb	r3, [r7, #6]
 80019b0:	e00a      	b.n	80019c8 <OLED_Clear+0x28>
 80019b2:	79fa      	ldrb	r2, [r7, #7]
 80019b4:	79bb      	ldrb	r3, [r7, #6]
 80019b6:	490d      	ldr	r1, [pc, #52]	; (80019ec <OLED_Clear+0x4c>)
 80019b8:	01d2      	lsls	r2, r2, #7
 80019ba:	440a      	add	r2, r1
 80019bc:	4413      	add	r3, r2
 80019be:	2200      	movs	r2, #0
 80019c0:	701a      	strb	r2, [r3, #0]
 80019c2:	79bb      	ldrb	r3, [r7, #6]
 80019c4:	3301      	adds	r3, #1
 80019c6:	71bb      	strb	r3, [r7, #6]
 80019c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	daf0      	bge.n	80019b2 <OLED_Clear+0x12>
 80019d0:	79fb      	ldrb	r3, [r7, #7]
 80019d2:	3301      	adds	r3, #1
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	2b07      	cmp	r3, #7
 80019da:	d9e7      	bls.n	80019ac <OLED_Clear+0xc>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
		//for(k=0;k<128;k++)OLED_WR_Byte(OLED_GRAM[j][k],OLED_DATA);
	}
	//OLED_Refresh_Gram();//更新显示
	 */
}
 80019dc:	bf00      	nop
 80019de:	bf00      	nop
 80019e0:	370c      	adds	r7, #12
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
 80019ea:	bf00      	nop
 80019ec:	200008dc 	.word	0x200008dc

080019f0 <OLED_DrawPoint>:
函数功能：在OLED中画点
入口参数：坐标:x：0~127，y:0~63  ，t:1 填充 0,清空		
返 回 值：无
**************************************************************************/
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b085      	sub	sp, #20
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	4603      	mov	r3, r0
 80019f8:	71fb      	strb	r3, [r7, #7]
 80019fa:	460b      	mov	r3, r1
 80019fc:	71bb      	strb	r3, [r7, #6]
 80019fe:	4613      	mov	r3, r2
 8001a00:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 8001a02:	2300      	movs	r3, #0
 8001a04:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 8001a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	db41      	blt.n	8001a92 <OLED_DrawPoint+0xa2>
 8001a0e:	79bb      	ldrb	r3, [r7, #6]
 8001a10:	2b3f      	cmp	r3, #63	; 0x3f
 8001a12:	d83e      	bhi.n	8001a92 <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 8001a14:	79bb      	ldrb	r3, [r7, #6]
 8001a16:	08db      	lsrs	r3, r3, #3
 8001a18:	b2db      	uxtb	r3, r3
 8001a1a:	f1c3 0307 	rsb	r3, r3, #7
 8001a1e:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001a28:	7b7b      	ldrb	r3, [r7, #13]
 8001a2a:	f1c3 0307 	rsb	r3, r3, #7
 8001a2e:	2201      	movs	r2, #1
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[pos][x]|=temp;
 8001a36:	797b      	ldrb	r3, [r7, #5]
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d012      	beq.n	8001a62 <OLED_DrawPoint+0x72>
 8001a3c:	7bba      	ldrb	r2, [r7, #14]
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	4917      	ldr	r1, [pc, #92]	; (8001aa0 <OLED_DrawPoint+0xb0>)
 8001a42:	01d2      	lsls	r2, r2, #7
 8001a44:	440a      	add	r2, r1
 8001a46:	4413      	add	r3, r2
 8001a48:	7818      	ldrb	r0, [r3, #0]
 8001a4a:	7bba      	ldrb	r2, [r7, #14]
 8001a4c:	79fb      	ldrb	r3, [r7, #7]
 8001a4e:	7bf9      	ldrb	r1, [r7, #15]
 8001a50:	4301      	orrs	r1, r0
 8001a52:	b2c8      	uxtb	r0, r1
 8001a54:	4912      	ldr	r1, [pc, #72]	; (8001aa0 <OLED_DrawPoint+0xb0>)
 8001a56:	01d2      	lsls	r2, r2, #7
 8001a58:	440a      	add	r2, r1
 8001a5a:	4413      	add	r3, r2
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	701a      	strb	r2, [r3, #0]
 8001a60:	e018      	b.n	8001a94 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[pos][x]&=~temp;
 8001a62:	7bba      	ldrb	r2, [r7, #14]
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	490e      	ldr	r1, [pc, #56]	; (8001aa0 <OLED_DrawPoint+0xb0>)
 8001a68:	01d2      	lsls	r2, r2, #7
 8001a6a:	440a      	add	r2, r1
 8001a6c:	4413      	add	r3, r2
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	b25a      	sxtb	r2, r3
 8001a72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a76:	43db      	mvns	r3, r3
 8001a78:	b25b      	sxtb	r3, r3
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	b259      	sxtb	r1, r3
 8001a7e:	7bba      	ldrb	r2, [r7, #14]
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	b2c8      	uxtb	r0, r1
 8001a84:	4906      	ldr	r1, [pc, #24]	; (8001aa0 <OLED_DrawPoint+0xb0>)
 8001a86:	01d2      	lsls	r2, r2, #7
 8001a88:	440a      	add	r2, r1
 8001a8a:	4413      	add	r3, r2
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	701a      	strb	r2, [r3, #0]
 8001a90:	e000      	b.n	8001a94 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 8001a92:	bf00      	nop
}
 8001a94:	3714      	adds	r7, #20
 8001a96:	46bd      	mov	sp, r7
 8001a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9c:	4770      	bx	lr
 8001a9e:	bf00      	nop
 8001aa0:	200008dc 	.word	0x200008dc

08001aa4 <OLED_ShowChar>:
函数功能：在指定的位置显示一个字符
入口参数：坐标:x：0~127，y:0~63 ，mode:0,反白显示;1,正常显示	，size:选择字体 12-16		
返 回 值：无
**************************************************************************/
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{      			    
 8001aa4:	b590      	push	{r4, r7, lr}
 8001aa6:	b085      	sub	sp, #20
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	4604      	mov	r4, r0
 8001aac:	4608      	mov	r0, r1
 8001aae:	4611      	mov	r1, r2
 8001ab0:	461a      	mov	r2, r3
 8001ab2:	4623      	mov	r3, r4
 8001ab4:	71fb      	strb	r3, [r7, #7]
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	71bb      	strb	r3, [r7, #6]
 8001aba:	460b      	mov	r3, r1
 8001abc:	717b      	strb	r3, [r7, #5]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 8001ac2:	79bb      	ldrb	r3, [r7, #6]
 8001ac4:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值				   
 8001ac6:	797b      	ldrb	r3, [r7, #5]
 8001ac8:	3b20      	subs	r3, #32
 8001aca:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001acc:	2300      	movs	r3, #0
 8001ace:	73bb      	strb	r3, [r7, #14]
 8001ad0:	e04d      	b.n	8001b6e <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 8001ad2:	793b      	ldrb	r3, [r7, #4]
 8001ad4:	2b0c      	cmp	r3, #12
 8001ad6:	d10b      	bne.n	8001af0 <OLED_ShowChar+0x4c>
 8001ad8:	797a      	ldrb	r2, [r7, #5]
 8001ada:	7bb9      	ldrb	r1, [r7, #14]
 8001adc:	4828      	ldr	r0, [pc, #160]	; (8001b80 <OLED_ShowChar+0xdc>)
 8001ade:	4613      	mov	r3, r2
 8001ae0:	005b      	lsls	r3, r3, #1
 8001ae2:	4413      	add	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4403      	add	r3, r0
 8001ae8:	440b      	add	r3, r1
 8001aea:	781b      	ldrb	r3, [r3, #0]
 8001aec:	73fb      	strb	r3, [r7, #15]
 8001aee:	e007      	b.n	8001b00 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体 	                          
 8001af0:	797a      	ldrb	r2, [r7, #5]
 8001af2:	7bbb      	ldrb	r3, [r7, #14]
 8001af4:	4923      	ldr	r1, [pc, #140]	; (8001b84 <OLED_ShowChar+0xe0>)
 8001af6:	0112      	lsls	r2, r2, #4
 8001af8:	440a      	add	r2, r1
 8001afa:	4413      	add	r3, r2
 8001afc:	781b      	ldrb	r3, [r3, #0]
 8001afe:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001b00:	2300      	movs	r3, #0
 8001b02:	737b      	strb	r3, [r7, #13]
 8001b04:	e02d      	b.n	8001b62 <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001b06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	da07      	bge.n	8001b1e <OLED_ShowChar+0x7a>
 8001b0e:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001b12:	79b9      	ldrb	r1, [r7, #6]
 8001b14:	79fb      	ldrb	r3, [r7, #7]
 8001b16:	4618      	mov	r0, r3
 8001b18:	f7ff ff6a 	bl	80019f0 <OLED_DrawPoint>
 8001b1c:	e00c      	b.n	8001b38 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001b1e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	bf0c      	ite	eq
 8001b26:	2301      	moveq	r3, #1
 8001b28:	2300      	movne	r3, #0
 8001b2a:	b2db      	uxtb	r3, r3
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	79b9      	ldrb	r1, [r7, #6]
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7ff ff5c 	bl	80019f0 <OLED_DrawPoint>
			temp<<=1;
 8001b38:	7bfb      	ldrb	r3, [r7, #15]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	73fb      	strb	r3, [r7, #15]
			y++;
 8001b3e:	79bb      	ldrb	r3, [r7, #6]
 8001b40:	3301      	adds	r3, #1
 8001b42:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001b44:	79ba      	ldrb	r2, [r7, #6]
 8001b46:	7b3b      	ldrb	r3, [r7, #12]
 8001b48:	1ad2      	subs	r2, r2, r3
 8001b4a:	793b      	ldrb	r3, [r7, #4]
 8001b4c:	429a      	cmp	r2, r3
 8001b4e:	d105      	bne.n	8001b5c <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001b50:	7b3b      	ldrb	r3, [r7, #12]
 8001b52:	71bb      	strb	r3, [r7, #6]
				x++;
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	3301      	adds	r3, #1
 8001b58:	71fb      	strb	r3, [r7, #7]
				break;
 8001b5a:	e005      	b.n	8001b68 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001b5c:	7b7b      	ldrb	r3, [r7, #13]
 8001b5e:	3301      	adds	r3, #1
 8001b60:	737b      	strb	r3, [r7, #13]
 8001b62:	7b7b      	ldrb	r3, [r7, #13]
 8001b64:	2b07      	cmp	r3, #7
 8001b66:	d9ce      	bls.n	8001b06 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001b68:	7bbb      	ldrb	r3, [r7, #14]
 8001b6a:	3301      	adds	r3, #1
 8001b6c:	73bb      	strb	r3, [r7, #14]
 8001b6e:	7bba      	ldrb	r2, [r7, #14]
 8001b70:	793b      	ldrb	r3, [r7, #4]
 8001b72:	429a      	cmp	r2, r3
 8001b74:	d3ad      	bcc.n	8001ad2 <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	3714      	adds	r7, #20
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd90      	pop	{r4, r7, pc}
 8001b80:	08007b28 	.word	0x08007b28
 8001b84:	08007f9c 	.word	0x08007f9c

08001b88 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b085      	sub	sp, #20
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	4603      	mov	r3, r0
 8001b90:	460a      	mov	r2, r1
 8001b92:	71fb      	strb	r3, [r7, #7]
 8001b94:	4613      	mov	r3, r2
 8001b96:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 8001b98:	2301      	movs	r3, #1
 8001b9a:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8001b9c:	e004      	b.n	8001ba8 <oled_pow+0x20>
 8001b9e:	79fa      	ldrb	r2, [r7, #7]
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	fb02 f303 	mul.w	r3, r2, r3
 8001ba6:	60fb      	str	r3, [r7, #12]
 8001ba8:	79bb      	ldrb	r3, [r7, #6]
 8001baa:	1e5a      	subs	r2, r3, #1
 8001bac:	71ba      	strb	r2, [r7, #6]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f5      	bne.n	8001b9e <oled_pow+0x16>
	return result;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
}	
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3714      	adds	r7, #20
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：坐标:x：0~127，y:0~63 ；num:数值(0~4294967295)；mode:0,填充模式 1,叠加模式； size:选择字体 12-16		
返 回 值：无
**************************************************************************/  
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 8001bc0:	b590      	push	{r4, r7, lr}
 8001bc2:	b087      	sub	sp, #28
 8001bc4:	af02      	add	r7, sp, #8
 8001bc6:	603a      	str	r2, [r7, #0]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	4603      	mov	r3, r0
 8001bcc:	71fb      	strb	r3, [r7, #7]
 8001bce:	460b      	mov	r3, r1
 8001bd0:	71bb      	strb	r3, [r7, #6]
 8001bd2:	4613      	mov	r3, r2
 8001bd4:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8001bda:	2300      	movs	r3, #0
 8001bdc:	73fb      	strb	r3, [r7, #15]
 8001bde:	e051      	b.n	8001c84 <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8001be0:	797a      	ldrb	r2, [r7, #5]
 8001be2:	7bfb      	ldrb	r3, [r7, #15]
 8001be4:	1ad3      	subs	r3, r2, r3
 8001be6:	b2db      	uxtb	r3, r3
 8001be8:	3b01      	subs	r3, #1
 8001bea:	b2db      	uxtb	r3, r3
 8001bec:	4619      	mov	r1, r3
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f7ff ffca 	bl	8001b88 <oled_pow>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bfc:	4b26      	ldr	r3, [pc, #152]	; (8001c98 <OLED_ShowNumber+0xd8>)
 8001bfe:	fba3 2301 	umull	r2, r3, r3, r1
 8001c02:	08da      	lsrs	r2, r3, #3
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	005b      	lsls	r3, r3, #1
 8001c0c:	1aca      	subs	r2, r1, r3
 8001c0e:	4613      	mov	r3, r2
 8001c10:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8001c12:	7bbb      	ldrb	r3, [r7, #14]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d11d      	bne.n	8001c54 <OLED_ShowNumber+0x94>
 8001c18:	7bfa      	ldrb	r2, [r7, #15]
 8001c1a:	797b      	ldrb	r3, [r7, #5]
 8001c1c:	3b01      	subs	r3, #1
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	da18      	bge.n	8001c54 <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 8001c22:	7b7b      	ldrb	r3, [r7, #13]
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d113      	bne.n	8001c50 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8001c28:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c2c:	085b      	lsrs	r3, r3, #1
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	fb12 f303 	smulbb	r3, r2, r3
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	79fb      	ldrb	r3, [r7, #7]
 8001c3a:	4413      	add	r3, r2
 8001c3c:	b2d8      	uxtb	r0, r3
 8001c3e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c42:	79b9      	ldrb	r1, [r7, #6]
 8001c44:	2201      	movs	r2, #1
 8001c46:	9200      	str	r2, [sp, #0]
 8001c48:	2220      	movs	r2, #32
 8001c4a:	f7ff ff2b 	bl	8001aa4 <OLED_ShowChar>
				continue;
 8001c4e:	e016      	b.n	8001c7e <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 8001c50:	2301      	movs	r3, #1
 8001c52:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 8001c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c58:	085b      	lsrs	r3, r3, #1
 8001c5a:	b2db      	uxtb	r3, r3
 8001c5c:	7bfa      	ldrb	r2, [r7, #15]
 8001c5e:	fb12 f303 	smulbb	r3, r2, r3
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2d8      	uxtb	r0, r3
 8001c6a:	7b7b      	ldrb	r3, [r7, #13]
 8001c6c:	3330      	adds	r3, #48	; 0x30
 8001c6e:	b2da      	uxtb	r2, r3
 8001c70:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c74:	79b9      	ldrb	r1, [r7, #6]
 8001c76:	2401      	movs	r4, #1
 8001c78:	9400      	str	r4, [sp, #0]
 8001c7a:	f7ff ff13 	bl	8001aa4 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
 8001c80:	3301      	adds	r3, #1
 8001c82:	73fb      	strb	r3, [r7, #15]
 8001c84:	7bfa      	ldrb	r2, [r7, #15]
 8001c86:	797b      	ldrb	r3, [r7, #5]
 8001c88:	429a      	cmp	r2, r3
 8001c8a:	d3a9      	bcc.n	8001be0 <OLED_ShowNumber+0x20>
	}
} 
 8001c8c:	bf00      	nop
 8001c8e:	bf00      	nop
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd90      	pop	{r4, r7, pc}
 8001c96:	bf00      	nop
 8001c98:	cccccccd 	.word	0xcccccccd

08001c9c <OLED_ShowString>:
函数功能：显示字符串
入口参数：坐标:x：0~127，y:0~63 ；*p:字符串起始地址；
返 回 值：无
**************************************************************************/  
void OLED_ShowString(u8 x,u8 y,const char *p)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b084      	sub	sp, #16
 8001ca0:	af02      	add	r7, sp, #8
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	603a      	str	r2, [r7, #0]
 8001ca6:	71fb      	strb	r3, [r7, #7]
 8001ca8:	460b      	mov	r3, r1
 8001caa:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001cac:	e01f      	b.n	8001cee <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001cae:	79fb      	ldrb	r3, [r7, #7]
 8001cb0:	2b7a      	cmp	r3, #122	; 0x7a
 8001cb2:	d904      	bls.n	8001cbe <OLED_ShowString+0x22>
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	71fb      	strb	r3, [r7, #7]
 8001cb8:	79bb      	ldrb	r3, [r7, #6]
 8001cba:	3310      	adds	r3, #16
 8001cbc:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001cbe:	79bb      	ldrb	r3, [r7, #6]
 8001cc0:	2b3a      	cmp	r3, #58	; 0x3a
 8001cc2:	d905      	bls.n	8001cd0 <OLED_ShowString+0x34>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	71fb      	strb	r3, [r7, #7]
 8001cc8:	79fb      	ldrb	r3, [r7, #7]
 8001cca:	71bb      	strb	r3, [r7, #6]
 8001ccc:	f7ff fe68 	bl	80019a0 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	781a      	ldrb	r2, [r3, #0]
 8001cd4:	79b9      	ldrb	r1, [r7, #6]
 8001cd6:	79f8      	ldrb	r0, [r7, #7]
 8001cd8:	2301      	movs	r3, #1
 8001cda:	9300      	str	r3, [sp, #0]
 8001cdc:	230c      	movs	r3, #12
 8001cde:	f7ff fee1 	bl	8001aa4 <OLED_ShowChar>
        x+=8;
 8001ce2:	79fb      	ldrb	r3, [r7, #7]
 8001ce4:	3308      	adds	r3, #8
 8001ce6:	71fb      	strb	r3, [r7, #7]
        p++;
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	3301      	adds	r3, #1
 8001cec:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d1db      	bne.n	8001cae <OLED_ShowString+0x12>
    }  
}	
 8001cf6:	bf00      	nop
 8001cf8:	bf00      	nop
 8001cfa:	3708      	adds	r7, #8
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	bd80      	pop	{r7, pc}

08001d00 <OLED_Init>:
函数功能：初始化OLED
入口参数：无
返 回 值：无
**************************************************************************/ 
void OLED_Init(void)
{ 	 	 
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 8001d06:	2200      	movs	r2, #0
 8001d08:	2140      	movs	r1, #64	; 0x40
 8001d0a:	4851      	ldr	r0, [pc, #324]	; (8001e50 <OLED_Init+0x150>)
 8001d0c:	f002 f9cc 	bl	80040a8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001d10:	2001      	movs	r0, #1
 8001d12:	f001 f8b7 	bl	8002e84 <HAL_Delay>
	OLED_RST_Set();   //OLED复位
 8001d16:	2201      	movs	r2, #1
 8001d18:	2140      	movs	r1, #64	; 0x40
 8001d1a:	484d      	ldr	r0, [pc, #308]	; (8001e50 <OLED_Init+0x150>)
 8001d1c:	f002 f9c4 	bl	80040a8 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 8001d20:	2100      	movs	r1, #0
 8001d22:	20ae      	movs	r0, #174	; 0xae
 8001d24:	f7ff fe12 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8001d28:	2100      	movs	r1, #0
 8001d2a:	20d5      	movs	r0, #213	; 0xd5
 8001d2c:	f7ff fe0e 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 8001d30:	2100      	movs	r1, #0
 8001d32:	2050      	movs	r0, #80	; 0x50
 8001d34:	f7ff fe0a 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8001d38:	2100      	movs	r1, #0
 8001d3a:	20a8      	movs	r0, #168	; 0xa8
 8001d3c:	f7ff fe06 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
 8001d40:	2100      	movs	r1, #0
 8001d42:	203f      	movs	r0, #63	; 0x3f
 8001d44:	f7ff fe02 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8001d48:	2100      	movs	r1, #0
 8001d4a:	20d3      	movs	r0, #211	; 0xd3
 8001d4c:	f7ff fdfe 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 8001d50:	2100      	movs	r1, #0
 8001d52:	2000      	movs	r0, #0
 8001d54:	f7ff fdfa 	bl	800194c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8001d58:	2100      	movs	r1, #0
 8001d5a:	2040      	movs	r0, #64	; 0x40
 8001d5c:	f7ff fdf6 	bl	800194c <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 8001d60:	2100      	movs	r1, #0
 8001d62:	208d      	movs	r0, #141	; 0x8d
 8001d64:	f7ff fdf2 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 8001d68:	2100      	movs	r1, #0
 8001d6a:	2014      	movs	r0, #20
 8001d6c:	f7ff fdee 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 8001d70:	2100      	movs	r1, #0
 8001d72:	2020      	movs	r0, #32
 8001d74:	f7ff fdea 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 8001d78:	2100      	movs	r1, #0
 8001d7a:	2002      	movs	r0, #2
 8001d7c:	f7ff fde6 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 8001d80:	2100      	movs	r1, #0
 8001d82:	20a1      	movs	r0, #161	; 0xa1
 8001d84:	f7ff fde2 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 8001d88:	2100      	movs	r1, #0
 8001d8a:	20c0      	movs	r0, #192	; 0xc0
 8001d8c:	f7ff fdde 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 8001d90:	2100      	movs	r1, #0
 8001d92:	20da      	movs	r0, #218	; 0xda
 8001d94:	f7ff fdda 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 8001d98:	2100      	movs	r1, #0
 8001d9a:	2012      	movs	r0, #18
 8001d9c:	f7ff fdd6 	bl	800194c <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 8001da0:	2100      	movs	r1, #0
 8001da2:	2081      	movs	r0, #129	; 0x81
 8001da4:	f7ff fdd2 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 8001da8:	2100      	movs	r1, #0
 8001daa:	20ef      	movs	r0, #239	; 0xef
 8001dac:	f7ff fdce 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 8001db0:	2100      	movs	r1, #0
 8001db2:	20d9      	movs	r0, #217	; 0xd9
 8001db4:	f7ff fdca 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001db8:	2100      	movs	r1, #0
 8001dba:	20f1      	movs	r0, #241	; 0xf1
 8001dbc:	f7ff fdc6 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	20db      	movs	r0, #219	; 0xdb
 8001dc4:	f7ff fdc2 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001dc8:	2100      	movs	r1, #0
 8001dca:	2030      	movs	r0, #48	; 0x30
 8001dcc:	f7ff fdbe 	bl	800194c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 8001dd0:	2100      	movs	r1, #0
 8001dd2:	20a4      	movs	r0, #164	; 0xa4
 8001dd4:	f7ff fdba 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
 8001dd8:	2100      	movs	r1, #0
 8001dda:	20a6      	movs	r0, #166	; 0xa6
 8001ddc:	f7ff fdb6 	bl	800194c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
 8001de0:	2100      	movs	r1, #0
 8001de2:	20af      	movs	r0, #175	; 0xaf
 8001de4:	f7ff fdb2 	bl	800194c <OLED_WR_Byte>
	OLED_Clear();                //清屏
 8001de8:	f7ff fdda 	bl	80019a0 <OLED_Clear>
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8001dec:	2300      	movs	r3, #0
 8001dee:	71fb      	strb	r3, [r7, #7]
 8001df0:	e026      	b.n	8001e40 <OLED_Init+0x140>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8001df2:	79fb      	ldrb	r3, [r7, #7]
 8001df4:	3b50      	subs	r3, #80	; 0x50
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	2100      	movs	r1, #0
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff fda6 	bl	800194c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8001e00:	2100      	movs	r1, #0
 8001e02:	2000      	movs	r0, #0
 8001e04:	f7ff fda2 	bl	800194c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8001e08:	2100      	movs	r1, #0
 8001e0a:	2010      	movs	r0, #16
 8001e0c:	f7ff fd9e 	bl	800194c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[i][n],OLED_DATA);
 8001e10:	2300      	movs	r3, #0
 8001e12:	71bb      	strb	r3, [r7, #6]
 8001e14:	e00d      	b.n	8001e32 <OLED_Init+0x132>
 8001e16:	79fa      	ldrb	r2, [r7, #7]
 8001e18:	79bb      	ldrb	r3, [r7, #6]
 8001e1a:	490e      	ldr	r1, [pc, #56]	; (8001e54 <OLED_Init+0x154>)
 8001e1c:	01d2      	lsls	r2, r2, #7
 8001e1e:	440a      	add	r2, r1
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2101      	movs	r1, #1
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7ff fd90 	bl	800194c <OLED_WR_Byte>
 8001e2c:	79bb      	ldrb	r3, [r7, #6]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	71bb      	strb	r3, [r7, #6]
 8001e32:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	daed      	bge.n	8001e16 <OLED_Init+0x116>
	for(i=0;i<8;i++)  
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	3301      	adds	r3, #1
 8001e3e:	71fb      	strb	r3, [r7, #7]
 8001e40:	79fb      	ldrb	r3, [r7, #7]
 8001e42:	2b07      	cmp	r3, #7
 8001e44:	d9d5      	bls.n	8001df2 <OLED_Init+0xf2>
	}   
}  
 8001e46:	bf00      	nop
 8001e48:	bf00      	nop
 8001e4a:	3708      	adds	r7, #8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	bd80      	pop	{r7, pc}
 8001e50:	40020400 	.word	0x40020400
 8001e54:	200008dc 	.word	0x200008dc

08001e58 <remoteInit>:
float ch_float[6] = { }; //遥控器通道
//Roll Factor,Pitch Factor,Yaw Factor,Throttle Factor,Forward Factor,Lateral Factor
float conf=0;
float val=0;
void remoteInit(UART_HandleTypeDef *huart)
{
 8001e58:	b580      	push	{r7, lr}
 8001e5a:	b082      	sub	sp, #8
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	68da      	ldr	r2, [r3, #12]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f042 0210 	orr.w	r2, r2, #16
 8001e6e:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8001e70:	2219      	movs	r2, #25
 8001e72:	4904      	ldr	r1, [pc, #16]	; (8001e84 <remoteInit+0x2c>)
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f004 fa6f 	bl	8006358 <HAL_UART_Receive_DMA>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	20000280 	.word	0x20000280

08001e88 <remote>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void remote(uint8_t * remoteBuffer)
{
 8001e88:	b490      	push	{r4, r7}
 8001e8a:	b086      	sub	sp, #24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
	float *dat = (float*)(remoteBuffer+4);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	3304      	adds	r3, #4
 8001e94:	617b      	str	r3, [r7, #20]
	if(remoteBuffer[3]==0x00)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3303      	adds	r3, #3
 8001e9a:	781b      	ldrb	r3, [r3, #0]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d108      	bne.n	8001eb2 <remote+0x2a>
	{
		ch_float[4]=dat[1];
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	4a4b      	ldr	r2, [pc, #300]	; (8001fd4 <remote+0x14c>)
 8001ea6:	6113      	str	r3, [r2, #16]
		ch_float[5]=dat[0];
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	4a49      	ldr	r2, [pc, #292]	; (8001fd4 <remote+0x14c>)
 8001eae:	6153      	str	r3, [r2, #20]
	}else if(remoteBuffer[3]==0x05)
	{
		ch_float[2]=dat[0];
		ch_float[3]=dat[1];
	}
}
 8001eb0:	e08a      	b.n	8001fc8 <remote+0x140>
	}else if(remoteBuffer[3]==0x01)
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	3303      	adds	r3, #3
 8001eb6:	781b      	ldrb	r3, [r3, #0]
 8001eb8:	2b01      	cmp	r3, #1
 8001eba:	d108      	bne.n	8001ece <remote+0x46>
		ch_float[0]=dat[0];
 8001ebc:	697b      	ldr	r3, [r7, #20]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a44      	ldr	r2, [pc, #272]	; (8001fd4 <remote+0x14c>)
 8001ec2:	6013      	str	r3, [r2, #0]
		ch_float[1]=dat[1];
 8001ec4:	697b      	ldr	r3, [r7, #20]
 8001ec6:	685b      	ldr	r3, [r3, #4]
 8001ec8:	4a42      	ldr	r2, [pc, #264]	; (8001fd4 <remote+0x14c>)
 8001eca:	6053      	str	r3, [r2, #4]
}
 8001ecc:	e07c      	b.n	8001fc8 <remote+0x140>
	}else if(remoteBuffer[3]==0x02)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	3303      	adds	r3, #3
 8001ed2:	781b      	ldrb	r3, [r3, #0]
 8001ed4:	2b02      	cmp	r3, #2
 8001ed6:	d106      	bne.n	8001ee6 <remote+0x5e>
		lock = remoteBuffer[7];
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	3307      	adds	r3, #7
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	461a      	mov	r2, r3
 8001ee0:	4b3d      	ldr	r3, [pc, #244]	; (8001fd8 <remote+0x150>)
 8001ee2:	601a      	str	r2, [r3, #0]
}
 8001ee4:	e070      	b.n	8001fc8 <remote+0x140>
	}else if(remoteBuffer[3]==0x03)//通道选择
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	3303      	adds	r3, #3
 8001eea:	781b      	ldrb	r3, [r3, #0]
 8001eec:	2b03      	cmp	r3, #3
 8001eee:	d12e      	bne.n	8001f4e <remote+0xc6>
		conf=dat[0];
 8001ef0:	697b      	ldr	r3, [r7, #20]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a39      	ldr	r2, [pc, #228]	; (8001fdc <remote+0x154>)
 8001ef6:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8001ef8:	4b38      	ldr	r3, [pc, #224]	; (8001fdc <remote+0x154>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f02:	ee17 3a90 	vmov	r3, s15
 8001f06:	60fb      	str	r3, [r7, #12]
		val=pid_ver[i_conf/3][i_conf%3];
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	4a35      	ldr	r2, [pc, #212]	; (8001fe0 <remote+0x158>)
 8001f0c:	fb82 1203 	smull	r1, r2, r2, r3
 8001f10:	17db      	asrs	r3, r3, #31
 8001f12:	1ad0      	subs	r0, r2, r3
 8001f14:	68f9      	ldr	r1, [r7, #12]
 8001f16:	4b32      	ldr	r3, [pc, #200]	; (8001fe0 <remote+0x158>)
 8001f18:	fb83 3201 	smull	r3, r2, r3, r1
 8001f1c:	17cb      	asrs	r3, r1, #31
 8001f1e:	1ad2      	subs	r2, r2, r3
 8001f20:	4613      	mov	r3, r2
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	4413      	add	r3, r2
 8001f26:	1aca      	subs	r2, r1, r3
 8001f28:	492e      	ldr	r1, [pc, #184]	; (8001fe4 <remote+0x15c>)
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	00db      	lsls	r3, r3, #3
 8001f2e:	1a1b      	subs	r3, r3, r0
 8001f30:	4413      	add	r3, r2
 8001f32:	009b      	lsls	r3, r3, #2
 8001f34:	440b      	add	r3, r1
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4a2b      	ldr	r2, [pc, #172]	; (8001fe8 <remote+0x160>)
 8001f3a:	6013      	str	r3, [r2, #0]
		frame.fdata[24]=conf;
 8001f3c:	4b27      	ldr	r3, [pc, #156]	; (8001fdc <remote+0x154>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a2a      	ldr	r2, [pc, #168]	; (8001fec <remote+0x164>)
 8001f42:	6613      	str	r3, [r2, #96]	; 0x60
		frame.fdata[25]=val;
 8001f44:	4b28      	ldr	r3, [pc, #160]	; (8001fe8 <remote+0x160>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4a28      	ldr	r2, [pc, #160]	; (8001fec <remote+0x164>)
 8001f4a:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001f4c:	e03c      	b.n	8001fc8 <remote+0x140>
	}else if(remoteBuffer[3]==0x04)//通道值
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	3303      	adds	r3, #3
 8001f52:	781b      	ldrb	r3, [r3, #0]
 8001f54:	2b04      	cmp	r3, #4
 8001f56:	d12a      	bne.n	8001fae <remote+0x126>
		val=dat[0];
 8001f58:	697b      	ldr	r3, [r7, #20]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a22      	ldr	r2, [pc, #136]	; (8001fe8 <remote+0x160>)
 8001f5e:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8001f60:	4b1e      	ldr	r3, [pc, #120]	; (8001fdc <remote+0x154>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f6a:	ee17 3a90 	vmov	r3, s15
 8001f6e:	613b      	str	r3, [r7, #16]
		pid_ver[i_conf/3][i_conf%3]=val;
 8001f70:	693b      	ldr	r3, [r7, #16]
 8001f72:	4a1b      	ldr	r2, [pc, #108]	; (8001fe0 <remote+0x158>)
 8001f74:	fb82 1203 	smull	r1, r2, r2, r3
 8001f78:	17db      	asrs	r3, r3, #31
 8001f7a:	1ad0      	subs	r0, r2, r3
 8001f7c:	6939      	ldr	r1, [r7, #16]
 8001f7e:	4b18      	ldr	r3, [pc, #96]	; (8001fe0 <remote+0x158>)
 8001f80:	fb83 3201 	smull	r3, r2, r3, r1
 8001f84:	17cb      	asrs	r3, r1, #31
 8001f86:	1ad2      	subs	r2, r2, r3
 8001f88:	4613      	mov	r3, r2
 8001f8a:	005b      	lsls	r3, r3, #1
 8001f8c:	4413      	add	r3, r2
 8001f8e:	1aca      	subs	r2, r1, r3
 8001f90:	4b15      	ldr	r3, [pc, #84]	; (8001fe8 <remote+0x160>)
 8001f92:	6819      	ldr	r1, [r3, #0]
 8001f94:	4c13      	ldr	r4, [pc, #76]	; (8001fe4 <remote+0x15c>)
 8001f96:	4603      	mov	r3, r0
 8001f98:	00db      	lsls	r3, r3, #3
 8001f9a:	1a1b      	subs	r3, r3, r0
 8001f9c:	4413      	add	r3, r2
 8001f9e:	009b      	lsls	r3, r3, #2
 8001fa0:	4423      	add	r3, r4
 8001fa2:	6019      	str	r1, [r3, #0]
		frame.fdata[25]=val;
 8001fa4:	4b10      	ldr	r3, [pc, #64]	; (8001fe8 <remote+0x160>)
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4a10      	ldr	r2, [pc, #64]	; (8001fec <remote+0x164>)
 8001faa:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001fac:	e00c      	b.n	8001fc8 <remote+0x140>
	}else if(remoteBuffer[3]==0x05)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	3303      	adds	r3, #3
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d107      	bne.n	8001fc8 <remote+0x140>
		ch_float[2]=dat[0];
 8001fb8:	697b      	ldr	r3, [r7, #20]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a05      	ldr	r2, [pc, #20]	; (8001fd4 <remote+0x14c>)
 8001fbe:	6093      	str	r3, [r2, #8]
		ch_float[3]=dat[1];
 8001fc0:	697b      	ldr	r3, [r7, #20]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4a03      	ldr	r2, [pc, #12]	; (8001fd4 <remote+0x14c>)
 8001fc6:	60d3      	str	r3, [r2, #12]
}
 8001fc8:	bf00      	nop
 8001fca:	3718      	adds	r7, #24
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bc90      	pop	{r4, r7}
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	200002a0 	.word	0x200002a0
 8001fd8:	2000027c 	.word	0x2000027c
 8001fdc:	200002b8 	.word	0x200002b8
 8001fe0:	55555556 	.word	0x55555556
 8001fe4:	20000000 	.word	0x20000000
 8001fe8:	200002bc 	.word	0x200002bc
 8001fec:	200000a8 	.word	0x200000a8

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	; (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	; (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002004:	6453      	str	r3, [r2, #68]	; 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	; (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	; (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	; (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	; 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	; (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08a      	sub	sp, #40	; 0x28
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 0314 	add.w	r3, r7, #20
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a17      	ldr	r2, [pc, #92]	; (80020bc <HAL_ADC_MspInit+0x7c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d127      	bne.n	80020b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	613b      	str	r3, [r7, #16]
 8002066:	4b16      	ldr	r3, [pc, #88]	; (80020c0 <HAL_ADC_MspInit+0x80>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206a:	4a15      	ldr	r2, [pc, #84]	; (80020c0 <HAL_ADC_MspInit+0x80>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002070:	6453      	str	r3, [r2, #68]	; 0x44
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <HAL_ADC_MspInit+0x80>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002076:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	60fb      	str	r3, [r7, #12]
 8002082:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <HAL_ADC_MspInit+0x80>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002086:	4a0e      	ldr	r2, [pc, #56]	; (80020c0 <HAL_ADC_MspInit+0x80>)
 8002088:	f043 0301 	orr.w	r3, r3, #1
 800208c:	6313      	str	r3, [r2, #48]	; 0x30
 800208e:	4b0c      	ldr	r3, [pc, #48]	; (80020c0 <HAL_ADC_MspInit+0x80>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002092:	f003 0301 	and.w	r3, r3, #1
 8002096:	60fb      	str	r3, [r7, #12]
 8002098:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800209a:	2310      	movs	r3, #16
 800209c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800209e:	2303      	movs	r3, #3
 80020a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a2:	2300      	movs	r3, #0
 80020a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a6:	f107 0314 	add.w	r3, r7, #20
 80020aa:	4619      	mov	r1, r3
 80020ac:	4805      	ldr	r0, [pc, #20]	; (80020c4 <HAL_ADC_MspInit+0x84>)
 80020ae:	f001 fe5f 	bl	8003d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80020b2:	bf00      	nop
 80020b4:	3728      	adds	r7, #40	; 0x28
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
 80020ba:	bf00      	nop
 80020bc:	40012000 	.word	0x40012000
 80020c0:	40023800 	.word	0x40023800
 80020c4:	40020000 	.word	0x40020000

080020c8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b08a      	sub	sp, #40	; 0x28
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d0:	f107 0314 	add.w	r3, r7, #20
 80020d4:	2200      	movs	r2, #0
 80020d6:	601a      	str	r2, [r3, #0]
 80020d8:	605a      	str	r2, [r3, #4]
 80020da:	609a      	str	r2, [r3, #8]
 80020dc:	60da      	str	r2, [r3, #12]
 80020de:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a28      	ldr	r2, [pc, #160]	; (8002188 <HAL_SPI_MspInit+0xc0>)
 80020e6:	4293      	cmp	r3, r2
 80020e8:	d149      	bne.n	800217e <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	613b      	str	r3, [r7, #16]
 80020ee:	4b27      	ldr	r3, [pc, #156]	; (800218c <HAL_SPI_MspInit+0xc4>)
 80020f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f2:	4a26      	ldr	r2, [pc, #152]	; (800218c <HAL_SPI_MspInit+0xc4>)
 80020f4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020f8:	6453      	str	r3, [r2, #68]	; 0x44
 80020fa:	4b24      	ldr	r3, [pc, #144]	; (800218c <HAL_SPI_MspInit+0xc4>)
 80020fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002102:	613b      	str	r3, [r7, #16]
 8002104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002106:	2300      	movs	r3, #0
 8002108:	60fb      	str	r3, [r7, #12]
 800210a:	4b20      	ldr	r3, [pc, #128]	; (800218c <HAL_SPI_MspInit+0xc4>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	4a1f      	ldr	r2, [pc, #124]	; (800218c <HAL_SPI_MspInit+0xc4>)
 8002110:	f043 0301 	orr.w	r3, r3, #1
 8002114:	6313      	str	r3, [r2, #48]	; 0x30
 8002116:	4b1d      	ldr	r3, [pc, #116]	; (800218c <HAL_SPI_MspInit+0xc4>)
 8002118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211a:	f003 0301 	and.w	r3, r3, #1
 800211e:	60fb      	str	r3, [r7, #12]
 8002120:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002122:	2300      	movs	r3, #0
 8002124:	60bb      	str	r3, [r7, #8]
 8002126:	4b19      	ldr	r3, [pc, #100]	; (800218c <HAL_SPI_MspInit+0xc4>)
 8002128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212a:	4a18      	ldr	r2, [pc, #96]	; (800218c <HAL_SPI_MspInit+0xc4>)
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	6313      	str	r3, [r2, #48]	; 0x30
 8002132:	4b16      	ldr	r3, [pc, #88]	; (800218c <HAL_SPI_MspInit+0xc4>)
 8002134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002136:	f003 0302 	and.w	r3, r3, #2
 800213a:	60bb      	str	r3, [r7, #8]
 800213c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800213e:	2320      	movs	r3, #32
 8002140:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002142:	2302      	movs	r3, #2
 8002144:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002146:	2300      	movs	r3, #0
 8002148:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800214a:	2303      	movs	r3, #3
 800214c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800214e:	2305      	movs	r3, #5
 8002150:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002152:	f107 0314 	add.w	r3, r7, #20
 8002156:	4619      	mov	r1, r3
 8002158:	480d      	ldr	r0, [pc, #52]	; (8002190 <HAL_SPI_MspInit+0xc8>)
 800215a:	f001 fe09 	bl	8003d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800215e:	2330      	movs	r3, #48	; 0x30
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002162:	2302      	movs	r3, #2
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800216a:	2303      	movs	r3, #3
 800216c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800216e:	2305      	movs	r3, #5
 8002170:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002172:	f107 0314 	add.w	r3, r7, #20
 8002176:	4619      	mov	r1, r3
 8002178:	4806      	ldr	r0, [pc, #24]	; (8002194 <HAL_SPI_MspInit+0xcc>)
 800217a:	f001 fdf9 	bl	8003d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 800217e:	bf00      	nop
 8002180:	3728      	adds	r7, #40	; 0x28
 8002182:	46bd      	mov	sp, r7
 8002184:	bd80      	pop	{r7, pc}
 8002186:	bf00      	nop
 8002188:	40013000 	.word	0x40013000
 800218c:	40023800 	.word	0x40023800
 8002190:	40020000 	.word	0x40020000
 8002194:	40020400 	.word	0x40020400

08002198 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b088      	sub	sp, #32
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a36      	ldr	r2, [pc, #216]	; (8002280 <HAL_TIM_Base_MspInit+0xe8>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d116      	bne.n	80021d8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
 80021ae:	4b35      	ldr	r3, [pc, #212]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 80021b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021b2:	4a34      	ldr	r2, [pc, #208]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 80021b4:	f043 0301 	orr.w	r3, r3, #1
 80021b8:	6453      	str	r3, [r2, #68]	; 0x44
 80021ba:	4b32      	ldr	r3, [pc, #200]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 80021bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	61fb      	str	r3, [r7, #28]
 80021c4:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 80021c6:	2200      	movs	r2, #0
 80021c8:	2100      	movs	r1, #0
 80021ca:	2019      	movs	r0, #25
 80021cc:	f001 f998 	bl	8003500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021d0:	2019      	movs	r0, #25
 80021d2:	f001 f9b1 	bl	8003538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021d6:	e04e      	b.n	8002276 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021e0:	d10e      	bne.n	8002200 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
 80021e6:	4b27      	ldr	r3, [pc, #156]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ea:	4a26      	ldr	r2, [pc, #152]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 80021ec:	f043 0301 	orr.w	r3, r3, #1
 80021f0:	6413      	str	r3, [r2, #64]	; 0x40
 80021f2:	4b24      	ldr	r3, [pc, #144]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 80021f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f6:	f003 0301 	and.w	r3, r3, #1
 80021fa:	61bb      	str	r3, [r7, #24]
 80021fc:	69bb      	ldr	r3, [r7, #24]
}
 80021fe:	e03a      	b.n	8002276 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	4a20      	ldr	r2, [pc, #128]	; (8002288 <HAL_TIM_Base_MspInit+0xf0>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d10e      	bne.n	8002228 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800220a:	2300      	movs	r3, #0
 800220c:	617b      	str	r3, [r7, #20]
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a1c      	ldr	r2, [pc, #112]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 8002214:	f043 0302 	orr.w	r3, r3, #2
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
 800221a:	4b1a      	ldr	r3, [pc, #104]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 800221c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221e:	f003 0302 	and.w	r3, r3, #2
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	697b      	ldr	r3, [r7, #20]
}
 8002226:	e026      	b.n	8002276 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_TIM_Base_MspInit+0xf4>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d10e      	bne.n	8002250 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002232:	2300      	movs	r3, #0
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	4b13      	ldr	r3, [pc, #76]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4a12      	ldr	r2, [pc, #72]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 800223c:	f043 0304 	orr.w	r3, r3, #4
 8002240:	6413      	str	r3, [r2, #64]	; 0x40
 8002242:	4b10      	ldr	r3, [pc, #64]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f003 0304 	and.w	r3, r3, #4
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	693b      	ldr	r3, [r7, #16]
}
 800224e:	e012      	b.n	8002276 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a0e      	ldr	r2, [pc, #56]	; (8002290 <HAL_TIM_Base_MspInit+0xf8>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d10d      	bne.n	8002276 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800225a:	2300      	movs	r3, #0
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	4b09      	ldr	r3, [pc, #36]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 8002260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002262:	4a08      	ldr	r2, [pc, #32]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 8002264:	f043 0302 	orr.w	r3, r3, #2
 8002268:	6453      	str	r3, [r2, #68]	; 0x44
 800226a:	4b06      	ldr	r3, [pc, #24]	; (8002284 <HAL_TIM_Base_MspInit+0xec>)
 800226c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800226e:	f003 0302 	and.w	r3, r3, #2
 8002272:	60fb      	str	r3, [r7, #12]
 8002274:	68fb      	ldr	r3, [r7, #12]
}
 8002276:	bf00      	nop
 8002278:	3720      	adds	r7, #32
 800227a:	46bd      	mov	sp, r7
 800227c:	bd80      	pop	{r7, pc}
 800227e:	bf00      	nop
 8002280:	40010000 	.word	0x40010000
 8002284:	40023800 	.word	0x40023800
 8002288:	40000400 	.word	0x40000400
 800228c:	40000800 	.word	0x40000800
 8002290:	40010400 	.word	0x40010400

08002294 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b08a      	sub	sp, #40	; 0x28
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229c:	f107 0314 	add.w	r3, r7, #20
 80022a0:	2200      	movs	r2, #0
 80022a2:	601a      	str	r2, [r3, #0]
 80022a4:	605a      	str	r2, [r3, #4]
 80022a6:	609a      	str	r2, [r3, #8]
 80022a8:	60da      	str	r2, [r3, #12]
 80022aa:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM5)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4a23      	ldr	r2, [pc, #140]	; (8002340 <HAL_TIM_PWM_MspInit+0xac>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d12c      	bne.n	8002310 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 80022b6:	2300      	movs	r3, #0
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	4b22      	ldr	r3, [pc, #136]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	4a21      	ldr	r2, [pc, #132]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 80022c0:	f043 0308 	orr.w	r3, r3, #8
 80022c4:	6413      	str	r3, [r2, #64]	; 0x40
 80022c6:	4b1f      	ldr	r3, [pc, #124]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ca:	f003 0308 	and.w	r3, r3, #8
 80022ce:	613b      	str	r3, [r7, #16]
 80022d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	60fb      	str	r3, [r7, #12]
 80022d6:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 80022d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022da:	4a1a      	ldr	r2, [pc, #104]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6313      	str	r3, [r2, #48]	; 0x30
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 80022e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022ee:	2303      	movs	r3, #3
 80022f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f2:	2302      	movs	r3, #2
 80022f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022f6:	2300      	movs	r3, #0
 80022f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022fa:	2300      	movs	r3, #0
 80022fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022fe:	2302      	movs	r3, #2
 8002300:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002302:	f107 0314 	add.w	r3, r7, #20
 8002306:	4619      	mov	r1, r3
 8002308:	480f      	ldr	r0, [pc, #60]	; (8002348 <HAL_TIM_PWM_MspInit+0xb4>)
 800230a:	f001 fd31 	bl	8003d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 800230e:	e012      	b.n	8002336 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM12)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0d      	ldr	r2, [pc, #52]	; (800234c <HAL_TIM_PWM_MspInit+0xb8>)
 8002316:	4293      	cmp	r3, r2
 8002318:	d10d      	bne.n	8002336 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 800231a:	2300      	movs	r3, #0
 800231c:	60bb      	str	r3, [r7, #8]
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 8002320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002322:	4a08      	ldr	r2, [pc, #32]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 8002324:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002328:	6413      	str	r3, [r2, #64]	; 0x40
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <HAL_TIM_PWM_MspInit+0xb0>)
 800232c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800232e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002332:	60bb      	str	r3, [r7, #8]
 8002334:	68bb      	ldr	r3, [r7, #8]
}
 8002336:	bf00      	nop
 8002338:	3728      	adds	r7, #40	; 0x28
 800233a:	46bd      	mov	sp, r7
 800233c:	bd80      	pop	{r7, pc}
 800233e:	bf00      	nop
 8002340:	40000c00 	.word	0x40000c00
 8002344:	40023800 	.word	0x40023800
 8002348:	40020000 	.word	0x40020000
 800234c:	40001800 	.word	0x40001800

08002350 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002350:	b580      	push	{r7, lr}
 8002352:	b08e      	sub	sp, #56	; 0x38
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002358:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800235c:	2200      	movs	r2, #0
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	605a      	str	r2, [r3, #4]
 8002362:	609a      	str	r2, [r3, #8]
 8002364:	60da      	str	r2, [r3, #12]
 8002366:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	4a6a      	ldr	r2, [pc, #424]	; (8002518 <HAL_TIM_MspPostInit+0x1c8>)
 800236e:	4293      	cmp	r3, r2
 8002370:	d13c      	bne.n	80023ec <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	623b      	str	r3, [r7, #32]
 8002376:	4b69      	ldr	r3, [pc, #420]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a68      	ldr	r2, [pc, #416]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b66      	ldr	r3, [pc, #408]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	623b      	str	r3, [r7, #32]
 800238c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	61fb      	str	r3, [r7, #28]
 8002392:	4b62      	ldr	r3, [pc, #392]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a61      	ldr	r2, [pc, #388]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b5f      	ldr	r3, [pc, #380]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fb      	ldr	r3, [r7, #28]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80023aa:	23c0      	movs	r3, #192	; 0xc0
 80023ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ae:	2302      	movs	r3, #2
 80023b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023b2:	2300      	movs	r3, #0
 80023b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b6:	2300      	movs	r3, #0
 80023b8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ba:	2302      	movs	r3, #2
 80023bc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023c2:	4619      	mov	r1, r3
 80023c4:	4856      	ldr	r0, [pc, #344]	; (8002520 <HAL_TIM_MspPostInit+0x1d0>)
 80023c6:	f001 fcd3 	bl	8003d70 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80023ca:	2303      	movs	r3, #3
 80023cc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ce:	2302      	movs	r3, #2
 80023d0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023d2:	2300      	movs	r3, #0
 80023d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023d6:	2300      	movs	r3, #0
 80023d8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023da:	2302      	movs	r3, #2
 80023dc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023e2:	4619      	mov	r1, r3
 80023e4:	484f      	ldr	r0, [pc, #316]	; (8002524 <HAL_TIM_MspPostInit+0x1d4>)
 80023e6:	f001 fcc3 	bl	8003d70 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023ea:	e091      	b.n	8002510 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a4d      	ldr	r2, [pc, #308]	; (8002528 <HAL_TIM_MspPostInit+0x1d8>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d11f      	bne.n	8002436 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023f6:	2300      	movs	r3, #0
 80023f8:	61bb      	str	r3, [r7, #24]
 80023fa:	4b48      	ldr	r3, [pc, #288]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	4a47      	ldr	r2, [pc, #284]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002400:	f043 0308 	orr.w	r3, r3, #8
 8002404:	6313      	str	r3, [r2, #48]	; 0x30
 8002406:	4b45      	ldr	r3, [pc, #276]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	61bb      	str	r3, [r7, #24]
 8002410:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002412:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002416:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002418:	2302      	movs	r3, #2
 800241a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800241c:	2300      	movs	r3, #0
 800241e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002420:	2300      	movs	r3, #0
 8002422:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002424:	2302      	movs	r3, #2
 8002426:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002428:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800242c:	4619      	mov	r1, r3
 800242e:	483f      	ldr	r0, [pc, #252]	; (800252c <HAL_TIM_MspPostInit+0x1dc>)
 8002430:	f001 fc9e 	bl	8003d70 <HAL_GPIO_Init>
}
 8002434:	e06c      	b.n	8002510 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a3d      	ldr	r2, [pc, #244]	; (8002530 <HAL_TIM_MspPostInit+0x1e0>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d11e      	bne.n	800247e <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002440:	2300      	movs	r3, #0
 8002442:	617b      	str	r3, [r7, #20]
 8002444:	4b35      	ldr	r3, [pc, #212]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002446:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002448:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 800244a:	f043 0301 	orr.w	r3, r3, #1
 800244e:	6313      	str	r3, [r2, #48]	; 0x30
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	617b      	str	r3, [r7, #20]
 800245a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800245c:	230c      	movs	r3, #12
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002460:	2302      	movs	r3, #2
 8002462:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002464:	2300      	movs	r3, #0
 8002466:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002468:	2300      	movs	r3, #0
 800246a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800246c:	2302      	movs	r3, #2
 800246e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002470:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002474:	4619      	mov	r1, r3
 8002476:	482a      	ldr	r0, [pc, #168]	; (8002520 <HAL_TIM_MspPostInit+0x1d0>)
 8002478:	f001 fc7a 	bl	8003d70 <HAL_GPIO_Init>
}
 800247c:	e048      	b.n	8002510 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	4a2c      	ldr	r2, [pc, #176]	; (8002534 <HAL_TIM_MspPostInit+0x1e4>)
 8002484:	4293      	cmp	r3, r2
 8002486:	d11f      	bne.n	80024c8 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002488:	2300      	movs	r3, #0
 800248a:	613b      	str	r3, [r7, #16]
 800248c:	4b23      	ldr	r3, [pc, #140]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 800248e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002490:	4a22      	ldr	r2, [pc, #136]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 8002492:	f043 0304 	orr.w	r3, r3, #4
 8002496:	6313      	str	r3, [r2, #48]	; 0x30
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f003 0304 	and.w	r3, r3, #4
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80024a4:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 80024a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80024b6:	2303      	movs	r3, #3
 80024b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024be:	4619      	mov	r1, r3
 80024c0:	481d      	ldr	r0, [pc, #116]	; (8002538 <HAL_TIM_MspPostInit+0x1e8>)
 80024c2:	f001 fc55 	bl	8003d70 <HAL_GPIO_Init>
}
 80024c6:	e023      	b.n	8002510 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_TIM_MspPostInit+0x1ec>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d11e      	bne.n	8002510 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	60fb      	str	r3, [r7, #12]
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	4a10      	ldr	r2, [pc, #64]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6313      	str	r3, [r2, #48]	; 0x30
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <HAL_TIM_MspPostInit+0x1cc>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	60fb      	str	r3, [r7, #12]
 80024ec:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024ee:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024f2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024fc:	2300      	movs	r3, #0
 80024fe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002500:	2309      	movs	r3, #9
 8002502:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <HAL_TIM_MspPostInit+0x1d4>)
 800250c:	f001 fc30 	bl	8003d70 <HAL_GPIO_Init>
}
 8002510:	bf00      	nop
 8002512:	3738      	adds	r7, #56	; 0x38
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40000400 	.word	0x40000400
 800251c:	40023800 	.word	0x40023800
 8002520:	40020000 	.word	0x40020000
 8002524:	40020400 	.word	0x40020400
 8002528:	40000800 	.word	0x40000800
 800252c:	40020c00 	.word	0x40020c00
 8002530:	40000c00 	.word	0x40000c00
 8002534:	40010400 	.word	0x40010400
 8002538:	40020800 	.word	0x40020800
 800253c:	40001800 	.word	0x40001800

08002540 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b092      	sub	sp, #72	; 0x48
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a78      	ldr	r2, [pc, #480]	; (8002740 <HAL_UART_MspInit+0x200>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d164      	bne.n	800262c <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	633b      	str	r3, [r7, #48]	; 0x30
 8002566:	4b77      	ldr	r3, [pc, #476]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800256a:	4a76      	ldr	r2, [pc, #472]	; (8002744 <HAL_UART_MspInit+0x204>)
 800256c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002570:	6413      	str	r3, [r2, #64]	; 0x40
 8002572:	4b74      	ldr	r3, [pc, #464]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800257a:	633b      	str	r3, [r7, #48]	; 0x30
 800257c:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002582:	4b70      	ldr	r3, [pc, #448]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002586:	4a6f      	ldr	r2, [pc, #444]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002588:	f043 0304 	orr.w	r3, r3, #4
 800258c:	6313      	str	r3, [r2, #48]	; 0x30
 800258e:	4b6d      	ldr	r3, [pc, #436]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	f003 0304 	and.w	r3, r3, #4
 8002596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800259a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800259e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025a0:	2302      	movs	r3, #2
 80025a2:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025a4:	2301      	movs	r3, #1
 80025a6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025a8:	2303      	movs	r3, #3
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025ac:	2308      	movs	r3, #8
 80025ae:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025b0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80025b4:	4619      	mov	r1, r3
 80025b6:	4864      	ldr	r0, [pc, #400]	; (8002748 <HAL_UART_MspInit+0x208>)
 80025b8:	f001 fbda 	bl	8003d70 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 80025bc:	4b63      	ldr	r3, [pc, #396]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025be:	4a64      	ldr	r2, [pc, #400]	; (8002750 <HAL_UART_MspInit+0x210>)
 80025c0:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 80025c2:	4b62      	ldr	r3, [pc, #392]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025c4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025c8:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80025ca:	4b60      	ldr	r3, [pc, #384]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80025d0:	4b5e      	ldr	r3, [pc, #376]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 80025d6:	4b5d      	ldr	r3, [pc, #372]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025d8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025dc:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80025de:	4b5b      	ldr	r3, [pc, #364]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025e0:	2200      	movs	r2, #0
 80025e2:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80025e4:	4b59      	ldr	r3, [pc, #356]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025e6:	2200      	movs	r2, #0
 80025e8:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80025ea:	4b58      	ldr	r3, [pc, #352]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025ec:	f44f 7280 	mov.w	r2, #256	; 0x100
 80025f0:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80025f2:	4b56      	ldr	r3, [pc, #344]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80025f8:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_UART_MspInit+0x20c>)
 80025fa:	2200      	movs	r2, #0
 80025fc:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80025fe:	4853      	ldr	r0, [pc, #332]	; (800274c <HAL_UART_MspInit+0x20c>)
 8002600:	f000 ffa8 	bl	8003554 <HAL_DMA_Init>
 8002604:	4603      	mov	r3, r0
 8002606:	2b00      	cmp	r3, #0
 8002608:	d001      	beq.n	800260e <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800260a:	f7ff f837 	bl	800167c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a4e      	ldr	r2, [pc, #312]	; (800274c <HAL_UART_MspInit+0x20c>)
 8002612:	639a      	str	r2, [r3, #56]	; 0x38
 8002614:	4a4d      	ldr	r2, [pc, #308]	; (800274c <HAL_UART_MspInit+0x20c>)
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 800261a:	2200      	movs	r2, #0
 800261c:	2100      	movs	r1, #0
 800261e:	2034      	movs	r0, #52	; 0x34
 8002620:	f000 ff6e 	bl	8003500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002624:	2034      	movs	r0, #52	; 0x34
 8002626:	f000 ff87 	bl	8003538 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800262a:	e1a0      	b.n	800296e <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==UART5)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4a48      	ldr	r2, [pc, #288]	; (8002754 <HAL_UART_MspInit+0x214>)
 8002632:	4293      	cmp	r3, r2
 8002634:	f040 8096 	bne.w	8002764 <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 8002638:	2300      	movs	r3, #0
 800263a:	62bb      	str	r3, [r7, #40]	; 0x28
 800263c:	4b41      	ldr	r3, [pc, #260]	; (8002744 <HAL_UART_MspInit+0x204>)
 800263e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002640:	4a40      	ldr	r2, [pc, #256]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002642:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002646:	6413      	str	r3, [r2, #64]	; 0x40
 8002648:	4b3e      	ldr	r3, [pc, #248]	; (8002744 <HAL_UART_MspInit+0x204>)
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002650:	62bb      	str	r3, [r7, #40]	; 0x28
 8002652:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002654:	2300      	movs	r3, #0
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
 8002658:	4b3a      	ldr	r3, [pc, #232]	; (8002744 <HAL_UART_MspInit+0x204>)
 800265a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800265c:	4a39      	ldr	r2, [pc, #228]	; (8002744 <HAL_UART_MspInit+0x204>)
 800265e:	f043 0304 	orr.w	r3, r3, #4
 8002662:	6313      	str	r3, [r2, #48]	; 0x30
 8002664:	4b37      	ldr	r3, [pc, #220]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002668:	f003 0304 	and.w	r3, r3, #4
 800266c:	627b      	str	r3, [r7, #36]	; 0x24
 800266e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002670:	2300      	movs	r3, #0
 8002672:	623b      	str	r3, [r7, #32]
 8002674:	4b33      	ldr	r3, [pc, #204]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002676:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002678:	4a32      	ldr	r2, [pc, #200]	; (8002744 <HAL_UART_MspInit+0x204>)
 800267a:	f043 0308 	orr.w	r3, r3, #8
 800267e:	6313      	str	r3, [r2, #48]	; 0x30
 8002680:	4b30      	ldr	r3, [pc, #192]	; (8002744 <HAL_UART_MspInit+0x204>)
 8002682:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002684:	f003 0308 	and.w	r3, r3, #8
 8002688:	623b      	str	r3, [r7, #32]
 800268a:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 800268c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002692:	2302      	movs	r3, #2
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002696:	2301      	movs	r3, #1
 8002698:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800269a:	2303      	movs	r3, #3
 800269c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800269e:	2308      	movs	r3, #8
 80026a0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026a2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026a6:	4619      	mov	r1, r3
 80026a8:	4827      	ldr	r0, [pc, #156]	; (8002748 <HAL_UART_MspInit+0x208>)
 80026aa:	f001 fb61 	bl	8003d70 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80026ae:	2304      	movs	r3, #4
 80026b0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b2:	2302      	movs	r3, #2
 80026b4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026ba:	2303      	movs	r3, #3
 80026bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80026be:	2308      	movs	r3, #8
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80026c2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80026c6:	4619      	mov	r1, r3
 80026c8:	4823      	ldr	r0, [pc, #140]	; (8002758 <HAL_UART_MspInit+0x218>)
 80026ca:	f001 fb51 	bl	8003d70 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 80026ce:	4b23      	ldr	r3, [pc, #140]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026d0:	4a23      	ldr	r2, [pc, #140]	; (8002760 <HAL_UART_MspInit+0x220>)
 80026d2:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 80026d4:	4b21      	ldr	r3, [pc, #132]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80026da:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80026dc:	4b1f      	ldr	r3, [pc, #124]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026de:	2200      	movs	r2, #0
 80026e0:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80026e2:	4b1e      	ldr	r3, [pc, #120]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026e4:	2200      	movs	r2, #0
 80026e6:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80026e8:	4b1c      	ldr	r3, [pc, #112]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80026ee:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80026f0:	4b1a      	ldr	r3, [pc, #104]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026f2:	2200      	movs	r2, #0
 80026f4:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026f8:	2200      	movs	r2, #0
 80026fa:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80026fc:	4b17      	ldr	r3, [pc, #92]	; (800275c <HAL_UART_MspInit+0x21c>)
 80026fe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002702:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002704:	4b15      	ldr	r3, [pc, #84]	; (800275c <HAL_UART_MspInit+0x21c>)
 8002706:	2200      	movs	r2, #0
 8002708:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800270a:	4b14      	ldr	r3, [pc, #80]	; (800275c <HAL_UART_MspInit+0x21c>)
 800270c:	2200      	movs	r2, #0
 800270e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002710:	4812      	ldr	r0, [pc, #72]	; (800275c <HAL_UART_MspInit+0x21c>)
 8002712:	f000 ff1f 	bl	8003554 <HAL_DMA_Init>
 8002716:	4603      	mov	r3, r0
 8002718:	2b00      	cmp	r3, #0
 800271a:	d001      	beq.n	8002720 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 800271c:	f7fe ffae 	bl	800167c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4a0e      	ldr	r2, [pc, #56]	; (800275c <HAL_UART_MspInit+0x21c>)
 8002724:	639a      	str	r2, [r3, #56]	; 0x38
 8002726:	4a0d      	ldr	r2, [pc, #52]	; (800275c <HAL_UART_MspInit+0x21c>)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 800272c:	2200      	movs	r2, #0
 800272e:	2100      	movs	r1, #0
 8002730:	2035      	movs	r0, #53	; 0x35
 8002732:	f000 fee5 	bl	8003500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002736:	2035      	movs	r0, #53	; 0x35
 8002738:	f000 fefe 	bl	8003538 <HAL_NVIC_EnableIRQ>
}
 800273c:	e117      	b.n	800296e <HAL_UART_MspInit+0x42e>
 800273e:	bf00      	nop
 8002740:	40004c00 	.word	0x40004c00
 8002744:	40023800 	.word	0x40023800
 8002748:	40020800 	.word	0x40020800
 800274c:	20000350 	.word	0x20000350
 8002750:	40026040 	.word	0x40026040
 8002754:	40005000 	.word	0x40005000
 8002758:	40020c00 	.word	0x40020c00
 800275c:	20000814 	.word	0x20000814
 8002760:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	4a83      	ldr	r2, [pc, #524]	; (8002978 <HAL_UART_MspInit+0x438>)
 800276a:	4293      	cmp	r3, r2
 800276c:	d164      	bne.n	8002838 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	61fb      	str	r3, [r7, #28]
 8002772:	4b82      	ldr	r3, [pc, #520]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002774:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002776:	4a81      	ldr	r2, [pc, #516]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002778:	f043 0310 	orr.w	r3, r3, #16
 800277c:	6453      	str	r3, [r2, #68]	; 0x44
 800277e:	4b7f      	ldr	r3, [pc, #508]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002780:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002782:	f003 0310 	and.w	r3, r3, #16
 8002786:	61fb      	str	r3, [r7, #28]
 8002788:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800278a:	2300      	movs	r3, #0
 800278c:	61bb      	str	r3, [r7, #24]
 800278e:	4b7b      	ldr	r3, [pc, #492]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002792:	4a7a      	ldr	r2, [pc, #488]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002794:	f043 0301 	orr.w	r3, r3, #1
 8002798:	6313      	str	r3, [r2, #48]	; 0x30
 800279a:	4b78      	ldr	r3, [pc, #480]	; (800297c <HAL_UART_MspInit+0x43c>)
 800279c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	61bb      	str	r3, [r7, #24]
 80027a4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027a6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027aa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ac:	2302      	movs	r3, #2
 80027ae:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b0:	2300      	movs	r3, #0
 80027b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b4:	2303      	movs	r3, #3
 80027b6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027b8:	2307      	movs	r3, #7
 80027ba:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027c0:	4619      	mov	r1, r3
 80027c2:	486f      	ldr	r0, [pc, #444]	; (8002980 <HAL_UART_MspInit+0x440>)
 80027c4:	f001 fad4 	bl	8003d70 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 80027c8:	4b6e      	ldr	r3, [pc, #440]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027ca:	4a6f      	ldr	r2, [pc, #444]	; (8002988 <HAL_UART_MspInit+0x448>)
 80027cc:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 80027ce:	4b6d      	ldr	r3, [pc, #436]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027d0:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80027d6:	4b6b      	ldr	r3, [pc, #428]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027d8:	2200      	movs	r2, #0
 80027da:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027dc:	4b69      	ldr	r3, [pc, #420]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027de:	2200      	movs	r2, #0
 80027e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80027e2:	4b68      	ldr	r3, [pc, #416]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027e4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027e8:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ea:	4b66      	ldr	r3, [pc, #408]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027ec:	2200      	movs	r2, #0
 80027ee:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027f0:	4b64      	ldr	r3, [pc, #400]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027f2:	2200      	movs	r2, #0
 80027f4:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80027f6:	4b63      	ldr	r3, [pc, #396]	; (8002984 <HAL_UART_MspInit+0x444>)
 80027f8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027fc:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80027fe:	4b61      	ldr	r3, [pc, #388]	; (8002984 <HAL_UART_MspInit+0x444>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002804:	4b5f      	ldr	r3, [pc, #380]	; (8002984 <HAL_UART_MspInit+0x444>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800280a:	485e      	ldr	r0, [pc, #376]	; (8002984 <HAL_UART_MspInit+0x444>)
 800280c:	f000 fea2 	bl	8003554 <HAL_DMA_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_UART_MspInit+0x2da>
      Error_Handler();
 8002816:	f7fe ff31 	bl	800167c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a59      	ldr	r2, [pc, #356]	; (8002984 <HAL_UART_MspInit+0x444>)
 800281e:	639a      	str	r2, [r3, #56]	; 0x38
 8002820:	4a58      	ldr	r2, [pc, #352]	; (8002984 <HAL_UART_MspInit+0x444>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	2100      	movs	r1, #0
 800282a:	2025      	movs	r0, #37	; 0x25
 800282c:	f000 fe68 	bl	8003500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002830:	2025      	movs	r0, #37	; 0x25
 8002832:	f000 fe81 	bl	8003538 <HAL_NVIC_EnableIRQ>
}
 8002836:	e09a      	b.n	800296e <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==USART2)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a53      	ldr	r2, [pc, #332]	; (800298c <HAL_UART_MspInit+0x44c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d163      	bne.n	800290a <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002842:	2300      	movs	r3, #0
 8002844:	617b      	str	r3, [r7, #20]
 8002846:	4b4d      	ldr	r3, [pc, #308]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002848:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800284a:	4a4c      	ldr	r2, [pc, #304]	; (800297c <HAL_UART_MspInit+0x43c>)
 800284c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002850:	6413      	str	r3, [r2, #64]	; 0x40
 8002852:	4b4a      	ldr	r3, [pc, #296]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800285a:	617b      	str	r3, [r7, #20]
 800285c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800285e:	2300      	movs	r3, #0
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	4b46      	ldr	r3, [pc, #280]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002866:	4a45      	ldr	r2, [pc, #276]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002868:	f043 0308 	orr.w	r3, r3, #8
 800286c:	6313      	str	r3, [r2, #48]	; 0x30
 800286e:	4b43      	ldr	r3, [pc, #268]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002872:	f003 0308 	and.w	r3, r3, #8
 8002876:	613b      	str	r3, [r7, #16]
 8002878:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800287a:	2360      	movs	r3, #96	; 0x60
 800287c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800287e:	2302      	movs	r3, #2
 8002880:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002882:	2300      	movs	r3, #0
 8002884:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002886:	2303      	movs	r3, #3
 8002888:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800288a:	2307      	movs	r3, #7
 800288c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800288e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002892:	4619      	mov	r1, r3
 8002894:	483e      	ldr	r0, [pc, #248]	; (8002990 <HAL_UART_MspInit+0x450>)
 8002896:	f001 fa6b 	bl	8003d70 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <HAL_UART_MspInit+0x454>)
 800289c:	4a3e      	ldr	r2, [pc, #248]	; (8002998 <HAL_UART_MspInit+0x458>)
 800289e:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80028a0:	4b3c      	ldr	r3, [pc, #240]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028a6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80028a8:	4b3a      	ldr	r3, [pc, #232]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028aa:	2200      	movs	r2, #0
 80028ac:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028ae:	4b39      	ldr	r3, [pc, #228]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028b0:	2200      	movs	r2, #0
 80028b2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80028b4:	4b37      	ldr	r3, [pc, #220]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028b6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028ba:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028bc:	4b35      	ldr	r3, [pc, #212]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028be:	2200      	movs	r2, #0
 80028c0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028c4:	2200      	movs	r2, #0
 80028c6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028ca:	f44f 7280 	mov.w	r2, #256	; 0x100
 80028ce:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028d2:	2200      	movs	r2, #0
 80028d4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028d6:	4b2f      	ldr	r3, [pc, #188]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028d8:	2200      	movs	r2, #0
 80028da:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80028dc:	482d      	ldr	r0, [pc, #180]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028de:	f000 fe39 	bl	8003554 <HAL_DMA_Init>
 80028e2:	4603      	mov	r3, r0
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d001      	beq.n	80028ec <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 80028e8:	f7fe fec8 	bl	800167c <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028f0:	639a      	str	r2, [r3, #56]	; 0x38
 80028f2:	4a28      	ldr	r2, [pc, #160]	; (8002994 <HAL_UART_MspInit+0x454>)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80028f8:	2200      	movs	r2, #0
 80028fa:	2100      	movs	r1, #0
 80028fc:	2026      	movs	r0, #38	; 0x26
 80028fe:	f000 fdff 	bl	8003500 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002902:	2026      	movs	r0, #38	; 0x26
 8002904:	f000 fe18 	bl	8003538 <HAL_NVIC_EnableIRQ>
}
 8002908:	e031      	b.n	800296e <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==USART3)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a23      	ldr	r2, [pc, #140]	; (800299c <HAL_UART_MspInit+0x45c>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d12c      	bne.n	800296e <HAL_UART_MspInit+0x42e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002914:	2300      	movs	r3, #0
 8002916:	60fb      	str	r3, [r7, #12]
 8002918:	4b18      	ldr	r3, [pc, #96]	; (800297c <HAL_UART_MspInit+0x43c>)
 800291a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291c:	4a17      	ldr	r2, [pc, #92]	; (800297c <HAL_UART_MspInit+0x43c>)
 800291e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002922:	6413      	str	r3, [r2, #64]	; 0x40
 8002924:	4b15      	ldr	r3, [pc, #84]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800292c:	60fb      	str	r3, [r7, #12]
 800292e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002930:	2300      	movs	r3, #0
 8002932:	60bb      	str	r3, [r7, #8]
 8002934:	4b11      	ldr	r3, [pc, #68]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002938:	4a10      	ldr	r2, [pc, #64]	; (800297c <HAL_UART_MspInit+0x43c>)
 800293a:	f043 0302 	orr.w	r3, r3, #2
 800293e:	6313      	str	r3, [r2, #48]	; 0x30
 8002940:	4b0e      	ldr	r3, [pc, #56]	; (800297c <HAL_UART_MspInit+0x43c>)
 8002942:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002944:	f003 0302 	and.w	r3, r3, #2
 8002948:	60bb      	str	r3, [r7, #8]
 800294a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800294c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002950:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002952:	2302      	movs	r3, #2
 8002954:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002956:	2300      	movs	r3, #0
 8002958:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800295a:	2303      	movs	r3, #3
 800295c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800295e:	2307      	movs	r3, #7
 8002960:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002962:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002966:	4619      	mov	r1, r3
 8002968:	480d      	ldr	r0, [pc, #52]	; (80029a0 <HAL_UART_MspInit+0x460>)
 800296a:	f001 fa01 	bl	8003d70 <HAL_GPIO_Init>
}
 800296e:	bf00      	nop
 8002970:	3748      	adds	r7, #72	; 0x48
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	40011000 	.word	0x40011000
 800297c:	40023800 	.word	0x40023800
 8002980:	40020000 	.word	0x40020000
 8002984:	20000600 	.word	0x20000600
 8002988:	40026440 	.word	0x40026440
 800298c:	40004400 	.word	0x40004400
 8002990:	40020c00 	.word	0x40020c00
 8002994:	200003b0 	.word	0x200003b0
 8002998:	40026088 	.word	0x40026088
 800299c:	40004800 	.word	0x40004800
 80029a0:	40020400 	.word	0x40020400

080029a4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b08c      	sub	sp, #48	; 0x30
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80029ac:	2300      	movs	r3, #0
 80029ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80029b0:	2300      	movs	r3, #0
 80029b2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80029b4:	2200      	movs	r2, #0
 80029b6:	6879      	ldr	r1, [r7, #4]
 80029b8:	2037      	movs	r0, #55	; 0x37
 80029ba:	f000 fda1 	bl	8003500 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80029be:	2037      	movs	r0, #55	; 0x37
 80029c0:	f000 fdba 	bl	8003538 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80029c4:	2300      	movs	r3, #0
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	4b1f      	ldr	r3, [pc, #124]	; (8002a48 <HAL_InitTick+0xa4>)
 80029ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029cc:	4a1e      	ldr	r2, [pc, #120]	; (8002a48 <HAL_InitTick+0xa4>)
 80029ce:	f043 0320 	orr.w	r3, r3, #32
 80029d2:	6413      	str	r3, [r2, #64]	; 0x40
 80029d4:	4b1c      	ldr	r3, [pc, #112]	; (8002a48 <HAL_InitTick+0xa4>)
 80029d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d8:	f003 0320 	and.w	r3, r3, #32
 80029dc:	60fb      	str	r3, [r7, #12]
 80029de:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80029e0:	f107 0210 	add.w	r2, r7, #16
 80029e4:	f107 0314 	add.w	r3, r7, #20
 80029e8:	4611      	mov	r1, r2
 80029ea:	4618      	mov	r0, r3
 80029ec:	f001 ffea 	bl	80049c4 <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 80029f0:	f001 ffc0 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 80029f4:	4603      	mov	r3, r0
 80029f6:	005b      	lsls	r3, r3, #1
 80029f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80029fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029fc:	4a13      	ldr	r2, [pc, #76]	; (8002a4c <HAL_InitTick+0xa8>)
 80029fe:	fba2 2303 	umull	r2, r3, r2, r3
 8002a02:	0c9b      	lsrs	r3, r3, #18
 8002a04:	3b01      	subs	r3, #1
 8002a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002a08:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_InitTick+0xac>)
 8002a0a:	4a12      	ldr	r2, [pc, #72]	; (8002a54 <HAL_InitTick+0xb0>)
 8002a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 8002a0e:	4b10      	ldr	r3, [pc, #64]	; (8002a50 <HAL_InitTick+0xac>)
 8002a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002a14:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002a16:	4a0e      	ldr	r2, [pc, #56]	; (8002a50 <HAL_InitTick+0xac>)
 8002a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a1a:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002a1c:	4b0c      	ldr	r3, [pc, #48]	; (8002a50 <HAL_InitTick+0xac>)
 8002a1e:	2200      	movs	r2, #0
 8002a20:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002a22:	4b0b      	ldr	r3, [pc, #44]	; (8002a50 <HAL_InitTick+0xac>)
 8002a24:	2200      	movs	r2, #0
 8002a26:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002a28:	4809      	ldr	r0, [pc, #36]	; (8002a50 <HAL_InitTick+0xac>)
 8002a2a:	f002 fa8d 	bl	8004f48 <HAL_TIM_Base_Init>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d104      	bne.n	8002a3e <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002a34:	4806      	ldr	r0, [pc, #24]	; (8002a50 <HAL_InitTick+0xac>)
 8002a36:	f002 fb3f 	bl	80050b8 <HAL_TIM_Base_Start_IT>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	e000      	b.n	8002a40 <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
}
 8002a40:	4618      	mov	r0, r3
 8002a42:	3730      	adds	r7, #48	; 0x30
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bd80      	pop	{r7, pc}
 8002a48:	40023800 	.word	0x40023800
 8002a4c:	431bde83 	.word	0x431bde83
 8002a50:	20000cdc 	.word	0x20000cdc
 8002a54:	40001400 	.word	0x40001400

08002a58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a5c:	e7fe      	b.n	8002a5c <NMI_Handler+0x4>

08002a5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a5e:	b480      	push	{r7}
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a62:	e7fe      	b.n	8002a62 <HardFault_Handler+0x4>

08002a64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a68:	e7fe      	b.n	8002a68 <MemManage_Handler+0x4>

08002a6a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a6a:	b480      	push	{r7}
 8002a6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a6e:	e7fe      	b.n	8002a6e <BusFault_Handler+0x4>

08002a70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a70:	b480      	push	{r7}
 8002a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a74:	e7fe      	b.n	8002a74 <UsageFault_Handler+0x4>

08002a76 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a76:	b480      	push	{r7}
 8002a78:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a7a:	bf00      	nop
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr

08002a84 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a92:	b480      	push	{r7}
 8002a94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002aa4:	bf00      	nop
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
	...

08002ab0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002ab4:	4802      	ldr	r0, [pc, #8]	; (8002ac0 <DMA1_Stream0_IRQHandler+0x10>)
 8002ab6:	f000 fee5 	bl	8003884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002aba:	bf00      	nop
 8002abc:	bd80      	pop	{r7, pc}
 8002abe:	bf00      	nop
 8002ac0:	20000814 	.word	0x20000814

08002ac4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <DMA1_Stream2_IRQHandler+0x10>)
 8002aca:	f000 fedb 	bl	8003884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000350 	.word	0x20000350

08002ad8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <DMA1_Stream5_IRQHandler+0x10>)
 8002ade:	f000 fed1 	bl	8003884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200003b0 	.word	0x200003b0

08002aec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002af2:	f002 fc69 	bl	80053c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	200006a4 	.word	0x200006a4

08002b00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b082      	sub	sp, #8
 8002b04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
	extern unsigned char remoteBuffer[32];
	    if(USART1->SR & 0x10)
 8002b06:	4b16      	ldr	r3, [pc, #88]	; (8002b60 <USART1_IRQHandler+0x60>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f003 0310 	and.w	r3, r3, #16
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d01f      	beq.n	8002b52 <USART1_IRQHandler+0x52>
	    {
	        __HAL_UART_CLEAR_IDLEFLAG(&huart1);
 8002b12:	2300      	movs	r3, #0
 8002b14:	607b      	str	r3, [r7, #4]
 8002b16:	4b13      	ldr	r3, [pc, #76]	; (8002b64 <USART1_IRQHandler+0x64>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	4b11      	ldr	r3, [pc, #68]	; (8002b64 <USART1_IRQHandler+0x64>)
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	607b      	str	r3, [r7, #4]
 8002b26:	687b      	ldr	r3, [r7, #4]
	        HAL_UART_AbortReceive(&huart1);
 8002b28:	480e      	ldr	r0, [pc, #56]	; (8002b64 <USART1_IRQHandler+0x64>)
 8002b2a:	f003 fc45 	bl	80063b8 <HAL_UART_AbortReceive>
	        HAL_UART_Receive_DMA(&huart1, remoteBuffer+16, 25);
 8002b2e:	4b0e      	ldr	r3, [pc, #56]	; (8002b68 <USART1_IRQHandler+0x68>)
 8002b30:	2219      	movs	r2, #25
 8002b32:	4619      	mov	r1, r3
 8002b34:	480b      	ldr	r0, [pc, #44]	; (8002b64 <USART1_IRQHandler+0x64>)
 8002b36:	f003 fc0f 	bl	8006358 <HAL_UART_Receive_DMA>
	        if (0x5a == remoteBuffer[16]&&0xa5 == remoteBuffer[17])
 8002b3a:	4b0c      	ldr	r3, [pc, #48]	; (8002b6c <USART1_IRQHandler+0x6c>)
 8002b3c:	7c1b      	ldrb	r3, [r3, #16]
 8002b3e:	2b5a      	cmp	r3, #90	; 0x5a
 8002b40:	d107      	bne.n	8002b52 <USART1_IRQHandler+0x52>
 8002b42:	4b0a      	ldr	r3, [pc, #40]	; (8002b6c <USART1_IRQHandler+0x6c>)
 8002b44:	7c5b      	ldrb	r3, [r3, #17]
 8002b46:	2ba5      	cmp	r3, #165	; 0xa5
 8002b48:	d103      	bne.n	8002b52 <USART1_IRQHandler+0x52>
	        {
	        	void remote(uint8_t * remoteBuffer);

	        	remote(remoteBuffer + 16);
 8002b4a:	4b07      	ldr	r3, [pc, #28]	; (8002b68 <USART1_IRQHandler+0x68>)
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7ff f99b 	bl	8001e88 <remote>
	        }
	    }
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002b52:	4804      	ldr	r0, [pc, #16]	; (8002b64 <USART1_IRQHandler+0x64>)
 8002b54:	f003 fc8c 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002b58:	bf00      	nop
 8002b5a:	3708      	adds	r7, #8
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bd80      	pop	{r7, pc}
 8002b60:	40011000 	.word	0x40011000
 8002b64:	20000660 	.word	0x20000660
 8002b68:	20000290 	.word	0x20000290
 8002b6c:	20000280 	.word	0x20000280

08002b70 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern unsigned char ch110[82];
    if(USART2->SR & 0x10)
 8002b76:	4b12      	ldr	r3, [pc, #72]	; (8002bc0 <USART2_IRQHandler+0x50>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f003 0310 	and.w	r3, r3, #16
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d016      	beq.n	8002bb0 <USART2_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002b82:	2300      	movs	r3, #0
 8002b84:	607b      	str	r3, [r7, #4]
 8002b86:	4b0f      	ldr	r3, [pc, #60]	; (8002bc4 <USART2_IRQHandler+0x54>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	607b      	str	r3, [r7, #4]
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	; (8002bc4 <USART2_IRQHandler+0x54>)
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	607b      	str	r3, [r7, #4]
 8002b96:	687b      	ldr	r3, [r7, #4]
        if(ch110[0] != 0x5a)
 8002b98:	4b0b      	ldr	r3, [pc, #44]	; (8002bc8 <USART2_IRQHandler+0x58>)
 8002b9a:	781b      	ldrb	r3, [r3, #0]
 8002b9c:	2b5a      	cmp	r3, #90	; 0x5a
 8002b9e:	d007      	beq.n	8002bb0 <USART2_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart2);
 8002ba0:	4808      	ldr	r0, [pc, #32]	; (8002bc4 <USART2_IRQHandler+0x54>)
 8002ba2:	f003 fc09 	bl	80063b8 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart2, ch110, 82);
 8002ba6:	2252      	movs	r2, #82	; 0x52
 8002ba8:	4907      	ldr	r1, [pc, #28]	; (8002bc8 <USART2_IRQHandler+0x58>)
 8002baa:	4806      	ldr	r0, [pc, #24]	; (8002bc4 <USART2_IRQHandler+0x54>)
 8002bac:	f003 fbd4 	bl	8006358 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002bb0:	4804      	ldr	r0, [pc, #16]	; (8002bc4 <USART2_IRQHandler+0x54>)
 8002bb2:	f003 fc5d 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	3708      	adds	r7, #8
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40004400 	.word	0x40004400
 8002bc4:	200007d0 	.word	0x200007d0
 8002bc8:	200002f0 	.word	0x200002f0

08002bcc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002bd0:	4802      	ldr	r0, [pc, #8]	; (8002bdc <UART4_IRQHandler+0x10>)
 8002bd2:	f003 fc4d 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002bd6:	bf00      	nop
 8002bd8:	bd80      	pop	{r7, pc}
 8002bda:	bf00      	nop
 8002bdc:	200006ec 	.word	0x200006ec

08002be0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002be0:	b580      	push	{r7, lr}
 8002be2:	b082      	sub	sp, #8
 8002be4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

    extern unsigned char remoteBuffer[32];
    if(UART5->SR & 0x10)
 8002be6:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <UART5_IRQHandler+0x5c>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0310 	and.w	r3, r3, #16
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d01d      	beq.n	8002c2e <UART5_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	607b      	str	r3, [r7, #4]
 8002bf6:	4b12      	ldr	r3, [pc, #72]	; (8002c40 <UART5_IRQHandler+0x60>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	607b      	str	r3, [r7, #4]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <UART5_IRQHandler+0x60>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	685b      	ldr	r3, [r3, #4]
 8002c04:	607b      	str	r3, [r7, #4]
 8002c06:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart5);
 8002c08:	480d      	ldr	r0, [pc, #52]	; (8002c40 <UART5_IRQHandler+0x60>)
 8002c0a:	f003 fbd5 	bl	80063b8 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart5, remoteBuffer, 25);
 8002c0e:	2219      	movs	r2, #25
 8002c10:	490c      	ldr	r1, [pc, #48]	; (8002c44 <UART5_IRQHandler+0x64>)
 8002c12:	480b      	ldr	r0, [pc, #44]	; (8002c40 <UART5_IRQHandler+0x60>)
 8002c14:	f003 fba0 	bl	8006358 <HAL_UART_Receive_DMA>
        if (0x5a == remoteBuffer[0]&&0xa5 == remoteBuffer[1])
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <UART5_IRQHandler+0x64>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	2b5a      	cmp	r3, #90	; 0x5a
 8002c1e:	d106      	bne.n	8002c2e <UART5_IRQHandler+0x4e>
 8002c20:	4b08      	ldr	r3, [pc, #32]	; (8002c44 <UART5_IRQHandler+0x64>)
 8002c22:	785b      	ldrb	r3, [r3, #1]
 8002c24:	2ba5      	cmp	r3, #165	; 0xa5
 8002c26:	d102      	bne.n	8002c2e <UART5_IRQHandler+0x4e>
        {
        	void remote(uint8_t * remoteBuffer);

        	remote(remoteBuffer);
 8002c28:	4806      	ldr	r0, [pc, #24]	; (8002c44 <UART5_IRQHandler+0x64>)
 8002c2a:	f7ff f92d 	bl	8001e88 <remote>
        }
    }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002c2e:	4804      	ldr	r0, [pc, #16]	; (8002c40 <UART5_IRQHandler+0x60>)
 8002c30:	f003 fc1e 	bl	8006470 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	3708      	adds	r7, #8
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40005000 	.word	0x40005000
 8002c40:	20000574 	.word	0x20000574
 8002c44:	20000280 	.word	0x20000280

08002c48 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002c4c:	4802      	ldr	r0, [pc, #8]	; (8002c58 <TIM7_IRQHandler+0x10>)
 8002c4e:	f002 fbbb 	bl	80053c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002c52:	bf00      	nop
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	20000cdc 	.word	0x20000cdc

08002c5c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <DMA2_Stream2_IRQHandler+0x10>)
 8002c62:	f000 fe0f 	bl	8003884 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	20000600 	.word	0x20000600

08002c70 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b086      	sub	sp, #24
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c7c:	2300      	movs	r3, #0
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	e00a      	b.n	8002c98 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c82:	f3af 8000 	nop.w
 8002c86:	4601      	mov	r1, r0
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	1c5a      	adds	r2, r3, #1
 8002c8c:	60ba      	str	r2, [r7, #8]
 8002c8e:	b2ca      	uxtb	r2, r1
 8002c90:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c92:	697b      	ldr	r3, [r7, #20]
 8002c94:	3301      	adds	r3, #1
 8002c96:	617b      	str	r3, [r7, #20]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	429a      	cmp	r2, r3
 8002c9e:	dbf0      	blt.n	8002c82 <_read+0x12>
	}

return len;
 8002ca0:	687b      	ldr	r3, [r7, #4]
}
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	3718      	adds	r7, #24
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}

08002caa <_close>:
	}
	return len;
}

int _close(int file)
{
 8002caa:	b480      	push	{r7}
 8002cac:	b083      	sub	sp, #12
 8002cae:	af00      	add	r7, sp, #0
 8002cb0:	6078      	str	r0, [r7, #4]
	return -1;
 8002cb2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	370c      	adds	r7, #12
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc0:	4770      	bx	lr

08002cc2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cc2:	b480      	push	{r7}
 8002cc4:	b083      	sub	sp, #12
 8002cc6:	af00      	add	r7, sp, #0
 8002cc8:	6078      	str	r0, [r7, #4]
 8002cca:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ccc:	683b      	ldr	r3, [r7, #0]
 8002cce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cd2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cd4:	2300      	movs	r3, #0
}
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	370c      	adds	r7, #12
 8002cda:	46bd      	mov	sp, r7
 8002cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce0:	4770      	bx	lr

08002ce2 <_isatty>:

int _isatty(int file)
{
 8002ce2:	b480      	push	{r7}
 8002ce4:	b083      	sub	sp, #12
 8002ce6:	af00      	add	r7, sp, #0
 8002ce8:	6078      	str	r0, [r7, #4]
	return 1;
 8002cea:	2301      	movs	r3, #1
}
 8002cec:	4618      	mov	r0, r3
 8002cee:	370c      	adds	r7, #12
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf6:	4770      	bx	lr

08002cf8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	60f8      	str	r0, [r7, #12]
 8002d00:	60b9      	str	r1, [r7, #8]
 8002d02:	607a      	str	r2, [r7, #4]
	return 0;
 8002d04:	2300      	movs	r3, #0
}
 8002d06:	4618      	mov	r0, r3
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
	...

08002d14 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b086      	sub	sp, #24
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d1c:	4a14      	ldr	r2, [pc, #80]	; (8002d70 <_sbrk+0x5c>)
 8002d1e:	4b15      	ldr	r3, [pc, #84]	; (8002d74 <_sbrk+0x60>)
 8002d20:	1ad3      	subs	r3, r2, r3
 8002d22:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d24:	697b      	ldr	r3, [r7, #20]
 8002d26:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d28:	4b13      	ldr	r3, [pc, #76]	; (8002d78 <_sbrk+0x64>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d102      	bne.n	8002d36 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d30:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <_sbrk+0x64>)
 8002d32:	4a12      	ldr	r2, [pc, #72]	; (8002d7c <_sbrk+0x68>)
 8002d34:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d36:	4b10      	ldr	r3, [pc, #64]	; (8002d78 <_sbrk+0x64>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	4413      	add	r3, r2
 8002d3e:	693a      	ldr	r2, [r7, #16]
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d207      	bcs.n	8002d54 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d44:	f004 f9dc 	bl	8007100 <__errno>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	220c      	movs	r2, #12
 8002d4c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d4e:	f04f 33ff 	mov.w	r3, #4294967295
 8002d52:	e009      	b.n	8002d68 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <_sbrk+0x64>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d5a:	4b07      	ldr	r3, [pc, #28]	; (8002d78 <_sbrk+0x64>)
 8002d5c:	681a      	ldr	r2, [r3, #0]
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4413      	add	r3, r2
 8002d62:	4a05      	ldr	r2, [pc, #20]	; (8002d78 <_sbrk+0x64>)
 8002d64:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d66:	68fb      	ldr	r3, [r7, #12]
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	20020000 	.word	0x20020000
 8002d74:	00000400 	.word	0x00000400
 8002d78:	200002c0 	.word	0x200002c0
 8002d7c:	20000d38 	.word	0x20000d38

08002d80 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d84:	4b08      	ldr	r3, [pc, #32]	; (8002da8 <SystemInit+0x28>)
 8002d86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d8a:	4a07      	ldr	r2, [pc, #28]	; (8002da8 <SystemInit+0x28>)
 8002d8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002d90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002d94:	4b04      	ldr	r3, [pc, #16]	; (8002da8 <SystemInit+0x28>)
 8002d96:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d9a:	609a      	str	r2, [r3, #8]
#endif
}
 8002d9c:	bf00      	nop
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr
 8002da6:	bf00      	nop
 8002da8:	e000ed00 	.word	0xe000ed00

08002dac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002dac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002de4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002db0:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002db2:	e003      	b.n	8002dbc <LoopCopyDataInit>

08002db4 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002db4:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002db6:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002db8:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002dba:	3104      	adds	r1, #4

08002dbc <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002dbc:	480b      	ldr	r0, [pc, #44]	; (8002dec <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002dbe:	4b0c      	ldr	r3, [pc, #48]	; (8002df0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002dc0:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002dc2:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002dc4:	d3f6      	bcc.n	8002db4 <CopyDataInit>
  ldr  r2, =_sbss
 8002dc6:	4a0b      	ldr	r2, [pc, #44]	; (8002df4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002dc8:	e002      	b.n	8002dd0 <LoopFillZerobss>

08002dca <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002dca:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002dcc:	f842 3b04 	str.w	r3, [r2], #4

08002dd0 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002dd0:	4b09      	ldr	r3, [pc, #36]	; (8002df8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002dd2:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002dd4:	d3f9      	bcc.n	8002dca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002dd6:	f7ff ffd3 	bl	8002d80 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002dda:	f004 f997 	bl	800710c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002dde:	f7fd fd6d 	bl	80008bc <main>
  bx  lr    
 8002de2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002de4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002de8:	08008620 	.word	0x08008620
  ldr  r0, =_sdata
 8002dec:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002df0:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8002df4:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8002df8:	20000d38 	.word	0x20000d38

08002dfc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002dfc:	e7fe      	b.n	8002dfc <ADC_IRQHandler>
	...

08002e00 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e00:	b580      	push	{r7, lr}
 8002e02:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e04:	4b0e      	ldr	r3, [pc, #56]	; (8002e40 <HAL_Init+0x40>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	4a0d      	ldr	r2, [pc, #52]	; (8002e40 <HAL_Init+0x40>)
 8002e0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e0e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e10:	4b0b      	ldr	r3, [pc, #44]	; (8002e40 <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0a      	ldr	r2, [pc, #40]	; (8002e40 <HAL_Init+0x40>)
 8002e16:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e1c:	4b08      	ldr	r3, [pc, #32]	; (8002e40 <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a07      	ldr	r2, [pc, #28]	; (8002e40 <HAL_Init+0x40>)
 8002e22:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e28:	2003      	movs	r0, #3
 8002e2a:	f000 fb5e 	bl	80034ea <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e2e:	2000      	movs	r0, #0
 8002e30:	f7ff fdb8 	bl	80029a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e34:	f7ff f8dc 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	bd80      	pop	{r7, pc}
 8002e3e:	bf00      	nop
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e44:	b480      	push	{r7}
 8002e46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e48:	4b06      	ldr	r3, [pc, #24]	; (8002e64 <HAL_IncTick+0x20>)
 8002e4a:	781b      	ldrb	r3, [r3, #0]
 8002e4c:	461a      	mov	r2, r3
 8002e4e:	4b06      	ldr	r3, [pc, #24]	; (8002e68 <HAL_IncTick+0x24>)
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4413      	add	r3, r2
 8002e54:	4a04      	ldr	r2, [pc, #16]	; (8002e68 <HAL_IncTick+0x24>)
 8002e56:	6013      	str	r3, [r2, #0]
}
 8002e58:	bf00      	nop
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr
 8002e62:	bf00      	nop
 8002e64:	200001dc 	.word	0x200001dc
 8002e68:	20000d24 	.word	0x20000d24

08002e6c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	af00      	add	r7, sp, #0
  return uwTick;
 8002e70:	4b03      	ldr	r3, [pc, #12]	; (8002e80 <HAL_GetTick+0x14>)
 8002e72:	681b      	ldr	r3, [r3, #0]
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	46bd      	mov	sp, r7
 8002e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e7c:	4770      	bx	lr
 8002e7e:	bf00      	nop
 8002e80:	20000d24 	.word	0x20000d24

08002e84 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b084      	sub	sp, #16
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e8c:	f7ff ffee 	bl	8002e6c <HAL_GetTick>
 8002e90:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e9c:	d005      	beq.n	8002eaa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <HAL_Delay+0x44>)
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	461a      	mov	r2, r3
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	4413      	add	r3, r2
 8002ea8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002eaa:	bf00      	nop
 8002eac:	f7ff ffde 	bl	8002e6c <HAL_GetTick>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	1ad3      	subs	r3, r2, r3
 8002eb6:	68fa      	ldr	r2, [r7, #12]
 8002eb8:	429a      	cmp	r2, r3
 8002eba:	d8f7      	bhi.n	8002eac <HAL_Delay+0x28>
  {
  }
}
 8002ebc:	bf00      	nop
 8002ebe:	bf00      	nop
 8002ec0:	3710      	adds	r7, #16
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	bd80      	pop	{r7, pc}
 8002ec6:	bf00      	nop
 8002ec8:	200001dc 	.word	0x200001dc

08002ecc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b084      	sub	sp, #16
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e033      	b.n	8002f4a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d109      	bne.n	8002efe <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	f7ff f8a8 	bl	8002040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	2200      	movs	r2, #0
 8002ef4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f02:	f003 0310 	and.w	r3, r3, #16
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d118      	bne.n	8002f3c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f0e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f12:	f023 0302 	bic.w	r3, r3, #2
 8002f16:	f043 0202 	orr.w	r2, r3, #2
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f1e:	6878      	ldr	r0, [r7, #4]
 8002f20:	f000 f93a 	bl	8003198 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2200      	movs	r2, #0
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2e:	f023 0303 	bic.w	r3, r3, #3
 8002f32:	f043 0201 	orr.w	r2, r3, #1
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	641a      	str	r2, [r3, #64]	; 0x40
 8002f3a:	e001      	b.n	8002f40 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002f48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	3710      	adds	r7, #16
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
	...

08002f54 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002f54:	b480      	push	{r7}
 8002f56:	b085      	sub	sp, #20
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
 8002f5c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002f68:	2b01      	cmp	r3, #1
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_ConfigChannel+0x1c>
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	e105      	b.n	800317c <HAL_ADC_ConfigChannel+0x228>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2201      	movs	r2, #1
 8002f74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	2b09      	cmp	r3, #9
 8002f7e:	d925      	bls.n	8002fcc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68d9      	ldr	r1, [r3, #12]
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	b29b      	uxth	r3, r3
 8002f8c:	461a      	mov	r2, r3
 8002f8e:	4613      	mov	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	4413      	add	r3, r2
 8002f94:	3b1e      	subs	r3, #30
 8002f96:	2207      	movs	r2, #7
 8002f98:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9c:	43da      	mvns	r2, r3
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	400a      	ands	r2, r1
 8002fa4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	68d9      	ldr	r1, [r3, #12]
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	683b      	ldr	r3, [r7, #0]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	b29b      	uxth	r3, r3
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	4603      	mov	r3, r0
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4403      	add	r3, r0
 8002fbe:	3b1e      	subs	r3, #30
 8002fc0:	409a      	lsls	r2, r3
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	430a      	orrs	r2, r1
 8002fc8:	60da      	str	r2, [r3, #12]
 8002fca:	e022      	b.n	8003012 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	6919      	ldr	r1, [r3, #16]
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	b29b      	uxth	r3, r3
 8002fd8:	461a      	mov	r2, r3
 8002fda:	4613      	mov	r3, r2
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	4413      	add	r3, r2
 8002fe0:	2207      	movs	r2, #7
 8002fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe6:	43da      	mvns	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	400a      	ands	r2, r1
 8002fee:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	4618      	mov	r0, r3
 8003002:	4603      	mov	r3, r0
 8003004:	005b      	lsls	r3, r3, #1
 8003006:	4403      	add	r3, r0
 8003008:	409a      	lsls	r2, r3
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	430a      	orrs	r2, r1
 8003010:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003012:	683b      	ldr	r3, [r7, #0]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	2b06      	cmp	r3, #6
 8003018:	d824      	bhi.n	8003064 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	685a      	ldr	r2, [r3, #4]
 8003024:	4613      	mov	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	4413      	add	r3, r2
 800302a:	3b05      	subs	r3, #5
 800302c:	221f      	movs	r2, #31
 800302e:	fa02 f303 	lsl.w	r3, r2, r3
 8003032:	43da      	mvns	r2, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	400a      	ands	r2, r1
 800303a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	b29b      	uxth	r3, r3
 8003048:	4618      	mov	r0, r3
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	685a      	ldr	r2, [r3, #4]
 800304e:	4613      	mov	r3, r2
 8003050:	009b      	lsls	r3, r3, #2
 8003052:	4413      	add	r3, r2
 8003054:	3b05      	subs	r3, #5
 8003056:	fa00 f203 	lsl.w	r2, r0, r3
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	430a      	orrs	r2, r1
 8003060:	635a      	str	r2, [r3, #52]	; 0x34
 8003062:	e04c      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003064:	683b      	ldr	r3, [r7, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	2b0c      	cmp	r3, #12
 800306a:	d824      	bhi.n	80030b6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	4613      	mov	r3, r2
 8003078:	009b      	lsls	r3, r3, #2
 800307a:	4413      	add	r3, r2
 800307c:	3b23      	subs	r3, #35	; 0x23
 800307e:	221f      	movs	r2, #31
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	43da      	mvns	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	400a      	ands	r2, r1
 800308c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	b29b      	uxth	r3, r3
 800309a:	4618      	mov	r0, r3
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	4613      	mov	r3, r2
 80030a2:	009b      	lsls	r3, r3, #2
 80030a4:	4413      	add	r3, r2
 80030a6:	3b23      	subs	r3, #35	; 0x23
 80030a8:	fa00 f203 	lsl.w	r2, r0, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	430a      	orrs	r2, r1
 80030b2:	631a      	str	r2, [r3, #48]	; 0x30
 80030b4:	e023      	b.n	80030fe <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030bc:	683b      	ldr	r3, [r7, #0]
 80030be:	685a      	ldr	r2, [r3, #4]
 80030c0:	4613      	mov	r3, r2
 80030c2:	009b      	lsls	r3, r3, #2
 80030c4:	4413      	add	r3, r2
 80030c6:	3b41      	subs	r3, #65	; 0x41
 80030c8:	221f      	movs	r2, #31
 80030ca:	fa02 f303 	lsl.w	r3, r2, r3
 80030ce:	43da      	mvns	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	400a      	ands	r2, r1
 80030d6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	b29b      	uxth	r3, r3
 80030e4:	4618      	mov	r0, r3
 80030e6:	683b      	ldr	r3, [r7, #0]
 80030e8:	685a      	ldr	r2, [r3, #4]
 80030ea:	4613      	mov	r3, r2
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	4413      	add	r3, r2
 80030f0:	3b41      	subs	r3, #65	; 0x41
 80030f2:	fa00 f203 	lsl.w	r2, r0, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	430a      	orrs	r2, r1
 80030fc:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80030fe:	4b22      	ldr	r3, [pc, #136]	; (8003188 <HAL_ADC_ConfigChannel+0x234>)
 8003100:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	4a21      	ldr	r2, [pc, #132]	; (800318c <HAL_ADC_ConfigChannel+0x238>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d109      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1cc>
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	2b12      	cmp	r3, #18
 8003112:	d105      	bne.n	8003120 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4a19      	ldr	r2, [pc, #100]	; (800318c <HAL_ADC_ConfigChannel+0x238>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d123      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	2b10      	cmp	r3, #16
 8003130:	d003      	beq.n	800313a <HAL_ADC_ConfigChannel+0x1e6>
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2b11      	cmp	r3, #17
 8003138:	d11b      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003146:	683b      	ldr	r3, [r7, #0]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b10      	cmp	r3, #16
 800314c:	d111      	bne.n	8003172 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <HAL_ADC_ConfigChannel+0x23c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_ADC_ConfigChannel+0x240>)
 8003154:	fba2 2303 	umull	r2, r3, r2, r3
 8003158:	0c9a      	lsrs	r2, r3, #18
 800315a:	4613      	mov	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	4413      	add	r3, r2
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003164:	e002      	b.n	800316c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003166:	68bb      	ldr	r3, [r7, #8]
 8003168:	3b01      	subs	r3, #1
 800316a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	2b00      	cmp	r3, #0
 8003170:	d1f9      	bne.n	8003166 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	2200      	movs	r2, #0
 8003176:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800317a:	2300      	movs	r3, #0
}
 800317c:	4618      	mov	r0, r3
 800317e:	3714      	adds	r7, #20
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr
 8003188:	40012300 	.word	0x40012300
 800318c:	40012000 	.word	0x40012000
 8003190:	200001d4 	.word	0x200001d4
 8003194:	431bde83 	.word	0x431bde83

08003198 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003198:	b480      	push	{r7}
 800319a:	b085      	sub	sp, #20
 800319c:	af00      	add	r7, sp, #0
 800319e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80031a0:	4b79      	ldr	r3, [pc, #484]	; (8003388 <ADC_Init+0x1f0>)
 80031a2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	431a      	orrs	r2, r3
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	685a      	ldr	r2, [r3, #4]
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80031cc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	021a      	lsls	r2, r3, #8
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	430a      	orrs	r2, r1
 80031e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	685a      	ldr	r2, [r3, #4]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80031f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	6859      	ldr	r1, [r3, #4]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689a      	ldr	r2, [r3, #8]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	430a      	orrs	r2, r1
 8003202:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003212:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	6899      	ldr	r1, [r3, #8]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68da      	ldr	r2, [r3, #12]
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	430a      	orrs	r2, r1
 8003224:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800322a:	4a58      	ldr	r2, [pc, #352]	; (800338c <ADC_Init+0x1f4>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d022      	beq.n	8003276 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689a      	ldr	r2, [r3, #8]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800323e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6899      	ldr	r1, [r3, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	430a      	orrs	r2, r1
 8003250:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003260:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	6899      	ldr	r1, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	430a      	orrs	r2, r1
 8003272:	609a      	str	r2, [r3, #8]
 8003274:	e00f      	b.n	8003296 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	689a      	ldr	r2, [r3, #8]
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003284:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	689a      	ldr	r2, [r3, #8]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003294:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689a      	ldr	r2, [r3, #8]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0202 	bic.w	r2, r2, #2
 80032a4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	6899      	ldr	r1, [r3, #8]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	7e1b      	ldrb	r3, [r3, #24]
 80032b0:	005a      	lsls	r2, r3, #1
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	430a      	orrs	r2, r1
 80032b8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d01b      	beq.n	80032fc <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	685a      	ldr	r2, [r3, #4]
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032d2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	685a      	ldr	r2, [r3, #4]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80032e2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ee:	3b01      	subs	r3, #1
 80032f0:	035a      	lsls	r2, r3, #13
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	430a      	orrs	r2, r1
 80032f8:	605a      	str	r2, [r3, #4]
 80032fa:	e007      	b.n	800330c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	685a      	ldr	r2, [r3, #4]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800330a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800331a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	3b01      	subs	r3, #1
 8003328:	051a      	lsls	r2, r3, #20
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	430a      	orrs	r2, r1
 8003330:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689a      	ldr	r2, [r3, #8]
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003340:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6899      	ldr	r1, [r3, #8]
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800334e:	025a      	lsls	r2, r3, #9
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	430a      	orrs	r2, r1
 8003356:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	689a      	ldr	r2, [r3, #8]
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003366:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	6899      	ldr	r1, [r3, #8]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	695b      	ldr	r3, [r3, #20]
 8003372:	029a      	lsls	r2, r3, #10
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	430a      	orrs	r2, r1
 800337a:	609a      	str	r2, [r3, #8]
}
 800337c:	bf00      	nop
 800337e:	3714      	adds	r7, #20
 8003380:	46bd      	mov	sp, r7
 8003382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003386:	4770      	bx	lr
 8003388:	40012300 	.word	0x40012300
 800338c:	0f000001 	.word	0x0f000001

08003390 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003390:	b480      	push	{r7}
 8003392:	b085      	sub	sp, #20
 8003394:	af00      	add	r7, sp, #0
 8003396:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f003 0307 	and.w	r3, r3, #7
 800339e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80033a0:	4b0c      	ldr	r3, [pc, #48]	; (80033d4 <__NVIC_SetPriorityGrouping+0x44>)
 80033a2:	68db      	ldr	r3, [r3, #12]
 80033a4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80033a6:	68ba      	ldr	r2, [r7, #8]
 80033a8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80033ac:	4013      	ands	r3, r2
 80033ae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80033b8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80033c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80033c2:	4a04      	ldr	r2, [pc, #16]	; (80033d4 <__NVIC_SetPriorityGrouping+0x44>)
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	60d3      	str	r3, [r2, #12]
}
 80033c8:	bf00      	nop
 80033ca:	3714      	adds	r7, #20
 80033cc:	46bd      	mov	sp, r7
 80033ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d2:	4770      	bx	lr
 80033d4:	e000ed00 	.word	0xe000ed00

080033d8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80033d8:	b480      	push	{r7}
 80033da:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80033dc:	4b04      	ldr	r3, [pc, #16]	; (80033f0 <__NVIC_GetPriorityGrouping+0x18>)
 80033de:	68db      	ldr	r3, [r3, #12]
 80033e0:	0a1b      	lsrs	r3, r3, #8
 80033e2:	f003 0307 	and.w	r3, r3, #7
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	e000ed00 	.word	0xe000ed00

080033f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033f4:	b480      	push	{r7}
 80033f6:	b083      	sub	sp, #12
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	4603      	mov	r3, r0
 80033fc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003402:	2b00      	cmp	r3, #0
 8003404:	db0b      	blt.n	800341e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003406:	79fb      	ldrb	r3, [r7, #7]
 8003408:	f003 021f 	and.w	r2, r3, #31
 800340c:	4907      	ldr	r1, [pc, #28]	; (800342c <__NVIC_EnableIRQ+0x38>)
 800340e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003412:	095b      	lsrs	r3, r3, #5
 8003414:	2001      	movs	r0, #1
 8003416:	fa00 f202 	lsl.w	r2, r0, r2
 800341a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
 800342a:	bf00      	nop
 800342c:	e000e100 	.word	0xe000e100

08003430 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003430:	b480      	push	{r7}
 8003432:	b083      	sub	sp, #12
 8003434:	af00      	add	r7, sp, #0
 8003436:	4603      	mov	r3, r0
 8003438:	6039      	str	r1, [r7, #0]
 800343a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800343c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003440:	2b00      	cmp	r3, #0
 8003442:	db0a      	blt.n	800345a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003444:	683b      	ldr	r3, [r7, #0]
 8003446:	b2da      	uxtb	r2, r3
 8003448:	490c      	ldr	r1, [pc, #48]	; (800347c <__NVIC_SetPriority+0x4c>)
 800344a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800344e:	0112      	lsls	r2, r2, #4
 8003450:	b2d2      	uxtb	r2, r2
 8003452:	440b      	add	r3, r1
 8003454:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003458:	e00a      	b.n	8003470 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	b2da      	uxtb	r2, r3
 800345e:	4908      	ldr	r1, [pc, #32]	; (8003480 <__NVIC_SetPriority+0x50>)
 8003460:	79fb      	ldrb	r3, [r7, #7]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	3b04      	subs	r3, #4
 8003468:	0112      	lsls	r2, r2, #4
 800346a:	b2d2      	uxtb	r2, r2
 800346c:	440b      	add	r3, r1
 800346e:	761a      	strb	r2, [r3, #24]
}
 8003470:	bf00      	nop
 8003472:	370c      	adds	r7, #12
 8003474:	46bd      	mov	sp, r7
 8003476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800347a:	4770      	bx	lr
 800347c:	e000e100 	.word	0xe000e100
 8003480:	e000ed00 	.word	0xe000ed00

08003484 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003484:	b480      	push	{r7}
 8003486:	b089      	sub	sp, #36	; 0x24
 8003488:	af00      	add	r7, sp, #0
 800348a:	60f8      	str	r0, [r7, #12]
 800348c:	60b9      	str	r1, [r7, #8]
 800348e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	f003 0307 	and.w	r3, r3, #7
 8003496:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003498:	69fb      	ldr	r3, [r7, #28]
 800349a:	f1c3 0307 	rsb	r3, r3, #7
 800349e:	2b04      	cmp	r3, #4
 80034a0:	bf28      	it	cs
 80034a2:	2304      	movcs	r3, #4
 80034a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	3304      	adds	r3, #4
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d902      	bls.n	80034b4 <NVIC_EncodePriority+0x30>
 80034ae:	69fb      	ldr	r3, [r7, #28]
 80034b0:	3b03      	subs	r3, #3
 80034b2:	e000      	b.n	80034b6 <NVIC_EncodePriority+0x32>
 80034b4:	2300      	movs	r3, #0
 80034b6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034b8:	f04f 32ff 	mov.w	r2, #4294967295
 80034bc:	69bb      	ldr	r3, [r7, #24]
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43da      	mvns	r2, r3
 80034c4:	68bb      	ldr	r3, [r7, #8]
 80034c6:	401a      	ands	r2, r3
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80034cc:	f04f 31ff 	mov.w	r1, #4294967295
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	fa01 f303 	lsl.w	r3, r1, r3
 80034d6:	43d9      	mvns	r1, r3
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80034dc:	4313      	orrs	r3, r2
         );
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3724      	adds	r7, #36	; 0x24
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b082      	sub	sp, #8
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f7ff ff4c 	bl	8003390 <__NVIC_SetPriorityGrouping>
}
 80034f8:	bf00      	nop
 80034fa:	3708      	adds	r7, #8
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003500:	b580      	push	{r7, lr}
 8003502:	b086      	sub	sp, #24
 8003504:	af00      	add	r7, sp, #0
 8003506:	4603      	mov	r3, r0
 8003508:	60b9      	str	r1, [r7, #8]
 800350a:	607a      	str	r2, [r7, #4]
 800350c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800350e:	2300      	movs	r3, #0
 8003510:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003512:	f7ff ff61 	bl	80033d8 <__NVIC_GetPriorityGrouping>
 8003516:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	68b9      	ldr	r1, [r7, #8]
 800351c:	6978      	ldr	r0, [r7, #20]
 800351e:	f7ff ffb1 	bl	8003484 <NVIC_EncodePriority>
 8003522:	4602      	mov	r2, r0
 8003524:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003528:	4611      	mov	r1, r2
 800352a:	4618      	mov	r0, r3
 800352c:	f7ff ff80 	bl	8003430 <__NVIC_SetPriority>
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}

08003538 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003542:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003546:	4618      	mov	r0, r3
 8003548:	f7ff ff54 	bl	80033f4 <__NVIC_EnableIRQ>
}
 800354c:	bf00      	nop
 800354e:	3708      	adds	r7, #8
 8003550:	46bd      	mov	sp, r7
 8003552:	bd80      	pop	{r7, pc}

08003554 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b086      	sub	sp, #24
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800355c:	2300      	movs	r3, #0
 800355e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003560:	f7ff fc84 	bl	8002e6c <HAL_GetTick>
 8003564:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800356c:	2301      	movs	r3, #1
 800356e:	e099      	b.n	80036a4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2200      	movs	r2, #0
 8003574:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	681a      	ldr	r2, [r3, #0]
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f022 0201 	bic.w	r2, r2, #1
 800358e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003590:	e00f      	b.n	80035b2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003592:	f7ff fc6b 	bl	8002e6c <HAL_GetTick>
 8003596:	4602      	mov	r2, r0
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	1ad3      	subs	r3, r2, r3
 800359c:	2b05      	cmp	r3, #5
 800359e:	d908      	bls.n	80035b2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2220      	movs	r2, #32
 80035a4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	2203      	movs	r2, #3
 80035aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e078      	b.n	80036a4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d1e8      	bne.n	8003592 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80035c8:	697a      	ldr	r2, [r7, #20]
 80035ca:	4b38      	ldr	r3, [pc, #224]	; (80036ac <HAL_DMA_Init+0x158>)
 80035cc:	4013      	ands	r3, r2
 80035ce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685a      	ldr	r2, [r3, #4]
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	689b      	ldr	r3, [r3, #8]
 80035d8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035de:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	691b      	ldr	r3, [r3, #16]
 80035e4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80035ea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80035f6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6a1b      	ldr	r3, [r3, #32]
 80035fc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80035fe:	697a      	ldr	r2, [r7, #20]
 8003600:	4313      	orrs	r3, r2
 8003602:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003608:	2b04      	cmp	r3, #4
 800360a:	d107      	bne.n	800361c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003614:	4313      	orrs	r3, r2
 8003616:	697a      	ldr	r2, [r7, #20]
 8003618:	4313      	orrs	r3, r2
 800361a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	697a      	ldr	r2, [r7, #20]
 8003622:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	695b      	ldr	r3, [r3, #20]
 800362a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f023 0307 	bic.w	r3, r3, #7
 8003632:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003638:	697a      	ldr	r2, [r7, #20]
 800363a:	4313      	orrs	r3, r2
 800363c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003642:	2b04      	cmp	r3, #4
 8003644:	d117      	bne.n	8003676 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	4313      	orrs	r3, r2
 800364e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d00e      	beq.n	8003676 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003658:	6878      	ldr	r0, [r7, #4]
 800365a:	f000 fb0d 	bl	8003c78 <DMA_CheckFifoParam>
 800365e:	4603      	mov	r3, r0
 8003660:	2b00      	cmp	r3, #0
 8003662:	d008      	beq.n	8003676 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2240      	movs	r2, #64	; 0x40
 8003668:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2201      	movs	r2, #1
 800366e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003672:	2301      	movs	r3, #1
 8003674:	e016      	b.n	80036a4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	697a      	ldr	r2, [r7, #20]
 800367c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800367e:	6878      	ldr	r0, [r7, #4]
 8003680:	f000 fac4 	bl	8003c0c <DMA_CalcBaseAndBitshift>
 8003684:	4603      	mov	r3, r0
 8003686:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800368c:	223f      	movs	r2, #63	; 0x3f
 800368e:	409a      	lsls	r2, r3
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2200      	movs	r2, #0
 8003698:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2201      	movs	r2, #1
 800369e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80036a2:	2300      	movs	r3, #0
}
 80036a4:	4618      	mov	r0, r3
 80036a6:	3718      	adds	r7, #24
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	f010803f 	.word	0xf010803f

080036b0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b086      	sub	sp, #24
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	60f8      	str	r0, [r7, #12]
 80036b8:	60b9      	str	r1, [r7, #8]
 80036ba:	607a      	str	r2, [r7, #4]
 80036bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036c6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d101      	bne.n	80036d6 <HAL_DMA_Start_IT+0x26>
 80036d2:	2302      	movs	r3, #2
 80036d4:	e040      	b.n	8003758 <HAL_DMA_Start_IT+0xa8>
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2201      	movs	r2, #1
 80036da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d12f      	bne.n	800374a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	2202      	movs	r2, #2
 80036ee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2200      	movs	r2, #0
 80036f6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	687a      	ldr	r2, [r7, #4]
 80036fc:	68b9      	ldr	r1, [r7, #8]
 80036fe:	68f8      	ldr	r0, [r7, #12]
 8003700:	f000 fa56 	bl	8003bb0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003708:	223f      	movs	r2, #63	; 0x3f
 800370a:	409a      	lsls	r2, r3
 800370c:	693b      	ldr	r3, [r7, #16]
 800370e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	681a      	ldr	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	f042 0216 	orr.w	r2, r2, #22
 800371e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003724:	2b00      	cmp	r3, #0
 8003726:	d007      	beq.n	8003738 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	681a      	ldr	r2, [r3, #0]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f042 0208 	orr.w	r2, r2, #8
 8003736:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003738:	68fb      	ldr	r3, [r7, #12]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	f042 0201 	orr.w	r2, r2, #1
 8003746:	601a      	str	r2, [r3, #0]
 8003748:	e005      	b.n	8003756 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2200      	movs	r2, #0
 800374e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003752:	2302      	movs	r3, #2
 8003754:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800376c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800376e:	f7ff fb7d 	bl	8002e6c <HAL_GetTick>
 8003772:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800377a:	b2db      	uxtb	r3, r3
 800377c:	2b02      	cmp	r3, #2
 800377e:	d008      	beq.n	8003792 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2280      	movs	r2, #128	; 0x80
 8003784:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800378e:	2301      	movs	r3, #1
 8003790:	e052      	b.n	8003838 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	681a      	ldr	r2, [r3, #0]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f022 0216 	bic.w	r2, r2, #22
 80037a0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	695a      	ldr	r2, [r3, #20]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80037b0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d103      	bne.n	80037c2 <HAL_DMA_Abort+0x62>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d007      	beq.n	80037d2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	681a      	ldr	r2, [r3, #0]
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f022 0208 	bic.w	r2, r2, #8
 80037d0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0201 	bic.w	r2, r2, #1
 80037e0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80037e2:	e013      	b.n	800380c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80037e4:	f7ff fb42 	bl	8002e6c <HAL_GetTick>
 80037e8:	4602      	mov	r2, r0
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	1ad3      	subs	r3, r2, r3
 80037ee:	2b05      	cmp	r3, #5
 80037f0:	d90c      	bls.n	800380c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	2220      	movs	r2, #32
 80037f6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2203      	movs	r2, #3
 8003804:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003808:	2303      	movs	r3, #3
 800380a:	e015      	b.n	8003838 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	d1e4      	bne.n	80037e4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381e:	223f      	movs	r2, #63	; 0x3f
 8003820:	409a      	lsls	r2, r3
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2200      	movs	r2, #0
 800382a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2201      	movs	r2, #1
 8003832:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3710      	adds	r7, #16
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003840:	b480      	push	{r7}
 8003842:	b083      	sub	sp, #12
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800384e:	b2db      	uxtb	r3, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d004      	beq.n	800385e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2280      	movs	r2, #128	; 0x80
 8003858:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800385a:	2301      	movs	r3, #1
 800385c:	e00c      	b.n	8003878 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	2205      	movs	r2, #5
 8003862:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	681a      	ldr	r2, [r3, #0]
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f022 0201 	bic.w	r2, r2, #1
 8003874:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b086      	sub	sp, #24
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003890:	4b92      	ldr	r3, [pc, #584]	; (8003adc <HAL_DMA_IRQHandler+0x258>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a92      	ldr	r2, [pc, #584]	; (8003ae0 <HAL_DMA_IRQHandler+0x25c>)
 8003896:	fba2 2303 	umull	r2, r3, r2, r3
 800389a:	0a9b      	lsrs	r3, r3, #10
 800389c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80038a4:	693b      	ldr	r3, [r7, #16]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ae:	2208      	movs	r2, #8
 80038b0:	409a      	lsls	r2, r3
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	4013      	ands	r3, r2
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d01a      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f003 0304 	and.w	r3, r3, #4
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d013      	beq.n	80038f0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681a      	ldr	r2, [r3, #0]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f022 0204 	bic.w	r2, r2, #4
 80038d6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038dc:	2208      	movs	r2, #8
 80038de:	409a      	lsls	r2, r3
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80038e8:	f043 0201 	orr.w	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038f4:	2201      	movs	r2, #1
 80038f6:	409a      	lsls	r2, r3
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4013      	ands	r3, r2
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d012      	beq.n	8003926 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	695b      	ldr	r3, [r3, #20]
 8003906:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800390a:	2b00      	cmp	r3, #0
 800390c:	d00b      	beq.n	8003926 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003912:	2201      	movs	r2, #1
 8003914:	409a      	lsls	r2, r3
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391e:	f043 0202 	orr.w	r2, r3, #2
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800392a:	2204      	movs	r2, #4
 800392c:	409a      	lsls	r2, r3
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	4013      	ands	r3, r2
 8003932:	2b00      	cmp	r3, #0
 8003934:	d012      	beq.n	800395c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	2b00      	cmp	r3, #0
 8003942:	d00b      	beq.n	800395c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003948:	2204      	movs	r2, #4
 800394a:	409a      	lsls	r2, r3
 800394c:	693b      	ldr	r3, [r7, #16]
 800394e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003954:	f043 0204 	orr.w	r2, r3, #4
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003960:	2210      	movs	r2, #16
 8003962:	409a      	lsls	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4013      	ands	r3, r2
 8003968:	2b00      	cmp	r3, #0
 800396a:	d043      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	f003 0308 	and.w	r3, r3, #8
 8003976:	2b00      	cmp	r3, #0
 8003978:	d03c      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800397e:	2210      	movs	r2, #16
 8003980:	409a      	lsls	r2, r3
 8003982:	693b      	ldr	r3, [r7, #16]
 8003984:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d018      	beq.n	80039c6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d108      	bne.n	80039b4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d024      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
 80039b2:	e01f      	b.n	80039f4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d01b      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c0:	6878      	ldr	r0, [r7, #4]
 80039c2:	4798      	blx	r3
 80039c4:	e016      	b.n	80039f4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d107      	bne.n	80039e4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	681a      	ldr	r2, [r3, #0]
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f022 0208 	bic.w	r2, r2, #8
 80039e2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d003      	beq.n	80039f4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039f8:	2220      	movs	r2, #32
 80039fa:	409a      	lsls	r2, r3
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	4013      	ands	r3, r2
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	f000 808e 	beq.w	8003b22 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f003 0310 	and.w	r3, r3, #16
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	f000 8086 	beq.w	8003b22 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	409a      	lsls	r2, r3
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a28:	b2db      	uxtb	r3, r3
 8003a2a:	2b05      	cmp	r3, #5
 8003a2c:	d136      	bne.n	8003a9c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 0216 	bic.w	r2, r2, #22
 8003a3c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	695a      	ldr	r2, [r3, #20]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003a4c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d103      	bne.n	8003a5e <HAL_DMA_IRQHandler+0x1da>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d007      	beq.n	8003a6e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	681a      	ldr	r2, [r3, #0]
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f022 0208 	bic.w	r2, r2, #8
 8003a6c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	223f      	movs	r2, #63	; 0x3f
 8003a74:	409a      	lsls	r2, r3
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d07d      	beq.n	8003b8e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003a96:	6878      	ldr	r0, [r7, #4]
 8003a98:	4798      	blx	r3
        }
        return;
 8003a9a:	e078      	b.n	8003b8e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	681b      	ldr	r3, [r3, #0]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d01c      	beq.n	8003ae4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d108      	bne.n	8003aca <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d030      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	4798      	blx	r3
 8003ac8:	e02b      	b.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d027      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	4798      	blx	r3
 8003ada:	e022      	b.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
 8003adc:	200001d4 	.word	0x200001d4
 8003ae0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d10f      	bne.n	8003b12 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	681a      	ldr	r2, [r3, #0]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f022 0210 	bic.w	r2, r2, #16
 8003b00:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	2200      	movs	r2, #0
 8003b06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d003      	beq.n	8003b22 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d032      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b2e:	f003 0301 	and.w	r3, r3, #1
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d022      	beq.n	8003b7c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2205      	movs	r2, #5
 8003b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0201 	bic.w	r2, r2, #1
 8003b4c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	3301      	adds	r3, #1
 8003b52:	60bb      	str	r3, [r7, #8]
 8003b54:	697a      	ldr	r2, [r7, #20]
 8003b56:	429a      	cmp	r2, r3
 8003b58:	d307      	bcc.n	8003b6a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f003 0301 	and.w	r3, r3, #1
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1f2      	bne.n	8003b4e <HAL_DMA_IRQHandler+0x2ca>
 8003b68:	e000      	b.n	8003b6c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003b6a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2201      	movs	r2, #1
 8003b78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d005      	beq.n	8003b90 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	4798      	blx	r3
 8003b8c:	e000      	b.n	8003b90 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003b8e:	bf00      	nop
    }
  }
}
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop

08003b98 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
 8003bbc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	681a      	ldr	r2, [r3, #0]
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003bcc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	683a      	ldr	r2, [r7, #0]
 8003bd4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	689b      	ldr	r3, [r3, #8]
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d108      	bne.n	8003bf0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	687a      	ldr	r2, [r7, #4]
 8003be4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	68ba      	ldr	r2, [r7, #8]
 8003bec:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003bee:	e007      	b.n	8003c00 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68ba      	ldr	r2, [r7, #8]
 8003bf6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	687a      	ldr	r2, [r7, #4]
 8003bfe:	60da      	str	r2, [r3, #12]
}
 8003c00:	bf00      	nop
 8003c02:	3714      	adds	r7, #20
 8003c04:	46bd      	mov	sp, r7
 8003c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0a:	4770      	bx	lr

08003c0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	3b10      	subs	r3, #16
 8003c1c:	4a14      	ldr	r2, [pc, #80]	; (8003c70 <DMA_CalcBaseAndBitshift+0x64>)
 8003c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8003c22:	091b      	lsrs	r3, r3, #4
 8003c24:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003c26:	4a13      	ldr	r2, [pc, #76]	; (8003c74 <DMA_CalcBaseAndBitshift+0x68>)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	781b      	ldrb	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	2b03      	cmp	r3, #3
 8003c38:	d909      	bls.n	8003c4e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	1d1a      	adds	r2, r3, #4
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	659a      	str	r2, [r3, #88]	; 0x58
 8003c4c:	e007      	b.n	8003c5e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003c56:	f023 0303 	bic.w	r3, r3, #3
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003c62:	4618      	mov	r0, r3
 8003c64:	3714      	adds	r7, #20
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	aaaaaaab 	.word	0xaaaaaaab
 8003c74:	080085a4 	.word	0x080085a4

08003c78 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b085      	sub	sp, #20
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c80:	2300      	movs	r3, #0
 8003c82:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	699b      	ldr	r3, [r3, #24]
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d11f      	bne.n	8003cd2 <DMA_CheckFifoParam+0x5a>
 8003c92:	68bb      	ldr	r3, [r7, #8]
 8003c94:	2b03      	cmp	r3, #3
 8003c96:	d856      	bhi.n	8003d46 <DMA_CheckFifoParam+0xce>
 8003c98:	a201      	add	r2, pc, #4	; (adr r2, 8003ca0 <DMA_CheckFifoParam+0x28>)
 8003c9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c9e:	bf00      	nop
 8003ca0:	08003cb1 	.word	0x08003cb1
 8003ca4:	08003cc3 	.word	0x08003cc3
 8003ca8:	08003cb1 	.word	0x08003cb1
 8003cac:	08003d47 	.word	0x08003d47
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d046      	beq.n	8003d4a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cc0:	e043      	b.n	8003d4a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cc6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003cca:	d140      	bne.n	8003d4e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003ccc:	2301      	movs	r3, #1
 8003cce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003cd0:	e03d      	b.n	8003d4e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	699b      	ldr	r3, [r3, #24]
 8003cd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003cda:	d121      	bne.n	8003d20 <DMA_CheckFifoParam+0xa8>
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	2b03      	cmp	r3, #3
 8003ce0:	d837      	bhi.n	8003d52 <DMA_CheckFifoParam+0xda>
 8003ce2:	a201      	add	r2, pc, #4	; (adr r2, 8003ce8 <DMA_CheckFifoParam+0x70>)
 8003ce4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce8:	08003cf9 	.word	0x08003cf9
 8003cec:	08003cff 	.word	0x08003cff
 8003cf0:	08003cf9 	.word	0x08003cf9
 8003cf4:	08003d11 	.word	0x08003d11
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	73fb      	strb	r3, [r7, #15]
      break;
 8003cfc:	e030      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d02:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d025      	beq.n	8003d56 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003d0a:	2301      	movs	r3, #1
 8003d0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003d0e:	e022      	b.n	8003d56 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d14:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003d18:	d11f      	bne.n	8003d5a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003d1e:	e01c      	b.n	8003d5a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	2b02      	cmp	r3, #2
 8003d24:	d903      	bls.n	8003d2e <DMA_CheckFifoParam+0xb6>
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	2b03      	cmp	r3, #3
 8003d2a:	d003      	beq.n	8003d34 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003d2c:	e018      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	73fb      	strb	r3, [r7, #15]
      break;
 8003d32:	e015      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d38:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d00e      	beq.n	8003d5e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	73fb      	strb	r3, [r7, #15]
      break;
 8003d44:	e00b      	b.n	8003d5e <DMA_CheckFifoParam+0xe6>
      break;
 8003d46:	bf00      	nop
 8003d48:	e00a      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4a:	bf00      	nop
 8003d4c:	e008      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      break;
 8003d4e:	bf00      	nop
 8003d50:	e006      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      break;
 8003d52:	bf00      	nop
 8003d54:	e004      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      break;
 8003d56:	bf00      	nop
 8003d58:	e002      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      break;   
 8003d5a:	bf00      	nop
 8003d5c:	e000      	b.n	8003d60 <DMA_CheckFifoParam+0xe8>
      break;
 8003d5e:	bf00      	nop
    }
  } 
  
  return status; 
 8003d60:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d62:	4618      	mov	r0, r3
 8003d64:	3714      	adds	r7, #20
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop

08003d70 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b089      	sub	sp, #36	; 0x24
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
 8003d78:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003d7e:	2300      	movs	r3, #0
 8003d80:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003d82:	2300      	movs	r3, #0
 8003d84:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003d86:	2300      	movs	r3, #0
 8003d88:	61fb      	str	r3, [r7, #28]
 8003d8a:	e16b      	b.n	8004064 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003d8c:	2201      	movs	r2, #1
 8003d8e:	69fb      	ldr	r3, [r7, #28]
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	4013      	ands	r3, r2
 8003d9e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003da0:	693a      	ldr	r2, [r7, #16]
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	f040 815a 	bne.w	800405e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f003 0303 	and.w	r3, r3, #3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d005      	beq.n	8003dc2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	685b      	ldr	r3, [r3, #4]
 8003dba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003dbe:	2b02      	cmp	r3, #2
 8003dc0:	d130      	bne.n	8003e24 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	2203      	movs	r2, #3
 8003dce:	fa02 f303 	lsl.w	r3, r2, r3
 8003dd2:	43db      	mvns	r3, r3
 8003dd4:	69ba      	ldr	r2, [r7, #24]
 8003dd6:	4013      	ands	r3, r2
 8003dd8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	68da      	ldr	r2, [r3, #12]
 8003dde:	69fb      	ldr	r3, [r7, #28]
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	fa02 f303 	lsl.w	r3, r2, r3
 8003de6:	69ba      	ldr	r2, [r7, #24]
 8003de8:	4313      	orrs	r3, r2
 8003dea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	69ba      	ldr	r2, [r7, #24]
 8003df0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003df8:	2201      	movs	r2, #1
 8003dfa:	69fb      	ldr	r3, [r7, #28]
 8003dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8003e00:	43db      	mvns	r3, r3
 8003e02:	69ba      	ldr	r2, [r7, #24]
 8003e04:	4013      	ands	r3, r2
 8003e06:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	091b      	lsrs	r3, r3, #4
 8003e0e:	f003 0201 	and.w	r2, r3, #1
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	fa02 f303 	lsl.w	r3, r2, r3
 8003e18:	69ba      	ldr	r2, [r7, #24]
 8003e1a:	4313      	orrs	r3, r2
 8003e1c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	685b      	ldr	r3, [r3, #4]
 8003e28:	f003 0303 	and.w	r3, r3, #3
 8003e2c:	2b03      	cmp	r3, #3
 8003e2e:	d017      	beq.n	8003e60 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	68db      	ldr	r3, [r3, #12]
 8003e34:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	2203      	movs	r2, #3
 8003e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003e40:	43db      	mvns	r3, r3
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	4013      	ands	r3, r2
 8003e46:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003e48:	683b      	ldr	r3, [r7, #0]
 8003e4a:	689a      	ldr	r2, [r3, #8]
 8003e4c:	69fb      	ldr	r3, [r7, #28]
 8003e4e:	005b      	lsls	r3, r3, #1
 8003e50:	fa02 f303 	lsl.w	r3, r2, r3
 8003e54:	69ba      	ldr	r2, [r7, #24]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69ba      	ldr	r2, [r7, #24]
 8003e5e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f003 0303 	and.w	r3, r3, #3
 8003e68:	2b02      	cmp	r3, #2
 8003e6a:	d123      	bne.n	8003eb4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003e6c:	69fb      	ldr	r3, [r7, #28]
 8003e6e:	08da      	lsrs	r2, r3, #3
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3208      	adds	r2, #8
 8003e74:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003e78:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	f003 0307 	and.w	r3, r3, #7
 8003e80:	009b      	lsls	r3, r3, #2
 8003e82:	220f      	movs	r2, #15
 8003e84:	fa02 f303 	lsl.w	r3, r2, r3
 8003e88:	43db      	mvns	r3, r3
 8003e8a:	69ba      	ldr	r2, [r7, #24]
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	691a      	ldr	r2, [r3, #16]
 8003e94:	69fb      	ldr	r3, [r7, #28]
 8003e96:	f003 0307 	and.w	r3, r3, #7
 8003e9a:	009b      	lsls	r3, r3, #2
 8003e9c:	fa02 f303 	lsl.w	r3, r2, r3
 8003ea0:	69ba      	ldr	r2, [r7, #24]
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	08da      	lsrs	r2, r3, #3
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	3208      	adds	r2, #8
 8003eae:	69b9      	ldr	r1, [r7, #24]
 8003eb0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003eba:	69fb      	ldr	r3, [r7, #28]
 8003ebc:	005b      	lsls	r3, r3, #1
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	43db      	mvns	r3, r3
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4013      	ands	r3, r2
 8003eca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f003 0203 	and.w	r2, r3, #3
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	005b      	lsls	r3, r3, #1
 8003ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8003edc:	69ba      	ldr	r2, [r7, #24]
 8003ede:	4313      	orrs	r3, r2
 8003ee0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	685b      	ldr	r3, [r3, #4]
 8003eec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	f000 80b4 	beq.w	800405e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ef6:	2300      	movs	r3, #0
 8003ef8:	60fb      	str	r3, [r7, #12]
 8003efa:	4b60      	ldr	r3, [pc, #384]	; (800407c <HAL_GPIO_Init+0x30c>)
 8003efc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003efe:	4a5f      	ldr	r2, [pc, #380]	; (800407c <HAL_GPIO_Init+0x30c>)
 8003f00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f04:	6453      	str	r3, [r2, #68]	; 0x44
 8003f06:	4b5d      	ldr	r3, [pc, #372]	; (800407c <HAL_GPIO_Init+0x30c>)
 8003f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003f0e:	60fb      	str	r3, [r7, #12]
 8003f10:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003f12:	4a5b      	ldr	r2, [pc, #364]	; (8004080 <HAL_GPIO_Init+0x310>)
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	089b      	lsrs	r3, r3, #2
 8003f18:	3302      	adds	r3, #2
 8003f1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003f1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003f20:	69fb      	ldr	r3, [r7, #28]
 8003f22:	f003 0303 	and.w	r3, r3, #3
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	220f      	movs	r2, #15
 8003f2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f2e:	43db      	mvns	r3, r3
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4013      	ands	r3, r2
 8003f34:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	4a52      	ldr	r2, [pc, #328]	; (8004084 <HAL_GPIO_Init+0x314>)
 8003f3a:	4293      	cmp	r3, r2
 8003f3c:	d02b      	beq.n	8003f96 <HAL_GPIO_Init+0x226>
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	4a51      	ldr	r2, [pc, #324]	; (8004088 <HAL_GPIO_Init+0x318>)
 8003f42:	4293      	cmp	r3, r2
 8003f44:	d025      	beq.n	8003f92 <HAL_GPIO_Init+0x222>
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	4a50      	ldr	r2, [pc, #320]	; (800408c <HAL_GPIO_Init+0x31c>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d01f      	beq.n	8003f8e <HAL_GPIO_Init+0x21e>
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	4a4f      	ldr	r2, [pc, #316]	; (8004090 <HAL_GPIO_Init+0x320>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d019      	beq.n	8003f8a <HAL_GPIO_Init+0x21a>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a4e      	ldr	r2, [pc, #312]	; (8004094 <HAL_GPIO_Init+0x324>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d013      	beq.n	8003f86 <HAL_GPIO_Init+0x216>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a4d      	ldr	r2, [pc, #308]	; (8004098 <HAL_GPIO_Init+0x328>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d00d      	beq.n	8003f82 <HAL_GPIO_Init+0x212>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	4a4c      	ldr	r2, [pc, #304]	; (800409c <HAL_GPIO_Init+0x32c>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d007      	beq.n	8003f7e <HAL_GPIO_Init+0x20e>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a4b      	ldr	r2, [pc, #300]	; (80040a0 <HAL_GPIO_Init+0x330>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d101      	bne.n	8003f7a <HAL_GPIO_Init+0x20a>
 8003f76:	2307      	movs	r3, #7
 8003f78:	e00e      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f7a:	2308      	movs	r3, #8
 8003f7c:	e00c      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f7e:	2306      	movs	r3, #6
 8003f80:	e00a      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f82:	2305      	movs	r3, #5
 8003f84:	e008      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f86:	2304      	movs	r3, #4
 8003f88:	e006      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f8a:	2303      	movs	r3, #3
 8003f8c:	e004      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f8e:	2302      	movs	r3, #2
 8003f90:	e002      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <HAL_GPIO_Init+0x228>
 8003f96:	2300      	movs	r3, #0
 8003f98:	69fa      	ldr	r2, [r7, #28]
 8003f9a:	f002 0203 	and.w	r2, r2, #3
 8003f9e:	0092      	lsls	r2, r2, #2
 8003fa0:	4093      	lsls	r3, r2
 8003fa2:	69ba      	ldr	r2, [r7, #24]
 8003fa4:	4313      	orrs	r3, r2
 8003fa6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003fa8:	4935      	ldr	r1, [pc, #212]	; (8004080 <HAL_GPIO_Init+0x310>)
 8003faa:	69fb      	ldr	r3, [r7, #28]
 8003fac:	089b      	lsrs	r3, r3, #2
 8003fae:	3302      	adds	r3, #2
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003fb6:	4b3b      	ldr	r3, [pc, #236]	; (80040a4 <HAL_GPIO_Init+0x334>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	43db      	mvns	r3, r3
 8003fc0:	69ba      	ldr	r2, [r7, #24]
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	685b      	ldr	r3, [r3, #4]
 8003fca:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003fd2:	69ba      	ldr	r2, [r7, #24]
 8003fd4:	693b      	ldr	r3, [r7, #16]
 8003fd6:	4313      	orrs	r3, r2
 8003fd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003fda:	4a32      	ldr	r2, [pc, #200]	; (80040a4 <HAL_GPIO_Init+0x334>)
 8003fdc:	69bb      	ldr	r3, [r7, #24]
 8003fde:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003fe0:	4b30      	ldr	r3, [pc, #192]	; (80040a4 <HAL_GPIO_Init+0x334>)
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003fe6:	693b      	ldr	r3, [r7, #16]
 8003fe8:	43db      	mvns	r3, r3
 8003fea:	69ba      	ldr	r2, [r7, #24]
 8003fec:	4013      	ands	r3, r2
 8003fee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	685b      	ldr	r3, [r3, #4]
 8003ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d003      	beq.n	8004004 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ffc:	69ba      	ldr	r2, [r7, #24]
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004004:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <HAL_GPIO_Init+0x334>)
 8004006:	69bb      	ldr	r3, [r7, #24]
 8004008:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800400a:	4b26      	ldr	r3, [pc, #152]	; (80040a4 <HAL_GPIO_Init+0x334>)
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	43db      	mvns	r3, r3
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4013      	ands	r3, r2
 8004018:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	685b      	ldr	r3, [r3, #4]
 800401e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004026:	69ba      	ldr	r2, [r7, #24]
 8004028:	693b      	ldr	r3, [r7, #16]
 800402a:	4313      	orrs	r3, r2
 800402c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800402e:	4a1d      	ldr	r2, [pc, #116]	; (80040a4 <HAL_GPIO_Init+0x334>)
 8004030:	69bb      	ldr	r3, [r7, #24]
 8004032:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004034:	4b1b      	ldr	r3, [pc, #108]	; (80040a4 <HAL_GPIO_Init+0x334>)
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	43db      	mvns	r3, r3
 800403e:	69ba      	ldr	r2, [r7, #24]
 8004040:	4013      	ands	r3, r2
 8004042:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004044:	683b      	ldr	r3, [r7, #0]
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800404c:	2b00      	cmp	r3, #0
 800404e:	d003      	beq.n	8004058 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004050:	69ba      	ldr	r2, [r7, #24]
 8004052:	693b      	ldr	r3, [r7, #16]
 8004054:	4313      	orrs	r3, r2
 8004056:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004058:	4a12      	ldr	r2, [pc, #72]	; (80040a4 <HAL_GPIO_Init+0x334>)
 800405a:	69bb      	ldr	r3, [r7, #24]
 800405c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800405e:	69fb      	ldr	r3, [r7, #28]
 8004060:	3301      	adds	r3, #1
 8004062:	61fb      	str	r3, [r7, #28]
 8004064:	69fb      	ldr	r3, [r7, #28]
 8004066:	2b0f      	cmp	r3, #15
 8004068:	f67f ae90 	bls.w	8003d8c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800406c:	bf00      	nop
 800406e:	bf00      	nop
 8004070:	3724      	adds	r7, #36	; 0x24
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800
 8004080:	40013800 	.word	0x40013800
 8004084:	40020000 	.word	0x40020000
 8004088:	40020400 	.word	0x40020400
 800408c:	40020800 	.word	0x40020800
 8004090:	40020c00 	.word	0x40020c00
 8004094:	40021000 	.word	0x40021000
 8004098:	40021400 	.word	0x40021400
 800409c:	40021800 	.word	0x40021800
 80040a0:	40021c00 	.word	0x40021c00
 80040a4:	40013c00 	.word	0x40013c00

080040a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
 80040b0:	460b      	mov	r3, r1
 80040b2:	807b      	strh	r3, [r7, #2]
 80040b4:	4613      	mov	r3, r2
 80040b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80040b8:	787b      	ldrb	r3, [r7, #1]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d003      	beq.n	80040c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80040be:	887a      	ldrh	r2, [r7, #2]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80040c4:	e003      	b.n	80040ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80040c6:	887b      	ldrh	r3, [r7, #2]
 80040c8:	041a      	lsls	r2, r3, #16
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	619a      	str	r2, [r3, #24]
}
 80040ce:	bf00      	nop
 80040d0:	370c      	adds	r7, #12
 80040d2:	46bd      	mov	sp, r7
 80040d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d8:	4770      	bx	lr
	...

080040dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e264      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 0301 	and.w	r3, r3, #1
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d075      	beq.n	80041e6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80040fa:	4ba3      	ldr	r3, [pc, #652]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	689b      	ldr	r3, [r3, #8]
 80040fe:	f003 030c 	and.w	r3, r3, #12
 8004102:	2b04      	cmp	r3, #4
 8004104:	d00c      	beq.n	8004120 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004106:	4ba0      	ldr	r3, [pc, #640]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800410e:	2b08      	cmp	r3, #8
 8004110:	d112      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004112:	4b9d      	ldr	r3, [pc, #628]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800411a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800411e:	d10b      	bne.n	8004138 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004120:	4b99      	ldr	r3, [pc, #612]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004128:	2b00      	cmp	r3, #0
 800412a:	d05b      	beq.n	80041e4 <HAL_RCC_OscConfig+0x108>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	685b      	ldr	r3, [r3, #4]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d157      	bne.n	80041e4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004134:	2301      	movs	r3, #1
 8004136:	e23f      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004140:	d106      	bne.n	8004150 <HAL_RCC_OscConfig+0x74>
 8004142:	4b91      	ldr	r3, [pc, #580]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a90      	ldr	r2, [pc, #576]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004148:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800414c:	6013      	str	r3, [r2, #0]
 800414e:	e01d      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004158:	d10c      	bne.n	8004174 <HAL_RCC_OscConfig+0x98>
 800415a:	4b8b      	ldr	r3, [pc, #556]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a8a      	ldr	r2, [pc, #552]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004160:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	4b88      	ldr	r3, [pc, #544]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a87      	ldr	r2, [pc, #540]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800416c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	e00b      	b.n	800418c <HAL_RCC_OscConfig+0xb0>
 8004174:	4b84      	ldr	r3, [pc, #528]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	4a83      	ldr	r2, [pc, #524]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800417a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800417e:	6013      	str	r3, [r2, #0]
 8004180:	4b81      	ldr	r3, [pc, #516]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a80      	ldr	r2, [pc, #512]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004186:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800418a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d013      	beq.n	80041bc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004194:	f7fe fe6a 	bl	8002e6c <HAL_GetTick>
 8004198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800419a:	e008      	b.n	80041ae <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800419c:	f7fe fe66 	bl	8002e6c <HAL_GetTick>
 80041a0:	4602      	mov	r2, r0
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	1ad3      	subs	r3, r2, r3
 80041a6:	2b64      	cmp	r3, #100	; 0x64
 80041a8:	d901      	bls.n	80041ae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80041aa:	2303      	movs	r3, #3
 80041ac:	e204      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041ae:	4b76      	ldr	r3, [pc, #472]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d0f0      	beq.n	800419c <HAL_RCC_OscConfig+0xc0>
 80041ba:	e014      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80041bc:	f7fe fe56 	bl	8002e6c <HAL_GetTick>
 80041c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041c2:	e008      	b.n	80041d6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80041c4:	f7fe fe52 	bl	8002e6c <HAL_GetTick>
 80041c8:	4602      	mov	r2, r0
 80041ca:	693b      	ldr	r3, [r7, #16]
 80041cc:	1ad3      	subs	r3, r2, r3
 80041ce:	2b64      	cmp	r3, #100	; 0x64
 80041d0:	d901      	bls.n	80041d6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80041d2:	2303      	movs	r3, #3
 80041d4:	e1f0      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80041d6:	4b6c      	ldr	r3, [pc, #432]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d1f0      	bne.n	80041c4 <HAL_RCC_OscConfig+0xe8>
 80041e2:	e000      	b.n	80041e6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80041e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d063      	beq.n	80042ba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80041f2:	4b65      	ldr	r3, [pc, #404]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80041f4:	689b      	ldr	r3, [r3, #8]
 80041f6:	f003 030c 	and.w	r3, r3, #12
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d00b      	beq.n	8004216 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80041fe:	4b62      	ldr	r3, [pc, #392]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004206:	2b08      	cmp	r3, #8
 8004208:	d11c      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800420a:	4b5f      	ldr	r3, [pc, #380]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800420c:	685b      	ldr	r3, [r3, #4]
 800420e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004212:	2b00      	cmp	r3, #0
 8004214:	d116      	bne.n	8004244 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004216:	4b5c      	ldr	r3, [pc, #368]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	2b00      	cmp	r3, #0
 8004220:	d005      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	68db      	ldr	r3, [r3, #12]
 8004226:	2b01      	cmp	r3, #1
 8004228:	d001      	beq.n	800422e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800422a:	2301      	movs	r3, #1
 800422c:	e1c4      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800422e:	4b56      	ldr	r3, [pc, #344]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	691b      	ldr	r3, [r3, #16]
 800423a:	00db      	lsls	r3, r3, #3
 800423c:	4952      	ldr	r1, [pc, #328]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004242:	e03a      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	68db      	ldr	r3, [r3, #12]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d020      	beq.n	800428e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800424c:	4b4f      	ldr	r3, [pc, #316]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 800424e:	2201      	movs	r2, #1
 8004250:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004252:	f7fe fe0b 	bl	8002e6c <HAL_GetTick>
 8004256:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004258:	e008      	b.n	800426c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800425a:	f7fe fe07 	bl	8002e6c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	2b02      	cmp	r3, #2
 8004266:	d901      	bls.n	800426c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e1a5      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800426c:	4b46      	ldr	r3, [pc, #280]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0302 	and.w	r3, r3, #2
 8004274:	2b00      	cmp	r3, #0
 8004276:	d0f0      	beq.n	800425a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004278:	4b43      	ldr	r3, [pc, #268]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	00db      	lsls	r3, r3, #3
 8004286:	4940      	ldr	r1, [pc, #256]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004288:	4313      	orrs	r3, r2
 800428a:	600b      	str	r3, [r1, #0]
 800428c:	e015      	b.n	80042ba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800428e:	4b3f      	ldr	r3, [pc, #252]	; (800438c <HAL_RCC_OscConfig+0x2b0>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004294:	f7fe fdea 	bl	8002e6c <HAL_GetTick>
 8004298:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800429a:	e008      	b.n	80042ae <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800429c:	f7fe fde6 	bl	8002e6c <HAL_GetTick>
 80042a0:	4602      	mov	r2, r0
 80042a2:	693b      	ldr	r3, [r7, #16]
 80042a4:	1ad3      	subs	r3, r2, r3
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d901      	bls.n	80042ae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80042aa:	2303      	movs	r3, #3
 80042ac:	e184      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80042ae:	4b36      	ldr	r3, [pc, #216]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0302 	and.w	r3, r3, #2
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1f0      	bne.n	800429c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0308 	and.w	r3, r3, #8
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d030      	beq.n	8004328 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	695b      	ldr	r3, [r3, #20]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d016      	beq.n	80042fc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80042ce:	4b30      	ldr	r3, [pc, #192]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042d0:	2201      	movs	r2, #1
 80042d2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042d4:	f7fe fdca 	bl	8002e6c <HAL_GetTick>
 80042d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042da:	e008      	b.n	80042ee <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80042dc:	f7fe fdc6 	bl	8002e6c <HAL_GetTick>
 80042e0:	4602      	mov	r2, r0
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	1ad3      	subs	r3, r2, r3
 80042e6:	2b02      	cmp	r3, #2
 80042e8:	d901      	bls.n	80042ee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80042ea:	2303      	movs	r3, #3
 80042ec:	e164      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80042ee:	4b26      	ldr	r3, [pc, #152]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 80042f0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f2:	f003 0302 	and.w	r3, r3, #2
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d0f0      	beq.n	80042dc <HAL_RCC_OscConfig+0x200>
 80042fa:	e015      	b.n	8004328 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80042fc:	4b24      	ldr	r3, [pc, #144]	; (8004390 <HAL_RCC_OscConfig+0x2b4>)
 80042fe:	2200      	movs	r2, #0
 8004300:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004302:	f7fe fdb3 	bl	8002e6c <HAL_GetTick>
 8004306:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004308:	e008      	b.n	800431c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800430a:	f7fe fdaf 	bl	8002e6c <HAL_GetTick>
 800430e:	4602      	mov	r2, r0
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	1ad3      	subs	r3, r2, r3
 8004314:	2b02      	cmp	r3, #2
 8004316:	d901      	bls.n	800431c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e14d      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800431c:	4b1a      	ldr	r3, [pc, #104]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800431e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004320:	f003 0302 	and.w	r3, r3, #2
 8004324:	2b00      	cmp	r3, #0
 8004326:	d1f0      	bne.n	800430a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	f003 0304 	and.w	r3, r3, #4
 8004330:	2b00      	cmp	r3, #0
 8004332:	f000 80a0 	beq.w	8004476 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004336:	2300      	movs	r3, #0
 8004338:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800433a:	4b13      	ldr	r3, [pc, #76]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800433c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004342:	2b00      	cmp	r3, #0
 8004344:	d10f      	bne.n	8004366 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004346:	2300      	movs	r3, #0
 8004348:	60bb      	str	r3, [r7, #8]
 800434a:	4b0f      	ldr	r3, [pc, #60]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 800434c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800434e:	4a0e      	ldr	r2, [pc, #56]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004350:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004354:	6413      	str	r3, [r2, #64]	; 0x40
 8004356:	4b0c      	ldr	r3, [pc, #48]	; (8004388 <HAL_RCC_OscConfig+0x2ac>)
 8004358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800435a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800435e:	60bb      	str	r3, [r7, #8]
 8004360:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004362:	2301      	movs	r3, #1
 8004364:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004366:	4b0b      	ldr	r3, [pc, #44]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800436e:	2b00      	cmp	r3, #0
 8004370:	d121      	bne.n	80043b6 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004372:	4b08      	ldr	r3, [pc, #32]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	4a07      	ldr	r2, [pc, #28]	; (8004394 <HAL_RCC_OscConfig+0x2b8>)
 8004378:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800437c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800437e:	f7fe fd75 	bl	8002e6c <HAL_GetTick>
 8004382:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004384:	e011      	b.n	80043aa <HAL_RCC_OscConfig+0x2ce>
 8004386:	bf00      	nop
 8004388:	40023800 	.word	0x40023800
 800438c:	42470000 	.word	0x42470000
 8004390:	42470e80 	.word	0x42470e80
 8004394:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004398:	f7fe fd68 	bl	8002e6c <HAL_GetTick>
 800439c:	4602      	mov	r2, r0
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	1ad3      	subs	r3, r2, r3
 80043a2:	2b02      	cmp	r3, #2
 80043a4:	d901      	bls.n	80043aa <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80043a6:	2303      	movs	r3, #3
 80043a8:	e106      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80043aa:	4b85      	ldr	r3, [pc, #532]	; (80045c0 <HAL_RCC_OscConfig+0x4e4>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d0f0      	beq.n	8004398 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d106      	bne.n	80043cc <HAL_RCC_OscConfig+0x2f0>
 80043be:	4b81      	ldr	r3, [pc, #516]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043c2:	4a80      	ldr	r2, [pc, #512]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043c4:	f043 0301 	orr.w	r3, r3, #1
 80043c8:	6713      	str	r3, [r2, #112]	; 0x70
 80043ca:	e01c      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	689b      	ldr	r3, [r3, #8]
 80043d0:	2b05      	cmp	r3, #5
 80043d2:	d10c      	bne.n	80043ee <HAL_RCC_OscConfig+0x312>
 80043d4:	4b7b      	ldr	r3, [pc, #492]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043d8:	4a7a      	ldr	r2, [pc, #488]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043da:	f043 0304 	orr.w	r3, r3, #4
 80043de:	6713      	str	r3, [r2, #112]	; 0x70
 80043e0:	4b78      	ldr	r3, [pc, #480]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043e4:	4a77      	ldr	r2, [pc, #476]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043e6:	f043 0301 	orr.w	r3, r3, #1
 80043ea:	6713      	str	r3, [r2, #112]	; 0x70
 80043ec:	e00b      	b.n	8004406 <HAL_RCC_OscConfig+0x32a>
 80043ee:	4b75      	ldr	r3, [pc, #468]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043f2:	4a74      	ldr	r2, [pc, #464]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043f4:	f023 0301 	bic.w	r3, r3, #1
 80043f8:	6713      	str	r3, [r2, #112]	; 0x70
 80043fa:	4b72      	ldr	r3, [pc, #456]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80043fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80043fe:	4a71      	ldr	r2, [pc, #452]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004400:	f023 0304 	bic.w	r3, r3, #4
 8004404:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d015      	beq.n	800443a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800440e:	f7fe fd2d 	bl	8002e6c <HAL_GetTick>
 8004412:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004414:	e00a      	b.n	800442c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004416:	f7fe fd29 	bl	8002e6c <HAL_GetTick>
 800441a:	4602      	mov	r2, r0
 800441c:	693b      	ldr	r3, [r7, #16]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	f241 3288 	movw	r2, #5000	; 0x1388
 8004424:	4293      	cmp	r3, r2
 8004426:	d901      	bls.n	800442c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004428:	2303      	movs	r3, #3
 800442a:	e0c5      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800442c:	4b65      	ldr	r3, [pc, #404]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800442e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004430:	f003 0302 	and.w	r3, r3, #2
 8004434:	2b00      	cmp	r3, #0
 8004436:	d0ee      	beq.n	8004416 <HAL_RCC_OscConfig+0x33a>
 8004438:	e014      	b.n	8004464 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800443a:	f7fe fd17 	bl	8002e6c <HAL_GetTick>
 800443e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004440:	e00a      	b.n	8004458 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004442:	f7fe fd13 	bl	8002e6c <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004450:	4293      	cmp	r3, r2
 8004452:	d901      	bls.n	8004458 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e0af      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004458:	4b5a      	ldr	r3, [pc, #360]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800445a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800445c:	f003 0302 	and.w	r3, r3, #2
 8004460:	2b00      	cmp	r3, #0
 8004462:	d1ee      	bne.n	8004442 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004464:	7dfb      	ldrb	r3, [r7, #23]
 8004466:	2b01      	cmp	r3, #1
 8004468:	d105      	bne.n	8004476 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800446a:	4b56      	ldr	r3, [pc, #344]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800446c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800446e:	4a55      	ldr	r2, [pc, #340]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004470:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004474:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	699b      	ldr	r3, [r3, #24]
 800447a:	2b00      	cmp	r3, #0
 800447c:	f000 809b 	beq.w	80045b6 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004480:	4b50      	ldr	r3, [pc, #320]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004482:	689b      	ldr	r3, [r3, #8]
 8004484:	f003 030c 	and.w	r3, r3, #12
 8004488:	2b08      	cmp	r3, #8
 800448a:	d05c      	beq.n	8004546 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	699b      	ldr	r3, [r3, #24]
 8004490:	2b02      	cmp	r3, #2
 8004492:	d141      	bne.n	8004518 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004494:	4b4c      	ldr	r3, [pc, #304]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 8004496:	2200      	movs	r2, #0
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800449a:	f7fe fce7 	bl	8002e6c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044a2:	f7fe fce3 	bl	8002e6c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e081      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80044b4:	4b43      	ldr	r3, [pc, #268]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d1f0      	bne.n	80044a2 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	69da      	ldr	r2, [r3, #28]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	431a      	orrs	r2, r3
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ce:	019b      	lsls	r3, r3, #6
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
 80044dc:	431a      	orrs	r2, r3
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e2:	061b      	lsls	r3, r3, #24
 80044e4:	4937      	ldr	r1, [pc, #220]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 80044e6:	4313      	orrs	r3, r2
 80044e8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80044ea:	4b37      	ldr	r3, [pc, #220]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 80044ec:	2201      	movs	r2, #1
 80044ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80044f0:	f7fe fcbc 	bl	8002e6c <HAL_GetTick>
 80044f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	e008      	b.n	800450a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80044f8:	f7fe fcb8 	bl	8002e6c <HAL_GetTick>
 80044fc:	4602      	mov	r2, r0
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	1ad3      	subs	r3, r2, r3
 8004502:	2b02      	cmp	r3, #2
 8004504:	d901      	bls.n	800450a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e056      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800450a:	4b2e      	ldr	r3, [pc, #184]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004512:	2b00      	cmp	r3, #0
 8004514:	d0f0      	beq.n	80044f8 <HAL_RCC_OscConfig+0x41c>
 8004516:	e04e      	b.n	80045b6 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004518:	4b2b      	ldr	r3, [pc, #172]	; (80045c8 <HAL_RCC_OscConfig+0x4ec>)
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800451e:	f7fe fca5 	bl	8002e6c <HAL_GetTick>
 8004522:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004524:	e008      	b.n	8004538 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004526:	f7fe fca1 	bl	8002e6c <HAL_GetTick>
 800452a:	4602      	mov	r2, r0
 800452c:	693b      	ldr	r3, [r7, #16]
 800452e:	1ad3      	subs	r3, r2, r3
 8004530:	2b02      	cmp	r3, #2
 8004532:	d901      	bls.n	8004538 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e03f      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004538:	4b22      	ldr	r3, [pc, #136]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d1f0      	bne.n	8004526 <HAL_RCC_OscConfig+0x44a>
 8004544:	e037      	b.n	80045b6 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	699b      	ldr	r3, [r3, #24]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d101      	bne.n	8004552 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e032      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004552:	4b1c      	ldr	r3, [pc, #112]	; (80045c4 <HAL_RCC_OscConfig+0x4e8>)
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	699b      	ldr	r3, [r3, #24]
 800455c:	2b01      	cmp	r3, #1
 800455e:	d028      	beq.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800456a:	429a      	cmp	r2, r3
 800456c:	d121      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004578:	429a      	cmp	r2, r3
 800457a:	d11a      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800457c:	68fa      	ldr	r2, [r7, #12]
 800457e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004582:	4013      	ands	r3, r2
 8004584:	687a      	ldr	r2, [r7, #4]
 8004586:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004588:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800458a:	4293      	cmp	r3, r2
 800458c:	d111      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004598:	085b      	lsrs	r3, r3, #1
 800459a:	3b01      	subs	r3, #1
 800459c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800459e:	429a      	cmp	r2, r3
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ac:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d001      	beq.n	80045b6 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40007000 	.word	0x40007000
 80045c4:	40023800 	.word	0x40023800
 80045c8:	42470060 	.word	0x42470060

080045cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
 80045d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d101      	bne.n	80045e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80045dc:	2301      	movs	r3, #1
 80045de:	e0cc      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80045e0:	4b68      	ldr	r3, [pc, #416]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0307 	and.w	r3, r3, #7
 80045e8:	683a      	ldr	r2, [r7, #0]
 80045ea:	429a      	cmp	r2, r3
 80045ec:	d90c      	bls.n	8004608 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045ee:	4b65      	ldr	r3, [pc, #404]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f0:	683a      	ldr	r2, [r7, #0]
 80045f2:	b2d2      	uxtb	r2, r2
 80045f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045f6:	4b63      	ldr	r3, [pc, #396]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0307 	and.w	r3, r3, #7
 80045fe:	683a      	ldr	r2, [r7, #0]
 8004600:	429a      	cmp	r2, r3
 8004602:	d001      	beq.n	8004608 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004604:	2301      	movs	r3, #1
 8004606:	e0b8      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f003 0302 	and.w	r3, r3, #2
 8004610:	2b00      	cmp	r3, #0
 8004612:	d020      	beq.n	8004656 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b00      	cmp	r3, #0
 800461e:	d005      	beq.n	800462c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004620:	4b59      	ldr	r3, [pc, #356]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004622:	689b      	ldr	r3, [r3, #8]
 8004624:	4a58      	ldr	r2, [pc, #352]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004626:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800462a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	f003 0308 	and.w	r3, r3, #8
 8004634:	2b00      	cmp	r3, #0
 8004636:	d005      	beq.n	8004644 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004638:	4b53      	ldr	r3, [pc, #332]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463a:	689b      	ldr	r3, [r3, #8]
 800463c:	4a52      	ldr	r2, [pc, #328]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800463e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004642:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004644:	4b50      	ldr	r3, [pc, #320]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	689b      	ldr	r3, [r3, #8]
 8004650:	494d      	ldr	r1, [pc, #308]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004652:	4313      	orrs	r3, r2
 8004654:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f003 0301 	and.w	r3, r3, #1
 800465e:	2b00      	cmp	r3, #0
 8004660:	d044      	beq.n	80046ec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b01      	cmp	r3, #1
 8004668:	d107      	bne.n	800467a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800466a:	4b47      	ldr	r3, [pc, #284]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004672:	2b00      	cmp	r3, #0
 8004674:	d119      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004676:	2301      	movs	r3, #1
 8004678:	e07f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	2b02      	cmp	r3, #2
 8004680:	d003      	beq.n	800468a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004686:	2b03      	cmp	r3, #3
 8004688:	d107      	bne.n	800469a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800468a:	4b3f      	ldr	r3, [pc, #252]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004692:	2b00      	cmp	r3, #0
 8004694:	d109      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004696:	2301      	movs	r3, #1
 8004698:	e06f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800469a:	4b3b      	ldr	r3, [pc, #236]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80046a6:	2301      	movs	r3, #1
 80046a8:	e067      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80046aa:	4b37      	ldr	r3, [pc, #220]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	f023 0203 	bic.w	r2, r3, #3
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	685b      	ldr	r3, [r3, #4]
 80046b6:	4934      	ldr	r1, [pc, #208]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046b8:	4313      	orrs	r3, r2
 80046ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80046bc:	f7fe fbd6 	bl	8002e6c <HAL_GetTick>
 80046c0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046c2:	e00a      	b.n	80046da <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80046c4:	f7fe fbd2 	bl	8002e6c <HAL_GetTick>
 80046c8:	4602      	mov	r2, r0
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	1ad3      	subs	r3, r2, r3
 80046ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d901      	bls.n	80046da <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80046d6:	2303      	movs	r3, #3
 80046d8:	e04f      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80046da:	4b2b      	ldr	r3, [pc, #172]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	f003 020c 	and.w	r2, r3, #12
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d1eb      	bne.n	80046c4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80046ec:	4b25      	ldr	r3, [pc, #148]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	f003 0307 	and.w	r3, r3, #7
 80046f4:	683a      	ldr	r2, [r7, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d20c      	bcs.n	8004714 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80046fa:	4b22      	ldr	r3, [pc, #136]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 80046fc:	683a      	ldr	r2, [r7, #0]
 80046fe:	b2d2      	uxtb	r2, r2
 8004700:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004702:	4b20      	ldr	r3, [pc, #128]	; (8004784 <HAL_RCC_ClockConfig+0x1b8>)
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	f003 0307 	and.w	r3, r3, #7
 800470a:	683a      	ldr	r2, [r7, #0]
 800470c:	429a      	cmp	r2, r3
 800470e:	d001      	beq.n	8004714 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004710:	2301      	movs	r3, #1
 8004712:	e032      	b.n	800477a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	f003 0304 	and.w	r3, r3, #4
 800471c:	2b00      	cmp	r3, #0
 800471e:	d008      	beq.n	8004732 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004720:	4b19      	ldr	r3, [pc, #100]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004722:	689b      	ldr	r3, [r3, #8]
 8004724:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	68db      	ldr	r3, [r3, #12]
 800472c:	4916      	ldr	r1, [pc, #88]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800472e:	4313      	orrs	r3, r2
 8004730:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f003 0308 	and.w	r3, r3, #8
 800473a:	2b00      	cmp	r3, #0
 800473c:	d009      	beq.n	8004752 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800473e:	4b12      	ldr	r3, [pc, #72]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	00db      	lsls	r3, r3, #3
 800474c:	490e      	ldr	r1, [pc, #56]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800474e:	4313      	orrs	r3, r2
 8004750:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004752:	f000 f821 	bl	8004798 <HAL_RCC_GetSysClockFreq>
 8004756:	4602      	mov	r2, r0
 8004758:	4b0b      	ldr	r3, [pc, #44]	; (8004788 <HAL_RCC_ClockConfig+0x1bc>)
 800475a:	689b      	ldr	r3, [r3, #8]
 800475c:	091b      	lsrs	r3, r3, #4
 800475e:	f003 030f 	and.w	r3, r3, #15
 8004762:	490a      	ldr	r1, [pc, #40]	; (800478c <HAL_RCC_ClockConfig+0x1c0>)
 8004764:	5ccb      	ldrb	r3, [r1, r3]
 8004766:	fa22 f303 	lsr.w	r3, r2, r3
 800476a:	4a09      	ldr	r2, [pc, #36]	; (8004790 <HAL_RCC_ClockConfig+0x1c4>)
 800476c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800476e:	4b09      	ldr	r3, [pc, #36]	; (8004794 <HAL_RCC_ClockConfig+0x1c8>)
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4618      	mov	r0, r3
 8004774:	f7fe f916 	bl	80029a4 <HAL_InitTick>

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3710      	adds	r7, #16
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}
 8004782:	bf00      	nop
 8004784:	40023c00 	.word	0x40023c00
 8004788:	40023800 	.word	0x40023800
 800478c:	0800858c 	.word	0x0800858c
 8004790:	200001d4 	.word	0x200001d4
 8004794:	200001d8 	.word	0x200001d8

08004798 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800479c:	b084      	sub	sp, #16
 800479e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80047a0:	2300      	movs	r3, #0
 80047a2:	607b      	str	r3, [r7, #4]
 80047a4:	2300      	movs	r3, #0
 80047a6:	60fb      	str	r3, [r7, #12]
 80047a8:	2300      	movs	r3, #0
 80047aa:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80047ac:	2300      	movs	r3, #0
 80047ae:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80047b0:	4b67      	ldr	r3, [pc, #412]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047b2:	689b      	ldr	r3, [r3, #8]
 80047b4:	f003 030c 	and.w	r3, r3, #12
 80047b8:	2b08      	cmp	r3, #8
 80047ba:	d00d      	beq.n	80047d8 <HAL_RCC_GetSysClockFreq+0x40>
 80047bc:	2b08      	cmp	r3, #8
 80047be:	f200 80bd 	bhi.w	800493c <HAL_RCC_GetSysClockFreq+0x1a4>
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d002      	beq.n	80047cc <HAL_RCC_GetSysClockFreq+0x34>
 80047c6:	2b04      	cmp	r3, #4
 80047c8:	d003      	beq.n	80047d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80047ca:	e0b7      	b.n	800493c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80047cc:	4b61      	ldr	r3, [pc, #388]	; (8004954 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80047ce:	60bb      	str	r3, [r7, #8]
       break;
 80047d0:	e0b7      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80047d2:	4b61      	ldr	r3, [pc, #388]	; (8004958 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80047d4:	60bb      	str	r3, [r7, #8]
      break;
 80047d6:	e0b4      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80047d8:	4b5d      	ldr	r3, [pc, #372]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80047e0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80047e2:	4b5b      	ldr	r3, [pc, #364]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047e4:	685b      	ldr	r3, [r3, #4]
 80047e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d04d      	beq.n	800488a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4b58      	ldr	r3, [pc, #352]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	461a      	mov	r2, r3
 80047f6:	f04f 0300 	mov.w	r3, #0
 80047fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80047fe:	f04f 0100 	mov.w	r1, #0
 8004802:	ea02 0800 	and.w	r8, r2, r0
 8004806:	ea03 0901 	and.w	r9, r3, r1
 800480a:	4640      	mov	r0, r8
 800480c:	4649      	mov	r1, r9
 800480e:	f04f 0200 	mov.w	r2, #0
 8004812:	f04f 0300 	mov.w	r3, #0
 8004816:	014b      	lsls	r3, r1, #5
 8004818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800481c:	0142      	lsls	r2, r0, #5
 800481e:	4610      	mov	r0, r2
 8004820:	4619      	mov	r1, r3
 8004822:	ebb0 0008 	subs.w	r0, r0, r8
 8004826:	eb61 0109 	sbc.w	r1, r1, r9
 800482a:	f04f 0200 	mov.w	r2, #0
 800482e:	f04f 0300 	mov.w	r3, #0
 8004832:	018b      	lsls	r3, r1, #6
 8004834:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004838:	0182      	lsls	r2, r0, #6
 800483a:	1a12      	subs	r2, r2, r0
 800483c:	eb63 0301 	sbc.w	r3, r3, r1
 8004840:	f04f 0000 	mov.w	r0, #0
 8004844:	f04f 0100 	mov.w	r1, #0
 8004848:	00d9      	lsls	r1, r3, #3
 800484a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800484e:	00d0      	lsls	r0, r2, #3
 8004850:	4602      	mov	r2, r0
 8004852:	460b      	mov	r3, r1
 8004854:	eb12 0208 	adds.w	r2, r2, r8
 8004858:	eb43 0309 	adc.w	r3, r3, r9
 800485c:	f04f 0000 	mov.w	r0, #0
 8004860:	f04f 0100 	mov.w	r1, #0
 8004864:	0259      	lsls	r1, r3, #9
 8004866:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800486a:	0250      	lsls	r0, r2, #9
 800486c:	4602      	mov	r2, r0
 800486e:	460b      	mov	r3, r1
 8004870:	4610      	mov	r0, r2
 8004872:	4619      	mov	r1, r3
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	461a      	mov	r2, r3
 8004878:	f04f 0300 	mov.w	r3, #0
 800487c:	f7fb fca4 	bl	80001c8 <__aeabi_uldivmod>
 8004880:	4602      	mov	r2, r0
 8004882:	460b      	mov	r3, r1
 8004884:	4613      	mov	r3, r2
 8004886:	60fb      	str	r3, [r7, #12]
 8004888:	e04a      	b.n	8004920 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800488a:	4b31      	ldr	r3, [pc, #196]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800488c:	685b      	ldr	r3, [r3, #4]
 800488e:	099b      	lsrs	r3, r3, #6
 8004890:	461a      	mov	r2, r3
 8004892:	f04f 0300 	mov.w	r3, #0
 8004896:	f240 10ff 	movw	r0, #511	; 0x1ff
 800489a:	f04f 0100 	mov.w	r1, #0
 800489e:	ea02 0400 	and.w	r4, r2, r0
 80048a2:	ea03 0501 	and.w	r5, r3, r1
 80048a6:	4620      	mov	r0, r4
 80048a8:	4629      	mov	r1, r5
 80048aa:	f04f 0200 	mov.w	r2, #0
 80048ae:	f04f 0300 	mov.w	r3, #0
 80048b2:	014b      	lsls	r3, r1, #5
 80048b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80048b8:	0142      	lsls	r2, r0, #5
 80048ba:	4610      	mov	r0, r2
 80048bc:	4619      	mov	r1, r3
 80048be:	1b00      	subs	r0, r0, r4
 80048c0:	eb61 0105 	sbc.w	r1, r1, r5
 80048c4:	f04f 0200 	mov.w	r2, #0
 80048c8:	f04f 0300 	mov.w	r3, #0
 80048cc:	018b      	lsls	r3, r1, #6
 80048ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80048d2:	0182      	lsls	r2, r0, #6
 80048d4:	1a12      	subs	r2, r2, r0
 80048d6:	eb63 0301 	sbc.w	r3, r3, r1
 80048da:	f04f 0000 	mov.w	r0, #0
 80048de:	f04f 0100 	mov.w	r1, #0
 80048e2:	00d9      	lsls	r1, r3, #3
 80048e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80048e8:	00d0      	lsls	r0, r2, #3
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	1912      	adds	r2, r2, r4
 80048f0:	eb45 0303 	adc.w	r3, r5, r3
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f04f 0100 	mov.w	r1, #0
 80048fc:	0299      	lsls	r1, r3, #10
 80048fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004902:	0290      	lsls	r0, r2, #10
 8004904:	4602      	mov	r2, r0
 8004906:	460b      	mov	r3, r1
 8004908:	4610      	mov	r0, r2
 800490a:	4619      	mov	r1, r3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	461a      	mov	r2, r3
 8004910:	f04f 0300 	mov.w	r3, #0
 8004914:	f7fb fc58 	bl	80001c8 <__aeabi_uldivmod>
 8004918:	4602      	mov	r2, r0
 800491a:	460b      	mov	r3, r1
 800491c:	4613      	mov	r3, r2
 800491e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004920:	4b0b      	ldr	r3, [pc, #44]	; (8004950 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	0c1b      	lsrs	r3, r3, #16
 8004926:	f003 0303 	and.w	r3, r3, #3
 800492a:	3301      	adds	r3, #1
 800492c:	005b      	lsls	r3, r3, #1
 800492e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004930:	68fa      	ldr	r2, [r7, #12]
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	fbb2 f3f3 	udiv	r3, r2, r3
 8004938:	60bb      	str	r3, [r7, #8]
      break;
 800493a:	e002      	b.n	8004942 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800493c:	4b05      	ldr	r3, [pc, #20]	; (8004954 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800493e:	60bb      	str	r3, [r7, #8]
      break;
 8004940:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004942:	68bb      	ldr	r3, [r7, #8]
}
 8004944:	4618      	mov	r0, r3
 8004946:	3710      	adds	r7, #16
 8004948:	46bd      	mov	sp, r7
 800494a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800494e:	bf00      	nop
 8004950:	40023800 	.word	0x40023800
 8004954:	00f42400 	.word	0x00f42400
 8004958:	007a1200 	.word	0x007a1200

0800495c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800495c:	b480      	push	{r7}
 800495e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004960:	4b03      	ldr	r3, [pc, #12]	; (8004970 <HAL_RCC_GetHCLKFreq+0x14>)
 8004962:	681b      	ldr	r3, [r3, #0]
}
 8004964:	4618      	mov	r0, r3
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	200001d4 	.word	0x200001d4

08004974 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004978:	f7ff fff0 	bl	800495c <HAL_RCC_GetHCLKFreq>
 800497c:	4602      	mov	r2, r0
 800497e:	4b05      	ldr	r3, [pc, #20]	; (8004994 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004980:	689b      	ldr	r3, [r3, #8]
 8004982:	0a9b      	lsrs	r3, r3, #10
 8004984:	f003 0307 	and.w	r3, r3, #7
 8004988:	4903      	ldr	r1, [pc, #12]	; (8004998 <HAL_RCC_GetPCLK1Freq+0x24>)
 800498a:	5ccb      	ldrb	r3, [r1, r3]
 800498c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004990:	4618      	mov	r0, r3
 8004992:	bd80      	pop	{r7, pc}
 8004994:	40023800 	.word	0x40023800
 8004998:	0800859c 	.word	0x0800859c

0800499c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800499c:	b580      	push	{r7, lr}
 800499e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80049a0:	f7ff ffdc 	bl	800495c <HAL_RCC_GetHCLKFreq>
 80049a4:	4602      	mov	r2, r0
 80049a6:	4b05      	ldr	r3, [pc, #20]	; (80049bc <HAL_RCC_GetPCLK2Freq+0x20>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	0b5b      	lsrs	r3, r3, #13
 80049ac:	f003 0307 	and.w	r3, r3, #7
 80049b0:	4903      	ldr	r1, [pc, #12]	; (80049c0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049b2:	5ccb      	ldrb	r3, [r1, r3]
 80049b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	bd80      	pop	{r7, pc}
 80049bc:	40023800 	.word	0x40023800
 80049c0:	0800859c 	.word	0x0800859c

080049c4 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b083      	sub	sp, #12
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	220f      	movs	r2, #15
 80049d2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80049d4:	4b12      	ldr	r3, [pc, #72]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049d6:	689b      	ldr	r3, [r3, #8]
 80049d8:	f003 0203 	and.w	r2, r3, #3
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80049e0:	4b0f      	ldr	r3, [pc, #60]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049e2:	689b      	ldr	r3, [r3, #8]
 80049e4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80049ec:	4b0c      	ldr	r3, [pc, #48]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049ee:	689b      	ldr	r3, [r3, #8]
 80049f0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80049f8:	4b09      	ldr	r3, [pc, #36]	; (8004a20 <HAL_RCC_GetClockConfig+0x5c>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	08db      	lsrs	r3, r3, #3
 80049fe:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8004a06:	4b07      	ldr	r3, [pc, #28]	; (8004a24 <HAL_RCC_GetClockConfig+0x60>)
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f003 0207 	and.w	r2, r3, #7
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	601a      	str	r2, [r3, #0]
}
 8004a12:	bf00      	nop
 8004a14:	370c      	adds	r7, #12
 8004a16:	46bd      	mov	sp, r7
 8004a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a1c:	4770      	bx	lr
 8004a1e:	bf00      	nop
 8004a20:	40023800 	.word	0x40023800
 8004a24:	40023c00 	.word	0x40023c00

08004a28 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b082      	sub	sp, #8
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d101      	bne.n	8004a3a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004a36:	2301      	movs	r3, #1
 8004a38:	e07b      	b.n	8004b32 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d108      	bne.n	8004a54 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004a4a:	d009      	beq.n	8004a60 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	61da      	str	r2, [r3, #28]
 8004a52:	e005      	b.n	8004a60 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	2200      	movs	r2, #0
 8004a58:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2200      	movs	r2, #0
 8004a5e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a6c:	b2db      	uxtb	r3, r3
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d106      	bne.n	8004a80 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2200      	movs	r2, #0
 8004a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f7fd fb24 	bl	80020c8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2202      	movs	r2, #2
 8004a84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a96:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	689b      	ldr	r3, [r3, #8]
 8004aa4:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004aa8:	431a      	orrs	r2, r3
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	68db      	ldr	r3, [r3, #12]
 8004aae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ab2:	431a      	orrs	r2, r3
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	691b      	ldr	r3, [r3, #16]
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	431a      	orrs	r2, r3
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0301 	and.w	r3, r3, #1
 8004ac6:	431a      	orrs	r2, r3
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	699b      	ldr	r3, [r3, #24]
 8004acc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ad0:	431a      	orrs	r2, r3
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	69db      	ldr	r3, [r3, #28]
 8004ad6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004ada:	431a      	orrs	r2, r3
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	6a1b      	ldr	r3, [r3, #32]
 8004ae0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ae4:	ea42 0103 	orr.w	r1, r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004aec:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	430a      	orrs	r2, r1
 8004af6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	699b      	ldr	r3, [r3, #24]
 8004afc:	0c1b      	lsrs	r3, r3, #16
 8004afe:	f003 0104 	and.w	r1, r3, #4
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b06:	f003 0210 	and.w	r2, r3, #16
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	430a      	orrs	r2, r1
 8004b10:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	69da      	ldr	r2, [r3, #28]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004b20:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	2200      	movs	r2, #0
 8004b26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004b30:	2300      	movs	r3, #0
}
 8004b32:	4618      	mov	r0, r3
 8004b34:	3708      	adds	r7, #8
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bd80      	pop	{r7, pc}

08004b3a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b3a:	b580      	push	{r7, lr}
 8004b3c:	b088      	sub	sp, #32
 8004b3e:	af00      	add	r7, sp, #0
 8004b40:	60f8      	str	r0, [r7, #12]
 8004b42:	60b9      	str	r1, [r7, #8]
 8004b44:	603b      	str	r3, [r7, #0]
 8004b46:	4613      	mov	r3, r2
 8004b48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004b4a:	2300      	movs	r3, #0
 8004b4c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004b54:	2b01      	cmp	r3, #1
 8004b56:	d101      	bne.n	8004b5c <HAL_SPI_Transmit+0x22>
 8004b58:	2302      	movs	r3, #2
 8004b5a:	e126      	b.n	8004daa <HAL_SPI_Transmit+0x270>
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2201      	movs	r2, #1
 8004b60:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004b64:	f7fe f982 	bl	8002e6c <HAL_GetTick>
 8004b68:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004b6a:	88fb      	ldrh	r3, [r7, #6]
 8004b6c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004b74:	b2db      	uxtb	r3, r3
 8004b76:	2b01      	cmp	r3, #1
 8004b78:	d002      	beq.n	8004b80 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004b7a:	2302      	movs	r3, #2
 8004b7c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b7e:	e10b      	b.n	8004d98 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d002      	beq.n	8004b8c <HAL_SPI_Transmit+0x52>
 8004b86:	88fb      	ldrh	r3, [r7, #6]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004b8c:	2301      	movs	r3, #1
 8004b8e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004b90:	e102      	b.n	8004d98 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	2203      	movs	r2, #3
 8004b96:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004bd8:	d10f      	bne.n	8004bfa <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004be8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004bf8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c04:	2b40      	cmp	r3, #64	; 0x40
 8004c06:	d007      	beq.n	8004c18 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	681a      	ldr	r2, [r3, #0]
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c16:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c20:	d14b      	bne.n	8004cba <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d002      	beq.n	8004c30 <HAL_SPI_Transmit+0xf6>
 8004c2a:	8afb      	ldrh	r3, [r7, #22]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d13e      	bne.n	8004cae <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c34:	881a      	ldrh	r2, [r3, #0]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c40:	1c9a      	adds	r2, r3, #2
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c4a:	b29b      	uxth	r3, r3
 8004c4c:	3b01      	subs	r3, #1
 8004c4e:	b29a      	uxth	r2, r3
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004c54:	e02b      	b.n	8004cae <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 0302 	and.w	r3, r3, #2
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d112      	bne.n	8004c8a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c68:	881a      	ldrh	r2, [r3, #0]
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c74:	1c9a      	adds	r2, r3, #2
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c7e:	b29b      	uxth	r3, r3
 8004c80:	3b01      	subs	r3, #1
 8004c82:	b29a      	uxth	r2, r3
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c88:	e011      	b.n	8004cae <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c8a:	f7fe f8ef 	bl	8002e6c <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	69bb      	ldr	r3, [r7, #24]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	683a      	ldr	r2, [r7, #0]
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d803      	bhi.n	8004ca2 <HAL_SPI_Transmit+0x168>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ca0:	d102      	bne.n	8004ca8 <HAL_SPI_Transmit+0x16e>
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d102      	bne.n	8004cae <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004cac:	e074      	b.n	8004d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004cb2:	b29b      	uxth	r3, r3
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d1ce      	bne.n	8004c56 <HAL_SPI_Transmit+0x11c>
 8004cb8:	e04c      	b.n	8004d54 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	685b      	ldr	r3, [r3, #4]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d002      	beq.n	8004cc8 <HAL_SPI_Transmit+0x18e>
 8004cc2:	8afb      	ldrh	r3, [r7, #22]
 8004cc4:	2b01      	cmp	r3, #1
 8004cc6:	d140      	bne.n	8004d4a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	7812      	ldrb	r2, [r2, #0]
 8004cd4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cda:	1c5a      	adds	r2, r3, #1
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ce4:	b29b      	uxth	r3, r3
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	b29a      	uxth	r2, r3
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004cee:	e02c      	b.n	8004d4a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	f003 0302 	and.w	r3, r3, #2
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d113      	bne.n	8004d26 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	330c      	adds	r3, #12
 8004d08:	7812      	ldrb	r2, [r2, #0]
 8004d0a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d1a:	b29b      	uxth	r3, r3
 8004d1c:	3b01      	subs	r3, #1
 8004d1e:	b29a      	uxth	r2, r3
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	86da      	strh	r2, [r3, #54]	; 0x36
 8004d24:	e011      	b.n	8004d4a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d26:	f7fe f8a1 	bl	8002e6c <HAL_GetTick>
 8004d2a:	4602      	mov	r2, r0
 8004d2c:	69bb      	ldr	r3, [r7, #24]
 8004d2e:	1ad3      	subs	r3, r2, r3
 8004d30:	683a      	ldr	r2, [r7, #0]
 8004d32:	429a      	cmp	r2, r3
 8004d34:	d803      	bhi.n	8004d3e <HAL_SPI_Transmit+0x204>
 8004d36:	683b      	ldr	r3, [r7, #0]
 8004d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d3c:	d102      	bne.n	8004d44 <HAL_SPI_Transmit+0x20a>
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d102      	bne.n	8004d4a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004d44:	2303      	movs	r3, #3
 8004d46:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d48:	e026      	b.n	8004d98 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1cd      	bne.n	8004cf0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	6839      	ldr	r1, [r7, #0]
 8004d58:	68f8      	ldr	r0, [r7, #12]
 8004d5a:	f000 f8b3 	bl	8004ec4 <SPI_EndRxTxTransaction>
 8004d5e:	4603      	mov	r3, r0
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d10a      	bne.n	8004d88 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004d72:	2300      	movs	r3, #0
 8004d74:	613b      	str	r3, [r7, #16]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68db      	ldr	r3, [r3, #12]
 8004d7c:	613b      	str	r3, [r7, #16]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	689b      	ldr	r3, [r3, #8]
 8004d84:	613b      	str	r3, [r7, #16]
 8004d86:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d002      	beq.n	8004d96 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	77fb      	strb	r3, [r7, #31]
 8004d94:	e000      	b.n	8004d98 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004d96:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004da8:	7ffb      	ldrb	r3, [r7, #31]
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3720      	adds	r7, #32
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
	...

08004db4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	60f8      	str	r0, [r7, #12]
 8004dbc:	60b9      	str	r1, [r7, #8]
 8004dbe:	603b      	str	r3, [r7, #0]
 8004dc0:	4613      	mov	r3, r2
 8004dc2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004dc4:	f7fe f852 	bl	8002e6c <HAL_GetTick>
 8004dc8:	4602      	mov	r2, r0
 8004dca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dcc:	1a9b      	subs	r3, r3, r2
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	4413      	add	r3, r2
 8004dd2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004dd4:	f7fe f84a 	bl	8002e6c <HAL_GetTick>
 8004dd8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004dda:	4b39      	ldr	r3, [pc, #228]	; (8004ec0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	015b      	lsls	r3, r3, #5
 8004de0:	0d1b      	lsrs	r3, r3, #20
 8004de2:	69fa      	ldr	r2, [r7, #28]
 8004de4:	fb02 f303 	mul.w	r3, r2, r3
 8004de8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004dea:	e054      	b.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004dec:	683b      	ldr	r3, [r7, #0]
 8004dee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004df2:	d050      	beq.n	8004e96 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004df4:	f7fe f83a 	bl	8002e6c <HAL_GetTick>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	69bb      	ldr	r3, [r7, #24]
 8004dfc:	1ad3      	subs	r3, r2, r3
 8004dfe:	69fa      	ldr	r2, [r7, #28]
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d902      	bls.n	8004e0a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004e04:	69fb      	ldr	r3, [r7, #28]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d13d      	bne.n	8004e86 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	685a      	ldr	r2, [r3, #4]
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004e18:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	685b      	ldr	r3, [r3, #4]
 8004e1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e22:	d111      	bne.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004e2c:	d004      	beq.n	8004e38 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	689b      	ldr	r3, [r3, #8]
 8004e32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e36:	d107      	bne.n	8004e48 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e46:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e4c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e50:	d10f      	bne.n	8004e72 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	681a      	ldr	r2, [r3, #0]
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004e60:	601a      	str	r2, [r3, #0]
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004e70:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	2201      	movs	r2, #1
 8004e76:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	2200      	movs	r2, #0
 8004e7e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004e82:	2303      	movs	r3, #3
 8004e84:	e017      	b.n	8004eb6 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d101      	bne.n	8004e90 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	3b01      	subs	r3, #1
 8004e94:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	689a      	ldr	r2, [r3, #8]
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	4013      	ands	r3, r2
 8004ea0:	68ba      	ldr	r2, [r7, #8]
 8004ea2:	429a      	cmp	r2, r3
 8004ea4:	bf0c      	ite	eq
 8004ea6:	2301      	moveq	r3, #1
 8004ea8:	2300      	movne	r3, #0
 8004eaa:	b2db      	uxtb	r3, r3
 8004eac:	461a      	mov	r2, r3
 8004eae:	79fb      	ldrb	r3, [r7, #7]
 8004eb0:	429a      	cmp	r2, r3
 8004eb2:	d19b      	bne.n	8004dec <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004eb4:	2300      	movs	r3, #0
}
 8004eb6:	4618      	mov	r0, r3
 8004eb8:	3720      	adds	r7, #32
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	bd80      	pop	{r7, pc}
 8004ebe:	bf00      	nop
 8004ec0:	200001d4 	.word	0x200001d4

08004ec4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b088      	sub	sp, #32
 8004ec8:	af02      	add	r7, sp, #8
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ed0:	4b1b      	ldr	r3, [pc, #108]	; (8004f40 <SPI_EndRxTxTransaction+0x7c>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a1b      	ldr	r2, [pc, #108]	; (8004f44 <SPI_EndRxTxTransaction+0x80>)
 8004ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8004eda:	0d5b      	lsrs	r3, r3, #21
 8004edc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004ee0:	fb02 f303 	mul.w	r3, r2, r3
 8004ee4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004eee:	d112      	bne.n	8004f16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	9300      	str	r3, [sp, #0]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	2180      	movs	r1, #128	; 0x80
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f7ff ff5a 	bl	8004db4 <SPI_WaitFlagStateUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d016      	beq.n	8004f34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f0a:	f043 0220 	orr.w	r2, r3, #32
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004f12:	2303      	movs	r3, #3
 8004f14:	e00f      	b.n	8004f36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00a      	beq.n	8004f32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	3b01      	subs	r3, #1
 8004f20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	689b      	ldr	r3, [r3, #8]
 8004f28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f2c:	2b80      	cmp	r3, #128	; 0x80
 8004f2e:	d0f2      	beq.n	8004f16 <SPI_EndRxTxTransaction+0x52>
 8004f30:	e000      	b.n	8004f34 <SPI_EndRxTxTransaction+0x70>
        break;
 8004f32:	bf00      	nop
  }

  return HAL_OK;
 8004f34:	2300      	movs	r3, #0
}
 8004f36:	4618      	mov	r0, r3
 8004f38:	3718      	adds	r7, #24
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bd80      	pop	{r7, pc}
 8004f3e:	bf00      	nop
 8004f40:	200001d4 	.word	0x200001d4
 8004f44:	165e9f81 	.word	0x165e9f81

08004f48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d101      	bne.n	8004f5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f56:	2301      	movs	r3, #1
 8004f58:	e041      	b.n	8004fde <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d106      	bne.n	8004f74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f7fd f912 	bl	8002198 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	2202      	movs	r2, #2
 8004f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681a      	ldr	r2, [r3, #0]
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	3304      	adds	r3, #4
 8004f84:	4619      	mov	r1, r3
 8004f86:	4610      	mov	r0, r2
 8004f88:	f000 fcd0 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	2201      	movs	r2, #1
 8004f90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2201      	movs	r2, #1
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fdc:	2300      	movs	r3, #0
}
 8004fde:	4618      	mov	r0, r3
 8004fe0:	3708      	adds	r7, #8
 8004fe2:	46bd      	mov	sp, r7
 8004fe4:	bd80      	pop	{r7, pc}
	...

08004fe8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ff6:	b2db      	uxtb	r3, r3
 8004ff8:	2b01      	cmp	r3, #1
 8004ffa:	d001      	beq.n	8005000 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e046      	b.n	800508e <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2202      	movs	r2, #2
 8005004:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a23      	ldr	r2, [pc, #140]	; (800509c <HAL_TIM_Base_Start+0xb4>)
 800500e:	4293      	cmp	r3, r2
 8005010:	d022      	beq.n	8005058 <HAL_TIM_Base_Start+0x70>
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501a:	d01d      	beq.n	8005058 <HAL_TIM_Base_Start+0x70>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	4a1f      	ldr	r2, [pc, #124]	; (80050a0 <HAL_TIM_Base_Start+0xb8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d018      	beq.n	8005058 <HAL_TIM_Base_Start+0x70>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	4a1e      	ldr	r2, [pc, #120]	; (80050a4 <HAL_TIM_Base_Start+0xbc>)
 800502c:	4293      	cmp	r3, r2
 800502e:	d013      	beq.n	8005058 <HAL_TIM_Base_Start+0x70>
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a1c      	ldr	r2, [pc, #112]	; (80050a8 <HAL_TIM_Base_Start+0xc0>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d00e      	beq.n	8005058 <HAL_TIM_Base_Start+0x70>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4a1b      	ldr	r2, [pc, #108]	; (80050ac <HAL_TIM_Base_Start+0xc4>)
 8005040:	4293      	cmp	r3, r2
 8005042:	d009      	beq.n	8005058 <HAL_TIM_Base_Start+0x70>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	4a19      	ldr	r2, [pc, #100]	; (80050b0 <HAL_TIM_Base_Start+0xc8>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d004      	beq.n	8005058 <HAL_TIM_Base_Start+0x70>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	4a18      	ldr	r2, [pc, #96]	; (80050b4 <HAL_TIM_Base_Start+0xcc>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d111      	bne.n	800507c <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	689b      	ldr	r3, [r3, #8]
 800505e:	f003 0307 	and.w	r3, r3, #7
 8005062:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005064:	68fb      	ldr	r3, [r7, #12]
 8005066:	2b06      	cmp	r3, #6
 8005068:	d010      	beq.n	800508c <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	681a      	ldr	r2, [r3, #0]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	f042 0201 	orr.w	r2, r2, #1
 8005078:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800507a:	e007      	b.n	800508c <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	681a      	ldr	r2, [r3, #0]
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	f042 0201 	orr.w	r2, r2, #1
 800508a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800508c:	2300      	movs	r3, #0
}
 800508e:	4618      	mov	r0, r3
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005098:	4770      	bx	lr
 800509a:	bf00      	nop
 800509c:	40010000 	.word	0x40010000
 80050a0:	40000400 	.word	0x40000400
 80050a4:	40000800 	.word	0x40000800
 80050a8:	40000c00 	.word	0x40000c00
 80050ac:	40010400 	.word	0x40010400
 80050b0:	40014000 	.word	0x40014000
 80050b4:	40001800 	.word	0x40001800

080050b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b085      	sub	sp, #20
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	d001      	beq.n	80050d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80050cc:	2301      	movs	r3, #1
 80050ce:	e04e      	b.n	800516e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2202      	movs	r2, #2
 80050d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f042 0201 	orr.w	r2, r2, #1
 80050e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a23      	ldr	r2, [pc, #140]	; (800517c <HAL_TIM_Base_Start_IT+0xc4>)
 80050ee:	4293      	cmp	r3, r2
 80050f0:	d022      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050fa:	d01d      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a1f      	ldr	r2, [pc, #124]	; (8005180 <HAL_TIM_Base_Start_IT+0xc8>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d018      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	4a1e      	ldr	r2, [pc, #120]	; (8005184 <HAL_TIM_Base_Start_IT+0xcc>)
 800510c:	4293      	cmp	r3, r2
 800510e:	d013      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4a1c      	ldr	r2, [pc, #112]	; (8005188 <HAL_TIM_Base_Start_IT+0xd0>)
 8005116:	4293      	cmp	r3, r2
 8005118:	d00e      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a1b      	ldr	r2, [pc, #108]	; (800518c <HAL_TIM_Base_Start_IT+0xd4>)
 8005120:	4293      	cmp	r3, r2
 8005122:	d009      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4a19      	ldr	r2, [pc, #100]	; (8005190 <HAL_TIM_Base_Start_IT+0xd8>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d004      	beq.n	8005138 <HAL_TIM_Base_Start_IT+0x80>
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	4a18      	ldr	r2, [pc, #96]	; (8005194 <HAL_TIM_Base_Start_IT+0xdc>)
 8005134:	4293      	cmp	r3, r2
 8005136:	d111      	bne.n	800515c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	689b      	ldr	r3, [r3, #8]
 800513e:	f003 0307 	and.w	r3, r3, #7
 8005142:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	2b06      	cmp	r3, #6
 8005148:	d010      	beq.n	800516c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	681a      	ldr	r2, [r3, #0]
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	f042 0201 	orr.w	r2, r2, #1
 8005158:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800515a:	e007      	b.n	800516c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	681a      	ldr	r2, [r3, #0]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	f042 0201 	orr.w	r2, r2, #1
 800516a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800516c:	2300      	movs	r3, #0
}
 800516e:	4618      	mov	r0, r3
 8005170:	3714      	adds	r7, #20
 8005172:	46bd      	mov	sp, r7
 8005174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005178:	4770      	bx	lr
 800517a:	bf00      	nop
 800517c:	40010000 	.word	0x40010000
 8005180:	40000400 	.word	0x40000400
 8005184:	40000800 	.word	0x40000800
 8005188:	40000c00 	.word	0x40000c00
 800518c:	40010400 	.word	0x40010400
 8005190:	40014000 	.word	0x40014000
 8005194:	40001800 	.word	0x40001800

08005198 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b082      	sub	sp, #8
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d101      	bne.n	80051aa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80051a6:	2301      	movs	r3, #1
 80051a8:	e041      	b.n	800522e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b0:	b2db      	uxtb	r3, r3
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d106      	bne.n	80051c4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80051be:	6878      	ldr	r0, [r7, #4]
 80051c0:	f7fd f868 	bl	8002294 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2202      	movs	r2, #2
 80051c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681a      	ldr	r2, [r3, #0]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3304      	adds	r3, #4
 80051d4:	4619      	mov	r1, r3
 80051d6:	4610      	mov	r0, r2
 80051d8:	f000 fba8 	bl	800592c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	2201      	movs	r2, #1
 80051e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	2201      	movs	r2, #1
 80051f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	2201      	movs	r2, #1
 80051f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2201      	movs	r2, #1
 8005200:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2201      	movs	r2, #1
 8005208:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2201      	movs	r2, #1
 8005210:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2201      	movs	r2, #1
 8005218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2201      	movs	r2, #1
 8005220:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	2201      	movs	r2, #1
 8005228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800522c:	2300      	movs	r3, #0
}
 800522e:	4618      	mov	r0, r3
 8005230:	3708      	adds	r7, #8
 8005232:	46bd      	mov	sp, r7
 8005234:	bd80      	pop	{r7, pc}
	...

08005238 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
 8005240:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	d109      	bne.n	800525c <HAL_TIM_PWM_Start+0x24>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800524e:	b2db      	uxtb	r3, r3
 8005250:	2b01      	cmp	r3, #1
 8005252:	bf14      	ite	ne
 8005254:	2301      	movne	r3, #1
 8005256:	2300      	moveq	r3, #0
 8005258:	b2db      	uxtb	r3, r3
 800525a:	e022      	b.n	80052a2 <HAL_TIM_PWM_Start+0x6a>
 800525c:	683b      	ldr	r3, [r7, #0]
 800525e:	2b04      	cmp	r3, #4
 8005260:	d109      	bne.n	8005276 <HAL_TIM_PWM_Start+0x3e>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005268:	b2db      	uxtb	r3, r3
 800526a:	2b01      	cmp	r3, #1
 800526c:	bf14      	ite	ne
 800526e:	2301      	movne	r3, #1
 8005270:	2300      	moveq	r3, #0
 8005272:	b2db      	uxtb	r3, r3
 8005274:	e015      	b.n	80052a2 <HAL_TIM_PWM_Start+0x6a>
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	2b08      	cmp	r3, #8
 800527a:	d109      	bne.n	8005290 <HAL_TIM_PWM_Start+0x58>
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005282:	b2db      	uxtb	r3, r3
 8005284:	2b01      	cmp	r3, #1
 8005286:	bf14      	ite	ne
 8005288:	2301      	movne	r3, #1
 800528a:	2300      	moveq	r3, #0
 800528c:	b2db      	uxtb	r3, r3
 800528e:	e008      	b.n	80052a2 <HAL_TIM_PWM_Start+0x6a>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005296:	b2db      	uxtb	r3, r3
 8005298:	2b01      	cmp	r3, #1
 800529a:	bf14      	ite	ne
 800529c:	2301      	movne	r3, #1
 800529e:	2300      	moveq	r3, #0
 80052a0:	b2db      	uxtb	r3, r3
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d001      	beq.n	80052aa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e07c      	b.n	80053a4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d104      	bne.n	80052ba <HAL_TIM_PWM_Start+0x82>
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2202      	movs	r2, #2
 80052b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052b8:	e013      	b.n	80052e2 <HAL_TIM_PWM_Start+0xaa>
 80052ba:	683b      	ldr	r3, [r7, #0]
 80052bc:	2b04      	cmp	r3, #4
 80052be:	d104      	bne.n	80052ca <HAL_TIM_PWM_Start+0x92>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2202      	movs	r2, #2
 80052c4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052c8:	e00b      	b.n	80052e2 <HAL_TIM_PWM_Start+0xaa>
 80052ca:	683b      	ldr	r3, [r7, #0]
 80052cc:	2b08      	cmp	r3, #8
 80052ce:	d104      	bne.n	80052da <HAL_TIM_PWM_Start+0xa2>
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2202      	movs	r2, #2
 80052d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052d8:	e003      	b.n	80052e2 <HAL_TIM_PWM_Start+0xaa>
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2202      	movs	r2, #2
 80052de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	681b      	ldr	r3, [r3, #0]
 80052e6:	2201      	movs	r2, #1
 80052e8:	6839      	ldr	r1, [r7, #0]
 80052ea:	4618      	mov	r0, r3
 80052ec:	f000 fe08 	bl	8005f00 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	4a2d      	ldr	r2, [pc, #180]	; (80053ac <HAL_TIM_PWM_Start+0x174>)
 80052f6:	4293      	cmp	r3, r2
 80052f8:	d004      	beq.n	8005304 <HAL_TIM_PWM_Start+0xcc>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	4a2c      	ldr	r2, [pc, #176]	; (80053b0 <HAL_TIM_PWM_Start+0x178>)
 8005300:	4293      	cmp	r3, r2
 8005302:	d101      	bne.n	8005308 <HAL_TIM_PWM_Start+0xd0>
 8005304:	2301      	movs	r3, #1
 8005306:	e000      	b.n	800530a <HAL_TIM_PWM_Start+0xd2>
 8005308:	2300      	movs	r3, #0
 800530a:	2b00      	cmp	r3, #0
 800530c:	d007      	beq.n	800531e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800531c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	4a22      	ldr	r2, [pc, #136]	; (80053ac <HAL_TIM_PWM_Start+0x174>)
 8005324:	4293      	cmp	r3, r2
 8005326:	d022      	beq.n	800536e <HAL_TIM_PWM_Start+0x136>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005330:	d01d      	beq.n	800536e <HAL_TIM_PWM_Start+0x136>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <HAL_TIM_PWM_Start+0x17c>)
 8005338:	4293      	cmp	r3, r2
 800533a:	d018      	beq.n	800536e <HAL_TIM_PWM_Start+0x136>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a1d      	ldr	r2, [pc, #116]	; (80053b8 <HAL_TIM_PWM_Start+0x180>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d013      	beq.n	800536e <HAL_TIM_PWM_Start+0x136>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	4a1c      	ldr	r2, [pc, #112]	; (80053bc <HAL_TIM_PWM_Start+0x184>)
 800534c:	4293      	cmp	r3, r2
 800534e:	d00e      	beq.n	800536e <HAL_TIM_PWM_Start+0x136>
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	4a16      	ldr	r2, [pc, #88]	; (80053b0 <HAL_TIM_PWM_Start+0x178>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d009      	beq.n	800536e <HAL_TIM_PWM_Start+0x136>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	4a18      	ldr	r2, [pc, #96]	; (80053c0 <HAL_TIM_PWM_Start+0x188>)
 8005360:	4293      	cmp	r3, r2
 8005362:	d004      	beq.n	800536e <HAL_TIM_PWM_Start+0x136>
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	4a16      	ldr	r2, [pc, #88]	; (80053c4 <HAL_TIM_PWM_Start+0x18c>)
 800536a:	4293      	cmp	r3, r2
 800536c:	d111      	bne.n	8005392 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 0307 	and.w	r3, r3, #7
 8005378:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	2b06      	cmp	r3, #6
 800537e:	d010      	beq.n	80053a2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	681a      	ldr	r2, [r3, #0]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f042 0201 	orr.w	r2, r2, #1
 800538e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005390:	e007      	b.n	80053a2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	681a      	ldr	r2, [r3, #0]
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f042 0201 	orr.w	r2, r2, #1
 80053a0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80053a2:	2300      	movs	r3, #0
}
 80053a4:	4618      	mov	r0, r3
 80053a6:	3710      	adds	r7, #16
 80053a8:	46bd      	mov	sp, r7
 80053aa:	bd80      	pop	{r7, pc}
 80053ac:	40010000 	.word	0x40010000
 80053b0:	40010400 	.word	0x40010400
 80053b4:	40000400 	.word	0x40000400
 80053b8:	40000800 	.word	0x40000800
 80053bc:	40000c00 	.word	0x40000c00
 80053c0:	40014000 	.word	0x40014000
 80053c4:	40001800 	.word	0x40001800

080053c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80053c8:	b580      	push	{r7, lr}
 80053ca:	b082      	sub	sp, #8
 80053cc:	af00      	add	r7, sp, #0
 80053ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d122      	bne.n	8005424 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0302 	and.w	r3, r3, #2
 80053e8:	2b02      	cmp	r3, #2
 80053ea:	d11b      	bne.n	8005424 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0202 	mvn.w	r2, #2
 80053f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2201      	movs	r2, #1
 80053fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	f003 0303 	and.w	r3, r3, #3
 8005406:	2b00      	cmp	r3, #0
 8005408:	d003      	beq.n	8005412 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800540a:	6878      	ldr	r0, [r7, #4]
 800540c:	f000 fa70 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 8005410:	e005      	b.n	800541e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005412:	6878      	ldr	r0, [r7, #4]
 8005414:	f000 fa62 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fa73 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	2200      	movs	r2, #0
 8005422:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	f003 0304 	and.w	r3, r3, #4
 800542e:	2b04      	cmp	r3, #4
 8005430:	d122      	bne.n	8005478 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	68db      	ldr	r3, [r3, #12]
 8005438:	f003 0304 	and.w	r3, r3, #4
 800543c:	2b04      	cmp	r3, #4
 800543e:	d11b      	bne.n	8005478 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f06f 0204 	mvn.w	r2, #4
 8005448:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2202      	movs	r2, #2
 800544e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	699b      	ldr	r3, [r3, #24]
 8005456:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800545a:	2b00      	cmp	r3, #0
 800545c:	d003      	beq.n	8005466 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800545e:	6878      	ldr	r0, [r7, #4]
 8005460:	f000 fa46 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 8005464:	e005      	b.n	8005472 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f000 fa38 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800546c:	6878      	ldr	r0, [r7, #4]
 800546e:	f000 fa49 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	2200      	movs	r2, #0
 8005476:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	691b      	ldr	r3, [r3, #16]
 800547e:	f003 0308 	and.w	r3, r3, #8
 8005482:	2b08      	cmp	r3, #8
 8005484:	d122      	bne.n	80054cc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	68db      	ldr	r3, [r3, #12]
 800548c:	f003 0308 	and.w	r3, r3, #8
 8005490:	2b08      	cmp	r3, #8
 8005492:	d11b      	bne.n	80054cc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f06f 0208 	mvn.w	r2, #8
 800549c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	2204      	movs	r2, #4
 80054a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	69db      	ldr	r3, [r3, #28]
 80054aa:	f003 0303 	and.w	r3, r3, #3
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d003      	beq.n	80054ba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f000 fa1c 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 80054b8:	e005      	b.n	80054c6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80054ba:	6878      	ldr	r0, [r7, #4]
 80054bc:	f000 fa0e 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80054c0:	6878      	ldr	r0, [r7, #4]
 80054c2:	f000 fa1f 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	f003 0310 	and.w	r3, r3, #16
 80054d6:	2b10      	cmp	r3, #16
 80054d8:	d122      	bne.n	8005520 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	68db      	ldr	r3, [r3, #12]
 80054e0:	f003 0310 	and.w	r3, r3, #16
 80054e4:	2b10      	cmp	r3, #16
 80054e6:	d11b      	bne.n	8005520 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	f06f 0210 	mvn.w	r2, #16
 80054f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	2208      	movs	r2, #8
 80054f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	69db      	ldr	r3, [r3, #28]
 80054fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005502:	2b00      	cmp	r3, #0
 8005504:	d003      	beq.n	800550e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f000 f9f2 	bl	80058f0 <HAL_TIM_IC_CaptureCallback>
 800550c:	e005      	b.n	800551a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800550e:	6878      	ldr	r0, [r7, #4]
 8005510:	f000 f9e4 	bl	80058dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005514:	6878      	ldr	r0, [r7, #4]
 8005516:	f000 f9f5 	bl	8005904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	2200      	movs	r2, #0
 800551e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	f003 0301 	and.w	r3, r3, #1
 800552a:	2b01      	cmp	r3, #1
 800552c:	d10e      	bne.n	800554c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800552e:	687b      	ldr	r3, [r7, #4]
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	68db      	ldr	r3, [r3, #12]
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	2b01      	cmp	r3, #1
 800553a:	d107      	bne.n	800554c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	f06f 0201 	mvn.w	r2, #1
 8005544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005546:	6878      	ldr	r0, [r7, #4]
 8005548:	f7fc f834 	bl	80015b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	691b      	ldr	r3, [r3, #16]
 8005552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005556:	2b80      	cmp	r3, #128	; 0x80
 8005558:	d10e      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	68db      	ldr	r3, [r3, #12]
 8005560:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005564:	2b80      	cmp	r3, #128	; 0x80
 8005566:	d107      	bne.n	8005578 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005572:	6878      	ldr	r0, [r7, #4]
 8005574:	f000 fdc2 	bl	80060fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	691b      	ldr	r3, [r3, #16]
 800557e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005582:	2b40      	cmp	r3, #64	; 0x40
 8005584:	d10e      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	681b      	ldr	r3, [r3, #0]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005590:	2b40      	cmp	r3, #64	; 0x40
 8005592:	d107      	bne.n	80055a4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800559c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800559e:	6878      	ldr	r0, [r7, #4]
 80055a0:	f000 f9ba 	bl	8005918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	691b      	ldr	r3, [r3, #16]
 80055aa:	f003 0320 	and.w	r3, r3, #32
 80055ae:	2b20      	cmp	r3, #32
 80055b0:	d10e      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	f003 0320 	and.w	r3, r3, #32
 80055bc:	2b20      	cmp	r3, #32
 80055be:	d107      	bne.n	80055d0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f06f 0220 	mvn.w	r2, #32
 80055c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f000 fd8c 	bl	80060e8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80055d0:	bf00      	nop
 80055d2:	3708      	adds	r7, #8
 80055d4:	46bd      	mov	sp, r7
 80055d6:	bd80      	pop	{r7, pc}

080055d8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80055d8:	b580      	push	{r7, lr}
 80055da:	b084      	sub	sp, #16
 80055dc:	af00      	add	r7, sp, #0
 80055de:	60f8      	str	r0, [r7, #12]
 80055e0:	60b9      	str	r1, [r7, #8]
 80055e2:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80055ea:	2b01      	cmp	r3, #1
 80055ec:	d101      	bne.n	80055f2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80055ee:	2302      	movs	r3, #2
 80055f0:	e0ac      	b.n	800574c <HAL_TIM_PWM_ConfigChannel+0x174>
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2201      	movs	r2, #1
 80055f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	2b0c      	cmp	r3, #12
 80055fe:	f200 809f 	bhi.w	8005740 <HAL_TIM_PWM_ConfigChannel+0x168>
 8005602:	a201      	add	r2, pc, #4	; (adr r2, 8005608 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8005604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005608:	0800563d 	.word	0x0800563d
 800560c:	08005741 	.word	0x08005741
 8005610:	08005741 	.word	0x08005741
 8005614:	08005741 	.word	0x08005741
 8005618:	0800567d 	.word	0x0800567d
 800561c:	08005741 	.word	0x08005741
 8005620:	08005741 	.word	0x08005741
 8005624:	08005741 	.word	0x08005741
 8005628:	080056bf 	.word	0x080056bf
 800562c:	08005741 	.word	0x08005741
 8005630:	08005741 	.word	0x08005741
 8005634:	08005741 	.word	0x08005741
 8005638:	080056ff 	.word	0x080056ff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	68b9      	ldr	r1, [r7, #8]
 8005642:	4618      	mov	r0, r3
 8005644:	f000 fa12 	bl	8005a6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	699a      	ldr	r2, [r3, #24]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	f042 0208 	orr.w	r2, r2, #8
 8005656:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	699a      	ldr	r2, [r3, #24]
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f022 0204 	bic.w	r2, r2, #4
 8005666:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	6999      	ldr	r1, [r3, #24]
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	691a      	ldr	r2, [r3, #16]
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	430a      	orrs	r2, r1
 8005678:	619a      	str	r2, [r3, #24]
      break;
 800567a:	e062      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	68b9      	ldr	r1, [r7, #8]
 8005682:	4618      	mov	r0, r3
 8005684:	f000 fa62 	bl	8005b4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	699a      	ldr	r2, [r3, #24]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005696:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	699a      	ldr	r2, [r3, #24]
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	681b      	ldr	r3, [r3, #0]
 80056ac:	6999      	ldr	r1, [r3, #24]
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	691b      	ldr	r3, [r3, #16]
 80056b2:	021a      	lsls	r2, r3, #8
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	430a      	orrs	r2, r1
 80056ba:	619a      	str	r2, [r3, #24]
      break;
 80056bc:	e041      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	68b9      	ldr	r1, [r7, #8]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fab7 	bl	8005c38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	69da      	ldr	r2, [r3, #28]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	f042 0208 	orr.w	r2, r2, #8
 80056d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	69da      	ldr	r2, [r3, #28]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f022 0204 	bic.w	r2, r2, #4
 80056e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	69d9      	ldr	r1, [r3, #28]
 80056f0:	68bb      	ldr	r3, [r7, #8]
 80056f2:	691a      	ldr	r2, [r3, #16]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	430a      	orrs	r2, r1
 80056fa:	61da      	str	r2, [r3, #28]
      break;
 80056fc:	e021      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	4618      	mov	r0, r3
 8005706:	f000 fb0b 	bl	8005d20 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	69da      	ldr	r2, [r3, #28]
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005718:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	69da      	ldr	r2, [r3, #28]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005728:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	69d9      	ldr	r1, [r3, #28]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	691b      	ldr	r3, [r3, #16]
 8005734:	021a      	lsls	r2, r3, #8
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	430a      	orrs	r2, r1
 800573c:	61da      	str	r2, [r3, #28]
      break;
 800573e:	e000      	b.n	8005742 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8005740:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	2200      	movs	r2, #0
 8005746:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800574a:	2300      	movs	r3, #0
}
 800574c:	4618      	mov	r0, r3
 800574e:	3710      	adds	r7, #16
 8005750:	46bd      	mov	sp, r7
 8005752:	bd80      	pop	{r7, pc}

08005754 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b084      	sub	sp, #16
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005764:	2b01      	cmp	r3, #1
 8005766:	d101      	bne.n	800576c <HAL_TIM_ConfigClockSource+0x18>
 8005768:	2302      	movs	r3, #2
 800576a:	e0b3      	b.n	80058d4 <HAL_TIM_ConfigClockSource+0x180>
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	2202      	movs	r2, #2
 8005778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800578a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005792:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	68fa      	ldr	r2, [r7, #12]
 800579a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800579c:	683b      	ldr	r3, [r7, #0]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057a4:	d03e      	beq.n	8005824 <HAL_TIM_ConfigClockSource+0xd0>
 80057a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80057aa:	f200 8087 	bhi.w	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057ae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057b2:	f000 8085 	beq.w	80058c0 <HAL_TIM_ConfigClockSource+0x16c>
 80057b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80057ba:	d87f      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057bc:	2b70      	cmp	r3, #112	; 0x70
 80057be:	d01a      	beq.n	80057f6 <HAL_TIM_ConfigClockSource+0xa2>
 80057c0:	2b70      	cmp	r3, #112	; 0x70
 80057c2:	d87b      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057c4:	2b60      	cmp	r3, #96	; 0x60
 80057c6:	d050      	beq.n	800586a <HAL_TIM_ConfigClockSource+0x116>
 80057c8:	2b60      	cmp	r3, #96	; 0x60
 80057ca:	d877      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057cc:	2b50      	cmp	r3, #80	; 0x50
 80057ce:	d03c      	beq.n	800584a <HAL_TIM_ConfigClockSource+0xf6>
 80057d0:	2b50      	cmp	r3, #80	; 0x50
 80057d2:	d873      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057d4:	2b40      	cmp	r3, #64	; 0x40
 80057d6:	d058      	beq.n	800588a <HAL_TIM_ConfigClockSource+0x136>
 80057d8:	2b40      	cmp	r3, #64	; 0x40
 80057da:	d86f      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057dc:	2b30      	cmp	r3, #48	; 0x30
 80057de:	d064      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x156>
 80057e0:	2b30      	cmp	r3, #48	; 0x30
 80057e2:	d86b      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057e4:	2b20      	cmp	r3, #32
 80057e6:	d060      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x156>
 80057e8:	2b20      	cmp	r3, #32
 80057ea:	d867      	bhi.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d05c      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x156>
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d05a      	beq.n	80058aa <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80057f4:	e062      	b.n	80058bc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6818      	ldr	r0, [r3, #0]
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	6899      	ldr	r1, [r3, #8]
 80057fe:	683b      	ldr	r3, [r7, #0]
 8005800:	685a      	ldr	r2, [r3, #4]
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	68db      	ldr	r3, [r3, #12]
 8005806:	f000 fb5b 	bl	8005ec0 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	689b      	ldr	r3, [r3, #8]
 8005810:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005818:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	609a      	str	r2, [r3, #8]
      break;
 8005822:	e04e      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	6818      	ldr	r0, [r3, #0]
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	6899      	ldr	r1, [r3, #8]
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	685a      	ldr	r2, [r3, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	f000 fb44 	bl	8005ec0 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	689a      	ldr	r2, [r3, #8]
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005846:	609a      	str	r2, [r3, #8]
      break;
 8005848:	e03b      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	6818      	ldr	r0, [r3, #0]
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	6859      	ldr	r1, [r3, #4]
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	68db      	ldr	r3, [r3, #12]
 8005856:	461a      	mov	r2, r3
 8005858:	f000 fab8 	bl	8005dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	2150      	movs	r1, #80	; 0x50
 8005862:	4618      	mov	r0, r3
 8005864:	f000 fb11 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005868:	e02b      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6818      	ldr	r0, [r3, #0]
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	6859      	ldr	r1, [r3, #4]
 8005872:	683b      	ldr	r3, [r7, #0]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	461a      	mov	r2, r3
 8005878:	f000 fad7 	bl	8005e2a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2160      	movs	r1, #96	; 0x60
 8005882:	4618      	mov	r0, r3
 8005884:	f000 fb01 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 8005888:	e01b      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6818      	ldr	r0, [r3, #0]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	6859      	ldr	r1, [r3, #4]
 8005892:	683b      	ldr	r3, [r7, #0]
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	461a      	mov	r2, r3
 8005898:	f000 fa98 	bl	8005dcc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2140      	movs	r1, #64	; 0x40
 80058a2:	4618      	mov	r0, r3
 80058a4:	f000 faf1 	bl	8005e8a <TIM_ITRx_SetConfig>
      break;
 80058a8:	e00b      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681a      	ldr	r2, [r3, #0]
 80058ae:	683b      	ldr	r3, [r7, #0]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	4619      	mov	r1, r3
 80058b4:	4610      	mov	r0, r2
 80058b6:	f000 fae8 	bl	8005e8a <TIM_ITRx_SetConfig>
        break;
 80058ba:	e002      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058bc:	bf00      	nop
 80058be:	e000      	b.n	80058c2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80058c0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	2201      	movs	r2, #1
 80058c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2200      	movs	r2, #0
 80058ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058d2:	2300      	movs	r3, #0
}
 80058d4:	4618      	mov	r0, r3
 80058d6:	3710      	adds	r7, #16
 80058d8:	46bd      	mov	sp, r7
 80058da:	bd80      	pop	{r7, pc}

080058dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80058dc:	b480      	push	{r7}
 80058de:	b083      	sub	sp, #12
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80058e4:	bf00      	nop
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80058f0:	b480      	push	{r7}
 80058f2:	b083      	sub	sp, #12
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80058f8:	bf00      	nop
 80058fa:	370c      	adds	r7, #12
 80058fc:	46bd      	mov	sp, r7
 80058fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005902:	4770      	bx	lr

08005904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005904:	b480      	push	{r7}
 8005906:	b083      	sub	sp, #12
 8005908:	af00      	add	r7, sp, #0
 800590a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800590c:	bf00      	nop
 800590e:	370c      	adds	r7, #12
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005918:	b480      	push	{r7}
 800591a:	b083      	sub	sp, #12
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005920:	bf00      	nop
 8005922:	370c      	adds	r7, #12
 8005924:	46bd      	mov	sp, r7
 8005926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592a:	4770      	bx	lr

0800592c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800592c:	b480      	push	{r7}
 800592e:	b085      	sub	sp, #20
 8005930:	af00      	add	r7, sp, #0
 8005932:	6078      	str	r0, [r7, #4]
 8005934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a40      	ldr	r2, [pc, #256]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d013      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800594a:	d00f      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a3d      	ldr	r2, [pc, #244]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d00b      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a3c      	ldr	r2, [pc, #240]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d007      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a3b      	ldr	r2, [pc, #236]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d003      	beq.n	800596c <TIM_Base_SetConfig+0x40>
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	4a3a      	ldr	r2, [pc, #232]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d108      	bne.n	800597e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005974:	683b      	ldr	r3, [r7, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	68fa      	ldr	r2, [r7, #12]
 800597a:	4313      	orrs	r3, r2
 800597c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a2f      	ldr	r2, [pc, #188]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d02b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800598c:	d027      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a2c      	ldr	r2, [pc, #176]	; (8005a44 <TIM_Base_SetConfig+0x118>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d023      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a2b      	ldr	r2, [pc, #172]	; (8005a48 <TIM_Base_SetConfig+0x11c>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d01f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a2a      	ldr	r2, [pc, #168]	; (8005a4c <TIM_Base_SetConfig+0x120>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d01b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a29      	ldr	r2, [pc, #164]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d017      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	4a28      	ldr	r2, [pc, #160]	; (8005a54 <TIM_Base_SetConfig+0x128>)
 80059b2:	4293      	cmp	r3, r2
 80059b4:	d013      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	4a27      	ldr	r2, [pc, #156]	; (8005a58 <TIM_Base_SetConfig+0x12c>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d00f      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	4a26      	ldr	r2, [pc, #152]	; (8005a5c <TIM_Base_SetConfig+0x130>)
 80059c2:	4293      	cmp	r3, r2
 80059c4:	d00b      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	4a25      	ldr	r2, [pc, #148]	; (8005a60 <TIM_Base_SetConfig+0x134>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d007      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	4a24      	ldr	r2, [pc, #144]	; (8005a64 <TIM_Base_SetConfig+0x138>)
 80059d2:	4293      	cmp	r3, r2
 80059d4:	d003      	beq.n	80059de <TIM_Base_SetConfig+0xb2>
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	4a23      	ldr	r2, [pc, #140]	; (8005a68 <TIM_Base_SetConfig+0x13c>)
 80059da:	4293      	cmp	r3, r2
 80059dc:	d108      	bne.n	80059f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80059e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	68db      	ldr	r3, [r3, #12]
 80059ea:	68fa      	ldr	r2, [r7, #12]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	695b      	ldr	r3, [r3, #20]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	68fa      	ldr	r2, [r7, #12]
 8005a02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689a      	ldr	r2, [r3, #8]
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	4a0a      	ldr	r2, [pc, #40]	; (8005a40 <TIM_Base_SetConfig+0x114>)
 8005a18:	4293      	cmp	r3, r2
 8005a1a:	d003      	beq.n	8005a24 <TIM_Base_SetConfig+0xf8>
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a0c      	ldr	r2, [pc, #48]	; (8005a50 <TIM_Base_SetConfig+0x124>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	691a      	ldr	r2, [r3, #16]
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	615a      	str	r2, [r3, #20]
}
 8005a32:	bf00      	nop
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40010000 	.word	0x40010000
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40000c00 	.word	0x40000c00
 8005a50:	40010400 	.word	0x40010400
 8005a54:	40014000 	.word	0x40014000
 8005a58:	40014400 	.word	0x40014400
 8005a5c:	40014800 	.word	0x40014800
 8005a60:	40001800 	.word	0x40001800
 8005a64:	40001c00 	.word	0x40001c00
 8005a68:	40002000 	.word	0x40002000

08005a6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a6c:	b480      	push	{r7}
 8005a6e:	b087      	sub	sp, #28
 8005a70:	af00      	add	r7, sp, #0
 8005a72:	6078      	str	r0, [r7, #4]
 8005a74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6a1b      	ldr	r3, [r3, #32]
 8005a7a:	f023 0201 	bic.w	r2, r3, #1
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6a1b      	ldr	r3, [r3, #32]
 8005a86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	699b      	ldr	r3, [r3, #24]
 8005a92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005a9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f023 0303 	bic.w	r3, r3, #3
 8005aa2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	68fa      	ldr	r2, [r7, #12]
 8005aaa:	4313      	orrs	r3, r2
 8005aac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005aae:	697b      	ldr	r3, [r7, #20]
 8005ab0:	f023 0302 	bic.w	r3, r3, #2
 8005ab4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005ab6:	683b      	ldr	r3, [r7, #0]
 8005ab8:	689b      	ldr	r3, [r3, #8]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	4313      	orrs	r3, r2
 8005abe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a20      	ldr	r2, [pc, #128]	; (8005b44 <TIM_OC1_SetConfig+0xd8>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC1_SetConfig+0x64>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a1f      	ldr	r2, [pc, #124]	; (8005b48 <TIM_OC1_SetConfig+0xdc>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d10c      	bne.n	8005aea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005ad0:	697b      	ldr	r3, [r7, #20]
 8005ad2:	f023 0308 	bic.w	r3, r3, #8
 8005ad6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ad8:	683b      	ldr	r3, [r7, #0]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	697a      	ldr	r2, [r7, #20]
 8005ade:	4313      	orrs	r3, r2
 8005ae0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005ae2:	697b      	ldr	r3, [r7, #20]
 8005ae4:	f023 0304 	bic.w	r3, r3, #4
 8005ae8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	4a15      	ldr	r2, [pc, #84]	; (8005b44 <TIM_OC1_SetConfig+0xd8>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d003      	beq.n	8005afa <TIM_OC1_SetConfig+0x8e>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	4a14      	ldr	r2, [pc, #80]	; (8005b48 <TIM_OC1_SetConfig+0xdc>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d111      	bne.n	8005b1e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005afa:	693b      	ldr	r3, [r7, #16]
 8005afc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005b00:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005b02:	693b      	ldr	r3, [r7, #16]
 8005b04:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b08:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	695b      	ldr	r3, [r3, #20]
 8005b0e:	693a      	ldr	r2, [r7, #16]
 8005b10:	4313      	orrs	r3, r2
 8005b12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005b14:	683b      	ldr	r3, [r7, #0]
 8005b16:	699b      	ldr	r3, [r3, #24]
 8005b18:	693a      	ldr	r2, [r7, #16]
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	693a      	ldr	r2, [r7, #16]
 8005b22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005b2a:	683b      	ldr	r3, [r7, #0]
 8005b2c:	685a      	ldr	r2, [r3, #4]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	621a      	str	r2, [r3, #32]
}
 8005b38:	bf00      	nop
 8005b3a:	371c      	adds	r7, #28
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr
 8005b44:	40010000 	.word	0x40010000
 8005b48:	40010400 	.word	0x40010400

08005b4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b087      	sub	sp, #28
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6a1b      	ldr	r3, [r3, #32]
 8005b5a:	f023 0210 	bic.w	r2, r3, #16
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6a1b      	ldr	r3, [r3, #32]
 8005b66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005b7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005b82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005b84:	683b      	ldr	r3, [r7, #0]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	021b      	lsls	r3, r3, #8
 8005b8a:	68fa      	ldr	r2, [r7, #12]
 8005b8c:	4313      	orrs	r3, r2
 8005b8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	f023 0320 	bic.w	r3, r3, #32
 8005b96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	689b      	ldr	r3, [r3, #8]
 8005b9c:	011b      	lsls	r3, r3, #4
 8005b9e:	697a      	ldr	r2, [r7, #20]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	4a22      	ldr	r2, [pc, #136]	; (8005c30 <TIM_OC2_SetConfig+0xe4>)
 8005ba8:	4293      	cmp	r3, r2
 8005baa:	d003      	beq.n	8005bb4 <TIM_OC2_SetConfig+0x68>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	4a21      	ldr	r2, [pc, #132]	; (8005c34 <TIM_OC2_SetConfig+0xe8>)
 8005bb0:	4293      	cmp	r3, r2
 8005bb2:	d10d      	bne.n	8005bd0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005bba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	68db      	ldr	r3, [r3, #12]
 8005bc0:	011b      	lsls	r3, r3, #4
 8005bc2:	697a      	ldr	r2, [r7, #20]
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005bc8:	697b      	ldr	r3, [r7, #20]
 8005bca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005bce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	4a17      	ldr	r2, [pc, #92]	; (8005c30 <TIM_OC2_SetConfig+0xe4>)
 8005bd4:	4293      	cmp	r3, r2
 8005bd6:	d003      	beq.n	8005be0 <TIM_OC2_SetConfig+0x94>
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	4a16      	ldr	r2, [pc, #88]	; (8005c34 <TIM_OC2_SetConfig+0xe8>)
 8005bdc:	4293      	cmp	r3, r2
 8005bde:	d113      	bne.n	8005c08 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005be0:	693b      	ldr	r3, [r7, #16]
 8005be2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005be6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005be8:	693b      	ldr	r3, [r7, #16]
 8005bea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	695b      	ldr	r3, [r3, #20]
 8005bf4:	009b      	lsls	r3, r3, #2
 8005bf6:	693a      	ldr	r2, [r7, #16]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	699b      	ldr	r3, [r3, #24]
 8005c00:	009b      	lsls	r3, r3, #2
 8005c02:	693a      	ldr	r2, [r7, #16]
 8005c04:	4313      	orrs	r3, r2
 8005c06:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	693a      	ldr	r2, [r7, #16]
 8005c0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	68fa      	ldr	r2, [r7, #12]
 8005c12:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	685a      	ldr	r2, [r3, #4]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	697a      	ldr	r2, [r7, #20]
 8005c20:	621a      	str	r2, [r3, #32]
}
 8005c22:	bf00      	nop
 8005c24:	371c      	adds	r7, #28
 8005c26:	46bd      	mov	sp, r7
 8005c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2c:	4770      	bx	lr
 8005c2e:	bf00      	nop
 8005c30:	40010000 	.word	0x40010000
 8005c34:	40010400 	.word	0x40010400

08005c38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b087      	sub	sp, #28
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6a1b      	ldr	r3, [r3, #32]
 8005c46:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6a1b      	ldr	r3, [r3, #32]
 8005c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	685b      	ldr	r3, [r3, #4]
 8005c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	69db      	ldr	r3, [r3, #28]
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005c66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f023 0303 	bic.w	r3, r3, #3
 8005c6e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005c70:	683b      	ldr	r3, [r7, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	68fa      	ldr	r2, [r7, #12]
 8005c76:	4313      	orrs	r3, r2
 8005c78:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005c7a:	697b      	ldr	r3, [r7, #20]
 8005c7c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005c80:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005c82:	683b      	ldr	r3, [r7, #0]
 8005c84:	689b      	ldr	r3, [r3, #8]
 8005c86:	021b      	lsls	r3, r3, #8
 8005c88:	697a      	ldr	r2, [r7, #20]
 8005c8a:	4313      	orrs	r3, r2
 8005c8c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	4a21      	ldr	r2, [pc, #132]	; (8005d18 <TIM_OC3_SetConfig+0xe0>)
 8005c92:	4293      	cmp	r3, r2
 8005c94:	d003      	beq.n	8005c9e <TIM_OC3_SetConfig+0x66>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	4a20      	ldr	r2, [pc, #128]	; (8005d1c <TIM_OC3_SetConfig+0xe4>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d10d      	bne.n	8005cba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005c9e:	697b      	ldr	r3, [r7, #20]
 8005ca0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ca4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	68db      	ldr	r3, [r3, #12]
 8005caa:	021b      	lsls	r3, r3, #8
 8005cac:	697a      	ldr	r2, [r7, #20]
 8005cae:	4313      	orrs	r3, r2
 8005cb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005cb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	4a16      	ldr	r2, [pc, #88]	; (8005d18 <TIM_OC3_SetConfig+0xe0>)
 8005cbe:	4293      	cmp	r3, r2
 8005cc0:	d003      	beq.n	8005cca <TIM_OC3_SetConfig+0x92>
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	4a15      	ldr	r2, [pc, #84]	; (8005d1c <TIM_OC3_SetConfig+0xe4>)
 8005cc6:	4293      	cmp	r3, r2
 8005cc8:	d113      	bne.n	8005cf2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005cd0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005cd8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005cda:	683b      	ldr	r3, [r7, #0]
 8005cdc:	695b      	ldr	r3, [r3, #20]
 8005cde:	011b      	lsls	r3, r3, #4
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4313      	orrs	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	699b      	ldr	r3, [r3, #24]
 8005cea:	011b      	lsls	r3, r3, #4
 8005cec:	693a      	ldr	r2, [r7, #16]
 8005cee:	4313      	orrs	r3, r2
 8005cf0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	693a      	ldr	r2, [r7, #16]
 8005cf6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68fa      	ldr	r2, [r7, #12]
 8005cfc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	685a      	ldr	r2, [r3, #4]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	621a      	str	r2, [r3, #32]
}
 8005d0c:	bf00      	nop
 8005d0e:	371c      	adds	r7, #28
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr
 8005d18:	40010000 	.word	0x40010000
 8005d1c:	40010400 	.word	0x40010400

08005d20 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005d20:	b480      	push	{r7}
 8005d22:	b087      	sub	sp, #28
 8005d24:	af00      	add	r7, sp, #0
 8005d26:	6078      	str	r0, [r7, #4]
 8005d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6a1b      	ldr	r3, [r3, #32]
 8005d2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6a1b      	ldr	r3, [r3, #32]
 8005d3a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	685b      	ldr	r3, [r3, #4]
 8005d40:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	69db      	ldr	r3, [r3, #28]
 8005d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	021b      	lsls	r3, r3, #8
 8005d5e:	68fa      	ldr	r2, [r7, #12]
 8005d60:	4313      	orrs	r3, r2
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005d64:	693b      	ldr	r3, [r7, #16]
 8005d66:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005d6a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005d6c:	683b      	ldr	r3, [r7, #0]
 8005d6e:	689b      	ldr	r3, [r3, #8]
 8005d70:	031b      	lsls	r3, r3, #12
 8005d72:	693a      	ldr	r2, [r7, #16]
 8005d74:	4313      	orrs	r3, r2
 8005d76:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	4a12      	ldr	r2, [pc, #72]	; (8005dc4 <TIM_OC4_SetConfig+0xa4>)
 8005d7c:	4293      	cmp	r3, r2
 8005d7e:	d003      	beq.n	8005d88 <TIM_OC4_SetConfig+0x68>
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a11      	ldr	r2, [pc, #68]	; (8005dc8 <TIM_OC4_SetConfig+0xa8>)
 8005d84:	4293      	cmp	r3, r2
 8005d86:	d109      	bne.n	8005d9c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d8e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	695b      	ldr	r3, [r3, #20]
 8005d94:	019b      	lsls	r3, r3, #6
 8005d96:	697a      	ldr	r2, [r7, #20]
 8005d98:	4313      	orrs	r3, r2
 8005d9a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	68fa      	ldr	r2, [r7, #12]
 8005da6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	693a      	ldr	r2, [r7, #16]
 8005db4:	621a      	str	r2, [r3, #32]
}
 8005db6:	bf00      	nop
 8005db8:	371c      	adds	r7, #28
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40010000 	.word	0x40010000
 8005dc8:	40010400 	.word	0x40010400

08005dcc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	60f8      	str	r0, [r7, #12]
 8005dd4:	60b9      	str	r1, [r7, #8]
 8005dd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	6a1b      	ldr	r3, [r3, #32]
 8005ddc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005dde:	68fb      	ldr	r3, [r7, #12]
 8005de0:	6a1b      	ldr	r3, [r3, #32]
 8005de2:	f023 0201 	bic.w	r2, r3, #1
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	699b      	ldr	r3, [r3, #24]
 8005dee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005df6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	011b      	lsls	r3, r3, #4
 8005dfc:	693a      	ldr	r2, [r7, #16]
 8005dfe:	4313      	orrs	r3, r2
 8005e00:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f023 030a 	bic.w	r3, r3, #10
 8005e08:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005e0a:	697a      	ldr	r2, [r7, #20]
 8005e0c:	68bb      	ldr	r3, [r7, #8]
 8005e0e:	4313      	orrs	r3, r2
 8005e10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	693a      	ldr	r2, [r7, #16]
 8005e16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	621a      	str	r2, [r3, #32]
}
 8005e1e:	bf00      	nop
 8005e20:	371c      	adds	r7, #28
 8005e22:	46bd      	mov	sp, r7
 8005e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e28:	4770      	bx	lr

08005e2a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e2a:	b480      	push	{r7}
 8005e2c:	b087      	sub	sp, #28
 8005e2e:	af00      	add	r7, sp, #0
 8005e30:	60f8      	str	r0, [r7, #12]
 8005e32:	60b9      	str	r1, [r7, #8]
 8005e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	6a1b      	ldr	r3, [r3, #32]
 8005e3a:	f023 0210 	bic.w	r2, r3, #16
 8005e3e:	68fb      	ldr	r3, [r7, #12]
 8005e40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	6a1b      	ldr	r3, [r3, #32]
 8005e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e4e:	697b      	ldr	r3, [r7, #20]
 8005e50:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	031b      	lsls	r3, r3, #12
 8005e5a:	697a      	ldr	r2, [r7, #20]
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e66:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	011b      	lsls	r3, r3, #4
 8005e6c:	693a      	ldr	r2, [r7, #16]
 8005e6e:	4313      	orrs	r3, r2
 8005e70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	697a      	ldr	r2, [r7, #20]
 8005e76:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	693a      	ldr	r2, [r7, #16]
 8005e7c:	621a      	str	r2, [r3, #32]
}
 8005e7e:	bf00      	nop
 8005e80:	371c      	adds	r7, #28
 8005e82:	46bd      	mov	sp, r7
 8005e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e88:	4770      	bx	lr

08005e8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005e8a:	b480      	push	{r7}
 8005e8c:	b085      	sub	sp, #20
 8005e8e:	af00      	add	r7, sp, #0
 8005e90:	6078      	str	r0, [r7, #4]
 8005e92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	689b      	ldr	r3, [r3, #8]
 8005e98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005ea0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005ea2:	683a      	ldr	r2, [r7, #0]
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	f043 0307 	orr.w	r3, r3, #7
 8005eac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	68fa      	ldr	r2, [r7, #12]
 8005eb2:	609a      	str	r2, [r3, #8]
}
 8005eb4:	bf00      	nop
 8005eb6:	3714      	adds	r7, #20
 8005eb8:	46bd      	mov	sp, r7
 8005eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ebe:	4770      	bx	lr

08005ec0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005ec0:	b480      	push	{r7}
 8005ec2:	b087      	sub	sp, #28
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	60f8      	str	r0, [r7, #12]
 8005ec8:	60b9      	str	r1, [r7, #8]
 8005eca:	607a      	str	r2, [r7, #4]
 8005ecc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	689b      	ldr	r3, [r3, #8]
 8005ed2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005ed4:	697b      	ldr	r3, [r7, #20]
 8005ed6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005eda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	021a      	lsls	r2, r3, #8
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	431a      	orrs	r2, r3
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	4313      	orrs	r3, r2
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	609a      	str	r2, [r3, #8]
}
 8005ef4:	bf00      	nop
 8005ef6:	371c      	adds	r7, #28
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr

08005f00 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005f00:	b480      	push	{r7}
 8005f02:	b087      	sub	sp, #28
 8005f04:	af00      	add	r7, sp, #0
 8005f06:	60f8      	str	r0, [r7, #12]
 8005f08:	60b9      	str	r1, [r7, #8]
 8005f0a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	f003 031f 	and.w	r3, r3, #31
 8005f12:	2201      	movs	r2, #1
 8005f14:	fa02 f303 	lsl.w	r3, r2, r3
 8005f18:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6a1a      	ldr	r2, [r3, #32]
 8005f1e:	697b      	ldr	r3, [r7, #20]
 8005f20:	43db      	mvns	r3, r3
 8005f22:	401a      	ands	r2, r3
 8005f24:	68fb      	ldr	r3, [r7, #12]
 8005f26:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6a1a      	ldr	r2, [r3, #32]
 8005f2c:	68bb      	ldr	r3, [r7, #8]
 8005f2e:	f003 031f 	and.w	r3, r3, #31
 8005f32:	6879      	ldr	r1, [r7, #4]
 8005f34:	fa01 f303 	lsl.w	r3, r1, r3
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
}
 8005f3e:	bf00      	nop
 8005f40:	371c      	adds	r7, #28
 8005f42:	46bd      	mov	sp, r7
 8005f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f48:	4770      	bx	lr
	...

08005f4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b085      	sub	sp, #20
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f5c:	2b01      	cmp	r3, #1
 8005f5e:	d101      	bne.n	8005f64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005f60:	2302      	movs	r3, #2
 8005f62:	e05a      	b.n	800601a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2202      	movs	r2, #2
 8005f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	685b      	ldr	r3, [r3, #4]
 8005f7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	689b      	ldr	r3, [r3, #8]
 8005f82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	68fa      	ldr	r2, [r7, #12]
 8005f92:	4313      	orrs	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	68fa      	ldr	r2, [r7, #12]
 8005f9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	4a21      	ldr	r2, [pc, #132]	; (8006028 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005fa4:	4293      	cmp	r3, r2
 8005fa6:	d022      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb0:	d01d      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	4a1d      	ldr	r2, [pc, #116]	; (800602c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005fb8:	4293      	cmp	r3, r2
 8005fba:	d018      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	4a1b      	ldr	r2, [pc, #108]	; (8006030 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d013      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	4a1a      	ldr	r2, [pc, #104]	; (8006034 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d00e      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	4a18      	ldr	r2, [pc, #96]	; (8006038 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005fd6:	4293      	cmp	r3, r2
 8005fd8:	d009      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	4a17      	ldr	r2, [pc, #92]	; (800603c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005fe0:	4293      	cmp	r3, r2
 8005fe2:	d004      	beq.n	8005fee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	4a15      	ldr	r2, [pc, #84]	; (8006040 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10c      	bne.n	8006008 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005fee:	68bb      	ldr	r3, [r7, #8]
 8005ff0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005ff4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	4313      	orrs	r3, r2
 8005ffe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	68ba      	ldr	r2, [r7, #8]
 8006006:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2200      	movs	r2, #0
 8006014:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006018:	2300      	movs	r3, #0
}
 800601a:	4618      	mov	r0, r3
 800601c:	3714      	adds	r7, #20
 800601e:	46bd      	mov	sp, r7
 8006020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006024:	4770      	bx	lr
 8006026:	bf00      	nop
 8006028:	40010000 	.word	0x40010000
 800602c:	40000400 	.word	0x40000400
 8006030:	40000800 	.word	0x40000800
 8006034:	40000c00 	.word	0x40000c00
 8006038:	40010400 	.word	0x40010400
 800603c:	40014000 	.word	0x40014000
 8006040:	40001800 	.word	0x40001800

08006044 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006044:	b480      	push	{r7}
 8006046:	b085      	sub	sp, #20
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800604e:	2300      	movs	r3, #0
 8006050:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006058:	2b01      	cmp	r3, #1
 800605a:	d101      	bne.n	8006060 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800605c:	2302      	movs	r3, #2
 800605e:	e03d      	b.n	80060dc <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2201      	movs	r2, #1
 8006064:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	68db      	ldr	r3, [r3, #12]
 8006072:	4313      	orrs	r3, r2
 8006074:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	4313      	orrs	r3, r2
 8006082:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	4313      	orrs	r3, r2
 8006090:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4313      	orrs	r3, r2
 800609e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	695b      	ldr	r3, [r3, #20]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	69db      	ldr	r3, [r3, #28]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	68fa      	ldr	r2, [r7, #12]
 80060d0:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	4618      	mov	r0, r3
 80060de:	3714      	adds	r7, #20
 80060e0:	46bd      	mov	sp, r7
 80060e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e6:	4770      	bx	lr

080060e8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80060f0:	bf00      	nop
 80060f2:	370c      	adds	r7, #12
 80060f4:	46bd      	mov	sp, r7
 80060f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fa:	4770      	bx	lr

080060fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80060fc:	b480      	push	{r7}
 80060fe:	b083      	sub	sp, #12
 8006100:	af00      	add	r7, sp, #0
 8006102:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006104:	bf00      	nop
 8006106:	370c      	adds	r7, #12
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr

08006110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006110:	b580      	push	{r7, lr}
 8006112:	b082      	sub	sp, #8
 8006114:	af00      	add	r7, sp, #0
 8006116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d101      	bne.n	8006122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800611e:	2301      	movs	r3, #1
 8006120:	e03f      	b.n	80061a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b00      	cmp	r3, #0
 800612c:	d106      	bne.n	800613c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	2200      	movs	r2, #0
 8006132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006136:	6878      	ldr	r0, [r7, #4]
 8006138:	f7fc fa02 	bl	8002540 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2224      	movs	r2, #36	; 0x24
 8006140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006154:	6878      	ldr	r0, [r7, #4]
 8006156:	f000 fe0b 	bl	8006d70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	691a      	ldr	r2, [r3, #16]
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	695a      	ldr	r2, [r3, #20]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	68da      	ldr	r2, [r3, #12]
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2200      	movs	r2, #0
 800618e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2220      	movs	r2, #32
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	2220      	movs	r2, #32
 800619c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061a0:	2300      	movs	r3, #0
}
 80061a2:	4618      	mov	r0, r3
 80061a4:	3708      	adds	r7, #8
 80061a6:	46bd      	mov	sp, r7
 80061a8:	bd80      	pop	{r7, pc}

080061aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80061aa:	b580      	push	{r7, lr}
 80061ac:	b08a      	sub	sp, #40	; 0x28
 80061ae:	af02      	add	r7, sp, #8
 80061b0:	60f8      	str	r0, [r7, #12]
 80061b2:	60b9      	str	r1, [r7, #8]
 80061b4:	603b      	str	r3, [r7, #0]
 80061b6:	4613      	mov	r3, r2
 80061b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80061ba:	2300      	movs	r3, #0
 80061bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061c4:	b2db      	uxtb	r3, r3
 80061c6:	2b20      	cmp	r3, #32
 80061c8:	d17c      	bne.n	80062c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80061ca:	68bb      	ldr	r3, [r7, #8]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d002      	beq.n	80061d6 <HAL_UART_Transmit+0x2c>
 80061d0:	88fb      	ldrh	r3, [r7, #6]
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d101      	bne.n	80061da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80061d6:	2301      	movs	r3, #1
 80061d8:	e075      	b.n	80062c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061e0:	2b01      	cmp	r3, #1
 80061e2:	d101      	bne.n	80061e8 <HAL_UART_Transmit+0x3e>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e06e      	b.n	80062c6 <HAL_UART_Transmit+0x11c>
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	2201      	movs	r2, #1
 80061ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	2200      	movs	r2, #0
 80061f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2221      	movs	r2, #33	; 0x21
 80061fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80061fe:	f7fc fe35 	bl	8002e6c <HAL_GetTick>
 8006202:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	88fa      	ldrh	r2, [r7, #6]
 8006208:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	88fa      	ldrh	r2, [r7, #6]
 800620e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006218:	d108      	bne.n	800622c <HAL_UART_Transmit+0x82>
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d104      	bne.n	800622c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006222:	2300      	movs	r3, #0
 8006224:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006226:	68bb      	ldr	r3, [r7, #8]
 8006228:	61bb      	str	r3, [r7, #24]
 800622a:	e003      	b.n	8006234 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006230:	2300      	movs	r3, #0
 8006232:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	2200      	movs	r2, #0
 8006238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800623c:	e02a      	b.n	8006294 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800623e:	683b      	ldr	r3, [r7, #0]
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	2200      	movs	r2, #0
 8006246:	2180      	movs	r1, #128	; 0x80
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 fb8d 	bl	8006968 <UART_WaitOnFlagUntilTimeout>
 800624e:	4603      	mov	r3, r0
 8006250:	2b00      	cmp	r3, #0
 8006252:	d001      	beq.n	8006258 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006254:	2303      	movs	r3, #3
 8006256:	e036      	b.n	80062c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006258:	69fb      	ldr	r3, [r7, #28]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d10b      	bne.n	8006276 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800625e:	69bb      	ldr	r3, [r7, #24]
 8006260:	881b      	ldrh	r3, [r3, #0]
 8006262:	461a      	mov	r2, r3
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800626c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800626e:	69bb      	ldr	r3, [r7, #24]
 8006270:	3302      	adds	r3, #2
 8006272:	61bb      	str	r3, [r7, #24]
 8006274:	e007      	b.n	8006286 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006276:	69fb      	ldr	r3, [r7, #28]
 8006278:	781a      	ldrb	r2, [r3, #0]
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006280:	69fb      	ldr	r3, [r7, #28]
 8006282:	3301      	adds	r3, #1
 8006284:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800628a:	b29b      	uxth	r3, r3
 800628c:	3b01      	subs	r3, #1
 800628e:	b29a      	uxth	r2, r3
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006298:	b29b      	uxth	r3, r3
 800629a:	2b00      	cmp	r3, #0
 800629c:	d1cf      	bne.n	800623e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	9300      	str	r3, [sp, #0]
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	2200      	movs	r2, #0
 80062a6:	2140      	movs	r1, #64	; 0x40
 80062a8:	68f8      	ldr	r0, [r7, #12]
 80062aa:	f000 fb5d 	bl	8006968 <UART_WaitOnFlagUntilTimeout>
 80062ae:	4603      	mov	r3, r0
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d001      	beq.n	80062b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80062b4:	2303      	movs	r3, #3
 80062b6:	e006      	b.n	80062c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	2220      	movs	r2, #32
 80062bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80062c0:	2300      	movs	r3, #0
 80062c2:	e000      	b.n	80062c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80062c4:	2302      	movs	r3, #2
  }
}
 80062c6:	4618      	mov	r0, r3
 80062c8:	3720      	adds	r7, #32
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}

080062ce <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80062ce:	b480      	push	{r7}
 80062d0:	b085      	sub	sp, #20
 80062d2:	af00      	add	r7, sp, #0
 80062d4:	60f8      	str	r0, [r7, #12]
 80062d6:	60b9      	str	r1, [r7, #8]
 80062d8:	4613      	mov	r3, r2
 80062da:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	2b20      	cmp	r3, #32
 80062e6:	d130      	bne.n	800634a <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d002      	beq.n	80062f4 <HAL_UART_Transmit_IT+0x26>
 80062ee:	88fb      	ldrh	r3, [r7, #6]
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d101      	bne.n	80062f8 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80062f4:	2301      	movs	r3, #1
 80062f6:	e029      	b.n	800634c <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062fe:	2b01      	cmp	r3, #1
 8006300:	d101      	bne.n	8006306 <HAL_UART_Transmit_IT+0x38>
 8006302:	2302      	movs	r3, #2
 8006304:	e022      	b.n	800634c <HAL_UART_Transmit_IT+0x7e>
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	2201      	movs	r2, #1
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	88fa      	ldrh	r2, [r7, #6]
 8006318:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	88fa      	ldrh	r2, [r7, #6]
 800631e:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2200      	movs	r2, #0
 8006324:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	2221      	movs	r2, #33	; 0x21
 800632a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	2200      	movs	r2, #0
 8006332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	68da      	ldr	r2, [r3, #12]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006344:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006346:	2300      	movs	r3, #0
 8006348:	e000      	b.n	800634c <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 800634a:	2302      	movs	r3, #2
  }
}
 800634c:	4618      	mov	r0, r3
 800634e:	3714      	adds	r7, #20
 8006350:	46bd      	mov	sp, r7
 8006352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006356:	4770      	bx	lr

08006358 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	60f8      	str	r0, [r7, #12]
 8006360:	60b9      	str	r1, [r7, #8]
 8006362:	4613      	mov	r3, r2
 8006364:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2b20      	cmp	r3, #32
 8006370:	d11d      	bne.n	80063ae <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d002      	beq.n	800637e <HAL_UART_Receive_DMA+0x26>
 8006378:	88fb      	ldrh	r3, [r7, #6]
 800637a:	2b00      	cmp	r3, #0
 800637c:	d101      	bne.n	8006382 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800637e:	2301      	movs	r3, #1
 8006380:	e016      	b.n	80063b0 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006388:	2b01      	cmp	r3, #1
 800638a:	d101      	bne.n	8006390 <HAL_UART_Receive_DMA+0x38>
 800638c:	2302      	movs	r3, #2
 800638e:	e00f      	b.n	80063b0 <HAL_UART_Receive_DMA+0x58>
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006398:	68fb      	ldr	r3, [r7, #12]
 800639a:	2200      	movs	r2, #0
 800639c:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 800639e:	88fb      	ldrh	r3, [r7, #6]
 80063a0:	461a      	mov	r2, r3
 80063a2:	68b9      	ldr	r1, [r7, #8]
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 fb29 	bl	80069fc <UART_Start_Receive_DMA>
 80063aa:	4603      	mov	r3, r0
 80063ac:	e000      	b.n	80063b0 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80063ae:	2302      	movs	r3, #2
  }
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bd80      	pop	{r7, pc}

080063b8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b082      	sub	sp, #8
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	68da      	ldr	r2, [r3, #12]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80063ce:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	695a      	ldr	r2, [r3, #20]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f022 0201 	bic.w	r2, r2, #1
 80063de:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063e4:	2b01      	cmp	r3, #1
 80063e6:	d107      	bne.n	80063f8 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	68da      	ldr	r2, [r3, #12]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	f022 0210 	bic.w	r2, r2, #16
 80063f6:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	695b      	ldr	r3, [r3, #20]
 80063fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006402:	2b40      	cmp	r3, #64	; 0x40
 8006404:	d124      	bne.n	8006450 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	695a      	ldr	r2, [r3, #20]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006414:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006422:	2200      	movs	r2, #0
 8006424:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800642a:	4618      	mov	r0, r3
 800642c:	f7fd f998 	bl	8003760 <HAL_DMA_Abort>
 8006430:	4603      	mov	r3, r0
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00c      	beq.n	8006450 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643a:	4618      	mov	r0, r3
 800643c:	f7fd fbac 	bl	8003b98 <HAL_DMA_GetError>
 8006440:	4603      	mov	r3, r0
 8006442:	2b20      	cmp	r3, #32
 8006444:	d104      	bne.n	8006450 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2210      	movs	r2, #16
 800644a:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 800644c:	2303      	movs	r3, #3
 800644e:	e00a      	b.n	8006466 <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2200      	movs	r2, #0
 8006454:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2220      	movs	r2, #32
 800645a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	2200      	movs	r2, #0
 8006462:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08a      	sub	sp, #40	; 0x28
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006490:	2300      	movs	r3, #0
 8006492:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006494:	2300      	movs	r3, #0
 8006496:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800649a:	f003 030f 	and.w	r3, r3, #15
 800649e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 80064a0:	69bb      	ldr	r3, [r7, #24]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d10d      	bne.n	80064c2 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80064a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a8:	f003 0320 	and.w	r3, r3, #32
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d008      	beq.n	80064c2 <HAL_UART_IRQHandler+0x52>
 80064b0:	6a3b      	ldr	r3, [r7, #32]
 80064b2:	f003 0320 	and.w	r3, r3, #32
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d003      	beq.n	80064c2 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f000 fbc1 	bl	8006c42 <UART_Receive_IT>
      return;
 80064c0:	e17c      	b.n	80067bc <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80064c2:	69bb      	ldr	r3, [r7, #24]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80b1 	beq.w	800662c <HAL_UART_IRQHandler+0x1bc>
 80064ca:	69fb      	ldr	r3, [r7, #28]
 80064cc:	f003 0301 	and.w	r3, r3, #1
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d105      	bne.n	80064e0 <HAL_UART_IRQHandler+0x70>
 80064d4:	6a3b      	ldr	r3, [r7, #32]
 80064d6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80064da:	2b00      	cmp	r3, #0
 80064dc:	f000 80a6 	beq.w	800662c <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80064e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064e2:	f003 0301 	and.w	r3, r3, #1
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	d00a      	beq.n	8006500 <HAL_UART_IRQHandler+0x90>
 80064ea:	6a3b      	ldr	r3, [r7, #32]
 80064ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d005      	beq.n	8006500 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f8:	f043 0201 	orr.w	r2, r3, #1
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006500:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006502:	f003 0304 	and.w	r3, r3, #4
 8006506:	2b00      	cmp	r3, #0
 8006508:	d00a      	beq.n	8006520 <HAL_UART_IRQHandler+0xb0>
 800650a:	69fb      	ldr	r3, [r7, #28]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b00      	cmp	r3, #0
 8006512:	d005      	beq.n	8006520 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006518:	f043 0202 	orr.w	r2, r3, #2
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006520:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006522:	f003 0302 	and.w	r3, r3, #2
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00a      	beq.n	8006540 <HAL_UART_IRQHandler+0xd0>
 800652a:	69fb      	ldr	r3, [r7, #28]
 800652c:	f003 0301 	and.w	r3, r3, #1
 8006530:	2b00      	cmp	r3, #0
 8006532:	d005      	beq.n	8006540 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006538:	f043 0204 	orr.w	r2, r3, #4
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006542:	f003 0308 	and.w	r3, r3, #8
 8006546:	2b00      	cmp	r3, #0
 8006548:	d00f      	beq.n	800656a <HAL_UART_IRQHandler+0xfa>
 800654a:	6a3b      	ldr	r3, [r7, #32]
 800654c:	f003 0320 	and.w	r3, r3, #32
 8006550:	2b00      	cmp	r3, #0
 8006552:	d104      	bne.n	800655e <HAL_UART_IRQHandler+0xee>
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	f003 0301 	and.w	r3, r3, #1
 800655a:	2b00      	cmp	r3, #0
 800655c:	d005      	beq.n	800656a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006562:	f043 0208 	orr.w	r2, r3, #8
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800656e:	2b00      	cmp	r3, #0
 8006570:	f000 811f 	beq.w	80067b2 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006576:	f003 0320 	and.w	r3, r3, #32
 800657a:	2b00      	cmp	r3, #0
 800657c:	d007      	beq.n	800658e <HAL_UART_IRQHandler+0x11e>
 800657e:	6a3b      	ldr	r3, [r7, #32]
 8006580:	f003 0320 	and.w	r3, r3, #32
 8006584:	2b00      	cmp	r3, #0
 8006586:	d002      	beq.n	800658e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006588:	6878      	ldr	r0, [r7, #4]
 800658a:	f000 fb5a 	bl	8006c42 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006598:	2b40      	cmp	r3, #64	; 0x40
 800659a:	bf0c      	ite	eq
 800659c:	2301      	moveq	r3, #1
 800659e:	2300      	movne	r3, #0
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065a8:	f003 0308 	and.w	r3, r3, #8
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d102      	bne.n	80065b6 <HAL_UART_IRQHandler+0x146>
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d031      	beq.n	800661a <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80065b6:	6878      	ldr	r0, [r7, #4]
 80065b8:	f000 fa9a 	bl	8006af0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	695b      	ldr	r3, [r3, #20]
 80065c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065c6:	2b40      	cmp	r3, #64	; 0x40
 80065c8:	d123      	bne.n	8006612 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	695a      	ldr	r2, [r3, #20]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80065d8:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d013      	beq.n	800660a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	4a77      	ldr	r2, [pc, #476]	; (80067c4 <HAL_UART_IRQHandler+0x354>)
 80065e8:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ee:	4618      	mov	r0, r3
 80065f0:	f7fd f926 	bl	8003840 <HAL_DMA_Abort_IT>
 80065f4:	4603      	mov	r3, r0
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d016      	beq.n	8006628 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006600:	687a      	ldr	r2, [r7, #4]
 8006602:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006604:	4610      	mov	r0, r2
 8006606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006608:	e00e      	b.n	8006628 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f7fa f946 	bl	800089c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006610:	e00a      	b.n	8006628 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006612:	6878      	ldr	r0, [r7, #4]
 8006614:	f7fa f942 	bl	800089c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006618:	e006      	b.n	8006628 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800661a:	6878      	ldr	r0, [r7, #4]
 800661c:	f7fa f93e 	bl	800089c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	2200      	movs	r2, #0
 8006624:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006626:	e0c4      	b.n	80067b2 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006628:	bf00      	nop
    return;
 800662a:	e0c2      	b.n	80067b2 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006630:	2b01      	cmp	r3, #1
 8006632:	f040 80a2 	bne.w	800677a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	f003 0310 	and.w	r3, r3, #16
 800663c:	2b00      	cmp	r3, #0
 800663e:	f000 809c 	beq.w	800677a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8006642:	6a3b      	ldr	r3, [r7, #32]
 8006644:	f003 0310 	and.w	r3, r3, #16
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 8096 	beq.w	800677a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800664e:	2300      	movs	r3, #0
 8006650:	60fb      	str	r3, [r7, #12]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	60fb      	str	r3, [r7, #12]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	685b      	ldr	r3, [r3, #4]
 8006660:	60fb      	str	r3, [r7, #12]
 8006662:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	695b      	ldr	r3, [r3, #20]
 800666a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800666e:	2b40      	cmp	r3, #64	; 0x40
 8006670:	d14f      	bne.n	8006712 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	685b      	ldr	r3, [r3, #4]
 800667a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800667c:	8a3b      	ldrh	r3, [r7, #16]
 800667e:	2b00      	cmp	r3, #0
 8006680:	f000 8099 	beq.w	80067b6 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006688:	8a3a      	ldrh	r2, [r7, #16]
 800668a:	429a      	cmp	r2, r3
 800668c:	f080 8093 	bcs.w	80067b6 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	8a3a      	ldrh	r2, [r7, #16]
 8006694:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800669a:	69db      	ldr	r3, [r3, #28]
 800669c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80066a0:	d02b      	beq.n	80066fa <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68da      	ldr	r2, [r3, #12]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80066b0:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0201 	bic.w	r2, r2, #1
 80066c0:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	695a      	ldr	r2, [r3, #20]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066d0:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2220      	movs	r2, #32
 80066d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	2200      	movs	r2, #0
 80066de:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	68da      	ldr	r2, [r3, #12]
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	f022 0210 	bic.w	r2, r2, #16
 80066ee:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066f4:	4618      	mov	r0, r3
 80066f6:	f7fd f833 	bl	8003760 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006702:	b29b      	uxth	r3, r3
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	b29b      	uxth	r3, r3
 8006708:	4619      	mov	r1, r3
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 f870 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006710:	e051      	b.n	80067b6 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800671a:	b29b      	uxth	r3, r3
 800671c:	1ad3      	subs	r3, r2, r3
 800671e:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006724:	b29b      	uxth	r3, r3
 8006726:	2b00      	cmp	r3, #0
 8006728:	d047      	beq.n	80067ba <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 800672a:	8a7b      	ldrh	r3, [r7, #18]
 800672c:	2b00      	cmp	r3, #0
 800672e:	d044      	beq.n	80067ba <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	68da      	ldr	r2, [r3, #12]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800673e:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	695a      	ldr	r2, [r3, #20]
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	f022 0201 	bic.w	r2, r2, #1
 800674e:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2220      	movs	r2, #32
 8006754:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2200      	movs	r2, #0
 800675c:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	68da      	ldr	r2, [r3, #12]
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	f022 0210 	bic.w	r2, r2, #16
 800676c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800676e:	8a7b      	ldrh	r3, [r7, #18]
 8006770:	4619      	mov	r1, r3
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 f83c 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8006778:	e01f      	b.n	80067ba <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800677a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800677c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006780:	2b00      	cmp	r3, #0
 8006782:	d008      	beq.n	8006796 <HAL_UART_IRQHandler+0x326>
 8006784:	6a3b      	ldr	r3, [r7, #32]
 8006786:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800678a:	2b00      	cmp	r3, #0
 800678c:	d003      	beq.n	8006796 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800678e:	6878      	ldr	r0, [r7, #4]
 8006790:	f000 f9ef 	bl	8006b72 <UART_Transmit_IT>
    return;
 8006794:	e012      	b.n	80067bc <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006798:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800679c:	2b00      	cmp	r3, #0
 800679e:	d00d      	beq.n	80067bc <HAL_UART_IRQHandler+0x34c>
 80067a0:	6a3b      	ldr	r3, [r7, #32]
 80067a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d008      	beq.n	80067bc <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80067aa:	6878      	ldr	r0, [r7, #4]
 80067ac:	f000 fa31 	bl	8006c12 <UART_EndTransmit_IT>
    return;
 80067b0:	e004      	b.n	80067bc <HAL_UART_IRQHandler+0x34c>
    return;
 80067b2:	bf00      	nop
 80067b4:	e002      	b.n	80067bc <HAL_UART_IRQHandler+0x34c>
      return;
 80067b6:	bf00      	nop
 80067b8:	e000      	b.n	80067bc <HAL_UART_IRQHandler+0x34c>
      return;
 80067ba:	bf00      	nop
  }
}
 80067bc:	3728      	adds	r7, #40	; 0x28
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	08006b4b 	.word	0x08006b4b

080067c8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80067c8:	b480      	push	{r7}
 80067ca:	b083      	sub	sp, #12
 80067cc:	af00      	add	r7, sp, #0
 80067ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80067d0:	bf00      	nop
 80067d2:	370c      	adds	r7, #12
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80067dc:	b480      	push	{r7}
 80067de:	b083      	sub	sp, #12
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80067e4:	bf00      	nop
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr

080067f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80067f0:	b480      	push	{r7}
 80067f2:	b083      	sub	sp, #12
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
 80067f8:	460b      	mov	r3, r1
 80067fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80067fc:	bf00      	nop
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006814:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006820:	2b00      	cmp	r3, #0
 8006822:	d12a      	bne.n	800687a <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	2200      	movs	r2, #0
 8006828:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006838:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	695a      	ldr	r2, [r3, #20]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f022 0201 	bic.w	r2, r2, #1
 8006848:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	695a      	ldr	r2, [r3, #20]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006858:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	2220      	movs	r2, #32
 800685e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006866:	2b01      	cmp	r3, #1
 8006868:	d107      	bne.n	800687a <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	68da      	ldr	r2, [r3, #12]
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f022 0210 	bic.w	r2, r2, #16
 8006878:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800687e:	2b01      	cmp	r3, #1
 8006880:	d106      	bne.n	8006890 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006886:	4619      	mov	r1, r3
 8006888:	68f8      	ldr	r0, [r7, #12]
 800688a:	f7ff ffb1 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800688e:	e002      	b.n	8006896 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7f9 fff3 	bl	800087c <HAL_UART_RxCpltCallback>
}
 8006896:	bf00      	nop
 8006898:	3710      	adds	r7, #16
 800689a:	46bd      	mov	sp, r7
 800689c:	bd80      	pop	{r7, pc}

0800689e <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800689e:	b580      	push	{r7, lr}
 80068a0:	b084      	sub	sp, #16
 80068a2:	af00      	add	r7, sp, #0
 80068a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068aa:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	d108      	bne.n	80068c6 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80068b8:	085b      	lsrs	r3, r3, #1
 80068ba:	b29b      	uxth	r3, r3
 80068bc:	4619      	mov	r1, r3
 80068be:	68f8      	ldr	r0, [r7, #12]
 80068c0:	f7ff ff96 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80068c4:	e002      	b.n	80068cc <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80068c6:	68f8      	ldr	r0, [r7, #12]
 80068c8:	f7ff ff88 	bl	80067dc <HAL_UART_RxHalfCpltCallback>
}
 80068cc:	bf00      	nop
 80068ce:	3710      	adds	r7, #16
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}

080068d4 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80068dc:	2300      	movs	r3, #0
 80068de:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068e4:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	695b      	ldr	r3, [r3, #20]
 80068ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068f0:	2b80      	cmp	r3, #128	; 0x80
 80068f2:	bf0c      	ite	eq
 80068f4:	2301      	moveq	r3, #1
 80068f6:	2300      	movne	r3, #0
 80068f8:	b2db      	uxtb	r3, r3
 80068fa:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80068fc:	68bb      	ldr	r3, [r7, #8]
 80068fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006902:	b2db      	uxtb	r3, r3
 8006904:	2b21      	cmp	r3, #33	; 0x21
 8006906:	d108      	bne.n	800691a <UART_DMAError+0x46>
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	2b00      	cmp	r3, #0
 800690c:	d005      	beq.n	800691a <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2200      	movs	r2, #0
 8006912:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8006914:	68b8      	ldr	r0, [r7, #8]
 8006916:	f000 f8d5 	bl	8006ac4 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800691a:	68bb      	ldr	r3, [r7, #8]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	695b      	ldr	r3, [r3, #20]
 8006920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006924:	2b40      	cmp	r3, #64	; 0x40
 8006926:	bf0c      	ite	eq
 8006928:	2301      	moveq	r3, #1
 800692a:	2300      	movne	r3, #0
 800692c:	b2db      	uxtb	r3, r3
 800692e:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006930:	68bb      	ldr	r3, [r7, #8]
 8006932:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006936:	b2db      	uxtb	r3, r3
 8006938:	2b22      	cmp	r3, #34	; 0x22
 800693a:	d108      	bne.n	800694e <UART_DMAError+0x7a>
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2b00      	cmp	r3, #0
 8006940:	d005      	beq.n	800694e <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006942:	68bb      	ldr	r3, [r7, #8]
 8006944:	2200      	movs	r2, #0
 8006946:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006948:	68b8      	ldr	r0, [r7, #8]
 800694a:	f000 f8d1 	bl	8006af0 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800694e:	68bb      	ldr	r3, [r7, #8]
 8006950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006952:	f043 0210 	orr.w	r2, r3, #16
 8006956:	68bb      	ldr	r3, [r7, #8]
 8006958:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800695a:	68b8      	ldr	r0, [r7, #8]
 800695c:	f7f9 ff9e 	bl	800089c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006960:	bf00      	nop
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	603b      	str	r3, [r7, #0]
 8006974:	4613      	mov	r3, r2
 8006976:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006978:	e02c      	b.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800697a:	69bb      	ldr	r3, [r7, #24]
 800697c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006980:	d028      	beq.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006982:	69bb      	ldr	r3, [r7, #24]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d007      	beq.n	8006998 <UART_WaitOnFlagUntilTimeout+0x30>
 8006988:	f7fc fa70 	bl	8002e6c <HAL_GetTick>
 800698c:	4602      	mov	r2, r0
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	69ba      	ldr	r2, [r7, #24]
 8006994:	429a      	cmp	r2, r3
 8006996:	d21d      	bcs.n	80069d4 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	68da      	ldr	r2, [r3, #12]
 800699e:	68fb      	ldr	r3, [r7, #12]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80069a6:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	695a      	ldr	r2, [r3, #20]
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	f022 0201 	bic.w	r2, r2, #1
 80069b6:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	2220      	movs	r2, #32
 80069bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	2220      	movs	r2, #32
 80069c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2200      	movs	r2, #0
 80069cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80069d0:	2303      	movs	r3, #3
 80069d2:	e00f      	b.n	80069f4 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	681a      	ldr	r2, [r3, #0]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	4013      	ands	r3, r2
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	429a      	cmp	r2, r3
 80069e2:	bf0c      	ite	eq
 80069e4:	2301      	moveq	r3, #1
 80069e6:	2300      	movne	r3, #0
 80069e8:	b2db      	uxtb	r3, r3
 80069ea:	461a      	mov	r2, r3
 80069ec:	79fb      	ldrb	r3, [r7, #7]
 80069ee:	429a      	cmp	r2, r3
 80069f0:	d0c3      	beq.n	800697a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80069f2:	2300      	movs	r3, #0
}
 80069f4:	4618      	mov	r0, r3
 80069f6:	3710      	adds	r7, #16
 80069f8:	46bd      	mov	sp, r7
 80069fa:	bd80      	pop	{r7, pc}

080069fc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b086      	sub	sp, #24
 8006a00:	af00      	add	r7, sp, #0
 8006a02:	60f8      	str	r0, [r7, #12]
 8006a04:	60b9      	str	r1, [r7, #8]
 8006a06:	4613      	mov	r3, r2
 8006a08:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	88fa      	ldrh	r2, [r7, #6]
 8006a14:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2200      	movs	r2, #0
 8006a1a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	2222      	movs	r2, #34	; 0x22
 8006a20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a28:	4a23      	ldr	r2, [pc, #140]	; (8006ab8 <UART_Start_Receive_DMA+0xbc>)
 8006a2a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006a2c:	68fb      	ldr	r3, [r7, #12]
 8006a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a30:	4a22      	ldr	r2, [pc, #136]	; (8006abc <UART_Start_Receive_DMA+0xc0>)
 8006a32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a38:	4a21      	ldr	r2, [pc, #132]	; (8006ac0 <UART_Start_Receive_DMA+0xc4>)
 8006a3a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a40:	2200      	movs	r2, #0
 8006a42:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8006a44:	f107 0308 	add.w	r3, r7, #8
 8006a48:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	681b      	ldr	r3, [r3, #0]
 8006a52:	3304      	adds	r3, #4
 8006a54:	4619      	mov	r1, r3
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	88fb      	ldrh	r3, [r7, #6]
 8006a5c:	f7fc fe28 	bl	80036b0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8006a60:	2300      	movs	r3, #0
 8006a62:	613b      	str	r3, [r7, #16]
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	613b      	str	r3, [r7, #16]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	685b      	ldr	r3, [r3, #4]
 8006a72:	613b      	str	r3, [r7, #16]
 8006a74:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	68da      	ldr	r2, [r3, #12]
 8006a84:	68fb      	ldr	r3, [r7, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006a8c:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	695a      	ldr	r2, [r3, #20]
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f042 0201 	orr.w	r2, r2, #1
 8006a9c:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	695a      	ldr	r2, [r3, #20]
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006aac:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8006aae:	2300      	movs	r3, #0
}
 8006ab0:	4618      	mov	r0, r3
 8006ab2:	3718      	adds	r7, #24
 8006ab4:	46bd      	mov	sp, r7
 8006ab6:	bd80      	pop	{r7, pc}
 8006ab8:	08006809 	.word	0x08006809
 8006abc:	0800689f 	.word	0x0800689f
 8006ac0:	080068d5 	.word	0x080068d5

08006ac4 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006ac4:	b480      	push	{r7}
 8006ac6:	b083      	sub	sp, #12
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	68da      	ldr	r2, [r3, #12]
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006ada:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2220      	movs	r2, #32
 8006ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8006ae4:	bf00      	nop
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006af0:	b480      	push	{r7}
 8006af2:	b083      	sub	sp, #12
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	68da      	ldr	r2, [r3, #12]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006b06:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	695a      	ldr	r2, [r3, #20]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f022 0201 	bic.w	r2, r2, #1
 8006b16:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b1c:	2b01      	cmp	r3, #1
 8006b1e:	d107      	bne.n	8006b30 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	68da      	ldr	r2, [r3, #12]
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	f022 0210 	bic.w	r2, r2, #16
 8006b2e:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2220      	movs	r2, #32
 8006b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	2200      	movs	r2, #0
 8006b3c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006b4a:	b580      	push	{r7, lr}
 8006b4c:	b084      	sub	sp, #16
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	2200      	movs	r2, #0
 8006b62:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006b64:	68f8      	ldr	r0, [r7, #12]
 8006b66:	f7f9 fe99 	bl	800089c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006b6a:	bf00      	nop
 8006b6c:	3710      	adds	r7, #16
 8006b6e:	46bd      	mov	sp, r7
 8006b70:	bd80      	pop	{r7, pc}

08006b72 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006b72:	b480      	push	{r7}
 8006b74:	b085      	sub	sp, #20
 8006b76:	af00      	add	r7, sp, #0
 8006b78:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b80:	b2db      	uxtb	r3, r3
 8006b82:	2b21      	cmp	r3, #33	; 0x21
 8006b84:	d13e      	bne.n	8006c04 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b8e:	d114      	bne.n	8006bba <UART_Transmit_IT+0x48>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	691b      	ldr	r3, [r3, #16]
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d110      	bne.n	8006bba <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a1b      	ldr	r3, [r3, #32]
 8006b9c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	881b      	ldrh	r3, [r3, #0]
 8006ba2:	461a      	mov	r2, r3
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006bac:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a1b      	ldr	r3, [r3, #32]
 8006bb2:	1c9a      	adds	r2, r3, #2
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	621a      	str	r2, [r3, #32]
 8006bb8:	e008      	b.n	8006bcc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	1c59      	adds	r1, r3, #1
 8006bc0:	687a      	ldr	r2, [r7, #4]
 8006bc2:	6211      	str	r1, [r2, #32]
 8006bc4:	781a      	ldrb	r2, [r3, #0]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006bd0:	b29b      	uxth	r3, r3
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	687a      	ldr	r2, [r7, #4]
 8006bd8:	4619      	mov	r1, r3
 8006bda:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d10f      	bne.n	8006c00 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006bee:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	68da      	ldr	r2, [r3, #12]
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bfe:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006c00:	2300      	movs	r3, #0
 8006c02:	e000      	b.n	8006c06 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006c04:	2302      	movs	r3, #2
  }
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3714      	adds	r7, #20
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr

08006c12 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006c12:	b580      	push	{r7, lr}
 8006c14:	b082      	sub	sp, #8
 8006c16:	af00      	add	r7, sp, #0
 8006c18:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	68da      	ldr	r2, [r3, #12]
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006c28:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7ff fdc8 	bl	80067c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006c38:	2300      	movs	r3, #0
}
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	3708      	adds	r7, #8
 8006c3e:	46bd      	mov	sp, r7
 8006c40:	bd80      	pop	{r7, pc}

08006c42 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006c42:	b580      	push	{r7, lr}
 8006c44:	b084      	sub	sp, #16
 8006c46:	af00      	add	r7, sp, #0
 8006c48:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006c50:	b2db      	uxtb	r3, r3
 8006c52:	2b22      	cmp	r3, #34	; 0x22
 8006c54:	f040 8087 	bne.w	8006d66 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c60:	d117      	bne.n	8006c92 <UART_Receive_IT+0x50>
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d113      	bne.n	8006c92 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c72:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	685b      	ldr	r3, [r3, #4]
 8006c7a:	b29b      	uxth	r3, r3
 8006c7c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006c80:	b29a      	uxth	r2, r3
 8006c82:	68bb      	ldr	r3, [r7, #8]
 8006c84:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	629a      	str	r2, [r3, #40]	; 0x28
 8006c90:	e026      	b.n	8006ce0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8006c98:	2300      	movs	r3, #0
 8006c9a:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	689b      	ldr	r3, [r3, #8]
 8006ca0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ca4:	d007      	beq.n	8006cb6 <UART_Receive_IT+0x74>
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	689b      	ldr	r3, [r3, #8]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d10a      	bne.n	8006cc4 <UART_Receive_IT+0x82>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d106      	bne.n	8006cc4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	681b      	ldr	r3, [r3, #0]
 8006cba:	685b      	ldr	r3, [r3, #4]
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	701a      	strb	r2, [r3, #0]
 8006cc2:	e008      	b.n	8006cd6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	685b      	ldr	r3, [r3, #4]
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cda:	1c5a      	adds	r2, r3, #1
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ce4:	b29b      	uxth	r3, r3
 8006ce6:	3b01      	subs	r3, #1
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	687a      	ldr	r2, [r7, #4]
 8006cec:	4619      	mov	r1, r3
 8006cee:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d136      	bne.n	8006d62 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	68da      	ldr	r2, [r3, #12]
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	f022 0220 	bic.w	r2, r2, #32
 8006d02:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	68da      	ldr	r2, [r3, #12]
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006d12:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	695a      	ldr	r2, [r3, #20]
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f022 0201 	bic.w	r2, r2, #1
 8006d22:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	2220      	movs	r2, #32
 8006d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d30:	2b01      	cmp	r3, #1
 8006d32:	d10e      	bne.n	8006d52 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	681b      	ldr	r3, [r3, #0]
 8006d38:	68da      	ldr	r2, [r3, #12]
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f022 0210 	bic.w	r2, r2, #16
 8006d42:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d48:	4619      	mov	r1, r3
 8006d4a:	6878      	ldr	r0, [r7, #4]
 8006d4c:	f7ff fd50 	bl	80067f0 <HAL_UARTEx_RxEventCallback>
 8006d50:	e002      	b.n	8006d58 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f7f9 fd92 	bl	800087c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8006d5e:	2300      	movs	r3, #0
 8006d60:	e002      	b.n	8006d68 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8006d62:	2300      	movs	r3, #0
 8006d64:	e000      	b.n	8006d68 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8006d66:	2302      	movs	r3, #2
  }
}
 8006d68:	4618      	mov	r0, r3
 8006d6a:	3710      	adds	r7, #16
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	bd80      	pop	{r7, pc}

08006d70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006d74:	b09f      	sub	sp, #124	; 0x7c
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	691b      	ldr	r3, [r3, #16]
 8006d80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d86:	68d9      	ldr	r1, [r3, #12]
 8006d88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d8a:	681a      	ldr	r2, [r3, #0]
 8006d8c:	ea40 0301 	orr.w	r3, r0, r1
 8006d90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006d92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d94:	689a      	ldr	r2, [r3, #8]
 8006d96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d98:	691b      	ldr	r3, [r3, #16]
 8006d9a:	431a      	orrs	r2, r3
 8006d9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	431a      	orrs	r2, r3
 8006da2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da4:	69db      	ldr	r3, [r3, #28]
 8006da6:	4313      	orrs	r3, r2
 8006da8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006daa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	68db      	ldr	r3, [r3, #12]
 8006db0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006db4:	f021 010c 	bic.w	r1, r1, #12
 8006db8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dba:	681a      	ldr	r2, [r3, #0]
 8006dbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006dbe:	430b      	orrs	r3, r1
 8006dc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006dc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	695b      	ldr	r3, [r3, #20]
 8006dc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006dcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dce:	6999      	ldr	r1, [r3, #24]
 8006dd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dd2:	681a      	ldr	r2, [r3, #0]
 8006dd4:	ea40 0301 	orr.w	r3, r0, r1
 8006dd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ddc:	681a      	ldr	r2, [r3, #0]
 8006dde:	4bc5      	ldr	r3, [pc, #788]	; (80070f4 <UART_SetConfig+0x384>)
 8006de0:	429a      	cmp	r2, r3
 8006de2:	d004      	beq.n	8006dee <UART_SetConfig+0x7e>
 8006de4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006de6:	681a      	ldr	r2, [r3, #0]
 8006de8:	4bc3      	ldr	r3, [pc, #780]	; (80070f8 <UART_SetConfig+0x388>)
 8006dea:	429a      	cmp	r2, r3
 8006dec:	d103      	bne.n	8006df6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006dee:	f7fd fdd5 	bl	800499c <HAL_RCC_GetPCLK2Freq>
 8006df2:	6778      	str	r0, [r7, #116]	; 0x74
 8006df4:	e002      	b.n	8006dfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006df6:	f7fd fdbd 	bl	8004974 <HAL_RCC_GetPCLK1Freq>
 8006dfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006dfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dfe:	69db      	ldr	r3, [r3, #28]
 8006e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e04:	f040 80b6 	bne.w	8006f74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006e08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e0a:	461c      	mov	r4, r3
 8006e0c:	f04f 0500 	mov.w	r5, #0
 8006e10:	4622      	mov	r2, r4
 8006e12:	462b      	mov	r3, r5
 8006e14:	1891      	adds	r1, r2, r2
 8006e16:	6439      	str	r1, [r7, #64]	; 0x40
 8006e18:	415b      	adcs	r3, r3
 8006e1a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006e20:	1912      	adds	r2, r2, r4
 8006e22:	eb45 0303 	adc.w	r3, r5, r3
 8006e26:	f04f 0000 	mov.w	r0, #0
 8006e2a:	f04f 0100 	mov.w	r1, #0
 8006e2e:	00d9      	lsls	r1, r3, #3
 8006e30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e34:	00d0      	lsls	r0, r2, #3
 8006e36:	4602      	mov	r2, r0
 8006e38:	460b      	mov	r3, r1
 8006e3a:	1911      	adds	r1, r2, r4
 8006e3c:	6639      	str	r1, [r7, #96]	; 0x60
 8006e3e:	416b      	adcs	r3, r5
 8006e40:	667b      	str	r3, [r7, #100]	; 0x64
 8006e42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e44:	685b      	ldr	r3, [r3, #4]
 8006e46:	461a      	mov	r2, r3
 8006e48:	f04f 0300 	mov.w	r3, #0
 8006e4c:	1891      	adds	r1, r2, r2
 8006e4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8006e50:	415b      	adcs	r3, r3
 8006e52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006e54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006e58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006e5c:	f7f9 f9b4 	bl	80001c8 <__aeabi_uldivmod>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4ba5      	ldr	r3, [pc, #660]	; (80070fc <UART_SetConfig+0x38c>)
 8006e66:	fba3 2302 	umull	r2, r3, r3, r2
 8006e6a:	095b      	lsrs	r3, r3, #5
 8006e6c:	011e      	lsls	r6, r3, #4
 8006e6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e70:	461c      	mov	r4, r3
 8006e72:	f04f 0500 	mov.w	r5, #0
 8006e76:	4622      	mov	r2, r4
 8006e78:	462b      	mov	r3, r5
 8006e7a:	1891      	adds	r1, r2, r2
 8006e7c:	6339      	str	r1, [r7, #48]	; 0x30
 8006e7e:	415b      	adcs	r3, r3
 8006e80:	637b      	str	r3, [r7, #52]	; 0x34
 8006e82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006e86:	1912      	adds	r2, r2, r4
 8006e88:	eb45 0303 	adc.w	r3, r5, r3
 8006e8c:	f04f 0000 	mov.w	r0, #0
 8006e90:	f04f 0100 	mov.w	r1, #0
 8006e94:	00d9      	lsls	r1, r3, #3
 8006e96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e9a:	00d0      	lsls	r0, r2, #3
 8006e9c:	4602      	mov	r2, r0
 8006e9e:	460b      	mov	r3, r1
 8006ea0:	1911      	adds	r1, r2, r4
 8006ea2:	65b9      	str	r1, [r7, #88]	; 0x58
 8006ea4:	416b      	adcs	r3, r5
 8006ea6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006ea8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006eaa:	685b      	ldr	r3, [r3, #4]
 8006eac:	461a      	mov	r2, r3
 8006eae:	f04f 0300 	mov.w	r3, #0
 8006eb2:	1891      	adds	r1, r2, r2
 8006eb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8006eb6:	415b      	adcs	r3, r3
 8006eb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006eba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ebe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006ec2:	f7f9 f981 	bl	80001c8 <__aeabi_uldivmod>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	460b      	mov	r3, r1
 8006eca:	4b8c      	ldr	r3, [pc, #560]	; (80070fc <UART_SetConfig+0x38c>)
 8006ecc:	fba3 1302 	umull	r1, r3, r3, r2
 8006ed0:	095b      	lsrs	r3, r3, #5
 8006ed2:	2164      	movs	r1, #100	; 0x64
 8006ed4:	fb01 f303 	mul.w	r3, r1, r3
 8006ed8:	1ad3      	subs	r3, r2, r3
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	3332      	adds	r3, #50	; 0x32
 8006ede:	4a87      	ldr	r2, [pc, #540]	; (80070fc <UART_SetConfig+0x38c>)
 8006ee0:	fba2 2303 	umull	r2, r3, r2, r3
 8006ee4:	095b      	lsrs	r3, r3, #5
 8006ee6:	005b      	lsls	r3, r3, #1
 8006ee8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006eec:	441e      	add	r6, r3
 8006eee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ef0:	4618      	mov	r0, r3
 8006ef2:	f04f 0100 	mov.w	r1, #0
 8006ef6:	4602      	mov	r2, r0
 8006ef8:	460b      	mov	r3, r1
 8006efa:	1894      	adds	r4, r2, r2
 8006efc:	623c      	str	r4, [r7, #32]
 8006efe:	415b      	adcs	r3, r3
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
 8006f02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006f06:	1812      	adds	r2, r2, r0
 8006f08:	eb41 0303 	adc.w	r3, r1, r3
 8006f0c:	f04f 0400 	mov.w	r4, #0
 8006f10:	f04f 0500 	mov.w	r5, #0
 8006f14:	00dd      	lsls	r5, r3, #3
 8006f16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f1a:	00d4      	lsls	r4, r2, #3
 8006f1c:	4622      	mov	r2, r4
 8006f1e:	462b      	mov	r3, r5
 8006f20:	1814      	adds	r4, r2, r0
 8006f22:	653c      	str	r4, [r7, #80]	; 0x50
 8006f24:	414b      	adcs	r3, r1
 8006f26:	657b      	str	r3, [r7, #84]	; 0x54
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	685b      	ldr	r3, [r3, #4]
 8006f2c:	461a      	mov	r2, r3
 8006f2e:	f04f 0300 	mov.w	r3, #0
 8006f32:	1891      	adds	r1, r2, r2
 8006f34:	61b9      	str	r1, [r7, #24]
 8006f36:	415b      	adcs	r3, r3
 8006f38:	61fb      	str	r3, [r7, #28]
 8006f3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006f3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006f42:	f7f9 f941 	bl	80001c8 <__aeabi_uldivmod>
 8006f46:	4602      	mov	r2, r0
 8006f48:	460b      	mov	r3, r1
 8006f4a:	4b6c      	ldr	r3, [pc, #432]	; (80070fc <UART_SetConfig+0x38c>)
 8006f4c:	fba3 1302 	umull	r1, r3, r3, r2
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	2164      	movs	r1, #100	; 0x64
 8006f54:	fb01 f303 	mul.w	r3, r1, r3
 8006f58:	1ad3      	subs	r3, r2, r3
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	3332      	adds	r3, #50	; 0x32
 8006f5e:	4a67      	ldr	r2, [pc, #412]	; (80070fc <UART_SetConfig+0x38c>)
 8006f60:	fba2 2303 	umull	r2, r3, r2, r3
 8006f64:	095b      	lsrs	r3, r3, #5
 8006f66:	f003 0207 	and.w	r2, r3, #7
 8006f6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	4432      	add	r2, r6
 8006f70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006f72:	e0b9      	b.n	80070e8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006f74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f76:	461c      	mov	r4, r3
 8006f78:	f04f 0500 	mov.w	r5, #0
 8006f7c:	4622      	mov	r2, r4
 8006f7e:	462b      	mov	r3, r5
 8006f80:	1891      	adds	r1, r2, r2
 8006f82:	6139      	str	r1, [r7, #16]
 8006f84:	415b      	adcs	r3, r3
 8006f86:	617b      	str	r3, [r7, #20]
 8006f88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f8c:	1912      	adds	r2, r2, r4
 8006f8e:	eb45 0303 	adc.w	r3, r5, r3
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f04f 0100 	mov.w	r1, #0
 8006f9a:	00d9      	lsls	r1, r3, #3
 8006f9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006fa0:	00d0      	lsls	r0, r2, #3
 8006fa2:	4602      	mov	r2, r0
 8006fa4:	460b      	mov	r3, r1
 8006fa6:	eb12 0804 	adds.w	r8, r2, r4
 8006faa:	eb43 0905 	adc.w	r9, r3, r5
 8006fae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fb0:	685b      	ldr	r3, [r3, #4]
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f04f 0100 	mov.w	r1, #0
 8006fb8:	f04f 0200 	mov.w	r2, #0
 8006fbc:	f04f 0300 	mov.w	r3, #0
 8006fc0:	008b      	lsls	r3, r1, #2
 8006fc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006fc6:	0082      	lsls	r2, r0, #2
 8006fc8:	4640      	mov	r0, r8
 8006fca:	4649      	mov	r1, r9
 8006fcc:	f7f9 f8fc 	bl	80001c8 <__aeabi_uldivmod>
 8006fd0:	4602      	mov	r2, r0
 8006fd2:	460b      	mov	r3, r1
 8006fd4:	4b49      	ldr	r3, [pc, #292]	; (80070fc <UART_SetConfig+0x38c>)
 8006fd6:	fba3 2302 	umull	r2, r3, r3, r2
 8006fda:	095b      	lsrs	r3, r3, #5
 8006fdc:	011e      	lsls	r6, r3, #4
 8006fde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	f04f 0100 	mov.w	r1, #0
 8006fe6:	4602      	mov	r2, r0
 8006fe8:	460b      	mov	r3, r1
 8006fea:	1894      	adds	r4, r2, r2
 8006fec:	60bc      	str	r4, [r7, #8]
 8006fee:	415b      	adcs	r3, r3
 8006ff0:	60fb      	str	r3, [r7, #12]
 8006ff2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006ff6:	1812      	adds	r2, r2, r0
 8006ff8:	eb41 0303 	adc.w	r3, r1, r3
 8006ffc:	f04f 0400 	mov.w	r4, #0
 8007000:	f04f 0500 	mov.w	r5, #0
 8007004:	00dd      	lsls	r5, r3, #3
 8007006:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800700a:	00d4      	lsls	r4, r2, #3
 800700c:	4622      	mov	r2, r4
 800700e:	462b      	mov	r3, r5
 8007010:	1814      	adds	r4, r2, r0
 8007012:	64bc      	str	r4, [r7, #72]	; 0x48
 8007014:	414b      	adcs	r3, r1
 8007016:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007018:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800701a:	685b      	ldr	r3, [r3, #4]
 800701c:	4618      	mov	r0, r3
 800701e:	f04f 0100 	mov.w	r1, #0
 8007022:	f04f 0200 	mov.w	r2, #0
 8007026:	f04f 0300 	mov.w	r3, #0
 800702a:	008b      	lsls	r3, r1, #2
 800702c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007030:	0082      	lsls	r2, r0, #2
 8007032:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007036:	f7f9 f8c7 	bl	80001c8 <__aeabi_uldivmod>
 800703a:	4602      	mov	r2, r0
 800703c:	460b      	mov	r3, r1
 800703e:	4b2f      	ldr	r3, [pc, #188]	; (80070fc <UART_SetConfig+0x38c>)
 8007040:	fba3 1302 	umull	r1, r3, r3, r2
 8007044:	095b      	lsrs	r3, r3, #5
 8007046:	2164      	movs	r1, #100	; 0x64
 8007048:	fb01 f303 	mul.w	r3, r1, r3
 800704c:	1ad3      	subs	r3, r2, r3
 800704e:	011b      	lsls	r3, r3, #4
 8007050:	3332      	adds	r3, #50	; 0x32
 8007052:	4a2a      	ldr	r2, [pc, #168]	; (80070fc <UART_SetConfig+0x38c>)
 8007054:	fba2 2303 	umull	r2, r3, r2, r3
 8007058:	095b      	lsrs	r3, r3, #5
 800705a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800705e:	441e      	add	r6, r3
 8007060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007062:	4618      	mov	r0, r3
 8007064:	f04f 0100 	mov.w	r1, #0
 8007068:	4602      	mov	r2, r0
 800706a:	460b      	mov	r3, r1
 800706c:	1894      	adds	r4, r2, r2
 800706e:	603c      	str	r4, [r7, #0]
 8007070:	415b      	adcs	r3, r3
 8007072:	607b      	str	r3, [r7, #4]
 8007074:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007078:	1812      	adds	r2, r2, r0
 800707a:	eb41 0303 	adc.w	r3, r1, r3
 800707e:	f04f 0400 	mov.w	r4, #0
 8007082:	f04f 0500 	mov.w	r5, #0
 8007086:	00dd      	lsls	r5, r3, #3
 8007088:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800708c:	00d4      	lsls	r4, r2, #3
 800708e:	4622      	mov	r2, r4
 8007090:	462b      	mov	r3, r5
 8007092:	eb12 0a00 	adds.w	sl, r2, r0
 8007096:	eb43 0b01 	adc.w	fp, r3, r1
 800709a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800709c:	685b      	ldr	r3, [r3, #4]
 800709e:	4618      	mov	r0, r3
 80070a0:	f04f 0100 	mov.w	r1, #0
 80070a4:	f04f 0200 	mov.w	r2, #0
 80070a8:	f04f 0300 	mov.w	r3, #0
 80070ac:	008b      	lsls	r3, r1, #2
 80070ae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80070b2:	0082      	lsls	r2, r0, #2
 80070b4:	4650      	mov	r0, sl
 80070b6:	4659      	mov	r1, fp
 80070b8:	f7f9 f886 	bl	80001c8 <__aeabi_uldivmod>
 80070bc:	4602      	mov	r2, r0
 80070be:	460b      	mov	r3, r1
 80070c0:	4b0e      	ldr	r3, [pc, #56]	; (80070fc <UART_SetConfig+0x38c>)
 80070c2:	fba3 1302 	umull	r1, r3, r3, r2
 80070c6:	095b      	lsrs	r3, r3, #5
 80070c8:	2164      	movs	r1, #100	; 0x64
 80070ca:	fb01 f303 	mul.w	r3, r1, r3
 80070ce:	1ad3      	subs	r3, r2, r3
 80070d0:	011b      	lsls	r3, r3, #4
 80070d2:	3332      	adds	r3, #50	; 0x32
 80070d4:	4a09      	ldr	r2, [pc, #36]	; (80070fc <UART_SetConfig+0x38c>)
 80070d6:	fba2 2303 	umull	r2, r3, r2, r3
 80070da:	095b      	lsrs	r3, r3, #5
 80070dc:	f003 020f 	and.w	r2, r3, #15
 80070e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	4432      	add	r2, r6
 80070e6:	609a      	str	r2, [r3, #8]
}
 80070e8:	bf00      	nop
 80070ea:	377c      	adds	r7, #124	; 0x7c
 80070ec:	46bd      	mov	sp, r7
 80070ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070f2:	bf00      	nop
 80070f4:	40011000 	.word	0x40011000
 80070f8:	40011400 	.word	0x40011400
 80070fc:	51eb851f 	.word	0x51eb851f

08007100 <__errno>:
 8007100:	4b01      	ldr	r3, [pc, #4]	; (8007108 <__errno+0x8>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	4770      	bx	lr
 8007106:	bf00      	nop
 8007108:	200001e0 	.word	0x200001e0

0800710c <__libc_init_array>:
 800710c:	b570      	push	{r4, r5, r6, lr}
 800710e:	4d0d      	ldr	r5, [pc, #52]	; (8007144 <__libc_init_array+0x38>)
 8007110:	4c0d      	ldr	r4, [pc, #52]	; (8007148 <__libc_init_array+0x3c>)
 8007112:	1b64      	subs	r4, r4, r5
 8007114:	10a4      	asrs	r4, r4, #2
 8007116:	2600      	movs	r6, #0
 8007118:	42a6      	cmp	r6, r4
 800711a:	d109      	bne.n	8007130 <__libc_init_array+0x24>
 800711c:	4d0b      	ldr	r5, [pc, #44]	; (800714c <__libc_init_array+0x40>)
 800711e:	4c0c      	ldr	r4, [pc, #48]	; (8007150 <__libc_init_array+0x44>)
 8007120:	f000 fce6 	bl	8007af0 <_init>
 8007124:	1b64      	subs	r4, r4, r5
 8007126:	10a4      	asrs	r4, r4, #2
 8007128:	2600      	movs	r6, #0
 800712a:	42a6      	cmp	r6, r4
 800712c:	d105      	bne.n	800713a <__libc_init_array+0x2e>
 800712e:	bd70      	pop	{r4, r5, r6, pc}
 8007130:	f855 3b04 	ldr.w	r3, [r5], #4
 8007134:	4798      	blx	r3
 8007136:	3601      	adds	r6, #1
 8007138:	e7ee      	b.n	8007118 <__libc_init_array+0xc>
 800713a:	f855 3b04 	ldr.w	r3, [r5], #4
 800713e:	4798      	blx	r3
 8007140:	3601      	adds	r6, #1
 8007142:	e7f2      	b.n	800712a <__libc_init_array+0x1e>
 8007144:	08008618 	.word	0x08008618
 8007148:	08008618 	.word	0x08008618
 800714c:	08008618 	.word	0x08008618
 8007150:	0800861c 	.word	0x0800861c

08007154 <memset>:
 8007154:	4402      	add	r2, r0
 8007156:	4603      	mov	r3, r0
 8007158:	4293      	cmp	r3, r2
 800715a:	d100      	bne.n	800715e <memset+0xa>
 800715c:	4770      	bx	lr
 800715e:	f803 1b01 	strb.w	r1, [r3], #1
 8007162:	e7f9      	b.n	8007158 <memset+0x4>

08007164 <_puts_r>:
 8007164:	b570      	push	{r4, r5, r6, lr}
 8007166:	460e      	mov	r6, r1
 8007168:	4605      	mov	r5, r0
 800716a:	b118      	cbz	r0, 8007174 <_puts_r+0x10>
 800716c:	6983      	ldr	r3, [r0, #24]
 800716e:	b90b      	cbnz	r3, 8007174 <_puts_r+0x10>
 8007170:	f000 fa48 	bl	8007604 <__sinit>
 8007174:	69ab      	ldr	r3, [r5, #24]
 8007176:	68ac      	ldr	r4, [r5, #8]
 8007178:	b913      	cbnz	r3, 8007180 <_puts_r+0x1c>
 800717a:	4628      	mov	r0, r5
 800717c:	f000 fa42 	bl	8007604 <__sinit>
 8007180:	4b2c      	ldr	r3, [pc, #176]	; (8007234 <_puts_r+0xd0>)
 8007182:	429c      	cmp	r4, r3
 8007184:	d120      	bne.n	80071c8 <_puts_r+0x64>
 8007186:	686c      	ldr	r4, [r5, #4]
 8007188:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800718a:	07db      	lsls	r3, r3, #31
 800718c:	d405      	bmi.n	800719a <_puts_r+0x36>
 800718e:	89a3      	ldrh	r3, [r4, #12]
 8007190:	0598      	lsls	r0, r3, #22
 8007192:	d402      	bmi.n	800719a <_puts_r+0x36>
 8007194:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007196:	f000 fad3 	bl	8007740 <__retarget_lock_acquire_recursive>
 800719a:	89a3      	ldrh	r3, [r4, #12]
 800719c:	0719      	lsls	r1, r3, #28
 800719e:	d51d      	bpl.n	80071dc <_puts_r+0x78>
 80071a0:	6923      	ldr	r3, [r4, #16]
 80071a2:	b1db      	cbz	r3, 80071dc <_puts_r+0x78>
 80071a4:	3e01      	subs	r6, #1
 80071a6:	68a3      	ldr	r3, [r4, #8]
 80071a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80071ac:	3b01      	subs	r3, #1
 80071ae:	60a3      	str	r3, [r4, #8]
 80071b0:	bb39      	cbnz	r1, 8007202 <_puts_r+0x9e>
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	da38      	bge.n	8007228 <_puts_r+0xc4>
 80071b6:	4622      	mov	r2, r4
 80071b8:	210a      	movs	r1, #10
 80071ba:	4628      	mov	r0, r5
 80071bc:	f000 f848 	bl	8007250 <__swbuf_r>
 80071c0:	3001      	adds	r0, #1
 80071c2:	d011      	beq.n	80071e8 <_puts_r+0x84>
 80071c4:	250a      	movs	r5, #10
 80071c6:	e011      	b.n	80071ec <_puts_r+0x88>
 80071c8:	4b1b      	ldr	r3, [pc, #108]	; (8007238 <_puts_r+0xd4>)
 80071ca:	429c      	cmp	r4, r3
 80071cc:	d101      	bne.n	80071d2 <_puts_r+0x6e>
 80071ce:	68ac      	ldr	r4, [r5, #8]
 80071d0:	e7da      	b.n	8007188 <_puts_r+0x24>
 80071d2:	4b1a      	ldr	r3, [pc, #104]	; (800723c <_puts_r+0xd8>)
 80071d4:	429c      	cmp	r4, r3
 80071d6:	bf08      	it	eq
 80071d8:	68ec      	ldreq	r4, [r5, #12]
 80071da:	e7d5      	b.n	8007188 <_puts_r+0x24>
 80071dc:	4621      	mov	r1, r4
 80071de:	4628      	mov	r0, r5
 80071e0:	f000 f888 	bl	80072f4 <__swsetup_r>
 80071e4:	2800      	cmp	r0, #0
 80071e6:	d0dd      	beq.n	80071a4 <_puts_r+0x40>
 80071e8:	f04f 35ff 	mov.w	r5, #4294967295
 80071ec:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071ee:	07da      	lsls	r2, r3, #31
 80071f0:	d405      	bmi.n	80071fe <_puts_r+0x9a>
 80071f2:	89a3      	ldrh	r3, [r4, #12]
 80071f4:	059b      	lsls	r3, r3, #22
 80071f6:	d402      	bmi.n	80071fe <_puts_r+0x9a>
 80071f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071fa:	f000 faa2 	bl	8007742 <__retarget_lock_release_recursive>
 80071fe:	4628      	mov	r0, r5
 8007200:	bd70      	pop	{r4, r5, r6, pc}
 8007202:	2b00      	cmp	r3, #0
 8007204:	da04      	bge.n	8007210 <_puts_r+0xac>
 8007206:	69a2      	ldr	r2, [r4, #24]
 8007208:	429a      	cmp	r2, r3
 800720a:	dc06      	bgt.n	800721a <_puts_r+0xb6>
 800720c:	290a      	cmp	r1, #10
 800720e:	d004      	beq.n	800721a <_puts_r+0xb6>
 8007210:	6823      	ldr	r3, [r4, #0]
 8007212:	1c5a      	adds	r2, r3, #1
 8007214:	6022      	str	r2, [r4, #0]
 8007216:	7019      	strb	r1, [r3, #0]
 8007218:	e7c5      	b.n	80071a6 <_puts_r+0x42>
 800721a:	4622      	mov	r2, r4
 800721c:	4628      	mov	r0, r5
 800721e:	f000 f817 	bl	8007250 <__swbuf_r>
 8007222:	3001      	adds	r0, #1
 8007224:	d1bf      	bne.n	80071a6 <_puts_r+0x42>
 8007226:	e7df      	b.n	80071e8 <_puts_r+0x84>
 8007228:	6823      	ldr	r3, [r4, #0]
 800722a:	250a      	movs	r5, #10
 800722c:	1c5a      	adds	r2, r3, #1
 800722e:	6022      	str	r2, [r4, #0]
 8007230:	701d      	strb	r5, [r3, #0]
 8007232:	e7db      	b.n	80071ec <_puts_r+0x88>
 8007234:	080085d0 	.word	0x080085d0
 8007238:	080085f0 	.word	0x080085f0
 800723c:	080085b0 	.word	0x080085b0

08007240 <puts>:
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <puts+0xc>)
 8007242:	4601      	mov	r1, r0
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f7ff bf8d 	b.w	8007164 <_puts_r>
 800724a:	bf00      	nop
 800724c:	200001e0 	.word	0x200001e0

08007250 <__swbuf_r>:
 8007250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007252:	460e      	mov	r6, r1
 8007254:	4614      	mov	r4, r2
 8007256:	4605      	mov	r5, r0
 8007258:	b118      	cbz	r0, 8007262 <__swbuf_r+0x12>
 800725a:	6983      	ldr	r3, [r0, #24]
 800725c:	b90b      	cbnz	r3, 8007262 <__swbuf_r+0x12>
 800725e:	f000 f9d1 	bl	8007604 <__sinit>
 8007262:	4b21      	ldr	r3, [pc, #132]	; (80072e8 <__swbuf_r+0x98>)
 8007264:	429c      	cmp	r4, r3
 8007266:	d12b      	bne.n	80072c0 <__swbuf_r+0x70>
 8007268:	686c      	ldr	r4, [r5, #4]
 800726a:	69a3      	ldr	r3, [r4, #24]
 800726c:	60a3      	str	r3, [r4, #8]
 800726e:	89a3      	ldrh	r3, [r4, #12]
 8007270:	071a      	lsls	r2, r3, #28
 8007272:	d52f      	bpl.n	80072d4 <__swbuf_r+0x84>
 8007274:	6923      	ldr	r3, [r4, #16]
 8007276:	b36b      	cbz	r3, 80072d4 <__swbuf_r+0x84>
 8007278:	6923      	ldr	r3, [r4, #16]
 800727a:	6820      	ldr	r0, [r4, #0]
 800727c:	1ac0      	subs	r0, r0, r3
 800727e:	6963      	ldr	r3, [r4, #20]
 8007280:	b2f6      	uxtb	r6, r6
 8007282:	4283      	cmp	r3, r0
 8007284:	4637      	mov	r7, r6
 8007286:	dc04      	bgt.n	8007292 <__swbuf_r+0x42>
 8007288:	4621      	mov	r1, r4
 800728a:	4628      	mov	r0, r5
 800728c:	f000 f926 	bl	80074dc <_fflush_r>
 8007290:	bb30      	cbnz	r0, 80072e0 <__swbuf_r+0x90>
 8007292:	68a3      	ldr	r3, [r4, #8]
 8007294:	3b01      	subs	r3, #1
 8007296:	60a3      	str	r3, [r4, #8]
 8007298:	6823      	ldr	r3, [r4, #0]
 800729a:	1c5a      	adds	r2, r3, #1
 800729c:	6022      	str	r2, [r4, #0]
 800729e:	701e      	strb	r6, [r3, #0]
 80072a0:	6963      	ldr	r3, [r4, #20]
 80072a2:	3001      	adds	r0, #1
 80072a4:	4283      	cmp	r3, r0
 80072a6:	d004      	beq.n	80072b2 <__swbuf_r+0x62>
 80072a8:	89a3      	ldrh	r3, [r4, #12]
 80072aa:	07db      	lsls	r3, r3, #31
 80072ac:	d506      	bpl.n	80072bc <__swbuf_r+0x6c>
 80072ae:	2e0a      	cmp	r6, #10
 80072b0:	d104      	bne.n	80072bc <__swbuf_r+0x6c>
 80072b2:	4621      	mov	r1, r4
 80072b4:	4628      	mov	r0, r5
 80072b6:	f000 f911 	bl	80074dc <_fflush_r>
 80072ba:	b988      	cbnz	r0, 80072e0 <__swbuf_r+0x90>
 80072bc:	4638      	mov	r0, r7
 80072be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072c0:	4b0a      	ldr	r3, [pc, #40]	; (80072ec <__swbuf_r+0x9c>)
 80072c2:	429c      	cmp	r4, r3
 80072c4:	d101      	bne.n	80072ca <__swbuf_r+0x7a>
 80072c6:	68ac      	ldr	r4, [r5, #8]
 80072c8:	e7cf      	b.n	800726a <__swbuf_r+0x1a>
 80072ca:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <__swbuf_r+0xa0>)
 80072cc:	429c      	cmp	r4, r3
 80072ce:	bf08      	it	eq
 80072d0:	68ec      	ldreq	r4, [r5, #12]
 80072d2:	e7ca      	b.n	800726a <__swbuf_r+0x1a>
 80072d4:	4621      	mov	r1, r4
 80072d6:	4628      	mov	r0, r5
 80072d8:	f000 f80c 	bl	80072f4 <__swsetup_r>
 80072dc:	2800      	cmp	r0, #0
 80072de:	d0cb      	beq.n	8007278 <__swbuf_r+0x28>
 80072e0:	f04f 37ff 	mov.w	r7, #4294967295
 80072e4:	e7ea      	b.n	80072bc <__swbuf_r+0x6c>
 80072e6:	bf00      	nop
 80072e8:	080085d0 	.word	0x080085d0
 80072ec:	080085f0 	.word	0x080085f0
 80072f0:	080085b0 	.word	0x080085b0

080072f4 <__swsetup_r>:
 80072f4:	4b32      	ldr	r3, [pc, #200]	; (80073c0 <__swsetup_r+0xcc>)
 80072f6:	b570      	push	{r4, r5, r6, lr}
 80072f8:	681d      	ldr	r5, [r3, #0]
 80072fa:	4606      	mov	r6, r0
 80072fc:	460c      	mov	r4, r1
 80072fe:	b125      	cbz	r5, 800730a <__swsetup_r+0x16>
 8007300:	69ab      	ldr	r3, [r5, #24]
 8007302:	b913      	cbnz	r3, 800730a <__swsetup_r+0x16>
 8007304:	4628      	mov	r0, r5
 8007306:	f000 f97d 	bl	8007604 <__sinit>
 800730a:	4b2e      	ldr	r3, [pc, #184]	; (80073c4 <__swsetup_r+0xd0>)
 800730c:	429c      	cmp	r4, r3
 800730e:	d10f      	bne.n	8007330 <__swsetup_r+0x3c>
 8007310:	686c      	ldr	r4, [r5, #4]
 8007312:	89a3      	ldrh	r3, [r4, #12]
 8007314:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007318:	0719      	lsls	r1, r3, #28
 800731a:	d42c      	bmi.n	8007376 <__swsetup_r+0x82>
 800731c:	06dd      	lsls	r5, r3, #27
 800731e:	d411      	bmi.n	8007344 <__swsetup_r+0x50>
 8007320:	2309      	movs	r3, #9
 8007322:	6033      	str	r3, [r6, #0]
 8007324:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007328:	81a3      	strh	r3, [r4, #12]
 800732a:	f04f 30ff 	mov.w	r0, #4294967295
 800732e:	e03e      	b.n	80073ae <__swsetup_r+0xba>
 8007330:	4b25      	ldr	r3, [pc, #148]	; (80073c8 <__swsetup_r+0xd4>)
 8007332:	429c      	cmp	r4, r3
 8007334:	d101      	bne.n	800733a <__swsetup_r+0x46>
 8007336:	68ac      	ldr	r4, [r5, #8]
 8007338:	e7eb      	b.n	8007312 <__swsetup_r+0x1e>
 800733a:	4b24      	ldr	r3, [pc, #144]	; (80073cc <__swsetup_r+0xd8>)
 800733c:	429c      	cmp	r4, r3
 800733e:	bf08      	it	eq
 8007340:	68ec      	ldreq	r4, [r5, #12]
 8007342:	e7e6      	b.n	8007312 <__swsetup_r+0x1e>
 8007344:	0758      	lsls	r0, r3, #29
 8007346:	d512      	bpl.n	800736e <__swsetup_r+0x7a>
 8007348:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800734a:	b141      	cbz	r1, 800735e <__swsetup_r+0x6a>
 800734c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007350:	4299      	cmp	r1, r3
 8007352:	d002      	beq.n	800735a <__swsetup_r+0x66>
 8007354:	4630      	mov	r0, r6
 8007356:	f000 fa59 	bl	800780c <_free_r>
 800735a:	2300      	movs	r3, #0
 800735c:	6363      	str	r3, [r4, #52]	; 0x34
 800735e:	89a3      	ldrh	r3, [r4, #12]
 8007360:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007364:	81a3      	strh	r3, [r4, #12]
 8007366:	2300      	movs	r3, #0
 8007368:	6063      	str	r3, [r4, #4]
 800736a:	6923      	ldr	r3, [r4, #16]
 800736c:	6023      	str	r3, [r4, #0]
 800736e:	89a3      	ldrh	r3, [r4, #12]
 8007370:	f043 0308 	orr.w	r3, r3, #8
 8007374:	81a3      	strh	r3, [r4, #12]
 8007376:	6923      	ldr	r3, [r4, #16]
 8007378:	b94b      	cbnz	r3, 800738e <__swsetup_r+0x9a>
 800737a:	89a3      	ldrh	r3, [r4, #12]
 800737c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007380:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007384:	d003      	beq.n	800738e <__swsetup_r+0x9a>
 8007386:	4621      	mov	r1, r4
 8007388:	4630      	mov	r0, r6
 800738a:	f000 f9ff 	bl	800778c <__smakebuf_r>
 800738e:	89a0      	ldrh	r0, [r4, #12]
 8007390:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007394:	f010 0301 	ands.w	r3, r0, #1
 8007398:	d00a      	beq.n	80073b0 <__swsetup_r+0xbc>
 800739a:	2300      	movs	r3, #0
 800739c:	60a3      	str	r3, [r4, #8]
 800739e:	6963      	ldr	r3, [r4, #20]
 80073a0:	425b      	negs	r3, r3
 80073a2:	61a3      	str	r3, [r4, #24]
 80073a4:	6923      	ldr	r3, [r4, #16]
 80073a6:	b943      	cbnz	r3, 80073ba <__swsetup_r+0xc6>
 80073a8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80073ac:	d1ba      	bne.n	8007324 <__swsetup_r+0x30>
 80073ae:	bd70      	pop	{r4, r5, r6, pc}
 80073b0:	0781      	lsls	r1, r0, #30
 80073b2:	bf58      	it	pl
 80073b4:	6963      	ldrpl	r3, [r4, #20]
 80073b6:	60a3      	str	r3, [r4, #8]
 80073b8:	e7f4      	b.n	80073a4 <__swsetup_r+0xb0>
 80073ba:	2000      	movs	r0, #0
 80073bc:	e7f7      	b.n	80073ae <__swsetup_r+0xba>
 80073be:	bf00      	nop
 80073c0:	200001e0 	.word	0x200001e0
 80073c4:	080085d0 	.word	0x080085d0
 80073c8:	080085f0 	.word	0x080085f0
 80073cc:	080085b0 	.word	0x080085b0

080073d0 <__sflush_r>:
 80073d0:	898a      	ldrh	r2, [r1, #12]
 80073d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073d6:	4605      	mov	r5, r0
 80073d8:	0710      	lsls	r0, r2, #28
 80073da:	460c      	mov	r4, r1
 80073dc:	d458      	bmi.n	8007490 <__sflush_r+0xc0>
 80073de:	684b      	ldr	r3, [r1, #4]
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	dc05      	bgt.n	80073f0 <__sflush_r+0x20>
 80073e4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	dc02      	bgt.n	80073f0 <__sflush_r+0x20>
 80073ea:	2000      	movs	r0, #0
 80073ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80073f2:	2e00      	cmp	r6, #0
 80073f4:	d0f9      	beq.n	80073ea <__sflush_r+0x1a>
 80073f6:	2300      	movs	r3, #0
 80073f8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80073fc:	682f      	ldr	r7, [r5, #0]
 80073fe:	602b      	str	r3, [r5, #0]
 8007400:	d032      	beq.n	8007468 <__sflush_r+0x98>
 8007402:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007404:	89a3      	ldrh	r3, [r4, #12]
 8007406:	075a      	lsls	r2, r3, #29
 8007408:	d505      	bpl.n	8007416 <__sflush_r+0x46>
 800740a:	6863      	ldr	r3, [r4, #4]
 800740c:	1ac0      	subs	r0, r0, r3
 800740e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007410:	b10b      	cbz	r3, 8007416 <__sflush_r+0x46>
 8007412:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007414:	1ac0      	subs	r0, r0, r3
 8007416:	2300      	movs	r3, #0
 8007418:	4602      	mov	r2, r0
 800741a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800741c:	6a21      	ldr	r1, [r4, #32]
 800741e:	4628      	mov	r0, r5
 8007420:	47b0      	blx	r6
 8007422:	1c43      	adds	r3, r0, #1
 8007424:	89a3      	ldrh	r3, [r4, #12]
 8007426:	d106      	bne.n	8007436 <__sflush_r+0x66>
 8007428:	6829      	ldr	r1, [r5, #0]
 800742a:	291d      	cmp	r1, #29
 800742c:	d82c      	bhi.n	8007488 <__sflush_r+0xb8>
 800742e:	4a2a      	ldr	r2, [pc, #168]	; (80074d8 <__sflush_r+0x108>)
 8007430:	40ca      	lsrs	r2, r1
 8007432:	07d6      	lsls	r6, r2, #31
 8007434:	d528      	bpl.n	8007488 <__sflush_r+0xb8>
 8007436:	2200      	movs	r2, #0
 8007438:	6062      	str	r2, [r4, #4]
 800743a:	04d9      	lsls	r1, r3, #19
 800743c:	6922      	ldr	r2, [r4, #16]
 800743e:	6022      	str	r2, [r4, #0]
 8007440:	d504      	bpl.n	800744c <__sflush_r+0x7c>
 8007442:	1c42      	adds	r2, r0, #1
 8007444:	d101      	bne.n	800744a <__sflush_r+0x7a>
 8007446:	682b      	ldr	r3, [r5, #0]
 8007448:	b903      	cbnz	r3, 800744c <__sflush_r+0x7c>
 800744a:	6560      	str	r0, [r4, #84]	; 0x54
 800744c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800744e:	602f      	str	r7, [r5, #0]
 8007450:	2900      	cmp	r1, #0
 8007452:	d0ca      	beq.n	80073ea <__sflush_r+0x1a>
 8007454:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007458:	4299      	cmp	r1, r3
 800745a:	d002      	beq.n	8007462 <__sflush_r+0x92>
 800745c:	4628      	mov	r0, r5
 800745e:	f000 f9d5 	bl	800780c <_free_r>
 8007462:	2000      	movs	r0, #0
 8007464:	6360      	str	r0, [r4, #52]	; 0x34
 8007466:	e7c1      	b.n	80073ec <__sflush_r+0x1c>
 8007468:	6a21      	ldr	r1, [r4, #32]
 800746a:	2301      	movs	r3, #1
 800746c:	4628      	mov	r0, r5
 800746e:	47b0      	blx	r6
 8007470:	1c41      	adds	r1, r0, #1
 8007472:	d1c7      	bne.n	8007404 <__sflush_r+0x34>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	2b00      	cmp	r3, #0
 8007478:	d0c4      	beq.n	8007404 <__sflush_r+0x34>
 800747a:	2b1d      	cmp	r3, #29
 800747c:	d001      	beq.n	8007482 <__sflush_r+0xb2>
 800747e:	2b16      	cmp	r3, #22
 8007480:	d101      	bne.n	8007486 <__sflush_r+0xb6>
 8007482:	602f      	str	r7, [r5, #0]
 8007484:	e7b1      	b.n	80073ea <__sflush_r+0x1a>
 8007486:	89a3      	ldrh	r3, [r4, #12]
 8007488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800748c:	81a3      	strh	r3, [r4, #12]
 800748e:	e7ad      	b.n	80073ec <__sflush_r+0x1c>
 8007490:	690f      	ldr	r7, [r1, #16]
 8007492:	2f00      	cmp	r7, #0
 8007494:	d0a9      	beq.n	80073ea <__sflush_r+0x1a>
 8007496:	0793      	lsls	r3, r2, #30
 8007498:	680e      	ldr	r6, [r1, #0]
 800749a:	bf08      	it	eq
 800749c:	694b      	ldreq	r3, [r1, #20]
 800749e:	600f      	str	r7, [r1, #0]
 80074a0:	bf18      	it	ne
 80074a2:	2300      	movne	r3, #0
 80074a4:	eba6 0807 	sub.w	r8, r6, r7
 80074a8:	608b      	str	r3, [r1, #8]
 80074aa:	f1b8 0f00 	cmp.w	r8, #0
 80074ae:	dd9c      	ble.n	80073ea <__sflush_r+0x1a>
 80074b0:	6a21      	ldr	r1, [r4, #32]
 80074b2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80074b4:	4643      	mov	r3, r8
 80074b6:	463a      	mov	r2, r7
 80074b8:	4628      	mov	r0, r5
 80074ba:	47b0      	blx	r6
 80074bc:	2800      	cmp	r0, #0
 80074be:	dc06      	bgt.n	80074ce <__sflush_r+0xfe>
 80074c0:	89a3      	ldrh	r3, [r4, #12]
 80074c2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80074c6:	81a3      	strh	r3, [r4, #12]
 80074c8:	f04f 30ff 	mov.w	r0, #4294967295
 80074cc:	e78e      	b.n	80073ec <__sflush_r+0x1c>
 80074ce:	4407      	add	r7, r0
 80074d0:	eba8 0800 	sub.w	r8, r8, r0
 80074d4:	e7e9      	b.n	80074aa <__sflush_r+0xda>
 80074d6:	bf00      	nop
 80074d8:	20400001 	.word	0x20400001

080074dc <_fflush_r>:
 80074dc:	b538      	push	{r3, r4, r5, lr}
 80074de:	690b      	ldr	r3, [r1, #16]
 80074e0:	4605      	mov	r5, r0
 80074e2:	460c      	mov	r4, r1
 80074e4:	b913      	cbnz	r3, 80074ec <_fflush_r+0x10>
 80074e6:	2500      	movs	r5, #0
 80074e8:	4628      	mov	r0, r5
 80074ea:	bd38      	pop	{r3, r4, r5, pc}
 80074ec:	b118      	cbz	r0, 80074f6 <_fflush_r+0x1a>
 80074ee:	6983      	ldr	r3, [r0, #24]
 80074f0:	b90b      	cbnz	r3, 80074f6 <_fflush_r+0x1a>
 80074f2:	f000 f887 	bl	8007604 <__sinit>
 80074f6:	4b14      	ldr	r3, [pc, #80]	; (8007548 <_fflush_r+0x6c>)
 80074f8:	429c      	cmp	r4, r3
 80074fa:	d11b      	bne.n	8007534 <_fflush_r+0x58>
 80074fc:	686c      	ldr	r4, [r5, #4]
 80074fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007502:	2b00      	cmp	r3, #0
 8007504:	d0ef      	beq.n	80074e6 <_fflush_r+0xa>
 8007506:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007508:	07d0      	lsls	r0, r2, #31
 800750a:	d404      	bmi.n	8007516 <_fflush_r+0x3a>
 800750c:	0599      	lsls	r1, r3, #22
 800750e:	d402      	bmi.n	8007516 <_fflush_r+0x3a>
 8007510:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007512:	f000 f915 	bl	8007740 <__retarget_lock_acquire_recursive>
 8007516:	4628      	mov	r0, r5
 8007518:	4621      	mov	r1, r4
 800751a:	f7ff ff59 	bl	80073d0 <__sflush_r>
 800751e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007520:	07da      	lsls	r2, r3, #31
 8007522:	4605      	mov	r5, r0
 8007524:	d4e0      	bmi.n	80074e8 <_fflush_r+0xc>
 8007526:	89a3      	ldrh	r3, [r4, #12]
 8007528:	059b      	lsls	r3, r3, #22
 800752a:	d4dd      	bmi.n	80074e8 <_fflush_r+0xc>
 800752c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800752e:	f000 f908 	bl	8007742 <__retarget_lock_release_recursive>
 8007532:	e7d9      	b.n	80074e8 <_fflush_r+0xc>
 8007534:	4b05      	ldr	r3, [pc, #20]	; (800754c <_fflush_r+0x70>)
 8007536:	429c      	cmp	r4, r3
 8007538:	d101      	bne.n	800753e <_fflush_r+0x62>
 800753a:	68ac      	ldr	r4, [r5, #8]
 800753c:	e7df      	b.n	80074fe <_fflush_r+0x22>
 800753e:	4b04      	ldr	r3, [pc, #16]	; (8007550 <_fflush_r+0x74>)
 8007540:	429c      	cmp	r4, r3
 8007542:	bf08      	it	eq
 8007544:	68ec      	ldreq	r4, [r5, #12]
 8007546:	e7da      	b.n	80074fe <_fflush_r+0x22>
 8007548:	080085d0 	.word	0x080085d0
 800754c:	080085f0 	.word	0x080085f0
 8007550:	080085b0 	.word	0x080085b0

08007554 <std>:
 8007554:	2300      	movs	r3, #0
 8007556:	b510      	push	{r4, lr}
 8007558:	4604      	mov	r4, r0
 800755a:	e9c0 3300 	strd	r3, r3, [r0]
 800755e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007562:	6083      	str	r3, [r0, #8]
 8007564:	8181      	strh	r1, [r0, #12]
 8007566:	6643      	str	r3, [r0, #100]	; 0x64
 8007568:	81c2      	strh	r2, [r0, #14]
 800756a:	6183      	str	r3, [r0, #24]
 800756c:	4619      	mov	r1, r3
 800756e:	2208      	movs	r2, #8
 8007570:	305c      	adds	r0, #92	; 0x5c
 8007572:	f7ff fdef 	bl	8007154 <memset>
 8007576:	4b05      	ldr	r3, [pc, #20]	; (800758c <std+0x38>)
 8007578:	6263      	str	r3, [r4, #36]	; 0x24
 800757a:	4b05      	ldr	r3, [pc, #20]	; (8007590 <std+0x3c>)
 800757c:	62a3      	str	r3, [r4, #40]	; 0x28
 800757e:	4b05      	ldr	r3, [pc, #20]	; (8007594 <std+0x40>)
 8007580:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007582:	4b05      	ldr	r3, [pc, #20]	; (8007598 <std+0x44>)
 8007584:	6224      	str	r4, [r4, #32]
 8007586:	6323      	str	r3, [r4, #48]	; 0x30
 8007588:	bd10      	pop	{r4, pc}
 800758a:	bf00      	nop
 800758c:	08007981 	.word	0x08007981
 8007590:	080079a3 	.word	0x080079a3
 8007594:	080079db 	.word	0x080079db
 8007598:	080079ff 	.word	0x080079ff

0800759c <_cleanup_r>:
 800759c:	4901      	ldr	r1, [pc, #4]	; (80075a4 <_cleanup_r+0x8>)
 800759e:	f000 b8af 	b.w	8007700 <_fwalk_reent>
 80075a2:	bf00      	nop
 80075a4:	080074dd 	.word	0x080074dd

080075a8 <__sfmoreglue>:
 80075a8:	b570      	push	{r4, r5, r6, lr}
 80075aa:	1e4a      	subs	r2, r1, #1
 80075ac:	2568      	movs	r5, #104	; 0x68
 80075ae:	4355      	muls	r5, r2
 80075b0:	460e      	mov	r6, r1
 80075b2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80075b6:	f000 f979 	bl	80078ac <_malloc_r>
 80075ba:	4604      	mov	r4, r0
 80075bc:	b140      	cbz	r0, 80075d0 <__sfmoreglue+0x28>
 80075be:	2100      	movs	r1, #0
 80075c0:	e9c0 1600 	strd	r1, r6, [r0]
 80075c4:	300c      	adds	r0, #12
 80075c6:	60a0      	str	r0, [r4, #8]
 80075c8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80075cc:	f7ff fdc2 	bl	8007154 <memset>
 80075d0:	4620      	mov	r0, r4
 80075d2:	bd70      	pop	{r4, r5, r6, pc}

080075d4 <__sfp_lock_acquire>:
 80075d4:	4801      	ldr	r0, [pc, #4]	; (80075dc <__sfp_lock_acquire+0x8>)
 80075d6:	f000 b8b3 	b.w	8007740 <__retarget_lock_acquire_recursive>
 80075da:	bf00      	nop
 80075dc:	20000d30 	.word	0x20000d30

080075e0 <__sfp_lock_release>:
 80075e0:	4801      	ldr	r0, [pc, #4]	; (80075e8 <__sfp_lock_release+0x8>)
 80075e2:	f000 b8ae 	b.w	8007742 <__retarget_lock_release_recursive>
 80075e6:	bf00      	nop
 80075e8:	20000d30 	.word	0x20000d30

080075ec <__sinit_lock_acquire>:
 80075ec:	4801      	ldr	r0, [pc, #4]	; (80075f4 <__sinit_lock_acquire+0x8>)
 80075ee:	f000 b8a7 	b.w	8007740 <__retarget_lock_acquire_recursive>
 80075f2:	bf00      	nop
 80075f4:	20000d2b 	.word	0x20000d2b

080075f8 <__sinit_lock_release>:
 80075f8:	4801      	ldr	r0, [pc, #4]	; (8007600 <__sinit_lock_release+0x8>)
 80075fa:	f000 b8a2 	b.w	8007742 <__retarget_lock_release_recursive>
 80075fe:	bf00      	nop
 8007600:	20000d2b 	.word	0x20000d2b

08007604 <__sinit>:
 8007604:	b510      	push	{r4, lr}
 8007606:	4604      	mov	r4, r0
 8007608:	f7ff fff0 	bl	80075ec <__sinit_lock_acquire>
 800760c:	69a3      	ldr	r3, [r4, #24]
 800760e:	b11b      	cbz	r3, 8007618 <__sinit+0x14>
 8007610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007614:	f7ff bff0 	b.w	80075f8 <__sinit_lock_release>
 8007618:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800761c:	6523      	str	r3, [r4, #80]	; 0x50
 800761e:	4b13      	ldr	r3, [pc, #76]	; (800766c <__sinit+0x68>)
 8007620:	4a13      	ldr	r2, [pc, #76]	; (8007670 <__sinit+0x6c>)
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	62a2      	str	r2, [r4, #40]	; 0x28
 8007626:	42a3      	cmp	r3, r4
 8007628:	bf04      	itt	eq
 800762a:	2301      	moveq	r3, #1
 800762c:	61a3      	streq	r3, [r4, #24]
 800762e:	4620      	mov	r0, r4
 8007630:	f000 f820 	bl	8007674 <__sfp>
 8007634:	6060      	str	r0, [r4, #4]
 8007636:	4620      	mov	r0, r4
 8007638:	f000 f81c 	bl	8007674 <__sfp>
 800763c:	60a0      	str	r0, [r4, #8]
 800763e:	4620      	mov	r0, r4
 8007640:	f000 f818 	bl	8007674 <__sfp>
 8007644:	2200      	movs	r2, #0
 8007646:	60e0      	str	r0, [r4, #12]
 8007648:	2104      	movs	r1, #4
 800764a:	6860      	ldr	r0, [r4, #4]
 800764c:	f7ff ff82 	bl	8007554 <std>
 8007650:	68a0      	ldr	r0, [r4, #8]
 8007652:	2201      	movs	r2, #1
 8007654:	2109      	movs	r1, #9
 8007656:	f7ff ff7d 	bl	8007554 <std>
 800765a:	68e0      	ldr	r0, [r4, #12]
 800765c:	2202      	movs	r2, #2
 800765e:	2112      	movs	r1, #18
 8007660:	f7ff ff78 	bl	8007554 <std>
 8007664:	2301      	movs	r3, #1
 8007666:	61a3      	str	r3, [r4, #24]
 8007668:	e7d2      	b.n	8007610 <__sinit+0xc>
 800766a:	bf00      	nop
 800766c:	080085ac 	.word	0x080085ac
 8007670:	0800759d 	.word	0x0800759d

08007674 <__sfp>:
 8007674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007676:	4607      	mov	r7, r0
 8007678:	f7ff ffac 	bl	80075d4 <__sfp_lock_acquire>
 800767c:	4b1e      	ldr	r3, [pc, #120]	; (80076f8 <__sfp+0x84>)
 800767e:	681e      	ldr	r6, [r3, #0]
 8007680:	69b3      	ldr	r3, [r6, #24]
 8007682:	b913      	cbnz	r3, 800768a <__sfp+0x16>
 8007684:	4630      	mov	r0, r6
 8007686:	f7ff ffbd 	bl	8007604 <__sinit>
 800768a:	3648      	adds	r6, #72	; 0x48
 800768c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007690:	3b01      	subs	r3, #1
 8007692:	d503      	bpl.n	800769c <__sfp+0x28>
 8007694:	6833      	ldr	r3, [r6, #0]
 8007696:	b30b      	cbz	r3, 80076dc <__sfp+0x68>
 8007698:	6836      	ldr	r6, [r6, #0]
 800769a:	e7f7      	b.n	800768c <__sfp+0x18>
 800769c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80076a0:	b9d5      	cbnz	r5, 80076d8 <__sfp+0x64>
 80076a2:	4b16      	ldr	r3, [pc, #88]	; (80076fc <__sfp+0x88>)
 80076a4:	60e3      	str	r3, [r4, #12]
 80076a6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80076aa:	6665      	str	r5, [r4, #100]	; 0x64
 80076ac:	f000 f847 	bl	800773e <__retarget_lock_init_recursive>
 80076b0:	f7ff ff96 	bl	80075e0 <__sfp_lock_release>
 80076b4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80076b8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80076bc:	6025      	str	r5, [r4, #0]
 80076be:	61a5      	str	r5, [r4, #24]
 80076c0:	2208      	movs	r2, #8
 80076c2:	4629      	mov	r1, r5
 80076c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80076c8:	f7ff fd44 	bl	8007154 <memset>
 80076cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80076d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80076d4:	4620      	mov	r0, r4
 80076d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80076d8:	3468      	adds	r4, #104	; 0x68
 80076da:	e7d9      	b.n	8007690 <__sfp+0x1c>
 80076dc:	2104      	movs	r1, #4
 80076de:	4638      	mov	r0, r7
 80076e0:	f7ff ff62 	bl	80075a8 <__sfmoreglue>
 80076e4:	4604      	mov	r4, r0
 80076e6:	6030      	str	r0, [r6, #0]
 80076e8:	2800      	cmp	r0, #0
 80076ea:	d1d5      	bne.n	8007698 <__sfp+0x24>
 80076ec:	f7ff ff78 	bl	80075e0 <__sfp_lock_release>
 80076f0:	230c      	movs	r3, #12
 80076f2:	603b      	str	r3, [r7, #0]
 80076f4:	e7ee      	b.n	80076d4 <__sfp+0x60>
 80076f6:	bf00      	nop
 80076f8:	080085ac 	.word	0x080085ac
 80076fc:	ffff0001 	.word	0xffff0001

08007700 <_fwalk_reent>:
 8007700:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007704:	4606      	mov	r6, r0
 8007706:	4688      	mov	r8, r1
 8007708:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800770c:	2700      	movs	r7, #0
 800770e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007712:	f1b9 0901 	subs.w	r9, r9, #1
 8007716:	d505      	bpl.n	8007724 <_fwalk_reent+0x24>
 8007718:	6824      	ldr	r4, [r4, #0]
 800771a:	2c00      	cmp	r4, #0
 800771c:	d1f7      	bne.n	800770e <_fwalk_reent+0xe>
 800771e:	4638      	mov	r0, r7
 8007720:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007724:	89ab      	ldrh	r3, [r5, #12]
 8007726:	2b01      	cmp	r3, #1
 8007728:	d907      	bls.n	800773a <_fwalk_reent+0x3a>
 800772a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800772e:	3301      	adds	r3, #1
 8007730:	d003      	beq.n	800773a <_fwalk_reent+0x3a>
 8007732:	4629      	mov	r1, r5
 8007734:	4630      	mov	r0, r6
 8007736:	47c0      	blx	r8
 8007738:	4307      	orrs	r7, r0
 800773a:	3568      	adds	r5, #104	; 0x68
 800773c:	e7e9      	b.n	8007712 <_fwalk_reent+0x12>

0800773e <__retarget_lock_init_recursive>:
 800773e:	4770      	bx	lr

08007740 <__retarget_lock_acquire_recursive>:
 8007740:	4770      	bx	lr

08007742 <__retarget_lock_release_recursive>:
 8007742:	4770      	bx	lr

08007744 <__swhatbuf_r>:
 8007744:	b570      	push	{r4, r5, r6, lr}
 8007746:	460e      	mov	r6, r1
 8007748:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774c:	2900      	cmp	r1, #0
 800774e:	b096      	sub	sp, #88	; 0x58
 8007750:	4614      	mov	r4, r2
 8007752:	461d      	mov	r5, r3
 8007754:	da07      	bge.n	8007766 <__swhatbuf_r+0x22>
 8007756:	2300      	movs	r3, #0
 8007758:	602b      	str	r3, [r5, #0]
 800775a:	89b3      	ldrh	r3, [r6, #12]
 800775c:	061a      	lsls	r2, r3, #24
 800775e:	d410      	bmi.n	8007782 <__swhatbuf_r+0x3e>
 8007760:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007764:	e00e      	b.n	8007784 <__swhatbuf_r+0x40>
 8007766:	466a      	mov	r2, sp
 8007768:	f000 f970 	bl	8007a4c <_fstat_r>
 800776c:	2800      	cmp	r0, #0
 800776e:	dbf2      	blt.n	8007756 <__swhatbuf_r+0x12>
 8007770:	9a01      	ldr	r2, [sp, #4]
 8007772:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007776:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800777a:	425a      	negs	r2, r3
 800777c:	415a      	adcs	r2, r3
 800777e:	602a      	str	r2, [r5, #0]
 8007780:	e7ee      	b.n	8007760 <__swhatbuf_r+0x1c>
 8007782:	2340      	movs	r3, #64	; 0x40
 8007784:	2000      	movs	r0, #0
 8007786:	6023      	str	r3, [r4, #0]
 8007788:	b016      	add	sp, #88	; 0x58
 800778a:	bd70      	pop	{r4, r5, r6, pc}

0800778c <__smakebuf_r>:
 800778c:	898b      	ldrh	r3, [r1, #12]
 800778e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007790:	079d      	lsls	r5, r3, #30
 8007792:	4606      	mov	r6, r0
 8007794:	460c      	mov	r4, r1
 8007796:	d507      	bpl.n	80077a8 <__smakebuf_r+0x1c>
 8007798:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800779c:	6023      	str	r3, [r4, #0]
 800779e:	6123      	str	r3, [r4, #16]
 80077a0:	2301      	movs	r3, #1
 80077a2:	6163      	str	r3, [r4, #20]
 80077a4:	b002      	add	sp, #8
 80077a6:	bd70      	pop	{r4, r5, r6, pc}
 80077a8:	ab01      	add	r3, sp, #4
 80077aa:	466a      	mov	r2, sp
 80077ac:	f7ff ffca 	bl	8007744 <__swhatbuf_r>
 80077b0:	9900      	ldr	r1, [sp, #0]
 80077b2:	4605      	mov	r5, r0
 80077b4:	4630      	mov	r0, r6
 80077b6:	f000 f879 	bl	80078ac <_malloc_r>
 80077ba:	b948      	cbnz	r0, 80077d0 <__smakebuf_r+0x44>
 80077bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80077c0:	059a      	lsls	r2, r3, #22
 80077c2:	d4ef      	bmi.n	80077a4 <__smakebuf_r+0x18>
 80077c4:	f023 0303 	bic.w	r3, r3, #3
 80077c8:	f043 0302 	orr.w	r3, r3, #2
 80077cc:	81a3      	strh	r3, [r4, #12]
 80077ce:	e7e3      	b.n	8007798 <__smakebuf_r+0xc>
 80077d0:	4b0d      	ldr	r3, [pc, #52]	; (8007808 <__smakebuf_r+0x7c>)
 80077d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80077d4:	89a3      	ldrh	r3, [r4, #12]
 80077d6:	6020      	str	r0, [r4, #0]
 80077d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077dc:	81a3      	strh	r3, [r4, #12]
 80077de:	9b00      	ldr	r3, [sp, #0]
 80077e0:	6163      	str	r3, [r4, #20]
 80077e2:	9b01      	ldr	r3, [sp, #4]
 80077e4:	6120      	str	r0, [r4, #16]
 80077e6:	b15b      	cbz	r3, 8007800 <__smakebuf_r+0x74>
 80077e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80077ec:	4630      	mov	r0, r6
 80077ee:	f000 f93f 	bl	8007a70 <_isatty_r>
 80077f2:	b128      	cbz	r0, 8007800 <__smakebuf_r+0x74>
 80077f4:	89a3      	ldrh	r3, [r4, #12]
 80077f6:	f023 0303 	bic.w	r3, r3, #3
 80077fa:	f043 0301 	orr.w	r3, r3, #1
 80077fe:	81a3      	strh	r3, [r4, #12]
 8007800:	89a0      	ldrh	r0, [r4, #12]
 8007802:	4305      	orrs	r5, r0
 8007804:	81a5      	strh	r5, [r4, #12]
 8007806:	e7cd      	b.n	80077a4 <__smakebuf_r+0x18>
 8007808:	0800759d 	.word	0x0800759d

0800780c <_free_r>:
 800780c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800780e:	2900      	cmp	r1, #0
 8007810:	d048      	beq.n	80078a4 <_free_r+0x98>
 8007812:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007816:	9001      	str	r0, [sp, #4]
 8007818:	2b00      	cmp	r3, #0
 800781a:	f1a1 0404 	sub.w	r4, r1, #4
 800781e:	bfb8      	it	lt
 8007820:	18e4      	addlt	r4, r4, r3
 8007822:	f000 f947 	bl	8007ab4 <__malloc_lock>
 8007826:	4a20      	ldr	r2, [pc, #128]	; (80078a8 <_free_r+0x9c>)
 8007828:	9801      	ldr	r0, [sp, #4]
 800782a:	6813      	ldr	r3, [r2, #0]
 800782c:	4615      	mov	r5, r2
 800782e:	b933      	cbnz	r3, 800783e <_free_r+0x32>
 8007830:	6063      	str	r3, [r4, #4]
 8007832:	6014      	str	r4, [r2, #0]
 8007834:	b003      	add	sp, #12
 8007836:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800783a:	f000 b941 	b.w	8007ac0 <__malloc_unlock>
 800783e:	42a3      	cmp	r3, r4
 8007840:	d90b      	bls.n	800785a <_free_r+0x4e>
 8007842:	6821      	ldr	r1, [r4, #0]
 8007844:	1862      	adds	r2, r4, r1
 8007846:	4293      	cmp	r3, r2
 8007848:	bf04      	itt	eq
 800784a:	681a      	ldreq	r2, [r3, #0]
 800784c:	685b      	ldreq	r3, [r3, #4]
 800784e:	6063      	str	r3, [r4, #4]
 8007850:	bf04      	itt	eq
 8007852:	1852      	addeq	r2, r2, r1
 8007854:	6022      	streq	r2, [r4, #0]
 8007856:	602c      	str	r4, [r5, #0]
 8007858:	e7ec      	b.n	8007834 <_free_r+0x28>
 800785a:	461a      	mov	r2, r3
 800785c:	685b      	ldr	r3, [r3, #4]
 800785e:	b10b      	cbz	r3, 8007864 <_free_r+0x58>
 8007860:	42a3      	cmp	r3, r4
 8007862:	d9fa      	bls.n	800785a <_free_r+0x4e>
 8007864:	6811      	ldr	r1, [r2, #0]
 8007866:	1855      	adds	r5, r2, r1
 8007868:	42a5      	cmp	r5, r4
 800786a:	d10b      	bne.n	8007884 <_free_r+0x78>
 800786c:	6824      	ldr	r4, [r4, #0]
 800786e:	4421      	add	r1, r4
 8007870:	1854      	adds	r4, r2, r1
 8007872:	42a3      	cmp	r3, r4
 8007874:	6011      	str	r1, [r2, #0]
 8007876:	d1dd      	bne.n	8007834 <_free_r+0x28>
 8007878:	681c      	ldr	r4, [r3, #0]
 800787a:	685b      	ldr	r3, [r3, #4]
 800787c:	6053      	str	r3, [r2, #4]
 800787e:	4421      	add	r1, r4
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	e7d7      	b.n	8007834 <_free_r+0x28>
 8007884:	d902      	bls.n	800788c <_free_r+0x80>
 8007886:	230c      	movs	r3, #12
 8007888:	6003      	str	r3, [r0, #0]
 800788a:	e7d3      	b.n	8007834 <_free_r+0x28>
 800788c:	6825      	ldr	r5, [r4, #0]
 800788e:	1961      	adds	r1, r4, r5
 8007890:	428b      	cmp	r3, r1
 8007892:	bf04      	itt	eq
 8007894:	6819      	ldreq	r1, [r3, #0]
 8007896:	685b      	ldreq	r3, [r3, #4]
 8007898:	6063      	str	r3, [r4, #4]
 800789a:	bf04      	itt	eq
 800789c:	1949      	addeq	r1, r1, r5
 800789e:	6021      	streq	r1, [r4, #0]
 80078a0:	6054      	str	r4, [r2, #4]
 80078a2:	e7c7      	b.n	8007834 <_free_r+0x28>
 80078a4:	b003      	add	sp, #12
 80078a6:	bd30      	pop	{r4, r5, pc}
 80078a8:	200002c4 	.word	0x200002c4

080078ac <_malloc_r>:
 80078ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078ae:	1ccd      	adds	r5, r1, #3
 80078b0:	f025 0503 	bic.w	r5, r5, #3
 80078b4:	3508      	adds	r5, #8
 80078b6:	2d0c      	cmp	r5, #12
 80078b8:	bf38      	it	cc
 80078ba:	250c      	movcc	r5, #12
 80078bc:	2d00      	cmp	r5, #0
 80078be:	4606      	mov	r6, r0
 80078c0:	db01      	blt.n	80078c6 <_malloc_r+0x1a>
 80078c2:	42a9      	cmp	r1, r5
 80078c4:	d903      	bls.n	80078ce <_malloc_r+0x22>
 80078c6:	230c      	movs	r3, #12
 80078c8:	6033      	str	r3, [r6, #0]
 80078ca:	2000      	movs	r0, #0
 80078cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078ce:	f000 f8f1 	bl	8007ab4 <__malloc_lock>
 80078d2:	4921      	ldr	r1, [pc, #132]	; (8007958 <_malloc_r+0xac>)
 80078d4:	680a      	ldr	r2, [r1, #0]
 80078d6:	4614      	mov	r4, r2
 80078d8:	b99c      	cbnz	r4, 8007902 <_malloc_r+0x56>
 80078da:	4f20      	ldr	r7, [pc, #128]	; (800795c <_malloc_r+0xb0>)
 80078dc:	683b      	ldr	r3, [r7, #0]
 80078de:	b923      	cbnz	r3, 80078ea <_malloc_r+0x3e>
 80078e0:	4621      	mov	r1, r4
 80078e2:	4630      	mov	r0, r6
 80078e4:	f000 f83c 	bl	8007960 <_sbrk_r>
 80078e8:	6038      	str	r0, [r7, #0]
 80078ea:	4629      	mov	r1, r5
 80078ec:	4630      	mov	r0, r6
 80078ee:	f000 f837 	bl	8007960 <_sbrk_r>
 80078f2:	1c43      	adds	r3, r0, #1
 80078f4:	d123      	bne.n	800793e <_malloc_r+0x92>
 80078f6:	230c      	movs	r3, #12
 80078f8:	6033      	str	r3, [r6, #0]
 80078fa:	4630      	mov	r0, r6
 80078fc:	f000 f8e0 	bl	8007ac0 <__malloc_unlock>
 8007900:	e7e3      	b.n	80078ca <_malloc_r+0x1e>
 8007902:	6823      	ldr	r3, [r4, #0]
 8007904:	1b5b      	subs	r3, r3, r5
 8007906:	d417      	bmi.n	8007938 <_malloc_r+0x8c>
 8007908:	2b0b      	cmp	r3, #11
 800790a:	d903      	bls.n	8007914 <_malloc_r+0x68>
 800790c:	6023      	str	r3, [r4, #0]
 800790e:	441c      	add	r4, r3
 8007910:	6025      	str	r5, [r4, #0]
 8007912:	e004      	b.n	800791e <_malloc_r+0x72>
 8007914:	6863      	ldr	r3, [r4, #4]
 8007916:	42a2      	cmp	r2, r4
 8007918:	bf0c      	ite	eq
 800791a:	600b      	streq	r3, [r1, #0]
 800791c:	6053      	strne	r3, [r2, #4]
 800791e:	4630      	mov	r0, r6
 8007920:	f000 f8ce 	bl	8007ac0 <__malloc_unlock>
 8007924:	f104 000b 	add.w	r0, r4, #11
 8007928:	1d23      	adds	r3, r4, #4
 800792a:	f020 0007 	bic.w	r0, r0, #7
 800792e:	1ac2      	subs	r2, r0, r3
 8007930:	d0cc      	beq.n	80078cc <_malloc_r+0x20>
 8007932:	1a1b      	subs	r3, r3, r0
 8007934:	50a3      	str	r3, [r4, r2]
 8007936:	e7c9      	b.n	80078cc <_malloc_r+0x20>
 8007938:	4622      	mov	r2, r4
 800793a:	6864      	ldr	r4, [r4, #4]
 800793c:	e7cc      	b.n	80078d8 <_malloc_r+0x2c>
 800793e:	1cc4      	adds	r4, r0, #3
 8007940:	f024 0403 	bic.w	r4, r4, #3
 8007944:	42a0      	cmp	r0, r4
 8007946:	d0e3      	beq.n	8007910 <_malloc_r+0x64>
 8007948:	1a21      	subs	r1, r4, r0
 800794a:	4630      	mov	r0, r6
 800794c:	f000 f808 	bl	8007960 <_sbrk_r>
 8007950:	3001      	adds	r0, #1
 8007952:	d1dd      	bne.n	8007910 <_malloc_r+0x64>
 8007954:	e7cf      	b.n	80078f6 <_malloc_r+0x4a>
 8007956:	bf00      	nop
 8007958:	200002c4 	.word	0x200002c4
 800795c:	200002c8 	.word	0x200002c8

08007960 <_sbrk_r>:
 8007960:	b538      	push	{r3, r4, r5, lr}
 8007962:	4d06      	ldr	r5, [pc, #24]	; (800797c <_sbrk_r+0x1c>)
 8007964:	2300      	movs	r3, #0
 8007966:	4604      	mov	r4, r0
 8007968:	4608      	mov	r0, r1
 800796a:	602b      	str	r3, [r5, #0]
 800796c:	f7fb f9d2 	bl	8002d14 <_sbrk>
 8007970:	1c43      	adds	r3, r0, #1
 8007972:	d102      	bne.n	800797a <_sbrk_r+0x1a>
 8007974:	682b      	ldr	r3, [r5, #0]
 8007976:	b103      	cbz	r3, 800797a <_sbrk_r+0x1a>
 8007978:	6023      	str	r3, [r4, #0]
 800797a:	bd38      	pop	{r3, r4, r5, pc}
 800797c:	20000d34 	.word	0x20000d34

08007980 <__sread>:
 8007980:	b510      	push	{r4, lr}
 8007982:	460c      	mov	r4, r1
 8007984:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007988:	f000 f8a0 	bl	8007acc <_read_r>
 800798c:	2800      	cmp	r0, #0
 800798e:	bfab      	itete	ge
 8007990:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007992:	89a3      	ldrhlt	r3, [r4, #12]
 8007994:	181b      	addge	r3, r3, r0
 8007996:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800799a:	bfac      	ite	ge
 800799c:	6563      	strge	r3, [r4, #84]	; 0x54
 800799e:	81a3      	strhlt	r3, [r4, #12]
 80079a0:	bd10      	pop	{r4, pc}

080079a2 <__swrite>:
 80079a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079a6:	461f      	mov	r7, r3
 80079a8:	898b      	ldrh	r3, [r1, #12]
 80079aa:	05db      	lsls	r3, r3, #23
 80079ac:	4605      	mov	r5, r0
 80079ae:	460c      	mov	r4, r1
 80079b0:	4616      	mov	r6, r2
 80079b2:	d505      	bpl.n	80079c0 <__swrite+0x1e>
 80079b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079b8:	2302      	movs	r3, #2
 80079ba:	2200      	movs	r2, #0
 80079bc:	f000 f868 	bl	8007a90 <_lseek_r>
 80079c0:	89a3      	ldrh	r3, [r4, #12]
 80079c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079c6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80079ca:	81a3      	strh	r3, [r4, #12]
 80079cc:	4632      	mov	r2, r6
 80079ce:	463b      	mov	r3, r7
 80079d0:	4628      	mov	r0, r5
 80079d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079d6:	f000 b817 	b.w	8007a08 <_write_r>

080079da <__sseek>:
 80079da:	b510      	push	{r4, lr}
 80079dc:	460c      	mov	r4, r1
 80079de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079e2:	f000 f855 	bl	8007a90 <_lseek_r>
 80079e6:	1c43      	adds	r3, r0, #1
 80079e8:	89a3      	ldrh	r3, [r4, #12]
 80079ea:	bf15      	itete	ne
 80079ec:	6560      	strne	r0, [r4, #84]	; 0x54
 80079ee:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80079f2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80079f6:	81a3      	strheq	r3, [r4, #12]
 80079f8:	bf18      	it	ne
 80079fa:	81a3      	strhne	r3, [r4, #12]
 80079fc:	bd10      	pop	{r4, pc}

080079fe <__sclose>:
 80079fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a02:	f000 b813 	b.w	8007a2c <_close_r>
	...

08007a08 <_write_r>:
 8007a08:	b538      	push	{r3, r4, r5, lr}
 8007a0a:	4d07      	ldr	r5, [pc, #28]	; (8007a28 <_write_r+0x20>)
 8007a0c:	4604      	mov	r4, r0
 8007a0e:	4608      	mov	r0, r1
 8007a10:	4611      	mov	r1, r2
 8007a12:	2200      	movs	r2, #0
 8007a14:	602a      	str	r2, [r5, #0]
 8007a16:	461a      	mov	r2, r3
 8007a18:	f7f8 ff1a 	bl	8000850 <_write>
 8007a1c:	1c43      	adds	r3, r0, #1
 8007a1e:	d102      	bne.n	8007a26 <_write_r+0x1e>
 8007a20:	682b      	ldr	r3, [r5, #0]
 8007a22:	b103      	cbz	r3, 8007a26 <_write_r+0x1e>
 8007a24:	6023      	str	r3, [r4, #0]
 8007a26:	bd38      	pop	{r3, r4, r5, pc}
 8007a28:	20000d34 	.word	0x20000d34

08007a2c <_close_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4d06      	ldr	r5, [pc, #24]	; (8007a48 <_close_r+0x1c>)
 8007a30:	2300      	movs	r3, #0
 8007a32:	4604      	mov	r4, r0
 8007a34:	4608      	mov	r0, r1
 8007a36:	602b      	str	r3, [r5, #0]
 8007a38:	f7fb f937 	bl	8002caa <_close>
 8007a3c:	1c43      	adds	r3, r0, #1
 8007a3e:	d102      	bne.n	8007a46 <_close_r+0x1a>
 8007a40:	682b      	ldr	r3, [r5, #0]
 8007a42:	b103      	cbz	r3, 8007a46 <_close_r+0x1a>
 8007a44:	6023      	str	r3, [r4, #0]
 8007a46:	bd38      	pop	{r3, r4, r5, pc}
 8007a48:	20000d34 	.word	0x20000d34

08007a4c <_fstat_r>:
 8007a4c:	b538      	push	{r3, r4, r5, lr}
 8007a4e:	4d07      	ldr	r5, [pc, #28]	; (8007a6c <_fstat_r+0x20>)
 8007a50:	2300      	movs	r3, #0
 8007a52:	4604      	mov	r4, r0
 8007a54:	4608      	mov	r0, r1
 8007a56:	4611      	mov	r1, r2
 8007a58:	602b      	str	r3, [r5, #0]
 8007a5a:	f7fb f932 	bl	8002cc2 <_fstat>
 8007a5e:	1c43      	adds	r3, r0, #1
 8007a60:	d102      	bne.n	8007a68 <_fstat_r+0x1c>
 8007a62:	682b      	ldr	r3, [r5, #0]
 8007a64:	b103      	cbz	r3, 8007a68 <_fstat_r+0x1c>
 8007a66:	6023      	str	r3, [r4, #0]
 8007a68:	bd38      	pop	{r3, r4, r5, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000d34 	.word	0x20000d34

08007a70 <_isatty_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4d06      	ldr	r5, [pc, #24]	; (8007a8c <_isatty_r+0x1c>)
 8007a74:	2300      	movs	r3, #0
 8007a76:	4604      	mov	r4, r0
 8007a78:	4608      	mov	r0, r1
 8007a7a:	602b      	str	r3, [r5, #0]
 8007a7c:	f7fb f931 	bl	8002ce2 <_isatty>
 8007a80:	1c43      	adds	r3, r0, #1
 8007a82:	d102      	bne.n	8007a8a <_isatty_r+0x1a>
 8007a84:	682b      	ldr	r3, [r5, #0]
 8007a86:	b103      	cbz	r3, 8007a8a <_isatty_r+0x1a>
 8007a88:	6023      	str	r3, [r4, #0]
 8007a8a:	bd38      	pop	{r3, r4, r5, pc}
 8007a8c:	20000d34 	.word	0x20000d34

08007a90 <_lseek_r>:
 8007a90:	b538      	push	{r3, r4, r5, lr}
 8007a92:	4d07      	ldr	r5, [pc, #28]	; (8007ab0 <_lseek_r+0x20>)
 8007a94:	4604      	mov	r4, r0
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	2200      	movs	r2, #0
 8007a9c:	602a      	str	r2, [r5, #0]
 8007a9e:	461a      	mov	r2, r3
 8007aa0:	f7fb f92a 	bl	8002cf8 <_lseek>
 8007aa4:	1c43      	adds	r3, r0, #1
 8007aa6:	d102      	bne.n	8007aae <_lseek_r+0x1e>
 8007aa8:	682b      	ldr	r3, [r5, #0]
 8007aaa:	b103      	cbz	r3, 8007aae <_lseek_r+0x1e>
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	bd38      	pop	{r3, r4, r5, pc}
 8007ab0:	20000d34 	.word	0x20000d34

08007ab4 <__malloc_lock>:
 8007ab4:	4801      	ldr	r0, [pc, #4]	; (8007abc <__malloc_lock+0x8>)
 8007ab6:	f7ff be43 	b.w	8007740 <__retarget_lock_acquire_recursive>
 8007aba:	bf00      	nop
 8007abc:	20000d2c 	.word	0x20000d2c

08007ac0 <__malloc_unlock>:
 8007ac0:	4801      	ldr	r0, [pc, #4]	; (8007ac8 <__malloc_unlock+0x8>)
 8007ac2:	f7ff be3e 	b.w	8007742 <__retarget_lock_release_recursive>
 8007ac6:	bf00      	nop
 8007ac8:	20000d2c 	.word	0x20000d2c

08007acc <_read_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d07      	ldr	r5, [pc, #28]	; (8007aec <_read_r+0x20>)
 8007ad0:	4604      	mov	r4, r0
 8007ad2:	4608      	mov	r0, r1
 8007ad4:	4611      	mov	r1, r2
 8007ad6:	2200      	movs	r2, #0
 8007ad8:	602a      	str	r2, [r5, #0]
 8007ada:	461a      	mov	r2, r3
 8007adc:	f7fb f8c8 	bl	8002c70 <_read>
 8007ae0:	1c43      	adds	r3, r0, #1
 8007ae2:	d102      	bne.n	8007aea <_read_r+0x1e>
 8007ae4:	682b      	ldr	r3, [r5, #0]
 8007ae6:	b103      	cbz	r3, 8007aea <_read_r+0x1e>
 8007ae8:	6023      	str	r3, [r4, #0]
 8007aea:	bd38      	pop	{r3, r4, r5, pc}
 8007aec:	20000d34 	.word	0x20000d34

08007af0 <_init>:
 8007af0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007af2:	bf00      	nop
 8007af4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007af6:	bc08      	pop	{r3}
 8007af8:	469e      	mov	lr, r3
 8007afa:	4770      	bx	lr

08007afc <_fini>:
 8007afc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007afe:	bf00      	nop
 8007b00:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b02:	bc08      	pop	{r3}
 8007b04:	469e      	mov	lr, r3
 8007b06:	4770      	bx	lr
