
subROV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000becc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f28  0800c060  0800c060  0001c060  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cf88  0800cf88  000203cc  2**0
                  CONTENTS
  4 .ARM          00000008  0800cf88  0800cf88  0001cf88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cf90  0800cf90  000203cc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cf90  0800cf90  0001cf90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cf94  0800cf94  0001cf94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000003cc  20000000  0800cf98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ba0  200003cc  0800d364  000203cc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000f6c  0800d364  00020f6c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000203cc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001738d  00000000  00000000  000203fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000033fd  00000000  00000000  00037789  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  0003ab88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010f0  00000000  00000000  0003bdd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023226  00000000  00000000  0003cec0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015911  00000000  00000000  000600e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d0256  00000000  00000000  000759f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145c4d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006194  00000000  00000000  00145ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200003cc 	.word	0x200003cc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c044 	.word	0x0800c044

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200003d0 	.word	0x200003d0
 80001cc:	0800c044 	.word	0x0800c044

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2uiz>:
 8000b58:	004a      	lsls	r2, r1, #1
 8000b5a:	d211      	bcs.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d211      	bcs.n	8000b86 <__aeabi_d2uiz+0x2e>
 8000b62:	d50d      	bpl.n	8000b80 <__aeabi_d2uiz+0x28>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d40e      	bmi.n	8000b8c <__aeabi_d2uiz+0x34>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b7e:	4770      	bx	lr
 8000b80:	f04f 0000 	mov.w	r0, #0
 8000b84:	4770      	bx	lr
 8000b86:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_d2uiz+0x3a>
 8000b8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0000 	mov.w	r0, #0
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2f>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ba0:	bf24      	itt	cs
 8000ba2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ba6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000baa:	d90d      	bls.n	8000bc8 <__aeabi_d2f+0x30>
 8000bac:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bb0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bb4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bb8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bbc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bc0:	bf08      	it	eq
 8000bc2:	f020 0001 	biceq.w	r0, r0, #1
 8000bc6:	4770      	bx	lr
 8000bc8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bcc:	d121      	bne.n	8000c12 <__aeabi_d2f+0x7a>
 8000bce:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bd2:	bfbc      	itt	lt
 8000bd4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	4770      	bxlt	lr
 8000bda:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bde:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000be2:	f1c2 0218 	rsb	r2, r2, #24
 8000be6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bea:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bee:	fa20 f002 	lsr.w	r0, r0, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	f040 0001 	orrne.w	r0, r0, #1
 8000bf8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bfc:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c00:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c04:	ea40 000c 	orr.w	r0, r0, ip
 8000c08:	fa23 f302 	lsr.w	r3, r3, r2
 8000c0c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c10:	e7cc      	b.n	8000bac <__aeabi_d2f+0x14>
 8000c12:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c16:	d107      	bne.n	8000c28 <__aeabi_d2f+0x90>
 8000c18:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c1c:	bf1e      	ittt	ne
 8000c1e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c22:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c26:	4770      	bxne	lr
 8000c28:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c2c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c34:	4770      	bx	lr
 8000c36:	bf00      	nop

08000c38 <__aeabi_uldivmod>:
 8000c38:	b953      	cbnz	r3, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3a:	b94a      	cbnz	r2, 8000c50 <__aeabi_uldivmod+0x18>
 8000c3c:	2900      	cmp	r1, #0
 8000c3e:	bf08      	it	eq
 8000c40:	2800      	cmpeq	r0, #0
 8000c42:	bf1c      	itt	ne
 8000c44:	f04f 31ff 	movne.w	r1, #4294967295
 8000c48:	f04f 30ff 	movne.w	r0, #4294967295
 8000c4c:	f000 b9a4 	b.w	8000f98 <__aeabi_idiv0>
 8000c50:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c54:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c58:	f000 f83c 	bl	8000cd4 <__udivmoddi4>
 8000c5c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c64:	b004      	add	sp, #16
 8000c66:	4770      	bx	lr

08000c68 <__aeabi_d2lz>:
 8000c68:	b538      	push	{r3, r4, r5, lr}
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	2300      	movs	r3, #0
 8000c6e:	4604      	mov	r4, r0
 8000c70:	460d      	mov	r5, r1
 8000c72:	f7ff ff33 	bl	8000adc <__aeabi_dcmplt>
 8000c76:	b928      	cbnz	r0, 8000c84 <__aeabi_d2lz+0x1c>
 8000c78:	4620      	mov	r0, r4
 8000c7a:	4629      	mov	r1, r5
 8000c7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000c80:	f000 b80a 	b.w	8000c98 <__aeabi_d2ulz>
 8000c84:	4620      	mov	r0, r4
 8000c86:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000c8a:	f000 f805 	bl	8000c98 <__aeabi_d2ulz>
 8000c8e:	4240      	negs	r0, r0
 8000c90:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
 8000c96:	bf00      	nop

08000c98 <__aeabi_d2ulz>:
 8000c98:	b5d0      	push	{r4, r6, r7, lr}
 8000c9a:	4b0c      	ldr	r3, [pc, #48]	; (8000ccc <__aeabi_d2ulz+0x34>)
 8000c9c:	2200      	movs	r2, #0
 8000c9e:	4606      	mov	r6, r0
 8000ca0:	460f      	mov	r7, r1
 8000ca2:	f7ff fca9 	bl	80005f8 <__aeabi_dmul>
 8000ca6:	f7ff ff57 	bl	8000b58 <__aeabi_d2uiz>
 8000caa:	4604      	mov	r4, r0
 8000cac:	f7ff fc2a 	bl	8000504 <__aeabi_ui2d>
 8000cb0:	4b07      	ldr	r3, [pc, #28]	; (8000cd0 <__aeabi_d2ulz+0x38>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	f7ff fca0 	bl	80005f8 <__aeabi_dmul>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f7ff fae2 	bl	8000288 <__aeabi_dsub>
 8000cc4:	f7ff ff48 	bl	8000b58 <__aeabi_d2uiz>
 8000cc8:	4621      	mov	r1, r4
 8000cca:	bdd0      	pop	{r4, r6, r7, pc}
 8000ccc:	3df00000 	.word	0x3df00000
 8000cd0:	41f00000 	.word	0x41f00000

08000cd4 <__udivmoddi4>:
 8000cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cd8:	9d08      	ldr	r5, [sp, #32]
 8000cda:	4604      	mov	r4, r0
 8000cdc:	468c      	mov	ip, r1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f040 8083 	bne.w	8000dea <__udivmoddi4+0x116>
 8000ce4:	428a      	cmp	r2, r1
 8000ce6:	4617      	mov	r7, r2
 8000ce8:	d947      	bls.n	8000d7a <__udivmoddi4+0xa6>
 8000cea:	fab2 f282 	clz	r2, r2
 8000cee:	b142      	cbz	r2, 8000d02 <__udivmoddi4+0x2e>
 8000cf0:	f1c2 0020 	rsb	r0, r2, #32
 8000cf4:	fa24 f000 	lsr.w	r0, r4, r0
 8000cf8:	4091      	lsls	r1, r2
 8000cfa:	4097      	lsls	r7, r2
 8000cfc:	ea40 0c01 	orr.w	ip, r0, r1
 8000d00:	4094      	lsls	r4, r2
 8000d02:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d06:	0c23      	lsrs	r3, r4, #16
 8000d08:	fbbc f6f8 	udiv	r6, ip, r8
 8000d0c:	fa1f fe87 	uxth.w	lr, r7
 8000d10:	fb08 c116 	mls	r1, r8, r6, ip
 8000d14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d18:	fb06 f10e 	mul.w	r1, r6, lr
 8000d1c:	4299      	cmp	r1, r3
 8000d1e:	d909      	bls.n	8000d34 <__udivmoddi4+0x60>
 8000d20:	18fb      	adds	r3, r7, r3
 8000d22:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d26:	f080 8119 	bcs.w	8000f5c <__udivmoddi4+0x288>
 8000d2a:	4299      	cmp	r1, r3
 8000d2c:	f240 8116 	bls.w	8000f5c <__udivmoddi4+0x288>
 8000d30:	3e02      	subs	r6, #2
 8000d32:	443b      	add	r3, r7
 8000d34:	1a5b      	subs	r3, r3, r1
 8000d36:	b2a4      	uxth	r4, r4
 8000d38:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d3c:	fb08 3310 	mls	r3, r8, r0, r3
 8000d40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d44:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d48:	45a6      	cmp	lr, r4
 8000d4a:	d909      	bls.n	8000d60 <__udivmoddi4+0x8c>
 8000d4c:	193c      	adds	r4, r7, r4
 8000d4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d52:	f080 8105 	bcs.w	8000f60 <__udivmoddi4+0x28c>
 8000d56:	45a6      	cmp	lr, r4
 8000d58:	f240 8102 	bls.w	8000f60 <__udivmoddi4+0x28c>
 8000d5c:	3802      	subs	r0, #2
 8000d5e:	443c      	add	r4, r7
 8000d60:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d64:	eba4 040e 	sub.w	r4, r4, lr
 8000d68:	2600      	movs	r6, #0
 8000d6a:	b11d      	cbz	r5, 8000d74 <__udivmoddi4+0xa0>
 8000d6c:	40d4      	lsrs	r4, r2
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e9c5 4300 	strd	r4, r3, [r5]
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	b902      	cbnz	r2, 8000d7e <__udivmoddi4+0xaa>
 8000d7c:	deff      	udf	#255	; 0xff
 8000d7e:	fab2 f282 	clz	r2, r2
 8000d82:	2a00      	cmp	r2, #0
 8000d84:	d150      	bne.n	8000e28 <__udivmoddi4+0x154>
 8000d86:	1bcb      	subs	r3, r1, r7
 8000d88:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d8c:	fa1f f887 	uxth.w	r8, r7
 8000d90:	2601      	movs	r6, #1
 8000d92:	fbb3 fcfe 	udiv	ip, r3, lr
 8000d96:	0c21      	lsrs	r1, r4, #16
 8000d98:	fb0e 331c 	mls	r3, lr, ip, r3
 8000d9c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000da0:	fb08 f30c 	mul.w	r3, r8, ip
 8000da4:	428b      	cmp	r3, r1
 8000da6:	d907      	bls.n	8000db8 <__udivmoddi4+0xe4>
 8000da8:	1879      	adds	r1, r7, r1
 8000daa:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000dae:	d202      	bcs.n	8000db6 <__udivmoddi4+0xe2>
 8000db0:	428b      	cmp	r3, r1
 8000db2:	f200 80e9 	bhi.w	8000f88 <__udivmoddi4+0x2b4>
 8000db6:	4684      	mov	ip, r0
 8000db8:	1ac9      	subs	r1, r1, r3
 8000dba:	b2a3      	uxth	r3, r4
 8000dbc:	fbb1 f0fe 	udiv	r0, r1, lr
 8000dc0:	fb0e 1110 	mls	r1, lr, r0, r1
 8000dc4:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000dc8:	fb08 f800 	mul.w	r8, r8, r0
 8000dcc:	45a0      	cmp	r8, r4
 8000dce:	d907      	bls.n	8000de0 <__udivmoddi4+0x10c>
 8000dd0:	193c      	adds	r4, r7, r4
 8000dd2:	f100 33ff 	add.w	r3, r0, #4294967295
 8000dd6:	d202      	bcs.n	8000dde <__udivmoddi4+0x10a>
 8000dd8:	45a0      	cmp	r8, r4
 8000dda:	f200 80d9 	bhi.w	8000f90 <__udivmoddi4+0x2bc>
 8000dde:	4618      	mov	r0, r3
 8000de0:	eba4 0408 	sub.w	r4, r4, r8
 8000de4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000de8:	e7bf      	b.n	8000d6a <__udivmoddi4+0x96>
 8000dea:	428b      	cmp	r3, r1
 8000dec:	d909      	bls.n	8000e02 <__udivmoddi4+0x12e>
 8000dee:	2d00      	cmp	r5, #0
 8000df0:	f000 80b1 	beq.w	8000f56 <__udivmoddi4+0x282>
 8000df4:	2600      	movs	r6, #0
 8000df6:	e9c5 0100 	strd	r0, r1, [r5]
 8000dfa:	4630      	mov	r0, r6
 8000dfc:	4631      	mov	r1, r6
 8000dfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e02:	fab3 f683 	clz	r6, r3
 8000e06:	2e00      	cmp	r6, #0
 8000e08:	d14a      	bne.n	8000ea0 <__udivmoddi4+0x1cc>
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d302      	bcc.n	8000e14 <__udivmoddi4+0x140>
 8000e0e:	4282      	cmp	r2, r0
 8000e10:	f200 80b8 	bhi.w	8000f84 <__udivmoddi4+0x2b0>
 8000e14:	1a84      	subs	r4, r0, r2
 8000e16:	eb61 0103 	sbc.w	r1, r1, r3
 8000e1a:	2001      	movs	r0, #1
 8000e1c:	468c      	mov	ip, r1
 8000e1e:	2d00      	cmp	r5, #0
 8000e20:	d0a8      	beq.n	8000d74 <__udivmoddi4+0xa0>
 8000e22:	e9c5 4c00 	strd	r4, ip, [r5]
 8000e26:	e7a5      	b.n	8000d74 <__udivmoddi4+0xa0>
 8000e28:	f1c2 0320 	rsb	r3, r2, #32
 8000e2c:	fa20 f603 	lsr.w	r6, r0, r3
 8000e30:	4097      	lsls	r7, r2
 8000e32:	fa01 f002 	lsl.w	r0, r1, r2
 8000e36:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e3a:	40d9      	lsrs	r1, r3
 8000e3c:	4330      	orrs	r0, r6
 8000e3e:	0c03      	lsrs	r3, r0, #16
 8000e40:	fbb1 f6fe 	udiv	r6, r1, lr
 8000e44:	fa1f f887 	uxth.w	r8, r7
 8000e48:	fb0e 1116 	mls	r1, lr, r6, r1
 8000e4c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000e50:	fb06 f108 	mul.w	r1, r6, r8
 8000e54:	4299      	cmp	r1, r3
 8000e56:	fa04 f402 	lsl.w	r4, r4, r2
 8000e5a:	d909      	bls.n	8000e70 <__udivmoddi4+0x19c>
 8000e5c:	18fb      	adds	r3, r7, r3
 8000e5e:	f106 3cff 	add.w	ip, r6, #4294967295
 8000e62:	f080 808d 	bcs.w	8000f80 <__udivmoddi4+0x2ac>
 8000e66:	4299      	cmp	r1, r3
 8000e68:	f240 808a 	bls.w	8000f80 <__udivmoddi4+0x2ac>
 8000e6c:	3e02      	subs	r6, #2
 8000e6e:	443b      	add	r3, r7
 8000e70:	1a5b      	subs	r3, r3, r1
 8000e72:	b281      	uxth	r1, r0
 8000e74:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e78:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e7c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e80:	fb00 f308 	mul.w	r3, r0, r8
 8000e84:	428b      	cmp	r3, r1
 8000e86:	d907      	bls.n	8000e98 <__udivmoddi4+0x1c4>
 8000e88:	1879      	adds	r1, r7, r1
 8000e8a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000e8e:	d273      	bcs.n	8000f78 <__udivmoddi4+0x2a4>
 8000e90:	428b      	cmp	r3, r1
 8000e92:	d971      	bls.n	8000f78 <__udivmoddi4+0x2a4>
 8000e94:	3802      	subs	r0, #2
 8000e96:	4439      	add	r1, r7
 8000e98:	1acb      	subs	r3, r1, r3
 8000e9a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000e9e:	e778      	b.n	8000d92 <__udivmoddi4+0xbe>
 8000ea0:	f1c6 0c20 	rsb	ip, r6, #32
 8000ea4:	fa03 f406 	lsl.w	r4, r3, r6
 8000ea8:	fa22 f30c 	lsr.w	r3, r2, ip
 8000eac:	431c      	orrs	r4, r3
 8000eae:	fa20 f70c 	lsr.w	r7, r0, ip
 8000eb2:	fa01 f306 	lsl.w	r3, r1, r6
 8000eb6:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000eba:	fa21 f10c 	lsr.w	r1, r1, ip
 8000ebe:	431f      	orrs	r7, r3
 8000ec0:	0c3b      	lsrs	r3, r7, #16
 8000ec2:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ec6:	fa1f f884 	uxth.w	r8, r4
 8000eca:	fb0e 1119 	mls	r1, lr, r9, r1
 8000ece:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000ed2:	fb09 fa08 	mul.w	sl, r9, r8
 8000ed6:	458a      	cmp	sl, r1
 8000ed8:	fa02 f206 	lsl.w	r2, r2, r6
 8000edc:	fa00 f306 	lsl.w	r3, r0, r6
 8000ee0:	d908      	bls.n	8000ef4 <__udivmoddi4+0x220>
 8000ee2:	1861      	adds	r1, r4, r1
 8000ee4:	f109 30ff 	add.w	r0, r9, #4294967295
 8000ee8:	d248      	bcs.n	8000f7c <__udivmoddi4+0x2a8>
 8000eea:	458a      	cmp	sl, r1
 8000eec:	d946      	bls.n	8000f7c <__udivmoddi4+0x2a8>
 8000eee:	f1a9 0902 	sub.w	r9, r9, #2
 8000ef2:	4421      	add	r1, r4
 8000ef4:	eba1 010a 	sub.w	r1, r1, sl
 8000ef8:	b2bf      	uxth	r7, r7
 8000efa:	fbb1 f0fe 	udiv	r0, r1, lr
 8000efe:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f02:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f06:	fb00 f808 	mul.w	r8, r0, r8
 8000f0a:	45b8      	cmp	r8, r7
 8000f0c:	d907      	bls.n	8000f1e <__udivmoddi4+0x24a>
 8000f0e:	19e7      	adds	r7, r4, r7
 8000f10:	f100 31ff 	add.w	r1, r0, #4294967295
 8000f14:	d22e      	bcs.n	8000f74 <__udivmoddi4+0x2a0>
 8000f16:	45b8      	cmp	r8, r7
 8000f18:	d92c      	bls.n	8000f74 <__udivmoddi4+0x2a0>
 8000f1a:	3802      	subs	r0, #2
 8000f1c:	4427      	add	r7, r4
 8000f1e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000f22:	eba7 0708 	sub.w	r7, r7, r8
 8000f26:	fba0 8902 	umull	r8, r9, r0, r2
 8000f2a:	454f      	cmp	r7, r9
 8000f2c:	46c6      	mov	lr, r8
 8000f2e:	4649      	mov	r1, r9
 8000f30:	d31a      	bcc.n	8000f68 <__udivmoddi4+0x294>
 8000f32:	d017      	beq.n	8000f64 <__udivmoddi4+0x290>
 8000f34:	b15d      	cbz	r5, 8000f4e <__udivmoddi4+0x27a>
 8000f36:	ebb3 020e 	subs.w	r2, r3, lr
 8000f3a:	eb67 0701 	sbc.w	r7, r7, r1
 8000f3e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000f42:	40f2      	lsrs	r2, r6
 8000f44:	ea4c 0202 	orr.w	r2, ip, r2
 8000f48:	40f7      	lsrs	r7, r6
 8000f4a:	e9c5 2700 	strd	r2, r7, [r5]
 8000f4e:	2600      	movs	r6, #0
 8000f50:	4631      	mov	r1, r6
 8000f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f56:	462e      	mov	r6, r5
 8000f58:	4628      	mov	r0, r5
 8000f5a:	e70b      	b.n	8000d74 <__udivmoddi4+0xa0>
 8000f5c:	4606      	mov	r6, r0
 8000f5e:	e6e9      	b.n	8000d34 <__udivmoddi4+0x60>
 8000f60:	4618      	mov	r0, r3
 8000f62:	e6fd      	b.n	8000d60 <__udivmoddi4+0x8c>
 8000f64:	4543      	cmp	r3, r8
 8000f66:	d2e5      	bcs.n	8000f34 <__udivmoddi4+0x260>
 8000f68:	ebb8 0e02 	subs.w	lr, r8, r2
 8000f6c:	eb69 0104 	sbc.w	r1, r9, r4
 8000f70:	3801      	subs	r0, #1
 8000f72:	e7df      	b.n	8000f34 <__udivmoddi4+0x260>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e7d2      	b.n	8000f1e <__udivmoddi4+0x24a>
 8000f78:	4660      	mov	r0, ip
 8000f7a:	e78d      	b.n	8000e98 <__udivmoddi4+0x1c4>
 8000f7c:	4681      	mov	r9, r0
 8000f7e:	e7b9      	b.n	8000ef4 <__udivmoddi4+0x220>
 8000f80:	4666      	mov	r6, ip
 8000f82:	e775      	b.n	8000e70 <__udivmoddi4+0x19c>
 8000f84:	4630      	mov	r0, r6
 8000f86:	e74a      	b.n	8000e1e <__udivmoddi4+0x14a>
 8000f88:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f8c:	4439      	add	r1, r7
 8000f8e:	e713      	b.n	8000db8 <__udivmoddi4+0xe4>
 8000f90:	3802      	subs	r0, #2
 8000f92:	443c      	add	r4, r7
 8000f94:	e724      	b.n	8000de0 <__udivmoddi4+0x10c>
 8000f96:	bf00      	nop

08000f98 <__aeabi_idiv0>:
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop

08000f9c <PID_init>:
};
//Roll,Pitch,Yaw,z x y
float target_ver[6];
int pidinit = 0;
void PID_init()
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
    target_ver[0] = 0;
 8000fa0:	4b0b      	ldr	r3, [pc, #44]	; (8000fd0 <PID_init+0x34>)
 8000fa2:	f04f 0200 	mov.w	r2, #0
 8000fa6:	601a      	str	r2, [r3, #0]
    target_ver[1] = 0;
 8000fa8:	4b09      	ldr	r3, [pc, #36]	; (8000fd0 <PID_init+0x34>)
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	605a      	str	r2, [r3, #4]
    target_ver[2] = yaw;
 8000fb0:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <PID_init+0x38>)
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	4a06      	ldr	r2, [pc, #24]	; (8000fd0 <PID_init+0x34>)
 8000fb6:	6093      	str	r3, [r2, #8]
    target_ver[3] = 0.05;
 8000fb8:	4b05      	ldr	r3, [pc, #20]	; (8000fd0 <PID_init+0x34>)
 8000fba:	4a07      	ldr	r2, [pc, #28]	; (8000fd8 <PID_init+0x3c>)
 8000fbc:	60da      	str	r2, [r3, #12]
    pidinit = 1;
 8000fbe:	4b07      	ldr	r3, [pc, #28]	; (8000fdc <PID_init+0x40>)
 8000fc0:	2201      	movs	r2, #1
 8000fc2:	601a      	str	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	20000484 	.word	0x20000484
 8000fd4:	200004f8 	.word	0x200004f8
 8000fd8:	3d4ccccd 	.word	0x3d4ccccd
 8000fdc:	200003e8 	.word	0x200003e8

08000fe0 <PID_CTRL>:

void PID_CTRL() //综合控制 encodeL左侧编码器 encodeR右侧编码器
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b089      	sub	sp, #36	; 0x24
 8000fe4:	af00      	add	r7, sp, #0
    //out += Kpr * (err - err1) + Tir * err+Tdr*(err-2*err1+err2); //
    //增量式PID方程 输出=输出+P*(本次误差-上次误差)+I*本次误差
    float err[6];
    //float tmp_yaw;
    //tmp_yaw = target_ver[2];
    target_ver[2]+=yawa;
 8000fe6:	4b9f      	ldr	r3, [pc, #636]	; (8001264 <PID_CTRL+0x284>)
 8000fe8:	ed93 7a02 	vldr	s14, [r3, #8]
 8000fec:	4b9e      	ldr	r3, [pc, #632]	; (8001268 <PID_CTRL+0x288>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000ff6:	4b9b      	ldr	r3, [pc, #620]	; (8001264 <PID_CTRL+0x284>)
 8000ff8:	edc3 7a02 	vstr	s15, [r3, #8]
    if (target_ver[2] > 180)
 8000ffc:	4b99      	ldr	r3, [pc, #612]	; (8001264 <PID_CTRL+0x284>)
 8000ffe:	edd3 7a02 	vldr	s15, [r3, #8]
 8001002:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800126c <PID_CTRL+0x28c>
 8001006:	eef4 7ac7 	vcmpe.f32	s15, s14
 800100a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800100e:	dd09      	ble.n	8001024 <PID_CTRL+0x44>
    	target_ver[2] = target_ver[2] - 360;
 8001010:	4b94      	ldr	r3, [pc, #592]	; (8001264 <PID_CTRL+0x284>)
 8001012:	edd3 7a02 	vldr	s15, [r3, #8]
 8001016:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001270 <PID_CTRL+0x290>
 800101a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800101e:	4b91      	ldr	r3, [pc, #580]	; (8001264 <PID_CTRL+0x284>)
 8001020:	edc3 7a02 	vstr	s15, [r3, #8]
    if (target_ver[2] < -180)
 8001024:	4b8f      	ldr	r3, [pc, #572]	; (8001264 <PID_CTRL+0x284>)
 8001026:	edd3 7a02 	vldr	s15, [r3, #8]
 800102a:	ed9f 7a92 	vldr	s14, [pc, #584]	; 8001274 <PID_CTRL+0x294>
 800102e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001036:	d509      	bpl.n	800104c <PID_CTRL+0x6c>
    	target_ver[2] = target_ver[2] + 360;
 8001038:	4b8a      	ldr	r3, [pc, #552]	; (8001264 <PID_CTRL+0x284>)
 800103a:	edd3 7a02 	vldr	s15, [r3, #8]
 800103e:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8001270 <PID_CTRL+0x290>
 8001042:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001046:	4b87      	ldr	r3, [pc, #540]	; (8001264 <PID_CTRL+0x284>)
 8001048:	edc3 7a02 	vstr	s15, [r3, #8]

    err[0] = target_ver[0] - roll;  //求误差
 800104c:	4b85      	ldr	r3, [pc, #532]	; (8001264 <PID_CTRL+0x284>)
 800104e:	ed93 7a00 	vldr	s14, [r3]
 8001052:	4b89      	ldr	r3, [pc, #548]	; (8001278 <PID_CTRL+0x298>)
 8001054:	edd3 7a00 	vldr	s15, [r3]
 8001058:	ee77 7a67 	vsub.f32	s15, s14, s15
 800105c:	edc7 7a01 	vstr	s15, [r7, #4]
    err[1] = target_ver[1] - pitch; //求误差
 8001060:	4b80      	ldr	r3, [pc, #512]	; (8001264 <PID_CTRL+0x284>)
 8001062:	ed93 7a01 	vldr	s14, [r3, #4]
 8001066:	4b85      	ldr	r3, [pc, #532]	; (800127c <PID_CTRL+0x29c>)
 8001068:	edd3 7a00 	vldr	s15, [r3]
 800106c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001070:	edc7 7a02 	vstr	s15, [r7, #8]
    err[2] = target_ver[2] - yaw;   //求误差
 8001074:	4b7b      	ldr	r3, [pc, #492]	; (8001264 <PID_CTRL+0x284>)
 8001076:	ed93 7a02 	vldr	s14, [r3, #8]
 800107a:	4b81      	ldr	r3, [pc, #516]	; (8001280 <PID_CTRL+0x2a0>)
 800107c:	edd3 7a00 	vldr	s15, [r3]
 8001080:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001084:	edc7 7a03 	vstr	s15, [r7, #12]

    if (err[2] > 180)
 8001088:	edd7 7a03 	vldr	s15, [r7, #12]
 800108c:	ed9f 7a77 	vldr	s14, [pc, #476]	; 800126c <PID_CTRL+0x28c>
 8001090:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001098:	dd07      	ble.n	80010aa <PID_CTRL+0xca>
        err[2] -= 360;
 800109a:	edd7 7a03 	vldr	s15, [r7, #12]
 800109e:	ed9f 7a74 	vldr	s14, [pc, #464]	; 8001270 <PID_CTRL+0x290>
 80010a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010a6:	edc7 7a03 	vstr	s15, [r7, #12]
    if (err[2] < -180)
 80010aa:	edd7 7a03 	vldr	s15, [r7, #12]
 80010ae:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8001274 <PID_CTRL+0x294>
 80010b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80010b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80010ba:	d507      	bpl.n	80010cc <PID_CTRL+0xec>
        err[2] += 360;
 80010bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80010c0:	ed9f 7a6b 	vldr	s14, [pc, #428]	; 8001270 <PID_CTRL+0x290>
 80010c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80010c8:	edc7 7a03 	vstr	s15, [r7, #12]

    err[3] = target_ver[3] - deep; //求误差
 80010cc:	4b65      	ldr	r3, [pc, #404]	; (8001264 <PID_CTRL+0x284>)
 80010ce:	ed93 7a03 	vldr	s14, [r3, #12]
 80010d2:	4b6c      	ldr	r3, [pc, #432]	; (8001284 <PID_CTRL+0x2a4>)
 80010d4:	edd3 7a00 	vldr	s15, [r3]
 80010d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010dc:	edc7 7a04 	vstr	s15, [r7, #16]
    err[4] = target_ver[4]; //求误差
 80010e0:	4b60      	ldr	r3, [pc, #384]	; (8001264 <PID_CTRL+0x284>)
 80010e2:	691b      	ldr	r3, [r3, #16]
 80010e4:	617b      	str	r3, [r7, #20]
    err[5] = target_ver[5]; //求误差
 80010e6:	4b5f      	ldr	r3, [pc, #380]	; (8001264 <PID_CTRL+0x284>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	61bb      	str	r3, [r7, #24]
    for (int i = 0; i < 6; i++)
 80010ec:	2300      	movs	r3, #0
 80010ee:	61fb      	str	r3, [r7, #28]
 80010f0:	e0ad      	b.n	800124e <PID_CTRL+0x26e>
    {
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4]) + pid_ver[i][1] * err[i] + pid_ver[i][2] * (err[i] - 2 * pid_ver[i][4] + pid_ver[i][5]);
 80010f2:	4965      	ldr	r1, [pc, #404]	; (8001288 <PID_CTRL+0x2a8>)
 80010f4:	69fa      	ldr	r2, [r7, #28]
 80010f6:	4613      	mov	r3, r2
 80010f8:	00db      	lsls	r3, r3, #3
 80010fa:	1a9b      	subs	r3, r3, r2
 80010fc:	009b      	lsls	r3, r3, #2
 80010fe:	440b      	add	r3, r1
 8001100:	330c      	adds	r3, #12
 8001102:	ed93 7a00 	vldr	s14, [r3]
 8001106:	4960      	ldr	r1, [pc, #384]	; (8001288 <PID_CTRL+0x2a8>)
 8001108:	69fa      	ldr	r2, [r7, #28]
 800110a:	4613      	mov	r3, r2
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	1a9b      	subs	r3, r3, r2
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	440b      	add	r3, r1
 8001114:	edd3 6a00 	vldr	s13, [r3]
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	009b      	lsls	r3, r3, #2
 800111c:	f107 0220 	add.w	r2, r7, #32
 8001120:	4413      	add	r3, r2
 8001122:	3b1c      	subs	r3, #28
 8001124:	ed93 6a00 	vldr	s12, [r3]
 8001128:	4957      	ldr	r1, [pc, #348]	; (8001288 <PID_CTRL+0x2a8>)
 800112a:	69fa      	ldr	r2, [r7, #28]
 800112c:	4613      	mov	r3, r2
 800112e:	00db      	lsls	r3, r3, #3
 8001130:	1a9b      	subs	r3, r3, r2
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	440b      	add	r3, r1
 8001136:	3310      	adds	r3, #16
 8001138:	edd3 7a00 	vldr	s15, [r3]
 800113c:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001140:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001144:	4950      	ldr	r1, [pc, #320]	; (8001288 <PID_CTRL+0x2a8>)
 8001146:	69fa      	ldr	r2, [r7, #28]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	3304      	adds	r3, #4
 8001154:	ed93 6a00 	vldr	s12, [r3]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	f107 0220 	add.w	r2, r7, #32
 8001160:	4413      	add	r3, r2
 8001162:	3b1c      	subs	r3, #28
 8001164:	edd3 7a00 	vldr	s15, [r3]
 8001168:	ee66 7a27 	vmul.f32	s15, s12, s15
 800116c:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8001170:	4945      	ldr	r1, [pc, #276]	; (8001288 <PID_CTRL+0x2a8>)
 8001172:	69fa      	ldr	r2, [r7, #28]
 8001174:	4613      	mov	r3, r2
 8001176:	00db      	lsls	r3, r3, #3
 8001178:	1a9b      	subs	r3, r3, r2
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	440b      	add	r3, r1
 800117e:	3308      	adds	r3, #8
 8001180:	ed93 6a00 	vldr	s12, [r3]
 8001184:	69fb      	ldr	r3, [r7, #28]
 8001186:	009b      	lsls	r3, r3, #2
 8001188:	f107 0220 	add.w	r2, r7, #32
 800118c:	4413      	add	r3, r2
 800118e:	3b1c      	subs	r3, #28
 8001190:	edd3 5a00 	vldr	s11, [r3]
 8001194:	493c      	ldr	r1, [pc, #240]	; (8001288 <PID_CTRL+0x2a8>)
 8001196:	69fa      	ldr	r2, [r7, #28]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3310      	adds	r3, #16
 80011a4:	edd3 7a00 	vldr	s15, [r3]
 80011a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80011ac:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80011b0:	4935      	ldr	r1, [pc, #212]	; (8001288 <PID_CTRL+0x2a8>)
 80011b2:	69fa      	ldr	r2, [r7, #28]
 80011b4:	4613      	mov	r3, r2
 80011b6:	00db      	lsls	r3, r3, #3
 80011b8:	1a9b      	subs	r3, r3, r2
 80011ba:	009b      	lsls	r3, r3, #2
 80011bc:	440b      	add	r3, r1
 80011be:	3314      	adds	r3, #20
 80011c0:	edd3 7a00 	vldr	s15, [r3]
 80011c4:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80011c8:	ee66 7a27 	vmul.f32	s15, s12, s15
 80011cc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80011d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d4:	492c      	ldr	r1, [pc, #176]	; (8001288 <PID_CTRL+0x2a8>)
 80011d6:	69fa      	ldr	r2, [r7, #28]
 80011d8:	4613      	mov	r3, r2
 80011da:	00db      	lsls	r3, r3, #3
 80011dc:	1a9b      	subs	r3, r3, r2
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	440b      	add	r3, r1
 80011e2:	330c      	adds	r3, #12
 80011e4:	edc3 7a00 	vstr	s15, [r3]
        dof6[i] = pid_ver[i][3];       //输出到6自由度
 80011e8:	4927      	ldr	r1, [pc, #156]	; (8001288 <PID_CTRL+0x2a8>)
 80011ea:	69fa      	ldr	r2, [r7, #28]
 80011ec:	4613      	mov	r3, r2
 80011ee:	00db      	lsls	r3, r3, #3
 80011f0:	1a9b      	subs	r3, r3, r2
 80011f2:	009b      	lsls	r3, r3, #2
 80011f4:	440b      	add	r3, r1
 80011f6:	330c      	adds	r3, #12
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	4924      	ldr	r1, [pc, #144]	; (800128c <PID_CTRL+0x2ac>)
 80011fc:	69fb      	ldr	r3, [r7, #28]
 80011fe:	009b      	lsls	r3, r3, #2
 8001200:	440b      	add	r3, r1
 8001202:	601a      	str	r2, [r3, #0]
        pid_ver[i][5] = pid_ver[i][4]; //更新上上次误差
 8001204:	4920      	ldr	r1, [pc, #128]	; (8001288 <PID_CTRL+0x2a8>)
 8001206:	69fa      	ldr	r2, [r7, #28]
 8001208:	4613      	mov	r3, r2
 800120a:	00db      	lsls	r3, r3, #3
 800120c:	1a9b      	subs	r3, r3, r2
 800120e:	009b      	lsls	r3, r3, #2
 8001210:	440b      	add	r3, r1
 8001212:	3310      	adds	r3, #16
 8001214:	6819      	ldr	r1, [r3, #0]
 8001216:	481c      	ldr	r0, [pc, #112]	; (8001288 <PID_CTRL+0x2a8>)
 8001218:	69fa      	ldr	r2, [r7, #28]
 800121a:	4613      	mov	r3, r2
 800121c:	00db      	lsls	r3, r3, #3
 800121e:	1a9b      	subs	r3, r3, r2
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	4403      	add	r3, r0
 8001224:	3314      	adds	r3, #20
 8001226:	6019      	str	r1, [r3, #0]
        pid_ver[i][4] = err[i];        //更新上次误差
 8001228:	69fb      	ldr	r3, [r7, #28]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	f107 0220 	add.w	r2, r7, #32
 8001230:	4413      	add	r3, r2
 8001232:	3b1c      	subs	r3, #28
 8001234:	6819      	ldr	r1, [r3, #0]
 8001236:	4814      	ldr	r0, [pc, #80]	; (8001288 <PID_CTRL+0x2a8>)
 8001238:	69fa      	ldr	r2, [r7, #28]
 800123a:	4613      	mov	r3, r2
 800123c:	00db      	lsls	r3, r3, #3
 800123e:	1a9b      	subs	r3, r3, r2
 8001240:	009b      	lsls	r3, r3, #2
 8001242:	4403      	add	r3, r0
 8001244:	3310      	adds	r3, #16
 8001246:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < 6; i++)
 8001248:	69fb      	ldr	r3, [r7, #28]
 800124a:	3301      	adds	r3, #1
 800124c:	61fb      	str	r3, [r7, #28]
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	2b05      	cmp	r3, #5
 8001252:	f77f af4e 	ble.w	80010f2 <PID_CTRL+0x112>
    }
}
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	3724      	adds	r7, #36	; 0x24
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr
 8001264:	20000484 	.word	0x20000484
 8001268:	20000474 	.word	0x20000474
 800126c:	43340000 	.word	0x43340000
 8001270:	43b40000 	.word	0x43b40000
 8001274:	c3340000 	.word	0xc3340000
 8001278:	20000500 	.word	0x20000500
 800127c:	200004fc 	.word	0x200004fc
 8001280:	200004f8 	.word	0x200004f8
 8001284:	20000504 	.word	0x20000504
 8001288:	20000000 	.word	0x20000000
 800128c:	200003ec 	.word	0x200003ec

08001290 <VRUinit>:
float pitch, roll, yaw,*dat;
int tim;
//UART_HandleTypeDef *VRUhuart;

void VRUinit(UART_HandleTypeDef *huart)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
	//VRUhuart = huart;
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	68da      	ldr	r2, [r3, #12]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f042 0210 	orr.w	r2, r2, #16
 80012a6:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, ch110, 82);
 80012a8:	2252      	movs	r2, #82	; 0x52
 80012aa:	4904      	ldr	r1, [pc, #16]	; (80012bc <VRUinit+0x2c>)
 80012ac:	6878      	ldr	r0, [r7, #4]
 80012ae:	f006 f83f 	bl	8007330 <HAL_UART_Receive_DMA>
}
 80012b2:	bf00      	nop
 80012b4:	3708      	adds	r7, #8
 80012b6:	46bd      	mov	sp, r7
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	200004a4 	.word	0x200004a4

080012c0 <VRUupdate>:
//从串口中断触发 每次执行 提取姿态数据
void VRUupdate()
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
	float * datflo;
	datflo=(float *) (ch110 + 18);
 80012c6:	4b15      	ldr	r3, [pc, #84]	; (800131c <VRUupdate+0x5c>)
 80012c8:	603b      	str	r3, [r7, #0]
	/*
	roll = *(float *) (ch110 + 54);
	pitch = *(float *) (ch110 + 58);
	yaw = *(float *) (ch110 + 62);
	*/
	roll = datflo[9];
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012ce:	4a14      	ldr	r2, [pc, #80]	; (8001320 <VRUupdate+0x60>)
 80012d0:	6013      	str	r3, [r2, #0]
	pitch = datflo[10];
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d6:	4a13      	ldr	r2, [pc, #76]	; (8001324 <VRUupdate+0x64>)
 80012d8:	6013      	str	r3, [r2, #0]
	yaw = datflo[11];
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012de:	4a12      	ldr	r2, [pc, #72]	; (8001328 <VRUupdate+0x68>)
 80012e0:	6013      	str	r3, [r2, #0]

	for(int i=0;i<16;i++)
 80012e2:	2300      	movs	r3, #0
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	e00c      	b.n	8001302 <VRUupdate+0x42>
	{
		frame.fdata[i] = datflo[i];
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	683a      	ldr	r2, [r7, #0]
 80012ee:	4413      	add	r3, r2
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	490e      	ldr	r1, [pc, #56]	; (800132c <VRUupdate+0x6c>)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	009b      	lsls	r3, r3, #2
 80012f8:	440b      	add	r3, r1
 80012fa:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	3301      	adds	r3, #1
 8001300:	607b      	str	r3, [r7, #4]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	2b0f      	cmp	r3, #15
 8001306:	ddef      	ble.n	80012e8 <VRUupdate+0x28>
		//3角速度XYZ
		//6磁强度XYZ
		//9欧拉角Roll Pitch Yaw
		//12四元数WXYZ
	}
    if(pidinit == 0)
 8001308:	4b09      	ldr	r3, [pc, #36]	; (8001330 <VRUupdate+0x70>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d101      	bne.n	8001314 <VRUupdate+0x54>
        PID_init();
 8001310:	f7ff fe44 	bl	8000f9c <PID_init>
    if(pidinit == 1)
    {
        PID_CTRL();
        setmotor();
    }*/
}
 8001314:	bf00      	nop
 8001316:	3708      	adds	r7, #8
 8001318:	46bd      	mov	sp, r7
 800131a:	bd80      	pop	{r7, pc}
 800131c:	200004b6 	.word	0x200004b6
 8001320:	20000500 	.word	0x20000500
 8001324:	200004fc 	.word	0x200004fc
 8001328:	200004f8 	.word	0x200004f8
 800132c:	200000a8 	.word	0x200000a8
 8001330:	200003e8 	.word	0x200003e8

08001334 <VRUerror>:
void VRUerror(UART_HandleTypeDef *huart)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b082      	sub	sp, #8
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 800133c:	6878      	ldr	r0, [r7, #4]
 800133e:	f006 f827 	bl	8007390 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, ch110, 82);
 8001342:	2252      	movs	r2, #82	; 0x52
 8001344:	4903      	ldr	r1, [pc, #12]	; (8001354 <VRUerror+0x20>)
 8001346:	6878      	ldr	r0, [r7, #4]
 8001348:	f005 fff2 	bl	8007330 <HAL_UART_Receive_DMA>
}
 800134c:	bf00      	nop
 800134e:	3708      	adds	r7, #8
 8001350:	46bd      	mov	sp, r7
 8001352:	bd80      	pop	{r7, pc}
 8001354:	200004a4 	.word	0x200004a4

08001358 <deepSensorInit>:

unsigned char deepSensorBuff[20];
float deep,temperature;

void deepSensorInit(UART_HandleTypeDef *huart)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	68da      	ldr	r2, [r3, #12]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f042 0210 	orr.w	r2, r2, #16
 800136e:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, deepSensorBuff, 20);
 8001370:	2214      	movs	r2, #20
 8001372:	4904      	ldr	r1, [pc, #16]	; (8001384 <deepSensorInit+0x2c>)
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	f005 ffdb 	bl	8007330 <HAL_UART_Receive_DMA>
}
 800137a:	bf00      	nop
 800137c:	3708      	adds	r7, #8
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
 8001382:	bf00      	nop
 8001384:	2000050c 	.word	0x2000050c

08001388 <deepSensorUpdate>:

void deepSensorUpdate(unsigned char *deepSsensorBuff)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af02      	add	r7, sp, #8
 800138e:	6078      	str	r0, [r7, #4]
	sscanf((char *)deepSensorBuff,"T=%fD=%f",&temperature,&deep);
 8001390:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <deepSensorUpdate+0x60>)
 8001392:	4a16      	ldr	r2, [pc, #88]	; (80013ec <deepSensorUpdate+0x64>)
 8001394:	4916      	ldr	r1, [pc, #88]	; (80013f0 <deepSensorUpdate+0x68>)
 8001396:	4817      	ldr	r0, [pc, #92]	; (80013f4 <deepSensorUpdate+0x6c>)
 8001398:	f007 f97c 	bl	8008694 <siscanf>
	if(deep<0)deep=0;
 800139c:	4b12      	ldr	r3, [pc, #72]	; (80013e8 <deepSensorUpdate+0x60>)
 800139e:	edd3 7a00 	vldr	s15, [r3]
 80013a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013aa:	d503      	bpl.n	80013b4 <deepSensorUpdate+0x2c>
 80013ac:	4b0e      	ldr	r3, [pc, #56]	; (80013e8 <deepSensorUpdate+0x60>)
 80013ae:	f04f 0200 	mov.w	r2, #0
 80013b2:	601a      	str	r2, [r3, #0]
	frame.fdata[27]=deep;
 80013b4:	4b0c      	ldr	r3, [pc, #48]	; (80013e8 <deepSensorUpdate+0x60>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4a0f      	ldr	r2, [pc, #60]	; (80013f8 <deepSensorUpdate+0x70>)
 80013ba:	66d3      	str	r3, [r2, #108]	; 0x6c
	OLED_ShowNumber(64, 36, (int)(temperature*100), 3, 12);
 80013bc:	4b0b      	ldr	r3, [pc, #44]	; (80013ec <deepSensorUpdate+0x64>)
 80013be:	edd3 7a00 	vldr	s15, [r3]
 80013c2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80013fc <deepSensorUpdate+0x74>
 80013c6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80013ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80013ce:	ee17 2a90 	vmov	r2, s15
 80013d2:	230c      	movs	r3, #12
 80013d4:	9300      	str	r3, [sp, #0]
 80013d6:	2303      	movs	r3, #3
 80013d8:	2124      	movs	r1, #36	; 0x24
 80013da:	2040      	movs	r0, #64	; 0x40
 80013dc:	f001 fa04 	bl	80027e8 <OLED_ShowNumber>
	//frame.fdata[28]=temperature;
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	20000504 	.word	0x20000504
 80013ec:	20000508 	.word	0x20000508
 80013f0:	0800c060 	.word	0x0800c060
 80013f4:	2000050c 	.word	0x2000050c
 80013f8:	200000a8 	.word	0x200000a8
 80013fc:	42c80000 	.word	0x42c80000

08001400 <deepSensorerr>:

void deepSensorerr(UART_HandleTypeDef *huart)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f005 ffc1 	bl	8007390 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, deepSensorBuff, 20);
 800140e:	2214      	movs	r2, #20
 8001410:	4903      	ldr	r1, [pc, #12]	; (8001420 <deepSensorerr+0x20>)
 8001412:	6878      	ldr	r0, [r7, #4]
 8001414:	f005 ff8c 	bl	8007330 <HAL_UART_Receive_DMA>
}
 8001418:	bf00      	nop
 800141a:	3708      	adds	r7, #8
 800141c:	46bd      	mov	sp, r7
 800141e:	bd80      	pop	{r7, pc}
 8001420:	2000050c 	.word	0x2000050c

08001424 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	60f8      	str	r0, [r7, #12]
 800142c:	60b9      	str	r1, [r7, #8]
 800142e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 300);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	b29a      	uxth	r2, r3
 8001434:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001438:	68b9      	ldr	r1, [r7, #8]
 800143a:	4804      	ldr	r0, [pc, #16]	; (800144c <_write+0x28>)
 800143c:	f005 fea1 	bl	8007182 <HAL_UART_Transmit>
	return len;
 8001440:	687b      	ldr	r3, [r7, #4]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
 800144a:	bf00      	nop
 800144c:	20000890 	.word	0x20000890

08001450 <HAL_UART_RxCpltCallback>:
void delay_ms(unsigned int ms) {
	HAL_Delay(ms);
	return;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001450:	b580      	push	{r7, lr}
 8001452:	b082      	sub	sp, #8
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	4a08      	ldr	r2, [pc, #32]	; (800147c <HAL_UART_RxCpltCallback+0x2c>)
 800145c:	4293      	cmp	r3, r2
 800145e:	d102      	bne.n	8001466 <HAL_UART_RxCpltCallback+0x16>
	{
		VRUupdate();
 8001460:	f7ff ff2e 	bl	80012c0 <VRUupdate>
	}else if(&huart4==huart)
	 {
		raspiUpdate();
	}
}
 8001464:	e005      	b.n	8001472 <HAL_UART_RxCpltCallback+0x22>
	}else if(&huart4==huart)
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4a05      	ldr	r2, [pc, #20]	; (8001480 <HAL_UART_RxCpltCallback+0x30>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_UART_RxCpltCallback+0x22>
		raspiUpdate();
 800146e:	f001 fb1f 	bl	8002ab0 <raspiUpdate>
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	20000a00 	.word	0x20000a00
 8001480:	2000091c 	.word	0x2000091c

08001484 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b082      	sub	sp, #8
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	4a13      	ldr	r2, [pc, #76]	; (80014dc <HAL_UART_ErrorCallback+0x58>)
 8001490:	4293      	cmp	r3, r2
 8001492:	d103      	bne.n	800149c <HAL_UART_ErrorCallback+0x18>
	{
		VRUerror(huart);
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff ff4d 	bl	8001334 <VRUerror>
		deepSensorerr(huart);
	}else if(&huart4==huart)
	{
		raspierr(huart);
	}
}
 800149a:	e01a      	b.n	80014d2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart1==huart)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	4a10      	ldr	r2, [pc, #64]	; (80014e0 <HAL_UART_ErrorCallback+0x5c>)
 80014a0:	4293      	cmp	r3, r2
 80014a2:	d016      	beq.n	80014d2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart5==huart)
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	4a0f      	ldr	r2, [pc, #60]	; (80014e4 <HAL_UART_ErrorCallback+0x60>)
 80014a8:	4293      	cmp	r3, r2
 80014aa:	d103      	bne.n	80014b4 <HAL_UART_ErrorCallback+0x30>
		remoteerr(huart);
 80014ac:	6878      	ldr	r0, [r7, #4]
 80014ae:	f001 fcd7 	bl	8002e60 <remoteerr>
}
 80014b2:	e00e      	b.n	80014d2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart3==huart)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	4a0c      	ldr	r2, [pc, #48]	; (80014e8 <HAL_UART_ErrorCallback+0x64>)
 80014b8:	4293      	cmp	r3, r2
 80014ba:	d103      	bne.n	80014c4 <HAL_UART_ErrorCallback+0x40>
		deepSensorerr(huart);
 80014bc:	6878      	ldr	r0, [r7, #4]
 80014be:	f7ff ff9f 	bl	8001400 <deepSensorerr>
}
 80014c2:	e006      	b.n	80014d2 <HAL_UART_ErrorCallback+0x4e>
	}else if(&huart4==huart)
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	4a09      	ldr	r2, [pc, #36]	; (80014ec <HAL_UART_ErrorCallback+0x68>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d102      	bne.n	80014d2 <HAL_UART_ErrorCallback+0x4e>
		raspierr(huart);
 80014cc:	6878      	ldr	r0, [r7, #4]
 80014ce:	f001 fb83 	bl	8002bd8 <raspierr>
}
 80014d2:	bf00      	nop
 80014d4:	3708      	adds	r7, #8
 80014d6:	46bd      	mov	sp, r7
 80014d8:	bd80      	pop	{r7, pc}
 80014da:	bf00      	nop
 80014dc:	20000a00 	.word	0x20000a00
 80014e0:	20000890 	.word	0x20000890
 80014e4:	200007a4 	.word	0x200007a4
 80014e8:	200006d0 	.word	0x200006d0
 80014ec:	2000091c 	.word	0x2000091c

080014f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b082      	sub	sp, #8
 80014f4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f6:	f002 fc6f 	bl	8003dd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f86d 	bl	80015d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80014fe:	f000 fdc1 	bl	8002084 <MX_GPIO_Init>
  MX_DMA_Init();
 8001502:	f000 fd71 	bl	8001fe8 <MX_DMA_Init>
  MX_ADC1_Init();
 8001506:	f000 f8d1 	bl	80016ac <MX_ADC1_Init>
  MX_SPI1_Init();
 800150a:	f000 f921 	bl	8001750 <MX_SPI1_Init>
  MX_TIM1_Init();
 800150e:	f000 f955 	bl	80017bc <MX_TIM1_Init>
  MX_TIM2_Init();
 8001512:	f000 f9a3 	bl	800185c <MX_TIM2_Init>
  MX_TIM3_Init();
 8001516:	f000 f9ed 	bl	80018f4 <MX_TIM3_Init>
  MX_TIM4_Init();
 800151a:	f000 fa83 	bl	8001a24 <MX_TIM4_Init>
  MX_TIM5_Init();
 800151e:	f000 fb19 	bl	8001b54 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001522:	f000 fb7b 	bl	8001c1c <MX_TIM8_Init>
  MX_UART4_Init();
 8001526:	f000 fc8d 	bl	8001e44 <MX_UART4_Init>
  MX_UART5_Init();
 800152a:	f000 fcb5 	bl	8001e98 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800152e:	f000 fcdd 	bl	8001eec <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001532:	f000 fd05 	bl	8001f40 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001536:	f000 fd2d 	bl	8001f94 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800153a:	f000 fc33 	bl	8001da4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//delay function sppeeort
 800153e:	481b      	ldr	r0, [pc, #108]	; (80015ac <main+0xbc>)
 8001540:	f004 fd3e 	bl	8005fc0 <HAL_TIM_Base_Start>

  motorinit();
 8001544:	f000 feb4 	bl	80022b0 <motorinit>

	HAL_TIM_Base_Start_IT(&htim1);
 8001548:	4819      	ldr	r0, [pc, #100]	; (80015b0 <main+0xc0>)
 800154a:	f004 fda1 	bl	8006090 <HAL_TIM_Base_Start_IT>

	VRUinit(&huart2);
 800154e:	4819      	ldr	r0, [pc, #100]	; (80015b4 <main+0xc4>)
 8001550:	f7ff fe9e 	bl	8001290 <VRUinit>
	OLED_Init();
 8001554:	f001 f9e8 	bl	8002928 <OLED_Init>
	//PID_init();
	remoteInit(&huart5);
 8001558:	4817      	ldr	r0, [pc, #92]	; (80015b8 <main+0xc8>)
 800155a:	f001 fb4f 	bl	8002bfc <remoteInit>
	raspiInit(&huart4);
 800155e:	4817      	ldr	r0, [pc, #92]	; (80015bc <main+0xcc>)
 8001560:	f001 fa8e 	bl	8002a80 <raspiInit>
	deepSensorInit(&huart3);
 8001564:	4816      	ldr	r0, [pc, #88]	; (80015c0 <main+0xd0>)
 8001566:	f7ff fef7 	bl	8001358 <deepSensorInit>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello\r\n");
 800156a:	4816      	ldr	r0, [pc, #88]	; (80015c4 <main+0xd4>)
 800156c:	f007 f864 	bl	8008638 <puts>
  //OLED_ShowString(0,0,"runing...");

  OLED_ShowString(0,12,"run time:");
 8001570:	4a15      	ldr	r2, [pc, #84]	; (80015c8 <main+0xd8>)
 8001572:	210c      	movs	r1, #12
 8001574:	2000      	movs	r0, #0
 8001576:	f001 f9a5 	bl	80028c4 <OLED_ShowString>
  OLED_ShowString(0,12,"worning:");
 800157a:	4a14      	ldr	r2, [pc, #80]	; (80015cc <main+0xdc>)
 800157c:	210c      	movs	r1, #12
 800157e:	2000      	movs	r0, #0
 8001580:	f001 f9a0 	bl	80028c4 <OLED_ShowString>
  OLED_ShowString(0,12,"temp:");
 8001584:	4a12      	ldr	r2, [pc, #72]	; (80015d0 <main+0xe0>)
 8001586:	210c      	movs	r1, #12
 8001588:	2000      	movs	r0, #0
 800158a:	f001 f99b 	bl	80028c4 <OLED_ShowString>
  while (1)
  {
	  OLED_ShowNumber(64, 12, HAL_GetTick()/1000, 3, 12);
 800158e:	f002 fc59 	bl	8003e44 <HAL_GetTick>
 8001592:	4603      	mov	r3, r0
 8001594:	4a0f      	ldr	r2, [pc, #60]	; (80015d4 <main+0xe4>)
 8001596:	fba2 2303 	umull	r2, r3, r2, r3
 800159a:	099a      	lsrs	r2, r3, #6
 800159c:	230c      	movs	r3, #12
 800159e:	9300      	str	r3, [sp, #0]
 80015a0:	2303      	movs	r3, #3
 80015a2:	210c      	movs	r1, #12
 80015a4:	2040      	movs	r0, #64	; 0x40
 80015a6:	f001 f91f 	bl	80027e8 <OLED_ShowNumber>
 80015aa:	e7f0      	b.n	800158e <main+0x9e>
 80015ac:	200009b8 	.word	0x200009b8
 80015b0:	200008d4 	.word	0x200008d4
 80015b4:	20000a00 	.word	0x20000a00
 80015b8:	200007a4 	.word	0x200007a4
 80015bc:	2000091c 	.word	0x2000091c
 80015c0:	200006d0 	.word	0x200006d0
 80015c4:	0800c06c 	.word	0x0800c06c
 80015c8:	0800c074 	.word	0x0800c074
 80015cc:	0800c080 	.word	0x0800c080
 80015d0:	0800c08c 	.word	0x0800c08c
 80015d4:	10624dd3 	.word	0x10624dd3

080015d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b094      	sub	sp, #80	; 0x50
 80015dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	2230      	movs	r2, #48	; 0x30
 80015e4:	2100      	movs	r1, #0
 80015e6:	4618      	mov	r0, r3
 80015e8:	f006 fda0 	bl	800812c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	2200      	movs	r2, #0
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	605a      	str	r2, [r3, #4]
 80015f6:	609a      	str	r2, [r3, #8]
 80015f8:	60da      	str	r2, [r3, #12]
 80015fa:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015fc:	2300      	movs	r3, #0
 80015fe:	60bb      	str	r3, [r7, #8]
 8001600:	4b28      	ldr	r3, [pc, #160]	; (80016a4 <SystemClock_Config+0xcc>)
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	4a27      	ldr	r2, [pc, #156]	; (80016a4 <SystemClock_Config+0xcc>)
 8001606:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800160a:	6413      	str	r3, [r2, #64]	; 0x40
 800160c:	4b25      	ldr	r3, [pc, #148]	; (80016a4 <SystemClock_Config+0xcc>)
 800160e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001610:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001614:	60bb      	str	r3, [r7, #8]
 8001616:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001618:	2300      	movs	r3, #0
 800161a:	607b      	str	r3, [r7, #4]
 800161c:	4b22      	ldr	r3, [pc, #136]	; (80016a8 <SystemClock_Config+0xd0>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a21      	ldr	r2, [pc, #132]	; (80016a8 <SystemClock_Config+0xd0>)
 8001622:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001626:	6013      	str	r3, [r2, #0]
 8001628:	4b1f      	ldr	r3, [pc, #124]	; (80016a8 <SystemClock_Config+0xd0>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001630:	607b      	str	r3, [r7, #4]
 8001632:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001634:	2301      	movs	r3, #1
 8001636:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001638:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800163e:	2302      	movs	r3, #2
 8001640:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001642:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001646:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001648:	2308      	movs	r3, #8
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800164c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001652:	2302      	movs	r3, #2
 8001654:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001656:	2304      	movs	r3, #4
 8001658:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800165a:	f107 0320 	add.w	r3, r7, #32
 800165e:	4618      	mov	r0, r3
 8001660:	f003 fd28 	bl	80050b4 <HAL_RCC_OscConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800166a:	f000 fe1b 	bl	80022a4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166e:	230f      	movs	r3, #15
 8001670:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001672:	2302      	movs	r3, #2
 8001674:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001676:	2300      	movs	r3, #0
 8001678:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800167a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800167e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001680:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001684:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001686:	f107 030c 	add.w	r3, r7, #12
 800168a:	2105      	movs	r1, #5
 800168c:	4618      	mov	r0, r3
 800168e:	f003 ff89 	bl	80055a4 <HAL_RCC_ClockConfig>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001698:	f000 fe04 	bl	80022a4 <Error_Handler>
  }
}
 800169c:	bf00      	nop
 800169e:	3750      	adds	r7, #80	; 0x50
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40023800 	.word	0x40023800
 80016a8:	40007000 	.word	0x40007000

080016ac <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b084      	sub	sp, #16
 80016b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80016b2:	463b      	mov	r3, r7
 80016b4:	2200      	movs	r2, #0
 80016b6:	601a      	str	r2, [r3, #0]
 80016b8:	605a      	str	r2, [r3, #4]
 80016ba:	609a      	str	r2, [r3, #8]
 80016bc:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80016be:	4b21      	ldr	r3, [pc, #132]	; (8001744 <MX_ADC1_Init+0x98>)
 80016c0:	4a21      	ldr	r2, [pc, #132]	; (8001748 <MX_ADC1_Init+0x9c>)
 80016c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80016c4:	4b1f      	ldr	r3, [pc, #124]	; (8001744 <MX_ADC1_Init+0x98>)
 80016c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80016cc:	4b1d      	ldr	r3, [pc, #116]	; (8001744 <MX_ADC1_Init+0x98>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80016d2:	4b1c      	ldr	r3, [pc, #112]	; (8001744 <MX_ADC1_Init+0x98>)
 80016d4:	2200      	movs	r2, #0
 80016d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80016d8:	4b1a      	ldr	r3, [pc, #104]	; (8001744 <MX_ADC1_Init+0x98>)
 80016da:	2200      	movs	r2, #0
 80016dc:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80016de:	4b19      	ldr	r3, [pc, #100]	; (8001744 <MX_ADC1_Init+0x98>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016e6:	4b17      	ldr	r3, [pc, #92]	; (8001744 <MX_ADC1_Init+0x98>)
 80016e8:	2200      	movs	r2, #0
 80016ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ec:	4b15      	ldr	r3, [pc, #84]	; (8001744 <MX_ADC1_Init+0x98>)
 80016ee:	4a17      	ldr	r2, [pc, #92]	; (800174c <MX_ADC1_Init+0xa0>)
 80016f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <MX_ADC1_Init+0x98>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	; (8001744 <MX_ADC1_Init+0x98>)
 80016fa:	2201      	movs	r2, #1
 80016fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80016fe:	4b11      	ldr	r3, [pc, #68]	; (8001744 <MX_ADC1_Init+0x98>)
 8001700:	2200      	movs	r2, #0
 8001702:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001706:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <MX_ADC1_Init+0x98>)
 8001708:	2201      	movs	r2, #1
 800170a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800170c:	480d      	ldr	r0, [pc, #52]	; (8001744 <MX_ADC1_Init+0x98>)
 800170e:	f002 fbc9 	bl	8003ea4 <HAL_ADC_Init>
 8001712:	4603      	mov	r3, r0
 8001714:	2b00      	cmp	r3, #0
 8001716:	d001      	beq.n	800171c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001718:	f000 fdc4 	bl	80022a4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800171c:	2304      	movs	r3, #4
 800171e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001720:	2301      	movs	r3, #1
 8001722:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <MX_ADC1_Init+0x98>)
 800172e:	f002 fbfd 	bl	8003f2c <HAL_ADC_ConfigChannel>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001738:	f000 fdb4 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3710      	adds	r7, #16
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200007e8 	.word	0x200007e8
 8001748:	40012000 	.word	0x40012000
 800174c:	0f000001 	.word	0x0f000001

08001750 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001754:	4b17      	ldr	r3, [pc, #92]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001756:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <MX_SPI1_Init+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175a:	4b16      	ldr	r3, [pc, #88]	; (80017b4 <MX_SPI1_Init+0x64>)
 800175c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001760:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001762:	4b14      	ldr	r3, [pc, #80]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001768:	4b12      	ldr	r3, [pc, #72]	; (80017b4 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800176e:	4b11      	ldr	r3, [pc, #68]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001770:	2200      	movs	r2, #0
 8001772:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001774:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001776:	2200      	movs	r2, #0
 8001778:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800177a:	4b0e      	ldr	r3, [pc, #56]	; (80017b4 <MX_SPI1_Init+0x64>)
 800177c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001780:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001788:	4b0a      	ldr	r3, [pc, #40]	; (80017b4 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001790:	2200      	movs	r2, #0
 8001792:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001794:	4b07      	ldr	r3, [pc, #28]	; (80017b4 <MX_SPI1_Init+0x64>)
 8001796:	2200      	movs	r2, #0
 8001798:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <MX_SPI1_Init+0x64>)
 800179c:	220a      	movs	r2, #10
 800179e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_SPI1_Init+0x64>)
 80017a2:	f004 f92d 	bl	8005a00 <HAL_SPI_Init>
 80017a6:	4603      	mov	r3, r0
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d001      	beq.n	80017b0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017ac:	f000 fd7a 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b0:	bf00      	nop
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	20000960 	.word	0x20000960
 80017b8:	40013000 	.word	0x40013000

080017bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b086      	sub	sp, #24
 80017c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c2:	f107 0308 	add.w	r3, r7, #8
 80017c6:	2200      	movs	r2, #0
 80017c8:	601a      	str	r2, [r3, #0]
 80017ca:	605a      	str	r2, [r3, #4]
 80017cc:	609a      	str	r2, [r3, #8]
 80017ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d0:	463b      	mov	r3, r7
 80017d2:	2200      	movs	r2, #0
 80017d4:	601a      	str	r2, [r3, #0]
 80017d6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80017d8:	4b1e      	ldr	r3, [pc, #120]	; (8001854 <MX_TIM1_Init+0x98>)
 80017da:	4a1f      	ldr	r2, [pc, #124]	; (8001858 <MX_TIM1_Init+0x9c>)
 80017dc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 80017de:	4b1d      	ldr	r3, [pc, #116]	; (8001854 <MX_TIM1_Init+0x98>)
 80017e0:	22a7      	movs	r2, #167	; 0xa7
 80017e2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017e4:	4b1b      	ldr	r3, [pc, #108]	; (8001854 <MX_TIM1_Init+0x98>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 80017ea:	4b1a      	ldr	r3, [pc, #104]	; (8001854 <MX_TIM1_Init+0x98>)
 80017ec:	f644 6220 	movw	r2, #20000	; 0x4e20
 80017f0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017f2:	4b18      	ldr	r3, [pc, #96]	; (8001854 <MX_TIM1_Init+0x98>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80017f8:	4b16      	ldr	r3, [pc, #88]	; (8001854 <MX_TIM1_Init+0x98>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017fe:	4b15      	ldr	r3, [pc, #84]	; (8001854 <MX_TIM1_Init+0x98>)
 8001800:	2200      	movs	r2, #0
 8001802:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001804:	4813      	ldr	r0, [pc, #76]	; (8001854 <MX_TIM1_Init+0x98>)
 8001806:	f004 fb8b 	bl	8005f20 <HAL_TIM_Base_Init>
 800180a:	4603      	mov	r3, r0
 800180c:	2b00      	cmp	r3, #0
 800180e:	d001      	beq.n	8001814 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001810:	f000 fd48 	bl	80022a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001814:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001818:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800181a:	f107 0308 	add.w	r3, r7, #8
 800181e:	4619      	mov	r1, r3
 8001820:	480c      	ldr	r0, [pc, #48]	; (8001854 <MX_TIM1_Init+0x98>)
 8001822:	f004 ff83 	bl	800672c <HAL_TIM_ConfigClockSource>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800182c:	f000 fd3a 	bl	80022a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001830:	2300      	movs	r3, #0
 8001832:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001834:	2300      	movs	r3, #0
 8001836:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001838:	463b      	mov	r3, r7
 800183a:	4619      	mov	r1, r3
 800183c:	4805      	ldr	r0, [pc, #20]	; (8001854 <MX_TIM1_Init+0x98>)
 800183e:	f005 fb71 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d001      	beq.n	800184c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001848:	f000 fd2c 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800184c:	bf00      	nop
 800184e:	3718      	adds	r7, #24
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	200008d4 	.word	0x200008d4
 8001858:	40010000 	.word	0x40010000

0800185c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b086      	sub	sp, #24
 8001860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001862:	f107 0308 	add.w	r3, r7, #8
 8001866:	2200      	movs	r2, #0
 8001868:	601a      	str	r2, [r3, #0]
 800186a:	605a      	str	r2, [r3, #4]
 800186c:	609a      	str	r2, [r3, #8]
 800186e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001870:	463b      	mov	r3, r7
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
 8001876:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001878:	4b1d      	ldr	r3, [pc, #116]	; (80018f0 <MX_TIM2_Init+0x94>)
 800187a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800187e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8001880:	4b1b      	ldr	r3, [pc, #108]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001882:	2253      	movs	r2, #83	; 0x53
 8001884:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001886:	4b1a      	ldr	r3, [pc, #104]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800188c:	4b18      	ldr	r3, [pc, #96]	; (80018f0 <MX_TIM2_Init+0x94>)
 800188e:	f04f 32ff 	mov.w	r2, #4294967295
 8001892:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001894:	4b16      	ldr	r3, [pc, #88]	; (80018f0 <MX_TIM2_Init+0x94>)
 8001896:	2200      	movs	r2, #0
 8001898:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800189a:	4b15      	ldr	r3, [pc, #84]	; (80018f0 <MX_TIM2_Init+0x94>)
 800189c:	2200      	movs	r2, #0
 800189e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80018a0:	4813      	ldr	r0, [pc, #76]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018a2:	f004 fb3d 	bl	8005f20 <HAL_TIM_Base_Init>
 80018a6:	4603      	mov	r3, r0
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d001      	beq.n	80018b0 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80018ac:	f000 fcfa 	bl	80022a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018b4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80018b6:	f107 0308 	add.w	r3, r7, #8
 80018ba:	4619      	mov	r1, r3
 80018bc:	480c      	ldr	r0, [pc, #48]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018be:	f004 ff35 	bl	800672c <HAL_TIM_ConfigClockSource>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80018c8:	f000 fcec 	bl	80022a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018cc:	2300      	movs	r3, #0
 80018ce:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4805      	ldr	r0, [pc, #20]	; (80018f0 <MX_TIM2_Init+0x94>)
 80018da:	f005 fb23 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80018e4:	f000 fcde 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80018e8:	bf00      	nop
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}
 80018f0:	200009b8 	.word	0x200009b8

080018f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b08e      	sub	sp, #56	; 0x38
 80018f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018fa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80018fe:	2200      	movs	r2, #0
 8001900:	601a      	str	r2, [r3, #0]
 8001902:	605a      	str	r2, [r3, #4]
 8001904:	609a      	str	r2, [r3, #8]
 8001906:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001908:	f107 0320 	add.w	r3, r7, #32
 800190c:	2200      	movs	r2, #0
 800190e:	601a      	str	r2, [r3, #0]
 8001910:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001912:	1d3b      	adds	r3, r7, #4
 8001914:	2200      	movs	r2, #0
 8001916:	601a      	str	r2, [r3, #0]
 8001918:	605a      	str	r2, [r3, #4]
 800191a:	609a      	str	r2, [r3, #8]
 800191c:	60da      	str	r2, [r3, #12]
 800191e:	611a      	str	r2, [r3, #16]
 8001920:	615a      	str	r2, [r3, #20]
 8001922:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001924:	4b3d      	ldr	r3, [pc, #244]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001926:	4a3e      	ldr	r2, [pc, #248]	; (8001a20 <MX_TIM3_Init+0x12c>)
 8001928:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800192a:	4b3c      	ldr	r3, [pc, #240]	; (8001a1c <MX_TIM3_Init+0x128>)
 800192c:	2200      	movs	r2, #0
 800192e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001930:	4b3a      	ldr	r3, [pc, #232]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001932:	2200      	movs	r2, #0
 8001934:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001936:	4b39      	ldr	r3, [pc, #228]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001938:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800193c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800193e:	4b37      	ldr	r3, [pc, #220]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001940:	2200      	movs	r2, #0
 8001942:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001944:	4b35      	ldr	r3, [pc, #212]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001946:	2200      	movs	r2, #0
 8001948:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800194a:	4834      	ldr	r0, [pc, #208]	; (8001a1c <MX_TIM3_Init+0x128>)
 800194c:	f004 fae8 	bl	8005f20 <HAL_TIM_Base_Init>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001956:	f000 fca5 	bl	80022a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800195a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800195e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001960:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001964:	4619      	mov	r1, r3
 8001966:	482d      	ldr	r0, [pc, #180]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001968:	f004 fee0 	bl	800672c <HAL_TIM_ConfigClockSource>
 800196c:	4603      	mov	r3, r0
 800196e:	2b00      	cmp	r3, #0
 8001970:	d001      	beq.n	8001976 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001972:	f000 fc97 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001976:	4829      	ldr	r0, [pc, #164]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001978:	f004 fbfa 	bl	8006170 <HAL_TIM_PWM_Init>
 800197c:	4603      	mov	r3, r0
 800197e:	2b00      	cmp	r3, #0
 8001980:	d001      	beq.n	8001986 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001982:	f000 fc8f 	bl	80022a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001986:	2300      	movs	r3, #0
 8001988:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800198a:	2300      	movs	r3, #0
 800198c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800198e:	f107 0320 	add.w	r3, r7, #32
 8001992:	4619      	mov	r1, r3
 8001994:	4821      	ldr	r0, [pc, #132]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001996:	f005 fac5 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 800199a:	4603      	mov	r3, r0
 800199c:	2b00      	cmp	r3, #0
 800199e:	d001      	beq.n	80019a4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019a0:	f000 fc80 	bl	80022a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019a4:	2360      	movs	r3, #96	; 0x60
 80019a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019ac:	2300      	movs	r3, #0
 80019ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019b4:	1d3b      	adds	r3, r7, #4
 80019b6:	2200      	movs	r2, #0
 80019b8:	4619      	mov	r1, r3
 80019ba:	4818      	ldr	r0, [pc, #96]	; (8001a1c <MX_TIM3_Init+0x128>)
 80019bc:	f004 fdf8 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 80019c0:	4603      	mov	r3, r0
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d001      	beq.n	80019ca <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019c6:	f000 fc6d 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	2204      	movs	r2, #4
 80019ce:	4619      	mov	r1, r3
 80019d0:	4812      	ldr	r0, [pc, #72]	; (8001a1c <MX_TIM3_Init+0x128>)
 80019d2:	f004 fded 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 80019d6:	4603      	mov	r3, r0
 80019d8:	2b00      	cmp	r3, #0
 80019da:	d001      	beq.n	80019e0 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 80019dc:	f000 fc62 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80019e0:	1d3b      	adds	r3, r7, #4
 80019e2:	2208      	movs	r2, #8
 80019e4:	4619      	mov	r1, r3
 80019e6:	480d      	ldr	r0, [pc, #52]	; (8001a1c <MX_TIM3_Init+0x128>)
 80019e8:	f004 fde2 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 80019ec:	4603      	mov	r3, r0
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d001      	beq.n	80019f6 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 80019f2:	f000 fc57 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80019f6:	1d3b      	adds	r3, r7, #4
 80019f8:	220c      	movs	r2, #12
 80019fa:	4619      	mov	r1, r3
 80019fc:	4807      	ldr	r0, [pc, #28]	; (8001a1c <MX_TIM3_Init+0x128>)
 80019fe:	f004 fdd7 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001a02:	4603      	mov	r3, r0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d001      	beq.n	8001a0c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001a08:	f000 fc4c 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a0c:	4803      	ldr	r0, [pc, #12]	; (8001a1c <MX_TIM3_Init+0x128>)
 8001a0e:	f001 fbfb 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8001a12:	bf00      	nop
 8001a14:	3738      	adds	r7, #56	; 0x38
 8001a16:	46bd      	mov	sp, r7
 8001a18:	bd80      	pop	{r7, pc}
 8001a1a:	bf00      	nop
 8001a1c:	2000075c 	.word	0x2000075c
 8001a20:	40000400 	.word	0x40000400

08001a24 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a24:	b580      	push	{r7, lr}
 8001a26:	b08e      	sub	sp, #56	; 0x38
 8001a28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a2e:	2200      	movs	r2, #0
 8001a30:	601a      	str	r2, [r3, #0]
 8001a32:	605a      	str	r2, [r3, #4]
 8001a34:	609a      	str	r2, [r3, #8]
 8001a36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a38:	f107 0320 	add.w	r3, r7, #32
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	601a      	str	r2, [r3, #0]
 8001a40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a42:	1d3b      	adds	r3, r7, #4
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
 8001a48:	605a      	str	r2, [r3, #4]
 8001a4a:	609a      	str	r2, [r3, #8]
 8001a4c:	60da      	str	r2, [r3, #12]
 8001a4e:	611a      	str	r2, [r3, #16]
 8001a50:	615a      	str	r2, [r3, #20]
 8001a52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a54:	4b3d      	ldr	r3, [pc, #244]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a56:	4a3e      	ldr	r2, [pc, #248]	; (8001b50 <MX_TIM4_Init+0x12c>)
 8001a58:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8001a5a:	4b3c      	ldr	r3, [pc, #240]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a5c:	2253      	movs	r2, #83	; 0x53
 8001a5e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a60:	4b3a      	ldr	r3, [pc, #232]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8001a66:	4b39      	ldr	r3, [pc, #228]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a68:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001a6c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a6e:	4b37      	ldr	r3, [pc, #220]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a74:	4b35      	ldr	r3, [pc, #212]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001a7a:	4834      	ldr	r0, [pc, #208]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a7c:	f004 fa50 	bl	8005f20 <HAL_TIM_Base_Init>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001a86:	f000 fc0d 	bl	80022a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001a8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001a90:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a94:	4619      	mov	r1, r3
 8001a96:	482d      	ldr	r0, [pc, #180]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001a98:	f004 fe48 	bl	800672c <HAL_TIM_ConfigClockSource>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001aa2:	f000 fbff 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001aa6:	4829      	ldr	r0, [pc, #164]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001aa8:	f004 fb62 	bl	8006170 <HAL_TIM_PWM_Init>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001ab2:	f000 fbf7 	bl	80022a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001aba:	2300      	movs	r3, #0
 8001abc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001abe:	f107 0320 	add.w	r3, r7, #32
 8001ac2:	4619      	mov	r1, r3
 8001ac4:	4821      	ldr	r0, [pc, #132]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001ac6:	f005 fa2d 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001aca:	4603      	mov	r3, r0
 8001acc:	2b00      	cmp	r3, #0
 8001ace:	d001      	beq.n	8001ad4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001ad0:	f000 fbe8 	bl	80022a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ad4:	2360      	movs	r3, #96	; 0x60
 8001ad6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001adc:	2300      	movs	r3, #0
 8001ade:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ae4:	1d3b      	adds	r3, r7, #4
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	4619      	mov	r1, r3
 8001aea:	4818      	ldr	r0, [pc, #96]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001aec:	f004 fd60 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001af6:	f000 fbd5 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001afa:	1d3b      	adds	r3, r7, #4
 8001afc:	2204      	movs	r2, #4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4812      	ldr	r0, [pc, #72]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001b02:	f004 fd55 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001b06:	4603      	mov	r3, r0
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d001      	beq.n	8001b10 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001b0c:	f000 fbca 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2208      	movs	r2, #8
 8001b14:	4619      	mov	r1, r3
 8001b16:	480d      	ldr	r0, [pc, #52]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001b18:	f004 fd4a 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001b1c:	4603      	mov	r3, r0
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d001      	beq.n	8001b26 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b22:	f000 fbbf 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b26:	1d3b      	adds	r3, r7, #4
 8001b28:	220c      	movs	r2, #12
 8001b2a:	4619      	mov	r1, r3
 8001b2c:	4807      	ldr	r0, [pc, #28]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001b2e:	f004 fd3f 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001b32:	4603      	mov	r3, r0
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d001      	beq.n	8001b3c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001b38:	f000 fbb4 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b3c:	4803      	ldr	r0, [pc, #12]	; (8001b4c <MX_TIM4_Init+0x128>)
 8001b3e:	f001 fb63 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8001b42:	bf00      	nop
 8001b44:	3738      	adds	r7, #56	; 0x38
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	20000628 	.word	0x20000628
 8001b50:	40000800 	.word	0x40000800

08001b54 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b54:	b580      	push	{r7, lr}
 8001b56:	b08a      	sub	sp, #40	; 0x28
 8001b58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b5a:	f107 0320 	add.w	r3, r7, #32
 8001b5e:	2200      	movs	r2, #0
 8001b60:	601a      	str	r2, [r3, #0]
 8001b62:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b64:	1d3b      	adds	r3, r7, #4
 8001b66:	2200      	movs	r2, #0
 8001b68:	601a      	str	r2, [r3, #0]
 8001b6a:	605a      	str	r2, [r3, #4]
 8001b6c:	609a      	str	r2, [r3, #8]
 8001b6e:	60da      	str	r2, [r3, #12]
 8001b70:	611a      	str	r2, [r3, #16]
 8001b72:	615a      	str	r2, [r3, #20]
 8001b74:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001b76:	4b27      	ldr	r3, [pc, #156]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001b78:	4a27      	ldr	r2, [pc, #156]	; (8001c18 <MX_TIM5_Init+0xc4>)
 8001b7a:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8001b7c:	4b25      	ldr	r3, [pc, #148]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001b7e:	2200      	movs	r2, #0
 8001b80:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b82:	4b24      	ldr	r3, [pc, #144]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001b84:	2200      	movs	r2, #0
 8001b86:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8001b88:	4b22      	ldr	r3, [pc, #136]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001b8a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b8e:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b90:	4b20      	ldr	r3, [pc, #128]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b96:	4b1f      	ldr	r3, [pc, #124]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001b9c:	481d      	ldr	r0, [pc, #116]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001b9e:	f004 fae7 	bl	8006170 <HAL_TIM_PWM_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8001ba8:	f000 fb7c 	bl	80022a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bac:	2300      	movs	r3, #0
 8001bae:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001bb4:	f107 0320 	add.w	r3, r7, #32
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4816      	ldr	r0, [pc, #88]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001bbc:	f005 f9b2 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001bc6:	f000 fb6d 	bl	80022a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bca:	2360      	movs	r3, #96	; 0x60
 8001bcc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001bda:	1d3b      	adds	r3, r7, #4
 8001bdc:	2208      	movs	r2, #8
 8001bde:	4619      	mov	r1, r3
 8001be0:	480c      	ldr	r0, [pc, #48]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001be2:	f004 fce5 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001be6:	4603      	mov	r3, r0
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d001      	beq.n	8001bf0 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8001bec:	f000 fb5a 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001bf0:	1d3b      	adds	r3, r7, #4
 8001bf2:	220c      	movs	r2, #12
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	4807      	ldr	r0, [pc, #28]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001bf8:	f004 fcda 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001bfc:	4603      	mov	r3, r0
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d001      	beq.n	8001c06 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001c02:	f000 fb4f 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c06:	4803      	ldr	r0, [pc, #12]	; (8001c14 <MX_TIM5_Init+0xc0>)
 8001c08:	f001 fafe 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8001c0c:	bf00      	nop
 8001c0e:	3728      	adds	r7, #40	; 0x28
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}
 8001c14:	20000714 	.word	0x20000714
 8001c18:	40000c00 	.word	0x40000c00

08001c1c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	b096      	sub	sp, #88	; 0x58
 8001c20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001c22:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
 8001c2a:	605a      	str	r2, [r3, #4]
 8001c2c:	609a      	str	r2, [r3, #8]
 8001c2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c30:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001c34:	2200      	movs	r2, #0
 8001c36:	601a      	str	r2, [r3, #0]
 8001c38:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]
 8001c44:	609a      	str	r2, [r3, #8]
 8001c46:	60da      	str	r2, [r3, #12]
 8001c48:	611a      	str	r2, [r3, #16]
 8001c4a:	615a      	str	r2, [r3, #20]
 8001c4c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c4e:	1d3b      	adds	r3, r7, #4
 8001c50:	2220      	movs	r2, #32
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f006 fa69 	bl	800812c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001c5a:	4b50      	ldr	r3, [pc, #320]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c5c:	4a50      	ldr	r2, [pc, #320]	; (8001da0 <MX_TIM8_Init+0x184>)
 8001c5e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8001c60:	4b4e      	ldr	r3, [pc, #312]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c62:	22a7      	movs	r2, #167	; 0xa7
 8001c64:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c66:	4b4d      	ldr	r3, [pc, #308]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001c6c:	4b4b      	ldr	r3, [pc, #300]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c6e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001c72:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c74:	4b49      	ldr	r3, [pc, #292]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001c7a:	4b48      	ldr	r3, [pc, #288]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c80:	4b46      	ldr	r3, [pc, #280]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c82:	2200      	movs	r2, #0
 8001c84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001c86:	4845      	ldr	r0, [pc, #276]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001c88:	f004 f94a 	bl	8005f20 <HAL_TIM_Base_Init>
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d001      	beq.n	8001c96 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001c92:	f000 fb07 	bl	80022a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c9a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001c9c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	483e      	ldr	r0, [pc, #248]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001ca4:	f004 fd42 	bl	800672c <HAL_TIM_ConfigClockSource>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d001      	beq.n	8001cb2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001cae:	f000 faf9 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001cb2:	483a      	ldr	r0, [pc, #232]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001cb4:	f004 fa5c 	bl	8006170 <HAL_TIM_PWM_Init>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d001      	beq.n	8001cc2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001cbe:	f000 faf1 	bl	80022a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001cca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4832      	ldr	r0, [pc, #200]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001cd2:	f005 f927 	bl	8006f24 <HAL_TIMEx_MasterConfigSynchronization>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d001      	beq.n	8001ce0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001cdc:	f000 fae2 	bl	80022a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ce0:	2360      	movs	r3, #96	; 0x60
 8001ce2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ce8:	2300      	movs	r3, #0
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cec:	2300      	movs	r3, #0
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d00:	2200      	movs	r2, #0
 8001d02:	4619      	mov	r1, r3
 8001d04:	4825      	ldr	r0, [pc, #148]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001d06:	f004 fc53 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001d10:	f000 fac8 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001d14:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d18:	2204      	movs	r2, #4
 8001d1a:	4619      	mov	r1, r3
 8001d1c:	481f      	ldr	r0, [pc, #124]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001d1e:	f004 fc47 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001d22:	4603      	mov	r3, r0
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d001      	beq.n	8001d2c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001d28:	f000 fabc 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001d2c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d30:	2208      	movs	r2, #8
 8001d32:	4619      	mov	r1, r3
 8001d34:	4819      	ldr	r0, [pc, #100]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001d36:	f004 fc3b 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001d3a:	4603      	mov	r3, r0
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d001      	beq.n	8001d44 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001d40:	f000 fab0 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001d44:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d48:	220c      	movs	r2, #12
 8001d4a:	4619      	mov	r1, r3
 8001d4c:	4813      	ldr	r0, [pc, #76]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001d4e:	f004 fc2f 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001d52:	4603      	mov	r3, r0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d001      	beq.n	8001d5c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001d58:	f000 faa4 	bl	80022a4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d5c:	2300      	movs	r3, #0
 8001d5e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d60:	2300      	movs	r3, #0
 8001d62:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d64:	2300      	movs	r3, #0
 8001d66:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d74:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d76:	2300      	movs	r3, #0
 8001d78:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001d7a:	1d3b      	adds	r3, r7, #4
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4807      	ldr	r0, [pc, #28]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001d80:	f005 f94c 	bl	800701c <HAL_TIMEx_ConfigBreakDeadTime>
 8001d84:	4603      	mov	r3, r0
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d001      	beq.n	8001d8e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001d8a:	f000 fa8b 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001d8e:	4803      	ldr	r0, [pc, #12]	; (8001d9c <MX_TIM8_Init+0x180>)
 8001d90:	f001 fa3a 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8001d94:	bf00      	nop
 8001d96:	3758      	adds	r7, #88	; 0x58
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	200005e0 	.word	0x200005e0
 8001da0:	40010400 	.word	0x40010400

08001da4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001daa:	1d3b      	adds	r3, r7, #4
 8001dac:	2200      	movs	r2, #0
 8001dae:	601a      	str	r2, [r3, #0]
 8001db0:	605a      	str	r2, [r3, #4]
 8001db2:	609a      	str	r2, [r3, #8]
 8001db4:	60da      	str	r2, [r3, #12]
 8001db6:	611a      	str	r2, [r3, #16]
 8001db8:	615a      	str	r2, [r3, #20]
 8001dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001dbc:	4b1f      	ldr	r3, [pc, #124]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001dbe:	4a20      	ldr	r2, [pc, #128]	; (8001e40 <MX_TIM12_Init+0x9c>)
 8001dc0:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001dc4:	2200      	movs	r2, #0
 8001dc6:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dc8:	4b1c      	ldr	r3, [pc, #112]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001dce:	4b1b      	ldr	r3, [pc, #108]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001dd0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001dd4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001dd6:	4b19      	ldr	r3, [pc, #100]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ddc:	4b17      	ldr	r3, [pc, #92]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001dde:	2200      	movs	r2, #0
 8001de0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001de2:	4816      	ldr	r0, [pc, #88]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001de4:	f004 f9c4 	bl	8006170 <HAL_TIM_PWM_Init>
 8001de8:	4603      	mov	r3, r0
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d001      	beq.n	8001df2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001dee:	f000 fa59 	bl	80022a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001df2:	2360      	movs	r3, #96	; 0x60
 8001df4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e02:	1d3b      	adds	r3, r7, #4
 8001e04:	2200      	movs	r2, #0
 8001e06:	4619      	mov	r1, r3
 8001e08:	480c      	ldr	r0, [pc, #48]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001e0a:	f004 fbd1 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d001      	beq.n	8001e18 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001e14:	f000 fa46 	bl	80022a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e18:	1d3b      	adds	r3, r7, #4
 8001e1a:	2204      	movs	r2, #4
 8001e1c:	4619      	mov	r1, r3
 8001e1e:	4807      	ldr	r0, [pc, #28]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001e20:	f004 fbc6 	bl	80065b0 <HAL_TIM_PWM_ConfigChannel>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d001      	beq.n	8001e2e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001e2a:	f000 fa3b 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001e2e:	4803      	ldr	r0, [pc, #12]	; (8001e3c <MX_TIM12_Init+0x98>)
 8001e30:	f001 f9ea 	bl	8003208 <HAL_TIM_MspPostInit>

}
 8001e34:	bf00      	nop
 8001e36:	3720      	adds	r7, #32
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	20000aa4 	.word	0x20000aa4
 8001e40:	40001800 	.word	0x40001800

08001e44 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e48:	4b11      	ldr	r3, [pc, #68]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e4a:	4a12      	ldr	r2, [pc, #72]	; (8001e94 <MX_UART4_Init+0x50>)
 8001e4c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e4e:	4b10      	ldr	r3, [pc, #64]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e54:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e56:	4b0e      	ldr	r3, [pc, #56]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001e5c:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001e62:	4b0b      	ldr	r3, [pc, #44]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001e68:	4b09      	ldr	r3, [pc, #36]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e6a:	220c      	movs	r2, #12
 8001e6c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e6e:	4b08      	ldr	r3, [pc, #32]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e74:	4b06      	ldr	r3, [pc, #24]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001e7a:	4805      	ldr	r0, [pc, #20]	; (8001e90 <MX_UART4_Init+0x4c>)
 8001e7c:	f005 f934 	bl	80070e8 <HAL_UART_Init>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001e86:	f000 fa0d 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001e8a:	bf00      	nop
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	2000091c 	.word	0x2000091c
 8001e94:	40004c00 	.word	0x40004c00

08001e98 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001e9c:	4b11      	ldr	r3, [pc, #68]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001e9e:	4a12      	ldr	r2, [pc, #72]	; (8001ee8 <MX_UART5_Init+0x50>)
 8001ea0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001ea2:	4b10      	ldr	r3, [pc, #64]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001ea4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ea8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001eaa:	4b0e      	ldr	r3, [pc, #56]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001eb0:	4b0c      	ldr	r3, [pc, #48]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001eb6:	4b0b      	ldr	r3, [pc, #44]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001ebc:	4b09      	ldr	r3, [pc, #36]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001ebe:	220c      	movs	r2, #12
 8001ec0:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ec2:	4b08      	ldr	r3, [pc, #32]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ec8:	4b06      	ldr	r3, [pc, #24]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001ece:	4805      	ldr	r0, [pc, #20]	; (8001ee4 <MX_UART5_Init+0x4c>)
 8001ed0:	f005 f90a 	bl	80070e8 <HAL_UART_Init>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d001      	beq.n	8001ede <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001eda:	f000 f9e3 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001ede:	bf00      	nop
 8001ee0:	bd80      	pop	{r7, pc}
 8001ee2:	bf00      	nop
 8001ee4:	200007a4 	.word	0x200007a4
 8001ee8:	40005000 	.word	0x40005000

08001eec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001ef2:	4a12      	ldr	r2, [pc, #72]	; (8001f3c <MX_USART1_UART_Init+0x50>)
 8001ef4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001ef8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001efc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001efe:	4b0e      	ldr	r3, [pc, #56]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f04:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f0a:	4b0b      	ldr	r3, [pc, #44]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001f10:	4b09      	ldr	r3, [pc, #36]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f12:	220c      	movs	r2, #12
 8001f14:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f18:	2200      	movs	r2, #0
 8001f1a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f1c:	4b06      	ldr	r3, [pc, #24]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001f22:	4805      	ldr	r0, [pc, #20]	; (8001f38 <MX_USART1_UART_Init+0x4c>)
 8001f24:	f005 f8e0 	bl	80070e8 <HAL_UART_Init>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d001      	beq.n	8001f32 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001f2e:	f000 f9b9 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001f32:	bf00      	nop
 8001f34:	bd80      	pop	{r7, pc}
 8001f36:	bf00      	nop
 8001f38:	20000890 	.word	0x20000890
 8001f3c:	40011000 	.word	0x40011000

08001f40 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f46:	4a12      	ldr	r2, [pc, #72]	; (8001f90 <MX_USART2_UART_Init+0x50>)
 8001f48:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001f4a:	4b10      	ldr	r3, [pc, #64]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f50:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f52:	4b0e      	ldr	r3, [pc, #56]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f54:	2200      	movs	r2, #0
 8001f56:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f58:	4b0c      	ldr	r3, [pc, #48]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f5e:	4b0b      	ldr	r3, [pc, #44]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f60:	2200      	movs	r2, #0
 8001f62:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f64:	4b09      	ldr	r3, [pc, #36]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f66:	220c      	movs	r2, #12
 8001f68:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f6a:	4b08      	ldr	r3, [pc, #32]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f6c:	2200      	movs	r2, #0
 8001f6e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f70:	4b06      	ldr	r3, [pc, #24]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f72:	2200      	movs	r2, #0
 8001f74:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f76:	4805      	ldr	r0, [pc, #20]	; (8001f8c <MX_USART2_UART_Init+0x4c>)
 8001f78:	f005 f8b6 	bl	80070e8 <HAL_UART_Init>
 8001f7c:	4603      	mov	r3, r0
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d001      	beq.n	8001f86 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001f82:	f000 f98f 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20000a00 	.word	0x20000a00
 8001f90:	40004400 	.word	0x40004400

08001f94 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001f9a:	4a12      	ldr	r2, [pc, #72]	; (8001fe4 <MX_USART3_UART_Init+0x50>)
 8001f9c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f9e:	4b10      	ldr	r3, [pc, #64]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001fa4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001fa6:	4b0e      	ldr	r3, [pc, #56]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001fb2:	4b0b      	ldr	r3, [pc, #44]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fb8:	4b09      	ldr	r3, [pc, #36]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fba:	220c      	movs	r2, #12
 8001fbc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fbe:	4b08      	ldr	r3, [pc, #32]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fc4:	4b06      	ldr	r3, [pc, #24]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fca:	4805      	ldr	r0, [pc, #20]	; (8001fe0 <MX_USART3_UART_Init+0x4c>)
 8001fcc:	f005 f88c 	bl	80070e8 <HAL_UART_Init>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001fd6:	f000 f965 	bl	80022a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001fda:	bf00      	nop
 8001fdc:	bd80      	pop	{r7, pc}
 8001fde:	bf00      	nop
 8001fe0:	200006d0 	.word	0x200006d0
 8001fe4:	40004800 	.word	0x40004800

08001fe8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b082      	sub	sp, #8
 8001fec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001fee:	2300      	movs	r3, #0
 8001ff0:	607b      	str	r3, [r7, #4]
 8001ff2:	4b23      	ldr	r3, [pc, #140]	; (8002080 <MX_DMA_Init+0x98>)
 8001ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ff6:	4a22      	ldr	r2, [pc, #136]	; (8002080 <MX_DMA_Init+0x98>)
 8001ff8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ffe:	4b20      	ldr	r3, [pc, #128]	; (8002080 <MX_DMA_Init+0x98>)
 8002000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002002:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002006:	607b      	str	r3, [r7, #4]
 8002008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800200a:	2300      	movs	r3, #0
 800200c:	603b      	str	r3, [r7, #0]
 800200e:	4b1c      	ldr	r3, [pc, #112]	; (8002080 <MX_DMA_Init+0x98>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a1b      	ldr	r2, [pc, #108]	; (8002080 <MX_DMA_Init+0x98>)
 8002014:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b19      	ldr	r3, [pc, #100]	; (8002080 <MX_DMA_Init+0x98>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002022:	603b      	str	r3, [r7, #0]
 8002024:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8002026:	2200      	movs	r2, #0
 8002028:	2100      	movs	r1, #0
 800202a:	200b      	movs	r0, #11
 800202c:	f002 fa54 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002030:	200b      	movs	r0, #11
 8002032:	f002 fa6d 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8002036:	2200      	movs	r2, #0
 8002038:	2100      	movs	r1, #0
 800203a:	200c      	movs	r0, #12
 800203c:	f002 fa4c 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8002040:	200c      	movs	r0, #12
 8002042:	f002 fa65 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8002046:	2200      	movs	r2, #0
 8002048:	2100      	movs	r1, #0
 800204a:	200d      	movs	r0, #13
 800204c:	f002 fa44 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8002050:	200d      	movs	r0, #13
 8002052:	f002 fa5d 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8002056:	2200      	movs	r2, #0
 8002058:	2100      	movs	r1, #0
 800205a:	2010      	movs	r0, #16
 800205c:	f002 fa3c 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8002060:	2010      	movs	r0, #16
 8002062:	f002 fa55 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8002066:	2200      	movs	r2, #0
 8002068:	2100      	movs	r1, #0
 800206a:	203a      	movs	r0, #58	; 0x3a
 800206c:	f002 fa34 	bl	80044d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8002070:	203a      	movs	r0, #58	; 0x3a
 8002072:	f002 fa4d 	bl	8004510 <HAL_NVIC_EnableIRQ>

}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	bf00      	nop
 8002080:	40023800 	.word	0x40023800

08002084 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	b08c      	sub	sp, #48	; 0x30
 8002088:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
 8002092:	605a      	str	r2, [r3, #4]
 8002094:	609a      	str	r2, [r3, #8]
 8002096:	60da      	str	r2, [r3, #12]
 8002098:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	61bb      	str	r3, [r7, #24]
 800209e:	4b62      	ldr	r3, [pc, #392]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a61      	ldr	r2, [pc, #388]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020a4:	f043 0310 	orr.w	r3, r3, #16
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b5f      	ldr	r3, [pc, #380]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0310 	and.w	r3, r3, #16
 80020b2:	61bb      	str	r3, [r7, #24]
 80020b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	617b      	str	r3, [r7, #20]
 80020ba:	4b5b      	ldr	r3, [pc, #364]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a5a      	ldr	r2, [pc, #360]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b58      	ldr	r3, [pc, #352]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ce:	617b      	str	r3, [r7, #20]
 80020d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	613b      	str	r3, [r7, #16]
 80020d6:	4b54      	ldr	r3, [pc, #336]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020da:	4a53      	ldr	r2, [pc, #332]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020dc:	f043 0301 	orr.w	r3, r3, #1
 80020e0:	6313      	str	r3, [r2, #48]	; 0x30
 80020e2:	4b51      	ldr	r3, [pc, #324]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e6:	f003 0301 	and.w	r3, r3, #1
 80020ea:	613b      	str	r3, [r7, #16]
 80020ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b4d      	ldr	r3, [pc, #308]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f6:	4a4c      	ldr	r2, [pc, #304]	; (8002228 <MX_GPIO_Init+0x1a4>)
 80020f8:	f043 0302 	orr.w	r3, r3, #2
 80020fc:	6313      	str	r3, [r2, #48]	; 0x30
 80020fe:	4b4a      	ldr	r3, [pc, #296]	; (8002228 <MX_GPIO_Init+0x1a4>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	60bb      	str	r3, [r7, #8]
 800210e:	4b46      	ldr	r3, [pc, #280]	; (8002228 <MX_GPIO_Init+0x1a4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a45      	ldr	r2, [pc, #276]	; (8002228 <MX_GPIO_Init+0x1a4>)
 8002114:	f043 0308 	orr.w	r3, r3, #8
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b43      	ldr	r3, [pc, #268]	; (8002228 <MX_GPIO_Init+0x1a4>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0308 	and.w	r3, r3, #8
 8002122:	60bb      	str	r3, [r7, #8]
 8002124:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	607b      	str	r3, [r7, #4]
 800212a:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <MX_GPIO_Init+0x1a4>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a3e      	ldr	r2, [pc, #248]	; (8002228 <MX_GPIO_Init+0x1a4>)
 8002130:	f043 0304 	orr.w	r3, r3, #4
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b3c      	ldr	r3, [pc, #240]	; (8002228 <MX_GPIO_Init+0x1a4>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0304 	and.w	r3, r3, #4
 800213e:	607b      	str	r3, [r7, #4]
 8002140:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002142:	2200      	movs	r2, #0
 8002144:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002148:	4838      	ldr	r0, [pc, #224]	; (800222c <MX_GPIO_Init+0x1a8>)
 800214a:	f002 ff99 	bl	8005080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CSN_GPIO_Port, OLED_CSN_Pin, GPIO_PIN_RESET);
 800214e:	2200      	movs	r2, #0
 8002150:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002154:	4836      	ldr	r0, [pc, #216]	; (8002230 <MX_GPIO_Init+0x1ac>)
 8002156:	f002 ff93 	bl	8005080 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 800215a:	2200      	movs	r2, #0
 800215c:	21c0      	movs	r1, #192	; 0xc0
 800215e:	4835      	ldr	r0, [pc, #212]	; (8002234 <MX_GPIO_Init+0x1b0>)
 8002160:	f002 ff8e 	bl	8005080 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8002164:	2360      	movs	r3, #96	; 0x60
 8002166:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002168:	2302      	movs	r3, #2
 800216a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216c:	2300      	movs	r3, #0
 800216e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002170:	2300      	movs	r3, #0
 8002172:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002174:	2303      	movs	r3, #3
 8002176:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002178:	f107 031c 	add.w	r3, r7, #28
 800217c:	4619      	mov	r1, r3
 800217e:	482e      	ldr	r0, [pc, #184]	; (8002238 <MX_GPIO_Init+0x1b4>)
 8002180:	f002 fde2 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8002184:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002188:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800218a:	2301      	movs	r3, #1
 800218c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218e:	2300      	movs	r3, #0
 8002190:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002192:	2300      	movs	r3, #0
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8002196:	f107 031c 	add.w	r3, r7, #28
 800219a:	4619      	mov	r1, r3
 800219c:	4823      	ldr	r0, [pc, #140]	; (800222c <MX_GPIO_Init+0x1a8>)
 800219e:	f002 fdd3 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CSN_Pin */
  GPIO_InitStruct.Pin = OLED_CSN_Pin;
 80021a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021ac:	2300      	movs	r3, #0
 80021ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021b0:	2303      	movs	r3, #3
 80021b2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CSN_GPIO_Port, &GPIO_InitStruct);
 80021b4:	f107 031c 	add.w	r3, r7, #28
 80021b8:	4619      	mov	r1, r3
 80021ba:	481d      	ldr	r0, [pc, #116]	; (8002230 <MX_GPIO_Init+0x1ac>)
 80021bc:	f002 fdc4 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 80021c0:	23c0      	movs	r3, #192	; 0xc0
 80021c2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021c4:	2301      	movs	r3, #1
 80021c6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021c8:	2300      	movs	r3, #0
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021cc:	2303      	movs	r3, #3
 80021ce:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	4619      	mov	r1, r3
 80021d6:	4817      	ldr	r0, [pc, #92]	; (8002234 <MX_GPIO_Init+0x1b0>)
 80021d8:	f002 fdb6 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 80021dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021e2:	2302      	movs	r3, #2
 80021e4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021e6:	2300      	movs	r3, #0
 80021e8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ea:	2300      	movs	r3, #0
 80021ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 80021ee:	2303      	movs	r3, #3
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021f2:	f107 031c 	add.w	r3, r7, #28
 80021f6:	4619      	mov	r1, r3
 80021f8:	480e      	ldr	r0, [pc, #56]	; (8002234 <MX_GPIO_Init+0x1b0>)
 80021fa:	f002 fda5 	bl	8004d48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80021fe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002202:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002204:	2302      	movs	r3, #2
 8002206:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002208:	2300      	movs	r3, #0
 800220a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800220c:	2300      	movs	r3, #0
 800220e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8002210:	2303      	movs	r3, #3
 8002212:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002214:	f107 031c 	add.w	r3, r7, #28
 8002218:	4619      	mov	r1, r3
 800221a:	4806      	ldr	r0, [pc, #24]	; (8002234 <MX_GPIO_Init+0x1b0>)
 800221c:	f002 fd94 	bl	8004d48 <HAL_GPIO_Init>

}
 8002220:	bf00      	nop
 8002222:	3730      	adds	r7, #48	; 0x30
 8002224:	46bd      	mov	sp, r7
 8002226:	bd80      	pop	{r7, pc}
 8002228:	40023800 	.word	0x40023800
 800222c:	40020c00 	.word	0x40020c00
 8002230:	40020000 	.word	0x40020000
 8002234:	40020400 	.word	0x40020400
 8002238:	40021000 	.word	0x40021000

0800223c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800223c:	b580      	push	{r7, lr}
 800223e:	b082      	sub	sp, #8
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	4a10      	ldr	r2, [pc, #64]	; (800228c <HAL_TIM_PeriodElapsedCallback+0x50>)
 800224a:	4293      	cmp	r3, r2
 800224c:	d102      	bne.n	8002254 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 800224e:	f001 fde5 	bl	8003e1c <HAL_IncTick>
      if(pidinit==1&&lock!=0)
    	  PID_CTRL();
      setmotor();
  }
  /* USER CODE END Callback 1 */
}
 8002252:	e017      	b.n	8002284 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if(htim->Instance == TIM1)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4a0d      	ldr	r2, [pc, #52]	; (8002290 <HAL_TIM_PeriodElapsedCallback+0x54>)
 800225a:	4293      	cmp	r3, r2
 800225c:	d112      	bne.n	8002284 <HAL_TIM_PeriodElapsedCallback+0x48>
	  HAL_UART_Transmit_IT(&huart5, (unsigned char *)&frame, sizeof(frame));
 800225e:	2284      	movs	r2, #132	; 0x84
 8002260:	490c      	ldr	r1, [pc, #48]	; (8002294 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8002262:	480d      	ldr	r0, [pc, #52]	; (8002298 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002264:	f005 f81f 	bl	80072a6 <HAL_UART_Transmit_IT>
	  OLED_Refresh_Gram();
 8002268:	f000 f956 	bl	8002518 <OLED_Refresh_Gram>
      if(pidinit==1&&lock!=0)
 800226c:	4b0b      	ldr	r3, [pc, #44]	; (800229c <HAL_TIM_PeriodElapsedCallback+0x60>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	2b01      	cmp	r3, #1
 8002272:	d105      	bne.n	8002280 <HAL_TIM_PeriodElapsedCallback+0x44>
 8002274:	4b0a      	ldr	r3, [pc, #40]	; (80022a0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	2b00      	cmp	r3, #0
 800227a:	d001      	beq.n	8002280 <HAL_TIM_PeriodElapsedCallback+0x44>
    	  PID_CTRL();
 800227c:	f7fe feb0 	bl	8000fe0 <PID_CTRL>
      setmotor();
 8002280:	f000 f83e 	bl	8002300 <setmotor>
}
 8002284:	bf00      	nop
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40001400 	.word	0x40001400
 8002290:	40010000 	.word	0x40010000
 8002294:	200000a8 	.word	0x200000a8
 8002298:	200007a4 	.word	0x200007a4
 800229c:	200003e8 	.word	0x200003e8
 80022a0:	20000404 	.word	0x20000404

080022a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80022a8:	b672      	cpsid	i
}
 80022aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80022ac:	e7fe      	b.n	80022ac <Error_Handler+0x8>
	...

080022b0 <motorinit>:
		{ 1.0f, 1.0f, 0, 0,1.0f, 0, 0, 0, 0, },
		{ -1.0f, 1.0f, 0, 0, 1.0f, 0, 0, 0, 0, }, };*/
float motor[8];
//每次执行会将六自由度dof6转换为8个电机通道 并赋值
void motorinit()
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim4;
	extern TIM_HandleTypeDef htim8;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80022b4:	2100      	movs	r1, #0
 80022b6:	4810      	ldr	r0, [pc, #64]	; (80022f8 <motorinit+0x48>)
 80022b8:	f003 ffaa 	bl	8006210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80022bc:	2104      	movs	r1, #4
 80022be:	480e      	ldr	r0, [pc, #56]	; (80022f8 <motorinit+0x48>)
 80022c0:	f003 ffa6 	bl	8006210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80022c4:	2108      	movs	r1, #8
 80022c6:	480c      	ldr	r0, [pc, #48]	; (80022f8 <motorinit+0x48>)
 80022c8:	f003 ffa2 	bl	8006210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 80022cc:	210c      	movs	r1, #12
 80022ce:	480a      	ldr	r0, [pc, #40]	; (80022f8 <motorinit+0x48>)
 80022d0:	f003 ff9e 	bl	8006210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 80022d4:	2100      	movs	r1, #0
 80022d6:	4809      	ldr	r0, [pc, #36]	; (80022fc <motorinit+0x4c>)
 80022d8:	f003 ff9a 	bl	8006210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 80022dc:	2104      	movs	r1, #4
 80022de:	4807      	ldr	r0, [pc, #28]	; (80022fc <motorinit+0x4c>)
 80022e0:	f003 ff96 	bl	8006210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 80022e4:	2108      	movs	r1, #8
 80022e6:	4805      	ldr	r0, [pc, #20]	; (80022fc <motorinit+0x4c>)
 80022e8:	f003 ff92 	bl	8006210 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80022ec:	210c      	movs	r1, #12
 80022ee:	4803      	ldr	r0, [pc, #12]	; (80022fc <motorinit+0x4c>)
 80022f0:	f003 ff8e 	bl	8006210 <HAL_TIM_PWM_Start>
}
 80022f4:	bf00      	nop
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	20000628 	.word	0x20000628
 80022fc:	200005e0 	.word	0x200005e0

08002300 <setmotor>:
void setmotor()
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b084      	sub	sp, #16
 8002304:	af00      	add	r7, sp, #0
    int time = HAL_GetTick();
 8002306:	f001 fd9d 	bl	8003e44 <HAL_GetTick>
 800230a:	4603      	mov	r3, r0
 800230c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 8; i++)
 800230e:	2300      	movs	r3, #0
 8002310:	60fb      	str	r3, [r7, #12]
 8002312:	e05d      	b.n	80023d0 <setmotor+0xd0>
    {
        float tmp = 0;
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	60bb      	str	r3, [r7, #8]
        for (int j = 0; j < 6; j++)
 800231a:	2300      	movs	r3, #0
 800231c:	607b      	str	r3, [r7, #4]
 800231e:	e01c      	b.n	800235a <setmotor+0x5a>
            tmp += hcc[i][j] * dof6[j];
 8002320:	4973      	ldr	r1, [pc, #460]	; (80024f0 <setmotor+0x1f0>)
 8002322:	68fa      	ldr	r2, [r7, #12]
 8002324:	4613      	mov	r3, r2
 8002326:	005b      	lsls	r3, r3, #1
 8002328:	4413      	add	r3, r2
 800232a:	005b      	lsls	r3, r3, #1
 800232c:	687a      	ldr	r2, [r7, #4]
 800232e:	4413      	add	r3, r2
 8002330:	009b      	lsls	r3, r3, #2
 8002332:	440b      	add	r3, r1
 8002334:	ed93 7a00 	vldr	s14, [r3]
 8002338:	4a6e      	ldr	r2, [pc, #440]	; (80024f4 <setmotor+0x1f4>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	009b      	lsls	r3, r3, #2
 800233e:	4413      	add	r3, r2
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002348:	ed97 7a02 	vldr	s14, [r7, #8]
 800234c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002350:	edc7 7a02 	vstr	s15, [r7, #8]
        for (int j = 0; j < 6; j++)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	3301      	adds	r3, #1
 8002358:	607b      	str	r3, [r7, #4]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2b05      	cmp	r3, #5
 800235e:	dddf      	ble.n	8002320 <setmotor+0x20>
        if(tmp > 1)
 8002360:	edd7 7a02 	vldr	s15, [r7, #8]
 8002364:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002368:	eef4 7ac7 	vcmpe.f32	s15, s14
 800236c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002370:	dd02      	ble.n	8002378 <setmotor+0x78>
            tmp = 1;
 8002372:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8002376:	60bb      	str	r3, [r7, #8]
        if(tmp < -1)
 8002378:	edd7 7a02 	vldr	s15, [r7, #8]
 800237c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8002380:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002384:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002388:	d501      	bpl.n	800238e <setmotor+0x8e>
            tmp = -1;
 800238a:	4b5b      	ldr	r3, [pc, #364]	; (80024f8 <setmotor+0x1f8>)
 800238c:	60bb      	str	r3, [r7, #8]
        if(time<10000||lock==0)//初始化||没有解开锁定
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	f242 720f 	movw	r2, #9999	; 0x270f
 8002394:	4293      	cmp	r3, r2
 8002396:	dd03      	ble.n	80023a0 <setmotor+0xa0>
 8002398:	4b58      	ldr	r3, [pc, #352]	; (80024fc <setmotor+0x1fc>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d107      	bne.n	80023b0 <setmotor+0xb0>
			motor[i] = 0;
 80023a0:	4a57      	ldr	r2, [pc, #348]	; (8002500 <setmotor+0x200>)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	009b      	lsls	r3, r3, #2
 80023a6:	4413      	add	r3, r2
 80023a8:	f04f 0200 	mov.w	r2, #0
 80023ac:	601a      	str	r2, [r3, #0]
 80023ae:	e005      	b.n	80023bc <setmotor+0xbc>
        else
        	motor[i] = tmp;
 80023b0:	4a53      	ldr	r2, [pc, #332]	; (8002500 <setmotor+0x200>)
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	009b      	lsls	r3, r3, #2
 80023b6:	4413      	add	r3, r2
 80023b8:	68ba      	ldr	r2, [r7, #8]
 80023ba:	601a      	str	r2, [r3, #0]
        frame.fdata[i + 16] = tmp;//回传数据
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3310      	adds	r3, #16
 80023c0:	4a50      	ldr	r2, [pc, #320]	; (8002504 <setmotor+0x204>)
 80023c2:	009b      	lsls	r3, r3, #2
 80023c4:	4413      	add	r3, r2
 80023c6:	68ba      	ldr	r2, [r7, #8]
 80023c8:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	3301      	adds	r3, #1
 80023ce:	60fb      	str	r3, [r7, #12]
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b07      	cmp	r3, #7
 80023d4:	dd9e      	ble.n	8002314 <setmotor+0x14>
    }

    MOTOR_1 = motor[0] * MOTOR_WAY + MOTOR_CENTER;
 80023d6:	4b4a      	ldr	r3, [pc, #296]	; (8002500 <setmotor+0x200>)
 80023d8:	edd3 7a00 	vldr	s15, [r3]
 80023dc:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002508 <setmotor+0x208>
 80023e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023e4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800250c <setmotor+0x20c>
 80023e8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80023ec:	4b48      	ldr	r3, [pc, #288]	; (8002510 <setmotor+0x210>)
 80023ee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80023f2:	ee17 2a90 	vmov	r2, s15
 80023f6:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_2 = motor[1] * MOTOR_WAY + MOTOR_CENTER;
 80023f8:	4b41      	ldr	r3, [pc, #260]	; (8002500 <setmotor+0x200>)
 80023fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80023fe:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002508 <setmotor+0x208>
 8002402:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002406:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800250c <setmotor+0x20c>
 800240a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800240e:	4b40      	ldr	r3, [pc, #256]	; (8002510 <setmotor+0x210>)
 8002410:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002414:	ee17 2a90 	vmov	r2, s15
 8002418:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_3 = motor[2] * MOTOR_WAY + MOTOR_CENTER;
 800241a:	4b39      	ldr	r3, [pc, #228]	; (8002500 <setmotor+0x200>)
 800241c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002420:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002508 <setmotor+0x208>
 8002424:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002428:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800250c <setmotor+0x20c>
 800242c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002430:	4b37      	ldr	r3, [pc, #220]	; (8002510 <setmotor+0x210>)
 8002432:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002436:	ee17 2a90 	vmov	r2, s15
 800243a:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_4 = motor[3] * MOTOR_WAY + MOTOR_CENTER;
 800243c:	4b30      	ldr	r3, [pc, #192]	; (8002500 <setmotor+0x200>)
 800243e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002442:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002508 <setmotor+0x208>
 8002446:	ee67 7a87 	vmul.f32	s15, s15, s14
 800244a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800250c <setmotor+0x20c>
 800244e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002452:	4b2f      	ldr	r3, [pc, #188]	; (8002510 <setmotor+0x210>)
 8002454:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002458:	ee17 2a90 	vmov	r2, s15
 800245c:	641a      	str	r2, [r3, #64]	; 0x40
    MOTOR_5 = motor[4] * MOTOR_WAY + MOTOR_CENTER;
 800245e:	4b28      	ldr	r3, [pc, #160]	; (8002500 <setmotor+0x200>)
 8002460:	edd3 7a04 	vldr	s15, [r3, #16]
 8002464:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002508 <setmotor+0x208>
 8002468:	ee67 7a87 	vmul.f32	s15, s15, s14
 800246c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800250c <setmotor+0x20c>
 8002470:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002474:	4b27      	ldr	r3, [pc, #156]	; (8002514 <setmotor+0x214>)
 8002476:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800247a:	ee17 2a90 	vmov	r2, s15
 800247e:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_6 = motor[5] * MOTOR_WAY + MOTOR_CENTER;
 8002480:	4b1f      	ldr	r3, [pc, #124]	; (8002500 <setmotor+0x200>)
 8002482:	edd3 7a05 	vldr	s15, [r3, #20]
 8002486:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002508 <setmotor+0x208>
 800248a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800248e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800250c <setmotor+0x20c>
 8002492:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002496:	4b1f      	ldr	r3, [pc, #124]	; (8002514 <setmotor+0x214>)
 8002498:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800249c:	ee17 2a90 	vmov	r2, s15
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_7 = motor[6] * MOTOR_WAY + MOTOR_CENTER;
 80024a2:	4b17      	ldr	r3, [pc, #92]	; (8002500 <setmotor+0x200>)
 80024a4:	edd3 7a06 	vldr	s15, [r3, #24]
 80024a8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002508 <setmotor+0x208>
 80024ac:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024b0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800250c <setmotor+0x20c>
 80024b4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024b8:	4b16      	ldr	r3, [pc, #88]	; (8002514 <setmotor+0x214>)
 80024ba:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024be:	ee17 2a90 	vmov	r2, s15
 80024c2:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_8 = motor[7] * MOTOR_WAY + MOTOR_CENTER;
 80024c4:	4b0e      	ldr	r3, [pc, #56]	; (8002500 <setmotor+0x200>)
 80024c6:	edd3 7a07 	vldr	s15, [r3, #28]
 80024ca:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002508 <setmotor+0x208>
 80024ce:	ee67 7a87 	vmul.f32	s15, s15, s14
 80024d2:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800250c <setmotor+0x20c>
 80024d6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80024da:	4b0e      	ldr	r3, [pc, #56]	; (8002514 <setmotor+0x214>)
 80024dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024e0:	ee17 2a90 	vmov	r2, s15
 80024e4:	641a      	str	r2, [r3, #64]	; 0x40
}
 80024e6:	bf00      	nop
 80024e8:	3710      	adds	r7, #16
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	2000012c 	.word	0x2000012c
 80024f4:	200003ec 	.word	0x200003ec
 80024f8:	bf800000 	.word	0xbf800000
 80024fc:	20000404 	.word	0x20000404
 8002500:	20000aec 	.word	0x20000aec
 8002504:	200000a8 	.word	0x200000a8
 8002508:	44480000 	.word	0x44480000
 800250c:	44bb8000 	.word	0x44bb8000
 8002510:	40000800 	.word	0x40000800
 8002514:	40010400 	.word	0x40010400

08002518 <OLED_Refresh_Gram>:
extern SPI_HandleTypeDef hspi1;

  
u8 OLED_GRAM[8][128];	   //内部定义了一块GRAM
void OLED_Refresh_Gram(void) //把32内部的GRAM刷新到OLED里面显示
{
 8002518:	b580      	push	{r7, lr}
 800251a:	b082      	sub	sp, #8
 800251c:	af00      	add	r7, sp, #0
	//u8 i,n;
	for(int i=0;i<8;i++)
 800251e:	2300      	movs	r3, #0
 8002520:	607b      	str	r3, [r7, #4]
 8002522:	e01b      	b.n	800255c <OLED_Refresh_Gram+0x44>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	b2db      	uxtb	r3, r3
 8002528:	3b50      	subs	r3, #80	; 0x50
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2100      	movs	r1, #0
 800252e:	4618      	mov	r0, r3
 8002530:	f000 f820 	bl	8002574 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002534:	2100      	movs	r1, #0
 8002536:	2000      	movs	r0, #0
 8002538:	f000 f81c 	bl	8002574 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 800253c:	2100      	movs	r1, #0
 800253e:	2010      	movs	r0, #16
 8002540:	f000 f818 	bl	8002574 <OLED_WR_Byte>
		//OLED_RS_Set();
		HAL_SPI_Transmit(&hspi1, OLED_GRAM[i], 128, 10);
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	01db      	lsls	r3, r3, #7
 8002548:	4a08      	ldr	r2, [pc, #32]	; (800256c <OLED_Refresh_Gram+0x54>)
 800254a:	1899      	adds	r1, r3, r2
 800254c:	230a      	movs	r3, #10
 800254e:	2280      	movs	r2, #128	; 0x80
 8002550:	4807      	ldr	r0, [pc, #28]	; (8002570 <OLED_Refresh_Gram+0x58>)
 8002552:	f003 fade 	bl	8005b12 <HAL_SPI_Transmit>
	for(int i=0;i<8;i++)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	3301      	adds	r3, #1
 800255a:	607b      	str	r3, [r7, #4]
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2b07      	cmp	r3, #7
 8002560:	dde0      	ble.n	8002524 <OLED_Refresh_Gram+0xc>
		//for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
	}
}
 8002562:	bf00      	nop
 8002564:	bf00      	nop
 8002566:	3708      	adds	r7, #8
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	20000b0c 	.word	0x20000b0c
 8002570:	20000960 	.word	0x20000960

08002574 <OLED_WR_Byte>:
函数功能：向OLED写入一个字节
入口参数：dat:要写入的数据/命令  ，cmd:数据/命令标志 0,表示命令;1,表示数据;
返 回 值：无
**************************************************************************/
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 8002574:	b580      	push	{r7, lr}
 8002576:	b082      	sub	sp, #8
 8002578:	af00      	add	r7, sp, #0
 800257a:	4603      	mov	r3, r0
 800257c:	460a      	mov	r2, r1
 800257e:	71fb      	strb	r3, [r7, #7]
 8002580:	4613      	mov	r3, r2
 8002582:	71bb      	strb	r3, [r7, #6]
	//u8 i;
	if(cmd)
 8002584:	79bb      	ldrb	r3, [r7, #6]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d005      	beq.n	8002596 <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 800258a:	2201      	movs	r2, #1
 800258c:	2180      	movs	r1, #128	; 0x80
 800258e:	480c      	ldr	r0, [pc, #48]	; (80025c0 <OLED_WR_Byte+0x4c>)
 8002590:	f002 fd76 	bl	8005080 <HAL_GPIO_WritePin>
 8002594:	e004      	b.n	80025a0 <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();
 8002596:	2200      	movs	r2, #0
 8002598:	2180      	movs	r1, #128	; 0x80
 800259a:	4809      	ldr	r0, [pc, #36]	; (80025c0 <OLED_WR_Byte+0x4c>)
 800259c:	f002 fd70 	bl	8005080 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 10);
 80025a0:	1df9      	adds	r1, r7, #7
 80025a2:	230a      	movs	r3, #10
 80025a4:	2201      	movs	r2, #1
 80025a6:	4807      	ldr	r0, [pc, #28]	; (80025c4 <OLED_WR_Byte+0x50>)
 80025a8:	f003 fab3 	bl	8005b12 <HAL_SPI_Transmit>
		   OLED_SDIN_Clr();
		OLED_SCLK_Set();
		dat<<=1;   
	}				 		  
	*/
	OLED_RS_Set();   	  
 80025ac:	2201      	movs	r2, #1
 80025ae:	2180      	movs	r1, #128	; 0x80
 80025b0:	4803      	ldr	r0, [pc, #12]	; (80025c0 <OLED_WR_Byte+0x4c>)
 80025b2:	f002 fd65 	bl	8005080 <HAL_GPIO_WritePin>
} 
 80025b6:	bf00      	nop
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}
 80025be:	bf00      	nop
 80025c0:	40020400 	.word	0x40020400
 80025c4:	20000960 	.word	0x20000960

080025c8 <OLED_Clear>:
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}	
////////////////////////////////////////////////////////////////////////////////
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
	u8 i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[i][n]=0X00;
 80025ce:	2300      	movs	r3, #0
 80025d0:	71fb      	strb	r3, [r7, #7]
 80025d2:	e014      	b.n	80025fe <OLED_Clear+0x36>
 80025d4:	2300      	movs	r3, #0
 80025d6:	71bb      	strb	r3, [r7, #6]
 80025d8:	e00a      	b.n	80025f0 <OLED_Clear+0x28>
 80025da:	79fa      	ldrb	r2, [r7, #7]
 80025dc:	79bb      	ldrb	r3, [r7, #6]
 80025de:	490d      	ldr	r1, [pc, #52]	; (8002614 <OLED_Clear+0x4c>)
 80025e0:	01d2      	lsls	r2, r2, #7
 80025e2:	440a      	add	r2, r1
 80025e4:	4413      	add	r3, r2
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]
 80025ea:	79bb      	ldrb	r3, [r7, #6]
 80025ec:	3301      	adds	r3, #1
 80025ee:	71bb      	strb	r3, [r7, #6]
 80025f0:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	daf0      	bge.n	80025da <OLED_Clear+0x12>
 80025f8:	79fb      	ldrb	r3, [r7, #7]
 80025fa:	3301      	adds	r3, #1
 80025fc:	71fb      	strb	r3, [r7, #7]
 80025fe:	79fb      	ldrb	r3, [r7, #7]
 8002600:	2b07      	cmp	r3, #7
 8002602:	d9e7      	bls.n	80025d4 <OLED_Clear+0xc>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
		//for(k=0;k<128;k++)OLED_WR_Byte(OLED_GRAM[j][k],OLED_DATA);
	}
	//OLED_Refresh_Gram();//更新显示
	 */
}
 8002604:	bf00      	nop
 8002606:	bf00      	nop
 8002608:	370c      	adds	r7, #12
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	20000b0c 	.word	0x20000b0c

08002618 <OLED_DrawPoint>:
函数功能：在OLED中画点
入口参数：坐标:x：0~127，y:0~63  ，t:1 填充 0,清空		
返 回 值：无
**************************************************************************/
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 8002618:	b480      	push	{r7}
 800261a:	b085      	sub	sp, #20
 800261c:	af00      	add	r7, sp, #0
 800261e:	4603      	mov	r3, r0
 8002620:	71fb      	strb	r3, [r7, #7]
 8002622:	460b      	mov	r3, r1
 8002624:	71bb      	strb	r3, [r7, #6]
 8002626:	4613      	mov	r3, r2
 8002628:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 800262a:	2300      	movs	r3, #0
 800262c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 800262e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002632:	2b00      	cmp	r3, #0
 8002634:	db41      	blt.n	80026ba <OLED_DrawPoint+0xa2>
 8002636:	79bb      	ldrb	r3, [r7, #6]
 8002638:	2b3f      	cmp	r3, #63	; 0x3f
 800263a:	d83e      	bhi.n	80026ba <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800263c:	79bb      	ldrb	r3, [r7, #6]
 800263e:	08db      	lsrs	r3, r3, #3
 8002640:	b2db      	uxtb	r3, r3
 8002642:	f1c3 0307 	rsb	r3, r3, #7
 8002646:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002648:	79bb      	ldrb	r3, [r7, #6]
 800264a:	f003 0307 	and.w	r3, r3, #7
 800264e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002650:	7b7b      	ldrb	r3, [r7, #13]
 8002652:	f1c3 0307 	rsb	r3, r3, #7
 8002656:	2201      	movs	r2, #1
 8002658:	fa02 f303 	lsl.w	r3, r2, r3
 800265c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[pos][x]|=temp;
 800265e:	797b      	ldrb	r3, [r7, #5]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d012      	beq.n	800268a <OLED_DrawPoint+0x72>
 8002664:	7bba      	ldrb	r2, [r7, #14]
 8002666:	79fb      	ldrb	r3, [r7, #7]
 8002668:	4917      	ldr	r1, [pc, #92]	; (80026c8 <OLED_DrawPoint+0xb0>)
 800266a:	01d2      	lsls	r2, r2, #7
 800266c:	440a      	add	r2, r1
 800266e:	4413      	add	r3, r2
 8002670:	7818      	ldrb	r0, [r3, #0]
 8002672:	7bba      	ldrb	r2, [r7, #14]
 8002674:	79fb      	ldrb	r3, [r7, #7]
 8002676:	7bf9      	ldrb	r1, [r7, #15]
 8002678:	4301      	orrs	r1, r0
 800267a:	b2c8      	uxtb	r0, r1
 800267c:	4912      	ldr	r1, [pc, #72]	; (80026c8 <OLED_DrawPoint+0xb0>)
 800267e:	01d2      	lsls	r2, r2, #7
 8002680:	440a      	add	r2, r1
 8002682:	4413      	add	r3, r2
 8002684:	4602      	mov	r2, r0
 8002686:	701a      	strb	r2, [r3, #0]
 8002688:	e018      	b.n	80026bc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[pos][x]&=~temp;
 800268a:	7bba      	ldrb	r2, [r7, #14]
 800268c:	79fb      	ldrb	r3, [r7, #7]
 800268e:	490e      	ldr	r1, [pc, #56]	; (80026c8 <OLED_DrawPoint+0xb0>)
 8002690:	01d2      	lsls	r2, r2, #7
 8002692:	440a      	add	r2, r1
 8002694:	4413      	add	r3, r2
 8002696:	781b      	ldrb	r3, [r3, #0]
 8002698:	b25a      	sxtb	r2, r3
 800269a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800269e:	43db      	mvns	r3, r3
 80026a0:	b25b      	sxtb	r3, r3
 80026a2:	4013      	ands	r3, r2
 80026a4:	b259      	sxtb	r1, r3
 80026a6:	7bba      	ldrb	r2, [r7, #14]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	b2c8      	uxtb	r0, r1
 80026ac:	4906      	ldr	r1, [pc, #24]	; (80026c8 <OLED_DrawPoint+0xb0>)
 80026ae:	01d2      	lsls	r2, r2, #7
 80026b0:	440a      	add	r2, r1
 80026b2:	4413      	add	r3, r2
 80026b4:	4602      	mov	r2, r0
 80026b6:	701a      	strb	r2, [r3, #0]
 80026b8:	e000      	b.n	80026bc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 80026ba:	bf00      	nop
}
 80026bc:	3714      	adds	r7, #20
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	20000b0c 	.word	0x20000b0c

080026cc <OLED_ShowChar>:
函数功能：在指定的位置显示一个字符
入口参数：坐标:x：0~127，y:0~63 ，mode:0,反白显示;1,正常显示	，size:选择字体 12-16		
返 回 值：无
**************************************************************************/
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{      			    
 80026cc:	b590      	push	{r4, r7, lr}
 80026ce:	b085      	sub	sp, #20
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	4604      	mov	r4, r0
 80026d4:	4608      	mov	r0, r1
 80026d6:	4611      	mov	r1, r2
 80026d8:	461a      	mov	r2, r3
 80026da:	4623      	mov	r3, r4
 80026dc:	71fb      	strb	r3, [r7, #7]
 80026de:	4603      	mov	r3, r0
 80026e0:	71bb      	strb	r3, [r7, #6]
 80026e2:	460b      	mov	r3, r1
 80026e4:	717b      	strb	r3, [r7, #5]
 80026e6:	4613      	mov	r3, r2
 80026e8:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 80026ea:	79bb      	ldrb	r3, [r7, #6]
 80026ec:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值				   
 80026ee:	797b      	ldrb	r3, [r7, #5]
 80026f0:	3b20      	subs	r3, #32
 80026f2:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 80026f4:	2300      	movs	r3, #0
 80026f6:	73bb      	strb	r3, [r7, #14]
 80026f8:	e04d      	b.n	8002796 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 80026fa:	793b      	ldrb	r3, [r7, #4]
 80026fc:	2b0c      	cmp	r3, #12
 80026fe:	d10b      	bne.n	8002718 <OLED_ShowChar+0x4c>
 8002700:	797a      	ldrb	r2, [r7, #5]
 8002702:	7bb9      	ldrb	r1, [r7, #14]
 8002704:	4828      	ldr	r0, [pc, #160]	; (80027a8 <OLED_ShowChar+0xdc>)
 8002706:	4613      	mov	r3, r2
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	4413      	add	r3, r2
 800270c:	009b      	lsls	r3, r3, #2
 800270e:	4403      	add	r3, r0
 8002710:	440b      	add	r3, r1
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	73fb      	strb	r3, [r7, #15]
 8002716:	e007      	b.n	8002728 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体 	                          
 8002718:	797a      	ldrb	r2, [r7, #5]
 800271a:	7bbb      	ldrb	r3, [r7, #14]
 800271c:	4923      	ldr	r1, [pc, #140]	; (80027ac <OLED_ShowChar+0xe0>)
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	440a      	add	r2, r1
 8002722:	4413      	add	r3, r2
 8002724:	781b      	ldrb	r3, [r3, #0]
 8002726:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8002728:	2300      	movs	r3, #0
 800272a:	737b      	strb	r3, [r7, #13]
 800272c:	e02d      	b.n	800278a <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800272e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002732:	2b00      	cmp	r3, #0
 8002734:	da07      	bge.n	8002746 <OLED_ShowChar+0x7a>
 8002736:	f897 2020 	ldrb.w	r2, [r7, #32]
 800273a:	79b9      	ldrb	r1, [r7, #6]
 800273c:	79fb      	ldrb	r3, [r7, #7]
 800273e:	4618      	mov	r0, r3
 8002740:	f7ff ff6a 	bl	8002618 <OLED_DrawPoint>
 8002744:	e00c      	b.n	8002760 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8002746:	f897 3020 	ldrb.w	r3, [r7, #32]
 800274a:	2b00      	cmp	r3, #0
 800274c:	bf0c      	ite	eq
 800274e:	2301      	moveq	r3, #1
 8002750:	2300      	movne	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	461a      	mov	r2, r3
 8002756:	79b9      	ldrb	r1, [r7, #6]
 8002758:	79fb      	ldrb	r3, [r7, #7]
 800275a:	4618      	mov	r0, r3
 800275c:	f7ff ff5c 	bl	8002618 <OLED_DrawPoint>
			temp<<=1;
 8002760:	7bfb      	ldrb	r3, [r7, #15]
 8002762:	005b      	lsls	r3, r3, #1
 8002764:	73fb      	strb	r3, [r7, #15]
			y++;
 8002766:	79bb      	ldrb	r3, [r7, #6]
 8002768:	3301      	adds	r3, #1
 800276a:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800276c:	79ba      	ldrb	r2, [r7, #6]
 800276e:	7b3b      	ldrb	r3, [r7, #12]
 8002770:	1ad2      	subs	r2, r2, r3
 8002772:	793b      	ldrb	r3, [r7, #4]
 8002774:	429a      	cmp	r2, r3
 8002776:	d105      	bne.n	8002784 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8002778:	7b3b      	ldrb	r3, [r7, #12]
 800277a:	71bb      	strb	r3, [r7, #6]
				x++;
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	3301      	adds	r3, #1
 8002780:	71fb      	strb	r3, [r7, #7]
				break;
 8002782:	e005      	b.n	8002790 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8002784:	7b7b      	ldrb	r3, [r7, #13]
 8002786:	3301      	adds	r3, #1
 8002788:	737b      	strb	r3, [r7, #13]
 800278a:	7b7b      	ldrb	r3, [r7, #13]
 800278c:	2b07      	cmp	r3, #7
 800278e:	d9ce      	bls.n	800272e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8002790:	7bbb      	ldrb	r3, [r7, #14]
 8002792:	3301      	adds	r3, #1
 8002794:	73bb      	strb	r3, [r7, #14]
 8002796:	7bba      	ldrb	r2, [r7, #14]
 8002798:	793b      	ldrb	r3, [r7, #4]
 800279a:	429a      	cmp	r2, r3
 800279c:	d3ad      	bcc.n	80026fa <OLED_ShowChar+0x2e>
			}
		}
    }          
}
 800279e:	bf00      	nop
 80027a0:	bf00      	nop
 80027a2:	3714      	adds	r7, #20
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd90      	pop	{r4, r7, pc}
 80027a8:	0800c0a0 	.word	0x0800c0a0
 80027ac:	0800c514 	.word	0x0800c514

080027b0 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	4603      	mov	r3, r0
 80027b8:	460a      	mov	r2, r1
 80027ba:	71fb      	strb	r3, [r7, #7]
 80027bc:	4613      	mov	r3, r2
 80027be:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 80027c0:	2301      	movs	r3, #1
 80027c2:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 80027c4:	e004      	b.n	80027d0 <oled_pow+0x20>
 80027c6:	79fa      	ldrb	r2, [r7, #7]
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	fb02 f303 	mul.w	r3, r2, r3
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	79bb      	ldrb	r3, [r7, #6]
 80027d2:	1e5a      	subs	r2, r3, #1
 80027d4:	71ba      	strb	r2, [r7, #6]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f5      	bne.n	80027c6 <oled_pow+0x16>
	return result;
 80027da:	68fb      	ldr	r3, [r7, #12]
}	
 80027dc:	4618      	mov	r0, r3
 80027de:	3714      	adds	r7, #20
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：坐标:x：0~127，y:0~63 ；num:数值(0~4294967295)；mode:0,填充模式 1,叠加模式； size:选择字体 12-16		
返 回 值：无
**************************************************************************/  
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b087      	sub	sp, #28
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	603a      	str	r2, [r7, #0]
 80027f0:	461a      	mov	r2, r3
 80027f2:	4603      	mov	r3, r0
 80027f4:	71fb      	strb	r3, [r7, #7]
 80027f6:	460b      	mov	r3, r1
 80027f8:	71bb      	strb	r3, [r7, #6]
 80027fa:	4613      	mov	r3, r2
 80027fc:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 80027fe:	2300      	movs	r3, #0
 8002800:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8002802:	2300      	movs	r3, #0
 8002804:	73fb      	strb	r3, [r7, #15]
 8002806:	e051      	b.n	80028ac <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8002808:	797a      	ldrb	r2, [r7, #5]
 800280a:	7bfb      	ldrb	r3, [r7, #15]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	b2db      	uxtb	r3, r3
 8002810:	3b01      	subs	r3, #1
 8002812:	b2db      	uxtb	r3, r3
 8002814:	4619      	mov	r1, r3
 8002816:	200a      	movs	r0, #10
 8002818:	f7ff ffca 	bl	80027b0 <oled_pow>
 800281c:	4602      	mov	r2, r0
 800281e:	683b      	ldr	r3, [r7, #0]
 8002820:	fbb3 f1f2 	udiv	r1, r3, r2
 8002824:	4b26      	ldr	r3, [pc, #152]	; (80028c0 <OLED_ShowNumber+0xd8>)
 8002826:	fba3 2301 	umull	r2, r3, r3, r1
 800282a:	08da      	lsrs	r2, r3, #3
 800282c:	4613      	mov	r3, r2
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	4413      	add	r3, r2
 8002832:	005b      	lsls	r3, r3, #1
 8002834:	1aca      	subs	r2, r1, r3
 8002836:	4613      	mov	r3, r2
 8002838:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800283a:	7bbb      	ldrb	r3, [r7, #14]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d11d      	bne.n	800287c <OLED_ShowNumber+0x94>
 8002840:	7bfa      	ldrb	r2, [r7, #15]
 8002842:	797b      	ldrb	r3, [r7, #5]
 8002844:	3b01      	subs	r3, #1
 8002846:	429a      	cmp	r2, r3
 8002848:	da18      	bge.n	800287c <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 800284a:	7b7b      	ldrb	r3, [r7, #13]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d113      	bne.n	8002878 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8002850:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002854:	085b      	lsrs	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	7bfa      	ldrb	r2, [r7, #15]
 800285a:	fb12 f303 	smulbb	r3, r2, r3
 800285e:	b2da      	uxtb	r2, r3
 8002860:	79fb      	ldrb	r3, [r7, #7]
 8002862:	4413      	add	r3, r2
 8002864:	b2d8      	uxtb	r0, r3
 8002866:	f897 3020 	ldrb.w	r3, [r7, #32]
 800286a:	79b9      	ldrb	r1, [r7, #6]
 800286c:	2201      	movs	r2, #1
 800286e:	9200      	str	r2, [sp, #0]
 8002870:	2220      	movs	r2, #32
 8002872:	f7ff ff2b 	bl	80026cc <OLED_ShowChar>
				continue;
 8002876:	e016      	b.n	80028a6 <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 8002878:	2301      	movs	r3, #1
 800287a:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 800287c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002880:	085b      	lsrs	r3, r3, #1
 8002882:	b2db      	uxtb	r3, r3
 8002884:	7bfa      	ldrb	r2, [r7, #15]
 8002886:	fb12 f303 	smulbb	r3, r2, r3
 800288a:	b2da      	uxtb	r2, r3
 800288c:	79fb      	ldrb	r3, [r7, #7]
 800288e:	4413      	add	r3, r2
 8002890:	b2d8      	uxtb	r0, r3
 8002892:	7b7b      	ldrb	r3, [r7, #13]
 8002894:	3330      	adds	r3, #48	; 0x30
 8002896:	b2da      	uxtb	r2, r3
 8002898:	f897 3020 	ldrb.w	r3, [r7, #32]
 800289c:	79b9      	ldrb	r1, [r7, #6]
 800289e:	2401      	movs	r4, #1
 80028a0:	9400      	str	r4, [sp, #0]
 80028a2:	f7ff ff13 	bl	80026cc <OLED_ShowChar>
	for(t=0;t<len;t++)
 80028a6:	7bfb      	ldrb	r3, [r7, #15]
 80028a8:	3301      	adds	r3, #1
 80028aa:	73fb      	strb	r3, [r7, #15]
 80028ac:	7bfa      	ldrb	r2, [r7, #15]
 80028ae:	797b      	ldrb	r3, [r7, #5]
 80028b0:	429a      	cmp	r2, r3
 80028b2:	d3a9      	bcc.n	8002808 <OLED_ShowNumber+0x20>
	}
} 
 80028b4:	bf00      	nop
 80028b6:	bf00      	nop
 80028b8:	3714      	adds	r7, #20
 80028ba:	46bd      	mov	sp, r7
 80028bc:	bd90      	pop	{r4, r7, pc}
 80028be:	bf00      	nop
 80028c0:	cccccccd 	.word	0xcccccccd

080028c4 <OLED_ShowString>:
函数功能：显示字符串
入口参数：坐标:x：0~127，y:0~63 ；*p:字符串起始地址；
返 回 值：无
**************************************************************************/  
void OLED_ShowString(u8 x,u8 y,const char *p)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af02      	add	r7, sp, #8
 80028ca:	4603      	mov	r3, r0
 80028cc:	603a      	str	r2, [r7, #0]
 80028ce:	71fb      	strb	r3, [r7, #7]
 80028d0:	460b      	mov	r3, r1
 80028d2:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 80028d4:	e01f      	b.n	8002916 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 80028d6:	79fb      	ldrb	r3, [r7, #7]
 80028d8:	2b7a      	cmp	r3, #122	; 0x7a
 80028da:	d904      	bls.n	80028e6 <OLED_ShowString+0x22>
 80028dc:	2300      	movs	r3, #0
 80028de:	71fb      	strb	r3, [r7, #7]
 80028e0:	79bb      	ldrb	r3, [r7, #6]
 80028e2:	3310      	adds	r3, #16
 80028e4:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 80028e6:	79bb      	ldrb	r3, [r7, #6]
 80028e8:	2b3a      	cmp	r3, #58	; 0x3a
 80028ea:	d905      	bls.n	80028f8 <OLED_ShowString+0x34>
 80028ec:	2300      	movs	r3, #0
 80028ee:	71fb      	strb	r3, [r7, #7]
 80028f0:	79fb      	ldrb	r3, [r7, #7]
 80028f2:	71bb      	strb	r3, [r7, #6]
 80028f4:	f7ff fe68 	bl	80025c8 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	781a      	ldrb	r2, [r3, #0]
 80028fc:	79b9      	ldrb	r1, [r7, #6]
 80028fe:	79f8      	ldrb	r0, [r7, #7]
 8002900:	2301      	movs	r3, #1
 8002902:	9300      	str	r3, [sp, #0]
 8002904:	230c      	movs	r3, #12
 8002906:	f7ff fee1 	bl	80026cc <OLED_ShowChar>
        x+=8;
 800290a:	79fb      	ldrb	r3, [r7, #7]
 800290c:	3308      	adds	r3, #8
 800290e:	71fb      	strb	r3, [r7, #7]
        p++;
 8002910:	683b      	ldr	r3, [r7, #0]
 8002912:	3301      	adds	r3, #1
 8002914:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	781b      	ldrb	r3, [r3, #0]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d1db      	bne.n	80028d6 <OLED_ShowString+0x12>
    }  
}	
 800291e:	bf00      	nop
 8002920:	bf00      	nop
 8002922:	3708      	adds	r7, #8
 8002924:	46bd      	mov	sp, r7
 8002926:	bd80      	pop	{r7, pc}

08002928 <OLED_Init>:
函数功能：初始化OLED
入口参数：无
返 回 值：无
**************************************************************************/ 
void OLED_Init(void)
{ 	 	 
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 800292e:	2200      	movs	r2, #0
 8002930:	2140      	movs	r1, #64	; 0x40
 8002932:	4851      	ldr	r0, [pc, #324]	; (8002a78 <OLED_Init+0x150>)
 8002934:	f002 fba4 	bl	8005080 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002938:	2001      	movs	r0, #1
 800293a:	f001 fa8f 	bl	8003e5c <HAL_Delay>
	OLED_RST_Set();   //OLED复位
 800293e:	2201      	movs	r2, #1
 8002940:	2140      	movs	r1, #64	; 0x40
 8002942:	484d      	ldr	r0, [pc, #308]	; (8002a78 <OLED_Init+0x150>)
 8002944:	f002 fb9c 	bl	8005080 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 8002948:	2100      	movs	r1, #0
 800294a:	20ae      	movs	r0, #174	; 0xae
 800294c:	f7ff fe12 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8002950:	2100      	movs	r1, #0
 8002952:	20d5      	movs	r0, #213	; 0xd5
 8002954:	f7ff fe0e 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 8002958:	2100      	movs	r1, #0
 800295a:	2050      	movs	r0, #80	; 0x50
 800295c:	f7ff fe0a 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8002960:	2100      	movs	r1, #0
 8002962:	20a8      	movs	r0, #168	; 0xa8
 8002964:	f7ff fe06 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
 8002968:	2100      	movs	r1, #0
 800296a:	203f      	movs	r0, #63	; 0x3f
 800296c:	f7ff fe02 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8002970:	2100      	movs	r1, #0
 8002972:	20d3      	movs	r0, #211	; 0xd3
 8002974:	f7ff fdfe 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 8002978:	2100      	movs	r1, #0
 800297a:	2000      	movs	r0, #0
 800297c:	f7ff fdfa 	bl	8002574 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8002980:	2100      	movs	r1, #0
 8002982:	2040      	movs	r0, #64	; 0x40
 8002984:	f7ff fdf6 	bl	8002574 <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 8002988:	2100      	movs	r1, #0
 800298a:	208d      	movs	r0, #141	; 0x8d
 800298c:	f7ff fdf2 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 8002990:	2100      	movs	r1, #0
 8002992:	2014      	movs	r0, #20
 8002994:	f7ff fdee 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 8002998:	2100      	movs	r1, #0
 800299a:	2020      	movs	r0, #32
 800299c:	f7ff fdea 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 80029a0:	2100      	movs	r1, #0
 80029a2:	2002      	movs	r0, #2
 80029a4:	f7ff fde6 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 80029a8:	2100      	movs	r1, #0
 80029aa:	20a1      	movs	r0, #161	; 0xa1
 80029ac:	f7ff fde2 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 80029b0:	2100      	movs	r1, #0
 80029b2:	20c0      	movs	r0, #192	; 0xc0
 80029b4:	f7ff fdde 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 80029b8:	2100      	movs	r1, #0
 80029ba:	20da      	movs	r0, #218	; 0xda
 80029bc:	f7ff fdda 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 80029c0:	2100      	movs	r1, #0
 80029c2:	2012      	movs	r0, #18
 80029c4:	f7ff fdd6 	bl	8002574 <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 80029c8:	2100      	movs	r1, #0
 80029ca:	2081      	movs	r0, #129	; 0x81
 80029cc:	f7ff fdd2 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 80029d0:	2100      	movs	r1, #0
 80029d2:	20ef      	movs	r0, #239	; 0xef
 80029d4:	f7ff fdce 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 80029d8:	2100      	movs	r1, #0
 80029da:	20d9      	movs	r0, #217	; 0xd9
 80029dc:	f7ff fdca 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 80029e0:	2100      	movs	r1, #0
 80029e2:	20f1      	movs	r0, #241	; 0xf1
 80029e4:	f7ff fdc6 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 80029e8:	2100      	movs	r1, #0
 80029ea:	20db      	movs	r0, #219	; 0xdb
 80029ec:	f7ff fdc2 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 80029f0:	2100      	movs	r1, #0
 80029f2:	2030      	movs	r0, #48	; 0x30
 80029f4:	f7ff fdbe 	bl	8002574 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 80029f8:	2100      	movs	r1, #0
 80029fa:	20a4      	movs	r0, #164	; 0xa4
 80029fc:	f7ff fdba 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
 8002a00:	2100      	movs	r1, #0
 8002a02:	20a6      	movs	r0, #166	; 0xa6
 8002a04:	f7ff fdb6 	bl	8002574 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
 8002a08:	2100      	movs	r1, #0
 8002a0a:	20af      	movs	r0, #175	; 0xaf
 8002a0c:	f7ff fdb2 	bl	8002574 <OLED_WR_Byte>
	OLED_Clear();                //清屏
 8002a10:	f7ff fdda 	bl	80025c8 <OLED_Clear>
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8002a14:	2300      	movs	r3, #0
 8002a16:	71fb      	strb	r3, [r7, #7]
 8002a18:	e026      	b.n	8002a68 <OLED_Init+0x140>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8002a1a:	79fb      	ldrb	r3, [r7, #7]
 8002a1c:	3b50      	subs	r3, #80	; 0x50
 8002a1e:	b2db      	uxtb	r3, r3
 8002a20:	2100      	movs	r1, #0
 8002a22:	4618      	mov	r0, r3
 8002a24:	f7ff fda6 	bl	8002574 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002a28:	2100      	movs	r1, #0
 8002a2a:	2000      	movs	r0, #0
 8002a2c:	f7ff fda2 	bl	8002574 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8002a30:	2100      	movs	r1, #0
 8002a32:	2010      	movs	r0, #16
 8002a34:	f7ff fd9e 	bl	8002574 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[i][n],OLED_DATA);
 8002a38:	2300      	movs	r3, #0
 8002a3a:	71bb      	strb	r3, [r7, #6]
 8002a3c:	e00d      	b.n	8002a5a <OLED_Init+0x132>
 8002a3e:	79fa      	ldrb	r2, [r7, #7]
 8002a40:	79bb      	ldrb	r3, [r7, #6]
 8002a42:	490e      	ldr	r1, [pc, #56]	; (8002a7c <OLED_Init+0x154>)
 8002a44:	01d2      	lsls	r2, r2, #7
 8002a46:	440a      	add	r2, r1
 8002a48:	4413      	add	r3, r2
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2101      	movs	r1, #1
 8002a4e:	4618      	mov	r0, r3
 8002a50:	f7ff fd90 	bl	8002574 <OLED_WR_Byte>
 8002a54:	79bb      	ldrb	r3, [r7, #6]
 8002a56:	3301      	adds	r3, #1
 8002a58:	71bb      	strb	r3, [r7, #6]
 8002a5a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	daed      	bge.n	8002a3e <OLED_Init+0x116>
	for(i=0;i<8;i++)  
 8002a62:	79fb      	ldrb	r3, [r7, #7]
 8002a64:	3301      	adds	r3, #1
 8002a66:	71fb      	strb	r3, [r7, #7]
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	2b07      	cmp	r3, #7
 8002a6c:	d9d5      	bls.n	8002a1a <OLED_Init+0xf2>
	}   
}  
 8002a6e:	bf00      	nop
 8002a70:	bf00      	nop
 8002a72:	3708      	adds	r7, #8
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40020400 	.word	0x40020400
 8002a7c:	20000b0c 	.word	0x20000b0c

08002a80 <raspiInit>:
//0x5a 0xa5 Yaw Factor Throttle Factor Forward Factor Lateral Factor LED lock



void raspiInit(UART_HandleTypeDef *huart)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	b082      	sub	sp, #8
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	68da      	ldr	r2, [r3, #12]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f042 0210 	orr.w	r2, r2, #16
 8002a96:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 8002a98:	220c      	movs	r2, #12
 8002a9a:	4904      	ldr	r1, [pc, #16]	; (8002aac <raspiInit+0x2c>)
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f004 fc47 	bl	8007330 <HAL_UART_Receive_DMA>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	20000408 	.word	0x20000408

08002ab0 <raspiUpdate>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void raspiUpdate()
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b084      	sub	sp, #16
 8002ab4:	af02      	add	r7, sp, #8
	short * date = (short *)(raspiBuffer + 2);
 8002ab6:	4b40      	ldr	r3, [pc, #256]	; (8002bb8 <raspiUpdate+0x108>)
 8002ab8:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++)
 8002aba:	2300      	movs	r3, #0
 8002abc:	607b      	str	r3, [r7, #4]
 8002abe:	e01c      	b.n	8002afa <raspiUpdate+0x4a>
		raspich_float[i]=1.0*date[i]/0x7fff;
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	005b      	lsls	r3, r3, #1
 8002ac4:	683a      	ldr	r2, [r7, #0]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002acc:	4618      	mov	r0, r3
 8002ace:	f7fd fd29 	bl	8000524 <__aeabi_i2d>
 8002ad2:	a337      	add	r3, pc, #220	; (adr r3, 8002bb0 <raspiUpdate+0x100>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd feb8 	bl	800084c <__aeabi_ddiv>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f858 	bl	8000b98 <__aeabi_d2f>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4934      	ldr	r1, [pc, #208]	; (8002bbc <raspiUpdate+0x10c>)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	601a      	str	r2, [r3, #0]
	for(int i=0;i<4;i++)
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	3301      	adds	r3, #1
 8002af8:	607b      	str	r3, [r7, #4]
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b03      	cmp	r3, #3
 8002afe:	dddf      	ble.n	8002ac0 <raspiUpdate+0x10>
    target_ver[2] = yaw + raspich_float[0]*180;
    target_ver[3] = raspich_float[1];
    target_ver[4] = raspich_float[2];
    target_ver[5] = raspich_float[3];*/

    target_ver[2] += raspich_float[0]*90;
 8002b00:	4b2f      	ldr	r3, [pc, #188]	; (8002bc0 <raspiUpdate+0x110>)
 8002b02:	ed93 7a02 	vldr	s14, [r3, #8]
 8002b06:	4b2d      	ldr	r3, [pc, #180]	; (8002bbc <raspiUpdate+0x10c>)
 8002b08:	edd3 7a00 	vldr	s15, [r3]
 8002b0c:	eddf 6a2d 	vldr	s13, [pc, #180]	; 8002bc4 <raspiUpdate+0x114>
 8002b10:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8002b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b18:	4b29      	ldr	r3, [pc, #164]	; (8002bc0 <raspiUpdate+0x110>)
 8002b1a:	edc3 7a02 	vstr	s15, [r3, #8]
    target_ver[3] = raspich_float[1];
 8002b1e:	4b27      	ldr	r3, [pc, #156]	; (8002bbc <raspiUpdate+0x10c>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	4a27      	ldr	r2, [pc, #156]	; (8002bc0 <raspiUpdate+0x110>)
 8002b24:	60d3      	str	r3, [r2, #12]
    target_ver[4] = raspich_float[2];
 8002b26:	4b25      	ldr	r3, [pc, #148]	; (8002bbc <raspiUpdate+0x10c>)
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4a25      	ldr	r2, [pc, #148]	; (8002bc0 <raspiUpdate+0x110>)
 8002b2c:	6113      	str	r3, [r2, #16]
    target_ver[5] += raspich_float[3];
 8002b2e:	4b24      	ldr	r3, [pc, #144]	; (8002bc0 <raspiUpdate+0x110>)
 8002b30:	ed93 7a05 	vldr	s14, [r3, #20]
 8002b34:	4b21      	ldr	r3, [pc, #132]	; (8002bbc <raspiUpdate+0x10c>)
 8002b36:	edd3 7a03 	vldr	s15, [r3, #12]
 8002b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b3e:	4b20      	ldr	r3, [pc, #128]	; (8002bc0 <raspiUpdate+0x110>)
 8002b40:	edc3 7a05 	vstr	s15, [r3, #20]
    if(raspiBuffer[10]==0)
 8002b44:	4b20      	ldr	r3, [pc, #128]	; (8002bc8 <raspiUpdate+0x118>)
 8002b46:	7a9b      	ldrb	r3, [r3, #10]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d106      	bne.n	8002b5a <raspiUpdate+0xaa>
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b52:	481e      	ldr	r0, [pc, #120]	; (8002bcc <raspiUpdate+0x11c>)
 8002b54:	f002 fa94 	bl	8005080 <HAL_GPIO_WritePin>
 8002b58:	e005      	b.n	8002b66 <raspiUpdate+0xb6>
    else
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002b60:	481a      	ldr	r0, [pc, #104]	; (8002bcc <raspiUpdate+0x11c>)
 8002b62:	f002 fa8d 	bl	8005080 <HAL_GPIO_WritePin>
    lock=raspiBuffer[11];
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <raspiUpdate+0x118>)
 8002b68:	7adb      	ldrb	r3, [r3, #11]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	4b18      	ldr	r3, [pc, #96]	; (8002bd0 <raspiUpdate+0x120>)
 8002b6e:	601a      	str	r2, [r3, #0]

    frame.fdata[28]=target_ver[2];
 8002b70:	4b13      	ldr	r3, [pc, #76]	; (8002bc0 <raspiUpdate+0x110>)
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4a17      	ldr	r2, [pc, #92]	; (8002bd4 <raspiUpdate+0x124>)
 8002b76:	6713      	str	r3, [r2, #112]	; 0x70
    frame.fdata[29]=target_ver[3];
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <raspiUpdate+0x110>)
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	4a15      	ldr	r2, [pc, #84]	; (8002bd4 <raspiUpdate+0x124>)
 8002b7e:	6753      	str	r3, [r2, #116]	; 0x74
    frame.fdata[30]=target_ver[4];
 8002b80:	4b0f      	ldr	r3, [pc, #60]	; (8002bc0 <raspiUpdate+0x110>)
 8002b82:	691b      	ldr	r3, [r3, #16]
 8002b84:	4a13      	ldr	r2, [pc, #76]	; (8002bd4 <raspiUpdate+0x124>)
 8002b86:	6793      	str	r3, [r2, #120]	; 0x78
    frame.fdata[31]=target_ver[5];//回传三轴数据目标
 8002b88:	4b0d      	ldr	r3, [pc, #52]	; (8002bc0 <raspiUpdate+0x110>)
 8002b8a:	695b      	ldr	r3, [r3, #20]
 8002b8c:	4a11      	ldr	r2, [pc, #68]	; (8002bd4 <raspiUpdate+0x124>)
 8002b8e:	67d3      	str	r3, [r2, #124]	; 0x7c

    OLED_ShowNumber(64, 24, raspiBuffer[10], 3, 12);
 8002b90:	4b0d      	ldr	r3, [pc, #52]	; (8002bc8 <raspiUpdate+0x118>)
 8002b92:	7a9b      	ldrb	r3, [r3, #10]
 8002b94:	461a      	mov	r2, r3
 8002b96:	230c      	movs	r3, #12
 8002b98:	9300      	str	r3, [sp, #0]
 8002b9a:	2303      	movs	r3, #3
 8002b9c:	2118      	movs	r1, #24
 8002b9e:	2040      	movs	r0, #64	; 0x40
 8002ba0:	f7ff fe22 	bl	80027e8 <OLED_ShowNumber>
}
 8002ba4:	bf00      	nop
 8002ba6:	3708      	adds	r7, #8
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	f3af 8000 	nop.w
 8002bb0:	00000000 	.word	0x00000000
 8002bb4:	40dfffc0 	.word	0x40dfffc0
 8002bb8:	2000040a 	.word	0x2000040a
 8002bbc:	20000428 	.word	0x20000428
 8002bc0:	20000484 	.word	0x20000484
 8002bc4:	42b40000 	.word	0x42b40000
 8002bc8:	20000408 	.word	0x20000408
 8002bcc:	40020c00 	.word	0x40020c00
 8002bd0:	20000404 	.word	0x20000404
 8002bd4:	200000a8 	.word	0x200000a8

08002bd8 <raspierr>:
void raspierr(UART_HandleTypeDef *huart)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b082      	sub	sp, #8
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f004 fbd5 	bl	8007390 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 8002be6:	220c      	movs	r2, #12
 8002be8:	4903      	ldr	r1, [pc, #12]	; (8002bf8 <raspierr+0x20>)
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f004 fba0 	bl	8007330 <HAL_UART_Receive_DMA>
}
 8002bf0:	bf00      	nop
 8002bf2:	3708      	adds	r7, #8
 8002bf4:	46bd      	mov	sp, r7
 8002bf6:	bd80      	pop	{r7, pc}
 8002bf8:	20000408 	.word	0x20000408

08002bfc <remoteInit>:
float val=0;
float yawa = 0;
extern UART_HandleTypeDef huart5;
extern UART_HandleTypeDef huart1;
void remoteInit(UART_HandleTypeDef *huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
    if(&huart1==huart)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a0f      	ldr	r2, [pc, #60]	; (8002c44 <remoteInit+0x48>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d106      	bne.n	8002c1a <remoteInit+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 8002c0c:	4b0e      	ldr	r3, [pc, #56]	; (8002c48 <remoteInit+0x4c>)
 8002c0e:	2219      	movs	r2, #25
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f004 fb8c 	bl	8007330 <HAL_UART_Receive_DMA>
 8002c18:	e008      	b.n	8002c2c <remoteInit+0x30>
	}else if(&huart5==huart)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	4a0b      	ldr	r2, [pc, #44]	; (8002c4c <remoteInit+0x50>)
 8002c1e:	4293      	cmp	r3, r2
 8002c20:	d104      	bne.n	8002c2c <remoteInit+0x30>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002c22:	2219      	movs	r2, #25
 8002c24:	490a      	ldr	r1, [pc, #40]	; (8002c50 <remoteInit+0x54>)
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f004 fb82 	bl	8007330 <HAL_UART_Receive_DMA>
	}
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	68da      	ldr	r2, [r3, #12]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f042 0210 	orr.w	r2, r2, #16
 8002c3a:	60da      	str	r2, [r3, #12]
}
 8002c3c:	bf00      	nop
 8002c3e:	3708      	adds	r7, #8
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd80      	pop	{r7, pc}
 8002c44:	20000890 	.word	0x20000890
 8002c48:	20000448 	.word	0x20000448
 8002c4c:	200007a4 	.word	0x200007a4
 8002c50:	20000438 	.word	0x20000438
 8002c54:	00000000 	.word	0x00000000

08002c58 <remoteUpdate>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void remoteUpdate(uint8_t * remoteBuffer)
{
 8002c58:	b590      	push	{r4, r7, lr}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
	float *dat = (float*)(remoteBuffer+4);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	3304      	adds	r3, #4
 8002c64:	60fb      	str	r3, [r7, #12]
	if(remoteBuffer[3]==0x00)
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	3303      	adds	r3, #3
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d108      	bne.n	8002c82 <remoteUpdate+0x2a>
	{
		ch_float[4]=dat[1];
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	4a70      	ldr	r2, [pc, #448]	; (8002e38 <remoteUpdate+0x1e0>)
 8002c76:	6113      	str	r3, [r2, #16]
		ch_float[5]=dat[0];
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a6e      	ldr	r2, [pc, #440]	; (8002e38 <remoteUpdate+0x1e0>)
 8002c7e:	6153      	str	r3, [r2, #20]
 8002c80:	e089      	b.n	8002d96 <remoteUpdate+0x13e>
	}else if(remoteBuffer[3]==0x01)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	3303      	adds	r3, #3
 8002c86:	781b      	ldrb	r3, [r3, #0]
 8002c88:	2b01      	cmp	r3, #1
 8002c8a:	d108      	bne.n	8002c9e <remoteUpdate+0x46>
	{
		ch_float[0]=dat[0];
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a69      	ldr	r2, [pc, #420]	; (8002e38 <remoteUpdate+0x1e0>)
 8002c92:	6013      	str	r3, [r2, #0]
		ch_float[1]=dat[1];
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	4a67      	ldr	r2, [pc, #412]	; (8002e38 <remoteUpdate+0x1e0>)
 8002c9a:	6053      	str	r3, [r2, #4]
 8002c9c:	e07b      	b.n	8002d96 <remoteUpdate+0x13e>
	}else if(remoteBuffer[3]==0x02)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	3303      	adds	r3, #3
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d106      	bne.n	8002cb6 <remoteUpdate+0x5e>
	{
		lock = remoteBuffer[7];
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	3307      	adds	r3, #7
 8002cac:	781b      	ldrb	r3, [r3, #0]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	4b62      	ldr	r3, [pc, #392]	; (8002e3c <remoteUpdate+0x1e4>)
 8002cb2:	601a      	str	r2, [r3, #0]
 8002cb4:	e06f      	b.n	8002d96 <remoteUpdate+0x13e>
	}else if(remoteBuffer[3]==0x03)//通道选择
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	3303      	adds	r3, #3
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	2b03      	cmp	r3, #3
 8002cbe:	d12d      	bne.n	8002d1c <remoteUpdate+0xc4>
	{
		i_conf=(int)dat[0];
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	edd3 7a00 	vldr	s15, [r3]
 8002cc6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002cca:	ee17 2a90 	vmov	r2, s15
 8002cce:	4b5c      	ldr	r3, [pc, #368]	; (8002e40 <remoteUpdate+0x1e8>)
 8002cd0:	601a      	str	r2, [r3, #0]
		val=pid_ver[i_conf/3][i_conf%3];
 8002cd2:	4b5b      	ldr	r3, [pc, #364]	; (8002e40 <remoteUpdate+0x1e8>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a5b      	ldr	r2, [pc, #364]	; (8002e44 <remoteUpdate+0x1ec>)
 8002cd8:	fb82 1203 	smull	r1, r2, r2, r3
 8002cdc:	17db      	asrs	r3, r3, #31
 8002cde:	1ad0      	subs	r0, r2, r3
 8002ce0:	4b57      	ldr	r3, [pc, #348]	; (8002e40 <remoteUpdate+0x1e8>)
 8002ce2:	6819      	ldr	r1, [r3, #0]
 8002ce4:	4b57      	ldr	r3, [pc, #348]	; (8002e44 <remoteUpdate+0x1ec>)
 8002ce6:	fb83 3201 	smull	r3, r2, r3, r1
 8002cea:	17cb      	asrs	r3, r1, #31
 8002cec:	1ad2      	subs	r2, r2, r3
 8002cee:	4613      	mov	r3, r2
 8002cf0:	005b      	lsls	r3, r3, #1
 8002cf2:	4413      	add	r3, r2
 8002cf4:	1aca      	subs	r2, r1, r3
 8002cf6:	4954      	ldr	r1, [pc, #336]	; (8002e48 <remoteUpdate+0x1f0>)
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	00db      	lsls	r3, r3, #3
 8002cfc:	1a1b      	subs	r3, r3, r0
 8002cfe:	4413      	add	r3, r2
 8002d00:	009b      	lsls	r3, r3, #2
 8002d02:	440b      	add	r3, r1
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a51      	ldr	r2, [pc, #324]	; (8002e4c <remoteUpdate+0x1f4>)
 8002d08:	6013      	str	r3, [r2, #0]
		frame.fdata[24]=dat[0];
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a50      	ldr	r2, [pc, #320]	; (8002e50 <remoteUpdate+0x1f8>)
 8002d10:	6613      	str	r3, [r2, #96]	; 0x60
		frame.fdata[25]=val;
 8002d12:	4b4e      	ldr	r3, [pc, #312]	; (8002e4c <remoteUpdate+0x1f4>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a4e      	ldr	r2, [pc, #312]	; (8002e50 <remoteUpdate+0x1f8>)
 8002d18:	6653      	str	r3, [r2, #100]	; 0x64
 8002d1a:	e03c      	b.n	8002d96 <remoteUpdate+0x13e>
	}else if(remoteBuffer[3]==0x04)//通道值
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3303      	adds	r3, #3
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b04      	cmp	r3, #4
 8002d24:	d124      	bne.n	8002d70 <remoteUpdate+0x118>
	{
		val=dat[0];
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4a48      	ldr	r2, [pc, #288]	; (8002e4c <remoteUpdate+0x1f4>)
 8002d2c:	6013      	str	r3, [r2, #0]
		pid_ver[i_conf/3][i_conf%3]=val;
 8002d2e:	4b44      	ldr	r3, [pc, #272]	; (8002e40 <remoteUpdate+0x1e8>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a44      	ldr	r2, [pc, #272]	; (8002e44 <remoteUpdate+0x1ec>)
 8002d34:	fb82 1203 	smull	r1, r2, r2, r3
 8002d38:	17db      	asrs	r3, r3, #31
 8002d3a:	1ad0      	subs	r0, r2, r3
 8002d3c:	4b40      	ldr	r3, [pc, #256]	; (8002e40 <remoteUpdate+0x1e8>)
 8002d3e:	6819      	ldr	r1, [r3, #0]
 8002d40:	4b40      	ldr	r3, [pc, #256]	; (8002e44 <remoteUpdate+0x1ec>)
 8002d42:	fb83 3201 	smull	r3, r2, r3, r1
 8002d46:	17cb      	asrs	r3, r1, #31
 8002d48:	1ad2      	subs	r2, r2, r3
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	005b      	lsls	r3, r3, #1
 8002d4e:	4413      	add	r3, r2
 8002d50:	1aca      	subs	r2, r1, r3
 8002d52:	4b3e      	ldr	r3, [pc, #248]	; (8002e4c <remoteUpdate+0x1f4>)
 8002d54:	6819      	ldr	r1, [r3, #0]
 8002d56:	4c3c      	ldr	r4, [pc, #240]	; (8002e48 <remoteUpdate+0x1f0>)
 8002d58:	4603      	mov	r3, r0
 8002d5a:	00db      	lsls	r3, r3, #3
 8002d5c:	1a1b      	subs	r3, r3, r0
 8002d5e:	4413      	add	r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4423      	add	r3, r4
 8002d64:	6019      	str	r1, [r3, #0]
		frame.fdata[25]=val;
 8002d66:	4b39      	ldr	r3, [pc, #228]	; (8002e4c <remoteUpdate+0x1f4>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4a39      	ldr	r2, [pc, #228]	; (8002e50 <remoteUpdate+0x1f8>)
 8002d6c:	6653      	str	r3, [r2, #100]	; 0x64
 8002d6e:	e012      	b.n	8002d96 <remoteUpdate+0x13e>
	}else if(remoteBuffer[3]==0x05)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	3303      	adds	r3, #3
 8002d74:	781b      	ldrb	r3, [r3, #0]
 8002d76:	2b05      	cmp	r3, #5
 8002d78:	d104      	bne.n	8002d84 <remoteUpdate+0x12c>
	{
		ch_float[2]=dat[0];
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a2e      	ldr	r2, [pc, #184]	; (8002e38 <remoteUpdate+0x1e0>)
 8002d80:	6093      	str	r3, [r2, #8]
 8002d82:	e008      	b.n	8002d96 <remoteUpdate+0x13e>
		//ch_float[3]=dat[1];
	}else if(remoteBuffer[3]==0x06)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	3303      	adds	r3, #3
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b06      	cmp	r3, #6
 8002d8c:	d103      	bne.n	8002d96 <remoteUpdate+0x13e>
	{
		ch_float[3]=dat[0];
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4a29      	ldr	r2, [pc, #164]	; (8002e38 <remoteUpdate+0x1e0>)
 8002d94:	60d3      	str	r3, [r2, #12]
	}
    target_ver[0] = ch_float[0]*30;
 8002d96:	4b28      	ldr	r3, [pc, #160]	; (8002e38 <remoteUpdate+0x1e0>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002da0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002da4:	4b2b      	ldr	r3, [pc, #172]	; (8002e54 <remoteUpdate+0x1fc>)
 8002da6:	edc3 7a00 	vstr	s15, [r3]
    target_ver[1] = ch_float[1]*30;
 8002daa:	4b23      	ldr	r3, [pc, #140]	; (8002e38 <remoteUpdate+0x1e0>)
 8002dac:	edd3 7a01 	vldr	s15, [r3, #4]
 8002db0:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 8002db4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002db8:	4b26      	ldr	r3, [pc, #152]	; (8002e54 <remoteUpdate+0x1fc>)
 8002dba:	edc3 7a01 	vstr	s15, [r3, #4]
    yawa = -0.02*ch_float[2]*30;
 8002dbe:	4b1e      	ldr	r3, [pc, #120]	; (8002e38 <remoteUpdate+0x1e0>)
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	f7fd fbc0 	bl	8000548 <__aeabi_f2d>
 8002dc8:	a319      	add	r3, pc, #100	; (adr r3, 8002e30 <remoteUpdate+0x1d8>)
 8002dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dce:	f7fd fc13 	bl	80005f8 <__aeabi_dmul>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f04f 0200 	mov.w	r2, #0
 8002dde:	4b1e      	ldr	r3, [pc, #120]	; (8002e58 <remoteUpdate+0x200>)
 8002de0:	f7fd fc0a 	bl	80005f8 <__aeabi_dmul>
 8002de4:	4602      	mov	r2, r0
 8002de6:	460b      	mov	r3, r1
 8002de8:	4610      	mov	r0, r2
 8002dea:	4619      	mov	r1, r3
 8002dec:	f7fd fed4 	bl	8000b98 <__aeabi_d2f>
 8002df0:	4603      	mov	r3, r0
 8002df2:	4a1a      	ldr	r2, [pc, #104]	; (8002e5c <remoteUpdate+0x204>)
 8002df4:	6013      	str	r3, [r2, #0]
    target_ver[3] = ch_float[3];
 8002df6:	4b10      	ldr	r3, [pc, #64]	; (8002e38 <remoteUpdate+0x1e0>)
 8002df8:	68db      	ldr	r3, [r3, #12]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <remoteUpdate+0x1fc>)
 8002dfc:	60d3      	str	r3, [r2, #12]
    target_ver[4] = ch_float[4];
 8002dfe:	4b0e      	ldr	r3, [pc, #56]	; (8002e38 <remoteUpdate+0x1e0>)
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	4a14      	ldr	r2, [pc, #80]	; (8002e54 <remoteUpdate+0x1fc>)
 8002e04:	6113      	str	r3, [r2, #16]
    target_ver[5] = ch_float[5];
 8002e06:	4b0c      	ldr	r3, [pc, #48]	; (8002e38 <remoteUpdate+0x1e0>)
 8002e08:	695b      	ldr	r3, [r3, #20]
 8002e0a:	4a12      	ldr	r2, [pc, #72]	; (8002e54 <remoteUpdate+0x1fc>)
 8002e0c:	6153      	str	r3, [r2, #20]
    frame.fdata[26]=target_ver[i_conf/3];
 8002e0e:	4b0c      	ldr	r3, [pc, #48]	; (8002e40 <remoteUpdate+0x1e8>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4a0c      	ldr	r2, [pc, #48]	; (8002e44 <remoteUpdate+0x1ec>)
 8002e14:	fb82 1203 	smull	r1, r2, r2, r3
 8002e18:	17db      	asrs	r3, r3, #31
 8002e1a:	1ad3      	subs	r3, r2, r3
 8002e1c:	4a0d      	ldr	r2, [pc, #52]	; (8002e54 <remoteUpdate+0x1fc>)
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	4413      	add	r3, r2
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4a0a      	ldr	r2, [pc, #40]	; (8002e50 <remoteUpdate+0x1f8>)
 8002e26:	6693      	str	r3, [r2, #104]	; 0x68
}
 8002e28:	bf00      	nop
 8002e2a:	3714      	adds	r7, #20
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bd90      	pop	{r4, r7, pc}
 8002e30:	47ae147b 	.word	0x47ae147b
 8002e34:	bf947ae1 	.word	0xbf947ae1
 8002e38:	20000458 	.word	0x20000458
 8002e3c:	20000404 	.word	0x20000404
 8002e40:	20000f0c 	.word	0x20000f0c
 8002e44:	55555556 	.word	0x55555556
 8002e48:	20000000 	.word	0x20000000
 8002e4c:	20000470 	.word	0x20000470
 8002e50:	200000a8 	.word	0x200000a8
 8002e54:	20000484 	.word	0x20000484
 8002e58:	403e0000 	.word	0x403e0000
 8002e5c:	20000474 	.word	0x20000474

08002e60 <remoteerr>:
void remoteerr(UART_HandleTypeDef *huart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b082      	sub	sp, #8
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    //HAL_UART_AbortReceive(huart);
    if(&huart1==huart)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	4a0b      	ldr	r2, [pc, #44]	; (8002e98 <remoteerr+0x38>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d106      	bne.n	8002e7e <remoteerr+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 8002e70:	4b0a      	ldr	r3, [pc, #40]	; (8002e9c <remoteerr+0x3c>)
 8002e72:	2219      	movs	r2, #25
 8002e74:	4619      	mov	r1, r3
 8002e76:	6878      	ldr	r0, [r7, #4]
 8002e78:	f004 fa5a 	bl	8007330 <HAL_UART_Receive_DMA>
	}else if(&huart5==huart)
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
	}
    //HAL_UART_Receive_DMA(huart, remoteBuffer, 16);
}
 8002e7c:	e008      	b.n	8002e90 <remoteerr+0x30>
	}else if(&huart5==huart)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a07      	ldr	r2, [pc, #28]	; (8002ea0 <remoteerr+0x40>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d104      	bne.n	8002e90 <remoteerr+0x30>
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002e86:	2219      	movs	r2, #25
 8002e88:	4906      	ldr	r1, [pc, #24]	; (8002ea4 <remoteerr+0x44>)
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f004 fa50 	bl	8007330 <HAL_UART_Receive_DMA>
}
 8002e90:	bf00      	nop
 8002e92:	3708      	adds	r7, #8
 8002e94:	46bd      	mov	sp, r7
 8002e96:	bd80      	pop	{r7, pc}
 8002e98:	20000890 	.word	0x20000890
 8002e9c:	20000448 	.word	0x20000448
 8002ea0:	200007a4 	.word	0x200007a4
 8002ea4:	20000438 	.word	0x20000438

08002ea8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002eae:	2300      	movs	r3, #0
 8002eb0:	607b      	str	r3, [r7, #4]
 8002eb2:	4b10      	ldr	r3, [pc, #64]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002eb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002eb6:	4a0f      	ldr	r2, [pc, #60]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002eb8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ebc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ebe:	4b0d      	ldr	r3, [pc, #52]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ec2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ec6:	607b      	str	r3, [r7, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	603b      	str	r3, [r7, #0]
 8002ece:	4b09      	ldr	r3, [pc, #36]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002ed0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed2:	4a08      	ldr	r2, [pc, #32]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002ed4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ed8:	6413      	str	r3, [r2, #64]	; 0x40
 8002eda:	4b06      	ldr	r3, [pc, #24]	; (8002ef4 <HAL_MspInit+0x4c>)
 8002edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ede:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002ee2:	603b      	str	r3, [r7, #0]
 8002ee4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002ee6:	bf00      	nop
 8002ee8:	370c      	adds	r7, #12
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	40023800 	.word	0x40023800

08002ef8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b08a      	sub	sp, #40	; 0x28
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f00:	f107 0314 	add.w	r3, r7, #20
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
 8002f0a:	609a      	str	r2, [r3, #8]
 8002f0c:	60da      	str	r2, [r3, #12]
 8002f0e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4a17      	ldr	r2, [pc, #92]	; (8002f74 <HAL_ADC_MspInit+0x7c>)
 8002f16:	4293      	cmp	r3, r2
 8002f18:	d127      	bne.n	8002f6a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
 8002f1e:	4b16      	ldr	r3, [pc, #88]	; (8002f78 <HAL_ADC_MspInit+0x80>)
 8002f20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f22:	4a15      	ldr	r2, [pc, #84]	; (8002f78 <HAL_ADC_MspInit+0x80>)
 8002f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f28:	6453      	str	r3, [r2, #68]	; 0x44
 8002f2a:	4b13      	ldr	r3, [pc, #76]	; (8002f78 <HAL_ADC_MspInit+0x80>)
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f36:	2300      	movs	r3, #0
 8002f38:	60fb      	str	r3, [r7, #12]
 8002f3a:	4b0f      	ldr	r3, [pc, #60]	; (8002f78 <HAL_ADC_MspInit+0x80>)
 8002f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f3e:	4a0e      	ldr	r2, [pc, #56]	; (8002f78 <HAL_ADC_MspInit+0x80>)
 8002f40:	f043 0301 	orr.w	r3, r3, #1
 8002f44:	6313      	str	r3, [r2, #48]	; 0x30
 8002f46:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <HAL_ADC_MspInit+0x80>)
 8002f48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4a:	f003 0301 	and.w	r3, r3, #1
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002f52:	2310      	movs	r3, #16
 8002f54:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002f56:	2303      	movs	r3, #3
 8002f58:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f5e:	f107 0314 	add.w	r3, r7, #20
 8002f62:	4619      	mov	r1, r3
 8002f64:	4805      	ldr	r0, [pc, #20]	; (8002f7c <HAL_ADC_MspInit+0x84>)
 8002f66:	f001 feef 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002f6a:	bf00      	nop
 8002f6c:	3728      	adds	r7, #40	; 0x28
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop
 8002f74:	40012000 	.word	0x40012000
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020000 	.word	0x40020000

08002f80 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f88:	f107 0314 	add.w	r3, r7, #20
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	601a      	str	r2, [r3, #0]
 8002f90:	605a      	str	r2, [r3, #4]
 8002f92:	609a      	str	r2, [r3, #8]
 8002f94:	60da      	str	r2, [r3, #12]
 8002f96:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a28      	ldr	r2, [pc, #160]	; (8003040 <HAL_SPI_MspInit+0xc0>)
 8002f9e:	4293      	cmp	r3, r2
 8002fa0:	d149      	bne.n	8003036 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	613b      	str	r3, [r7, #16]
 8002fa6:	4b27      	ldr	r3, [pc, #156]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a26      	ldr	r2, [pc, #152]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fac:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b24      	ldr	r3, [pc, #144]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	60fb      	str	r3, [r7, #12]
 8002fc2:	4b20      	ldr	r3, [pc, #128]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc6:	4a1f      	ldr	r2, [pc, #124]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fc8:	f043 0301 	orr.w	r3, r3, #1
 8002fcc:	6313      	str	r3, [r2, #48]	; 0x30
 8002fce:	4b1d      	ldr	r3, [pc, #116]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd2:	f003 0301 	and.w	r3, r3, #1
 8002fd6:	60fb      	str	r3, [r7, #12]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	60bb      	str	r3, [r7, #8]
 8002fde:	4b19      	ldr	r3, [pc, #100]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a18      	ldr	r2, [pc, #96]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fe4:	f043 0302 	orr.w	r3, r3, #2
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b16      	ldr	r3, [pc, #88]	; (8003044 <HAL_SPI_MspInit+0xc4>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0302 	and.w	r3, r3, #2
 8002ff2:	60bb      	str	r3, [r7, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ff6:	2320      	movs	r3, #32
 8002ff8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffa:	2302      	movs	r3, #2
 8002ffc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ffe:	2300      	movs	r3, #0
 8003000:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003002:	2303      	movs	r3, #3
 8003004:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003006:	2305      	movs	r3, #5
 8003008:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800300a:	f107 0314 	add.w	r3, r7, #20
 800300e:	4619      	mov	r1, r3
 8003010:	480d      	ldr	r0, [pc, #52]	; (8003048 <HAL_SPI_MspInit+0xc8>)
 8003012:	f001 fe99 	bl	8004d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003016:	2330      	movs	r3, #48	; 0x30
 8003018:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800301a:	2302      	movs	r3, #2
 800301c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800301e:	2300      	movs	r3, #0
 8003020:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003022:	2303      	movs	r3, #3
 8003024:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003026:	2305      	movs	r3, #5
 8003028:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4619      	mov	r1, r3
 8003030:	4806      	ldr	r0, [pc, #24]	; (800304c <HAL_SPI_MspInit+0xcc>)
 8003032:	f001 fe89 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8003036:	bf00      	nop
 8003038:	3728      	adds	r7, #40	; 0x28
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}
 800303e:	bf00      	nop
 8003040:	40013000 	.word	0x40013000
 8003044:	40023800 	.word	0x40023800
 8003048:	40020000 	.word	0x40020000
 800304c:	40020400 	.word	0x40020400

08003050 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003050:	b580      	push	{r7, lr}
 8003052:	b088      	sub	sp, #32
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	4a36      	ldr	r2, [pc, #216]	; (8003138 <HAL_TIM_Base_MspInit+0xe8>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d116      	bne.n	8003090 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	4b35      	ldr	r3, [pc, #212]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	4a34      	ldr	r2, [pc, #208]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 800306c:	f043 0301 	orr.w	r3, r3, #1
 8003070:	6453      	str	r3, [r2, #68]	; 0x44
 8003072:	4b32      	ldr	r3, [pc, #200]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 8003074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003076:	f003 0301 	and.w	r3, r3, #1
 800307a:	61fb      	str	r3, [r7, #28]
 800307c:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800307e:	2200      	movs	r2, #0
 8003080:	2100      	movs	r1, #0
 8003082:	2019      	movs	r0, #25
 8003084:	f001 fa28 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8003088:	2019      	movs	r0, #25
 800308a:	f001 fa41 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 800308e:	e04e      	b.n	800312e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003098:	d10e      	bne.n	80030b8 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800309a:	2300      	movs	r3, #0
 800309c:	61bb      	str	r3, [r7, #24]
 800309e:	4b27      	ldr	r3, [pc, #156]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a2:	4a26      	ldr	r2, [pc, #152]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030a4:	f043 0301 	orr.w	r3, r3, #1
 80030a8:	6413      	str	r3, [r2, #64]	; 0x40
 80030aa:	4b24      	ldr	r3, [pc, #144]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	f003 0301 	and.w	r3, r3, #1
 80030b2:	61bb      	str	r3, [r7, #24]
 80030b4:	69bb      	ldr	r3, [r7, #24]
}
 80030b6:	e03a      	b.n	800312e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4a20      	ldr	r2, [pc, #128]	; (8003140 <HAL_TIM_Base_MspInit+0xf0>)
 80030be:	4293      	cmp	r3, r2
 80030c0:	d10e      	bne.n	80030e0 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]
 80030c6:	4b1d      	ldr	r3, [pc, #116]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ca:	4a1c      	ldr	r2, [pc, #112]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030cc:	f043 0302 	orr.w	r3, r3, #2
 80030d0:	6413      	str	r3, [r2, #64]	; 0x40
 80030d2:	4b1a      	ldr	r3, [pc, #104]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	617b      	str	r3, [r7, #20]
 80030dc:	697b      	ldr	r3, [r7, #20]
}
 80030de:	e026      	b.n	800312e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a17      	ldr	r2, [pc, #92]	; (8003144 <HAL_TIM_Base_MspInit+0xf4>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d10e      	bne.n	8003108 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80030ea:	2300      	movs	r3, #0
 80030ec:	613b      	str	r3, [r7, #16]
 80030ee:	4b13      	ldr	r3, [pc, #76]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f2:	4a12      	ldr	r2, [pc, #72]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030f4:	f043 0304 	orr.w	r3, r3, #4
 80030f8:	6413      	str	r3, [r2, #64]	; 0x40
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 80030fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fe:	f003 0304 	and.w	r3, r3, #4
 8003102:	613b      	str	r3, [r7, #16]
 8003104:	693b      	ldr	r3, [r7, #16]
}
 8003106:	e012      	b.n	800312e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a0e      	ldr	r2, [pc, #56]	; (8003148 <HAL_TIM_Base_MspInit+0xf8>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d10d      	bne.n	800312e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003112:	2300      	movs	r3, #0
 8003114:	60fb      	str	r3, [r7, #12]
 8003116:	4b09      	ldr	r3, [pc, #36]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 8003118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800311a:	4a08      	ldr	r2, [pc, #32]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 800311c:	f043 0302 	orr.w	r3, r3, #2
 8003120:	6453      	str	r3, [r2, #68]	; 0x44
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_TIM_Base_MspInit+0xec>)
 8003124:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003126:	f003 0302 	and.w	r3, r3, #2
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	68fb      	ldr	r3, [r7, #12]
}
 800312e:	bf00      	nop
 8003130:	3720      	adds	r7, #32
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}
 8003136:	bf00      	nop
 8003138:	40010000 	.word	0x40010000
 800313c:	40023800 	.word	0x40023800
 8003140:	40000400 	.word	0x40000400
 8003144:	40000800 	.word	0x40000800
 8003148:	40010400 	.word	0x40010400

0800314c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800314c:	b580      	push	{r7, lr}
 800314e:	b08a      	sub	sp, #40	; 0x28
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003154:	f107 0314 	add.w	r3, r7, #20
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
 800315e:	609a      	str	r2, [r3, #8]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM5)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a23      	ldr	r2, [pc, #140]	; (80031f8 <HAL_TIM_PWM_MspInit+0xac>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d12c      	bne.n	80031c8 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800316e:	2300      	movs	r3, #0
 8003170:	613b      	str	r3, [r7, #16]
 8003172:	4b22      	ldr	r3, [pc, #136]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	4a21      	ldr	r2, [pc, #132]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 8003178:	f043 0308 	orr.w	r3, r3, #8
 800317c:	6413      	str	r3, [r2, #64]	; 0x40
 800317e:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 8003180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003182:	f003 0308 	and.w	r3, r3, #8
 8003186:	613b      	str	r3, [r7, #16]
 8003188:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800318a:	2300      	movs	r3, #0
 800318c:	60fb      	str	r3, [r7, #12]
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 8003190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003192:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 8003194:	f043 0301 	orr.w	r3, r3, #1
 8003198:	6313      	str	r3, [r2, #48]	; 0x30
 800319a:	4b18      	ldr	r3, [pc, #96]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80031a6:	2303      	movs	r3, #3
 80031a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031aa:	2302      	movs	r3, #2
 80031ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ae:	2300      	movs	r3, #0
 80031b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031b2:	2300      	movs	r3, #0
 80031b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80031b6:	2302      	movs	r3, #2
 80031b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031ba:	f107 0314 	add.w	r3, r7, #20
 80031be:	4619      	mov	r1, r3
 80031c0:	480f      	ldr	r0, [pc, #60]	; (8003200 <HAL_TIM_PWM_MspInit+0xb4>)
 80031c2:	f001 fdc1 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80031c6:	e012      	b.n	80031ee <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM12)
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a0d      	ldr	r2, [pc, #52]	; (8003204 <HAL_TIM_PWM_MspInit+0xb8>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d10d      	bne.n	80031ee <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60bb      	str	r3, [r7, #8]
 80031d6:	4b09      	ldr	r3, [pc, #36]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 80031d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031da:	4a08      	ldr	r2, [pc, #32]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 80031dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031e0:	6413      	str	r3, [r2, #64]	; 0x40
 80031e2:	4b06      	ldr	r3, [pc, #24]	; (80031fc <HAL_TIM_PWM_MspInit+0xb0>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031ea:	60bb      	str	r3, [r7, #8]
 80031ec:	68bb      	ldr	r3, [r7, #8]
}
 80031ee:	bf00      	nop
 80031f0:	3728      	adds	r7, #40	; 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	40000c00 	.word	0x40000c00
 80031fc:	40023800 	.word	0x40023800
 8003200:	40020000 	.word	0x40020000
 8003204:	40001800 	.word	0x40001800

08003208 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b08e      	sub	sp, #56	; 0x38
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003210:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003214:	2200      	movs	r2, #0
 8003216:	601a      	str	r2, [r3, #0]
 8003218:	605a      	str	r2, [r3, #4]
 800321a:	609a      	str	r2, [r3, #8]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4a6a      	ldr	r2, [pc, #424]	; (80033d0 <HAL_TIM_MspPostInit+0x1c8>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d13c      	bne.n	80032a4 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800322a:	2300      	movs	r3, #0
 800322c:	623b      	str	r3, [r7, #32]
 800322e:	4b69      	ldr	r3, [pc, #420]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003232:	4a68      	ldr	r2, [pc, #416]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003234:	f043 0301 	orr.w	r3, r3, #1
 8003238:	6313      	str	r3, [r2, #48]	; 0x30
 800323a:	4b66      	ldr	r3, [pc, #408]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 800323c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800323e:	f003 0301 	and.w	r3, r3, #1
 8003242:	623b      	str	r3, [r7, #32]
 8003244:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003246:	2300      	movs	r3, #0
 8003248:	61fb      	str	r3, [r7, #28]
 800324a:	4b62      	ldr	r3, [pc, #392]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a61      	ldr	r2, [pc, #388]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003250:	f043 0302 	orr.w	r3, r3, #2
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b5f      	ldr	r3, [pc, #380]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	69fb      	ldr	r3, [r7, #28]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003262:	23c0      	movs	r3, #192	; 0xc0
 8003264:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003266:	2302      	movs	r3, #2
 8003268:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326a:	2300      	movs	r3, #0
 800326c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800326e:	2300      	movs	r3, #0
 8003270:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003272:	2302      	movs	r3, #2
 8003274:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003276:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800327a:	4619      	mov	r1, r3
 800327c:	4856      	ldr	r0, [pc, #344]	; (80033d8 <HAL_TIM_MspPostInit+0x1d0>)
 800327e:	f001 fd63 	bl	8004d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003282:	2303      	movs	r3, #3
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003286:	2302      	movs	r3, #2
 8003288:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800328a:	2300      	movs	r3, #0
 800328c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800328e:	2300      	movs	r3, #0
 8003290:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003292:	2302      	movs	r3, #2
 8003294:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003296:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800329a:	4619      	mov	r1, r3
 800329c:	484f      	ldr	r0, [pc, #316]	; (80033dc <HAL_TIM_MspPostInit+0x1d4>)
 800329e:	f001 fd53 	bl	8004d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80032a2:	e091      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a4d      	ldr	r2, [pc, #308]	; (80033e0 <HAL_TIM_MspPostInit+0x1d8>)
 80032aa:	4293      	cmp	r3, r2
 80032ac:	d11f      	bne.n	80032ee <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ae:	2300      	movs	r3, #0
 80032b0:	61bb      	str	r3, [r7, #24]
 80032b2:	4b48      	ldr	r3, [pc, #288]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 80032b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032b6:	4a47      	ldr	r2, [pc, #284]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 80032b8:	f043 0308 	orr.w	r3, r3, #8
 80032bc:	6313      	str	r3, [r2, #48]	; 0x30
 80032be:	4b45      	ldr	r3, [pc, #276]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	f003 0308 	and.w	r3, r3, #8
 80032c6:	61bb      	str	r3, [r7, #24]
 80032c8:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80032ca:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80032ce:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032d0:	2302      	movs	r3, #2
 80032d2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032d4:	2300      	movs	r3, #0
 80032d6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032d8:	2300      	movs	r3, #0
 80032da:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032dc:	2302      	movs	r3, #2
 80032de:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80032e4:	4619      	mov	r1, r3
 80032e6:	483f      	ldr	r0, [pc, #252]	; (80033e4 <HAL_TIM_MspPostInit+0x1dc>)
 80032e8:	f001 fd2e 	bl	8004d48 <HAL_GPIO_Init>
}
 80032ec:	e06c      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a3d      	ldr	r2, [pc, #244]	; (80033e8 <HAL_TIM_MspPostInit+0x1e0>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d11e      	bne.n	8003336 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80032f8:	2300      	movs	r3, #0
 80032fa:	617b      	str	r3, [r7, #20]
 80032fc:	4b35      	ldr	r3, [pc, #212]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 80032fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003300:	4a34      	ldr	r2, [pc, #208]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003302:	f043 0301 	orr.w	r3, r3, #1
 8003306:	6313      	str	r3, [r2, #48]	; 0x30
 8003308:	4b32      	ldr	r3, [pc, #200]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003314:	230c      	movs	r3, #12
 8003316:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003318:	2302      	movs	r3, #2
 800331a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800331c:	2300      	movs	r3, #0
 800331e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003320:	2300      	movs	r3, #0
 8003322:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8003324:	2302      	movs	r3, #2
 8003326:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003328:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800332c:	4619      	mov	r1, r3
 800332e:	482a      	ldr	r0, [pc, #168]	; (80033d8 <HAL_TIM_MspPostInit+0x1d0>)
 8003330:	f001 fd0a 	bl	8004d48 <HAL_GPIO_Init>
}
 8003334:	e048      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4a2c      	ldr	r2, [pc, #176]	; (80033ec <HAL_TIM_MspPostInit+0x1e4>)
 800333c:	4293      	cmp	r3, r2
 800333e:	d11f      	bne.n	8003380 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003340:	2300      	movs	r3, #0
 8003342:	613b      	str	r3, [r7, #16]
 8003344:	4b23      	ldr	r3, [pc, #140]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	4a22      	ldr	r2, [pc, #136]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 800334a:	f043 0304 	orr.w	r3, r3, #4
 800334e:	6313      	str	r3, [r2, #48]	; 0x30
 8003350:	4b20      	ldr	r3, [pc, #128]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	f003 0304 	and.w	r3, r3, #4
 8003358:	613b      	str	r3, [r7, #16]
 800335a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800335c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8003360:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003362:	2302      	movs	r3, #2
 8003364:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003366:	2300      	movs	r3, #0
 8003368:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800336a:	2300      	movs	r3, #0
 800336c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800336e:	2303      	movs	r3, #3
 8003370:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003372:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003376:	4619      	mov	r1, r3
 8003378:	481d      	ldr	r0, [pc, #116]	; (80033f0 <HAL_TIM_MspPostInit+0x1e8>)
 800337a:	f001 fce5 	bl	8004d48 <HAL_GPIO_Init>
}
 800337e:	e023      	b.n	80033c8 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a1b      	ldr	r2, [pc, #108]	; (80033f4 <HAL_TIM_MspPostInit+0x1ec>)
 8003386:	4293      	cmp	r3, r2
 8003388:	d11e      	bne.n	80033c8 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	4b11      	ldr	r3, [pc, #68]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003392:	4a10      	ldr	r2, [pc, #64]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 8003394:	f043 0302 	orr.w	r3, r3, #2
 8003398:	6313      	str	r3, [r2, #48]	; 0x30
 800339a:	4b0e      	ldr	r3, [pc, #56]	; (80033d4 <HAL_TIM_MspPostInit+0x1cc>)
 800339c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800339e:	f003 0302 	and.w	r3, r3, #2
 80033a2:	60fb      	str	r3, [r7, #12]
 80033a4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80033a6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80033aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ac:	2302      	movs	r3, #2
 80033ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b0:	2300      	movs	r3, #0
 80033b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033b4:	2300      	movs	r3, #0
 80033b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80033b8:	2309      	movs	r3, #9
 80033ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80033c0:	4619      	mov	r1, r3
 80033c2:	4806      	ldr	r0, [pc, #24]	; (80033dc <HAL_TIM_MspPostInit+0x1d4>)
 80033c4:	f001 fcc0 	bl	8004d48 <HAL_GPIO_Init>
}
 80033c8:	bf00      	nop
 80033ca:	3738      	adds	r7, #56	; 0x38
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}
 80033d0:	40000400 	.word	0x40000400
 80033d4:	40023800 	.word	0x40023800
 80033d8:	40020000 	.word	0x40020000
 80033dc:	40020400 	.word	0x40020400
 80033e0:	40000800 	.word	0x40000800
 80033e4:	40020c00 	.word	0x40020c00
 80033e8:	40000c00 	.word	0x40000c00
 80033ec:	40010400 	.word	0x40010400
 80033f0:	40020800 	.word	0x40020800
 80033f4:	40001800 	.word	0x40001800

080033f8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b092      	sub	sp, #72	; 0x48
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003400:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003404:	2200      	movs	r2, #0
 8003406:	601a      	str	r2, [r3, #0]
 8003408:	605a      	str	r2, [r3, #4]
 800340a:	609a      	str	r2, [r3, #8]
 800340c:	60da      	str	r2, [r3, #12]
 800340e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a78      	ldr	r2, [pc, #480]	; (80035f8 <HAL_UART_MspInit+0x200>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d164      	bne.n	80034e4 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800341a:	2300      	movs	r3, #0
 800341c:	633b      	str	r3, [r7, #48]	; 0x30
 800341e:	4b77      	ldr	r3, [pc, #476]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	4a76      	ldr	r2, [pc, #472]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003424:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003428:	6413      	str	r3, [r2, #64]	; 0x40
 800342a:	4b74      	ldr	r3, [pc, #464]	; (80035fc <HAL_UART_MspInit+0x204>)
 800342c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003432:	633b      	str	r3, [r7, #48]	; 0x30
 8003434:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003436:	2300      	movs	r3, #0
 8003438:	62fb      	str	r3, [r7, #44]	; 0x2c
 800343a:	4b70      	ldr	r3, [pc, #448]	; (80035fc <HAL_UART_MspInit+0x204>)
 800343c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800343e:	4a6f      	ldr	r2, [pc, #444]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003440:	f043 0304 	orr.w	r3, r3, #4
 8003444:	6313      	str	r3, [r2, #48]	; 0x30
 8003446:	4b6d      	ldr	r3, [pc, #436]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800344a:	f003 0304 	and.w	r3, r3, #4
 800344e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003452:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003456:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003458:	2302      	movs	r3, #2
 800345a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800345c:	2301      	movs	r3, #1
 800345e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003460:	2303      	movs	r3, #3
 8003462:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003464:	2308      	movs	r3, #8
 8003466:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003468:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800346c:	4619      	mov	r1, r3
 800346e:	4864      	ldr	r0, [pc, #400]	; (8003600 <HAL_UART_MspInit+0x208>)
 8003470:	f001 fc6a 	bl	8004d48 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003474:	4b63      	ldr	r3, [pc, #396]	; (8003604 <HAL_UART_MspInit+0x20c>)
 8003476:	4a64      	ldr	r2, [pc, #400]	; (8003608 <HAL_UART_MspInit+0x210>)
 8003478:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800347a:	4b62      	ldr	r3, [pc, #392]	; (8003604 <HAL_UART_MspInit+0x20c>)
 800347c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003480:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003482:	4b60      	ldr	r3, [pc, #384]	; (8003604 <HAL_UART_MspInit+0x20c>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003488:	4b5e      	ldr	r3, [pc, #376]	; (8003604 <HAL_UART_MspInit+0x20c>)
 800348a:	2200      	movs	r2, #0
 800348c:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_UART_MspInit+0x20c>)
 8003490:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003494:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003496:	4b5b      	ldr	r3, [pc, #364]	; (8003604 <HAL_UART_MspInit+0x20c>)
 8003498:	2200      	movs	r2, #0
 800349a:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800349c:	4b59      	ldr	r3, [pc, #356]	; (8003604 <HAL_UART_MspInit+0x20c>)
 800349e:	2200      	movs	r2, #0
 80034a0:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 80034a2:	4b58      	ldr	r3, [pc, #352]	; (8003604 <HAL_UART_MspInit+0x20c>)
 80034a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a8:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80034aa:	4b56      	ldr	r3, [pc, #344]	; (8003604 <HAL_UART_MspInit+0x20c>)
 80034ac:	2200      	movs	r2, #0
 80034ae:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80034b0:	4b54      	ldr	r3, [pc, #336]	; (8003604 <HAL_UART_MspInit+0x20c>)
 80034b2:	2200      	movs	r2, #0
 80034b4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80034b6:	4853      	ldr	r0, [pc, #332]	; (8003604 <HAL_UART_MspInit+0x20c>)
 80034b8:	f001 f838 	bl	800452c <HAL_DMA_Init>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80034c2:	f7fe feef 	bl	80022a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a4e      	ldr	r2, [pc, #312]	; (8003604 <HAL_UART_MspInit+0x20c>)
 80034ca:	639a      	str	r2, [r3, #56]	; 0x38
 80034cc:	4a4d      	ldr	r2, [pc, #308]	; (8003604 <HAL_UART_MspInit+0x20c>)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 80034d2:	2200      	movs	r2, #0
 80034d4:	2100      	movs	r1, #0
 80034d6:	2034      	movs	r0, #52	; 0x34
 80034d8:	f000 fffe 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80034dc:	2034      	movs	r0, #52	; 0x34
 80034de:	f001 f817 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80034e2:	e1d7      	b.n	8003894 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==UART5)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	4a48      	ldr	r2, [pc, #288]	; (800360c <HAL_UART_MspInit+0x214>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	f040 8096 	bne.w	800361c <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 80034f0:	2300      	movs	r3, #0
 80034f2:	62bb      	str	r3, [r7, #40]	; 0x28
 80034f4:	4b41      	ldr	r3, [pc, #260]	; (80035fc <HAL_UART_MspInit+0x204>)
 80034f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034f8:	4a40      	ldr	r2, [pc, #256]	; (80035fc <HAL_UART_MspInit+0x204>)
 80034fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80034fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003500:	4b3e      	ldr	r3, [pc, #248]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003502:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003504:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003508:	62bb      	str	r3, [r7, #40]	; 0x28
 800350a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	627b      	str	r3, [r7, #36]	; 0x24
 8003510:	4b3a      	ldr	r3, [pc, #232]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003514:	4a39      	ldr	r2, [pc, #228]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003516:	f043 0304 	orr.w	r3, r3, #4
 800351a:	6313      	str	r3, [r2, #48]	; 0x30
 800351c:	4b37      	ldr	r3, [pc, #220]	; (80035fc <HAL_UART_MspInit+0x204>)
 800351e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003520:	f003 0304 	and.w	r3, r3, #4
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003528:	2300      	movs	r3, #0
 800352a:	623b      	str	r3, [r7, #32]
 800352c:	4b33      	ldr	r3, [pc, #204]	; (80035fc <HAL_UART_MspInit+0x204>)
 800352e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003530:	4a32      	ldr	r2, [pc, #200]	; (80035fc <HAL_UART_MspInit+0x204>)
 8003532:	f043 0308 	orr.w	r3, r3, #8
 8003536:	6313      	str	r3, [r2, #48]	; 0x30
 8003538:	4b30      	ldr	r3, [pc, #192]	; (80035fc <HAL_UART_MspInit+0x204>)
 800353a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800353c:	f003 0308 	and.w	r3, r3, #8
 8003540:	623b      	str	r3, [r7, #32]
 8003542:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003544:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003548:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800354a:	2302      	movs	r3, #2
 800354c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800354e:	2301      	movs	r3, #1
 8003550:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003552:	2303      	movs	r3, #3
 8003554:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003556:	2308      	movs	r3, #8
 8003558:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800355a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800355e:	4619      	mov	r1, r3
 8003560:	4827      	ldr	r0, [pc, #156]	; (8003600 <HAL_UART_MspInit+0x208>)
 8003562:	f001 fbf1 	bl	8004d48 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003566:	2304      	movs	r3, #4
 8003568:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800356a:	2302      	movs	r3, #2
 800356c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800356e:	2301      	movs	r3, #1
 8003570:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003572:	2303      	movs	r3, #3
 8003574:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003576:	2308      	movs	r3, #8
 8003578:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800357a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800357e:	4619      	mov	r1, r3
 8003580:	4823      	ldr	r0, [pc, #140]	; (8003610 <HAL_UART_MspInit+0x218>)
 8003582:	f001 fbe1 	bl	8004d48 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8003586:	4b23      	ldr	r3, [pc, #140]	; (8003614 <HAL_UART_MspInit+0x21c>)
 8003588:	4a23      	ldr	r2, [pc, #140]	; (8003618 <HAL_UART_MspInit+0x220>)
 800358a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800358c:	4b21      	ldr	r3, [pc, #132]	; (8003614 <HAL_UART_MspInit+0x21c>)
 800358e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003592:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003594:	4b1f      	ldr	r3, [pc, #124]	; (8003614 <HAL_UART_MspInit+0x21c>)
 8003596:	2200      	movs	r2, #0
 8003598:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800359a:	4b1e      	ldr	r3, [pc, #120]	; (8003614 <HAL_UART_MspInit+0x21c>)
 800359c:	2200      	movs	r2, #0
 800359e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 80035a0:	4b1c      	ldr	r3, [pc, #112]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035a2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035a6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80035a8:	4b1a      	ldr	r3, [pc, #104]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035aa:	2200      	movs	r2, #0
 80035ac:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80035ae:	4b19      	ldr	r3, [pc, #100]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035b0:	2200      	movs	r2, #0
 80035b2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 80035b4:	4b17      	ldr	r3, [pc, #92]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035ba:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 80035bc:	4b15      	ldr	r3, [pc, #84]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035be:	2200      	movs	r2, #0
 80035c0:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80035c2:	4b14      	ldr	r3, [pc, #80]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 80035c8:	4812      	ldr	r0, [pc, #72]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035ca:	f000 ffaf 	bl	800452c <HAL_DMA_Init>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d001      	beq.n	80035d8 <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 80035d4:	f7fe fe66 	bl	80022a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a0e      	ldr	r2, [pc, #56]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035dc:	639a      	str	r2, [r3, #56]	; 0x38
 80035de:	4a0d      	ldr	r2, [pc, #52]	; (8003614 <HAL_UART_MspInit+0x21c>)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80035e4:	2200      	movs	r2, #0
 80035e6:	2100      	movs	r1, #0
 80035e8:	2035      	movs	r0, #53	; 0x35
 80035ea:	f000 ff75 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80035ee:	2035      	movs	r0, #53	; 0x35
 80035f0:	f000 ff8e 	bl	8004510 <HAL_NVIC_EnableIRQ>
}
 80035f4:	e14e      	b.n	8003894 <HAL_UART_MspInit+0x49c>
 80035f6:	bf00      	nop
 80035f8:	40004c00 	.word	0x40004c00
 80035fc:	40023800 	.word	0x40023800
 8003600:	40020800 	.word	0x40020800
 8003604:	20000520 	.word	0x20000520
 8003608:	40026040 	.word	0x40026040
 800360c:	40005000 	.word	0x40005000
 8003610:	40020c00 	.word	0x40020c00
 8003614:	20000a44 	.word	0x20000a44
 8003618:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	4a9e      	ldr	r2, [pc, #632]	; (800389c <HAL_UART_MspInit+0x4a4>)
 8003622:	4293      	cmp	r3, r2
 8003624:	d164      	bne.n	80036f0 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 8003626:	2300      	movs	r3, #0
 8003628:	61fb      	str	r3, [r7, #28]
 800362a:	4b9d      	ldr	r3, [pc, #628]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 800362c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800362e:	4a9c      	ldr	r2, [pc, #624]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003630:	f043 0310 	orr.w	r3, r3, #16
 8003634:	6453      	str	r3, [r2, #68]	; 0x44
 8003636:	4b9a      	ldr	r3, [pc, #616]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003638:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800363a:	f003 0310 	and.w	r3, r3, #16
 800363e:	61fb      	str	r3, [r7, #28]
 8003640:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003642:	2300      	movs	r3, #0
 8003644:	61bb      	str	r3, [r7, #24]
 8003646:	4b96      	ldr	r3, [pc, #600]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003648:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800364a:	4a95      	ldr	r2, [pc, #596]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 800364c:	f043 0301 	orr.w	r3, r3, #1
 8003650:	6313      	str	r3, [r2, #48]	; 0x30
 8003652:	4b93      	ldr	r3, [pc, #588]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003656:	f003 0301 	and.w	r3, r3, #1
 800365a:	61bb      	str	r3, [r7, #24]
 800365c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800365e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003662:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003664:	2302      	movs	r3, #2
 8003666:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003668:	2300      	movs	r3, #0
 800366a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800366c:	2303      	movs	r3, #3
 800366e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003670:	2307      	movs	r3, #7
 8003672:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003674:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003678:	4619      	mov	r1, r3
 800367a:	488a      	ldr	r0, [pc, #552]	; (80038a4 <HAL_UART_MspInit+0x4ac>)
 800367c:	f001 fb64 	bl	8004d48 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003680:	4b89      	ldr	r3, [pc, #548]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 8003682:	4a8a      	ldr	r2, [pc, #552]	; (80038ac <HAL_UART_MspInit+0x4b4>)
 8003684:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8003686:	4b88      	ldr	r3, [pc, #544]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 8003688:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800368c:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800368e:	4b86      	ldr	r3, [pc, #536]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 8003690:	2200      	movs	r2, #0
 8003692:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003694:	4b84      	ldr	r3, [pc, #528]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 8003696:	2200      	movs	r2, #0
 8003698:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800369a:	4b83      	ldr	r3, [pc, #524]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 800369c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036a0:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036a2:	4b81      	ldr	r3, [pc, #516]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036a8:	4b7f      	ldr	r3, [pc, #508]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036aa:	2200      	movs	r2, #0
 80036ac:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 80036ae:	4b7e      	ldr	r3, [pc, #504]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036b0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036b4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036b6:	4b7c      	ldr	r3, [pc, #496]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036b8:	2200      	movs	r2, #0
 80036ba:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036bc:	4b7a      	ldr	r3, [pc, #488]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036be:	2200      	movs	r2, #0
 80036c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80036c2:	4879      	ldr	r0, [pc, #484]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036c4:	f000 ff32 	bl	800452c <HAL_DMA_Init>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d001      	beq.n	80036d2 <HAL_UART_MspInit+0x2da>
      Error_Handler();
 80036ce:	f7fe fde9 	bl	80022a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	4a74      	ldr	r2, [pc, #464]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036d6:	639a      	str	r2, [r3, #56]	; 0x38
 80036d8:	4a73      	ldr	r2, [pc, #460]	; (80038a8 <HAL_UART_MspInit+0x4b0>)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80036de:	2200      	movs	r2, #0
 80036e0:	2100      	movs	r1, #0
 80036e2:	2025      	movs	r0, #37	; 0x25
 80036e4:	f000 fef8 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80036e8:	2025      	movs	r0, #37	; 0x25
 80036ea:	f000 ff11 	bl	8004510 <HAL_NVIC_EnableIRQ>
}
 80036ee:	e0d1      	b.n	8003894 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART2)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	4a6e      	ldr	r2, [pc, #440]	; (80038b0 <HAL_UART_MspInit+0x4b8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d163      	bne.n	80037c2 <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 80036fa:	2300      	movs	r3, #0
 80036fc:	617b      	str	r3, [r7, #20]
 80036fe:	4b68      	ldr	r3, [pc, #416]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003702:	4a67      	ldr	r2, [pc, #412]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003704:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003708:	6413      	str	r3, [r2, #64]	; 0x40
 800370a:	4b65      	ldr	r3, [pc, #404]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 800370c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800370e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003712:	617b      	str	r3, [r7, #20]
 8003714:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
 800371a:	4b61      	ldr	r3, [pc, #388]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4a60      	ldr	r2, [pc, #384]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003720:	f043 0308 	orr.w	r3, r3, #8
 8003724:	6313      	str	r3, [r2, #48]	; 0x30
 8003726:	4b5e      	ldr	r3, [pc, #376]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 8003728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372a:	f003 0308 	and.w	r3, r3, #8
 800372e:	613b      	str	r3, [r7, #16]
 8003730:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8003732:	2360      	movs	r3, #96	; 0x60
 8003734:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003736:	2302      	movs	r3, #2
 8003738:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800373a:	2300      	movs	r3, #0
 800373c:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800373e:	2303      	movs	r3, #3
 8003740:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003742:	2307      	movs	r3, #7
 8003744:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003746:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800374a:	4619      	mov	r1, r3
 800374c:	4859      	ldr	r0, [pc, #356]	; (80038b4 <HAL_UART_MspInit+0x4bc>)
 800374e:	f001 fafb 	bl	8004d48 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003752:	4b59      	ldr	r3, [pc, #356]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 8003754:	4a59      	ldr	r2, [pc, #356]	; (80038bc <HAL_UART_MspInit+0x4c4>)
 8003756:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003758:	4b57      	ldr	r3, [pc, #348]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 800375a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800375e:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003760:	4b55      	ldr	r3, [pc, #340]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 8003762:	2200      	movs	r2, #0
 8003764:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003766:	4b54      	ldr	r3, [pc, #336]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 8003768:	2200      	movs	r2, #0
 800376a:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800376c:	4b52      	ldr	r3, [pc, #328]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 800376e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003772:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003774:	4b50      	ldr	r3, [pc, #320]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 8003776:	2200      	movs	r2, #0
 8003778:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800377a:	4b4f      	ldr	r3, [pc, #316]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 800377c:	2200      	movs	r2, #0
 800377e:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003780:	4b4d      	ldr	r3, [pc, #308]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 8003782:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003786:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003788:	4b4b      	ldr	r3, [pc, #300]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 800378a:	2200      	movs	r2, #0
 800378c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800378e:	4b4a      	ldr	r3, [pc, #296]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 8003790:	2200      	movs	r2, #0
 8003792:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003794:	4848      	ldr	r0, [pc, #288]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 8003796:	f000 fec9 	bl	800452c <HAL_DMA_Init>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d001      	beq.n	80037a4 <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 80037a0:	f7fe fd80 	bl	80022a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	4a44      	ldr	r2, [pc, #272]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 80037a8:	639a      	str	r2, [r3, #56]	; 0x38
 80037aa:	4a43      	ldr	r2, [pc, #268]	; (80038b8 <HAL_UART_MspInit+0x4c0>)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80037b0:	2200      	movs	r2, #0
 80037b2:	2100      	movs	r1, #0
 80037b4:	2026      	movs	r0, #38	; 0x26
 80037b6:	f000 fe8f 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80037ba:	2026      	movs	r0, #38	; 0x26
 80037bc:	f000 fea8 	bl	8004510 <HAL_NVIC_EnableIRQ>
}
 80037c0:	e068      	b.n	8003894 <HAL_UART_MspInit+0x49c>
  else if(huart->Instance==USART3)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	4a3e      	ldr	r2, [pc, #248]	; (80038c0 <HAL_UART_MspInit+0x4c8>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d163      	bne.n	8003894 <HAL_UART_MspInit+0x49c>
    __HAL_RCC_USART3_CLK_ENABLE();
 80037cc:	2300      	movs	r3, #0
 80037ce:	60fb      	str	r3, [r7, #12]
 80037d0:	4b33      	ldr	r3, [pc, #204]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 80037d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037d4:	4a32      	ldr	r2, [pc, #200]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 80037d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80037da:	6413      	str	r3, [r2, #64]	; 0x40
 80037dc:	4b30      	ldr	r3, [pc, #192]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 80037de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037e4:	60fb      	str	r3, [r7, #12]
 80037e6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80037e8:	2300      	movs	r3, #0
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	4b2c      	ldr	r3, [pc, #176]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 80037ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037f0:	4a2b      	ldr	r2, [pc, #172]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 80037f2:	f043 0302 	orr.w	r3, r3, #2
 80037f6:	6313      	str	r3, [r2, #48]	; 0x30
 80037f8:	4b29      	ldr	r3, [pc, #164]	; (80038a0 <HAL_UART_MspInit+0x4a8>)
 80037fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037fc:	f003 0302 	and.w	r3, r3, #2
 8003800:	60bb      	str	r3, [r7, #8]
 8003802:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003804:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003808:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800380a:	2302      	movs	r3, #2
 800380c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800380e:	2300      	movs	r3, #0
 8003810:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003812:	2303      	movs	r3, #3
 8003814:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003816:	2307      	movs	r3, #7
 8003818:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800381a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800381e:	4619      	mov	r1, r3
 8003820:	4828      	ldr	r0, [pc, #160]	; (80038c4 <HAL_UART_MspInit+0x4cc>)
 8003822:	f001 fa91 	bl	8004d48 <HAL_GPIO_Init>
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8003826:	4b28      	ldr	r3, [pc, #160]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 8003828:	4a28      	ldr	r2, [pc, #160]	; (80038cc <HAL_UART_MspInit+0x4d4>)
 800382a:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 800382c:	4b26      	ldr	r3, [pc, #152]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 800382e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003832:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003834:	4b24      	ldr	r3, [pc, #144]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 8003836:	2200      	movs	r2, #0
 8003838:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800383a:	4b23      	ldr	r3, [pc, #140]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 800383c:	2200      	movs	r2, #0
 800383e:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003840:	4b21      	ldr	r3, [pc, #132]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 8003842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003846:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003848:	4b1f      	ldr	r3, [pc, #124]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 800384a:	2200      	movs	r2, #0
 800384c:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800384e:	4b1e      	ldr	r3, [pc, #120]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 8003850:	2200      	movs	r2, #0
 8003852:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_CIRCULAR;
 8003854:	4b1c      	ldr	r3, [pc, #112]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 8003856:	f44f 7280 	mov.w	r2, #256	; 0x100
 800385a:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_LOW;
 800385c:	4b1a      	ldr	r3, [pc, #104]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 800385e:	2200      	movs	r2, #0
 8003860:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003862:	4b19      	ldr	r3, [pc, #100]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 8003864:	2200      	movs	r2, #0
 8003866:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 8003868:	4817      	ldr	r0, [pc, #92]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 800386a:	f000 fe5f 	bl	800452c <HAL_DMA_Init>
 800386e:	4603      	mov	r3, r0
 8003870:	2b00      	cmp	r3, #0
 8003872:	d001      	beq.n	8003878 <HAL_UART_MspInit+0x480>
      Error_Handler();
 8003874:	f7fe fd16 	bl	80022a4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a13      	ldr	r2, [pc, #76]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 800387c:	639a      	str	r2, [r3, #56]	; 0x38
 800387e:	4a12      	ldr	r2, [pc, #72]	; (80038c8 <HAL_UART_MspInit+0x4d0>)
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003884:	2200      	movs	r2, #0
 8003886:	2100      	movs	r1, #0
 8003888:	2027      	movs	r0, #39	; 0x27
 800388a:	f000 fe25 	bl	80044d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 800388e:	2027      	movs	r0, #39	; 0x27
 8003890:	f000 fe3e 	bl	8004510 <HAL_NVIC_EnableIRQ>
}
 8003894:	bf00      	nop
 8003896:	3748      	adds	r7, #72	; 0x48
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	40011000 	.word	0x40011000
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40020000 	.word	0x40020000
 80038a8:	20000830 	.word	0x20000830
 80038ac:	40026440 	.word	0x40026440
 80038b0:	40004400 	.word	0x40004400
 80038b4:	40020c00 	.word	0x40020c00
 80038b8:	20000580 	.word	0x20000580
 80038bc:	40026088 	.word	0x40026088
 80038c0:	40004800 	.word	0x40004800
 80038c4:	40020400 	.word	0x40020400
 80038c8:	20000670 	.word	0x20000670
 80038cc:	40026028 	.word	0x40026028

080038d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b08c      	sub	sp, #48	; 0x30
 80038d4:	af00      	add	r7, sp, #0
 80038d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80038d8:	2300      	movs	r3, #0
 80038da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80038dc:	2300      	movs	r3, #0
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 80038e0:	2200      	movs	r2, #0
 80038e2:	6879      	ldr	r1, [r7, #4]
 80038e4:	2037      	movs	r0, #55	; 0x37
 80038e6:	f000 fdf7 	bl	80044d8 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80038ea:	2037      	movs	r0, #55	; 0x37
 80038ec:	f000 fe10 	bl	8004510 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 80038f0:	2300      	movs	r3, #0
 80038f2:	60fb      	str	r3, [r7, #12]
 80038f4:	4b1f      	ldr	r3, [pc, #124]	; (8003974 <HAL_InitTick+0xa4>)
 80038f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038f8:	4a1e      	ldr	r2, [pc, #120]	; (8003974 <HAL_InitTick+0xa4>)
 80038fa:	f043 0320 	orr.w	r3, r3, #32
 80038fe:	6413      	str	r3, [r2, #64]	; 0x40
 8003900:	4b1c      	ldr	r3, [pc, #112]	; (8003974 <HAL_InitTick+0xa4>)
 8003902:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003904:	f003 0320 	and.w	r3, r3, #32
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800390c:	f107 0210 	add.w	r2, r7, #16
 8003910:	f107 0314 	add.w	r3, r7, #20
 8003914:	4611      	mov	r1, r2
 8003916:	4618      	mov	r0, r3
 8003918:	f002 f840 	bl	800599c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800391c:	f002 f816 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8003920:	4603      	mov	r3, r0
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003928:	4a13      	ldr	r2, [pc, #76]	; (8003978 <HAL_InitTick+0xa8>)
 800392a:	fba2 2303 	umull	r2, r3, r2, r3
 800392e:	0c9b      	lsrs	r3, r3, #18
 8003930:	3b01      	subs	r3, #1
 8003932:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003934:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_InitTick+0xac>)
 8003936:	4a12      	ldr	r2, [pc, #72]	; (8003980 <HAL_InitTick+0xb0>)
 8003938:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800393a:	4b10      	ldr	r3, [pc, #64]	; (800397c <HAL_InitTick+0xac>)
 800393c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003940:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003942:	4a0e      	ldr	r2, [pc, #56]	; (800397c <HAL_InitTick+0xac>)
 8003944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003946:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003948:	4b0c      	ldr	r3, [pc, #48]	; (800397c <HAL_InitTick+0xac>)
 800394a:	2200      	movs	r2, #0
 800394c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800394e:	4b0b      	ldr	r3, [pc, #44]	; (800397c <HAL_InitTick+0xac>)
 8003950:	2200      	movs	r2, #0
 8003952:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003954:	4809      	ldr	r0, [pc, #36]	; (800397c <HAL_InitTick+0xac>)
 8003956:	f002 fae3 	bl	8005f20 <HAL_TIM_Base_Init>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d104      	bne.n	800396a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003960:	4806      	ldr	r0, [pc, #24]	; (800397c <HAL_InitTick+0xac>)
 8003962:	f002 fb95 	bl	8006090 <HAL_TIM_Base_Start_IT>
 8003966:	4603      	mov	r3, r0
 8003968:	e000      	b.n	800396c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800396a:	2301      	movs	r3, #1
}
 800396c:	4618      	mov	r0, r3
 800396e:	3730      	adds	r7, #48	; 0x30
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	40023800 	.word	0x40023800
 8003978:	431bde83 	.word	0x431bde83
 800397c:	20000f10 	.word	0x20000f10
 8003980:	40001400 	.word	0x40001400

08003984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003988:	e7fe      	b.n	8003988 <NMI_Handler+0x4>

0800398a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800398a:	b480      	push	{r7}
 800398c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800398e:	e7fe      	b.n	800398e <HardFault_Handler+0x4>

08003990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003994:	e7fe      	b.n	8003994 <MemManage_Handler+0x4>

08003996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003996:	b480      	push	{r7}
 8003998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800399a:	e7fe      	b.n	800399a <BusFault_Handler+0x4>

0800399c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039a0:	e7fe      	b.n	80039a0 <UsageFault_Handler+0x4>

080039a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039a2:	b480      	push	{r7}
 80039a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039a6:	bf00      	nop
 80039a8:	46bd      	mov	sp, r7
 80039aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ae:	4770      	bx	lr

080039b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039b0:	b480      	push	{r7}
 80039b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039b4:	bf00      	nop
 80039b6:	46bd      	mov	sp, r7
 80039b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039bc:	4770      	bx	lr

080039be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039be:	b480      	push	{r7}
 80039c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039c2:	bf00      	nop
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80039d0:	bf00      	nop
 80039d2:	46bd      	mov	sp, r7
 80039d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d8:	4770      	bx	lr
	...

080039dc <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 80039e0:	4802      	ldr	r0, [pc, #8]	; (80039ec <DMA1_Stream0_IRQHandler+0x10>)
 80039e2:	f000 ff3b 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80039e6:	bf00      	nop
 80039e8:	bd80      	pop	{r7, pc}
 80039ea:	bf00      	nop
 80039ec:	20000a44 	.word	0x20000a44

080039f0 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80039f0:	b580      	push	{r7, lr}
 80039f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80039f4:	4802      	ldr	r0, [pc, #8]	; (8003a00 <DMA1_Stream1_IRQHandler+0x10>)
 80039f6:	f000 ff31 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80039fa:	bf00      	nop
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	20000670 	.word	0x20000670

08003a04 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003a08:	4802      	ldr	r0, [pc, #8]	; (8003a14 <DMA1_Stream2_IRQHandler+0x10>)
 8003a0a:	f000 ff27 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8003a0e:	bf00      	nop
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	20000520 	.word	0x20000520

08003a18 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a1c:	4802      	ldr	r0, [pc, #8]	; (8003a28 <DMA1_Stream5_IRQHandler+0x10>)
 8003a1e:	f000 ff1d 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a22:	bf00      	nop
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop
 8003a28:	20000580 	.word	0x20000580

08003a2c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8003a30:	4802      	ldr	r0, [pc, #8]	; (8003a3c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8003a32:	f002 fcb5 	bl	80063a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003a36:	bf00      	nop
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	bf00      	nop
 8003a3c:	200008d4 	.word	0x200008d4

08003a40 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0

	        	remoteUpdate(remoteBuffer + 16);
	        }
	    }*/
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <USART1_IRQHandler+0x10>)
 8003a46:	f003 fcff 	bl	8007448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	20000890 	.word	0x20000890

08003a54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b082      	sub	sp, #8
 8003a58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern unsigned char ch110[82];
    if(USART2->SR & 0x10)
 8003a5a:	4b12      	ldr	r3, [pc, #72]	; (8003aa4 <USART2_IRQHandler+0x50>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f003 0310 	and.w	r3, r3, #16
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d016      	beq.n	8003a94 <USART2_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8003a66:	2300      	movs	r3, #0
 8003a68:	607b      	str	r3, [r7, #4]
 8003a6a:	4b0f      	ldr	r3, [pc, #60]	; (8003aa8 <USART2_IRQHandler+0x54>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	607b      	str	r3, [r7, #4]
 8003a72:	4b0d      	ldr	r3, [pc, #52]	; (8003aa8 <USART2_IRQHandler+0x54>)
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	607b      	str	r3, [r7, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
        if(ch110[0] != 0x5a)
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	; (8003aac <USART2_IRQHandler+0x58>)
 8003a7e:	781b      	ldrb	r3, [r3, #0]
 8003a80:	2b5a      	cmp	r3, #90	; 0x5a
 8003a82:	d007      	beq.n	8003a94 <USART2_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart2);
 8003a84:	4808      	ldr	r0, [pc, #32]	; (8003aa8 <USART2_IRQHandler+0x54>)
 8003a86:	f003 fc83 	bl	8007390 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart2, ch110, 82);
 8003a8a:	2252      	movs	r2, #82	; 0x52
 8003a8c:	4907      	ldr	r1, [pc, #28]	; (8003aac <USART2_IRQHandler+0x58>)
 8003a8e:	4806      	ldr	r0, [pc, #24]	; (8003aa8 <USART2_IRQHandler+0x54>)
 8003a90:	f003 fc4e 	bl	8007330 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a94:	4804      	ldr	r0, [pc, #16]	; (8003aa8 <USART2_IRQHandler+0x54>)
 8003a96:	f003 fcd7 	bl	8007448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	3708      	adds	r7, #8
 8003a9e:	46bd      	mov	sp, r7
 8003aa0:	bd80      	pop	{r7, pc}
 8003aa2:	bf00      	nop
 8003aa4:	40004400 	.word	0x40004400
 8003aa8:	20000a00 	.word	0x20000a00
 8003aac:	200004a4 	.word	0x200004a4

08003ab0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

    extern unsigned char deepSensorBuff[20];
    if(USART3->SR & 0x10)
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <USART3_IRQHandler+0x5c>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	f003 0310 	and.w	r3, r3, #16
 8003abe:	2b00      	cmp	r3, #0
 8003ac0:	d01d      	beq.n	8003afe <USART3_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart3);
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	607b      	str	r3, [r7, #4]
 8003ac6:	4b12      	ldr	r3, [pc, #72]	; (8003b10 <USART3_IRQHandler+0x60>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	607b      	str	r3, [r7, #4]
 8003ace:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <USART3_IRQHandler+0x60>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	607b      	str	r3, [r7, #4]
 8003ad6:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart3);
 8003ad8:	480d      	ldr	r0, [pc, #52]	; (8003b10 <USART3_IRQHandler+0x60>)
 8003ada:	f003 fc59 	bl	8007390 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart3, deepSensorBuff, 20);
 8003ade:	2214      	movs	r2, #20
 8003ae0:	490c      	ldr	r1, [pc, #48]	; (8003b14 <USART3_IRQHandler+0x64>)
 8003ae2:	480b      	ldr	r0, [pc, #44]	; (8003b10 <USART3_IRQHandler+0x60>)
 8003ae4:	f003 fc24 	bl	8007330 <HAL_UART_Receive_DMA>
        if (0x54 == deepSensorBuff[0]&&0x3D == deepSensorBuff[1])
 8003ae8:	4b0a      	ldr	r3, [pc, #40]	; (8003b14 <USART3_IRQHandler+0x64>)
 8003aea:	781b      	ldrb	r3, [r3, #0]
 8003aec:	2b54      	cmp	r3, #84	; 0x54
 8003aee:	d106      	bne.n	8003afe <USART3_IRQHandler+0x4e>
 8003af0:	4b08      	ldr	r3, [pc, #32]	; (8003b14 <USART3_IRQHandler+0x64>)
 8003af2:	785b      	ldrb	r3, [r3, #1]
 8003af4:	2b3d      	cmp	r3, #61	; 0x3d
 8003af6:	d102      	bne.n	8003afe <USART3_IRQHandler+0x4e>
        {
        	void deepSensorUpdate(uint8_t * deepSensorBuff);

        	deepSensorUpdate(deepSensorBuff);
 8003af8:	4806      	ldr	r0, [pc, #24]	; (8003b14 <USART3_IRQHandler+0x64>)
 8003afa:	f7fd fc45 	bl	8001388 <deepSensorUpdate>
        }
    }
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003afe:	4804      	ldr	r0, [pc, #16]	; (8003b10 <USART3_IRQHandler+0x60>)
 8003b00:	f003 fca2 	bl	8007448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003b04:	bf00      	nop
 8003b06:	3708      	adds	r7, #8
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	40004800 	.word	0x40004800
 8003b10:	200006d0 	.word	0x200006d0
 8003b14:	2000050c 	.word	0x2000050c

08003b18 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8003b18:	b580      	push	{r7, lr}
 8003b1a:	b082      	sub	sp, #8
 8003b1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
    extern unsigned char raspiBuffer[82];
    if(UART4->SR & 0x10)
 8003b1e:	4b12      	ldr	r3, [pc, #72]	; (8003b68 <UART4_IRQHandler+0x50>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	f003 0310 	and.w	r3, r3, #16
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d016      	beq.n	8003b58 <UART4_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 8003b2a:	2300      	movs	r3, #0
 8003b2c:	607b      	str	r3, [r7, #4]
 8003b2e:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <UART4_IRQHandler+0x54>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	607b      	str	r3, [r7, #4]
 8003b36:	4b0d      	ldr	r3, [pc, #52]	; (8003b6c <UART4_IRQHandler+0x54>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	685b      	ldr	r3, [r3, #4]
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	687b      	ldr	r3, [r7, #4]
        if(raspiBuffer[0] != 0x5a)
 8003b40:	4b0b      	ldr	r3, [pc, #44]	; (8003b70 <UART4_IRQHandler+0x58>)
 8003b42:	781b      	ldrb	r3, [r3, #0]
 8003b44:	2b5a      	cmp	r3, #90	; 0x5a
 8003b46:	d007      	beq.n	8003b58 <UART4_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart4);
 8003b48:	4808      	ldr	r0, [pc, #32]	; (8003b6c <UART4_IRQHandler+0x54>)
 8003b4a:	f003 fc21 	bl	8007390 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart4, raspiBuffer, 12);
 8003b4e:	220c      	movs	r2, #12
 8003b50:	4907      	ldr	r1, [pc, #28]	; (8003b70 <UART4_IRQHandler+0x58>)
 8003b52:	4806      	ldr	r0, [pc, #24]	; (8003b6c <UART4_IRQHandler+0x54>)
 8003b54:	f003 fbec 	bl	8007330 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <UART4_IRQHandler+0x54>)
 8003b5a:	f003 fc75 	bl	8007448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003b5e:	bf00      	nop
 8003b60:	3708      	adds	r7, #8
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	40004c00 	.word	0x40004c00
 8003b6c:	2000091c 	.word	0x2000091c
 8003b70:	20000408 	.word	0x20000408

08003b74 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b082      	sub	sp, #8
 8003b78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

    extern unsigned char remoteBuffer[32];
    if(UART5->SR & 0x10)
 8003b7a:	4b15      	ldr	r3, [pc, #84]	; (8003bd0 <UART5_IRQHandler+0x5c>)
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d01d      	beq.n	8003bc2 <UART5_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8003b86:	2300      	movs	r3, #0
 8003b88:	607b      	str	r3, [r7, #4]
 8003b8a:	4b12      	ldr	r3, [pc, #72]	; (8003bd4 <UART5_IRQHandler+0x60>)
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	607b      	str	r3, [r7, #4]
 8003b92:	4b10      	ldr	r3, [pc, #64]	; (8003bd4 <UART5_IRQHandler+0x60>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	607b      	str	r3, [r7, #4]
 8003b9a:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart5);
 8003b9c:	480d      	ldr	r0, [pc, #52]	; (8003bd4 <UART5_IRQHandler+0x60>)
 8003b9e:	f003 fbf7 	bl	8007390 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart5, remoteBuffer, 25);
 8003ba2:	2219      	movs	r2, #25
 8003ba4:	490c      	ldr	r1, [pc, #48]	; (8003bd8 <UART5_IRQHandler+0x64>)
 8003ba6:	480b      	ldr	r0, [pc, #44]	; (8003bd4 <UART5_IRQHandler+0x60>)
 8003ba8:	f003 fbc2 	bl	8007330 <HAL_UART_Receive_DMA>
        if (0x5a == remoteBuffer[0]&&0xa5 == remoteBuffer[1])
 8003bac:	4b0a      	ldr	r3, [pc, #40]	; (8003bd8 <UART5_IRQHandler+0x64>)
 8003bae:	781b      	ldrb	r3, [r3, #0]
 8003bb0:	2b5a      	cmp	r3, #90	; 0x5a
 8003bb2:	d106      	bne.n	8003bc2 <UART5_IRQHandler+0x4e>
 8003bb4:	4b08      	ldr	r3, [pc, #32]	; (8003bd8 <UART5_IRQHandler+0x64>)
 8003bb6:	785b      	ldrb	r3, [r3, #1]
 8003bb8:	2ba5      	cmp	r3, #165	; 0xa5
 8003bba:	d102      	bne.n	8003bc2 <UART5_IRQHandler+0x4e>
        {
        	void remoteUpdate(uint8_t * remoteBuffer);

        	remoteUpdate(remoteBuffer);
 8003bbc:	4806      	ldr	r0, [pc, #24]	; (8003bd8 <UART5_IRQHandler+0x64>)
 8003bbe:	f7ff f84b 	bl	8002c58 <remoteUpdate>
        }
    }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003bc2:	4804      	ldr	r0, [pc, #16]	; (8003bd4 <UART5_IRQHandler+0x60>)
 8003bc4:	f003 fc40 	bl	8007448 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003bc8:	bf00      	nop
 8003bca:	3708      	adds	r7, #8
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	40005000 	.word	0x40005000
 8003bd4:	200007a4 	.word	0x200007a4
 8003bd8:	20000438 	.word	0x20000438

08003bdc <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003be0:	4802      	ldr	r0, [pc, #8]	; (8003bec <TIM7_IRQHandler+0x10>)
 8003be2:	f002 fbdd 	bl	80063a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003be6:	bf00      	nop
 8003be8:	bd80      	pop	{r7, pc}
 8003bea:	bf00      	nop
 8003bec:	20000f10 	.word	0x20000f10

08003bf0 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8003bf0:	b580      	push	{r7, lr}
 8003bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8003bf4:	4802      	ldr	r0, [pc, #8]	; (8003c00 <DMA2_Stream2_IRQHandler+0x10>)
 8003bf6:	f000 fe31 	bl	800485c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8003bfa:	bf00      	nop
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	20000830 	.word	0x20000830

08003c04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
	return 1;
 8003c08:	2301      	movs	r3, #1
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	46bd      	mov	sp, r7
 8003c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c12:	4770      	bx	lr

08003c14 <_kill>:

int _kill(int pid, int sig)
{
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b082      	sub	sp, #8
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003c1e:	f004 fa5b 	bl	80080d8 <__errno>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2216      	movs	r2, #22
 8003c26:	601a      	str	r2, [r3, #0]
	return -1;
 8003c28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3708      	adds	r7, #8
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}

08003c34 <_exit>:

void _exit (int status)
{
 8003c34:	b580      	push	{r7, lr}
 8003c36:	b082      	sub	sp, #8
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c40:	6878      	ldr	r0, [r7, #4]
 8003c42:	f7ff ffe7 	bl	8003c14 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003c46:	e7fe      	b.n	8003c46 <_exit+0x12>

08003c48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b086      	sub	sp, #24
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c54:	2300      	movs	r3, #0
 8003c56:	617b      	str	r3, [r7, #20]
 8003c58:	e00a      	b.n	8003c70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003c5a:	f3af 8000 	nop.w
 8003c5e:	4601      	mov	r1, r0
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	1c5a      	adds	r2, r3, #1
 8003c64:	60ba      	str	r2, [r7, #8]
 8003c66:	b2ca      	uxtb	r2, r1
 8003c68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	617b      	str	r3, [r7, #20]
 8003c70:	697a      	ldr	r2, [r7, #20]
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	dbf0      	blt.n	8003c5a <_read+0x12>
	}

return len;
 8003c78:	687b      	ldr	r3, [r7, #4]
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3718      	adds	r7, #24
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}

08003c82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8003c82:	b480      	push	{r7}
 8003c84:	b083      	sub	sp, #12
 8003c86:	af00      	add	r7, sp, #0
 8003c88:	6078      	str	r0, [r7, #4]
	return -1;
 8003c8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003c8e:	4618      	mov	r0, r3
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003ca4:	683b      	ldr	r3, [r7, #0]
 8003ca6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003caa:	605a      	str	r2, [r3, #4]
	return 0;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	370c      	adds	r7, #12
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr

08003cba <_isatty>:

int _isatty(int file)
{
 8003cba:	b480      	push	{r7}
 8003cbc:	b083      	sub	sp, #12
 8003cbe:	af00      	add	r7, sp, #0
 8003cc0:	6078      	str	r0, [r7, #4]
	return 1;
 8003cc2:	2301      	movs	r3, #1
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b085      	sub	sp, #20
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	60f8      	str	r0, [r7, #12]
 8003cd8:	60b9      	str	r1, [r7, #8]
 8003cda:	607a      	str	r2, [r7, #4]
	return 0;
 8003cdc:	2300      	movs	r3, #0
}
 8003cde:	4618      	mov	r0, r3
 8003ce0:	3714      	adds	r7, #20
 8003ce2:	46bd      	mov	sp, r7
 8003ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce8:	4770      	bx	lr
	...

08003cec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003cf4:	4a14      	ldr	r2, [pc, #80]	; (8003d48 <_sbrk+0x5c>)
 8003cf6:	4b15      	ldr	r3, [pc, #84]	; (8003d4c <_sbrk+0x60>)
 8003cf8:	1ad3      	subs	r3, r2, r3
 8003cfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003d00:	4b13      	ldr	r3, [pc, #76]	; (8003d50 <_sbrk+0x64>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003d08:	4b11      	ldr	r3, [pc, #68]	; (8003d50 <_sbrk+0x64>)
 8003d0a:	4a12      	ldr	r2, [pc, #72]	; (8003d54 <_sbrk+0x68>)
 8003d0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003d0e:	4b10      	ldr	r3, [pc, #64]	; (8003d50 <_sbrk+0x64>)
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	4413      	add	r3, r2
 8003d16:	693a      	ldr	r2, [r7, #16]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d207      	bcs.n	8003d2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003d1c:	f004 f9dc 	bl	80080d8 <__errno>
 8003d20:	4603      	mov	r3, r0
 8003d22:	220c      	movs	r2, #12
 8003d24:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003d26:	f04f 33ff 	mov.w	r3, #4294967295
 8003d2a:	e009      	b.n	8003d40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003d2c:	4b08      	ldr	r3, [pc, #32]	; (8003d50 <_sbrk+0x64>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003d32:	4b07      	ldr	r3, [pc, #28]	; (8003d50 <_sbrk+0x64>)
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4413      	add	r3, r2
 8003d3a:	4a05      	ldr	r2, [pc, #20]	; (8003d50 <_sbrk+0x64>)
 8003d3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003d3e:	68fb      	ldr	r3, [r7, #12]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	3718      	adds	r7, #24
 8003d44:	46bd      	mov	sp, r7
 8003d46:	bd80      	pop	{r7, pc}
 8003d48:	20020000 	.word	0x20020000
 8003d4c:	00000400 	.word	0x00000400
 8003d50:	20000478 	.word	0x20000478
 8003d54:	20000f70 	.word	0x20000f70

08003d58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003d58:	b480      	push	{r7}
 8003d5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d5c:	4b08      	ldr	r3, [pc, #32]	; (8003d80 <SystemInit+0x28>)
 8003d5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d62:	4a07      	ldr	r2, [pc, #28]	; (8003d80 <SystemInit+0x28>)
 8003d64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003d68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d6c:	4b04      	ldr	r3, [pc, #16]	; (8003d80 <SystemInit+0x28>)
 8003d6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003d72:	609a      	str	r2, [r3, #8]
#endif
}
 8003d74:	bf00      	nop
 8003d76:	46bd      	mov	sp, r7
 8003d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d7c:	4770      	bx	lr
 8003d7e:	bf00      	nop
 8003d80:	e000ed00 	.word	0xe000ed00

08003d84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003d84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003dbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003d88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003d8a:	e003      	b.n	8003d94 <LoopCopyDataInit>

08003d8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003d8c:	4b0c      	ldr	r3, [pc, #48]	; (8003dc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003d8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003d90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003d92:	3104      	adds	r1, #4

08003d94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003d94:	480b      	ldr	r0, [pc, #44]	; (8003dc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003d98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003d9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003d9c:	d3f6      	bcc.n	8003d8c <CopyDataInit>
  ldr  r2, =_sbss
 8003d9e:	4a0b      	ldr	r2, [pc, #44]	; (8003dcc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003da0:	e002      	b.n	8003da8 <LoopFillZerobss>

08003da2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003da2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003da4:	f842 3b04 	str.w	r3, [r2], #4

08003da8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003da8:	4b09      	ldr	r3, [pc, #36]	; (8003dd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003daa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003dac:	d3f9      	bcc.n	8003da2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003dae:	f7ff ffd3 	bl	8003d58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003db2:	f004 f997 	bl	80080e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003db6:	f7fd fb9b 	bl	80014f0 <main>
  bx  lr    
 8003dba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003dbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003dc0:	0800cf98 	.word	0x0800cf98
  ldr  r0, =_sdata
 8003dc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003dc8:	200003cc 	.word	0x200003cc
  ldr  r2, =_sbss
 8003dcc:	200003cc 	.word	0x200003cc
  ldr  r3, = _ebss
 8003dd0:	20000f6c 	.word	0x20000f6c

08003dd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003dd4:	e7fe      	b.n	8003dd4 <ADC_IRQHandler>
	...

08003dd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ddc:	4b0e      	ldr	r3, [pc, #56]	; (8003e18 <HAL_Init+0x40>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	4a0d      	ldr	r2, [pc, #52]	; (8003e18 <HAL_Init+0x40>)
 8003de2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003de6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003de8:	4b0b      	ldr	r3, [pc, #44]	; (8003e18 <HAL_Init+0x40>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	4a0a      	ldr	r2, [pc, #40]	; (8003e18 <HAL_Init+0x40>)
 8003dee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003df2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003df4:	4b08      	ldr	r3, [pc, #32]	; (8003e18 <HAL_Init+0x40>)
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	4a07      	ldr	r2, [pc, #28]	; (8003e18 <HAL_Init+0x40>)
 8003dfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003e00:	2003      	movs	r0, #3
 8003e02:	f000 fb5e 	bl	80044c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003e06:	2000      	movs	r0, #0
 8003e08:	f7ff fd62 	bl	80038d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003e0c:	f7ff f84c 	bl	8002ea8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003e10:	2300      	movs	r3, #0
}
 8003e12:	4618      	mov	r0, r3
 8003e14:	bd80      	pop	{r7, pc}
 8003e16:	bf00      	nop
 8003e18:	40023c00 	.word	0x40023c00

08003e1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003e20:	4b06      	ldr	r3, [pc, #24]	; (8003e3c <HAL_IncTick+0x20>)
 8003e22:	781b      	ldrb	r3, [r3, #0]
 8003e24:	461a      	mov	r2, r3
 8003e26:	4b06      	ldr	r3, [pc, #24]	; (8003e40 <HAL_IncTick+0x24>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	4413      	add	r3, r2
 8003e2c:	4a04      	ldr	r2, [pc, #16]	; (8003e40 <HAL_IncTick+0x24>)
 8003e2e:	6013      	str	r3, [r2, #0]
}
 8003e30:	bf00      	nop
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	200001f4 	.word	0x200001f4
 8003e40:	20000f58 	.word	0x20000f58

08003e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  return uwTick;
 8003e48:	4b03      	ldr	r3, [pc, #12]	; (8003e58 <HAL_GetTick+0x14>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000f58 	.word	0x20000f58

08003e5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	b084      	sub	sp, #16
 8003e60:	af00      	add	r7, sp, #0
 8003e62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003e64:	f7ff ffee 	bl	8003e44 <HAL_GetTick>
 8003e68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e74:	d005      	beq.n	8003e82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003e76:	4b0a      	ldr	r3, [pc, #40]	; (8003ea0 <HAL_Delay+0x44>)
 8003e78:	781b      	ldrb	r3, [r3, #0]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	4413      	add	r3, r2
 8003e80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003e82:	bf00      	nop
 8003e84:	f7ff ffde 	bl	8003e44 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	68fa      	ldr	r2, [r7, #12]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d8f7      	bhi.n	8003e84 <HAL_Delay+0x28>
  {
  }
}
 8003e94:	bf00      	nop
 8003e96:	bf00      	nop
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200001f4 	.word	0x200001f4

08003ea4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b084      	sub	sp, #16
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d101      	bne.n	8003eba <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e033      	b.n	8003f22 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d109      	bne.n	8003ed6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003ec2:	6878      	ldr	r0, [r7, #4]
 8003ec4:	f7ff f818 	bl	8002ef8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eda:	f003 0310 	and.w	r3, r3, #16
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d118      	bne.n	8003f14 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ee6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003eea:	f023 0302 	bic.w	r3, r3, #2
 8003eee:	f043 0202 	orr.w	r2, r3, #2
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f93a 	bl	8004170 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2200      	movs	r2, #0
 8003f00:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f023 0303 	bic.w	r3, r3, #3
 8003f0a:	f043 0201 	orr.w	r2, r3, #1
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	641a      	str	r2, [r3, #64]	; 0x40
 8003f12:	e001      	b.n	8003f18 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003f14:	2301      	movs	r3, #1
 8003f16:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2200      	movs	r2, #0
 8003f1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003f20:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f22:	4618      	mov	r0, r3
 8003f24:	3710      	adds	r7, #16
 8003f26:	46bd      	mov	sp, r7
 8003f28:	bd80      	pop	{r7, pc}
	...

08003f2c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b085      	sub	sp, #20
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
 8003f34:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003f36:	2300      	movs	r3, #0
 8003f38:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d101      	bne.n	8003f48 <HAL_ADC_ConfigChannel+0x1c>
 8003f44:	2302      	movs	r3, #2
 8003f46:	e105      	b.n	8004154 <HAL_ADC_ConfigChannel+0x228>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	2b09      	cmp	r3, #9
 8003f56:	d925      	bls.n	8003fa4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	68d9      	ldr	r1, [r3, #12]
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	b29b      	uxth	r3, r3
 8003f64:	461a      	mov	r2, r3
 8003f66:	4613      	mov	r3, r2
 8003f68:	005b      	lsls	r3, r3, #1
 8003f6a:	4413      	add	r3, r2
 8003f6c:	3b1e      	subs	r3, #30
 8003f6e:	2207      	movs	r2, #7
 8003f70:	fa02 f303 	lsl.w	r3, r2, r3
 8003f74:	43da      	mvns	r2, r3
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	400a      	ands	r2, r1
 8003f7c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68d9      	ldr	r1, [r3, #12]
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	689a      	ldr	r2, [r3, #8]
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	b29b      	uxth	r3, r3
 8003f8e:	4618      	mov	r0, r3
 8003f90:	4603      	mov	r3, r0
 8003f92:	005b      	lsls	r3, r3, #1
 8003f94:	4403      	add	r3, r0
 8003f96:	3b1e      	subs	r3, #30
 8003f98:	409a      	lsls	r2, r3
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	60da      	str	r2, [r3, #12]
 8003fa2:	e022      	b.n	8003fea <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6919      	ldr	r1, [r3, #16]
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	b29b      	uxth	r3, r3
 8003fb0:	461a      	mov	r2, r3
 8003fb2:	4613      	mov	r3, r2
 8003fb4:	005b      	lsls	r3, r3, #1
 8003fb6:	4413      	add	r3, r2
 8003fb8:	2207      	movs	r2, #7
 8003fba:	fa02 f303 	lsl.w	r3, r2, r3
 8003fbe:	43da      	mvns	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	400a      	ands	r2, r1
 8003fc6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	6919      	ldr	r1, [r3, #16]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	689a      	ldr	r2, [r3, #8]
 8003fd2:	683b      	ldr	r3, [r7, #0]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	b29b      	uxth	r3, r3
 8003fd8:	4618      	mov	r0, r3
 8003fda:	4603      	mov	r3, r0
 8003fdc:	005b      	lsls	r3, r3, #1
 8003fde:	4403      	add	r3, r0
 8003fe0:	409a      	lsls	r2, r3
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	430a      	orrs	r2, r1
 8003fe8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003fea:	683b      	ldr	r3, [r7, #0]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b06      	cmp	r3, #6
 8003ff0:	d824      	bhi.n	800403c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	685a      	ldr	r2, [r3, #4]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	009b      	lsls	r3, r3, #2
 8004000:	4413      	add	r3, r2
 8004002:	3b05      	subs	r3, #5
 8004004:	221f      	movs	r2, #31
 8004006:	fa02 f303 	lsl.w	r3, r2, r3
 800400a:	43da      	mvns	r2, r3
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	400a      	ands	r2, r1
 8004012:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800401a:	683b      	ldr	r3, [r7, #0]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	b29b      	uxth	r3, r3
 8004020:	4618      	mov	r0, r3
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685a      	ldr	r2, [r3, #4]
 8004026:	4613      	mov	r3, r2
 8004028:	009b      	lsls	r3, r3, #2
 800402a:	4413      	add	r3, r2
 800402c:	3b05      	subs	r3, #5
 800402e:	fa00 f203 	lsl.w	r2, r0, r3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	430a      	orrs	r2, r1
 8004038:	635a      	str	r2, [r3, #52]	; 0x34
 800403a:	e04c      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	685b      	ldr	r3, [r3, #4]
 8004040:	2b0c      	cmp	r3, #12
 8004042:	d824      	bhi.n	800408e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	4613      	mov	r3, r2
 8004050:	009b      	lsls	r3, r3, #2
 8004052:	4413      	add	r3, r2
 8004054:	3b23      	subs	r3, #35	; 0x23
 8004056:	221f      	movs	r2, #31
 8004058:	fa02 f303 	lsl.w	r3, r2, r3
 800405c:	43da      	mvns	r2, r3
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	400a      	ands	r2, r1
 8004064:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	b29b      	uxth	r3, r3
 8004072:	4618      	mov	r0, r3
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	685a      	ldr	r2, [r3, #4]
 8004078:	4613      	mov	r3, r2
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	3b23      	subs	r3, #35	; 0x23
 8004080:	fa00 f203 	lsl.w	r2, r0, r3
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	430a      	orrs	r2, r1
 800408a:	631a      	str	r2, [r3, #48]	; 0x30
 800408c:	e023      	b.n	80040d6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	4613      	mov	r3, r2
 800409a:	009b      	lsls	r3, r3, #2
 800409c:	4413      	add	r3, r2
 800409e:	3b41      	subs	r3, #65	; 0x41
 80040a0:	221f      	movs	r2, #31
 80040a2:	fa02 f303 	lsl.w	r3, r2, r3
 80040a6:	43da      	mvns	r2, r3
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	400a      	ands	r2, r1
 80040ae:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	4618      	mov	r0, r3
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	4613      	mov	r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	4413      	add	r3, r2
 80040c8:	3b41      	subs	r3, #65	; 0x41
 80040ca:	fa00 f203 	lsl.w	r2, r0, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80040d6:	4b22      	ldr	r3, [pc, #136]	; (8004160 <HAL_ADC_ConfigChannel+0x234>)
 80040d8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	4a21      	ldr	r2, [pc, #132]	; (8004164 <HAL_ADC_ConfigChannel+0x238>)
 80040e0:	4293      	cmp	r3, r2
 80040e2:	d109      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x1cc>
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b12      	cmp	r3, #18
 80040ea:	d105      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	685b      	ldr	r3, [r3, #4]
 80040f0:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	4a19      	ldr	r2, [pc, #100]	; (8004164 <HAL_ADC_ConfigChannel+0x238>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d123      	bne.n	800414a <HAL_ADC_ConfigChannel+0x21e>
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	2b10      	cmp	r3, #16
 8004108:	d003      	beq.n	8004112 <HAL_ADC_ConfigChannel+0x1e6>
 800410a:	683b      	ldr	r3, [r7, #0]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	2b11      	cmp	r3, #17
 8004110:	d11b      	bne.n	800414a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800411e:	683b      	ldr	r3, [r7, #0]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	2b10      	cmp	r3, #16
 8004124:	d111      	bne.n	800414a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004126:	4b10      	ldr	r3, [pc, #64]	; (8004168 <HAL_ADC_ConfigChannel+0x23c>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	4a10      	ldr	r2, [pc, #64]	; (800416c <HAL_ADC_ConfigChannel+0x240>)
 800412c:	fba2 2303 	umull	r2, r3, r2, r3
 8004130:	0c9a      	lsrs	r2, r3, #18
 8004132:	4613      	mov	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4413      	add	r3, r2
 8004138:	005b      	lsls	r3, r3, #1
 800413a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800413c:	e002      	b.n	8004144 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3b01      	subs	r3, #1
 8004142:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d1f9      	bne.n	800413e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2200      	movs	r2, #0
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004152:	2300      	movs	r3, #0
}
 8004154:	4618      	mov	r0, r3
 8004156:	3714      	adds	r7, #20
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr
 8004160:	40012300 	.word	0x40012300
 8004164:	40012000 	.word	0x40012000
 8004168:	200001ec 	.word	0x200001ec
 800416c:	431bde83 	.word	0x431bde83

08004170 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004170:	b480      	push	{r7}
 8004172:	b085      	sub	sp, #20
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8004178:	4b79      	ldr	r3, [pc, #484]	; (8004360 <ADC_Init+0x1f0>)
 800417a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	685b      	ldr	r3, [r3, #4]
 8004180:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	685a      	ldr	r2, [r3, #4]
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	685b      	ldr	r3, [r3, #4]
 8004190:	431a      	orrs	r2, r3
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80041a4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	6859      	ldr	r1, [r3, #4]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	691b      	ldr	r3, [r3, #16]
 80041b0:	021a      	lsls	r2, r3, #8
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	430a      	orrs	r2, r1
 80041b8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80041c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6859      	ldr	r1, [r3, #4]
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	689a      	ldr	r2, [r3, #8]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	430a      	orrs	r2, r1
 80041da:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	689a      	ldr	r2, [r3, #8]
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80041ea:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	6899      	ldr	r1, [r3, #8]
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	68da      	ldr	r2, [r3, #12]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004202:	4a58      	ldr	r2, [pc, #352]	; (8004364 <ADC_Init+0x1f4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d022      	beq.n	800424e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	689a      	ldr	r2, [r3, #8]
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004216:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	6899      	ldr	r1, [r3, #8]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	430a      	orrs	r2, r1
 8004228:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	689a      	ldr	r2, [r3, #8]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004238:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	6899      	ldr	r1, [r3, #8]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	609a      	str	r2, [r3, #8]
 800424c:	e00f      	b.n	800426e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	689a      	ldr	r2, [r3, #8]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800425c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	689a      	ldr	r2, [r3, #8]
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800426c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	689a      	ldr	r2, [r3, #8]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0202 	bic.w	r2, r2, #2
 800427c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	6899      	ldr	r1, [r3, #8]
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	7e1b      	ldrb	r3, [r3, #24]
 8004288:	005a      	lsls	r2, r3, #1
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	430a      	orrs	r2, r1
 8004290:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d01b      	beq.n	80042d4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	685a      	ldr	r2, [r3, #4]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042aa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	685a      	ldr	r2, [r3, #4]
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80042ba:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	6859      	ldr	r1, [r3, #4]
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c6:	3b01      	subs	r3, #1
 80042c8:	035a      	lsls	r2, r3, #13
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	605a      	str	r2, [r3, #4]
 80042d2:	e007      	b.n	80042e4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	685a      	ldr	r2, [r3, #4]
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042e2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80042f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	69db      	ldr	r3, [r3, #28]
 80042fe:	3b01      	subs	r3, #1
 8004300:	051a      	lsls	r2, r3, #20
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	689a      	ldr	r2, [r3, #8]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8004318:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	6899      	ldr	r1, [r3, #8]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004326:	025a      	lsls	r2, r3, #9
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	430a      	orrs	r2, r1
 800432e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	689a      	ldr	r2, [r3, #8]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800433e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6899      	ldr	r1, [r3, #8]
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	695b      	ldr	r3, [r3, #20]
 800434a:	029a      	lsls	r2, r3, #10
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	430a      	orrs	r2, r1
 8004352:	609a      	str	r2, [r3, #8]
}
 8004354:	bf00      	nop
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	40012300 	.word	0x40012300
 8004364:	0f000001 	.word	0x0f000001

08004368 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004368:	b480      	push	{r7}
 800436a:	b085      	sub	sp, #20
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f003 0307 	and.w	r3, r3, #7
 8004376:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004378:	4b0c      	ldr	r3, [pc, #48]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800437a:	68db      	ldr	r3, [r3, #12]
 800437c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800437e:	68ba      	ldr	r2, [r7, #8]
 8004380:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004384:	4013      	ands	r3, r2
 8004386:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004390:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004394:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004398:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800439a:	4a04      	ldr	r2, [pc, #16]	; (80043ac <__NVIC_SetPriorityGrouping+0x44>)
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	60d3      	str	r3, [r2, #12]
}
 80043a0:	bf00      	nop
 80043a2:	3714      	adds	r7, #20
 80043a4:	46bd      	mov	sp, r7
 80043a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043aa:	4770      	bx	lr
 80043ac:	e000ed00 	.word	0xe000ed00

080043b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80043b0:	b480      	push	{r7}
 80043b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043b4:	4b04      	ldr	r3, [pc, #16]	; (80043c8 <__NVIC_GetPriorityGrouping+0x18>)
 80043b6:	68db      	ldr	r3, [r3, #12]
 80043b8:	0a1b      	lsrs	r3, r3, #8
 80043ba:	f003 0307 	and.w	r3, r3, #7
}
 80043be:	4618      	mov	r0, r3
 80043c0:	46bd      	mov	sp, r7
 80043c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c6:	4770      	bx	lr
 80043c8:	e000ed00 	.word	0xe000ed00

080043cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b083      	sub	sp, #12
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	4603      	mov	r3, r0
 80043d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80043d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	db0b      	blt.n	80043f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80043de:	79fb      	ldrb	r3, [r7, #7]
 80043e0:	f003 021f 	and.w	r2, r3, #31
 80043e4:	4907      	ldr	r1, [pc, #28]	; (8004404 <__NVIC_EnableIRQ+0x38>)
 80043e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043ea:	095b      	lsrs	r3, r3, #5
 80043ec:	2001      	movs	r0, #1
 80043ee:	fa00 f202 	lsl.w	r2, r0, r2
 80043f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	e000e100 	.word	0xe000e100

08004408 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004408:	b480      	push	{r7}
 800440a:	b083      	sub	sp, #12
 800440c:	af00      	add	r7, sp, #0
 800440e:	4603      	mov	r3, r0
 8004410:	6039      	str	r1, [r7, #0]
 8004412:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004414:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004418:	2b00      	cmp	r3, #0
 800441a:	db0a      	blt.n	8004432 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	b2da      	uxtb	r2, r3
 8004420:	490c      	ldr	r1, [pc, #48]	; (8004454 <__NVIC_SetPriority+0x4c>)
 8004422:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004426:	0112      	lsls	r2, r2, #4
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	440b      	add	r3, r1
 800442c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004430:	e00a      	b.n	8004448 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	b2da      	uxtb	r2, r3
 8004436:	4908      	ldr	r1, [pc, #32]	; (8004458 <__NVIC_SetPriority+0x50>)
 8004438:	79fb      	ldrb	r3, [r7, #7]
 800443a:	f003 030f 	and.w	r3, r3, #15
 800443e:	3b04      	subs	r3, #4
 8004440:	0112      	lsls	r2, r2, #4
 8004442:	b2d2      	uxtb	r2, r2
 8004444:	440b      	add	r3, r1
 8004446:	761a      	strb	r2, [r3, #24]
}
 8004448:	bf00      	nop
 800444a:	370c      	adds	r7, #12
 800444c:	46bd      	mov	sp, r7
 800444e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004452:	4770      	bx	lr
 8004454:	e000e100 	.word	0xe000e100
 8004458:	e000ed00 	.word	0xe000ed00

0800445c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800445c:	b480      	push	{r7}
 800445e:	b089      	sub	sp, #36	; 0x24
 8004460:	af00      	add	r7, sp, #0
 8004462:	60f8      	str	r0, [r7, #12]
 8004464:	60b9      	str	r1, [r7, #8]
 8004466:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f003 0307 	and.w	r3, r3, #7
 800446e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004470:	69fb      	ldr	r3, [r7, #28]
 8004472:	f1c3 0307 	rsb	r3, r3, #7
 8004476:	2b04      	cmp	r3, #4
 8004478:	bf28      	it	cs
 800447a:	2304      	movcs	r3, #4
 800447c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	3304      	adds	r3, #4
 8004482:	2b06      	cmp	r3, #6
 8004484:	d902      	bls.n	800448c <NVIC_EncodePriority+0x30>
 8004486:	69fb      	ldr	r3, [r7, #28]
 8004488:	3b03      	subs	r3, #3
 800448a:	e000      	b.n	800448e <NVIC_EncodePriority+0x32>
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004490:	f04f 32ff 	mov.w	r2, #4294967295
 8004494:	69bb      	ldr	r3, [r7, #24]
 8004496:	fa02 f303 	lsl.w	r3, r2, r3
 800449a:	43da      	mvns	r2, r3
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	401a      	ands	r2, r3
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80044a4:	f04f 31ff 	mov.w	r1, #4294967295
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	fa01 f303 	lsl.w	r3, r1, r3
 80044ae:	43d9      	mvns	r1, r3
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80044b4:	4313      	orrs	r3, r2
         );
}
 80044b6:	4618      	mov	r0, r3
 80044b8:	3724      	adds	r7, #36	; 0x24
 80044ba:	46bd      	mov	sp, r7
 80044bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c0:	4770      	bx	lr

080044c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044c2:	b580      	push	{r7, lr}
 80044c4:	b082      	sub	sp, #8
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80044ca:	6878      	ldr	r0, [r7, #4]
 80044cc:	f7ff ff4c 	bl	8004368 <__NVIC_SetPriorityGrouping>
}
 80044d0:	bf00      	nop
 80044d2:	3708      	adds	r7, #8
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}

080044d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80044d8:	b580      	push	{r7, lr}
 80044da:	b086      	sub	sp, #24
 80044dc:	af00      	add	r7, sp, #0
 80044de:	4603      	mov	r3, r0
 80044e0:	60b9      	str	r1, [r7, #8]
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80044e6:	2300      	movs	r3, #0
 80044e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80044ea:	f7ff ff61 	bl	80043b0 <__NVIC_GetPriorityGrouping>
 80044ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80044f0:	687a      	ldr	r2, [r7, #4]
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	6978      	ldr	r0, [r7, #20]
 80044f6:	f7ff ffb1 	bl	800445c <NVIC_EncodePriority>
 80044fa:	4602      	mov	r2, r0
 80044fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004500:	4611      	mov	r1, r2
 8004502:	4618      	mov	r0, r3
 8004504:	f7ff ff80 	bl	8004408 <__NVIC_SetPriority>
}
 8004508:	bf00      	nop
 800450a:	3718      	adds	r7, #24
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	4603      	mov	r3, r0
 8004518:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800451a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800451e:	4618      	mov	r0, r3
 8004520:	f7ff ff54 	bl	80043cc <__NVIC_EnableIRQ>
}
 8004524:	bf00      	nop
 8004526:	3708      	adds	r7, #8
 8004528:	46bd      	mov	sp, r7
 800452a:	bd80      	pop	{r7, pc}

0800452c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b086      	sub	sp, #24
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004534:	2300      	movs	r3, #0
 8004536:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004538:	f7ff fc84 	bl	8003e44 <HAL_GetTick>
 800453c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	2b00      	cmp	r3, #0
 8004542:	d101      	bne.n	8004548 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	e099      	b.n	800467c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2200      	movs	r2, #0
 800454c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2202      	movs	r2, #2
 8004554:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004568:	e00f      	b.n	800458a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800456a:	f7ff fc6b 	bl	8003e44 <HAL_GetTick>
 800456e:	4602      	mov	r2, r0
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	1ad3      	subs	r3, r2, r3
 8004574:	2b05      	cmp	r3, #5
 8004576:	d908      	bls.n	800458a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2220      	movs	r2, #32
 800457c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2203      	movs	r2, #3
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8004586:	2303      	movs	r3, #3
 8004588:	e078      	b.n	800467c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f003 0301 	and.w	r3, r3, #1
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e8      	bne.n	800456a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80045a0:	697a      	ldr	r2, [r7, #20]
 80045a2:	4b38      	ldr	r3, [pc, #224]	; (8004684 <HAL_DMA_Init+0x158>)
 80045a4:	4013      	ands	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	691b      	ldr	r3, [r3, #16]
 80045bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80045c2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80045ce:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	6a1b      	ldr	r3, [r3, #32]
 80045d4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80045d6:	697a      	ldr	r2, [r7, #20]
 80045d8:	4313      	orrs	r3, r2
 80045da:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e0:	2b04      	cmp	r3, #4
 80045e2:	d107      	bne.n	80045f4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ec:	4313      	orrs	r3, r2
 80045ee:	697a      	ldr	r2, [r7, #20]
 80045f0:	4313      	orrs	r3, r2
 80045f2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	695b      	ldr	r3, [r3, #20]
 8004602:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0307 	bic.w	r3, r3, #7
 800460a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004610:	697a      	ldr	r2, [r7, #20]
 8004612:	4313      	orrs	r3, r2
 8004614:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b04      	cmp	r3, #4
 800461c:	d117      	bne.n	800464e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004622:	697a      	ldr	r2, [r7, #20]
 8004624:	4313      	orrs	r3, r2
 8004626:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d00e      	beq.n	800464e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f000 fb0d 	bl	8004c50 <DMA_CheckFifoParam>
 8004636:	4603      	mov	r3, r0
 8004638:	2b00      	cmp	r3, #0
 800463a:	d008      	beq.n	800464e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2240      	movs	r2, #64	; 0x40
 8004640:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2201      	movs	r2, #1
 8004646:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800464a:	2301      	movs	r3, #1
 800464c:	e016      	b.n	800467c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004656:	6878      	ldr	r0, [r7, #4]
 8004658:	f000 fac4 	bl	8004be4 <DMA_CalcBaseAndBitshift>
 800465c:	4603      	mov	r3, r0
 800465e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004664:	223f      	movs	r2, #63	; 0x3f
 8004666:	409a      	lsls	r2, r3
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2200      	movs	r2, #0
 8004670:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800467a:	2300      	movs	r3, #0
}
 800467c:	4618      	mov	r0, r3
 800467e:	3718      	adds	r7, #24
 8004680:	46bd      	mov	sp, r7
 8004682:	bd80      	pop	{r7, pc}
 8004684:	f010803f 	.word	0xf010803f

08004688 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
 8004694:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004696:	2300      	movs	r3, #0
 8004698:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800469e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80046a6:	2b01      	cmp	r3, #1
 80046a8:	d101      	bne.n	80046ae <HAL_DMA_Start_IT+0x26>
 80046aa:	2302      	movs	r3, #2
 80046ac:	e040      	b.n	8004730 <HAL_DMA_Start_IT+0xa8>
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	2201      	movs	r2, #1
 80046b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	2b01      	cmp	r3, #1
 80046c0:	d12f      	bne.n	8004722 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	2202      	movs	r2, #2
 80046c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80046ca:	68fb      	ldr	r3, [r7, #12]
 80046cc:	2200      	movs	r2, #0
 80046ce:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80046d0:	683b      	ldr	r3, [r7, #0]
 80046d2:	687a      	ldr	r2, [r7, #4]
 80046d4:	68b9      	ldr	r1, [r7, #8]
 80046d6:	68f8      	ldr	r0, [r7, #12]
 80046d8:	f000 fa56 	bl	8004b88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046e0:	223f      	movs	r2, #63	; 0x3f
 80046e2:	409a      	lsls	r2, r3
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	681a      	ldr	r2, [r3, #0]
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f042 0216 	orr.w	r2, r2, #22
 80046f6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0208 	orr.w	r2, r2, #8
 800470e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f042 0201 	orr.w	r2, r2, #1
 800471e:	601a      	str	r2, [r3, #0]
 8004720:	e005      	b.n	800472e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2200      	movs	r2, #0
 8004726:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800472a:	2302      	movs	r3, #2
 800472c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800472e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004730:	4618      	mov	r0, r3
 8004732:	3718      	adds	r7, #24
 8004734:	46bd      	mov	sp, r7
 8004736:	bd80      	pop	{r7, pc}

08004738 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004744:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004746:	f7ff fb7d 	bl	8003e44 <HAL_GetTick>
 800474a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004752:	b2db      	uxtb	r3, r3
 8004754:	2b02      	cmp	r3, #2
 8004756:	d008      	beq.n	800476a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	2280      	movs	r2, #128	; 0x80
 800475c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2200      	movs	r2, #0
 8004762:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	e052      	b.n	8004810 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f022 0216 	bic.w	r2, r2, #22
 8004778:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	695a      	ldr	r2, [r3, #20]
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004788:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800478e:	2b00      	cmp	r3, #0
 8004790:	d103      	bne.n	800479a <HAL_DMA_Abort+0x62>
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004796:	2b00      	cmp	r3, #0
 8004798:	d007      	beq.n	80047aa <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	681a      	ldr	r2, [r3, #0]
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f022 0208 	bic.w	r2, r2, #8
 80047a8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	681a      	ldr	r2, [r3, #0]
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	f022 0201 	bic.w	r2, r2, #1
 80047b8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ba:	e013      	b.n	80047e4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047bc:	f7ff fb42 	bl	8003e44 <HAL_GetTick>
 80047c0:	4602      	mov	r2, r0
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	1ad3      	subs	r3, r2, r3
 80047c6:	2b05      	cmp	r3, #5
 80047c8:	d90c      	bls.n	80047e4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2220      	movs	r2, #32
 80047ce:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2203      	movs	r2, #3
 80047dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80047e0:	2303      	movs	r3, #3
 80047e2:	e015      	b.n	8004810 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	f003 0301 	and.w	r3, r3, #1
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d1e4      	bne.n	80047bc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047f6:	223f      	movs	r2, #63	; 0x3f
 80047f8:	409a      	lsls	r2, r3
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	2201      	movs	r2, #1
 800480a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800480e:	2300      	movs	r3, #0
}
 8004810:	4618      	mov	r0, r3
 8004812:	3710      	adds	r7, #16
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004818:	b480      	push	{r7}
 800481a:	b083      	sub	sp, #12
 800481c:	af00      	add	r7, sp, #0
 800481e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004826:	b2db      	uxtb	r3, r3
 8004828:	2b02      	cmp	r3, #2
 800482a:	d004      	beq.n	8004836 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2280      	movs	r2, #128	; 0x80
 8004830:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004832:	2301      	movs	r3, #1
 8004834:	e00c      	b.n	8004850 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2205      	movs	r2, #5
 800483a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	681a      	ldr	r2, [r3, #0]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f022 0201 	bic.w	r2, r2, #1
 800484c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800484e:	2300      	movs	r3, #0
}
 8004850:	4618      	mov	r0, r3
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr

0800485c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800485c:	b580      	push	{r7, lr}
 800485e:	b086      	sub	sp, #24
 8004860:	af00      	add	r7, sp, #0
 8004862:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004864:	2300      	movs	r3, #0
 8004866:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004868:	4b92      	ldr	r3, [pc, #584]	; (8004ab4 <HAL_DMA_IRQHandler+0x258>)
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	4a92      	ldr	r2, [pc, #584]	; (8004ab8 <HAL_DMA_IRQHandler+0x25c>)
 800486e:	fba2 2303 	umull	r2, r3, r2, r3
 8004872:	0a9b      	lsrs	r3, r3, #10
 8004874:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800487a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800487c:	693b      	ldr	r3, [r7, #16]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004886:	2208      	movs	r2, #8
 8004888:	409a      	lsls	r2, r3
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4013      	ands	r3, r2
 800488e:	2b00      	cmp	r3, #0
 8004890:	d01a      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	d013      	beq.n	80048c8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f022 0204 	bic.w	r2, r2, #4
 80048ae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048b4:	2208      	movs	r2, #8
 80048b6:	409a      	lsls	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048c0:	f043 0201 	orr.w	r2, r3, #1
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048cc:	2201      	movs	r2, #1
 80048ce:	409a      	lsls	r2, r3
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	4013      	ands	r3, r2
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d012      	beq.n	80048fe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	695b      	ldr	r3, [r3, #20]
 80048de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d00b      	beq.n	80048fe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ea:	2201      	movs	r2, #1
 80048ec:	409a      	lsls	r2, r3
 80048ee:	693b      	ldr	r3, [r7, #16]
 80048f0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048f6:	f043 0202 	orr.w	r2, r3, #2
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004902:	2204      	movs	r2, #4
 8004904:	409a      	lsls	r2, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	4013      	ands	r3, r2
 800490a:	2b00      	cmp	r3, #0
 800490c:	d012      	beq.n	8004934 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0302 	and.w	r3, r3, #2
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004920:	2204      	movs	r2, #4
 8004922:	409a      	lsls	r2, r3
 8004924:	693b      	ldr	r3, [r7, #16]
 8004926:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800492c:	f043 0204 	orr.w	r2, r3, #4
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004938:	2210      	movs	r2, #16
 800493a:	409a      	lsls	r2, r3
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	4013      	ands	r3, r2
 8004940:	2b00      	cmp	r3, #0
 8004942:	d043      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f003 0308 	and.w	r3, r3, #8
 800494e:	2b00      	cmp	r3, #0
 8004950:	d03c      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004956:	2210      	movs	r2, #16
 8004958:	409a      	lsls	r2, r3
 800495a:	693b      	ldr	r3, [r7, #16]
 800495c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004968:	2b00      	cmp	r3, #0
 800496a:	d018      	beq.n	800499e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004976:	2b00      	cmp	r3, #0
 8004978:	d108      	bne.n	800498c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800497e:	2b00      	cmp	r3, #0
 8004980:	d024      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	4798      	blx	r3
 800498a:	e01f      	b.n	80049cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004990:	2b00      	cmp	r3, #0
 8004992:	d01b      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	4798      	blx	r3
 800499c:	e016      	b.n	80049cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d107      	bne.n	80049bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0208 	bic.w	r2, r2, #8
 80049ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049c8:	6878      	ldr	r0, [r7, #4]
 80049ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049d0:	2220      	movs	r2, #32
 80049d2:	409a      	lsls	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4013      	ands	r3, r2
 80049d8:	2b00      	cmp	r3, #0
 80049da:	f000 808e 	beq.w	8004afa <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	f003 0310 	and.w	r3, r3, #16
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	f000 8086 	beq.w	8004afa <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049f2:	2220      	movs	r2, #32
 80049f4:	409a      	lsls	r2, r3
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a00:	b2db      	uxtb	r3, r3
 8004a02:	2b05      	cmp	r3, #5
 8004a04:	d136      	bne.n	8004a74 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f022 0216 	bic.w	r2, r2, #22
 8004a14:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	695a      	ldr	r2, [r3, #20]
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004a24:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d103      	bne.n	8004a36 <HAL_DMA_IRQHandler+0x1da>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d007      	beq.n	8004a46 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	681a      	ldr	r2, [r3, #0]
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f022 0208 	bic.w	r2, r2, #8
 8004a44:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a4a:	223f      	movs	r2, #63	; 0x3f
 8004a4c:	409a      	lsls	r2, r3
 8004a4e:	693b      	ldr	r3, [r7, #16]
 8004a50:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	2200      	movs	r2, #0
 8004a56:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	2201      	movs	r2, #1
 8004a5e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d07d      	beq.n	8004b66 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
        }
        return;
 8004a72:	e078      	b.n	8004b66 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d01c      	beq.n	8004abc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d108      	bne.n	8004aa2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d030      	beq.n	8004afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004a9c:	6878      	ldr	r0, [r7, #4]
 8004a9e:	4798      	blx	r3
 8004aa0:	e02b      	b.n	8004afa <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d027      	beq.n	8004afa <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aae:	6878      	ldr	r0, [r7, #4]
 8004ab0:	4798      	blx	r3
 8004ab2:	e022      	b.n	8004afa <HAL_DMA_IRQHandler+0x29e>
 8004ab4:	200001ec 	.word	0x200001ec
 8004ab8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10f      	bne.n	8004aea <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f022 0210 	bic.w	r2, r2, #16
 8004ad8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2201      	movs	r2, #1
 8004ae6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d003      	beq.n	8004afa <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d032      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b06:	f003 0301 	and.w	r3, r3, #1
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d022      	beq.n	8004b54 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2205      	movs	r2, #5
 8004b12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f022 0201 	bic.w	r2, r2, #1
 8004b24:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004b26:	68bb      	ldr	r3, [r7, #8]
 8004b28:	3301      	adds	r3, #1
 8004b2a:	60bb      	str	r3, [r7, #8]
 8004b2c:	697a      	ldr	r2, [r7, #20]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d307      	bcc.n	8004b42 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f003 0301 	and.w	r3, r3, #1
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1f2      	bne.n	8004b26 <HAL_DMA_IRQHandler+0x2ca>
 8004b40:	e000      	b.n	8004b44 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004b42:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2200      	movs	r2, #0
 8004b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2201      	movs	r2, #1
 8004b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d005      	beq.n	8004b68 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b60:	6878      	ldr	r0, [r7, #4]
 8004b62:	4798      	blx	r3
 8004b64:	e000      	b.n	8004b68 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004b66:	bf00      	nop
    }
  }
}
 8004b68:	3718      	adds	r7, #24
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	bd80      	pop	{r7, pc}
 8004b6e:	bf00      	nop

08004b70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004b70:	b480      	push	{r7}
 8004b72:	b083      	sub	sp, #12
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004b7c:	4618      	mov	r0, r3
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	681a      	ldr	r2, [r3, #0]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ba4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	683a      	ldr	r2, [r7, #0]
 8004bac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2b40      	cmp	r3, #64	; 0x40
 8004bb4:	d108      	bne.n	8004bc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004bc6:	e007      	b.n	8004bd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	687a      	ldr	r2, [r7, #4]
 8004bd6:	60da      	str	r2, [r3, #12]
}
 8004bd8:	bf00      	nop
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr

08004be4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004be4:	b480      	push	{r7}
 8004be6:	b085      	sub	sp, #20
 8004be8:	af00      	add	r7, sp, #0
 8004bea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	3b10      	subs	r3, #16
 8004bf4:	4a14      	ldr	r2, [pc, #80]	; (8004c48 <DMA_CalcBaseAndBitshift+0x64>)
 8004bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004bfa:	091b      	lsrs	r3, r3, #4
 8004bfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004bfe:	4a13      	ldr	r2, [pc, #76]	; (8004c4c <DMA_CalcBaseAndBitshift+0x68>)
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	4413      	add	r3, r2
 8004c04:	781b      	ldrb	r3, [r3, #0]
 8004c06:	461a      	mov	r2, r3
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	2b03      	cmp	r3, #3
 8004c10:	d909      	bls.n	8004c26 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c1a:	f023 0303 	bic.w	r3, r3, #3
 8004c1e:	1d1a      	adds	r2, r3, #4
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	659a      	str	r2, [r3, #88]	; 0x58
 8004c24:	e007      	b.n	8004c36 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004c2e:	f023 0303 	bic.w	r3, r3, #3
 8004c32:	687a      	ldr	r2, [r7, #4]
 8004c34:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3714      	adds	r7, #20
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	aaaaaaab 	.word	0xaaaaaaab
 8004c4c:	0800cb1c 	.word	0x0800cb1c

08004c50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004c50:	b480      	push	{r7}
 8004c52:	b085      	sub	sp, #20
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c58:	2300      	movs	r3, #0
 8004c5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	699b      	ldr	r3, [r3, #24]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d11f      	bne.n	8004caa <DMA_CheckFifoParam+0x5a>
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	2b03      	cmp	r3, #3
 8004c6e:	d856      	bhi.n	8004d1e <DMA_CheckFifoParam+0xce>
 8004c70:	a201      	add	r2, pc, #4	; (adr r2, 8004c78 <DMA_CheckFifoParam+0x28>)
 8004c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c76:	bf00      	nop
 8004c78:	08004c89 	.word	0x08004c89
 8004c7c:	08004c9b 	.word	0x08004c9b
 8004c80:	08004c89 	.word	0x08004c89
 8004c84:	08004d1f 	.word	0x08004d1f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d046      	beq.n	8004d22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004c94:	2301      	movs	r3, #1
 8004c96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004c98:	e043      	b.n	8004d22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004ca2:	d140      	bne.n	8004d26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ca8:	e03d      	b.n	8004d26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	699b      	ldr	r3, [r3, #24]
 8004cae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cb2:	d121      	bne.n	8004cf8 <DMA_CheckFifoParam+0xa8>
 8004cb4:	68bb      	ldr	r3, [r7, #8]
 8004cb6:	2b03      	cmp	r3, #3
 8004cb8:	d837      	bhi.n	8004d2a <DMA_CheckFifoParam+0xda>
 8004cba:	a201      	add	r2, pc, #4	; (adr r2, 8004cc0 <DMA_CheckFifoParam+0x70>)
 8004cbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cc0:	08004cd1 	.word	0x08004cd1
 8004cc4:	08004cd7 	.word	0x08004cd7
 8004cc8:	08004cd1 	.word	0x08004cd1
 8004ccc:	08004ce9 	.word	0x08004ce9
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004cd0:	2301      	movs	r3, #1
 8004cd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004cd4:	e030      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d025      	beq.n	8004d2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004ce2:	2301      	movs	r3, #1
 8004ce4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004ce6:	e022      	b.n	8004d2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004cf0:	d11f      	bne.n	8004d32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004cf2:	2301      	movs	r3, #1
 8004cf4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004cf6:	e01c      	b.n	8004d32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	2b02      	cmp	r3, #2
 8004cfc:	d903      	bls.n	8004d06 <DMA_CheckFifoParam+0xb6>
 8004cfe:	68bb      	ldr	r3, [r7, #8]
 8004d00:	2b03      	cmp	r3, #3
 8004d02:	d003      	beq.n	8004d0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004d04:	e018      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	73fb      	strb	r3, [r7, #15]
      break;
 8004d0a:	e015      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d00e      	beq.n	8004d36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004d18:	2301      	movs	r3, #1
 8004d1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004d1c:	e00b      	b.n	8004d36 <DMA_CheckFifoParam+0xe6>
      break;
 8004d1e:	bf00      	nop
 8004d20:	e00a      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d22:	bf00      	nop
 8004d24:	e008      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d26:	bf00      	nop
 8004d28:	e006      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d2a:	bf00      	nop
 8004d2c:	e004      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d2e:	bf00      	nop
 8004d30:	e002      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;   
 8004d32:	bf00      	nop
 8004d34:	e000      	b.n	8004d38 <DMA_CheckFifoParam+0xe8>
      break;
 8004d36:	bf00      	nop
    }
  } 
  
  return status; 
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3714      	adds	r7, #20
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop

08004d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d48:	b480      	push	{r7}
 8004d4a:	b089      	sub	sp, #36	; 0x24
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	6078      	str	r0, [r7, #4]
 8004d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004d52:	2300      	movs	r3, #0
 8004d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004d56:	2300      	movs	r3, #0
 8004d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d5e:	2300      	movs	r3, #0
 8004d60:	61fb      	str	r3, [r7, #28]
 8004d62:	e16b      	b.n	800503c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004d64:	2201      	movs	r2, #1
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	fa02 f303 	lsl.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	4013      	ands	r3, r2
 8004d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004d78:	693a      	ldr	r2, [r7, #16]
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	f040 815a 	bne.w	8005036 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f003 0303 	and.w	r3, r3, #3
 8004d8a:	2b01      	cmp	r3, #1
 8004d8c:	d005      	beq.n	8004d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d8e:	683b      	ldr	r3, [r7, #0]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004d96:	2b02      	cmp	r3, #2
 8004d98:	d130      	bne.n	8004dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	689b      	ldr	r3, [r3, #8]
 8004d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004da0:	69fb      	ldr	r3, [r7, #28]
 8004da2:	005b      	lsls	r3, r3, #1
 8004da4:	2203      	movs	r2, #3
 8004da6:	fa02 f303 	lsl.w	r3, r2, r3
 8004daa:	43db      	mvns	r3, r3
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	4013      	ands	r3, r2
 8004db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	68da      	ldr	r2, [r3, #12]
 8004db6:	69fb      	ldr	r3, [r7, #28]
 8004db8:	005b      	lsls	r3, r3, #1
 8004dba:	fa02 f303 	lsl.w	r3, r2, r3
 8004dbe:	69ba      	ldr	r2, [r7, #24]
 8004dc0:	4313      	orrs	r3, r2
 8004dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	69ba      	ldr	r2, [r7, #24]
 8004dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004dd0:	2201      	movs	r2, #1
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8004dd8:	43db      	mvns	r3, r3
 8004dda:	69ba      	ldr	r2, [r7, #24]
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	685b      	ldr	r3, [r3, #4]
 8004de4:	091b      	lsrs	r3, r3, #4
 8004de6:	f003 0201 	and.w	r2, r3, #1
 8004dea:	69fb      	ldr	r3, [r7, #28]
 8004dec:	fa02 f303 	lsl.w	r3, r2, r3
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	4313      	orrs	r3, r2
 8004df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	69ba      	ldr	r2, [r7, #24]
 8004dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	685b      	ldr	r3, [r3, #4]
 8004e00:	f003 0303 	and.w	r3, r3, #3
 8004e04:	2b03      	cmp	r3, #3
 8004e06:	d017      	beq.n	8004e38 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004e0e:	69fb      	ldr	r3, [r7, #28]
 8004e10:	005b      	lsls	r3, r3, #1
 8004e12:	2203      	movs	r2, #3
 8004e14:	fa02 f303 	lsl.w	r3, r2, r3
 8004e18:	43db      	mvns	r3, r3
 8004e1a:	69ba      	ldr	r2, [r7, #24]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004e20:	683b      	ldr	r3, [r7, #0]
 8004e22:	689a      	ldr	r2, [r3, #8]
 8004e24:	69fb      	ldr	r3, [r7, #28]
 8004e26:	005b      	lsls	r3, r3, #1
 8004e28:	fa02 f303 	lsl.w	r3, r2, r3
 8004e2c:	69ba      	ldr	r2, [r7, #24]
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	69ba      	ldr	r2, [r7, #24]
 8004e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e38:	683b      	ldr	r3, [r7, #0]
 8004e3a:	685b      	ldr	r3, [r3, #4]
 8004e3c:	f003 0303 	and.w	r3, r3, #3
 8004e40:	2b02      	cmp	r3, #2
 8004e42:	d123      	bne.n	8004e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004e44:	69fb      	ldr	r3, [r7, #28]
 8004e46:	08da      	lsrs	r2, r3, #3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	3208      	adds	r2, #8
 8004e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004e52:	69fb      	ldr	r3, [r7, #28]
 8004e54:	f003 0307 	and.w	r3, r3, #7
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	220f      	movs	r2, #15
 8004e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004e60:	43db      	mvns	r3, r3
 8004e62:	69ba      	ldr	r2, [r7, #24]
 8004e64:	4013      	ands	r3, r2
 8004e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	691a      	ldr	r2, [r3, #16]
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	f003 0307 	and.w	r3, r3, #7
 8004e72:	009b      	lsls	r3, r3, #2
 8004e74:	fa02 f303 	lsl.w	r3, r2, r3
 8004e78:	69ba      	ldr	r2, [r7, #24]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004e7e:	69fb      	ldr	r3, [r7, #28]
 8004e80:	08da      	lsrs	r2, r3, #3
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	3208      	adds	r2, #8
 8004e86:	69b9      	ldr	r1, [r7, #24]
 8004e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004e92:	69fb      	ldr	r3, [r7, #28]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	2203      	movs	r2, #3
 8004e98:	fa02 f303 	lsl.w	r3, r2, r3
 8004e9c:	43db      	mvns	r3, r3
 8004e9e:	69ba      	ldr	r2, [r7, #24]
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	685b      	ldr	r3, [r3, #4]
 8004ea8:	f003 0203 	and.w	r2, r3, #3
 8004eac:	69fb      	ldr	r3, [r7, #28]
 8004eae:	005b      	lsls	r3, r3, #1
 8004eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004eb4:	69ba      	ldr	r2, [r7, #24]
 8004eb6:	4313      	orrs	r3, r2
 8004eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	69ba      	ldr	r2, [r7, #24]
 8004ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685b      	ldr	r3, [r3, #4]
 8004ec4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	f000 80b4 	beq.w	8005036 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004ece:	2300      	movs	r3, #0
 8004ed0:	60fb      	str	r3, [r7, #12]
 8004ed2:	4b60      	ldr	r3, [pc, #384]	; (8005054 <HAL_GPIO_Init+0x30c>)
 8004ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ed6:	4a5f      	ldr	r2, [pc, #380]	; (8005054 <HAL_GPIO_Init+0x30c>)
 8004ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004edc:	6453      	str	r3, [r2, #68]	; 0x44
 8004ede:	4b5d      	ldr	r3, [pc, #372]	; (8005054 <HAL_GPIO_Init+0x30c>)
 8004ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ee6:	60fb      	str	r3, [r7, #12]
 8004ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004eea:	4a5b      	ldr	r2, [pc, #364]	; (8005058 <HAL_GPIO_Init+0x310>)
 8004eec:	69fb      	ldr	r3, [r7, #28]
 8004eee:	089b      	lsrs	r3, r3, #2
 8004ef0:	3302      	adds	r3, #2
 8004ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004ef8:	69fb      	ldr	r3, [r7, #28]
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	220f      	movs	r2, #15
 8004f02:	fa02 f303 	lsl.w	r3, r2, r3
 8004f06:	43db      	mvns	r3, r3
 8004f08:	69ba      	ldr	r2, [r7, #24]
 8004f0a:	4013      	ands	r3, r2
 8004f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	4a52      	ldr	r2, [pc, #328]	; (800505c <HAL_GPIO_Init+0x314>)
 8004f12:	4293      	cmp	r3, r2
 8004f14:	d02b      	beq.n	8004f6e <HAL_GPIO_Init+0x226>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	4a51      	ldr	r2, [pc, #324]	; (8005060 <HAL_GPIO_Init+0x318>)
 8004f1a:	4293      	cmp	r3, r2
 8004f1c:	d025      	beq.n	8004f6a <HAL_GPIO_Init+0x222>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	4a50      	ldr	r2, [pc, #320]	; (8005064 <HAL_GPIO_Init+0x31c>)
 8004f22:	4293      	cmp	r3, r2
 8004f24:	d01f      	beq.n	8004f66 <HAL_GPIO_Init+0x21e>
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	4a4f      	ldr	r2, [pc, #316]	; (8005068 <HAL_GPIO_Init+0x320>)
 8004f2a:	4293      	cmp	r3, r2
 8004f2c:	d019      	beq.n	8004f62 <HAL_GPIO_Init+0x21a>
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	4a4e      	ldr	r2, [pc, #312]	; (800506c <HAL_GPIO_Init+0x324>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d013      	beq.n	8004f5e <HAL_GPIO_Init+0x216>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	4a4d      	ldr	r2, [pc, #308]	; (8005070 <HAL_GPIO_Init+0x328>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d00d      	beq.n	8004f5a <HAL_GPIO_Init+0x212>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	4a4c      	ldr	r2, [pc, #304]	; (8005074 <HAL_GPIO_Init+0x32c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d007      	beq.n	8004f56 <HAL_GPIO_Init+0x20e>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	4a4b      	ldr	r2, [pc, #300]	; (8005078 <HAL_GPIO_Init+0x330>)
 8004f4a:	4293      	cmp	r3, r2
 8004f4c:	d101      	bne.n	8004f52 <HAL_GPIO_Init+0x20a>
 8004f4e:	2307      	movs	r3, #7
 8004f50:	e00e      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f52:	2308      	movs	r3, #8
 8004f54:	e00c      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f56:	2306      	movs	r3, #6
 8004f58:	e00a      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f5a:	2305      	movs	r3, #5
 8004f5c:	e008      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f5e:	2304      	movs	r3, #4
 8004f60:	e006      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f62:	2303      	movs	r3, #3
 8004f64:	e004      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f66:	2302      	movs	r3, #2
 8004f68:	e002      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f6a:	2301      	movs	r3, #1
 8004f6c:	e000      	b.n	8004f70 <HAL_GPIO_Init+0x228>
 8004f6e:	2300      	movs	r3, #0
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	f002 0203 	and.w	r2, r2, #3
 8004f76:	0092      	lsls	r2, r2, #2
 8004f78:	4093      	lsls	r3, r2
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004f80:	4935      	ldr	r1, [pc, #212]	; (8005058 <HAL_GPIO_Init+0x310>)
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	089b      	lsrs	r3, r3, #2
 8004f86:	3302      	adds	r3, #2
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004f8e:	4b3b      	ldr	r3, [pc, #236]	; (800507c <HAL_GPIO_Init+0x334>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004f94:	693b      	ldr	r3, [r7, #16]
 8004f96:	43db      	mvns	r3, r3
 8004f98:	69ba      	ldr	r2, [r7, #24]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	685b      	ldr	r3, [r3, #4]
 8004fa2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d003      	beq.n	8004fb2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	4313      	orrs	r3, r2
 8004fb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004fb2:	4a32      	ldr	r2, [pc, #200]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fb4:	69bb      	ldr	r3, [r7, #24]
 8004fb6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004fb8:	4b30      	ldr	r3, [pc, #192]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	43db      	mvns	r3, r3
 8004fc2:	69ba      	ldr	r2, [r7, #24]
 8004fc4:	4013      	ands	r3, r2
 8004fc6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d003      	beq.n	8004fdc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004fd4:	69ba      	ldr	r2, [r7, #24]
 8004fd6:	693b      	ldr	r3, [r7, #16]
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004fdc:	4a27      	ldr	r2, [pc, #156]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fde:	69bb      	ldr	r3, [r7, #24]
 8004fe0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004fe2:	4b26      	ldr	r3, [pc, #152]	; (800507c <HAL_GPIO_Init+0x334>)
 8004fe4:	689b      	ldr	r3, [r3, #8]
 8004fe6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004fe8:	693b      	ldr	r3, [r7, #16]
 8004fea:	43db      	mvns	r3, r3
 8004fec:	69ba      	ldr	r2, [r7, #24]
 8004fee:	4013      	ands	r3, r2
 8004ff0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	685b      	ldr	r3, [r3, #4]
 8004ff6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004ffe:	69ba      	ldr	r2, [r7, #24]
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4313      	orrs	r3, r2
 8005004:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005006:	4a1d      	ldr	r2, [pc, #116]	; (800507c <HAL_GPIO_Init+0x334>)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800500c:	4b1b      	ldr	r3, [pc, #108]	; (800507c <HAL_GPIO_Init+0x334>)
 800500e:	68db      	ldr	r3, [r3, #12]
 8005010:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005012:	693b      	ldr	r3, [r7, #16]
 8005014:	43db      	mvns	r3, r3
 8005016:	69ba      	ldr	r2, [r7, #24]
 8005018:	4013      	ands	r3, r2
 800501a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005024:	2b00      	cmp	r3, #0
 8005026:	d003      	beq.n	8005030 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005028:	69ba      	ldr	r2, [r7, #24]
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4313      	orrs	r3, r2
 800502e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005030:	4a12      	ldr	r2, [pc, #72]	; (800507c <HAL_GPIO_Init+0x334>)
 8005032:	69bb      	ldr	r3, [r7, #24]
 8005034:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005036:	69fb      	ldr	r3, [r7, #28]
 8005038:	3301      	adds	r3, #1
 800503a:	61fb      	str	r3, [r7, #28]
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	2b0f      	cmp	r3, #15
 8005040:	f67f ae90 	bls.w	8004d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005044:	bf00      	nop
 8005046:	bf00      	nop
 8005048:	3724      	adds	r7, #36	; 0x24
 800504a:	46bd      	mov	sp, r7
 800504c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005050:	4770      	bx	lr
 8005052:	bf00      	nop
 8005054:	40023800 	.word	0x40023800
 8005058:	40013800 	.word	0x40013800
 800505c:	40020000 	.word	0x40020000
 8005060:	40020400 	.word	0x40020400
 8005064:	40020800 	.word	0x40020800
 8005068:	40020c00 	.word	0x40020c00
 800506c:	40021000 	.word	0x40021000
 8005070:	40021400 	.word	0x40021400
 8005074:	40021800 	.word	0x40021800
 8005078:	40021c00 	.word	0x40021c00
 800507c:	40013c00 	.word	0x40013c00

08005080 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005080:	b480      	push	{r7}
 8005082:	b083      	sub	sp, #12
 8005084:	af00      	add	r7, sp, #0
 8005086:	6078      	str	r0, [r7, #4]
 8005088:	460b      	mov	r3, r1
 800508a:	807b      	strh	r3, [r7, #2]
 800508c:	4613      	mov	r3, r2
 800508e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005090:	787b      	ldrb	r3, [r7, #1]
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8005096:	887a      	ldrh	r2, [r7, #2]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800509c:	e003      	b.n	80050a6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800509e:	887b      	ldrh	r3, [r7, #2]
 80050a0:	041a      	lsls	r2, r3, #16
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	619a      	str	r2, [r3, #24]
}
 80050a6:	bf00      	nop
 80050a8:	370c      	adds	r7, #12
 80050aa:	46bd      	mov	sp, r7
 80050ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b0:	4770      	bx	lr
	...

080050b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b086      	sub	sp, #24
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d101      	bne.n	80050c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80050c2:	2301      	movs	r3, #1
 80050c4:	e264      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f003 0301 	and.w	r3, r3, #1
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d075      	beq.n	80051be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050d2:	4ba3      	ldr	r3, [pc, #652]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	f003 030c 	and.w	r3, r3, #12
 80050da:	2b04      	cmp	r3, #4
 80050dc:	d00c      	beq.n	80050f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050de:	4ba0      	ldr	r3, [pc, #640]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	689b      	ldr	r3, [r3, #8]
 80050e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80050e6:	2b08      	cmp	r3, #8
 80050e8:	d112      	bne.n	8005110 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80050ea:	4b9d      	ldr	r3, [pc, #628]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80050f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80050f6:	d10b      	bne.n	8005110 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050f8:	4b99      	ldr	r3, [pc, #612]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005100:	2b00      	cmp	r3, #0
 8005102:	d05b      	beq.n	80051bc <HAL_RCC_OscConfig+0x108>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d157      	bne.n	80051bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800510c:	2301      	movs	r3, #1
 800510e:	e23f      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005118:	d106      	bne.n	8005128 <HAL_RCC_OscConfig+0x74>
 800511a:	4b91      	ldr	r3, [pc, #580]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a90      	ldr	r2, [pc, #576]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005120:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	e01d      	b.n	8005164 <HAL_RCC_OscConfig+0xb0>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005130:	d10c      	bne.n	800514c <HAL_RCC_OscConfig+0x98>
 8005132:	4b8b      	ldr	r3, [pc, #556]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	4a8a      	ldr	r2, [pc, #552]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005138:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800513c:	6013      	str	r3, [r2, #0]
 800513e:	4b88      	ldr	r3, [pc, #544]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	4a87      	ldr	r2, [pc, #540]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005144:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e00b      	b.n	8005164 <HAL_RCC_OscConfig+0xb0>
 800514c:	4b84      	ldr	r3, [pc, #528]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a83      	ldr	r2, [pc, #524]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005152:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005156:	6013      	str	r3, [r2, #0]
 8005158:	4b81      	ldr	r3, [pc, #516]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a80      	ldr	r2, [pc, #512]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 800515e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005162:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d013      	beq.n	8005194 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800516c:	f7fe fe6a 	bl	8003e44 <HAL_GetTick>
 8005170:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005172:	e008      	b.n	8005186 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005174:	f7fe fe66 	bl	8003e44 <HAL_GetTick>
 8005178:	4602      	mov	r2, r0
 800517a:	693b      	ldr	r3, [r7, #16]
 800517c:	1ad3      	subs	r3, r2, r3
 800517e:	2b64      	cmp	r3, #100	; 0x64
 8005180:	d901      	bls.n	8005186 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005182:	2303      	movs	r3, #3
 8005184:	e204      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005186:	4b76      	ldr	r3, [pc, #472]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800518e:	2b00      	cmp	r3, #0
 8005190:	d0f0      	beq.n	8005174 <HAL_RCC_OscConfig+0xc0>
 8005192:	e014      	b.n	80051be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005194:	f7fe fe56 	bl	8003e44 <HAL_GetTick>
 8005198:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800519a:	e008      	b.n	80051ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800519c:	f7fe fe52 	bl	8003e44 <HAL_GetTick>
 80051a0:	4602      	mov	r2, r0
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	1ad3      	subs	r3, r2, r3
 80051a6:	2b64      	cmp	r3, #100	; 0x64
 80051a8:	d901      	bls.n	80051ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e1f0      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80051ae:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d1f0      	bne.n	800519c <HAL_RCC_OscConfig+0xe8>
 80051ba:	e000      	b.n	80051be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	f003 0302 	and.w	r3, r3, #2
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d063      	beq.n	8005292 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051ca:	4b65      	ldr	r3, [pc, #404]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80051cc:	689b      	ldr	r3, [r3, #8]
 80051ce:	f003 030c 	and.w	r3, r3, #12
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d00b      	beq.n	80051ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051d6:	4b62      	ldr	r3, [pc, #392]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80051d8:	689b      	ldr	r3, [r3, #8]
 80051da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80051de:	2b08      	cmp	r3, #8
 80051e0:	d11c      	bne.n	800521c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80051e2:	4b5f      	ldr	r3, [pc, #380]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d116      	bne.n	800521c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051ee:	4b5c      	ldr	r3, [pc, #368]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f003 0302 	and.w	r3, r3, #2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d005      	beq.n	8005206 <HAL_RCC_OscConfig+0x152>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	68db      	ldr	r3, [r3, #12]
 80051fe:	2b01      	cmp	r3, #1
 8005200:	d001      	beq.n	8005206 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005202:	2301      	movs	r3, #1
 8005204:	e1c4      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005206:	4b56      	ldr	r3, [pc, #344]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	691b      	ldr	r3, [r3, #16]
 8005212:	00db      	lsls	r3, r3, #3
 8005214:	4952      	ldr	r1, [pc, #328]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005216:	4313      	orrs	r3, r2
 8005218:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800521a:	e03a      	b.n	8005292 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d020      	beq.n	8005266 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005224:	4b4f      	ldr	r3, [pc, #316]	; (8005364 <HAL_RCC_OscConfig+0x2b0>)
 8005226:	2201      	movs	r2, #1
 8005228:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800522a:	f7fe fe0b 	bl	8003e44 <HAL_GetTick>
 800522e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005230:	e008      	b.n	8005244 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005232:	f7fe fe07 	bl	8003e44 <HAL_GetTick>
 8005236:	4602      	mov	r2, r0
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	1ad3      	subs	r3, r2, r3
 800523c:	2b02      	cmp	r3, #2
 800523e:	d901      	bls.n	8005244 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005240:	2303      	movs	r3, #3
 8005242:	e1a5      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005244:	4b46      	ldr	r3, [pc, #280]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0f0      	beq.n	8005232 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005250:	4b43      	ldr	r3, [pc, #268]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	691b      	ldr	r3, [r3, #16]
 800525c:	00db      	lsls	r3, r3, #3
 800525e:	4940      	ldr	r1, [pc, #256]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005260:	4313      	orrs	r3, r2
 8005262:	600b      	str	r3, [r1, #0]
 8005264:	e015      	b.n	8005292 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005266:	4b3f      	ldr	r3, [pc, #252]	; (8005364 <HAL_RCC_OscConfig+0x2b0>)
 8005268:	2200      	movs	r2, #0
 800526a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800526c:	f7fe fdea 	bl	8003e44 <HAL_GetTick>
 8005270:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005272:	e008      	b.n	8005286 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005274:	f7fe fde6 	bl	8003e44 <HAL_GetTick>
 8005278:	4602      	mov	r2, r0
 800527a:	693b      	ldr	r3, [r7, #16]
 800527c:	1ad3      	subs	r3, r2, r3
 800527e:	2b02      	cmp	r3, #2
 8005280:	d901      	bls.n	8005286 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e184      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005286:	4b36      	ldr	r3, [pc, #216]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f003 0302 	and.w	r3, r3, #2
 800528e:	2b00      	cmp	r3, #0
 8005290:	d1f0      	bne.n	8005274 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b00      	cmp	r3, #0
 800529c:	d030      	beq.n	8005300 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	695b      	ldr	r3, [r3, #20]
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d016      	beq.n	80052d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80052a6:	4b30      	ldr	r3, [pc, #192]	; (8005368 <HAL_RCC_OscConfig+0x2b4>)
 80052a8:	2201      	movs	r2, #1
 80052aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ac:	f7fe fdca 	bl	8003e44 <HAL_GetTick>
 80052b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052b2:	e008      	b.n	80052c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052b4:	f7fe fdc6 	bl	8003e44 <HAL_GetTick>
 80052b8:	4602      	mov	r2, r0
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	1ad3      	subs	r3, r2, r3
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d901      	bls.n	80052c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80052c2:	2303      	movs	r3, #3
 80052c4:	e164      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052c6:	4b26      	ldr	r3, [pc, #152]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052ca:	f003 0302 	and.w	r3, r3, #2
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d0f0      	beq.n	80052b4 <HAL_RCC_OscConfig+0x200>
 80052d2:	e015      	b.n	8005300 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052d4:	4b24      	ldr	r3, [pc, #144]	; (8005368 <HAL_RCC_OscConfig+0x2b4>)
 80052d6:	2200      	movs	r2, #0
 80052d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052da:	f7fe fdb3 	bl	8003e44 <HAL_GetTick>
 80052de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052e0:	e008      	b.n	80052f4 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80052e2:	f7fe fdaf 	bl	8003e44 <HAL_GetTick>
 80052e6:	4602      	mov	r2, r0
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	1ad3      	subs	r3, r2, r3
 80052ec:	2b02      	cmp	r3, #2
 80052ee:	d901      	bls.n	80052f4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80052f0:	2303      	movs	r3, #3
 80052f2:	e14d      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f4:	4b1a      	ldr	r3, [pc, #104]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 80052f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80052f8:	f003 0302 	and.w	r3, r3, #2
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f0      	bne.n	80052e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f003 0304 	and.w	r3, r3, #4
 8005308:	2b00      	cmp	r3, #0
 800530a:	f000 80a0 	beq.w	800544e <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530e:	2300      	movs	r3, #0
 8005310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005312:	4b13      	ldr	r3, [pc, #76]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800531a:	2b00      	cmp	r3, #0
 800531c:	d10f      	bne.n	800533e <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]
 8005322:	4b0f      	ldr	r3, [pc, #60]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	4a0e      	ldr	r2, [pc, #56]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800532c:	6413      	str	r3, [r2, #64]	; 0x40
 800532e:	4b0c      	ldr	r3, [pc, #48]	; (8005360 <HAL_RCC_OscConfig+0x2ac>)
 8005330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005336:	60bb      	str	r3, [r7, #8]
 8005338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800533a:	2301      	movs	r3, #1
 800533c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800533e:	4b0b      	ldr	r3, [pc, #44]	; (800536c <HAL_RCC_OscConfig+0x2b8>)
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005346:	2b00      	cmp	r3, #0
 8005348:	d121      	bne.n	800538e <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800534a:	4b08      	ldr	r3, [pc, #32]	; (800536c <HAL_RCC_OscConfig+0x2b8>)
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	4a07      	ldr	r2, [pc, #28]	; (800536c <HAL_RCC_OscConfig+0x2b8>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005356:	f7fe fd75 	bl	8003e44 <HAL_GetTick>
 800535a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800535c:	e011      	b.n	8005382 <HAL_RCC_OscConfig+0x2ce>
 800535e:	bf00      	nop
 8005360:	40023800 	.word	0x40023800
 8005364:	42470000 	.word	0x42470000
 8005368:	42470e80 	.word	0x42470e80
 800536c:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005370:	f7fe fd68 	bl	8003e44 <HAL_GetTick>
 8005374:	4602      	mov	r2, r0
 8005376:	693b      	ldr	r3, [r7, #16]
 8005378:	1ad3      	subs	r3, r2, r3
 800537a:	2b02      	cmp	r3, #2
 800537c:	d901      	bls.n	8005382 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e106      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005382:	4b85      	ldr	r3, [pc, #532]	; (8005598 <HAL_RCC_OscConfig+0x4e4>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800538a:	2b00      	cmp	r3, #0
 800538c:	d0f0      	beq.n	8005370 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	689b      	ldr	r3, [r3, #8]
 8005392:	2b01      	cmp	r3, #1
 8005394:	d106      	bne.n	80053a4 <HAL_RCC_OscConfig+0x2f0>
 8005396:	4b81      	ldr	r3, [pc, #516]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 8005398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539a:	4a80      	ldr	r2, [pc, #512]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 800539c:	f043 0301 	orr.w	r3, r3, #1
 80053a0:	6713      	str	r3, [r2, #112]	; 0x70
 80053a2:	e01c      	b.n	80053de <HAL_RCC_OscConfig+0x32a>
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	689b      	ldr	r3, [r3, #8]
 80053a8:	2b05      	cmp	r3, #5
 80053aa:	d10c      	bne.n	80053c6 <HAL_RCC_OscConfig+0x312>
 80053ac:	4b7b      	ldr	r3, [pc, #492]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b0:	4a7a      	ldr	r2, [pc, #488]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053b2:	f043 0304 	orr.w	r3, r3, #4
 80053b6:	6713      	str	r3, [r2, #112]	; 0x70
 80053b8:	4b78      	ldr	r3, [pc, #480]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053bc:	4a77      	ldr	r2, [pc, #476]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053be:	f043 0301 	orr.w	r3, r3, #1
 80053c2:	6713      	str	r3, [r2, #112]	; 0x70
 80053c4:	e00b      	b.n	80053de <HAL_RCC_OscConfig+0x32a>
 80053c6:	4b75      	ldr	r3, [pc, #468]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	4a74      	ldr	r2, [pc, #464]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053cc:	f023 0301 	bic.w	r3, r3, #1
 80053d0:	6713      	str	r3, [r2, #112]	; 0x70
 80053d2:	4b72      	ldr	r3, [pc, #456]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d6:	4a71      	ldr	r2, [pc, #452]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80053d8:	f023 0304 	bic.w	r3, r3, #4
 80053dc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d015      	beq.n	8005412 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053e6:	f7fe fd2d 	bl	8003e44 <HAL_GetTick>
 80053ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053ec:	e00a      	b.n	8005404 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053ee:	f7fe fd29 	bl	8003e44 <HAL_GetTick>
 80053f2:	4602      	mov	r2, r0
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	1ad3      	subs	r3, r2, r3
 80053f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80053fc:	4293      	cmp	r3, r2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e0c5      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005404:	4b65      	ldr	r3, [pc, #404]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 8005406:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005408:	f003 0302 	and.w	r3, r3, #2
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0ee      	beq.n	80053ee <HAL_RCC_OscConfig+0x33a>
 8005410:	e014      	b.n	800543c <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005412:	f7fe fd17 	bl	8003e44 <HAL_GetTick>
 8005416:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005418:	e00a      	b.n	8005430 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800541a:	f7fe fd13 	bl	8003e44 <HAL_GetTick>
 800541e:	4602      	mov	r2, r0
 8005420:	693b      	ldr	r3, [r7, #16]
 8005422:	1ad3      	subs	r3, r2, r3
 8005424:	f241 3288 	movw	r2, #5000	; 0x1388
 8005428:	4293      	cmp	r3, r2
 800542a:	d901      	bls.n	8005430 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800542c:	2303      	movs	r3, #3
 800542e:	e0af      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005430:	4b5a      	ldr	r3, [pc, #360]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005434:	f003 0302 	and.w	r3, r3, #2
 8005438:	2b00      	cmp	r3, #0
 800543a:	d1ee      	bne.n	800541a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800543c:	7dfb      	ldrb	r3, [r7, #23]
 800543e:	2b01      	cmp	r3, #1
 8005440:	d105      	bne.n	800544e <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005442:	4b56      	ldr	r3, [pc, #344]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 8005444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005446:	4a55      	ldr	r2, [pc, #340]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 8005448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800544c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	699b      	ldr	r3, [r3, #24]
 8005452:	2b00      	cmp	r3, #0
 8005454:	f000 809b 	beq.w	800558e <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005458:	4b50      	ldr	r3, [pc, #320]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 800545a:	689b      	ldr	r3, [r3, #8]
 800545c:	f003 030c 	and.w	r3, r3, #12
 8005460:	2b08      	cmp	r3, #8
 8005462:	d05c      	beq.n	800551e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	699b      	ldr	r3, [r3, #24]
 8005468:	2b02      	cmp	r3, #2
 800546a:	d141      	bne.n	80054f0 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800546c:	4b4c      	ldr	r3, [pc, #304]	; (80055a0 <HAL_RCC_OscConfig+0x4ec>)
 800546e:	2200      	movs	r2, #0
 8005470:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005472:	f7fe fce7 	bl	8003e44 <HAL_GetTick>
 8005476:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005478:	e008      	b.n	800548c <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800547a:	f7fe fce3 	bl	8003e44 <HAL_GetTick>
 800547e:	4602      	mov	r2, r0
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	1ad3      	subs	r3, r2, r3
 8005484:	2b02      	cmp	r3, #2
 8005486:	d901      	bls.n	800548c <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005488:	2303      	movs	r3, #3
 800548a:	e081      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800548c:	4b43      	ldr	r3, [pc, #268]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005494:	2b00      	cmp	r3, #0
 8005496:	d1f0      	bne.n	800547a <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	69da      	ldr	r2, [r3, #28]
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6a1b      	ldr	r3, [r3, #32]
 80054a0:	431a      	orrs	r2, r3
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a6:	019b      	lsls	r3, r3, #6
 80054a8:	431a      	orrs	r2, r3
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	085b      	lsrs	r3, r3, #1
 80054b0:	3b01      	subs	r3, #1
 80054b2:	041b      	lsls	r3, r3, #16
 80054b4:	431a      	orrs	r2, r3
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	4937      	ldr	r1, [pc, #220]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80054be:	4313      	orrs	r3, r2
 80054c0:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054c2:	4b37      	ldr	r3, [pc, #220]	; (80055a0 <HAL_RCC_OscConfig+0x4ec>)
 80054c4:	2201      	movs	r2, #1
 80054c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054c8:	f7fe fcbc 	bl	8003e44 <HAL_GetTick>
 80054cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054ce:	e008      	b.n	80054e2 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054d0:	f7fe fcb8 	bl	8003e44 <HAL_GetTick>
 80054d4:	4602      	mov	r2, r0
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	1ad3      	subs	r3, r2, r3
 80054da:	2b02      	cmp	r3, #2
 80054dc:	d901      	bls.n	80054e2 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80054de:	2303      	movs	r3, #3
 80054e0:	e056      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80054e2:	4b2e      	ldr	r3, [pc, #184]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d0f0      	beq.n	80054d0 <HAL_RCC_OscConfig+0x41c>
 80054ee:	e04e      	b.n	800558e <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80054f0:	4b2b      	ldr	r3, [pc, #172]	; (80055a0 <HAL_RCC_OscConfig+0x4ec>)
 80054f2:	2200      	movs	r2, #0
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054f6:	f7fe fca5 	bl	8003e44 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80054fe:	f7fe fca1 	bl	8003e44 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e03f      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005510:	4b22      	ldr	r3, [pc, #136]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005518:	2b00      	cmp	r3, #0
 800551a:	d1f0      	bne.n	80054fe <HAL_RCC_OscConfig+0x44a>
 800551c:	e037      	b.n	800558e <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	699b      	ldr	r3, [r3, #24]
 8005522:	2b01      	cmp	r3, #1
 8005524:	d101      	bne.n	800552a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e032      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800552a:	4b1c      	ldr	r3, [pc, #112]	; (800559c <HAL_RCC_OscConfig+0x4e8>)
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	699b      	ldr	r3, [r3, #24]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d028      	beq.n	800558a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005542:	429a      	cmp	r2, r3
 8005544:	d121      	bne.n	800558a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005550:	429a      	cmp	r2, r3
 8005552:	d11a      	bne.n	800558a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005554:	68fa      	ldr	r2, [r7, #12]
 8005556:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800555a:	4013      	ands	r3, r2
 800555c:	687a      	ldr	r2, [r7, #4]
 800555e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005560:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005562:	4293      	cmp	r3, r2
 8005564:	d111      	bne.n	800558a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	3b01      	subs	r3, #1
 8005574:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005576:	429a      	cmp	r2, r3
 8005578:	d107      	bne.n	800558a <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005584:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005586:	429a      	cmp	r2, r3
 8005588:	d001      	beq.n	800558e <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 800558a:	2301      	movs	r3, #1
 800558c:	e000      	b.n	8005590 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800558e:	2300      	movs	r3, #0
}
 8005590:	4618      	mov	r0, r3
 8005592:	3718      	adds	r7, #24
 8005594:	46bd      	mov	sp, r7
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40007000 	.word	0x40007000
 800559c:	40023800 	.word	0x40023800
 80055a0:	42470060 	.word	0x42470060

080055a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b084      	sub	sp, #16
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
 80055ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80055b4:	2301      	movs	r3, #1
 80055b6:	e0cc      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80055b8:	4b68      	ldr	r3, [pc, #416]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f003 0307 	and.w	r3, r3, #7
 80055c0:	683a      	ldr	r2, [r7, #0]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d90c      	bls.n	80055e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80055c6:	4b65      	ldr	r3, [pc, #404]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80055c8:	683a      	ldr	r2, [r7, #0]
 80055ca:	b2d2      	uxtb	r2, r2
 80055cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ce:	4b63      	ldr	r3, [pc, #396]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f003 0307 	and.w	r3, r3, #7
 80055d6:	683a      	ldr	r2, [r7, #0]
 80055d8:	429a      	cmp	r2, r3
 80055da:	d001      	beq.n	80055e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80055dc:	2301      	movs	r3, #1
 80055de:	e0b8      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f003 0302 	and.w	r3, r3, #2
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d020      	beq.n	800562e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	f003 0304 	and.w	r3, r3, #4
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d005      	beq.n	8005604 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055f8:	4b59      	ldr	r3, [pc, #356]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a58      	ldr	r2, [pc, #352]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80055fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005602:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0308 	and.w	r3, r3, #8
 800560c:	2b00      	cmp	r3, #0
 800560e:	d005      	beq.n	800561c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005610:	4b53      	ldr	r3, [pc, #332]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4a52      	ldr	r2, [pc, #328]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005616:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800561a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800561c:	4b50      	ldr	r3, [pc, #320]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	494d      	ldr	r1, [pc, #308]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 800562a:	4313      	orrs	r3, r2
 800562c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0301 	and.w	r3, r3, #1
 8005636:	2b00      	cmp	r3, #0
 8005638:	d044      	beq.n	80056c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	2b01      	cmp	r3, #1
 8005640:	d107      	bne.n	8005652 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005642:	4b47      	ldr	r3, [pc, #284]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800564a:	2b00      	cmp	r3, #0
 800564c:	d119      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800564e:	2301      	movs	r3, #1
 8005650:	e07f      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	685b      	ldr	r3, [r3, #4]
 8005656:	2b02      	cmp	r3, #2
 8005658:	d003      	beq.n	8005662 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800565e:	2b03      	cmp	r3, #3
 8005660:	d107      	bne.n	8005672 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005662:	4b3f      	ldr	r3, [pc, #252]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800566a:	2b00      	cmp	r3, #0
 800566c:	d109      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800566e:	2301      	movs	r3, #1
 8005670:	e06f      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005672:	4b3b      	ldr	r3, [pc, #236]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f003 0302 	and.w	r3, r3, #2
 800567a:	2b00      	cmp	r3, #0
 800567c:	d101      	bne.n	8005682 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800567e:	2301      	movs	r3, #1
 8005680:	e067      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005682:	4b37      	ldr	r3, [pc, #220]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	f023 0203 	bic.w	r2, r3, #3
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	4934      	ldr	r1, [pc, #208]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005690:	4313      	orrs	r3, r2
 8005692:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005694:	f7fe fbd6 	bl	8003e44 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569c:	f7fe fbd2 	bl	8003e44 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e04f      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80056b2:	4b2b      	ldr	r3, [pc, #172]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f003 020c 	and.w	r2, r3, #12
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	009b      	lsls	r3, r3, #2
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d1eb      	bne.n	800569c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80056c4:	4b25      	ldr	r3, [pc, #148]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	f003 0307 	and.w	r3, r3, #7
 80056cc:	683a      	ldr	r2, [r7, #0]
 80056ce:	429a      	cmp	r2, r3
 80056d0:	d20c      	bcs.n	80056ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056d2:	4b22      	ldr	r3, [pc, #136]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80056d4:	683a      	ldr	r2, [r7, #0]
 80056d6:	b2d2      	uxtb	r2, r2
 80056d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80056da:	4b20      	ldr	r3, [pc, #128]	; (800575c <HAL_RCC_ClockConfig+0x1b8>)
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	f003 0307 	and.w	r3, r3, #7
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d001      	beq.n	80056ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80056e8:	2301      	movs	r3, #1
 80056ea:	e032      	b.n	8005752 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f003 0304 	and.w	r3, r3, #4
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d008      	beq.n	800570a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056f8:	4b19      	ldr	r3, [pc, #100]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 80056fa:	689b      	ldr	r3, [r3, #8]
 80056fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	4916      	ldr	r1, [pc, #88]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005706:	4313      	orrs	r3, r2
 8005708:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	f003 0308 	and.w	r3, r3, #8
 8005712:	2b00      	cmp	r3, #0
 8005714:	d009      	beq.n	800572a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005716:	4b12      	ldr	r3, [pc, #72]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	691b      	ldr	r3, [r3, #16]
 8005722:	00db      	lsls	r3, r3, #3
 8005724:	490e      	ldr	r1, [pc, #56]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005726:	4313      	orrs	r3, r2
 8005728:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800572a:	f000 f821 	bl	8005770 <HAL_RCC_GetSysClockFreq>
 800572e:	4602      	mov	r2, r0
 8005730:	4b0b      	ldr	r3, [pc, #44]	; (8005760 <HAL_RCC_ClockConfig+0x1bc>)
 8005732:	689b      	ldr	r3, [r3, #8]
 8005734:	091b      	lsrs	r3, r3, #4
 8005736:	f003 030f 	and.w	r3, r3, #15
 800573a:	490a      	ldr	r1, [pc, #40]	; (8005764 <HAL_RCC_ClockConfig+0x1c0>)
 800573c:	5ccb      	ldrb	r3, [r1, r3]
 800573e:	fa22 f303 	lsr.w	r3, r2, r3
 8005742:	4a09      	ldr	r2, [pc, #36]	; (8005768 <HAL_RCC_ClockConfig+0x1c4>)
 8005744:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005746:	4b09      	ldr	r3, [pc, #36]	; (800576c <HAL_RCC_ClockConfig+0x1c8>)
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	4618      	mov	r0, r3
 800574c:	f7fe f8c0 	bl	80038d0 <HAL_InitTick>

  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	4618      	mov	r0, r3
 8005754:	3710      	adds	r7, #16
 8005756:	46bd      	mov	sp, r7
 8005758:	bd80      	pop	{r7, pc}
 800575a:	bf00      	nop
 800575c:	40023c00 	.word	0x40023c00
 8005760:	40023800 	.word	0x40023800
 8005764:	0800cb04 	.word	0x0800cb04
 8005768:	200001ec 	.word	0x200001ec
 800576c:	200001f0 	.word	0x200001f0

08005770 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005778:	2300      	movs	r3, #0
 800577a:	607b      	str	r3, [r7, #4]
 800577c:	2300      	movs	r3, #0
 800577e:	60fb      	str	r3, [r7, #12]
 8005780:	2300      	movs	r3, #0
 8005782:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005784:	2300      	movs	r3, #0
 8005786:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005788:	4b67      	ldr	r3, [pc, #412]	; (8005928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	f003 030c 	and.w	r3, r3, #12
 8005790:	2b08      	cmp	r3, #8
 8005792:	d00d      	beq.n	80057b0 <HAL_RCC_GetSysClockFreq+0x40>
 8005794:	2b08      	cmp	r3, #8
 8005796:	f200 80bd 	bhi.w	8005914 <HAL_RCC_GetSysClockFreq+0x1a4>
 800579a:	2b00      	cmp	r3, #0
 800579c:	d002      	beq.n	80057a4 <HAL_RCC_GetSysClockFreq+0x34>
 800579e:	2b04      	cmp	r3, #4
 80057a0:	d003      	beq.n	80057aa <HAL_RCC_GetSysClockFreq+0x3a>
 80057a2:	e0b7      	b.n	8005914 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80057a4:	4b61      	ldr	r3, [pc, #388]	; (800592c <HAL_RCC_GetSysClockFreq+0x1bc>)
 80057a6:	60bb      	str	r3, [r7, #8]
       break;
 80057a8:	e0b7      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80057aa:	4b61      	ldr	r3, [pc, #388]	; (8005930 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80057ac:	60bb      	str	r3, [r7, #8]
      break;
 80057ae:	e0b4      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80057b0:	4b5d      	ldr	r3, [pc, #372]	; (8005928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057b2:	685b      	ldr	r3, [r3, #4]
 80057b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80057b8:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80057ba:	4b5b      	ldr	r3, [pc, #364]	; (8005928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d04d      	beq.n	8005862 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057c6:	4b58      	ldr	r3, [pc, #352]	; (8005928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80057c8:	685b      	ldr	r3, [r3, #4]
 80057ca:	099b      	lsrs	r3, r3, #6
 80057cc:	461a      	mov	r2, r3
 80057ce:	f04f 0300 	mov.w	r3, #0
 80057d2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80057d6:	f04f 0100 	mov.w	r1, #0
 80057da:	ea02 0800 	and.w	r8, r2, r0
 80057de:	ea03 0901 	and.w	r9, r3, r1
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f04f 0200 	mov.w	r2, #0
 80057ea:	f04f 0300 	mov.w	r3, #0
 80057ee:	014b      	lsls	r3, r1, #5
 80057f0:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80057f4:	0142      	lsls	r2, r0, #5
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	ebb0 0008 	subs.w	r0, r0, r8
 80057fe:	eb61 0109 	sbc.w	r1, r1, r9
 8005802:	f04f 0200 	mov.w	r2, #0
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	018b      	lsls	r3, r1, #6
 800580c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005810:	0182      	lsls	r2, r0, #6
 8005812:	1a12      	subs	r2, r2, r0
 8005814:	eb63 0301 	sbc.w	r3, r3, r1
 8005818:	f04f 0000 	mov.w	r0, #0
 800581c:	f04f 0100 	mov.w	r1, #0
 8005820:	00d9      	lsls	r1, r3, #3
 8005822:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005826:	00d0      	lsls	r0, r2, #3
 8005828:	4602      	mov	r2, r0
 800582a:	460b      	mov	r3, r1
 800582c:	eb12 0208 	adds.w	r2, r2, r8
 8005830:	eb43 0309 	adc.w	r3, r3, r9
 8005834:	f04f 0000 	mov.w	r0, #0
 8005838:	f04f 0100 	mov.w	r1, #0
 800583c:	0259      	lsls	r1, r3, #9
 800583e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005842:	0250      	lsls	r0, r2, #9
 8005844:	4602      	mov	r2, r0
 8005846:	460b      	mov	r3, r1
 8005848:	4610      	mov	r0, r2
 800584a:	4619      	mov	r1, r3
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	461a      	mov	r2, r3
 8005850:	f04f 0300 	mov.w	r3, #0
 8005854:	f7fb f9f0 	bl	8000c38 <__aeabi_uldivmod>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4613      	mov	r3, r2
 800585e:	60fb      	str	r3, [r7, #12]
 8005860:	e04a      	b.n	80058f8 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005862:	4b31      	ldr	r3, [pc, #196]	; (8005928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	099b      	lsrs	r3, r3, #6
 8005868:	461a      	mov	r2, r3
 800586a:	f04f 0300 	mov.w	r3, #0
 800586e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005872:	f04f 0100 	mov.w	r1, #0
 8005876:	ea02 0400 	and.w	r4, r2, r0
 800587a:	ea03 0501 	and.w	r5, r3, r1
 800587e:	4620      	mov	r0, r4
 8005880:	4629      	mov	r1, r5
 8005882:	f04f 0200 	mov.w	r2, #0
 8005886:	f04f 0300 	mov.w	r3, #0
 800588a:	014b      	lsls	r3, r1, #5
 800588c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005890:	0142      	lsls	r2, r0, #5
 8005892:	4610      	mov	r0, r2
 8005894:	4619      	mov	r1, r3
 8005896:	1b00      	subs	r0, r0, r4
 8005898:	eb61 0105 	sbc.w	r1, r1, r5
 800589c:	f04f 0200 	mov.w	r2, #0
 80058a0:	f04f 0300 	mov.w	r3, #0
 80058a4:	018b      	lsls	r3, r1, #6
 80058a6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80058aa:	0182      	lsls	r2, r0, #6
 80058ac:	1a12      	subs	r2, r2, r0
 80058ae:	eb63 0301 	sbc.w	r3, r3, r1
 80058b2:	f04f 0000 	mov.w	r0, #0
 80058b6:	f04f 0100 	mov.w	r1, #0
 80058ba:	00d9      	lsls	r1, r3, #3
 80058bc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80058c0:	00d0      	lsls	r0, r2, #3
 80058c2:	4602      	mov	r2, r0
 80058c4:	460b      	mov	r3, r1
 80058c6:	1912      	adds	r2, r2, r4
 80058c8:	eb45 0303 	adc.w	r3, r5, r3
 80058cc:	f04f 0000 	mov.w	r0, #0
 80058d0:	f04f 0100 	mov.w	r1, #0
 80058d4:	0299      	lsls	r1, r3, #10
 80058d6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80058da:	0290      	lsls	r0, r2, #10
 80058dc:	4602      	mov	r2, r0
 80058de:	460b      	mov	r3, r1
 80058e0:	4610      	mov	r0, r2
 80058e2:	4619      	mov	r1, r3
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	461a      	mov	r2, r3
 80058e8:	f04f 0300 	mov.w	r3, #0
 80058ec:	f7fb f9a4 	bl	8000c38 <__aeabi_uldivmod>
 80058f0:	4602      	mov	r2, r0
 80058f2:	460b      	mov	r3, r1
 80058f4:	4613      	mov	r3, r2
 80058f6:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	; (8005928 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	0c1b      	lsrs	r3, r3, #16
 80058fe:	f003 0303 	and.w	r3, r3, #3
 8005902:	3301      	adds	r3, #1
 8005904:	005b      	lsls	r3, r3, #1
 8005906:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005908:	68fa      	ldr	r2, [r7, #12]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	60bb      	str	r3, [r7, #8]
      break;
 8005912:	e002      	b.n	800591a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005914:	4b05      	ldr	r3, [pc, #20]	; (800592c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005916:	60bb      	str	r3, [r7, #8]
      break;
 8005918:	bf00      	nop
    }
  }
  return sysclockfreq;
 800591a:	68bb      	ldr	r3, [r7, #8]
}
 800591c:	4618      	mov	r0, r3
 800591e:	3710      	adds	r7, #16
 8005920:	46bd      	mov	sp, r7
 8005922:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005926:	bf00      	nop
 8005928:	40023800 	.word	0x40023800
 800592c:	00f42400 	.word	0x00f42400
 8005930:	007a1200 	.word	0x007a1200

08005934 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005934:	b480      	push	{r7}
 8005936:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005938:	4b03      	ldr	r3, [pc, #12]	; (8005948 <HAL_RCC_GetHCLKFreq+0x14>)
 800593a:	681b      	ldr	r3, [r3, #0]
}
 800593c:	4618      	mov	r0, r3
 800593e:	46bd      	mov	sp, r7
 8005940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005944:	4770      	bx	lr
 8005946:	bf00      	nop
 8005948:	200001ec 	.word	0x200001ec

0800594c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005950:	f7ff fff0 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 8005954:	4602      	mov	r2, r0
 8005956:	4b05      	ldr	r3, [pc, #20]	; (800596c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005958:	689b      	ldr	r3, [r3, #8]
 800595a:	0a9b      	lsrs	r3, r3, #10
 800595c:	f003 0307 	and.w	r3, r3, #7
 8005960:	4903      	ldr	r1, [pc, #12]	; (8005970 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005962:	5ccb      	ldrb	r3, [r1, r3]
 8005964:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005968:	4618      	mov	r0, r3
 800596a:	bd80      	pop	{r7, pc}
 800596c:	40023800 	.word	0x40023800
 8005970:	0800cb14 	.word	0x0800cb14

08005974 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005974:	b580      	push	{r7, lr}
 8005976:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005978:	f7ff ffdc 	bl	8005934 <HAL_RCC_GetHCLKFreq>
 800597c:	4602      	mov	r2, r0
 800597e:	4b05      	ldr	r3, [pc, #20]	; (8005994 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	0b5b      	lsrs	r3, r3, #13
 8005984:	f003 0307 	and.w	r3, r3, #7
 8005988:	4903      	ldr	r1, [pc, #12]	; (8005998 <HAL_RCC_GetPCLK2Freq+0x24>)
 800598a:	5ccb      	ldrb	r3, [r1, r3]
 800598c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005990:	4618      	mov	r0, r3
 8005992:	bd80      	pop	{r7, pc}
 8005994:	40023800 	.word	0x40023800
 8005998:	0800cb14 	.word	0x0800cb14

0800599c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800599c:	b480      	push	{r7}
 800599e:	b083      	sub	sp, #12
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
 80059a4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	220f      	movs	r2, #15
 80059aa:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80059ac:	4b12      	ldr	r3, [pc, #72]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	f003 0203 	and.w	r2, r3, #3
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80059b8:	4b0f      	ldr	r3, [pc, #60]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059ba:	689b      	ldr	r3, [r3, #8]
 80059bc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80059c4:	4b0c      	ldr	r3, [pc, #48]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80059d0:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <HAL_RCC_GetClockConfig+0x5c>)
 80059d2:	689b      	ldr	r3, [r3, #8]
 80059d4:	08db      	lsrs	r3, r3, #3
 80059d6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80059de:	4b07      	ldr	r3, [pc, #28]	; (80059fc <HAL_RCC_GetClockConfig+0x60>)
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	f003 0207 	and.w	r2, r3, #7
 80059e6:	683b      	ldr	r3, [r7, #0]
 80059e8:	601a      	str	r2, [r3, #0]
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr
 80059f6:	bf00      	nop
 80059f8:	40023800 	.word	0x40023800
 80059fc:	40023c00 	.word	0x40023c00

08005a00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d101      	bne.n	8005a12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a0e:	2301      	movs	r3, #1
 8005a10:	e07b      	b.n	8005b0a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d108      	bne.n	8005a2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a22:	d009      	beq.n	8005a38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2200      	movs	r2, #0
 8005a28:	61da      	str	r2, [r3, #28]
 8005a2a:	e005      	b.n	8005a38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2200      	movs	r2, #0
 8005a30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	2200      	movs	r2, #0
 8005a36:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005a44:	b2db      	uxtb	r3, r3
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d106      	bne.n	8005a58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fd fa94 	bl	8002f80 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a6e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	685b      	ldr	r3, [r3, #4]
 8005a74:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a80:	431a      	orrs	r2, r3
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	68db      	ldr	r3, [r3, #12]
 8005a86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a8a:	431a      	orrs	r2, r3
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	691b      	ldr	r3, [r3, #16]
 8005a90:	f003 0302 	and.w	r3, r3, #2
 8005a94:	431a      	orrs	r2, r3
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	695b      	ldr	r3, [r3, #20]
 8005a9a:	f003 0301 	and.w	r3, r3, #1
 8005a9e:	431a      	orrs	r2, r3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	699b      	ldr	r3, [r3, #24]
 8005aa4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aa8:	431a      	orrs	r2, r3
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	69db      	ldr	r3, [r3, #28]
 8005aae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ab2:	431a      	orrs	r2, r3
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6a1b      	ldr	r3, [r3, #32]
 8005ab8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abc:	ea42 0103 	orr.w	r1, r2, r3
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	430a      	orrs	r2, r1
 8005ace:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	699b      	ldr	r3, [r3, #24]
 8005ad4:	0c1b      	lsrs	r3, r3, #16
 8005ad6:	f003 0104 	and.w	r1, r3, #4
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ade:	f003 0210 	and.w	r2, r3, #16
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	430a      	orrs	r2, r1
 8005ae8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69da      	ldr	r2, [r3, #28]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005af8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	2200      	movs	r2, #0
 8005afe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	2201      	movs	r2, #1
 8005b04:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b088      	sub	sp, #32
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	60f8      	str	r0, [r7, #12]
 8005b1a:	60b9      	str	r1, [r7, #8]
 8005b1c:	603b      	str	r3, [r7, #0]
 8005b1e:	4613      	mov	r3, r2
 8005b20:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005b22:	2300      	movs	r3, #0
 8005b24:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b2c:	2b01      	cmp	r3, #1
 8005b2e:	d101      	bne.n	8005b34 <HAL_SPI_Transmit+0x22>
 8005b30:	2302      	movs	r3, #2
 8005b32:	e126      	b.n	8005d82 <HAL_SPI_Transmit+0x270>
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005b3c:	f7fe f982 	bl	8003e44 <HAL_GetTick>
 8005b40:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005b42:	88fb      	ldrh	r3, [r7, #6]
 8005b44:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005b4c:	b2db      	uxtb	r3, r3
 8005b4e:	2b01      	cmp	r3, #1
 8005b50:	d002      	beq.n	8005b58 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005b52:	2302      	movs	r3, #2
 8005b54:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b56:	e10b      	b.n	8005d70 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d002      	beq.n	8005b64 <HAL_SPI_Transmit+0x52>
 8005b5e:	88fb      	ldrh	r3, [r7, #6]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d102      	bne.n	8005b6a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005b68:	e102      	b.n	8005d70 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2203      	movs	r2, #3
 8005b6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2200      	movs	r2, #0
 8005b76:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	68ba      	ldr	r2, [r7, #8]
 8005b7c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	88fa      	ldrh	r2, [r7, #6]
 8005b82:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	88fa      	ldrh	r2, [r7, #6]
 8005b88:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	2200      	movs	r2, #0
 8005b8e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	2200      	movs	r2, #0
 8005b94:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	2200      	movs	r2, #0
 8005b9a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	2200      	movs	r2, #0
 8005ba6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	689b      	ldr	r3, [r3, #8]
 8005bac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005bb0:	d10f      	bne.n	8005bd2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	68fb      	ldr	r3, [r7, #12]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005bc0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005bd0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bdc:	2b40      	cmp	r3, #64	; 0x40
 8005bde:	d007      	beq.n	8005bf0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	681a      	ldr	r2, [r3, #0]
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005bee:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	68db      	ldr	r3, [r3, #12]
 8005bf4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bf8:	d14b      	bne.n	8005c92 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	685b      	ldr	r3, [r3, #4]
 8005bfe:	2b00      	cmp	r3, #0
 8005c00:	d002      	beq.n	8005c08 <HAL_SPI_Transmit+0xf6>
 8005c02:	8afb      	ldrh	r3, [r7, #22]
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d13e      	bne.n	8005c86 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c0c:	881a      	ldrh	r2, [r3, #0]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c18:	1c9a      	adds	r2, r3, #2
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c22:	b29b      	uxth	r3, r3
 8005c24:	3b01      	subs	r3, #1
 8005c26:	b29a      	uxth	r2, r3
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005c2c:	e02b      	b.n	8005c86 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	689b      	ldr	r3, [r3, #8]
 8005c34:	f003 0302 	and.w	r3, r3, #2
 8005c38:	2b02      	cmp	r3, #2
 8005c3a:	d112      	bne.n	8005c62 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c40:	881a      	ldrh	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4c:	1c9a      	adds	r2, r3, #2
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c56:	b29b      	uxth	r3, r3
 8005c58:	3b01      	subs	r3, #1
 8005c5a:	b29a      	uxth	r2, r3
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005c60:	e011      	b.n	8005c86 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005c62:	f7fe f8ef 	bl	8003e44 <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	69bb      	ldr	r3, [r7, #24]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	683a      	ldr	r2, [r7, #0]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d803      	bhi.n	8005c7a <HAL_SPI_Transmit+0x168>
 8005c72:	683b      	ldr	r3, [r7, #0]
 8005c74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c78:	d102      	bne.n	8005c80 <HAL_SPI_Transmit+0x16e>
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d102      	bne.n	8005c86 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005c80:	2303      	movs	r3, #3
 8005c82:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005c84:	e074      	b.n	8005d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005c8a:	b29b      	uxth	r3, r3
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1ce      	bne.n	8005c2e <HAL_SPI_Transmit+0x11c>
 8005c90:	e04c      	b.n	8005d2c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	685b      	ldr	r3, [r3, #4]
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d002      	beq.n	8005ca0 <HAL_SPI_Transmit+0x18e>
 8005c9a:	8afb      	ldrh	r3, [r7, #22]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d140      	bne.n	8005d22 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	330c      	adds	r3, #12
 8005caa:	7812      	ldrb	r2, [r2, #0]
 8005cac:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cb2:	1c5a      	adds	r2, r3, #1
 8005cb4:	68fb      	ldr	r3, [r7, #12]
 8005cb6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cbc:	b29b      	uxth	r3, r3
 8005cbe:	3b01      	subs	r3, #1
 8005cc0:	b29a      	uxth	r2, r3
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005cc6:	e02c      	b.n	8005d22 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	689b      	ldr	r3, [r3, #8]
 8005cce:	f003 0302 	and.w	r3, r3, #2
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	d113      	bne.n	8005cfe <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	330c      	adds	r3, #12
 8005ce0:	7812      	ldrb	r2, [r2, #0]
 8005ce2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005ce4:	68fb      	ldr	r3, [r7, #12]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	1c5a      	adds	r2, r3, #1
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005cf2:	b29b      	uxth	r3, r3
 8005cf4:	3b01      	subs	r3, #1
 8005cf6:	b29a      	uxth	r2, r3
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005cfc:	e011      	b.n	8005d22 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005cfe:	f7fe f8a1 	bl	8003e44 <HAL_GetTick>
 8005d02:	4602      	mov	r2, r0
 8005d04:	69bb      	ldr	r3, [r7, #24]
 8005d06:	1ad3      	subs	r3, r2, r3
 8005d08:	683a      	ldr	r2, [r7, #0]
 8005d0a:	429a      	cmp	r2, r3
 8005d0c:	d803      	bhi.n	8005d16 <HAL_SPI_Transmit+0x204>
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d14:	d102      	bne.n	8005d1c <HAL_SPI_Transmit+0x20a>
 8005d16:	683b      	ldr	r3, [r7, #0]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d102      	bne.n	8005d22 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005d1c:	2303      	movs	r3, #3
 8005d1e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005d20:	e026      	b.n	8005d70 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005d26:	b29b      	uxth	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d1cd      	bne.n	8005cc8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005d2c:	69ba      	ldr	r2, [r7, #24]
 8005d2e:	6839      	ldr	r1, [r7, #0]
 8005d30:	68f8      	ldr	r0, [r7, #12]
 8005d32:	f000 f8b3 	bl	8005e9c <SPI_EndRxTxTransaction>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d002      	beq.n	8005d42 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	2220      	movs	r2, #32
 8005d40:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	689b      	ldr	r3, [r3, #8]
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d10a      	bne.n	8005d60 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	613b      	str	r3, [r7, #16]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68db      	ldr	r3, [r3, #12]
 8005d54:	613b      	str	r3, [r7, #16]
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	689b      	ldr	r3, [r3, #8]
 8005d5c:	613b      	str	r3, [r7, #16]
 8005d5e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d002      	beq.n	8005d6e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	77fb      	strb	r3, [r7, #31]
 8005d6c:	e000      	b.n	8005d70 <HAL_SPI_Transmit+0x25e>
  }

error:
 8005d6e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2201      	movs	r2, #1
 8005d74:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005d80:	7ffb      	ldrb	r3, [r7, #31]
}
 8005d82:	4618      	mov	r0, r3
 8005d84:	3720      	adds	r7, #32
 8005d86:	46bd      	mov	sp, r7
 8005d88:	bd80      	pop	{r7, pc}
	...

08005d8c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8005d8c:	b580      	push	{r7, lr}
 8005d8e:	b088      	sub	sp, #32
 8005d90:	af00      	add	r7, sp, #0
 8005d92:	60f8      	str	r0, [r7, #12]
 8005d94:	60b9      	str	r1, [r7, #8]
 8005d96:	603b      	str	r3, [r7, #0]
 8005d98:	4613      	mov	r3, r2
 8005d9a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8005d9c:	f7fe f852 	bl	8003e44 <HAL_GetTick>
 8005da0:	4602      	mov	r2, r0
 8005da2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005da4:	1a9b      	subs	r3, r3, r2
 8005da6:	683a      	ldr	r2, [r7, #0]
 8005da8:	4413      	add	r3, r2
 8005daa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8005dac:	f7fe f84a 	bl	8003e44 <HAL_GetTick>
 8005db0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005db2:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	015b      	lsls	r3, r3, #5
 8005db8:	0d1b      	lsrs	r3, r3, #20
 8005dba:	69fa      	ldr	r2, [r7, #28]
 8005dbc:	fb02 f303 	mul.w	r3, r2, r3
 8005dc0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005dc2:	e054      	b.n	8005e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dca:	d050      	beq.n	8005e6e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8005dcc:	f7fe f83a 	bl	8003e44 <HAL_GetTick>
 8005dd0:	4602      	mov	r2, r0
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	1ad3      	subs	r3, r2, r3
 8005dd6:	69fa      	ldr	r2, [r7, #28]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d902      	bls.n	8005de2 <SPI_WaitFlagStateUntilTimeout+0x56>
 8005ddc:	69fb      	ldr	r3, [r7, #28]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d13d      	bne.n	8005e5e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	685a      	ldr	r2, [r3, #4]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005df0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	685b      	ldr	r3, [r3, #4]
 8005df6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005dfa:	d111      	bne.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x94>
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e04:	d004      	beq.n	8005e10 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	689b      	ldr	r3, [r3, #8]
 8005e0a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005e0e:	d107      	bne.n	8005e20 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	681a      	ldr	r2, [r3, #0]
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e1e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e24:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005e28:	d10f      	bne.n	8005e4a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	681a      	ldr	r2, [r3, #0]
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	681a      	ldr	r2, [r3, #0]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005e48:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8005e5a:	2303      	movs	r3, #3
 8005e5c:	e017      	b.n	8005e8e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8005e5e:	697b      	ldr	r3, [r7, #20]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d101      	bne.n	8005e68 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005e64:	2300      	movs	r3, #0
 8005e66:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	3b01      	subs	r3, #1
 8005e6c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	689a      	ldr	r2, [r3, #8]
 8005e74:	68bb      	ldr	r3, [r7, #8]
 8005e76:	4013      	ands	r3, r2
 8005e78:	68ba      	ldr	r2, [r7, #8]
 8005e7a:	429a      	cmp	r2, r3
 8005e7c:	bf0c      	ite	eq
 8005e7e:	2301      	moveq	r3, #1
 8005e80:	2300      	movne	r3, #0
 8005e82:	b2db      	uxtb	r3, r3
 8005e84:	461a      	mov	r2, r3
 8005e86:	79fb      	ldrb	r3, [r7, #7]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d19b      	bne.n	8005dc4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8005e8c:	2300      	movs	r3, #0
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3720      	adds	r7, #32
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	200001ec 	.word	0x200001ec

08005e9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b088      	sub	sp, #32
 8005ea0:	af02      	add	r7, sp, #8
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <SPI_EndRxTxTransaction+0x7c>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	4a1b      	ldr	r2, [pc, #108]	; (8005f1c <SPI_EndRxTxTransaction+0x80>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	0d5b      	lsrs	r3, r3, #21
 8005eb4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005eb8:	fb02 f303 	mul.w	r3, r2, r3
 8005ebc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	685b      	ldr	r3, [r3, #4]
 8005ec2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005ec6:	d112      	bne.n	8005eee <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	9300      	str	r3, [sp, #0]
 8005ecc:	68bb      	ldr	r3, [r7, #8]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	2180      	movs	r1, #128	; 0x80
 8005ed2:	68f8      	ldr	r0, [r7, #12]
 8005ed4:	f7ff ff5a 	bl	8005d8c <SPI_WaitFlagStateUntilTimeout>
 8005ed8:	4603      	mov	r3, r0
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d016      	beq.n	8005f0c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ee2:	f043 0220 	orr.w	r2, r3, #32
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8005eea:	2303      	movs	r3, #3
 8005eec:	e00f      	b.n	8005f0e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d00a      	beq.n	8005f0a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005ef4:	697b      	ldr	r3, [r7, #20]
 8005ef6:	3b01      	subs	r3, #1
 8005ef8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	689b      	ldr	r3, [r3, #8]
 8005f00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f04:	2b80      	cmp	r3, #128	; 0x80
 8005f06:	d0f2      	beq.n	8005eee <SPI_EndRxTxTransaction+0x52>
 8005f08:	e000      	b.n	8005f0c <SPI_EndRxTxTransaction+0x70>
        break;
 8005f0a:	bf00      	nop
  }

  return HAL_OK;
 8005f0c:	2300      	movs	r3, #0
}
 8005f0e:	4618      	mov	r0, r3
 8005f10:	3718      	adds	r7, #24
 8005f12:	46bd      	mov	sp, r7
 8005f14:	bd80      	pop	{r7, pc}
 8005f16:	bf00      	nop
 8005f18:	200001ec 	.word	0x200001ec
 8005f1c:	165e9f81 	.word	0x165e9f81

08005f20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d101      	bne.n	8005f32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005f2e:	2301      	movs	r3, #1
 8005f30:	e041      	b.n	8005fb6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	b2db      	uxtb	r3, r3
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d106      	bne.n	8005f4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	2200      	movs	r2, #0
 8005f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005f46:	6878      	ldr	r0, [r7, #4]
 8005f48:	f7fd f882 	bl	8003050 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2202      	movs	r2, #2
 8005f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	681a      	ldr	r2, [r3, #0]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	3304      	adds	r3, #4
 8005f5c:	4619      	mov	r1, r3
 8005f5e:	4610      	mov	r0, r2
 8005f60:	f000 fcd0 	bl	8006904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2201      	movs	r2, #1
 8005fa0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2201      	movs	r2, #1
 8005fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005fb4:	2300      	movs	r3, #0
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3708      	adds	r7, #8
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
	...

08005fc0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005fc0:	b480      	push	{r7}
 8005fc2:	b085      	sub	sp, #20
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fce:	b2db      	uxtb	r3, r3
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d001      	beq.n	8005fd8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005fd4:	2301      	movs	r3, #1
 8005fd6:	e046      	b.n	8006066 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	4a23      	ldr	r2, [pc, #140]	; (8006074 <HAL_TIM_Base_Start+0xb4>)
 8005fe6:	4293      	cmp	r3, r2
 8005fe8:	d022      	beq.n	8006030 <HAL_TIM_Base_Start+0x70>
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ff2:	d01d      	beq.n	8006030 <HAL_TIM_Base_Start+0x70>
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4a1f      	ldr	r2, [pc, #124]	; (8006078 <HAL_TIM_Base_Start+0xb8>)
 8005ffa:	4293      	cmp	r3, r2
 8005ffc:	d018      	beq.n	8006030 <HAL_TIM_Base_Start+0x70>
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4a1e      	ldr	r2, [pc, #120]	; (800607c <HAL_TIM_Base_Start+0xbc>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d013      	beq.n	8006030 <HAL_TIM_Base_Start+0x70>
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	4a1c      	ldr	r2, [pc, #112]	; (8006080 <HAL_TIM_Base_Start+0xc0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d00e      	beq.n	8006030 <HAL_TIM_Base_Start+0x70>
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	4a1b      	ldr	r2, [pc, #108]	; (8006084 <HAL_TIM_Base_Start+0xc4>)
 8006018:	4293      	cmp	r3, r2
 800601a:	d009      	beq.n	8006030 <HAL_TIM_Base_Start+0x70>
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	4a19      	ldr	r2, [pc, #100]	; (8006088 <HAL_TIM_Base_Start+0xc8>)
 8006022:	4293      	cmp	r3, r2
 8006024:	d004      	beq.n	8006030 <HAL_TIM_Base_Start+0x70>
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a18      	ldr	r2, [pc, #96]	; (800608c <HAL_TIM_Base_Start+0xcc>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d111      	bne.n	8006054 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0307 	and.w	r3, r3, #7
 800603a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b06      	cmp	r3, #6
 8006040:	d010      	beq.n	8006064 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	681a      	ldr	r2, [r3, #0]
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f042 0201 	orr.w	r2, r2, #1
 8006050:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006052:	e007      	b.n	8006064 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	681a      	ldr	r2, [r3, #0]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f042 0201 	orr.w	r2, r2, #1
 8006062:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006064:	2300      	movs	r3, #0
}
 8006066:	4618      	mov	r0, r3
 8006068:	3714      	adds	r7, #20
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr
 8006072:	bf00      	nop
 8006074:	40010000 	.word	0x40010000
 8006078:	40000400 	.word	0x40000400
 800607c:	40000800 	.word	0x40000800
 8006080:	40000c00 	.word	0x40000c00
 8006084:	40010400 	.word	0x40010400
 8006088:	40014000 	.word	0x40014000
 800608c:	40001800 	.word	0x40001800

08006090 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006090:	b480      	push	{r7}
 8006092:	b085      	sub	sp, #20
 8006094:	af00      	add	r7, sp, #0
 8006096:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800609e:	b2db      	uxtb	r3, r3
 80060a0:	2b01      	cmp	r3, #1
 80060a2:	d001      	beq.n	80060a8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80060a4:	2301      	movs	r3, #1
 80060a6:	e04e      	b.n	8006146 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	68da      	ldr	r2, [r3, #12]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	f042 0201 	orr.w	r2, r2, #1
 80060be:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a23      	ldr	r2, [pc, #140]	; (8006154 <HAL_TIM_Base_Start_IT+0xc4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d022      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x80>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060d2:	d01d      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x80>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	4a1f      	ldr	r2, [pc, #124]	; (8006158 <HAL_TIM_Base_Start_IT+0xc8>)
 80060da:	4293      	cmp	r3, r2
 80060dc:	d018      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x80>
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4a1e      	ldr	r2, [pc, #120]	; (800615c <HAL_TIM_Base_Start_IT+0xcc>)
 80060e4:	4293      	cmp	r3, r2
 80060e6:	d013      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x80>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	4a1c      	ldr	r2, [pc, #112]	; (8006160 <HAL_TIM_Base_Start_IT+0xd0>)
 80060ee:	4293      	cmp	r3, r2
 80060f0:	d00e      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x80>
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4a1b      	ldr	r2, [pc, #108]	; (8006164 <HAL_TIM_Base_Start_IT+0xd4>)
 80060f8:	4293      	cmp	r3, r2
 80060fa:	d009      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x80>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4a19      	ldr	r2, [pc, #100]	; (8006168 <HAL_TIM_Base_Start_IT+0xd8>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d004      	beq.n	8006110 <HAL_TIM_Base_Start_IT+0x80>
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4a18      	ldr	r2, [pc, #96]	; (800616c <HAL_TIM_Base_Start_IT+0xdc>)
 800610c:	4293      	cmp	r3, r2
 800610e:	d111      	bne.n	8006134 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	689b      	ldr	r3, [r3, #8]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	2b06      	cmp	r3, #6
 8006120:	d010      	beq.n	8006144 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f042 0201 	orr.w	r2, r2, #1
 8006130:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006132:	e007      	b.n	8006144 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	681a      	ldr	r2, [r3, #0]
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f042 0201 	orr.w	r2, r2, #1
 8006142:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	3714      	adds	r7, #20
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	40010000 	.word	0x40010000
 8006158:	40000400 	.word	0x40000400
 800615c:	40000800 	.word	0x40000800
 8006160:	40000c00 	.word	0x40000c00
 8006164:	40010400 	.word	0x40010400
 8006168:	40014000 	.word	0x40014000
 800616c:	40001800 	.word	0x40001800

08006170 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b082      	sub	sp, #8
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	2b00      	cmp	r3, #0
 800617c:	d101      	bne.n	8006182 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e041      	b.n	8006206 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d106      	bne.n	800619c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	2200      	movs	r2, #0
 8006192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8006196:	6878      	ldr	r0, [r7, #4]
 8006198:	f7fc ffd8 	bl	800314c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2202      	movs	r2, #2
 80061a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	3304      	adds	r3, #4
 80061ac:	4619      	mov	r1, r3
 80061ae:	4610      	mov	r0, r2
 80061b0:	f000 fba8 	bl	8006904 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	2201      	movs	r2, #1
 80061d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	2201      	movs	r2, #1
 80061e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2201      	movs	r2, #1
 80061f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006204:	2300      	movs	r3, #0
}
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d109      	bne.n	8006234 <HAL_TIM_PWM_Start+0x24>
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b01      	cmp	r3, #1
 800622a:	bf14      	ite	ne
 800622c:	2301      	movne	r3, #1
 800622e:	2300      	moveq	r3, #0
 8006230:	b2db      	uxtb	r3, r3
 8006232:	e022      	b.n	800627a <HAL_TIM_PWM_Start+0x6a>
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	2b04      	cmp	r3, #4
 8006238:	d109      	bne.n	800624e <HAL_TIM_PWM_Start+0x3e>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006240:	b2db      	uxtb	r3, r3
 8006242:	2b01      	cmp	r3, #1
 8006244:	bf14      	ite	ne
 8006246:	2301      	movne	r3, #1
 8006248:	2300      	moveq	r3, #0
 800624a:	b2db      	uxtb	r3, r3
 800624c:	e015      	b.n	800627a <HAL_TIM_PWM_Start+0x6a>
 800624e:	683b      	ldr	r3, [r7, #0]
 8006250:	2b08      	cmp	r3, #8
 8006252:	d109      	bne.n	8006268 <HAL_TIM_PWM_Start+0x58>
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800625a:	b2db      	uxtb	r3, r3
 800625c:	2b01      	cmp	r3, #1
 800625e:	bf14      	ite	ne
 8006260:	2301      	movne	r3, #1
 8006262:	2300      	moveq	r3, #0
 8006264:	b2db      	uxtb	r3, r3
 8006266:	e008      	b.n	800627a <HAL_TIM_PWM_Start+0x6a>
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800626e:	b2db      	uxtb	r3, r3
 8006270:	2b01      	cmp	r3, #1
 8006272:	bf14      	ite	ne
 8006274:	2301      	movne	r3, #1
 8006276:	2300      	moveq	r3, #0
 8006278:	b2db      	uxtb	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d001      	beq.n	8006282 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800627e:	2301      	movs	r3, #1
 8006280:	e07c      	b.n	800637c <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d104      	bne.n	8006292 <HAL_TIM_PWM_Start+0x82>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006290:	e013      	b.n	80062ba <HAL_TIM_PWM_Start+0xaa>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	2b04      	cmp	r3, #4
 8006296:	d104      	bne.n	80062a2 <HAL_TIM_PWM_Start+0x92>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	2202      	movs	r2, #2
 800629c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80062a0:	e00b      	b.n	80062ba <HAL_TIM_PWM_Start+0xaa>
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	2b08      	cmp	r3, #8
 80062a6:	d104      	bne.n	80062b2 <HAL_TIM_PWM_Start+0xa2>
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2202      	movs	r2, #2
 80062ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80062b0:	e003      	b.n	80062ba <HAL_TIM_PWM_Start+0xaa>
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	2202      	movs	r2, #2
 80062b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	2201      	movs	r2, #1
 80062c0:	6839      	ldr	r1, [r7, #0]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fe08 	bl	8006ed8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a2d      	ldr	r2, [pc, #180]	; (8006384 <HAL_TIM_PWM_Start+0x174>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_TIM_PWM_Start+0xcc>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a2c      	ldr	r2, [pc, #176]	; (8006388 <HAL_TIM_PWM_Start+0x178>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d101      	bne.n	80062e0 <HAL_TIM_PWM_Start+0xd0>
 80062dc:	2301      	movs	r3, #1
 80062de:	e000      	b.n	80062e2 <HAL_TIM_PWM_Start+0xd2>
 80062e0:	2300      	movs	r3, #0
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d007      	beq.n	80062f6 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80062f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a22      	ldr	r2, [pc, #136]	; (8006384 <HAL_TIM_PWM_Start+0x174>)
 80062fc:	4293      	cmp	r3, r2
 80062fe:	d022      	beq.n	8006346 <HAL_TIM_PWM_Start+0x136>
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006308:	d01d      	beq.n	8006346 <HAL_TIM_PWM_Start+0x136>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	4a1f      	ldr	r2, [pc, #124]	; (800638c <HAL_TIM_PWM_Start+0x17c>)
 8006310:	4293      	cmp	r3, r2
 8006312:	d018      	beq.n	8006346 <HAL_TIM_PWM_Start+0x136>
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	4a1d      	ldr	r2, [pc, #116]	; (8006390 <HAL_TIM_PWM_Start+0x180>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d013      	beq.n	8006346 <HAL_TIM_PWM_Start+0x136>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	4a1c      	ldr	r2, [pc, #112]	; (8006394 <HAL_TIM_PWM_Start+0x184>)
 8006324:	4293      	cmp	r3, r2
 8006326:	d00e      	beq.n	8006346 <HAL_TIM_PWM_Start+0x136>
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	4a16      	ldr	r2, [pc, #88]	; (8006388 <HAL_TIM_PWM_Start+0x178>)
 800632e:	4293      	cmp	r3, r2
 8006330:	d009      	beq.n	8006346 <HAL_TIM_PWM_Start+0x136>
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	4a18      	ldr	r2, [pc, #96]	; (8006398 <HAL_TIM_PWM_Start+0x188>)
 8006338:	4293      	cmp	r3, r2
 800633a:	d004      	beq.n	8006346 <HAL_TIM_PWM_Start+0x136>
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	4a16      	ldr	r2, [pc, #88]	; (800639c <HAL_TIM_PWM_Start+0x18c>)
 8006342:	4293      	cmp	r3, r2
 8006344:	d111      	bne.n	800636a <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	689b      	ldr	r3, [r3, #8]
 800634c:	f003 0307 	and.w	r3, r3, #7
 8006350:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2b06      	cmp	r3, #6
 8006356:	d010      	beq.n	800637a <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f042 0201 	orr.w	r2, r2, #1
 8006366:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006368:	e007      	b.n	800637a <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	681a      	ldr	r2, [r3, #0]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	f042 0201 	orr.w	r2, r2, #1
 8006378:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800637a:	2300      	movs	r3, #0
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}
 8006384:	40010000 	.word	0x40010000
 8006388:	40010400 	.word	0x40010400
 800638c:	40000400 	.word	0x40000400
 8006390:	40000800 	.word	0x40000800
 8006394:	40000c00 	.word	0x40000c00
 8006398:	40014000 	.word	0x40014000
 800639c:	40001800 	.word	0x40001800

080063a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b082      	sub	sp, #8
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	691b      	ldr	r3, [r3, #16]
 80063ae:	f003 0302 	and.w	r3, r3, #2
 80063b2:	2b02      	cmp	r3, #2
 80063b4:	d122      	bne.n	80063fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	68db      	ldr	r3, [r3, #12]
 80063bc:	f003 0302 	and.w	r3, r3, #2
 80063c0:	2b02      	cmp	r3, #2
 80063c2:	d11b      	bne.n	80063fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f06f 0202 	mvn.w	r2, #2
 80063cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2201      	movs	r2, #1
 80063d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	699b      	ldr	r3, [r3, #24]
 80063da:	f003 0303 	and.w	r3, r3, #3
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d003      	beq.n	80063ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80063e2:	6878      	ldr	r0, [r7, #4]
 80063e4:	f000 fa70 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 80063e8:	e005      	b.n	80063f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 fa62 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80063f0:	6878      	ldr	r0, [r7, #4]
 80063f2:	f000 fa73 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f003 0304 	and.w	r3, r3, #4
 8006406:	2b04      	cmp	r3, #4
 8006408:	d122      	bne.n	8006450 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	f003 0304 	and.w	r3, r3, #4
 8006414:	2b04      	cmp	r3, #4
 8006416:	d11b      	bne.n	8006450 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f06f 0204 	mvn.w	r2, #4
 8006420:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2202      	movs	r2, #2
 8006426:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	699b      	ldr	r3, [r3, #24]
 800642e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006432:	2b00      	cmp	r3, #0
 8006434:	d003      	beq.n	800643e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006436:	6878      	ldr	r0, [r7, #4]
 8006438:	f000 fa46 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 800643c:	e005      	b.n	800644a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800643e:	6878      	ldr	r0, [r7, #4]
 8006440:	f000 fa38 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f000 fa49 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2200      	movs	r2, #0
 800644e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	691b      	ldr	r3, [r3, #16]
 8006456:	f003 0308 	and.w	r3, r3, #8
 800645a:	2b08      	cmp	r3, #8
 800645c:	d122      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	68db      	ldr	r3, [r3, #12]
 8006464:	f003 0308 	and.w	r3, r3, #8
 8006468:	2b08      	cmp	r3, #8
 800646a:	d11b      	bne.n	80064a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	f06f 0208 	mvn.w	r2, #8
 8006474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2204      	movs	r2, #4
 800647a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f003 0303 	and.w	r3, r3, #3
 8006486:	2b00      	cmp	r3, #0
 8006488:	d003      	beq.n	8006492 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f000 fa1c 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 8006490:	e005      	b.n	800649e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f000 fa0e 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fa1f 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2200      	movs	r2, #0
 80064a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	691b      	ldr	r3, [r3, #16]
 80064aa:	f003 0310 	and.w	r3, r3, #16
 80064ae:	2b10      	cmp	r3, #16
 80064b0:	d122      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	f003 0310 	and.w	r3, r3, #16
 80064bc:	2b10      	cmp	r3, #16
 80064be:	d11b      	bne.n	80064f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f06f 0210 	mvn.w	r2, #16
 80064c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2208      	movs	r2, #8
 80064ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	69db      	ldr	r3, [r3, #28]
 80064d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d003      	beq.n	80064e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f9f2 	bl	80068c8 <HAL_TIM_IC_CaptureCallback>
 80064e4:	e005      	b.n	80064f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80064e6:	6878      	ldr	r0, [r7, #4]
 80064e8:	f000 f9e4 	bl	80068b4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80064ec:	6878      	ldr	r0, [r7, #4]
 80064ee:	f000 f9f5 	bl	80068dc <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2200      	movs	r2, #0
 80064f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0301 	and.w	r3, r3, #1
 8006502:	2b01      	cmp	r3, #1
 8006504:	d10e      	bne.n	8006524 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	68db      	ldr	r3, [r3, #12]
 800650c:	f003 0301 	and.w	r3, r3, #1
 8006510:	2b01      	cmp	r3, #1
 8006512:	d107      	bne.n	8006524 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	f06f 0201 	mvn.w	r2, #1
 800651c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fb fe8c 	bl	800223c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	691b      	ldr	r3, [r3, #16]
 800652a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800652e:	2b80      	cmp	r3, #128	; 0x80
 8006530:	d10e      	bne.n	8006550 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	68db      	ldr	r3, [r3, #12]
 8006538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800653c:	2b80      	cmp	r3, #128	; 0x80
 800653e:	d107      	bne.n	8006550 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006548:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 fdc2 	bl	80070d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800655a:	2b40      	cmp	r3, #64	; 0x40
 800655c:	d10e      	bne.n	800657c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	68db      	ldr	r3, [r3, #12]
 8006564:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006568:	2b40      	cmp	r3, #64	; 0x40
 800656a:	d107      	bne.n	800657c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 f9ba 	bl	80068f0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	691b      	ldr	r3, [r3, #16]
 8006582:	f003 0320 	and.w	r3, r3, #32
 8006586:	2b20      	cmp	r3, #32
 8006588:	d10e      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	f003 0320 	and.w	r3, r3, #32
 8006594:	2b20      	cmp	r3, #32
 8006596:	d107      	bne.n	80065a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	f06f 0220 	mvn.w	r2, #32
 80065a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80065a2:	6878      	ldr	r0, [r7, #4]
 80065a4:	f000 fd8c 	bl	80070c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80065a8:	bf00      	nop
 80065aa:	3708      	adds	r7, #8
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}

080065b0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80065b0:	b580      	push	{r7, lr}
 80065b2:	b084      	sub	sp, #16
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	60f8      	str	r0, [r7, #12]
 80065b8:	60b9      	str	r1, [r7, #8]
 80065ba:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c2:	2b01      	cmp	r3, #1
 80065c4:	d101      	bne.n	80065ca <HAL_TIM_PWM_ConfigChannel+0x1a>
 80065c6:	2302      	movs	r3, #2
 80065c8:	e0ac      	b.n	8006724 <HAL_TIM_PWM_ConfigChannel+0x174>
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	2201      	movs	r2, #1
 80065ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2b0c      	cmp	r3, #12
 80065d6:	f200 809f 	bhi.w	8006718 <HAL_TIM_PWM_ConfigChannel+0x168>
 80065da:	a201      	add	r2, pc, #4	; (adr r2, 80065e0 <HAL_TIM_PWM_ConfigChannel+0x30>)
 80065dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065e0:	08006615 	.word	0x08006615
 80065e4:	08006719 	.word	0x08006719
 80065e8:	08006719 	.word	0x08006719
 80065ec:	08006719 	.word	0x08006719
 80065f0:	08006655 	.word	0x08006655
 80065f4:	08006719 	.word	0x08006719
 80065f8:	08006719 	.word	0x08006719
 80065fc:	08006719 	.word	0x08006719
 8006600:	08006697 	.word	0x08006697
 8006604:	08006719 	.word	0x08006719
 8006608:	08006719 	.word	0x08006719
 800660c:	08006719 	.word	0x08006719
 8006610:	080066d7 	.word	0x080066d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	68b9      	ldr	r1, [r7, #8]
 800661a:	4618      	mov	r0, r3
 800661c:	f000 fa12 	bl	8006a44 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681b      	ldr	r3, [r3, #0]
 8006624:	699a      	ldr	r2, [r3, #24]
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f042 0208 	orr.w	r2, r2, #8
 800662e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	699a      	ldr	r2, [r3, #24]
 8006636:	68fb      	ldr	r3, [r7, #12]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0204 	bic.w	r2, r2, #4
 800663e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6999      	ldr	r1, [r3, #24]
 8006646:	68bb      	ldr	r3, [r7, #8]
 8006648:	691a      	ldr	r2, [r3, #16]
 800664a:	68fb      	ldr	r3, [r7, #12]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	430a      	orrs	r2, r1
 8006650:	619a      	str	r2, [r3, #24]
      break;
 8006652:	e062      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	68b9      	ldr	r1, [r7, #8]
 800665a:	4618      	mov	r0, r3
 800665c:	f000 fa62 	bl	8006b24 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699a      	ldr	r2, [r3, #24]
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800666e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006670:	68fb      	ldr	r3, [r7, #12]
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	699a      	ldr	r2, [r3, #24]
 8006676:	68fb      	ldr	r3, [r7, #12]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800667e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	6999      	ldr	r1, [r3, #24]
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	691b      	ldr	r3, [r3, #16]
 800668a:	021a      	lsls	r2, r3, #8
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	430a      	orrs	r2, r1
 8006692:	619a      	str	r2, [r3, #24]
      break;
 8006694:	e041      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	68b9      	ldr	r1, [r7, #8]
 800669c:	4618      	mov	r0, r3
 800669e:	f000 fab7 	bl	8006c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	69da      	ldr	r2, [r3, #28]
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f042 0208 	orr.w	r2, r2, #8
 80066b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	69da      	ldr	r2, [r3, #28]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 0204 	bic.w	r2, r2, #4
 80066c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	69d9      	ldr	r1, [r3, #28]
 80066c8:	68bb      	ldr	r3, [r7, #8]
 80066ca:	691a      	ldr	r2, [r3, #16]
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	430a      	orrs	r2, r1
 80066d2:	61da      	str	r2, [r3, #28]
      break;
 80066d4:	e021      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	68b9      	ldr	r1, [r7, #8]
 80066dc:	4618      	mov	r0, r3
 80066de:	f000 fb0b 	bl	8006cf8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	69da      	ldr	r2, [r3, #28]
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	69da      	ldr	r2, [r3, #28]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006700:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	69d9      	ldr	r1, [r3, #28]
 8006708:	68bb      	ldr	r3, [r7, #8]
 800670a:	691b      	ldr	r3, [r3, #16]
 800670c:	021a      	lsls	r2, r3, #8
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	430a      	orrs	r2, r1
 8006714:	61da      	str	r2, [r3, #28]
      break;
 8006716:	e000      	b.n	800671a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006718:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	2200      	movs	r2, #0
 800671e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006722:	2300      	movs	r3, #0
}
 8006724:	4618      	mov	r0, r3
 8006726:	3710      	adds	r7, #16
 8006728:	46bd      	mov	sp, r7
 800672a:	bd80      	pop	{r7, pc}

0800672c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b084      	sub	sp, #16
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
 8006734:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800673c:	2b01      	cmp	r3, #1
 800673e:	d101      	bne.n	8006744 <HAL_TIM_ConfigClockSource+0x18>
 8006740:	2302      	movs	r3, #2
 8006742:	e0b3      	b.n	80068ac <HAL_TIM_ConfigClockSource+0x180>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	2201      	movs	r2, #1
 8006748:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2202      	movs	r2, #2
 8006750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	689b      	ldr	r3, [r3, #8]
 800675a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800675c:	68fb      	ldr	r3, [r7, #12]
 800675e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006762:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800676a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68fa      	ldr	r2, [r7, #12]
 8006772:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006774:	683b      	ldr	r3, [r7, #0]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800677c:	d03e      	beq.n	80067fc <HAL_TIM_ConfigClockSource+0xd0>
 800677e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006782:	f200 8087 	bhi.w	8006894 <HAL_TIM_ConfigClockSource+0x168>
 8006786:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800678a:	f000 8085 	beq.w	8006898 <HAL_TIM_ConfigClockSource+0x16c>
 800678e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006792:	d87f      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
 8006794:	2b70      	cmp	r3, #112	; 0x70
 8006796:	d01a      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0xa2>
 8006798:	2b70      	cmp	r3, #112	; 0x70
 800679a:	d87b      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
 800679c:	2b60      	cmp	r3, #96	; 0x60
 800679e:	d050      	beq.n	8006842 <HAL_TIM_ConfigClockSource+0x116>
 80067a0:	2b60      	cmp	r3, #96	; 0x60
 80067a2:	d877      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
 80067a4:	2b50      	cmp	r3, #80	; 0x50
 80067a6:	d03c      	beq.n	8006822 <HAL_TIM_ConfigClockSource+0xf6>
 80067a8:	2b50      	cmp	r3, #80	; 0x50
 80067aa:	d873      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
 80067ac:	2b40      	cmp	r3, #64	; 0x40
 80067ae:	d058      	beq.n	8006862 <HAL_TIM_ConfigClockSource+0x136>
 80067b0:	2b40      	cmp	r3, #64	; 0x40
 80067b2:	d86f      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
 80067b4:	2b30      	cmp	r3, #48	; 0x30
 80067b6:	d064      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x156>
 80067b8:	2b30      	cmp	r3, #48	; 0x30
 80067ba:	d86b      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
 80067bc:	2b20      	cmp	r3, #32
 80067be:	d060      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x156>
 80067c0:	2b20      	cmp	r3, #32
 80067c2:	d867      	bhi.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d05c      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x156>
 80067c8:	2b10      	cmp	r3, #16
 80067ca:	d05a      	beq.n	8006882 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80067cc:	e062      	b.n	8006894 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6899      	ldr	r1, [r3, #8]
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685a      	ldr	r2, [r3, #4]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	68db      	ldr	r3, [r3, #12]
 80067de:	f000 fb5b 	bl	8006e98 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067f0:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	609a      	str	r2, [r3, #8]
      break;
 80067fa:	e04e      	b.n	800689a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	6818      	ldr	r0, [r3, #0]
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	6899      	ldr	r1, [r3, #8]
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	685a      	ldr	r2, [r3, #4]
 8006808:	683b      	ldr	r3, [r7, #0]
 800680a:	68db      	ldr	r3, [r3, #12]
 800680c:	f000 fb44 	bl	8006e98 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	689a      	ldr	r2, [r3, #8]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800681e:	609a      	str	r2, [r3, #8]
      break;
 8006820:	e03b      	b.n	800689a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	6818      	ldr	r0, [r3, #0]
 8006826:	683b      	ldr	r3, [r7, #0]
 8006828:	6859      	ldr	r1, [r3, #4]
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	68db      	ldr	r3, [r3, #12]
 800682e:	461a      	mov	r2, r3
 8006830:	f000 fab8 	bl	8006da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2150      	movs	r1, #80	; 0x50
 800683a:	4618      	mov	r0, r3
 800683c:	f000 fb11 	bl	8006e62 <TIM_ITRx_SetConfig>
      break;
 8006840:	e02b      	b.n	800689a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6818      	ldr	r0, [r3, #0]
 8006846:	683b      	ldr	r3, [r7, #0]
 8006848:	6859      	ldr	r1, [r3, #4]
 800684a:	683b      	ldr	r3, [r7, #0]
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	461a      	mov	r2, r3
 8006850:	f000 fad7 	bl	8006e02 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	2160      	movs	r1, #96	; 0x60
 800685a:	4618      	mov	r0, r3
 800685c:	f000 fb01 	bl	8006e62 <TIM_ITRx_SetConfig>
      break;
 8006860:	e01b      	b.n	800689a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	6818      	ldr	r0, [r3, #0]
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	6859      	ldr	r1, [r3, #4]
 800686a:	683b      	ldr	r3, [r7, #0]
 800686c:	68db      	ldr	r3, [r3, #12]
 800686e:	461a      	mov	r2, r3
 8006870:	f000 fa98 	bl	8006da4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2140      	movs	r1, #64	; 0x40
 800687a:	4618      	mov	r0, r3
 800687c:	f000 faf1 	bl	8006e62 <TIM_ITRx_SetConfig>
      break;
 8006880:	e00b      	b.n	800689a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681a      	ldr	r2, [r3, #0]
 8006886:	683b      	ldr	r3, [r7, #0]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	4619      	mov	r1, r3
 800688c:	4610      	mov	r0, r2
 800688e:	f000 fae8 	bl	8006e62 <TIM_ITRx_SetConfig>
        break;
 8006892:	e002      	b.n	800689a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006894:	bf00      	nop
 8006896:	e000      	b.n	800689a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006898:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	2200      	movs	r2, #0
 80068a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80068aa:	2300      	movs	r3, #0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3710      	adds	r7, #16
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b083      	sub	sp, #12
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80068bc:	bf00      	nop
 80068be:	370c      	adds	r7, #12
 80068c0:	46bd      	mov	sp, r7
 80068c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c6:	4770      	bx	lr

080068c8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
 80068ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80068d0:	bf00      	nop
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068da:	4770      	bx	lr

080068dc <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80068dc:	b480      	push	{r7}
 80068de:	b083      	sub	sp, #12
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80068e4:	bf00      	nop
 80068e6:	370c      	adds	r7, #12
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr

080068f0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068f0:	b480      	push	{r7}
 80068f2:	b083      	sub	sp, #12
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068f8:	bf00      	nop
 80068fa:	370c      	adds	r7, #12
 80068fc:	46bd      	mov	sp, r7
 80068fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006902:	4770      	bx	lr

08006904 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006904:	b480      	push	{r7}
 8006906:	b085      	sub	sp, #20
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
 800690c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	4a40      	ldr	r2, [pc, #256]	; (8006a18 <TIM_Base_SetConfig+0x114>)
 8006918:	4293      	cmp	r3, r2
 800691a:	d013      	beq.n	8006944 <TIM_Base_SetConfig+0x40>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006922:	d00f      	beq.n	8006944 <TIM_Base_SetConfig+0x40>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	4a3d      	ldr	r2, [pc, #244]	; (8006a1c <TIM_Base_SetConfig+0x118>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d00b      	beq.n	8006944 <TIM_Base_SetConfig+0x40>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a3c      	ldr	r2, [pc, #240]	; (8006a20 <TIM_Base_SetConfig+0x11c>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d007      	beq.n	8006944 <TIM_Base_SetConfig+0x40>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a3b      	ldr	r2, [pc, #236]	; (8006a24 <TIM_Base_SetConfig+0x120>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d003      	beq.n	8006944 <TIM_Base_SetConfig+0x40>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a3a      	ldr	r2, [pc, #232]	; (8006a28 <TIM_Base_SetConfig+0x124>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d108      	bne.n	8006956 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a2f      	ldr	r2, [pc, #188]	; (8006a18 <TIM_Base_SetConfig+0x114>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d02b      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006964:	d027      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a2c      	ldr	r2, [pc, #176]	; (8006a1c <TIM_Base_SetConfig+0x118>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d023      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a2b      	ldr	r2, [pc, #172]	; (8006a20 <TIM_Base_SetConfig+0x11c>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d01f      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a2a      	ldr	r2, [pc, #168]	; (8006a24 <TIM_Base_SetConfig+0x120>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d01b      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a29      	ldr	r2, [pc, #164]	; (8006a28 <TIM_Base_SetConfig+0x124>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d017      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a28      	ldr	r2, [pc, #160]	; (8006a2c <TIM_Base_SetConfig+0x128>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d013      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a27      	ldr	r2, [pc, #156]	; (8006a30 <TIM_Base_SetConfig+0x12c>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d00f      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	4a26      	ldr	r2, [pc, #152]	; (8006a34 <TIM_Base_SetConfig+0x130>)
 800699a:	4293      	cmp	r3, r2
 800699c:	d00b      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	4a25      	ldr	r2, [pc, #148]	; (8006a38 <TIM_Base_SetConfig+0x134>)
 80069a2:	4293      	cmp	r3, r2
 80069a4:	d007      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	4a24      	ldr	r2, [pc, #144]	; (8006a3c <TIM_Base_SetConfig+0x138>)
 80069aa:	4293      	cmp	r3, r2
 80069ac:	d003      	beq.n	80069b6 <TIM_Base_SetConfig+0xb2>
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	4a23      	ldr	r2, [pc, #140]	; (8006a40 <TIM_Base_SetConfig+0x13c>)
 80069b2:	4293      	cmp	r3, r2
 80069b4:	d108      	bne.n	80069c8 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80069be:	683b      	ldr	r3, [r7, #0]
 80069c0:	68db      	ldr	r3, [r3, #12]
 80069c2:	68fa      	ldr	r2, [r7, #12]
 80069c4:	4313      	orrs	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ce:	683b      	ldr	r3, [r7, #0]
 80069d0:	695b      	ldr	r3, [r3, #20]
 80069d2:	4313      	orrs	r3, r2
 80069d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	689a      	ldr	r2, [r3, #8]
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4a0a      	ldr	r2, [pc, #40]	; (8006a18 <TIM_Base_SetConfig+0x114>)
 80069f0:	4293      	cmp	r3, r2
 80069f2:	d003      	beq.n	80069fc <TIM_Base_SetConfig+0xf8>
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	4a0c      	ldr	r2, [pc, #48]	; (8006a28 <TIM_Base_SetConfig+0x124>)
 80069f8:	4293      	cmp	r3, r2
 80069fa:	d103      	bne.n	8006a04 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	691a      	ldr	r2, [r3, #16]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	615a      	str	r2, [r3, #20]
}
 8006a0a:	bf00      	nop
 8006a0c:	3714      	adds	r7, #20
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a14:	4770      	bx	lr
 8006a16:	bf00      	nop
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40000400 	.word	0x40000400
 8006a20:	40000800 	.word	0x40000800
 8006a24:	40000c00 	.word	0x40000c00
 8006a28:	40010400 	.word	0x40010400
 8006a2c:	40014000 	.word	0x40014000
 8006a30:	40014400 	.word	0x40014400
 8006a34:	40014800 	.word	0x40014800
 8006a38:	40001800 	.word	0x40001800
 8006a3c:	40001c00 	.word	0x40001c00
 8006a40:	40002000 	.word	0x40002000

08006a44 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b087      	sub	sp, #28
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	6a1b      	ldr	r3, [r3, #32]
 8006a52:	f023 0201 	bic.w	r2, r3, #1
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	6a1b      	ldr	r3, [r3, #32]
 8006a5e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	699b      	ldr	r3, [r3, #24]
 8006a6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a72:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0303 	bic.w	r3, r3, #3
 8006a7a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4313      	orrs	r3, r2
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	f023 0302 	bic.w	r3, r3, #2
 8006a8c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	689b      	ldr	r3, [r3, #8]
 8006a92:	697a      	ldr	r2, [r7, #20]
 8006a94:	4313      	orrs	r3, r2
 8006a96:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4a20      	ldr	r2, [pc, #128]	; (8006b1c <TIM_OC1_SetConfig+0xd8>)
 8006a9c:	4293      	cmp	r3, r2
 8006a9e:	d003      	beq.n	8006aa8 <TIM_OC1_SetConfig+0x64>
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4a1f      	ldr	r2, [pc, #124]	; (8006b20 <TIM_OC1_SetConfig+0xdc>)
 8006aa4:	4293      	cmp	r3, r2
 8006aa6:	d10c      	bne.n	8006ac2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006aa8:	697b      	ldr	r3, [r7, #20]
 8006aaa:	f023 0308 	bic.w	r3, r3, #8
 8006aae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	68db      	ldr	r3, [r3, #12]
 8006ab4:	697a      	ldr	r2, [r7, #20]
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006aba:	697b      	ldr	r3, [r7, #20]
 8006abc:	f023 0304 	bic.w	r3, r3, #4
 8006ac0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a15      	ldr	r2, [pc, #84]	; (8006b1c <TIM_OC1_SetConfig+0xd8>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d003      	beq.n	8006ad2 <TIM_OC1_SetConfig+0x8e>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a14      	ldr	r2, [pc, #80]	; (8006b20 <TIM_OC1_SetConfig+0xdc>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d111      	bne.n	8006af6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006ad2:	693b      	ldr	r3, [r7, #16]
 8006ad4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ad8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ae0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ae2:	683b      	ldr	r3, [r7, #0]
 8006ae4:	695b      	ldr	r3, [r3, #20]
 8006ae6:	693a      	ldr	r2, [r7, #16]
 8006ae8:	4313      	orrs	r3, r2
 8006aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006aec:	683b      	ldr	r3, [r7, #0]
 8006aee:	699b      	ldr	r3, [r3, #24]
 8006af0:	693a      	ldr	r2, [r7, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	693a      	ldr	r2, [r7, #16]
 8006afa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	685a      	ldr	r2, [r3, #4]
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	697a      	ldr	r2, [r7, #20]
 8006b0e:	621a      	str	r2, [r3, #32]
}
 8006b10:	bf00      	nop
 8006b12:	371c      	adds	r7, #28
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	40010000 	.word	0x40010000
 8006b20:	40010400 	.word	0x40010400

08006b24 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b24:	b480      	push	{r7}
 8006b26:	b087      	sub	sp, #28
 8006b28:	af00      	add	r7, sp, #0
 8006b2a:	6078      	str	r0, [r7, #4]
 8006b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a1b      	ldr	r3, [r3, #32]
 8006b32:	f023 0210 	bic.w	r2, r3, #16
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6a1b      	ldr	r3, [r3, #32]
 8006b3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	699b      	ldr	r3, [r3, #24]
 8006b4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b5a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b5c:	683b      	ldr	r3, [r7, #0]
 8006b5e:	681b      	ldr	r3, [r3, #0]
 8006b60:	021b      	lsls	r3, r3, #8
 8006b62:	68fa      	ldr	r2, [r7, #12]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b68:	697b      	ldr	r3, [r7, #20]
 8006b6a:	f023 0320 	bic.w	r3, r3, #32
 8006b6e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	689b      	ldr	r3, [r3, #8]
 8006b74:	011b      	lsls	r3, r3, #4
 8006b76:	697a      	ldr	r2, [r7, #20]
 8006b78:	4313      	orrs	r3, r2
 8006b7a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	4a22      	ldr	r2, [pc, #136]	; (8006c08 <TIM_OC2_SetConfig+0xe4>)
 8006b80:	4293      	cmp	r3, r2
 8006b82:	d003      	beq.n	8006b8c <TIM_OC2_SetConfig+0x68>
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	4a21      	ldr	r2, [pc, #132]	; (8006c0c <TIM_OC2_SetConfig+0xe8>)
 8006b88:	4293      	cmp	r3, r2
 8006b8a:	d10d      	bne.n	8006ba8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b8c:	697b      	ldr	r3, [r7, #20]
 8006b8e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b92:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b94:	683b      	ldr	r3, [r7, #0]
 8006b96:	68db      	ldr	r3, [r3, #12]
 8006b98:	011b      	lsls	r3, r3, #4
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006ba0:	697b      	ldr	r3, [r7, #20]
 8006ba2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	4a17      	ldr	r2, [pc, #92]	; (8006c08 <TIM_OC2_SetConfig+0xe4>)
 8006bac:	4293      	cmp	r3, r2
 8006bae:	d003      	beq.n	8006bb8 <TIM_OC2_SetConfig+0x94>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	4a16      	ldr	r2, [pc, #88]	; (8006c0c <TIM_OC2_SetConfig+0xe8>)
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d113      	bne.n	8006be0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006bb8:	693b      	ldr	r3, [r7, #16]
 8006bba:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bbe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006bc0:	693b      	ldr	r3, [r7, #16]
 8006bc2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bc6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006bc8:	683b      	ldr	r3, [r7, #0]
 8006bca:	695b      	ldr	r3, [r3, #20]
 8006bcc:	009b      	lsls	r3, r3, #2
 8006bce:	693a      	ldr	r2, [r7, #16]
 8006bd0:	4313      	orrs	r3, r2
 8006bd2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006bd4:	683b      	ldr	r3, [r7, #0]
 8006bd6:	699b      	ldr	r3, [r3, #24]
 8006bd8:	009b      	lsls	r3, r3, #2
 8006bda:	693a      	ldr	r2, [r7, #16]
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	693a      	ldr	r2, [r7, #16]
 8006be4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006be6:	687b      	ldr	r3, [r7, #4]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006bec:	683b      	ldr	r3, [r7, #0]
 8006bee:	685a      	ldr	r2, [r3, #4]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	697a      	ldr	r2, [r7, #20]
 8006bf8:	621a      	str	r2, [r3, #32]
}
 8006bfa:	bf00      	nop
 8006bfc:	371c      	adds	r7, #28
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c04:	4770      	bx	lr
 8006c06:	bf00      	nop
 8006c08:	40010000 	.word	0x40010000
 8006c0c:	40010400 	.word	0x40010400

08006c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c10:	b480      	push	{r7}
 8006c12:	b087      	sub	sp, #28
 8006c14:	af00      	add	r7, sp, #0
 8006c16:	6078      	str	r0, [r7, #4]
 8006c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6a1b      	ldr	r3, [r3, #32]
 8006c1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a1b      	ldr	r3, [r3, #32]
 8006c2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	69db      	ldr	r3, [r3, #28]
 8006c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	f023 0303 	bic.w	r3, r3, #3
 8006c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	68fa      	ldr	r2, [r7, #12]
 8006c4e:	4313      	orrs	r3, r2
 8006c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	021b      	lsls	r3, r3, #8
 8006c60:	697a      	ldr	r2, [r7, #20]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	4a21      	ldr	r2, [pc, #132]	; (8006cf0 <TIM_OC3_SetConfig+0xe0>)
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d003      	beq.n	8006c76 <TIM_OC3_SetConfig+0x66>
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	4a20      	ldr	r2, [pc, #128]	; (8006cf4 <TIM_OC3_SetConfig+0xe4>)
 8006c72:	4293      	cmp	r3, r2
 8006c74:	d10d      	bne.n	8006c92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c76:	697b      	ldr	r3, [r7, #20]
 8006c78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	021b      	lsls	r3, r3, #8
 8006c84:	697a      	ldr	r2, [r7, #20]
 8006c86:	4313      	orrs	r3, r2
 8006c88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	4a16      	ldr	r2, [pc, #88]	; (8006cf0 <TIM_OC3_SetConfig+0xe0>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d003      	beq.n	8006ca2 <TIM_OC3_SetConfig+0x92>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <TIM_OC3_SetConfig+0xe4>)
 8006c9e:	4293      	cmp	r3, r2
 8006ca0:	d113      	bne.n	8006cca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ca2:	693b      	ldr	r3, [r7, #16]
 8006ca4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ca8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006caa:	693b      	ldr	r3, [r7, #16]
 8006cac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006cb2:	683b      	ldr	r3, [r7, #0]
 8006cb4:	695b      	ldr	r3, [r3, #20]
 8006cb6:	011b      	lsls	r3, r3, #4
 8006cb8:	693a      	ldr	r2, [r7, #16]
 8006cba:	4313      	orrs	r3, r2
 8006cbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006cbe:	683b      	ldr	r3, [r7, #0]
 8006cc0:	699b      	ldr	r3, [r3, #24]
 8006cc2:	011b      	lsls	r3, r3, #4
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	693a      	ldr	r2, [r7, #16]
 8006cce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	68fa      	ldr	r2, [r7, #12]
 8006cd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006cd6:	683b      	ldr	r3, [r7, #0]
 8006cd8:	685a      	ldr	r2, [r3, #4]
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	697a      	ldr	r2, [r7, #20]
 8006ce2:	621a      	str	r2, [r3, #32]
}
 8006ce4:	bf00      	nop
 8006ce6:	371c      	adds	r7, #28
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400

08006cf8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006cf8:	b480      	push	{r7}
 8006cfa:	b087      	sub	sp, #28
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	6a1b      	ldr	r3, [r3, #32]
 8006d06:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	6a1b      	ldr	r3, [r3, #32]
 8006d12:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	685b      	ldr	r3, [r3, #4]
 8006d18:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	69db      	ldr	r3, [r3, #28]
 8006d1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006d26:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006d2e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	021b      	lsls	r3, r3, #8
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	4313      	orrs	r3, r2
 8006d3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006d3c:	693b      	ldr	r3, [r7, #16]
 8006d3e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006d42:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	031b      	lsls	r3, r3, #12
 8006d4a:	693a      	ldr	r2, [r7, #16]
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	4a12      	ldr	r2, [pc, #72]	; (8006d9c <TIM_OC4_SetConfig+0xa4>)
 8006d54:	4293      	cmp	r3, r2
 8006d56:	d003      	beq.n	8006d60 <TIM_OC4_SetConfig+0x68>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	4a11      	ldr	r2, [pc, #68]	; (8006da0 <TIM_OC4_SetConfig+0xa8>)
 8006d5c:	4293      	cmp	r3, r2
 8006d5e:	d109      	bne.n	8006d74 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d66:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d68:	683b      	ldr	r3, [r7, #0]
 8006d6a:	695b      	ldr	r3, [r3, #20]
 8006d6c:	019b      	lsls	r3, r3, #6
 8006d6e:	697a      	ldr	r2, [r7, #20]
 8006d70:	4313      	orrs	r3, r2
 8006d72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	693a      	ldr	r2, [r7, #16]
 8006d8c:	621a      	str	r2, [r3, #32]
}
 8006d8e:	bf00      	nop
 8006d90:	371c      	adds	r7, #28
 8006d92:	46bd      	mov	sp, r7
 8006d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d98:	4770      	bx	lr
 8006d9a:	bf00      	nop
 8006d9c:	40010000 	.word	0x40010000
 8006da0:	40010400 	.word	0x40010400

08006da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f023 0201 	bic.w	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f023 030a 	bic.w	r3, r3, #10
 8006de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b087      	sub	sp, #28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	6a1b      	ldr	r3, [r3, #32]
 8006e12:	f023 0210 	bic.w	r2, r3, #16
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	699b      	ldr	r3, [r3, #24]
 8006e1e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	6a1b      	ldr	r3, [r3, #32]
 8006e24:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e2c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	031b      	lsls	r3, r3, #12
 8006e32:	697a      	ldr	r2, [r7, #20]
 8006e34:	4313      	orrs	r3, r2
 8006e36:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e3e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e40:	68bb      	ldr	r3, [r7, #8]
 8006e42:	011b      	lsls	r3, r3, #4
 8006e44:	693a      	ldr	r2, [r7, #16]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	697a      	ldr	r2, [r7, #20]
 8006e4e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	693a      	ldr	r2, [r7, #16]
 8006e54:	621a      	str	r2, [r3, #32]
}
 8006e56:	bf00      	nop
 8006e58:	371c      	adds	r7, #28
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e60:	4770      	bx	lr

08006e62 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006e62:	b480      	push	{r7}
 8006e64:	b085      	sub	sp, #20
 8006e66:	af00      	add	r7, sp, #0
 8006e68:	6078      	str	r0, [r7, #4]
 8006e6a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	689b      	ldr	r3, [r3, #8]
 8006e70:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e78:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006e7a:	683a      	ldr	r2, [r7, #0]
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	f043 0307 	orr.w	r3, r3, #7
 8006e84:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	68fa      	ldr	r2, [r7, #12]
 8006e8a:	609a      	str	r2, [r3, #8]
}
 8006e8c:	bf00      	nop
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b087      	sub	sp, #28
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	607a      	str	r2, [r7, #4]
 8006ea4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006eb2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	021a      	lsls	r2, r3, #8
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	431a      	orrs	r2, r3
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4313      	orrs	r3, r2
 8006ec0:	697a      	ldr	r2, [r7, #20]
 8006ec2:	4313      	orrs	r3, r2
 8006ec4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	697a      	ldr	r2, [r7, #20]
 8006eca:	609a      	str	r2, [r3, #8]
}
 8006ecc:	bf00      	nop
 8006ece:	371c      	adds	r7, #28
 8006ed0:	46bd      	mov	sp, r7
 8006ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed6:	4770      	bx	lr

08006ed8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ed8:	b480      	push	{r7}
 8006eda:	b087      	sub	sp, #28
 8006edc:	af00      	add	r7, sp, #0
 8006ede:	60f8      	str	r0, [r7, #12]
 8006ee0:	60b9      	str	r1, [r7, #8]
 8006ee2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	f003 031f 	and.w	r3, r3, #31
 8006eea:	2201      	movs	r2, #1
 8006eec:	fa02 f303 	lsl.w	r3, r2, r3
 8006ef0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	6a1a      	ldr	r2, [r3, #32]
 8006ef6:	697b      	ldr	r3, [r7, #20]
 8006ef8:	43db      	mvns	r3, r3
 8006efa:	401a      	ands	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	6a1a      	ldr	r2, [r3, #32]
 8006f04:	68bb      	ldr	r3, [r7, #8]
 8006f06:	f003 031f 	and.w	r3, r3, #31
 8006f0a:	6879      	ldr	r1, [r7, #4]
 8006f0c:	fa01 f303 	lsl.w	r3, r1, r3
 8006f10:	431a      	orrs	r2, r3
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	621a      	str	r2, [r3, #32]
}
 8006f16:	bf00      	nop
 8006f18:	371c      	adds	r7, #28
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
	...

08006f24 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
 8006f2a:	6078      	str	r0, [r7, #4]
 8006f2c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f34:	2b01      	cmp	r3, #1
 8006f36:	d101      	bne.n	8006f3c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	e05a      	b.n	8006ff2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	2201      	movs	r2, #1
 8006f40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2202      	movs	r2, #2
 8006f48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	685b      	ldr	r3, [r3, #4]
 8006f52:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f62:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	68fa      	ldr	r2, [r7, #12]
 8006f6a:	4313      	orrs	r3, r2
 8006f6c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	681b      	ldr	r3, [r3, #0]
 8006f7a:	4a21      	ldr	r2, [pc, #132]	; (8007000 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006f7c:	4293      	cmp	r3, r2
 8006f7e:	d022      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f88:	d01d      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	681b      	ldr	r3, [r3, #0]
 8006f8e:	4a1d      	ldr	r2, [pc, #116]	; (8007004 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d018      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a1b      	ldr	r2, [pc, #108]	; (8007008 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d013      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	4a1a      	ldr	r2, [pc, #104]	; (800700c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006fa4:	4293      	cmp	r3, r2
 8006fa6:	d00e      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	4a18      	ldr	r2, [pc, #96]	; (8007010 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006fae:	4293      	cmp	r3, r2
 8006fb0:	d009      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4a17      	ldr	r2, [pc, #92]	; (8007014 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	d004      	beq.n	8006fc6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a15      	ldr	r2, [pc, #84]	; (8007018 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d10c      	bne.n	8006fe0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006fc6:	68bb      	ldr	r3, [r7, #8]
 8006fc8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006fcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006fce:	683b      	ldr	r3, [r7, #0]
 8006fd0:	685b      	ldr	r3, [r3, #4]
 8006fd2:	68ba      	ldr	r2, [r7, #8]
 8006fd4:	4313      	orrs	r3, r2
 8006fd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2201      	movs	r2, #1
 8006fe4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2200      	movs	r2, #0
 8006fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ff0:	2300      	movs	r3, #0
}
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	3714      	adds	r7, #20
 8006ff6:	46bd      	mov	sp, r7
 8006ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	40010000 	.word	0x40010000
 8007004:	40000400 	.word	0x40000400
 8007008:	40000800 	.word	0x40000800
 800700c:	40000c00 	.word	0x40000c00
 8007010:	40010400 	.word	0x40010400
 8007014:	40014000 	.word	0x40014000
 8007018:	40001800 	.word	0x40001800

0800701c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800701c:	b480      	push	{r7}
 800701e:	b085      	sub	sp, #20
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]
 8007024:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007026:	2300      	movs	r3, #0
 8007028:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007030:	2b01      	cmp	r3, #1
 8007032:	d101      	bne.n	8007038 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007034:	2302      	movs	r3, #2
 8007036:	e03d      	b.n	80070b4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	68db      	ldr	r3, [r3, #12]
 800704a:	4313      	orrs	r3, r2
 800704c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	4313      	orrs	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685b      	ldr	r3, [r3, #4]
 8007066:	4313      	orrs	r3, r2
 8007068:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007070:	683b      	ldr	r3, [r7, #0]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	4313      	orrs	r3, r2
 8007076:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	691b      	ldr	r3, [r3, #16]
 8007082:	4313      	orrs	r3, r2
 8007084:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	695b      	ldr	r3, [r3, #20]
 8007090:	4313      	orrs	r3, r2
 8007092:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007094:	68fb      	ldr	r3, [r7, #12]
 8007096:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800709a:	683b      	ldr	r3, [r7, #0]
 800709c:	69db      	ldr	r3, [r3, #28]
 800709e:	4313      	orrs	r3, r2
 80070a0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	68fa      	ldr	r2, [r7, #12]
 80070a8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	2200      	movs	r2, #0
 80070ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80070b2:	2300      	movs	r3, #0
}
 80070b4:	4618      	mov	r0, r3
 80070b6:	3714      	adds	r7, #20
 80070b8:	46bd      	mov	sp, r7
 80070ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070be:	4770      	bx	lr

080070c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80070c8:	bf00      	nop
 80070ca:	370c      	adds	r7, #12
 80070cc:	46bd      	mov	sp, r7
 80070ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d2:	4770      	bx	lr

080070d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070d4:	b480      	push	{r7}
 80070d6:	b083      	sub	sp, #12
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070dc:	bf00      	nop
 80070de:	370c      	adds	r7, #12
 80070e0:	46bd      	mov	sp, r7
 80070e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e6:	4770      	bx	lr

080070e8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070e8:	b580      	push	{r7, lr}
 80070ea:	b082      	sub	sp, #8
 80070ec:	af00      	add	r7, sp, #0
 80070ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d101      	bne.n	80070fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e03f      	b.n	800717a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007100:	b2db      	uxtb	r3, r3
 8007102:	2b00      	cmp	r3, #0
 8007104:	d106      	bne.n	8007114 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	2200      	movs	r2, #0
 800710a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f7fc f972 	bl	80033f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	2224      	movs	r2, #36	; 0x24
 8007118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	681b      	ldr	r3, [r3, #0]
 8007120:	68da      	ldr	r2, [r3, #12]
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800712a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 fe0b 	bl	8007d48 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	691a      	ldr	r2, [r3, #16]
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007140:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	695a      	ldr	r2, [r3, #20]
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007150:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68da      	ldr	r2, [r3, #12]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007160:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2220      	movs	r2, #32
 800716c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2220      	movs	r2, #32
 8007174:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007178:	2300      	movs	r3, #0
}
 800717a:	4618      	mov	r0, r3
 800717c:	3708      	adds	r7, #8
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}

08007182 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007182:	b580      	push	{r7, lr}
 8007184:	b08a      	sub	sp, #40	; 0x28
 8007186:	af02      	add	r7, sp, #8
 8007188:	60f8      	str	r0, [r7, #12]
 800718a:	60b9      	str	r1, [r7, #8]
 800718c:	603b      	str	r3, [r7, #0]
 800718e:	4613      	mov	r3, r2
 8007190:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007192:	2300      	movs	r3, #0
 8007194:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007196:	68fb      	ldr	r3, [r7, #12]
 8007198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800719c:	b2db      	uxtb	r3, r3
 800719e:	2b20      	cmp	r3, #32
 80071a0:	d17c      	bne.n	800729c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80071a2:	68bb      	ldr	r3, [r7, #8]
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	d002      	beq.n	80071ae <HAL_UART_Transmit+0x2c>
 80071a8:	88fb      	ldrh	r3, [r7, #6]
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d101      	bne.n	80071b2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80071ae:	2301      	movs	r3, #1
 80071b0:	e075      	b.n	800729e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071b8:	2b01      	cmp	r3, #1
 80071ba:	d101      	bne.n	80071c0 <HAL_UART_Transmit+0x3e>
 80071bc:	2302      	movs	r3, #2
 80071be:	e06e      	b.n	800729e <HAL_UART_Transmit+0x11c>
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	2201      	movs	r2, #1
 80071c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	2200      	movs	r2, #0
 80071cc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	2221      	movs	r2, #33	; 0x21
 80071d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80071d6:	f7fc fe35 	bl	8003e44 <HAL_GetTick>
 80071da:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	88fa      	ldrh	r2, [r7, #6]
 80071e0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	88fa      	ldrh	r2, [r7, #6]
 80071e6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	689b      	ldr	r3, [r3, #8]
 80071ec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071f0:	d108      	bne.n	8007204 <HAL_UART_Transmit+0x82>
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	691b      	ldr	r3, [r3, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d104      	bne.n	8007204 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80071fa:	2300      	movs	r3, #0
 80071fc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80071fe:	68bb      	ldr	r3, [r7, #8]
 8007200:	61bb      	str	r3, [r7, #24]
 8007202:	e003      	b.n	800720c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007204:	68bb      	ldr	r3, [r7, #8]
 8007206:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007208:	2300      	movs	r3, #0
 800720a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2200      	movs	r2, #0
 8007210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007214:	e02a      	b.n	800726c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007216:	683b      	ldr	r3, [r7, #0]
 8007218:	9300      	str	r3, [sp, #0]
 800721a:	697b      	ldr	r3, [r7, #20]
 800721c:	2200      	movs	r2, #0
 800721e:	2180      	movs	r1, #128	; 0x80
 8007220:	68f8      	ldr	r0, [r7, #12]
 8007222:	f000 fb8d 	bl	8007940 <UART_WaitOnFlagUntilTimeout>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d001      	beq.n	8007230 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800722c:	2303      	movs	r3, #3
 800722e:	e036      	b.n	800729e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007230:	69fb      	ldr	r3, [r7, #28]
 8007232:	2b00      	cmp	r3, #0
 8007234:	d10b      	bne.n	800724e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007236:	69bb      	ldr	r3, [r7, #24]
 8007238:	881b      	ldrh	r3, [r3, #0]
 800723a:	461a      	mov	r2, r3
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007244:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007246:	69bb      	ldr	r3, [r7, #24]
 8007248:	3302      	adds	r3, #2
 800724a:	61bb      	str	r3, [r7, #24]
 800724c:	e007      	b.n	800725e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800724e:	69fb      	ldr	r3, [r7, #28]
 8007250:	781a      	ldrb	r2, [r3, #0]
 8007252:	68fb      	ldr	r3, [r7, #12]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007258:	69fb      	ldr	r3, [r7, #28]
 800725a:	3301      	adds	r3, #1
 800725c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007262:	b29b      	uxth	r3, r3
 8007264:	3b01      	subs	r3, #1
 8007266:	b29a      	uxth	r2, r3
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007270:	b29b      	uxth	r3, r3
 8007272:	2b00      	cmp	r3, #0
 8007274:	d1cf      	bne.n	8007216 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007276:	683b      	ldr	r3, [r7, #0]
 8007278:	9300      	str	r3, [sp, #0]
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	2200      	movs	r2, #0
 800727e:	2140      	movs	r1, #64	; 0x40
 8007280:	68f8      	ldr	r0, [r7, #12]
 8007282:	f000 fb5d 	bl	8007940 <UART_WaitOnFlagUntilTimeout>
 8007286:	4603      	mov	r3, r0
 8007288:	2b00      	cmp	r3, #0
 800728a:	d001      	beq.n	8007290 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800728c:	2303      	movs	r3, #3
 800728e:	e006      	b.n	800729e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	2220      	movs	r2, #32
 8007294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007298:	2300      	movs	r3, #0
 800729a:	e000      	b.n	800729e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 800729c:	2302      	movs	r3, #2
  }
}
 800729e:	4618      	mov	r0, r3
 80072a0:	3720      	adds	r7, #32
 80072a2:	46bd      	mov	sp, r7
 80072a4:	bd80      	pop	{r7, pc}

080072a6 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80072a6:	b480      	push	{r7}
 80072a8:	b085      	sub	sp, #20
 80072aa:	af00      	add	r7, sp, #0
 80072ac:	60f8      	str	r0, [r7, #12]
 80072ae:	60b9      	str	r1, [r7, #8]
 80072b0:	4613      	mov	r3, r2
 80072b2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b20      	cmp	r3, #32
 80072be:	d130      	bne.n	8007322 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d002      	beq.n	80072cc <HAL_UART_Transmit_IT+0x26>
 80072c6:	88fb      	ldrh	r3, [r7, #6]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d101      	bne.n	80072d0 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80072cc:	2301      	movs	r3, #1
 80072ce:	e029      	b.n	8007324 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80072d0:	68fb      	ldr	r3, [r7, #12]
 80072d2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80072d6:	2b01      	cmp	r3, #1
 80072d8:	d101      	bne.n	80072de <HAL_UART_Transmit_IT+0x38>
 80072da:	2302      	movs	r3, #2
 80072dc:	e022      	b.n	8007324 <HAL_UART_Transmit_IT+0x7e>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	2201      	movs	r2, #1
 80072e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	68ba      	ldr	r2, [r7, #8]
 80072ea:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	88fa      	ldrh	r2, [r7, #6]
 80072f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	88fa      	ldrh	r2, [r7, #6]
 80072f6:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	2200      	movs	r2, #0
 80072fc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2221      	movs	r2, #33	; 0x21
 8007302:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	2200      	movs	r2, #0
 800730a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	68da      	ldr	r2, [r3, #12]
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800731c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 800731e:	2300      	movs	r3, #0
 8007320:	e000      	b.n	8007324 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8007322:	2302      	movs	r3, #2
  }
}
 8007324:	4618      	mov	r0, r3
 8007326:	3714      	adds	r7, #20
 8007328:	46bd      	mov	sp, r7
 800732a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732e:	4770      	bx	lr

08007330 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b084      	sub	sp, #16
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	4613      	mov	r3, r2
 800733c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007344:	b2db      	uxtb	r3, r3
 8007346:	2b20      	cmp	r3, #32
 8007348:	d11d      	bne.n	8007386 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800734a:	68bb      	ldr	r3, [r7, #8]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d002      	beq.n	8007356 <HAL_UART_Receive_DMA+0x26>
 8007350:	88fb      	ldrh	r3, [r7, #6]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d101      	bne.n	800735a <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007356:	2301      	movs	r3, #1
 8007358:	e016      	b.n	8007388 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007360:	2b01      	cmp	r3, #1
 8007362:	d101      	bne.n	8007368 <HAL_UART_Receive_DMA+0x38>
 8007364:	2302      	movs	r3, #2
 8007366:	e00f      	b.n	8007388 <HAL_UART_Receive_DMA+0x58>
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	2201      	movs	r2, #1
 800736c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007370:	68fb      	ldr	r3, [r7, #12]
 8007372:	2200      	movs	r2, #0
 8007374:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007376:	88fb      	ldrh	r3, [r7, #6]
 8007378:	461a      	mov	r2, r3
 800737a:	68b9      	ldr	r1, [r7, #8]
 800737c:	68f8      	ldr	r0, [r7, #12]
 800737e:	f000 fb29 	bl	80079d4 <UART_Start_Receive_DMA>
 8007382:	4603      	mov	r3, r0
 8007384:	e000      	b.n	8007388 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007386:	2302      	movs	r3, #2
  }
}
 8007388:	4618      	mov	r0, r3
 800738a:	3710      	adds	r7, #16
 800738c:	46bd      	mov	sp, r7
 800738e:	bd80      	pop	{r7, pc}

08007390 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8007390:	b580      	push	{r7, lr}
 8007392:	b082      	sub	sp, #8
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68da      	ldr	r2, [r3, #12]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80073a6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	695a      	ldr	r2, [r3, #20]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	f022 0201 	bic.w	r2, r2, #1
 80073b6:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073bc:	2b01      	cmp	r3, #1
 80073be:	d107      	bne.n	80073d0 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	68da      	ldr	r2, [r3, #12]
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	f022 0210 	bic.w	r2, r2, #16
 80073ce:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	681b      	ldr	r3, [r3, #0]
 80073d4:	695b      	ldr	r3, [r3, #20]
 80073d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80073da:	2b40      	cmp	r3, #64	; 0x40
 80073dc:	d124      	bne.n	8007428 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	695a      	ldr	r2, [r3, #20]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80073ec:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d018      	beq.n	8007428 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	2200      	movs	r2, #0
 80073fc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007402:	4618      	mov	r0, r3
 8007404:	f7fd f998 	bl	8004738 <HAL_DMA_Abort>
 8007408:	4603      	mov	r3, r0
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00c      	beq.n	8007428 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007412:	4618      	mov	r0, r3
 8007414:	f7fd fbac 	bl	8004b70 <HAL_DMA_GetError>
 8007418:	4603      	mov	r3, r0
 800741a:	2b20      	cmp	r3, #32
 800741c:	d104      	bne.n	8007428 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2210      	movs	r2, #16
 8007422:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8007424:	2303      	movs	r3, #3
 8007426:	e00a      	b.n	800743e <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2200      	movs	r2, #0
 800742c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2220      	movs	r2, #32
 8007432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	2200      	movs	r2, #0
 800743a:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b08a      	sub	sp, #40	; 0x28
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68db      	ldr	r3, [r3, #12]
 800745e:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	695b      	ldr	r3, [r3, #20]
 8007466:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007468:	2300      	movs	r3, #0
 800746a:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 800746c:	2300      	movs	r3, #0
 800746e:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007472:	f003 030f 	and.w	r3, r3, #15
 8007476:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d10d      	bne.n	800749a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800747e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007480:	f003 0320 	and.w	r3, r3, #32
 8007484:	2b00      	cmp	r3, #0
 8007486:	d008      	beq.n	800749a <HAL_UART_IRQHandler+0x52>
 8007488:	6a3b      	ldr	r3, [r7, #32]
 800748a:	f003 0320 	and.w	r3, r3, #32
 800748e:	2b00      	cmp	r3, #0
 8007490:	d003      	beq.n	800749a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fbc1 	bl	8007c1a <UART_Receive_IT>
      return;
 8007498:	e17c      	b.n	8007794 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800749a:	69bb      	ldr	r3, [r7, #24]
 800749c:	2b00      	cmp	r3, #0
 800749e:	f000 80b1 	beq.w	8007604 <HAL_UART_IRQHandler+0x1bc>
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	f003 0301 	and.w	r3, r3, #1
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d105      	bne.n	80074b8 <HAL_UART_IRQHandler+0x70>
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	f000 80a6 	beq.w	8007604 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80074b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ba:	f003 0301 	and.w	r3, r3, #1
 80074be:	2b00      	cmp	r3, #0
 80074c0:	d00a      	beq.n	80074d8 <HAL_UART_IRQHandler+0x90>
 80074c2:	6a3b      	ldr	r3, [r7, #32]
 80074c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d005      	beq.n	80074d8 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074d0:	f043 0201 	orr.w	r2, r3, #1
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074da:	f003 0304 	and.w	r3, r3, #4
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d00a      	beq.n	80074f8 <HAL_UART_IRQHandler+0xb0>
 80074e2:	69fb      	ldr	r3, [r7, #28]
 80074e4:	f003 0301 	and.w	r3, r3, #1
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d005      	beq.n	80074f8 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f0:	f043 0202 	orr.w	r2, r3, #2
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80074f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074fa:	f003 0302 	and.w	r3, r3, #2
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00a      	beq.n	8007518 <HAL_UART_IRQHandler+0xd0>
 8007502:	69fb      	ldr	r3, [r7, #28]
 8007504:	f003 0301 	and.w	r3, r3, #1
 8007508:	2b00      	cmp	r3, #0
 800750a:	d005      	beq.n	8007518 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007510:	f043 0204 	orr.w	r2, r3, #4
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007518:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800751a:	f003 0308 	and.w	r3, r3, #8
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00f      	beq.n	8007542 <HAL_UART_IRQHandler+0xfa>
 8007522:	6a3b      	ldr	r3, [r7, #32]
 8007524:	f003 0320 	and.w	r3, r3, #32
 8007528:	2b00      	cmp	r3, #0
 800752a:	d104      	bne.n	8007536 <HAL_UART_IRQHandler+0xee>
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	f003 0301 	and.w	r3, r3, #1
 8007532:	2b00      	cmp	r3, #0
 8007534:	d005      	beq.n	8007542 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800753a:	f043 0208 	orr.w	r2, r3, #8
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007546:	2b00      	cmp	r3, #0
 8007548:	f000 811f 	beq.w	800778a <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800754c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754e:	f003 0320 	and.w	r3, r3, #32
 8007552:	2b00      	cmp	r3, #0
 8007554:	d007      	beq.n	8007566 <HAL_UART_IRQHandler+0x11e>
 8007556:	6a3b      	ldr	r3, [r7, #32]
 8007558:	f003 0320 	and.w	r3, r3, #32
 800755c:	2b00      	cmp	r3, #0
 800755e:	d002      	beq.n	8007566 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 fb5a 	bl	8007c1a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	695b      	ldr	r3, [r3, #20]
 800756c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007570:	2b40      	cmp	r3, #64	; 0x40
 8007572:	bf0c      	ite	eq
 8007574:	2301      	moveq	r3, #1
 8007576:	2300      	movne	r3, #0
 8007578:	b2db      	uxtb	r3, r3
 800757a:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	f003 0308 	and.w	r3, r3, #8
 8007584:	2b00      	cmp	r3, #0
 8007586:	d102      	bne.n	800758e <HAL_UART_IRQHandler+0x146>
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d031      	beq.n	80075f2 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800758e:	6878      	ldr	r0, [r7, #4]
 8007590:	f000 fa9a 	bl	8007ac8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	695b      	ldr	r3, [r3, #20]
 800759a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800759e:	2b40      	cmp	r3, #64	; 0x40
 80075a0:	d123      	bne.n	80075ea <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	695a      	ldr	r2, [r3, #20]
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80075b0:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d013      	beq.n	80075e2 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075be:	4a77      	ldr	r2, [pc, #476]	; (800779c <HAL_UART_IRQHandler+0x354>)
 80075c0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c6:	4618      	mov	r0, r3
 80075c8:	f7fd f926 	bl	8004818 <HAL_DMA_Abort_IT>
 80075cc:	4603      	mov	r3, r0
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d016      	beq.n	8007600 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80075d8:	687a      	ldr	r2, [r7, #4]
 80075da:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80075dc:	4610      	mov	r0, r2
 80075de:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e0:	e00e      	b.n	8007600 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80075e2:	6878      	ldr	r0, [r7, #4]
 80075e4:	f7f9 ff4e 	bl	8001484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075e8:	e00a      	b.n	8007600 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f7f9 ff4a 	bl	8001484 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80075f0:	e006      	b.n	8007600 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80075f2:	6878      	ldr	r0, [r7, #4]
 80075f4:	f7f9 ff46 	bl	8001484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	2200      	movs	r2, #0
 80075fc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80075fe:	e0c4      	b.n	800778a <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007600:	bf00      	nop
    return;
 8007602:	e0c2      	b.n	800778a <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007608:	2b01      	cmp	r3, #1
 800760a:	f040 80a2 	bne.w	8007752 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800760e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007610:	f003 0310 	and.w	r3, r3, #16
 8007614:	2b00      	cmp	r3, #0
 8007616:	f000 809c 	beq.w	8007752 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800761a:	6a3b      	ldr	r3, [r7, #32]
 800761c:	f003 0310 	and.w	r3, r3, #16
 8007620:	2b00      	cmp	r3, #0
 8007622:	f000 8096 	beq.w	8007752 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007626:	2300      	movs	r3, #0
 8007628:	60fb      	str	r3, [r7, #12]
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	60fb      	str	r3, [r7, #12]
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	60fb      	str	r3, [r7, #12]
 800763a:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	695b      	ldr	r3, [r3, #20]
 8007642:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007646:	2b40      	cmp	r3, #64	; 0x40
 8007648:	d14f      	bne.n	80076ea <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	685b      	ldr	r3, [r3, #4]
 8007652:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007654:	8a3b      	ldrh	r3, [r7, #16]
 8007656:	2b00      	cmp	r3, #0
 8007658:	f000 8099 	beq.w	800778e <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007660:	8a3a      	ldrh	r2, [r7, #16]
 8007662:	429a      	cmp	r2, r3
 8007664:	f080 8093 	bcs.w	800778e <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	8a3a      	ldrh	r2, [r7, #16]
 800766c:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007672:	69db      	ldr	r3, [r3, #28]
 8007674:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007678:	d02b      	beq.n	80076d2 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	68da      	ldr	r2, [r3, #12]
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007688:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	695a      	ldr	r2, [r3, #20]
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	f022 0201 	bic.w	r2, r2, #1
 8007698:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	695a      	ldr	r2, [r3, #20]
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076a8:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	2220      	movs	r2, #32
 80076ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80076b2:	687b      	ldr	r3, [r7, #4]
 80076b4:	2200      	movs	r2, #0
 80076b6:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	68da      	ldr	r2, [r3, #12]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f022 0210 	bic.w	r2, r2, #16
 80076c6:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80076cc:	4618      	mov	r0, r3
 80076ce:	f7fd f833 	bl	8004738 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076da:	b29b      	uxth	r3, r3
 80076dc:	1ad3      	subs	r3, r2, r3
 80076de:	b29b      	uxth	r3, r3
 80076e0:	4619      	mov	r1, r3
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 f870 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80076e8:	e051      	b.n	800778e <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076f2:	b29b      	uxth	r3, r3
 80076f4:	1ad3      	subs	r3, r2, r3
 80076f6:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80076fc:	b29b      	uxth	r3, r3
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d047      	beq.n	8007792 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007702:	8a7b      	ldrh	r3, [r7, #18]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d044      	beq.n	8007792 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	68da      	ldr	r2, [r3, #12]
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007716:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	695a      	ldr	r2, [r3, #20]
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	f022 0201 	bic.w	r2, r2, #1
 8007726:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	2220      	movs	r2, #32
 800772c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	2200      	movs	r2, #0
 8007734:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	681b      	ldr	r3, [r3, #0]
 800773a:	68da      	ldr	r2, [r3, #12]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f022 0210 	bic.w	r2, r2, #16
 8007744:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007746:	8a7b      	ldrh	r3, [r7, #18]
 8007748:	4619      	mov	r1, r3
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 f83c 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007750:	e01f      	b.n	8007792 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007758:	2b00      	cmp	r3, #0
 800775a:	d008      	beq.n	800776e <HAL_UART_IRQHandler+0x326>
 800775c:	6a3b      	ldr	r3, [r7, #32]
 800775e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007762:	2b00      	cmp	r3, #0
 8007764:	d003      	beq.n	800776e <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f000 f9ef 	bl	8007b4a <UART_Transmit_IT>
    return;
 800776c:	e012      	b.n	8007794 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800776e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007770:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007774:	2b00      	cmp	r3, #0
 8007776:	d00d      	beq.n	8007794 <HAL_UART_IRQHandler+0x34c>
 8007778:	6a3b      	ldr	r3, [r7, #32]
 800777a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777e:	2b00      	cmp	r3, #0
 8007780:	d008      	beq.n	8007794 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f000 fa31 	bl	8007bea <UART_EndTransmit_IT>
    return;
 8007788:	e004      	b.n	8007794 <HAL_UART_IRQHandler+0x34c>
    return;
 800778a:	bf00      	nop
 800778c:	e002      	b.n	8007794 <HAL_UART_IRQHandler+0x34c>
      return;
 800778e:	bf00      	nop
 8007790:	e000      	b.n	8007794 <HAL_UART_IRQHandler+0x34c>
      return;
 8007792:	bf00      	nop
  }
}
 8007794:	3728      	adds	r7, #40	; 0x28
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	08007b23 	.word	0x08007b23

080077a0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80077a0:	b480      	push	{r7}
 80077a2:	b083      	sub	sp, #12
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80077a8:	bf00      	nop
 80077aa:	370c      	adds	r7, #12
 80077ac:	46bd      	mov	sp, r7
 80077ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b2:	4770      	bx	lr

080077b4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b083      	sub	sp, #12
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80077bc:	bf00      	nop
 80077be:	370c      	adds	r7, #12
 80077c0:	46bd      	mov	sp, r7
 80077c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c6:	4770      	bx	lr

080077c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80077c8:	b480      	push	{r7}
 80077ca:	b083      	sub	sp, #12
 80077cc:	af00      	add	r7, sp, #0
 80077ce:	6078      	str	r0, [r7, #4]
 80077d0:	460b      	mov	r3, r1
 80077d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80077d4:	bf00      	nop
 80077d6:	370c      	adds	r7, #12
 80077d8:	46bd      	mov	sp, r7
 80077da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077de:	4770      	bx	lr

080077e0 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b084      	sub	sp, #16
 80077e4:	af00      	add	r7, sp, #0
 80077e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80077ec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077f8:	2b00      	cmp	r3, #0
 80077fa:	d12a      	bne.n	8007852 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	2200      	movs	r2, #0
 8007800:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	68da      	ldr	r2, [r3, #12]
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007810:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	695a      	ldr	r2, [r3, #20]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	f022 0201 	bic.w	r2, r2, #1
 8007820:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007822:	68fb      	ldr	r3, [r7, #12]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	695a      	ldr	r2, [r3, #20]
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007830:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007832:	68fb      	ldr	r3, [r7, #12]
 8007834:	2220      	movs	r2, #32
 8007836:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800783e:	2b01      	cmp	r3, #1
 8007840:	d107      	bne.n	8007852 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	68da      	ldr	r2, [r3, #12]
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	f022 0210 	bic.w	r2, r2, #16
 8007850:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007852:	68fb      	ldr	r3, [r7, #12]
 8007854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007856:	2b01      	cmp	r3, #1
 8007858:	d106      	bne.n	8007868 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800785e:	4619      	mov	r1, r3
 8007860:	68f8      	ldr	r0, [r7, #12]
 8007862:	f7ff ffb1 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007866:	e002      	b.n	800786e <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007868:	68f8      	ldr	r0, [r7, #12]
 800786a:	f7f9 fdf1 	bl	8001450 <HAL_UART_RxCpltCallback>
}
 800786e:	bf00      	nop
 8007870:	3710      	adds	r7, #16
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}

08007876 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007876:	b580      	push	{r7, lr}
 8007878:	b084      	sub	sp, #16
 800787a:	af00      	add	r7, sp, #0
 800787c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007882:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007884:	68fb      	ldr	r3, [r7, #12]
 8007886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007888:	2b01      	cmp	r3, #1
 800788a:	d108      	bne.n	800789e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007890:	085b      	lsrs	r3, r3, #1
 8007892:	b29b      	uxth	r3, r3
 8007894:	4619      	mov	r1, r3
 8007896:	68f8      	ldr	r0, [r7, #12]
 8007898:	f7ff ff96 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800789c:	e002      	b.n	80078a4 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800789e:	68f8      	ldr	r0, [r7, #12]
 80078a0:	f7ff ff88 	bl	80077b4 <HAL_UART_RxHalfCpltCallback>
}
 80078a4:	bf00      	nop
 80078a6:	3710      	adds	r7, #16
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}

080078ac <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b084      	sub	sp, #16
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80078b4:	2300      	movs	r3, #0
 80078b6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078bc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	695b      	ldr	r3, [r3, #20]
 80078c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078c8:	2b80      	cmp	r3, #128	; 0x80
 80078ca:	bf0c      	ite	eq
 80078cc:	2301      	moveq	r3, #1
 80078ce:	2300      	movne	r3, #0
 80078d0:	b2db      	uxtb	r3, r3
 80078d2:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80078d4:	68bb      	ldr	r3, [r7, #8]
 80078d6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078da:	b2db      	uxtb	r3, r3
 80078dc:	2b21      	cmp	r3, #33	; 0x21
 80078de:	d108      	bne.n	80078f2 <UART_DMAError+0x46>
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d005      	beq.n	80078f2 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80078e6:	68bb      	ldr	r3, [r7, #8]
 80078e8:	2200      	movs	r2, #0
 80078ea:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80078ec:	68b8      	ldr	r0, [r7, #8]
 80078ee:	f000 f8d5 	bl	8007a9c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078fc:	2b40      	cmp	r3, #64	; 0x40
 80078fe:	bf0c      	ite	eq
 8007900:	2301      	moveq	r3, #1
 8007902:	2300      	movne	r3, #0
 8007904:	b2db      	uxtb	r3, r3
 8007906:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800790e:	b2db      	uxtb	r3, r3
 8007910:	2b22      	cmp	r3, #34	; 0x22
 8007912:	d108      	bne.n	8007926 <UART_DMAError+0x7a>
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	2b00      	cmp	r3, #0
 8007918:	d005      	beq.n	8007926 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800791a:	68bb      	ldr	r3, [r7, #8]
 800791c:	2200      	movs	r2, #0
 800791e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007920:	68b8      	ldr	r0, [r7, #8]
 8007922:	f000 f8d1 	bl	8007ac8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007926:	68bb      	ldr	r3, [r7, #8]
 8007928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800792a:	f043 0210 	orr.w	r2, r3, #16
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007932:	68b8      	ldr	r0, [r7, #8]
 8007934:	f7f9 fda6 	bl	8001484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007938:	bf00      	nop
 800793a:	3710      	adds	r7, #16
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b084      	sub	sp, #16
 8007944:	af00      	add	r7, sp, #0
 8007946:	60f8      	str	r0, [r7, #12]
 8007948:	60b9      	str	r1, [r7, #8]
 800794a:	603b      	str	r3, [r7, #0]
 800794c:	4613      	mov	r3, r2
 800794e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007950:	e02c      	b.n	80079ac <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007952:	69bb      	ldr	r3, [r7, #24]
 8007954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007958:	d028      	beq.n	80079ac <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800795a:	69bb      	ldr	r3, [r7, #24]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d007      	beq.n	8007970 <UART_WaitOnFlagUntilTimeout+0x30>
 8007960:	f7fc fa70 	bl	8003e44 <HAL_GetTick>
 8007964:	4602      	mov	r2, r0
 8007966:	683b      	ldr	r3, [r7, #0]
 8007968:	1ad3      	subs	r3, r2, r3
 800796a:	69ba      	ldr	r2, [r7, #24]
 800796c:	429a      	cmp	r2, r3
 800796e:	d21d      	bcs.n	80079ac <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	681b      	ldr	r3, [r3, #0]
 8007974:	68da      	ldr	r2, [r3, #12]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800797e:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	695a      	ldr	r2, [r3, #20]
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	f022 0201 	bic.w	r2, r2, #1
 800798e:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	2220      	movs	r2, #32
 8007994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2220      	movs	r2, #32
 800799c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80079a0:	68fb      	ldr	r3, [r7, #12]
 80079a2:	2200      	movs	r2, #0
 80079a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80079a8:	2303      	movs	r3, #3
 80079aa:	e00f      	b.n	80079cc <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	681a      	ldr	r2, [r3, #0]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	4013      	ands	r3, r2
 80079b6:	68ba      	ldr	r2, [r7, #8]
 80079b8:	429a      	cmp	r2, r3
 80079ba:	bf0c      	ite	eq
 80079bc:	2301      	moveq	r3, #1
 80079be:	2300      	movne	r3, #0
 80079c0:	b2db      	uxtb	r3, r3
 80079c2:	461a      	mov	r2, r3
 80079c4:	79fb      	ldrb	r3, [r7, #7]
 80079c6:	429a      	cmp	r2, r3
 80079c8:	d0c3      	beq.n	8007952 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3710      	adds	r7, #16
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}

080079d4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079d4:	b580      	push	{r7, lr}
 80079d6:	b086      	sub	sp, #24
 80079d8:	af00      	add	r7, sp, #0
 80079da:	60f8      	str	r0, [r7, #12]
 80079dc:	60b9      	str	r1, [r7, #8]
 80079de:	4613      	mov	r3, r2
 80079e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80079e2:	68ba      	ldr	r2, [r7, #8]
 80079e4:	68fb      	ldr	r3, [r7, #12]
 80079e6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	88fa      	ldrh	r2, [r7, #6]
 80079ec:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	2222      	movs	r2, #34	; 0x22
 80079f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a00:	4a23      	ldr	r2, [pc, #140]	; (8007a90 <UART_Start_Receive_DMA+0xbc>)
 8007a02:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a08:	4a22      	ldr	r2, [pc, #136]	; (8007a94 <UART_Start_Receive_DMA+0xc0>)
 8007a0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a10:	4a21      	ldr	r2, [pc, #132]	; (8007a98 <UART_Start_Receive_DMA+0xc4>)
 8007a12:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a18:	2200      	movs	r2, #0
 8007a1a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007a1c:	f107 0308 	add.w	r3, r7, #8
 8007a20:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	3304      	adds	r3, #4
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	681a      	ldr	r2, [r3, #0]
 8007a32:	88fb      	ldrh	r3, [r7, #6]
 8007a34:	f7fc fe28 	bl	8004688 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8007a38:	2300      	movs	r3, #0
 8007a3a:	613b      	str	r3, [r7, #16]
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	613b      	str	r3, [r7, #16]
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	685b      	ldr	r3, [r3, #4]
 8007a4a:	613b      	str	r3, [r7, #16]
 8007a4c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	2200      	movs	r2, #0
 8007a52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007a56:	68fb      	ldr	r3, [r7, #12]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68da      	ldr	r2, [r3, #12]
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007a64:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	695a      	ldr	r2, [r3, #20]
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f042 0201 	orr.w	r2, r2, #1
 8007a74:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	695a      	ldr	r2, [r3, #20]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a84:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8007a86:	2300      	movs	r3, #0
}
 8007a88:	4618      	mov	r0, r3
 8007a8a:	3718      	adds	r7, #24
 8007a8c:	46bd      	mov	sp, r7
 8007a8e:	bd80      	pop	{r7, pc}
 8007a90:	080077e1 	.word	0x080077e1
 8007a94:	08007877 	.word	0x08007877
 8007a98:	080078ad 	.word	0x080078ad

08007a9c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8007a9c:	b480      	push	{r7}
 8007a9e:	b083      	sub	sp, #12
 8007aa0:	af00      	add	r7, sp, #0
 8007aa2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	68da      	ldr	r2, [r3, #12]
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007ab2:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2220      	movs	r2, #32
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8007abc:	bf00      	nop
 8007abe:	370c      	adds	r7, #12
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac6:	4770      	bx	lr

08007ac8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007ac8:	b480      	push	{r7}
 8007aca:	b083      	sub	sp, #12
 8007acc:	af00      	add	r7, sp, #0
 8007ace:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	68da      	ldr	r2, [r3, #12]
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007ade:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	695a      	ldr	r2, [r3, #20]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d107      	bne.n	8007b08 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	68da      	ldr	r2, [r3, #12]
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	f022 0210 	bic.w	r2, r2, #16
 8007b06:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	2220      	movs	r2, #32
 8007b0c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	2200      	movs	r2, #0
 8007b14:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007b16:	bf00      	nop
 8007b18:	370c      	adds	r7, #12
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b20:	4770      	bx	lr

08007b22 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b22:	b580      	push	{r7, lr}
 8007b24:	b084      	sub	sp, #16
 8007b26:	af00      	add	r7, sp, #0
 8007b28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	2200      	movs	r2, #0
 8007b34:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	2200      	movs	r2, #0
 8007b3a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b3c:	68f8      	ldr	r0, [r7, #12]
 8007b3e:	f7f9 fca1 	bl	8001484 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b42:	bf00      	nop
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007b4a:	b480      	push	{r7}
 8007b4c:	b085      	sub	sp, #20
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b58:	b2db      	uxtb	r3, r3
 8007b5a:	2b21      	cmp	r3, #33	; 0x21
 8007b5c:	d13e      	bne.n	8007bdc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	689b      	ldr	r3, [r3, #8]
 8007b62:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b66:	d114      	bne.n	8007b92 <UART_Transmit_IT+0x48>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	691b      	ldr	r3, [r3, #16]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d110      	bne.n	8007b92 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	6a1b      	ldr	r3, [r3, #32]
 8007b74:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	881b      	ldrh	r3, [r3, #0]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b84:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6a1b      	ldr	r3, [r3, #32]
 8007b8a:	1c9a      	adds	r2, r3, #2
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	621a      	str	r2, [r3, #32]
 8007b90:	e008      	b.n	8007ba4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6a1b      	ldr	r3, [r3, #32]
 8007b96:	1c59      	adds	r1, r3, #1
 8007b98:	687a      	ldr	r2, [r7, #4]
 8007b9a:	6211      	str	r1, [r2, #32]
 8007b9c:	781a      	ldrb	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007ba8:	b29b      	uxth	r3, r3
 8007baa:	3b01      	subs	r3, #1
 8007bac:	b29b      	uxth	r3, r3
 8007bae:	687a      	ldr	r2, [r7, #4]
 8007bb0:	4619      	mov	r1, r3
 8007bb2:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d10f      	bne.n	8007bd8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68da      	ldr	r2, [r3, #12]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007bc6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	68da      	ldr	r2, [r3, #12]
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007bd6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007bd8:	2300      	movs	r3, #0
 8007bda:	e000      	b.n	8007bde <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007bdc:	2302      	movs	r3, #2
  }
}
 8007bde:	4618      	mov	r0, r3
 8007be0:	3714      	adds	r7, #20
 8007be2:	46bd      	mov	sp, r7
 8007be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be8:	4770      	bx	lr

08007bea <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007bea:	b580      	push	{r7, lr}
 8007bec:	b082      	sub	sp, #8
 8007bee:	af00      	add	r7, sp, #0
 8007bf0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68da      	ldr	r2, [r3, #12]
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c00:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2220      	movs	r2, #32
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	f7ff fdc8 	bl	80077a0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007c10:	2300      	movs	r3, #0
}
 8007c12:	4618      	mov	r0, r3
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b084      	sub	sp, #16
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b22      	cmp	r3, #34	; 0x22
 8007c2c:	f040 8087 	bne.w	8007d3e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c38:	d117      	bne.n	8007c6a <UART_Receive_IT+0x50>
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	691b      	ldr	r3, [r3, #16]
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d113      	bne.n	8007c6a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8007c42:	2300      	movs	r3, #0
 8007c44:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c4a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	b29b      	uxth	r3, r3
 8007c54:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007c58:	b29a      	uxth	r2, r3
 8007c5a:	68bb      	ldr	r3, [r7, #8]
 8007c5c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c62:	1c9a      	adds	r2, r3, #2
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	629a      	str	r2, [r3, #40]	; 0x28
 8007c68:	e026      	b.n	8007cb8 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c6e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8007c70:	2300      	movs	r3, #0
 8007c72:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	689b      	ldr	r3, [r3, #8]
 8007c78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c7c:	d007      	beq.n	8007c8e <UART_Receive_IT+0x74>
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	689b      	ldr	r3, [r3, #8]
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d10a      	bne.n	8007c9c <UART_Receive_IT+0x82>
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	691b      	ldr	r3, [r3, #16]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	d106      	bne.n	8007c9c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	685b      	ldr	r3, [r3, #4]
 8007c94:	b2da      	uxtb	r2, r3
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	701a      	strb	r2, [r3, #0]
 8007c9a:	e008      	b.n	8007cae <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	685b      	ldr	r3, [r3, #4]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ca8:	b2da      	uxtb	r2, r3
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	3b01      	subs	r3, #1
 8007cc0:	b29b      	uxth	r3, r3
 8007cc2:	687a      	ldr	r2, [r7, #4]
 8007cc4:	4619      	mov	r1, r3
 8007cc6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d136      	bne.n	8007d3a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	68da      	ldr	r2, [r3, #12]
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	f022 0220 	bic.w	r2, r2, #32
 8007cda:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	68da      	ldr	r2, [r3, #12]
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007cea:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	695a      	ldr	r2, [r3, #20]
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f022 0201 	bic.w	r2, r2, #1
 8007cfa:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2220      	movs	r2, #32
 8007d00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007d08:	2b01      	cmp	r3, #1
 8007d0a:	d10e      	bne.n	8007d2a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	68da      	ldr	r2, [r3, #12]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	f022 0210 	bic.w	r2, r2, #16
 8007d1a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d20:	4619      	mov	r1, r3
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f7ff fd50 	bl	80077c8 <HAL_UARTEx_RxEventCallback>
 8007d28:	e002      	b.n	8007d30 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f7f9 fb90 	bl	8001450 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8007d36:	2300      	movs	r3, #0
 8007d38:	e002      	b.n	8007d40 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	e000      	b.n	8007d40 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8007d3e:	2302      	movs	r3, #2
  }
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3710      	adds	r7, #16
 8007d44:	46bd      	mov	sp, r7
 8007d46:	bd80      	pop	{r7, pc}

08007d48 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d4c:	b09f      	sub	sp, #124	; 0x7c
 8007d4e:	af00      	add	r7, sp, #0
 8007d50:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007d52:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	691b      	ldr	r3, [r3, #16]
 8007d58:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007d5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d5e:	68d9      	ldr	r1, [r3, #12]
 8007d60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d62:	681a      	ldr	r2, [r3, #0]
 8007d64:	ea40 0301 	orr.w	r3, r0, r1
 8007d68:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d6c:	689a      	ldr	r2, [r3, #8]
 8007d6e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	431a      	orrs	r2, r3
 8007d74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	431a      	orrs	r2, r3
 8007d7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d7c:	69db      	ldr	r3, [r3, #28]
 8007d7e:	4313      	orrs	r3, r2
 8007d80:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8007d82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	68db      	ldr	r3, [r3, #12]
 8007d88:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007d8c:	f021 010c 	bic.w	r1, r1, #12
 8007d90:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d96:	430b      	orrs	r3, r1
 8007d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007d9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	695b      	ldr	r3, [r3, #20]
 8007da0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007da4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007da6:	6999      	ldr	r1, [r3, #24]
 8007da8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007daa:	681a      	ldr	r2, [r3, #0]
 8007dac:	ea40 0301 	orr.w	r3, r0, r1
 8007db0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007db4:	681a      	ldr	r2, [r3, #0]
 8007db6:	4bc5      	ldr	r3, [pc, #788]	; (80080cc <UART_SetConfig+0x384>)
 8007db8:	429a      	cmp	r2, r3
 8007dba:	d004      	beq.n	8007dc6 <UART_SetConfig+0x7e>
 8007dbc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	4bc3      	ldr	r3, [pc, #780]	; (80080d0 <UART_SetConfig+0x388>)
 8007dc2:	429a      	cmp	r2, r3
 8007dc4:	d103      	bne.n	8007dce <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007dc6:	f7fd fdd5 	bl	8005974 <HAL_RCC_GetPCLK2Freq>
 8007dca:	6778      	str	r0, [r7, #116]	; 0x74
 8007dcc:	e002      	b.n	8007dd4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007dce:	f7fd fdbd 	bl	800594c <HAL_RCC_GetPCLK1Freq>
 8007dd2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007dd4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007dd6:	69db      	ldr	r3, [r3, #28]
 8007dd8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ddc:	f040 80b6 	bne.w	8007f4c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007de0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007de2:	461c      	mov	r4, r3
 8007de4:	f04f 0500 	mov.w	r5, #0
 8007de8:	4622      	mov	r2, r4
 8007dea:	462b      	mov	r3, r5
 8007dec:	1891      	adds	r1, r2, r2
 8007dee:	6439      	str	r1, [r7, #64]	; 0x40
 8007df0:	415b      	adcs	r3, r3
 8007df2:	647b      	str	r3, [r7, #68]	; 0x44
 8007df4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007df8:	1912      	adds	r2, r2, r4
 8007dfa:	eb45 0303 	adc.w	r3, r5, r3
 8007dfe:	f04f 0000 	mov.w	r0, #0
 8007e02:	f04f 0100 	mov.w	r1, #0
 8007e06:	00d9      	lsls	r1, r3, #3
 8007e08:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e0c:	00d0      	lsls	r0, r2, #3
 8007e0e:	4602      	mov	r2, r0
 8007e10:	460b      	mov	r3, r1
 8007e12:	1911      	adds	r1, r2, r4
 8007e14:	6639      	str	r1, [r7, #96]	; 0x60
 8007e16:	416b      	adcs	r3, r5
 8007e18:	667b      	str	r3, [r7, #100]	; 0x64
 8007e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e1c:	685b      	ldr	r3, [r3, #4]
 8007e1e:	461a      	mov	r2, r3
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	1891      	adds	r1, r2, r2
 8007e26:	63b9      	str	r1, [r7, #56]	; 0x38
 8007e28:	415b      	adcs	r3, r3
 8007e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e2c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007e30:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8007e34:	f7f8 ff00 	bl	8000c38 <__aeabi_uldivmod>
 8007e38:	4602      	mov	r2, r0
 8007e3a:	460b      	mov	r3, r1
 8007e3c:	4ba5      	ldr	r3, [pc, #660]	; (80080d4 <UART_SetConfig+0x38c>)
 8007e3e:	fba3 2302 	umull	r2, r3, r3, r2
 8007e42:	095b      	lsrs	r3, r3, #5
 8007e44:	011e      	lsls	r6, r3, #4
 8007e46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007e48:	461c      	mov	r4, r3
 8007e4a:	f04f 0500 	mov.w	r5, #0
 8007e4e:	4622      	mov	r2, r4
 8007e50:	462b      	mov	r3, r5
 8007e52:	1891      	adds	r1, r2, r2
 8007e54:	6339      	str	r1, [r7, #48]	; 0x30
 8007e56:	415b      	adcs	r3, r3
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
 8007e5a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8007e5e:	1912      	adds	r2, r2, r4
 8007e60:	eb45 0303 	adc.w	r3, r5, r3
 8007e64:	f04f 0000 	mov.w	r0, #0
 8007e68:	f04f 0100 	mov.w	r1, #0
 8007e6c:	00d9      	lsls	r1, r3, #3
 8007e6e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007e72:	00d0      	lsls	r0, r2, #3
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	1911      	adds	r1, r2, r4
 8007e7a:	65b9      	str	r1, [r7, #88]	; 0x58
 8007e7c:	416b      	adcs	r3, r5
 8007e7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	461a      	mov	r2, r3
 8007e86:	f04f 0300 	mov.w	r3, #0
 8007e8a:	1891      	adds	r1, r2, r2
 8007e8c:	62b9      	str	r1, [r7, #40]	; 0x28
 8007e8e:	415b      	adcs	r3, r3
 8007e90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e92:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007e96:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8007e9a:	f7f8 fecd 	bl	8000c38 <__aeabi_uldivmod>
 8007e9e:	4602      	mov	r2, r0
 8007ea0:	460b      	mov	r3, r1
 8007ea2:	4b8c      	ldr	r3, [pc, #560]	; (80080d4 <UART_SetConfig+0x38c>)
 8007ea4:	fba3 1302 	umull	r1, r3, r3, r2
 8007ea8:	095b      	lsrs	r3, r3, #5
 8007eaa:	2164      	movs	r1, #100	; 0x64
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	1ad3      	subs	r3, r2, r3
 8007eb2:	00db      	lsls	r3, r3, #3
 8007eb4:	3332      	adds	r3, #50	; 0x32
 8007eb6:	4a87      	ldr	r2, [pc, #540]	; (80080d4 <UART_SetConfig+0x38c>)
 8007eb8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ebc:	095b      	lsrs	r3, r3, #5
 8007ebe:	005b      	lsls	r3, r3, #1
 8007ec0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007ec4:	441e      	add	r6, r3
 8007ec6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ec8:	4618      	mov	r0, r3
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	4602      	mov	r2, r0
 8007ed0:	460b      	mov	r3, r1
 8007ed2:	1894      	adds	r4, r2, r2
 8007ed4:	623c      	str	r4, [r7, #32]
 8007ed6:	415b      	adcs	r3, r3
 8007ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8007eda:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007ede:	1812      	adds	r2, r2, r0
 8007ee0:	eb41 0303 	adc.w	r3, r1, r3
 8007ee4:	f04f 0400 	mov.w	r4, #0
 8007ee8:	f04f 0500 	mov.w	r5, #0
 8007eec:	00dd      	lsls	r5, r3, #3
 8007eee:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ef2:	00d4      	lsls	r4, r2, #3
 8007ef4:	4622      	mov	r2, r4
 8007ef6:	462b      	mov	r3, r5
 8007ef8:	1814      	adds	r4, r2, r0
 8007efa:	653c      	str	r4, [r7, #80]	; 0x50
 8007efc:	414b      	adcs	r3, r1
 8007efe:	657b      	str	r3, [r7, #84]	; 0x54
 8007f00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f02:	685b      	ldr	r3, [r3, #4]
 8007f04:	461a      	mov	r2, r3
 8007f06:	f04f 0300 	mov.w	r3, #0
 8007f0a:	1891      	adds	r1, r2, r2
 8007f0c:	61b9      	str	r1, [r7, #24]
 8007f0e:	415b      	adcs	r3, r3
 8007f10:	61fb      	str	r3, [r7, #28]
 8007f12:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f16:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8007f1a:	f7f8 fe8d 	bl	8000c38 <__aeabi_uldivmod>
 8007f1e:	4602      	mov	r2, r0
 8007f20:	460b      	mov	r3, r1
 8007f22:	4b6c      	ldr	r3, [pc, #432]	; (80080d4 <UART_SetConfig+0x38c>)
 8007f24:	fba3 1302 	umull	r1, r3, r3, r2
 8007f28:	095b      	lsrs	r3, r3, #5
 8007f2a:	2164      	movs	r1, #100	; 0x64
 8007f2c:	fb01 f303 	mul.w	r3, r1, r3
 8007f30:	1ad3      	subs	r3, r2, r3
 8007f32:	00db      	lsls	r3, r3, #3
 8007f34:	3332      	adds	r3, #50	; 0x32
 8007f36:	4a67      	ldr	r2, [pc, #412]	; (80080d4 <UART_SetConfig+0x38c>)
 8007f38:	fba2 2303 	umull	r2, r3, r2, r3
 8007f3c:	095b      	lsrs	r3, r3, #5
 8007f3e:	f003 0207 	and.w	r2, r3, #7
 8007f42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	4432      	add	r2, r6
 8007f48:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f4a:	e0b9      	b.n	80080c0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f4c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007f4e:	461c      	mov	r4, r3
 8007f50:	f04f 0500 	mov.w	r5, #0
 8007f54:	4622      	mov	r2, r4
 8007f56:	462b      	mov	r3, r5
 8007f58:	1891      	adds	r1, r2, r2
 8007f5a:	6139      	str	r1, [r7, #16]
 8007f5c:	415b      	adcs	r3, r3
 8007f5e:	617b      	str	r3, [r7, #20]
 8007f60:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8007f64:	1912      	adds	r2, r2, r4
 8007f66:	eb45 0303 	adc.w	r3, r5, r3
 8007f6a:	f04f 0000 	mov.w	r0, #0
 8007f6e:	f04f 0100 	mov.w	r1, #0
 8007f72:	00d9      	lsls	r1, r3, #3
 8007f74:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007f78:	00d0      	lsls	r0, r2, #3
 8007f7a:	4602      	mov	r2, r0
 8007f7c:	460b      	mov	r3, r1
 8007f7e:	eb12 0804 	adds.w	r8, r2, r4
 8007f82:	eb43 0905 	adc.w	r9, r3, r5
 8007f86:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	4618      	mov	r0, r3
 8007f8c:	f04f 0100 	mov.w	r1, #0
 8007f90:	f04f 0200 	mov.w	r2, #0
 8007f94:	f04f 0300 	mov.w	r3, #0
 8007f98:	008b      	lsls	r3, r1, #2
 8007f9a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007f9e:	0082      	lsls	r2, r0, #2
 8007fa0:	4640      	mov	r0, r8
 8007fa2:	4649      	mov	r1, r9
 8007fa4:	f7f8 fe48 	bl	8000c38 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4b49      	ldr	r3, [pc, #292]	; (80080d4 <UART_SetConfig+0x38c>)
 8007fae:	fba3 2302 	umull	r2, r3, r3, r2
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	011e      	lsls	r6, r3, #4
 8007fb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007fb8:	4618      	mov	r0, r3
 8007fba:	f04f 0100 	mov.w	r1, #0
 8007fbe:	4602      	mov	r2, r0
 8007fc0:	460b      	mov	r3, r1
 8007fc2:	1894      	adds	r4, r2, r2
 8007fc4:	60bc      	str	r4, [r7, #8]
 8007fc6:	415b      	adcs	r3, r3
 8007fc8:	60fb      	str	r3, [r7, #12]
 8007fca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fce:	1812      	adds	r2, r2, r0
 8007fd0:	eb41 0303 	adc.w	r3, r1, r3
 8007fd4:	f04f 0400 	mov.w	r4, #0
 8007fd8:	f04f 0500 	mov.w	r5, #0
 8007fdc:	00dd      	lsls	r5, r3, #3
 8007fde:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007fe2:	00d4      	lsls	r4, r2, #3
 8007fe4:	4622      	mov	r2, r4
 8007fe6:	462b      	mov	r3, r5
 8007fe8:	1814      	adds	r4, r2, r0
 8007fea:	64bc      	str	r4, [r7, #72]	; 0x48
 8007fec:	414b      	adcs	r3, r1
 8007fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007ff0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ff2:	685b      	ldr	r3, [r3, #4]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f04f 0100 	mov.w	r1, #0
 8007ffa:	f04f 0200 	mov.w	r2, #0
 8007ffe:	f04f 0300 	mov.w	r3, #0
 8008002:	008b      	lsls	r3, r1, #2
 8008004:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008008:	0082      	lsls	r2, r0, #2
 800800a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800800e:	f7f8 fe13 	bl	8000c38 <__aeabi_uldivmod>
 8008012:	4602      	mov	r2, r0
 8008014:	460b      	mov	r3, r1
 8008016:	4b2f      	ldr	r3, [pc, #188]	; (80080d4 <UART_SetConfig+0x38c>)
 8008018:	fba3 1302 	umull	r1, r3, r3, r2
 800801c:	095b      	lsrs	r3, r3, #5
 800801e:	2164      	movs	r1, #100	; 0x64
 8008020:	fb01 f303 	mul.w	r3, r1, r3
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	011b      	lsls	r3, r3, #4
 8008028:	3332      	adds	r3, #50	; 0x32
 800802a:	4a2a      	ldr	r2, [pc, #168]	; (80080d4 <UART_SetConfig+0x38c>)
 800802c:	fba2 2303 	umull	r2, r3, r2, r3
 8008030:	095b      	lsrs	r3, r3, #5
 8008032:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008036:	441e      	add	r6, r3
 8008038:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800803a:	4618      	mov	r0, r3
 800803c:	f04f 0100 	mov.w	r1, #0
 8008040:	4602      	mov	r2, r0
 8008042:	460b      	mov	r3, r1
 8008044:	1894      	adds	r4, r2, r2
 8008046:	603c      	str	r4, [r7, #0]
 8008048:	415b      	adcs	r3, r3
 800804a:	607b      	str	r3, [r7, #4]
 800804c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008050:	1812      	adds	r2, r2, r0
 8008052:	eb41 0303 	adc.w	r3, r1, r3
 8008056:	f04f 0400 	mov.w	r4, #0
 800805a:	f04f 0500 	mov.w	r5, #0
 800805e:	00dd      	lsls	r5, r3, #3
 8008060:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008064:	00d4      	lsls	r4, r2, #3
 8008066:	4622      	mov	r2, r4
 8008068:	462b      	mov	r3, r5
 800806a:	eb12 0a00 	adds.w	sl, r2, r0
 800806e:	eb43 0b01 	adc.w	fp, r3, r1
 8008072:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008074:	685b      	ldr	r3, [r3, #4]
 8008076:	4618      	mov	r0, r3
 8008078:	f04f 0100 	mov.w	r1, #0
 800807c:	f04f 0200 	mov.w	r2, #0
 8008080:	f04f 0300 	mov.w	r3, #0
 8008084:	008b      	lsls	r3, r1, #2
 8008086:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800808a:	0082      	lsls	r2, r0, #2
 800808c:	4650      	mov	r0, sl
 800808e:	4659      	mov	r1, fp
 8008090:	f7f8 fdd2 	bl	8000c38 <__aeabi_uldivmod>
 8008094:	4602      	mov	r2, r0
 8008096:	460b      	mov	r3, r1
 8008098:	4b0e      	ldr	r3, [pc, #56]	; (80080d4 <UART_SetConfig+0x38c>)
 800809a:	fba3 1302 	umull	r1, r3, r3, r2
 800809e:	095b      	lsrs	r3, r3, #5
 80080a0:	2164      	movs	r1, #100	; 0x64
 80080a2:	fb01 f303 	mul.w	r3, r1, r3
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	011b      	lsls	r3, r3, #4
 80080aa:	3332      	adds	r3, #50	; 0x32
 80080ac:	4a09      	ldr	r2, [pc, #36]	; (80080d4 <UART_SetConfig+0x38c>)
 80080ae:	fba2 2303 	umull	r2, r3, r2, r3
 80080b2:	095b      	lsrs	r3, r3, #5
 80080b4:	f003 020f 	and.w	r2, r3, #15
 80080b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	4432      	add	r2, r6
 80080be:	609a      	str	r2, [r3, #8]
}
 80080c0:	bf00      	nop
 80080c2:	377c      	adds	r7, #124	; 0x7c
 80080c4:	46bd      	mov	sp, r7
 80080c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080ca:	bf00      	nop
 80080cc:	40011000 	.word	0x40011000
 80080d0:	40011400 	.word	0x40011400
 80080d4:	51eb851f 	.word	0x51eb851f

080080d8 <__errno>:
 80080d8:	4b01      	ldr	r3, [pc, #4]	; (80080e0 <__errno+0x8>)
 80080da:	6818      	ldr	r0, [r3, #0]
 80080dc:	4770      	bx	lr
 80080de:	bf00      	nop
 80080e0:	200001f8 	.word	0x200001f8

080080e4 <__libc_init_array>:
 80080e4:	b570      	push	{r4, r5, r6, lr}
 80080e6:	4d0d      	ldr	r5, [pc, #52]	; (800811c <__libc_init_array+0x38>)
 80080e8:	4c0d      	ldr	r4, [pc, #52]	; (8008120 <__libc_init_array+0x3c>)
 80080ea:	1b64      	subs	r4, r4, r5
 80080ec:	10a4      	asrs	r4, r4, #2
 80080ee:	2600      	movs	r6, #0
 80080f0:	42a6      	cmp	r6, r4
 80080f2:	d109      	bne.n	8008108 <__libc_init_array+0x24>
 80080f4:	4d0b      	ldr	r5, [pc, #44]	; (8008124 <__libc_init_array+0x40>)
 80080f6:	4c0c      	ldr	r4, [pc, #48]	; (8008128 <__libc_init_array+0x44>)
 80080f8:	f003 ffa4 	bl	800c044 <_init>
 80080fc:	1b64      	subs	r4, r4, r5
 80080fe:	10a4      	asrs	r4, r4, #2
 8008100:	2600      	movs	r6, #0
 8008102:	42a6      	cmp	r6, r4
 8008104:	d105      	bne.n	8008112 <__libc_init_array+0x2e>
 8008106:	bd70      	pop	{r4, r5, r6, pc}
 8008108:	f855 3b04 	ldr.w	r3, [r5], #4
 800810c:	4798      	blx	r3
 800810e:	3601      	adds	r6, #1
 8008110:	e7ee      	b.n	80080f0 <__libc_init_array+0xc>
 8008112:	f855 3b04 	ldr.w	r3, [r5], #4
 8008116:	4798      	blx	r3
 8008118:	3601      	adds	r6, #1
 800811a:	e7f2      	b.n	8008102 <__libc_init_array+0x1e>
 800811c:	0800cf90 	.word	0x0800cf90
 8008120:	0800cf90 	.word	0x0800cf90
 8008124:	0800cf90 	.word	0x0800cf90
 8008128:	0800cf94 	.word	0x0800cf94

0800812c <memset>:
 800812c:	4402      	add	r2, r0
 800812e:	4603      	mov	r3, r0
 8008130:	4293      	cmp	r3, r2
 8008132:	d100      	bne.n	8008136 <memset+0xa>
 8008134:	4770      	bx	lr
 8008136:	f803 1b01 	strb.w	r1, [r3], #1
 800813a:	e7f9      	b.n	8008130 <memset+0x4>

0800813c <_scanf_float>:
 800813c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008140:	b087      	sub	sp, #28
 8008142:	4617      	mov	r7, r2
 8008144:	9303      	str	r3, [sp, #12]
 8008146:	688b      	ldr	r3, [r1, #8]
 8008148:	1e5a      	subs	r2, r3, #1
 800814a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800814e:	bf83      	ittte	hi
 8008150:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008154:	195b      	addhi	r3, r3, r5
 8008156:	9302      	strhi	r3, [sp, #8]
 8008158:	2300      	movls	r3, #0
 800815a:	bf86      	itte	hi
 800815c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008160:	608b      	strhi	r3, [r1, #8]
 8008162:	9302      	strls	r3, [sp, #8]
 8008164:	680b      	ldr	r3, [r1, #0]
 8008166:	468b      	mov	fp, r1
 8008168:	2500      	movs	r5, #0
 800816a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800816e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008172:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008176:	4680      	mov	r8, r0
 8008178:	460c      	mov	r4, r1
 800817a:	465e      	mov	r6, fp
 800817c:	46aa      	mov	sl, r5
 800817e:	46a9      	mov	r9, r5
 8008180:	9501      	str	r5, [sp, #4]
 8008182:	68a2      	ldr	r2, [r4, #8]
 8008184:	b152      	cbz	r2, 800819c <_scanf_float+0x60>
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	781b      	ldrb	r3, [r3, #0]
 800818a:	2b4e      	cmp	r3, #78	; 0x4e
 800818c:	d864      	bhi.n	8008258 <_scanf_float+0x11c>
 800818e:	2b40      	cmp	r3, #64	; 0x40
 8008190:	d83c      	bhi.n	800820c <_scanf_float+0xd0>
 8008192:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008196:	b2c8      	uxtb	r0, r1
 8008198:	280e      	cmp	r0, #14
 800819a:	d93a      	bls.n	8008212 <_scanf_float+0xd6>
 800819c:	f1b9 0f00 	cmp.w	r9, #0
 80081a0:	d003      	beq.n	80081aa <_scanf_float+0x6e>
 80081a2:	6823      	ldr	r3, [r4, #0]
 80081a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80081a8:	6023      	str	r3, [r4, #0]
 80081aa:	f10a 3aff 	add.w	sl, sl, #4294967295
 80081ae:	f1ba 0f01 	cmp.w	sl, #1
 80081b2:	f200 8113 	bhi.w	80083dc <_scanf_float+0x2a0>
 80081b6:	455e      	cmp	r6, fp
 80081b8:	f200 8105 	bhi.w	80083c6 <_scanf_float+0x28a>
 80081bc:	2501      	movs	r5, #1
 80081be:	4628      	mov	r0, r5
 80081c0:	b007      	add	sp, #28
 80081c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081c6:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80081ca:	2a0d      	cmp	r2, #13
 80081cc:	d8e6      	bhi.n	800819c <_scanf_float+0x60>
 80081ce:	a101      	add	r1, pc, #4	; (adr r1, 80081d4 <_scanf_float+0x98>)
 80081d0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80081d4:	08008313 	.word	0x08008313
 80081d8:	0800819d 	.word	0x0800819d
 80081dc:	0800819d 	.word	0x0800819d
 80081e0:	0800819d 	.word	0x0800819d
 80081e4:	08008373 	.word	0x08008373
 80081e8:	0800834b 	.word	0x0800834b
 80081ec:	0800819d 	.word	0x0800819d
 80081f0:	0800819d 	.word	0x0800819d
 80081f4:	08008321 	.word	0x08008321
 80081f8:	0800819d 	.word	0x0800819d
 80081fc:	0800819d 	.word	0x0800819d
 8008200:	0800819d 	.word	0x0800819d
 8008204:	0800819d 	.word	0x0800819d
 8008208:	080082d9 	.word	0x080082d9
 800820c:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008210:	e7db      	b.n	80081ca <_scanf_float+0x8e>
 8008212:	290e      	cmp	r1, #14
 8008214:	d8c2      	bhi.n	800819c <_scanf_float+0x60>
 8008216:	a001      	add	r0, pc, #4	; (adr r0, 800821c <_scanf_float+0xe0>)
 8008218:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800821c:	080082cb 	.word	0x080082cb
 8008220:	0800819d 	.word	0x0800819d
 8008224:	080082cb 	.word	0x080082cb
 8008228:	0800835f 	.word	0x0800835f
 800822c:	0800819d 	.word	0x0800819d
 8008230:	08008279 	.word	0x08008279
 8008234:	080082b5 	.word	0x080082b5
 8008238:	080082b5 	.word	0x080082b5
 800823c:	080082b5 	.word	0x080082b5
 8008240:	080082b5 	.word	0x080082b5
 8008244:	080082b5 	.word	0x080082b5
 8008248:	080082b5 	.word	0x080082b5
 800824c:	080082b5 	.word	0x080082b5
 8008250:	080082b5 	.word	0x080082b5
 8008254:	080082b5 	.word	0x080082b5
 8008258:	2b6e      	cmp	r3, #110	; 0x6e
 800825a:	d809      	bhi.n	8008270 <_scanf_float+0x134>
 800825c:	2b60      	cmp	r3, #96	; 0x60
 800825e:	d8b2      	bhi.n	80081c6 <_scanf_float+0x8a>
 8008260:	2b54      	cmp	r3, #84	; 0x54
 8008262:	d077      	beq.n	8008354 <_scanf_float+0x218>
 8008264:	2b59      	cmp	r3, #89	; 0x59
 8008266:	d199      	bne.n	800819c <_scanf_float+0x60>
 8008268:	2d07      	cmp	r5, #7
 800826a:	d197      	bne.n	800819c <_scanf_float+0x60>
 800826c:	2508      	movs	r5, #8
 800826e:	e029      	b.n	80082c4 <_scanf_float+0x188>
 8008270:	2b74      	cmp	r3, #116	; 0x74
 8008272:	d06f      	beq.n	8008354 <_scanf_float+0x218>
 8008274:	2b79      	cmp	r3, #121	; 0x79
 8008276:	e7f6      	b.n	8008266 <_scanf_float+0x12a>
 8008278:	6821      	ldr	r1, [r4, #0]
 800827a:	05c8      	lsls	r0, r1, #23
 800827c:	d51a      	bpl.n	80082b4 <_scanf_float+0x178>
 800827e:	9b02      	ldr	r3, [sp, #8]
 8008280:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008284:	6021      	str	r1, [r4, #0]
 8008286:	f109 0901 	add.w	r9, r9, #1
 800828a:	b11b      	cbz	r3, 8008294 <_scanf_float+0x158>
 800828c:	3b01      	subs	r3, #1
 800828e:	3201      	adds	r2, #1
 8008290:	9302      	str	r3, [sp, #8]
 8008292:	60a2      	str	r2, [r4, #8]
 8008294:	68a3      	ldr	r3, [r4, #8]
 8008296:	3b01      	subs	r3, #1
 8008298:	60a3      	str	r3, [r4, #8]
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	3301      	adds	r3, #1
 800829e:	6123      	str	r3, [r4, #16]
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	3b01      	subs	r3, #1
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	607b      	str	r3, [r7, #4]
 80082a8:	f340 8084 	ble.w	80083b4 <_scanf_float+0x278>
 80082ac:	683b      	ldr	r3, [r7, #0]
 80082ae:	3301      	adds	r3, #1
 80082b0:	603b      	str	r3, [r7, #0]
 80082b2:	e766      	b.n	8008182 <_scanf_float+0x46>
 80082b4:	eb1a 0f05 	cmn.w	sl, r5
 80082b8:	f47f af70 	bne.w	800819c <_scanf_float+0x60>
 80082bc:	6822      	ldr	r2, [r4, #0]
 80082be:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80082c2:	6022      	str	r2, [r4, #0]
 80082c4:	f806 3b01 	strb.w	r3, [r6], #1
 80082c8:	e7e4      	b.n	8008294 <_scanf_float+0x158>
 80082ca:	6822      	ldr	r2, [r4, #0]
 80082cc:	0610      	lsls	r0, r2, #24
 80082ce:	f57f af65 	bpl.w	800819c <_scanf_float+0x60>
 80082d2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082d6:	e7f4      	b.n	80082c2 <_scanf_float+0x186>
 80082d8:	f1ba 0f00 	cmp.w	sl, #0
 80082dc:	d10e      	bne.n	80082fc <_scanf_float+0x1c0>
 80082de:	f1b9 0f00 	cmp.w	r9, #0
 80082e2:	d10e      	bne.n	8008302 <_scanf_float+0x1c6>
 80082e4:	6822      	ldr	r2, [r4, #0]
 80082e6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80082ea:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80082ee:	d108      	bne.n	8008302 <_scanf_float+0x1c6>
 80082f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80082f4:	6022      	str	r2, [r4, #0]
 80082f6:	f04f 0a01 	mov.w	sl, #1
 80082fa:	e7e3      	b.n	80082c4 <_scanf_float+0x188>
 80082fc:	f1ba 0f02 	cmp.w	sl, #2
 8008300:	d055      	beq.n	80083ae <_scanf_float+0x272>
 8008302:	2d01      	cmp	r5, #1
 8008304:	d002      	beq.n	800830c <_scanf_float+0x1d0>
 8008306:	2d04      	cmp	r5, #4
 8008308:	f47f af48 	bne.w	800819c <_scanf_float+0x60>
 800830c:	3501      	adds	r5, #1
 800830e:	b2ed      	uxtb	r5, r5
 8008310:	e7d8      	b.n	80082c4 <_scanf_float+0x188>
 8008312:	f1ba 0f01 	cmp.w	sl, #1
 8008316:	f47f af41 	bne.w	800819c <_scanf_float+0x60>
 800831a:	f04f 0a02 	mov.w	sl, #2
 800831e:	e7d1      	b.n	80082c4 <_scanf_float+0x188>
 8008320:	b97d      	cbnz	r5, 8008342 <_scanf_float+0x206>
 8008322:	f1b9 0f00 	cmp.w	r9, #0
 8008326:	f47f af3c 	bne.w	80081a2 <_scanf_float+0x66>
 800832a:	6822      	ldr	r2, [r4, #0]
 800832c:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008330:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008334:	f47f af39 	bne.w	80081aa <_scanf_float+0x6e>
 8008338:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800833c:	6022      	str	r2, [r4, #0]
 800833e:	2501      	movs	r5, #1
 8008340:	e7c0      	b.n	80082c4 <_scanf_float+0x188>
 8008342:	2d03      	cmp	r5, #3
 8008344:	d0e2      	beq.n	800830c <_scanf_float+0x1d0>
 8008346:	2d05      	cmp	r5, #5
 8008348:	e7de      	b.n	8008308 <_scanf_float+0x1cc>
 800834a:	2d02      	cmp	r5, #2
 800834c:	f47f af26 	bne.w	800819c <_scanf_float+0x60>
 8008350:	2503      	movs	r5, #3
 8008352:	e7b7      	b.n	80082c4 <_scanf_float+0x188>
 8008354:	2d06      	cmp	r5, #6
 8008356:	f47f af21 	bne.w	800819c <_scanf_float+0x60>
 800835a:	2507      	movs	r5, #7
 800835c:	e7b2      	b.n	80082c4 <_scanf_float+0x188>
 800835e:	6822      	ldr	r2, [r4, #0]
 8008360:	0591      	lsls	r1, r2, #22
 8008362:	f57f af1b 	bpl.w	800819c <_scanf_float+0x60>
 8008366:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800836a:	6022      	str	r2, [r4, #0]
 800836c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008370:	e7a8      	b.n	80082c4 <_scanf_float+0x188>
 8008372:	6822      	ldr	r2, [r4, #0]
 8008374:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008378:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800837c:	d006      	beq.n	800838c <_scanf_float+0x250>
 800837e:	0550      	lsls	r0, r2, #21
 8008380:	f57f af0c 	bpl.w	800819c <_scanf_float+0x60>
 8008384:	f1b9 0f00 	cmp.w	r9, #0
 8008388:	f43f af0f 	beq.w	80081aa <_scanf_float+0x6e>
 800838c:	0591      	lsls	r1, r2, #22
 800838e:	bf58      	it	pl
 8008390:	9901      	ldrpl	r1, [sp, #4]
 8008392:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008396:	bf58      	it	pl
 8008398:	eba9 0101 	subpl.w	r1, r9, r1
 800839c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80083a0:	bf58      	it	pl
 80083a2:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80083a6:	6022      	str	r2, [r4, #0]
 80083a8:	f04f 0900 	mov.w	r9, #0
 80083ac:	e78a      	b.n	80082c4 <_scanf_float+0x188>
 80083ae:	f04f 0a03 	mov.w	sl, #3
 80083b2:	e787      	b.n	80082c4 <_scanf_float+0x188>
 80083b4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80083b8:	4639      	mov	r1, r7
 80083ba:	4640      	mov	r0, r8
 80083bc:	4798      	blx	r3
 80083be:	2800      	cmp	r0, #0
 80083c0:	f43f aedf 	beq.w	8008182 <_scanf_float+0x46>
 80083c4:	e6ea      	b.n	800819c <_scanf_float+0x60>
 80083c6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083ca:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083ce:	463a      	mov	r2, r7
 80083d0:	4640      	mov	r0, r8
 80083d2:	4798      	blx	r3
 80083d4:	6923      	ldr	r3, [r4, #16]
 80083d6:	3b01      	subs	r3, #1
 80083d8:	6123      	str	r3, [r4, #16]
 80083da:	e6ec      	b.n	80081b6 <_scanf_float+0x7a>
 80083dc:	1e6b      	subs	r3, r5, #1
 80083de:	2b06      	cmp	r3, #6
 80083e0:	d825      	bhi.n	800842e <_scanf_float+0x2f2>
 80083e2:	2d02      	cmp	r5, #2
 80083e4:	d836      	bhi.n	8008454 <_scanf_float+0x318>
 80083e6:	455e      	cmp	r6, fp
 80083e8:	f67f aee8 	bls.w	80081bc <_scanf_float+0x80>
 80083ec:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80083f0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80083f4:	463a      	mov	r2, r7
 80083f6:	4640      	mov	r0, r8
 80083f8:	4798      	blx	r3
 80083fa:	6923      	ldr	r3, [r4, #16]
 80083fc:	3b01      	subs	r3, #1
 80083fe:	6123      	str	r3, [r4, #16]
 8008400:	e7f1      	b.n	80083e6 <_scanf_float+0x2aa>
 8008402:	9802      	ldr	r0, [sp, #8]
 8008404:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008408:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800840c:	9002      	str	r0, [sp, #8]
 800840e:	463a      	mov	r2, r7
 8008410:	4640      	mov	r0, r8
 8008412:	4798      	blx	r3
 8008414:	6923      	ldr	r3, [r4, #16]
 8008416:	3b01      	subs	r3, #1
 8008418:	6123      	str	r3, [r4, #16]
 800841a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800841e:	fa5f fa8a 	uxtb.w	sl, sl
 8008422:	f1ba 0f02 	cmp.w	sl, #2
 8008426:	d1ec      	bne.n	8008402 <_scanf_float+0x2c6>
 8008428:	3d03      	subs	r5, #3
 800842a:	b2ed      	uxtb	r5, r5
 800842c:	1b76      	subs	r6, r6, r5
 800842e:	6823      	ldr	r3, [r4, #0]
 8008430:	05da      	lsls	r2, r3, #23
 8008432:	d52f      	bpl.n	8008494 <_scanf_float+0x358>
 8008434:	055b      	lsls	r3, r3, #21
 8008436:	d510      	bpl.n	800845a <_scanf_float+0x31e>
 8008438:	455e      	cmp	r6, fp
 800843a:	f67f aebf 	bls.w	80081bc <_scanf_float+0x80>
 800843e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008442:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008446:	463a      	mov	r2, r7
 8008448:	4640      	mov	r0, r8
 800844a:	4798      	blx	r3
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	3b01      	subs	r3, #1
 8008450:	6123      	str	r3, [r4, #16]
 8008452:	e7f1      	b.n	8008438 <_scanf_float+0x2fc>
 8008454:	46aa      	mov	sl, r5
 8008456:	9602      	str	r6, [sp, #8]
 8008458:	e7df      	b.n	800841a <_scanf_float+0x2de>
 800845a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800845e:	6923      	ldr	r3, [r4, #16]
 8008460:	2965      	cmp	r1, #101	; 0x65
 8008462:	f103 33ff 	add.w	r3, r3, #4294967295
 8008466:	f106 35ff 	add.w	r5, r6, #4294967295
 800846a:	6123      	str	r3, [r4, #16]
 800846c:	d00c      	beq.n	8008488 <_scanf_float+0x34c>
 800846e:	2945      	cmp	r1, #69	; 0x45
 8008470:	d00a      	beq.n	8008488 <_scanf_float+0x34c>
 8008472:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008476:	463a      	mov	r2, r7
 8008478:	4640      	mov	r0, r8
 800847a:	4798      	blx	r3
 800847c:	6923      	ldr	r3, [r4, #16]
 800847e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008482:	3b01      	subs	r3, #1
 8008484:	1eb5      	subs	r5, r6, #2
 8008486:	6123      	str	r3, [r4, #16]
 8008488:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800848c:	463a      	mov	r2, r7
 800848e:	4640      	mov	r0, r8
 8008490:	4798      	blx	r3
 8008492:	462e      	mov	r6, r5
 8008494:	6825      	ldr	r5, [r4, #0]
 8008496:	f015 0510 	ands.w	r5, r5, #16
 800849a:	d158      	bne.n	800854e <_scanf_float+0x412>
 800849c:	7035      	strb	r5, [r6, #0]
 800849e:	6823      	ldr	r3, [r4, #0]
 80084a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084a8:	d11c      	bne.n	80084e4 <_scanf_float+0x3a8>
 80084aa:	9b01      	ldr	r3, [sp, #4]
 80084ac:	454b      	cmp	r3, r9
 80084ae:	eba3 0209 	sub.w	r2, r3, r9
 80084b2:	d124      	bne.n	80084fe <_scanf_float+0x3c2>
 80084b4:	2200      	movs	r2, #0
 80084b6:	4659      	mov	r1, fp
 80084b8:	4640      	mov	r0, r8
 80084ba:	f000 ff83 	bl	80093c4 <_strtod_r>
 80084be:	9b03      	ldr	r3, [sp, #12]
 80084c0:	6821      	ldr	r1, [r4, #0]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f011 0f02 	tst.w	r1, #2
 80084c8:	ec57 6b10 	vmov	r6, r7, d0
 80084cc:	f103 0204 	add.w	r2, r3, #4
 80084d0:	d020      	beq.n	8008514 <_scanf_float+0x3d8>
 80084d2:	9903      	ldr	r1, [sp, #12]
 80084d4:	600a      	str	r2, [r1, #0]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	e9c3 6700 	strd	r6, r7, [r3]
 80084dc:	68e3      	ldr	r3, [r4, #12]
 80084de:	3301      	adds	r3, #1
 80084e0:	60e3      	str	r3, [r4, #12]
 80084e2:	e66c      	b.n	80081be <_scanf_float+0x82>
 80084e4:	9b04      	ldr	r3, [sp, #16]
 80084e6:	2b00      	cmp	r3, #0
 80084e8:	d0e4      	beq.n	80084b4 <_scanf_float+0x378>
 80084ea:	9905      	ldr	r1, [sp, #20]
 80084ec:	230a      	movs	r3, #10
 80084ee:	462a      	mov	r2, r5
 80084f0:	3101      	adds	r1, #1
 80084f2:	4640      	mov	r0, r8
 80084f4:	f000 fff0 	bl	80094d8 <_strtol_r>
 80084f8:	9b04      	ldr	r3, [sp, #16]
 80084fa:	9e05      	ldr	r6, [sp, #20]
 80084fc:	1ac2      	subs	r2, r0, r3
 80084fe:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008502:	429e      	cmp	r6, r3
 8008504:	bf28      	it	cs
 8008506:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800850a:	4912      	ldr	r1, [pc, #72]	; (8008554 <_scanf_float+0x418>)
 800850c:	4630      	mov	r0, r6
 800850e:	f000 f8a1 	bl	8008654 <siprintf>
 8008512:	e7cf      	b.n	80084b4 <_scanf_float+0x378>
 8008514:	f011 0f04 	tst.w	r1, #4
 8008518:	9903      	ldr	r1, [sp, #12]
 800851a:	600a      	str	r2, [r1, #0]
 800851c:	d1db      	bne.n	80084d6 <_scanf_float+0x39a>
 800851e:	f8d3 8000 	ldr.w	r8, [r3]
 8008522:	ee10 2a10 	vmov	r2, s0
 8008526:	ee10 0a10 	vmov	r0, s0
 800852a:	463b      	mov	r3, r7
 800852c:	4639      	mov	r1, r7
 800852e:	f7f8 fafd 	bl	8000b2c <__aeabi_dcmpun>
 8008532:	b128      	cbz	r0, 8008540 <_scanf_float+0x404>
 8008534:	4808      	ldr	r0, [pc, #32]	; (8008558 <_scanf_float+0x41c>)
 8008536:	f000 f887 	bl	8008648 <nanf>
 800853a:	ed88 0a00 	vstr	s0, [r8]
 800853e:	e7cd      	b.n	80084dc <_scanf_float+0x3a0>
 8008540:	4630      	mov	r0, r6
 8008542:	4639      	mov	r1, r7
 8008544:	f7f8 fb28 	bl	8000b98 <__aeabi_d2f>
 8008548:	f8c8 0000 	str.w	r0, [r8]
 800854c:	e7c6      	b.n	80084dc <_scanf_float+0x3a0>
 800854e:	2500      	movs	r5, #0
 8008550:	e635      	b.n	80081be <_scanf_float+0x82>
 8008552:	bf00      	nop
 8008554:	0800cb28 	.word	0x0800cb28
 8008558:	0800cf85 	.word	0x0800cf85

0800855c <_puts_r>:
 800855c:	b570      	push	{r4, r5, r6, lr}
 800855e:	460e      	mov	r6, r1
 8008560:	4605      	mov	r5, r0
 8008562:	b118      	cbz	r0, 800856c <_puts_r+0x10>
 8008564:	6983      	ldr	r3, [r0, #24]
 8008566:	b90b      	cbnz	r3, 800856c <_puts_r+0x10>
 8008568:	f001 f9b4 	bl	80098d4 <__sinit>
 800856c:	69ab      	ldr	r3, [r5, #24]
 800856e:	68ac      	ldr	r4, [r5, #8]
 8008570:	b913      	cbnz	r3, 8008578 <_puts_r+0x1c>
 8008572:	4628      	mov	r0, r5
 8008574:	f001 f9ae 	bl	80098d4 <__sinit>
 8008578:	4b2c      	ldr	r3, [pc, #176]	; (800862c <_puts_r+0xd0>)
 800857a:	429c      	cmp	r4, r3
 800857c:	d120      	bne.n	80085c0 <_puts_r+0x64>
 800857e:	686c      	ldr	r4, [r5, #4]
 8008580:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008582:	07db      	lsls	r3, r3, #31
 8008584:	d405      	bmi.n	8008592 <_puts_r+0x36>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	0598      	lsls	r0, r3, #22
 800858a:	d402      	bmi.n	8008592 <_puts_r+0x36>
 800858c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800858e:	f001 fdae 	bl	800a0ee <__retarget_lock_acquire_recursive>
 8008592:	89a3      	ldrh	r3, [r4, #12]
 8008594:	0719      	lsls	r1, r3, #28
 8008596:	d51d      	bpl.n	80085d4 <_puts_r+0x78>
 8008598:	6923      	ldr	r3, [r4, #16]
 800859a:	b1db      	cbz	r3, 80085d4 <_puts_r+0x78>
 800859c:	3e01      	subs	r6, #1
 800859e:	68a3      	ldr	r3, [r4, #8]
 80085a0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085a4:	3b01      	subs	r3, #1
 80085a6:	60a3      	str	r3, [r4, #8]
 80085a8:	bb39      	cbnz	r1, 80085fa <_puts_r+0x9e>
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	da38      	bge.n	8008620 <_puts_r+0xc4>
 80085ae:	4622      	mov	r2, r4
 80085b0:	210a      	movs	r1, #10
 80085b2:	4628      	mov	r0, r5
 80085b4:	f000 ff92 	bl	80094dc <__swbuf_r>
 80085b8:	3001      	adds	r0, #1
 80085ba:	d011      	beq.n	80085e0 <_puts_r+0x84>
 80085bc:	250a      	movs	r5, #10
 80085be:	e011      	b.n	80085e4 <_puts_r+0x88>
 80085c0:	4b1b      	ldr	r3, [pc, #108]	; (8008630 <_puts_r+0xd4>)
 80085c2:	429c      	cmp	r4, r3
 80085c4:	d101      	bne.n	80085ca <_puts_r+0x6e>
 80085c6:	68ac      	ldr	r4, [r5, #8]
 80085c8:	e7da      	b.n	8008580 <_puts_r+0x24>
 80085ca:	4b1a      	ldr	r3, [pc, #104]	; (8008634 <_puts_r+0xd8>)
 80085cc:	429c      	cmp	r4, r3
 80085ce:	bf08      	it	eq
 80085d0:	68ec      	ldreq	r4, [r5, #12]
 80085d2:	e7d5      	b.n	8008580 <_puts_r+0x24>
 80085d4:	4621      	mov	r1, r4
 80085d6:	4628      	mov	r0, r5
 80085d8:	f000 ffe4 	bl	80095a4 <__swsetup_r>
 80085dc:	2800      	cmp	r0, #0
 80085de:	d0dd      	beq.n	800859c <_puts_r+0x40>
 80085e0:	f04f 35ff 	mov.w	r5, #4294967295
 80085e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80085e6:	07da      	lsls	r2, r3, #31
 80085e8:	d405      	bmi.n	80085f6 <_puts_r+0x9a>
 80085ea:	89a3      	ldrh	r3, [r4, #12]
 80085ec:	059b      	lsls	r3, r3, #22
 80085ee:	d402      	bmi.n	80085f6 <_puts_r+0x9a>
 80085f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80085f2:	f001 fd7d 	bl	800a0f0 <__retarget_lock_release_recursive>
 80085f6:	4628      	mov	r0, r5
 80085f8:	bd70      	pop	{r4, r5, r6, pc}
 80085fa:	2b00      	cmp	r3, #0
 80085fc:	da04      	bge.n	8008608 <_puts_r+0xac>
 80085fe:	69a2      	ldr	r2, [r4, #24]
 8008600:	429a      	cmp	r2, r3
 8008602:	dc06      	bgt.n	8008612 <_puts_r+0xb6>
 8008604:	290a      	cmp	r1, #10
 8008606:	d004      	beq.n	8008612 <_puts_r+0xb6>
 8008608:	6823      	ldr	r3, [r4, #0]
 800860a:	1c5a      	adds	r2, r3, #1
 800860c:	6022      	str	r2, [r4, #0]
 800860e:	7019      	strb	r1, [r3, #0]
 8008610:	e7c5      	b.n	800859e <_puts_r+0x42>
 8008612:	4622      	mov	r2, r4
 8008614:	4628      	mov	r0, r5
 8008616:	f000 ff61 	bl	80094dc <__swbuf_r>
 800861a:	3001      	adds	r0, #1
 800861c:	d1bf      	bne.n	800859e <_puts_r+0x42>
 800861e:	e7df      	b.n	80085e0 <_puts_r+0x84>
 8008620:	6823      	ldr	r3, [r4, #0]
 8008622:	250a      	movs	r5, #10
 8008624:	1c5a      	adds	r2, r3, #1
 8008626:	6022      	str	r2, [r4, #0]
 8008628:	701d      	strb	r5, [r3, #0]
 800862a:	e7db      	b.n	80085e4 <_puts_r+0x88>
 800862c:	0800ccb4 	.word	0x0800ccb4
 8008630:	0800ccd4 	.word	0x0800ccd4
 8008634:	0800cc94 	.word	0x0800cc94

08008638 <puts>:
 8008638:	4b02      	ldr	r3, [pc, #8]	; (8008644 <puts+0xc>)
 800863a:	4601      	mov	r1, r0
 800863c:	6818      	ldr	r0, [r3, #0]
 800863e:	f7ff bf8d 	b.w	800855c <_puts_r>
 8008642:	bf00      	nop
 8008644:	200001f8 	.word	0x200001f8

08008648 <nanf>:
 8008648:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008650 <nanf+0x8>
 800864c:	4770      	bx	lr
 800864e:	bf00      	nop
 8008650:	7fc00000 	.word	0x7fc00000

08008654 <siprintf>:
 8008654:	b40e      	push	{r1, r2, r3}
 8008656:	b500      	push	{lr}
 8008658:	b09c      	sub	sp, #112	; 0x70
 800865a:	ab1d      	add	r3, sp, #116	; 0x74
 800865c:	9002      	str	r0, [sp, #8]
 800865e:	9006      	str	r0, [sp, #24]
 8008660:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008664:	4809      	ldr	r0, [pc, #36]	; (800868c <siprintf+0x38>)
 8008666:	9107      	str	r1, [sp, #28]
 8008668:	9104      	str	r1, [sp, #16]
 800866a:	4909      	ldr	r1, [pc, #36]	; (8008690 <siprintf+0x3c>)
 800866c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008670:	9105      	str	r1, [sp, #20]
 8008672:	6800      	ldr	r0, [r0, #0]
 8008674:	9301      	str	r3, [sp, #4]
 8008676:	a902      	add	r1, sp, #8
 8008678:	f002 fba2 	bl	800adc0 <_svfiprintf_r>
 800867c:	9b02      	ldr	r3, [sp, #8]
 800867e:	2200      	movs	r2, #0
 8008680:	701a      	strb	r2, [r3, #0]
 8008682:	b01c      	add	sp, #112	; 0x70
 8008684:	f85d eb04 	ldr.w	lr, [sp], #4
 8008688:	b003      	add	sp, #12
 800868a:	4770      	bx	lr
 800868c:	200001f8 	.word	0x200001f8
 8008690:	ffff0208 	.word	0xffff0208

08008694 <siscanf>:
 8008694:	b40e      	push	{r1, r2, r3}
 8008696:	b510      	push	{r4, lr}
 8008698:	b09f      	sub	sp, #124	; 0x7c
 800869a:	ac21      	add	r4, sp, #132	; 0x84
 800869c:	f44f 7101 	mov.w	r1, #516	; 0x204
 80086a0:	f854 2b04 	ldr.w	r2, [r4], #4
 80086a4:	9201      	str	r2, [sp, #4]
 80086a6:	f8ad 101c 	strh.w	r1, [sp, #28]
 80086aa:	9004      	str	r0, [sp, #16]
 80086ac:	9008      	str	r0, [sp, #32]
 80086ae:	f7f7 fd8f 	bl	80001d0 <strlen>
 80086b2:	4b0c      	ldr	r3, [pc, #48]	; (80086e4 <siscanf+0x50>)
 80086b4:	9005      	str	r0, [sp, #20]
 80086b6:	9009      	str	r0, [sp, #36]	; 0x24
 80086b8:	930d      	str	r3, [sp, #52]	; 0x34
 80086ba:	480b      	ldr	r0, [pc, #44]	; (80086e8 <siscanf+0x54>)
 80086bc:	9a01      	ldr	r2, [sp, #4]
 80086be:	6800      	ldr	r0, [r0, #0]
 80086c0:	9403      	str	r4, [sp, #12]
 80086c2:	2300      	movs	r3, #0
 80086c4:	9311      	str	r3, [sp, #68]	; 0x44
 80086c6:	9316      	str	r3, [sp, #88]	; 0x58
 80086c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80086cc:	f8ad 301e 	strh.w	r3, [sp, #30]
 80086d0:	a904      	add	r1, sp, #16
 80086d2:	4623      	mov	r3, r4
 80086d4:	f002 fcce 	bl	800b074 <__ssvfiscanf_r>
 80086d8:	b01f      	add	sp, #124	; 0x7c
 80086da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80086de:	b003      	add	sp, #12
 80086e0:	4770      	bx	lr
 80086e2:	bf00      	nop
 80086e4:	0800870f 	.word	0x0800870f
 80086e8:	200001f8 	.word	0x200001f8

080086ec <__sread>:
 80086ec:	b510      	push	{r4, lr}
 80086ee:	460c      	mov	r4, r1
 80086f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80086f4:	f003 f916 	bl	800b924 <_read_r>
 80086f8:	2800      	cmp	r0, #0
 80086fa:	bfab      	itete	ge
 80086fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80086fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008700:	181b      	addge	r3, r3, r0
 8008702:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008706:	bfac      	ite	ge
 8008708:	6563      	strge	r3, [r4, #84]	; 0x54
 800870a:	81a3      	strhlt	r3, [r4, #12]
 800870c:	bd10      	pop	{r4, pc}

0800870e <__seofread>:
 800870e:	2000      	movs	r0, #0
 8008710:	4770      	bx	lr

08008712 <__swrite>:
 8008712:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008716:	461f      	mov	r7, r3
 8008718:	898b      	ldrh	r3, [r1, #12]
 800871a:	05db      	lsls	r3, r3, #23
 800871c:	4605      	mov	r5, r0
 800871e:	460c      	mov	r4, r1
 8008720:	4616      	mov	r6, r2
 8008722:	d505      	bpl.n	8008730 <__swrite+0x1e>
 8008724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008728:	2302      	movs	r3, #2
 800872a:	2200      	movs	r2, #0
 800872c:	f001 fce2 	bl	800a0f4 <_lseek_r>
 8008730:	89a3      	ldrh	r3, [r4, #12]
 8008732:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008736:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800873a:	81a3      	strh	r3, [r4, #12]
 800873c:	4632      	mov	r2, r6
 800873e:	463b      	mov	r3, r7
 8008740:	4628      	mov	r0, r5
 8008742:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008746:	f000 bf1b 	b.w	8009580 <_write_r>

0800874a <__sseek>:
 800874a:	b510      	push	{r4, lr}
 800874c:	460c      	mov	r4, r1
 800874e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008752:	f001 fccf 	bl	800a0f4 <_lseek_r>
 8008756:	1c43      	adds	r3, r0, #1
 8008758:	89a3      	ldrh	r3, [r4, #12]
 800875a:	bf15      	itete	ne
 800875c:	6560      	strne	r0, [r4, #84]	; 0x54
 800875e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008762:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008766:	81a3      	strheq	r3, [r4, #12]
 8008768:	bf18      	it	ne
 800876a:	81a3      	strhne	r3, [r4, #12]
 800876c:	bd10      	pop	{r4, pc}

0800876e <__sclose>:
 800876e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008772:	f000 bf85 	b.w	8009680 <_close_r>

08008776 <sulp>:
 8008776:	b570      	push	{r4, r5, r6, lr}
 8008778:	4604      	mov	r4, r0
 800877a:	460d      	mov	r5, r1
 800877c:	ec45 4b10 	vmov	d0, r4, r5
 8008780:	4616      	mov	r6, r2
 8008782:	f002 f8b9 	bl	800a8f8 <__ulp>
 8008786:	ec51 0b10 	vmov	r0, r1, d0
 800878a:	b17e      	cbz	r6, 80087ac <sulp+0x36>
 800878c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008790:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008794:	2b00      	cmp	r3, #0
 8008796:	dd09      	ble.n	80087ac <sulp+0x36>
 8008798:	051b      	lsls	r3, r3, #20
 800879a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800879e:	2400      	movs	r4, #0
 80087a0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80087a4:	4622      	mov	r2, r4
 80087a6:	462b      	mov	r3, r5
 80087a8:	f7f7 ff26 	bl	80005f8 <__aeabi_dmul>
 80087ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080087b0 <_strtod_l>:
 80087b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80087b4:	b0a3      	sub	sp, #140	; 0x8c
 80087b6:	461f      	mov	r7, r3
 80087b8:	2300      	movs	r3, #0
 80087ba:	931e      	str	r3, [sp, #120]	; 0x78
 80087bc:	4ba4      	ldr	r3, [pc, #656]	; (8008a50 <_strtod_l+0x2a0>)
 80087be:	9219      	str	r2, [sp, #100]	; 0x64
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	9307      	str	r3, [sp, #28]
 80087c4:	4604      	mov	r4, r0
 80087c6:	4618      	mov	r0, r3
 80087c8:	4688      	mov	r8, r1
 80087ca:	f7f7 fd01 	bl	80001d0 <strlen>
 80087ce:	f04f 0a00 	mov.w	sl, #0
 80087d2:	4605      	mov	r5, r0
 80087d4:	f04f 0b00 	mov.w	fp, #0
 80087d8:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 80087dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80087de:	781a      	ldrb	r2, [r3, #0]
 80087e0:	2a2b      	cmp	r2, #43	; 0x2b
 80087e2:	d04c      	beq.n	800887e <_strtod_l+0xce>
 80087e4:	d839      	bhi.n	800885a <_strtod_l+0xaa>
 80087e6:	2a0d      	cmp	r2, #13
 80087e8:	d832      	bhi.n	8008850 <_strtod_l+0xa0>
 80087ea:	2a08      	cmp	r2, #8
 80087ec:	d832      	bhi.n	8008854 <_strtod_l+0xa4>
 80087ee:	2a00      	cmp	r2, #0
 80087f0:	d03c      	beq.n	800886c <_strtod_l+0xbc>
 80087f2:	2300      	movs	r3, #0
 80087f4:	930e      	str	r3, [sp, #56]	; 0x38
 80087f6:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 80087f8:	7833      	ldrb	r3, [r6, #0]
 80087fa:	2b30      	cmp	r3, #48	; 0x30
 80087fc:	f040 80b4 	bne.w	8008968 <_strtod_l+0x1b8>
 8008800:	7873      	ldrb	r3, [r6, #1]
 8008802:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008806:	2b58      	cmp	r3, #88	; 0x58
 8008808:	d16c      	bne.n	80088e4 <_strtod_l+0x134>
 800880a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800880c:	9301      	str	r3, [sp, #4]
 800880e:	ab1e      	add	r3, sp, #120	; 0x78
 8008810:	9702      	str	r7, [sp, #8]
 8008812:	9300      	str	r3, [sp, #0]
 8008814:	4a8f      	ldr	r2, [pc, #572]	; (8008a54 <_strtod_l+0x2a4>)
 8008816:	ab1f      	add	r3, sp, #124	; 0x7c
 8008818:	a91d      	add	r1, sp, #116	; 0x74
 800881a:	4620      	mov	r0, r4
 800881c:	f001 f95e 	bl	8009adc <__gethex>
 8008820:	f010 0707 	ands.w	r7, r0, #7
 8008824:	4605      	mov	r5, r0
 8008826:	d005      	beq.n	8008834 <_strtod_l+0x84>
 8008828:	2f06      	cmp	r7, #6
 800882a:	d12a      	bne.n	8008882 <_strtod_l+0xd2>
 800882c:	3601      	adds	r6, #1
 800882e:	2300      	movs	r3, #0
 8008830:	961d      	str	r6, [sp, #116]	; 0x74
 8008832:	930e      	str	r3, [sp, #56]	; 0x38
 8008834:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008836:	2b00      	cmp	r3, #0
 8008838:	f040 8596 	bne.w	8009368 <_strtod_l+0xbb8>
 800883c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800883e:	b1db      	cbz	r3, 8008878 <_strtod_l+0xc8>
 8008840:	4652      	mov	r2, sl
 8008842:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008846:	ec43 2b10 	vmov	d0, r2, r3
 800884a:	b023      	add	sp, #140	; 0x8c
 800884c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008850:	2a20      	cmp	r2, #32
 8008852:	d1ce      	bne.n	80087f2 <_strtod_l+0x42>
 8008854:	3301      	adds	r3, #1
 8008856:	931d      	str	r3, [sp, #116]	; 0x74
 8008858:	e7c0      	b.n	80087dc <_strtod_l+0x2c>
 800885a:	2a2d      	cmp	r2, #45	; 0x2d
 800885c:	d1c9      	bne.n	80087f2 <_strtod_l+0x42>
 800885e:	2201      	movs	r2, #1
 8008860:	920e      	str	r2, [sp, #56]	; 0x38
 8008862:	1c5a      	adds	r2, r3, #1
 8008864:	921d      	str	r2, [sp, #116]	; 0x74
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d1c4      	bne.n	80087f6 <_strtod_l+0x46>
 800886c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800886e:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008872:	2b00      	cmp	r3, #0
 8008874:	f040 8576 	bne.w	8009364 <_strtod_l+0xbb4>
 8008878:	4652      	mov	r2, sl
 800887a:	465b      	mov	r3, fp
 800887c:	e7e3      	b.n	8008846 <_strtod_l+0x96>
 800887e:	2200      	movs	r2, #0
 8008880:	e7ee      	b.n	8008860 <_strtod_l+0xb0>
 8008882:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008884:	b13a      	cbz	r2, 8008896 <_strtod_l+0xe6>
 8008886:	2135      	movs	r1, #53	; 0x35
 8008888:	a820      	add	r0, sp, #128	; 0x80
 800888a:	f002 f940 	bl	800ab0e <__copybits>
 800888e:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008890:	4620      	mov	r0, r4
 8008892:	f001 fd05 	bl	800a2a0 <_Bfree>
 8008896:	3f01      	subs	r7, #1
 8008898:	2f05      	cmp	r7, #5
 800889a:	d807      	bhi.n	80088ac <_strtod_l+0xfc>
 800889c:	e8df f007 	tbb	[pc, r7]
 80088a0:	1d180b0e 	.word	0x1d180b0e
 80088a4:	030e      	.short	0x030e
 80088a6:	f04f 0b00 	mov.w	fp, #0
 80088aa:	46da      	mov	sl, fp
 80088ac:	0728      	lsls	r0, r5, #28
 80088ae:	d5c1      	bpl.n	8008834 <_strtod_l+0x84>
 80088b0:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80088b4:	e7be      	b.n	8008834 <_strtod_l+0x84>
 80088b6:	e9dd ab20 	ldrd	sl, fp, [sp, #128]	; 0x80
 80088ba:	e7f7      	b.n	80088ac <_strtod_l+0xfc>
 80088bc:	e9dd a320 	ldrd	sl, r3, [sp, #128]	; 0x80
 80088c0:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80088c2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80088c6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80088ca:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80088ce:	e7ed      	b.n	80088ac <_strtod_l+0xfc>
 80088d0:	f8df b184 	ldr.w	fp, [pc, #388]	; 8008a58 <_strtod_l+0x2a8>
 80088d4:	f04f 0a00 	mov.w	sl, #0
 80088d8:	e7e8      	b.n	80088ac <_strtod_l+0xfc>
 80088da:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80088de:	f04f 3aff 	mov.w	sl, #4294967295
 80088e2:	e7e3      	b.n	80088ac <_strtod_l+0xfc>
 80088e4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088e6:	1c5a      	adds	r2, r3, #1
 80088e8:	921d      	str	r2, [sp, #116]	; 0x74
 80088ea:	785b      	ldrb	r3, [r3, #1]
 80088ec:	2b30      	cmp	r3, #48	; 0x30
 80088ee:	d0f9      	beq.n	80088e4 <_strtod_l+0x134>
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d09f      	beq.n	8008834 <_strtod_l+0x84>
 80088f4:	2301      	movs	r3, #1
 80088f6:	f04f 0900 	mov.w	r9, #0
 80088fa:	9304      	str	r3, [sp, #16]
 80088fc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80088fe:	930a      	str	r3, [sp, #40]	; 0x28
 8008900:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8008904:	464f      	mov	r7, r9
 8008906:	220a      	movs	r2, #10
 8008908:	981d      	ldr	r0, [sp, #116]	; 0x74
 800890a:	7806      	ldrb	r6, [r0, #0]
 800890c:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008910:	b2d9      	uxtb	r1, r3
 8008912:	2909      	cmp	r1, #9
 8008914:	d92a      	bls.n	800896c <_strtod_l+0x1bc>
 8008916:	9907      	ldr	r1, [sp, #28]
 8008918:	462a      	mov	r2, r5
 800891a:	f003 f867 	bl	800b9ec <strncmp>
 800891e:	b398      	cbz	r0, 8008988 <_strtod_l+0x1d8>
 8008920:	2000      	movs	r0, #0
 8008922:	4633      	mov	r3, r6
 8008924:	463d      	mov	r5, r7
 8008926:	9007      	str	r0, [sp, #28]
 8008928:	4602      	mov	r2, r0
 800892a:	2b65      	cmp	r3, #101	; 0x65
 800892c:	d001      	beq.n	8008932 <_strtod_l+0x182>
 800892e:	2b45      	cmp	r3, #69	; 0x45
 8008930:	d118      	bne.n	8008964 <_strtod_l+0x1b4>
 8008932:	b91d      	cbnz	r5, 800893c <_strtod_l+0x18c>
 8008934:	9b04      	ldr	r3, [sp, #16]
 8008936:	4303      	orrs	r3, r0
 8008938:	d098      	beq.n	800886c <_strtod_l+0xbc>
 800893a:	2500      	movs	r5, #0
 800893c:	f8dd 8074 	ldr.w	r8, [sp, #116]	; 0x74
 8008940:	f108 0301 	add.w	r3, r8, #1
 8008944:	931d      	str	r3, [sp, #116]	; 0x74
 8008946:	f898 3001 	ldrb.w	r3, [r8, #1]
 800894a:	2b2b      	cmp	r3, #43	; 0x2b
 800894c:	d075      	beq.n	8008a3a <_strtod_l+0x28a>
 800894e:	2b2d      	cmp	r3, #45	; 0x2d
 8008950:	d07b      	beq.n	8008a4a <_strtod_l+0x29a>
 8008952:	f04f 0c00 	mov.w	ip, #0
 8008956:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800895a:	2909      	cmp	r1, #9
 800895c:	f240 8082 	bls.w	8008a64 <_strtod_l+0x2b4>
 8008960:	f8cd 8074 	str.w	r8, [sp, #116]	; 0x74
 8008964:	2600      	movs	r6, #0
 8008966:	e09d      	b.n	8008aa4 <_strtod_l+0x2f4>
 8008968:	2300      	movs	r3, #0
 800896a:	e7c4      	b.n	80088f6 <_strtod_l+0x146>
 800896c:	2f08      	cmp	r7, #8
 800896e:	bfd8      	it	le
 8008970:	9909      	ldrle	r1, [sp, #36]	; 0x24
 8008972:	f100 0001 	add.w	r0, r0, #1
 8008976:	bfda      	itte	le
 8008978:	fb02 3301 	mlale	r3, r2, r1, r3
 800897c:	9309      	strle	r3, [sp, #36]	; 0x24
 800897e:	fb02 3909 	mlagt	r9, r2, r9, r3
 8008982:	3701      	adds	r7, #1
 8008984:	901d      	str	r0, [sp, #116]	; 0x74
 8008986:	e7bf      	b.n	8008908 <_strtod_l+0x158>
 8008988:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800898a:	195a      	adds	r2, r3, r5
 800898c:	921d      	str	r2, [sp, #116]	; 0x74
 800898e:	5d5b      	ldrb	r3, [r3, r5]
 8008990:	2f00      	cmp	r7, #0
 8008992:	d037      	beq.n	8008a04 <_strtod_l+0x254>
 8008994:	9007      	str	r0, [sp, #28]
 8008996:	463d      	mov	r5, r7
 8008998:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 800899c:	2a09      	cmp	r2, #9
 800899e:	d912      	bls.n	80089c6 <_strtod_l+0x216>
 80089a0:	2201      	movs	r2, #1
 80089a2:	e7c2      	b.n	800892a <_strtod_l+0x17a>
 80089a4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089a6:	1c5a      	adds	r2, r3, #1
 80089a8:	921d      	str	r2, [sp, #116]	; 0x74
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	3001      	adds	r0, #1
 80089ae:	2b30      	cmp	r3, #48	; 0x30
 80089b0:	d0f8      	beq.n	80089a4 <_strtod_l+0x1f4>
 80089b2:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 80089b6:	2a08      	cmp	r2, #8
 80089b8:	f200 84db 	bhi.w	8009372 <_strtod_l+0xbc2>
 80089bc:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80089be:	9007      	str	r0, [sp, #28]
 80089c0:	2000      	movs	r0, #0
 80089c2:	920a      	str	r2, [sp, #40]	; 0x28
 80089c4:	4605      	mov	r5, r0
 80089c6:	3b30      	subs	r3, #48	; 0x30
 80089c8:	f100 0201 	add.w	r2, r0, #1
 80089cc:	d014      	beq.n	80089f8 <_strtod_l+0x248>
 80089ce:	9907      	ldr	r1, [sp, #28]
 80089d0:	4411      	add	r1, r2
 80089d2:	9107      	str	r1, [sp, #28]
 80089d4:	462a      	mov	r2, r5
 80089d6:	eb00 0e05 	add.w	lr, r0, r5
 80089da:	210a      	movs	r1, #10
 80089dc:	4572      	cmp	r2, lr
 80089de:	d113      	bne.n	8008a08 <_strtod_l+0x258>
 80089e0:	182a      	adds	r2, r5, r0
 80089e2:	2a08      	cmp	r2, #8
 80089e4:	f105 0501 	add.w	r5, r5, #1
 80089e8:	4405      	add	r5, r0
 80089ea:	dc1c      	bgt.n	8008a26 <_strtod_l+0x276>
 80089ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 80089ee:	220a      	movs	r2, #10
 80089f0:	fb02 3301 	mla	r3, r2, r1, r3
 80089f4:	9309      	str	r3, [sp, #36]	; 0x24
 80089f6:	2200      	movs	r2, #0
 80089f8:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80089fa:	1c59      	adds	r1, r3, #1
 80089fc:	911d      	str	r1, [sp, #116]	; 0x74
 80089fe:	785b      	ldrb	r3, [r3, #1]
 8008a00:	4610      	mov	r0, r2
 8008a02:	e7c9      	b.n	8008998 <_strtod_l+0x1e8>
 8008a04:	4638      	mov	r0, r7
 8008a06:	e7d2      	b.n	80089ae <_strtod_l+0x1fe>
 8008a08:	2a08      	cmp	r2, #8
 8008a0a:	dc04      	bgt.n	8008a16 <_strtod_l+0x266>
 8008a0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8008a0e:	434e      	muls	r6, r1
 8008a10:	9609      	str	r6, [sp, #36]	; 0x24
 8008a12:	3201      	adds	r2, #1
 8008a14:	e7e2      	b.n	80089dc <_strtod_l+0x22c>
 8008a16:	f102 0c01 	add.w	ip, r2, #1
 8008a1a:	f1bc 0f10 	cmp.w	ip, #16
 8008a1e:	bfd8      	it	le
 8008a20:	fb01 f909 	mulle.w	r9, r1, r9
 8008a24:	e7f5      	b.n	8008a12 <_strtod_l+0x262>
 8008a26:	2d10      	cmp	r5, #16
 8008a28:	bfdc      	itt	le
 8008a2a:	220a      	movle	r2, #10
 8008a2c:	fb02 3909 	mlale	r9, r2, r9, r3
 8008a30:	e7e1      	b.n	80089f6 <_strtod_l+0x246>
 8008a32:	2300      	movs	r3, #0
 8008a34:	9307      	str	r3, [sp, #28]
 8008a36:	2201      	movs	r2, #1
 8008a38:	e77c      	b.n	8008934 <_strtod_l+0x184>
 8008a3a:	f04f 0c00 	mov.w	ip, #0
 8008a3e:	f108 0302 	add.w	r3, r8, #2
 8008a42:	931d      	str	r3, [sp, #116]	; 0x74
 8008a44:	f898 3002 	ldrb.w	r3, [r8, #2]
 8008a48:	e785      	b.n	8008956 <_strtod_l+0x1a6>
 8008a4a:	f04f 0c01 	mov.w	ip, #1
 8008a4e:	e7f6      	b.n	8008a3e <_strtod_l+0x28e>
 8008a50:	0800cd70 	.word	0x0800cd70
 8008a54:	0800cb3c 	.word	0x0800cb3c
 8008a58:	7ff00000 	.word	0x7ff00000
 8008a5c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a5e:	1c59      	adds	r1, r3, #1
 8008a60:	911d      	str	r1, [sp, #116]	; 0x74
 8008a62:	785b      	ldrb	r3, [r3, #1]
 8008a64:	2b30      	cmp	r3, #48	; 0x30
 8008a66:	d0f9      	beq.n	8008a5c <_strtod_l+0x2ac>
 8008a68:	f1a3 0131 	sub.w	r1, r3, #49	; 0x31
 8008a6c:	2908      	cmp	r1, #8
 8008a6e:	f63f af79 	bhi.w	8008964 <_strtod_l+0x1b4>
 8008a72:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 8008a76:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a78:	9308      	str	r3, [sp, #32]
 8008a7a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008a7c:	1c59      	adds	r1, r3, #1
 8008a7e:	911d      	str	r1, [sp, #116]	; 0x74
 8008a80:	785b      	ldrb	r3, [r3, #1]
 8008a82:	f1a3 0630 	sub.w	r6, r3, #48	; 0x30
 8008a86:	2e09      	cmp	r6, #9
 8008a88:	d937      	bls.n	8008afa <_strtod_l+0x34a>
 8008a8a:	9e08      	ldr	r6, [sp, #32]
 8008a8c:	1b89      	subs	r1, r1, r6
 8008a8e:	2908      	cmp	r1, #8
 8008a90:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008a94:	dc02      	bgt.n	8008a9c <_strtod_l+0x2ec>
 8008a96:	4576      	cmp	r6, lr
 8008a98:	bfa8      	it	ge
 8008a9a:	4676      	movge	r6, lr
 8008a9c:	f1bc 0f00 	cmp.w	ip, #0
 8008aa0:	d000      	beq.n	8008aa4 <_strtod_l+0x2f4>
 8008aa2:	4276      	negs	r6, r6
 8008aa4:	2d00      	cmp	r5, #0
 8008aa6:	d14f      	bne.n	8008b48 <_strtod_l+0x398>
 8008aa8:	9904      	ldr	r1, [sp, #16]
 8008aaa:	4301      	orrs	r1, r0
 8008aac:	f47f aec2 	bne.w	8008834 <_strtod_l+0x84>
 8008ab0:	2a00      	cmp	r2, #0
 8008ab2:	f47f aedb 	bne.w	800886c <_strtod_l+0xbc>
 8008ab6:	2b69      	cmp	r3, #105	; 0x69
 8008ab8:	d027      	beq.n	8008b0a <_strtod_l+0x35a>
 8008aba:	dc24      	bgt.n	8008b06 <_strtod_l+0x356>
 8008abc:	2b49      	cmp	r3, #73	; 0x49
 8008abe:	d024      	beq.n	8008b0a <_strtod_l+0x35a>
 8008ac0:	2b4e      	cmp	r3, #78	; 0x4e
 8008ac2:	f47f aed3 	bne.w	800886c <_strtod_l+0xbc>
 8008ac6:	499e      	ldr	r1, [pc, #632]	; (8008d40 <_strtod_l+0x590>)
 8008ac8:	a81d      	add	r0, sp, #116	; 0x74
 8008aca:	f001 fa5f 	bl	8009f8c <__match>
 8008ace:	2800      	cmp	r0, #0
 8008ad0:	f43f aecc 	beq.w	800886c <_strtod_l+0xbc>
 8008ad4:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008ad6:	781b      	ldrb	r3, [r3, #0]
 8008ad8:	2b28      	cmp	r3, #40	; 0x28
 8008ada:	d12d      	bne.n	8008b38 <_strtod_l+0x388>
 8008adc:	4999      	ldr	r1, [pc, #612]	; (8008d44 <_strtod_l+0x594>)
 8008ade:	aa20      	add	r2, sp, #128	; 0x80
 8008ae0:	a81d      	add	r0, sp, #116	; 0x74
 8008ae2:	f001 fa67 	bl	8009fb4 <__hexnan>
 8008ae6:	2805      	cmp	r0, #5
 8008ae8:	d126      	bne.n	8008b38 <_strtod_l+0x388>
 8008aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008aec:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 8008af0:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008af4:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008af8:	e69c      	b.n	8008834 <_strtod_l+0x84>
 8008afa:	210a      	movs	r1, #10
 8008afc:	fb01 3e0e 	mla	lr, r1, lr, r3
 8008b00:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008b04:	e7b9      	b.n	8008a7a <_strtod_l+0x2ca>
 8008b06:	2b6e      	cmp	r3, #110	; 0x6e
 8008b08:	e7db      	b.n	8008ac2 <_strtod_l+0x312>
 8008b0a:	498f      	ldr	r1, [pc, #572]	; (8008d48 <_strtod_l+0x598>)
 8008b0c:	a81d      	add	r0, sp, #116	; 0x74
 8008b0e:	f001 fa3d 	bl	8009f8c <__match>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	f43f aeaa 	beq.w	800886c <_strtod_l+0xbc>
 8008b18:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b1a:	498c      	ldr	r1, [pc, #560]	; (8008d4c <_strtod_l+0x59c>)
 8008b1c:	3b01      	subs	r3, #1
 8008b1e:	a81d      	add	r0, sp, #116	; 0x74
 8008b20:	931d      	str	r3, [sp, #116]	; 0x74
 8008b22:	f001 fa33 	bl	8009f8c <__match>
 8008b26:	b910      	cbnz	r0, 8008b2e <_strtod_l+0x37e>
 8008b28:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8008b2a:	3301      	adds	r3, #1
 8008b2c:	931d      	str	r3, [sp, #116]	; 0x74
 8008b2e:	f8df b22c 	ldr.w	fp, [pc, #556]	; 8008d5c <_strtod_l+0x5ac>
 8008b32:	f04f 0a00 	mov.w	sl, #0
 8008b36:	e67d      	b.n	8008834 <_strtod_l+0x84>
 8008b38:	4885      	ldr	r0, [pc, #532]	; (8008d50 <_strtod_l+0x5a0>)
 8008b3a:	f002 ff05 	bl	800b948 <nan>
 8008b3e:	ed8d 0b04 	vstr	d0, [sp, #16]
 8008b42:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8008b46:	e675      	b.n	8008834 <_strtod_l+0x84>
 8008b48:	9b07      	ldr	r3, [sp, #28]
 8008b4a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008b4c:	1af3      	subs	r3, r6, r3
 8008b4e:	2f00      	cmp	r7, #0
 8008b50:	bf08      	it	eq
 8008b52:	462f      	moveq	r7, r5
 8008b54:	2d10      	cmp	r5, #16
 8008b56:	9308      	str	r3, [sp, #32]
 8008b58:	46a8      	mov	r8, r5
 8008b5a:	bfa8      	it	ge
 8008b5c:	f04f 0810 	movge.w	r8, #16
 8008b60:	f7f7 fcd0 	bl	8000504 <__aeabi_ui2d>
 8008b64:	2d09      	cmp	r5, #9
 8008b66:	4682      	mov	sl, r0
 8008b68:	468b      	mov	fp, r1
 8008b6a:	dd13      	ble.n	8008b94 <_strtod_l+0x3e4>
 8008b6c:	4b79      	ldr	r3, [pc, #484]	; (8008d54 <_strtod_l+0x5a4>)
 8008b6e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008b72:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008b76:	f7f7 fd3f 	bl	80005f8 <__aeabi_dmul>
 8008b7a:	4682      	mov	sl, r0
 8008b7c:	4648      	mov	r0, r9
 8008b7e:	468b      	mov	fp, r1
 8008b80:	f7f7 fcc0 	bl	8000504 <__aeabi_ui2d>
 8008b84:	4602      	mov	r2, r0
 8008b86:	460b      	mov	r3, r1
 8008b88:	4650      	mov	r0, sl
 8008b8a:	4659      	mov	r1, fp
 8008b8c:	f7f7 fb7e 	bl	800028c <__adddf3>
 8008b90:	4682      	mov	sl, r0
 8008b92:	468b      	mov	fp, r1
 8008b94:	2d0f      	cmp	r5, #15
 8008b96:	dc38      	bgt.n	8008c0a <_strtod_l+0x45a>
 8008b98:	9b08      	ldr	r3, [sp, #32]
 8008b9a:	2b00      	cmp	r3, #0
 8008b9c:	f43f ae4a 	beq.w	8008834 <_strtod_l+0x84>
 8008ba0:	dd24      	ble.n	8008bec <_strtod_l+0x43c>
 8008ba2:	2b16      	cmp	r3, #22
 8008ba4:	dc0b      	bgt.n	8008bbe <_strtod_l+0x40e>
 8008ba6:	4d6b      	ldr	r5, [pc, #428]	; (8008d54 <_strtod_l+0x5a4>)
 8008ba8:	eb05 05c3 	add.w	r5, r5, r3, lsl #3
 8008bac:	e9d5 0100 	ldrd	r0, r1, [r5]
 8008bb0:	4652      	mov	r2, sl
 8008bb2:	465b      	mov	r3, fp
 8008bb4:	f7f7 fd20 	bl	80005f8 <__aeabi_dmul>
 8008bb8:	4682      	mov	sl, r0
 8008bba:	468b      	mov	fp, r1
 8008bbc:	e63a      	b.n	8008834 <_strtod_l+0x84>
 8008bbe:	9a08      	ldr	r2, [sp, #32]
 8008bc0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008bc4:	4293      	cmp	r3, r2
 8008bc6:	db20      	blt.n	8008c0a <_strtod_l+0x45a>
 8008bc8:	4c62      	ldr	r4, [pc, #392]	; (8008d54 <_strtod_l+0x5a4>)
 8008bca:	f1c5 050f 	rsb	r5, r5, #15
 8008bce:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008bd2:	4652      	mov	r2, sl
 8008bd4:	465b      	mov	r3, fp
 8008bd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008bda:	f7f7 fd0d 	bl	80005f8 <__aeabi_dmul>
 8008bde:	9b08      	ldr	r3, [sp, #32]
 8008be0:	1b5d      	subs	r5, r3, r5
 8008be2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008be6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008bea:	e7e3      	b.n	8008bb4 <_strtod_l+0x404>
 8008bec:	9b08      	ldr	r3, [sp, #32]
 8008bee:	3316      	adds	r3, #22
 8008bf0:	db0b      	blt.n	8008c0a <_strtod_l+0x45a>
 8008bf2:	9b07      	ldr	r3, [sp, #28]
 8008bf4:	4a57      	ldr	r2, [pc, #348]	; (8008d54 <_strtod_l+0x5a4>)
 8008bf6:	1b9e      	subs	r6, r3, r6
 8008bf8:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8008bfc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008c00:	4650      	mov	r0, sl
 8008c02:	4659      	mov	r1, fp
 8008c04:	f7f7 fe22 	bl	800084c <__aeabi_ddiv>
 8008c08:	e7d6      	b.n	8008bb8 <_strtod_l+0x408>
 8008c0a:	9b08      	ldr	r3, [sp, #32]
 8008c0c:	eba5 0808 	sub.w	r8, r5, r8
 8008c10:	4498      	add	r8, r3
 8008c12:	f1b8 0f00 	cmp.w	r8, #0
 8008c16:	dd71      	ble.n	8008cfc <_strtod_l+0x54c>
 8008c18:	f018 030f 	ands.w	r3, r8, #15
 8008c1c:	d00a      	beq.n	8008c34 <_strtod_l+0x484>
 8008c1e:	494d      	ldr	r1, [pc, #308]	; (8008d54 <_strtod_l+0x5a4>)
 8008c20:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008c24:	4652      	mov	r2, sl
 8008c26:	465b      	mov	r3, fp
 8008c28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c2c:	f7f7 fce4 	bl	80005f8 <__aeabi_dmul>
 8008c30:	4682      	mov	sl, r0
 8008c32:	468b      	mov	fp, r1
 8008c34:	f038 080f 	bics.w	r8, r8, #15
 8008c38:	d04d      	beq.n	8008cd6 <_strtod_l+0x526>
 8008c3a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008c3e:	dd22      	ble.n	8008c86 <_strtod_l+0x4d6>
 8008c40:	2500      	movs	r5, #0
 8008c42:	462e      	mov	r6, r5
 8008c44:	9509      	str	r5, [sp, #36]	; 0x24
 8008c46:	9507      	str	r5, [sp, #28]
 8008c48:	2322      	movs	r3, #34	; 0x22
 8008c4a:	f8df b110 	ldr.w	fp, [pc, #272]	; 8008d5c <_strtod_l+0x5ac>
 8008c4e:	6023      	str	r3, [r4, #0]
 8008c50:	f04f 0a00 	mov.w	sl, #0
 8008c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	f43f adec 	beq.w	8008834 <_strtod_l+0x84>
 8008c5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008c5e:	4620      	mov	r0, r4
 8008c60:	f001 fb1e 	bl	800a2a0 <_Bfree>
 8008c64:	9907      	ldr	r1, [sp, #28]
 8008c66:	4620      	mov	r0, r4
 8008c68:	f001 fb1a 	bl	800a2a0 <_Bfree>
 8008c6c:	4631      	mov	r1, r6
 8008c6e:	4620      	mov	r0, r4
 8008c70:	f001 fb16 	bl	800a2a0 <_Bfree>
 8008c74:	9909      	ldr	r1, [sp, #36]	; 0x24
 8008c76:	4620      	mov	r0, r4
 8008c78:	f001 fb12 	bl	800a2a0 <_Bfree>
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4620      	mov	r0, r4
 8008c80:	f001 fb0e 	bl	800a2a0 <_Bfree>
 8008c84:	e5d6      	b.n	8008834 <_strtod_l+0x84>
 8008c86:	2300      	movs	r3, #0
 8008c88:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c8c:	4650      	mov	r0, sl
 8008c8e:	4659      	mov	r1, fp
 8008c90:	4699      	mov	r9, r3
 8008c92:	f1b8 0f01 	cmp.w	r8, #1
 8008c96:	dc21      	bgt.n	8008cdc <_strtod_l+0x52c>
 8008c98:	b10b      	cbz	r3, 8008c9e <_strtod_l+0x4ee>
 8008c9a:	4682      	mov	sl, r0
 8008c9c:	468b      	mov	fp, r1
 8008c9e:	4b2e      	ldr	r3, [pc, #184]	; (8008d58 <_strtod_l+0x5a8>)
 8008ca0:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008ca4:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008ca8:	4652      	mov	r2, sl
 8008caa:	465b      	mov	r3, fp
 8008cac:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008cb0:	f7f7 fca2 	bl	80005f8 <__aeabi_dmul>
 8008cb4:	4b29      	ldr	r3, [pc, #164]	; (8008d5c <_strtod_l+0x5ac>)
 8008cb6:	460a      	mov	r2, r1
 8008cb8:	400b      	ands	r3, r1
 8008cba:	4929      	ldr	r1, [pc, #164]	; (8008d60 <_strtod_l+0x5b0>)
 8008cbc:	428b      	cmp	r3, r1
 8008cbe:	4682      	mov	sl, r0
 8008cc0:	d8be      	bhi.n	8008c40 <_strtod_l+0x490>
 8008cc2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008cc6:	428b      	cmp	r3, r1
 8008cc8:	bf86      	itte	hi
 8008cca:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 8008d64 <_strtod_l+0x5b4>
 8008cce:	f04f 3aff 	movhi.w	sl, #4294967295
 8008cd2:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008cd6:	2300      	movs	r3, #0
 8008cd8:	9304      	str	r3, [sp, #16]
 8008cda:	e081      	b.n	8008de0 <_strtod_l+0x630>
 8008cdc:	f018 0f01 	tst.w	r8, #1
 8008ce0:	d007      	beq.n	8008cf2 <_strtod_l+0x542>
 8008ce2:	4b1d      	ldr	r3, [pc, #116]	; (8008d58 <_strtod_l+0x5a8>)
 8008ce4:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8008ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008cec:	f7f7 fc84 	bl	80005f8 <__aeabi_dmul>
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	f109 0901 	add.w	r9, r9, #1
 8008cf6:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008cfa:	e7ca      	b.n	8008c92 <_strtod_l+0x4e2>
 8008cfc:	d0eb      	beq.n	8008cd6 <_strtod_l+0x526>
 8008cfe:	f1c8 0800 	rsb	r8, r8, #0
 8008d02:	f018 020f 	ands.w	r2, r8, #15
 8008d06:	d00a      	beq.n	8008d1e <_strtod_l+0x56e>
 8008d08:	4b12      	ldr	r3, [pc, #72]	; (8008d54 <_strtod_l+0x5a4>)
 8008d0a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008d0e:	4650      	mov	r0, sl
 8008d10:	4659      	mov	r1, fp
 8008d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d16:	f7f7 fd99 	bl	800084c <__aeabi_ddiv>
 8008d1a:	4682      	mov	sl, r0
 8008d1c:	468b      	mov	fp, r1
 8008d1e:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008d22:	d0d8      	beq.n	8008cd6 <_strtod_l+0x526>
 8008d24:	f1b8 0f1f 	cmp.w	r8, #31
 8008d28:	dd1e      	ble.n	8008d68 <_strtod_l+0x5b8>
 8008d2a:	2500      	movs	r5, #0
 8008d2c:	462e      	mov	r6, r5
 8008d2e:	9509      	str	r5, [sp, #36]	; 0x24
 8008d30:	9507      	str	r5, [sp, #28]
 8008d32:	2322      	movs	r3, #34	; 0x22
 8008d34:	f04f 0a00 	mov.w	sl, #0
 8008d38:	f04f 0b00 	mov.w	fp, #0
 8008d3c:	6023      	str	r3, [r4, #0]
 8008d3e:	e789      	b.n	8008c54 <_strtod_l+0x4a4>
 8008d40:	0800cb36 	.word	0x0800cb36
 8008d44:	0800cb50 	.word	0x0800cb50
 8008d48:	0800cb2d 	.word	0x0800cb2d
 8008d4c:	0800cb30 	.word	0x0800cb30
 8008d50:	0800cf85 	.word	0x0800cf85
 8008d54:	0800ce28 	.word	0x0800ce28
 8008d58:	0800ce00 	.word	0x0800ce00
 8008d5c:	7ff00000 	.word	0x7ff00000
 8008d60:	7ca00000 	.word	0x7ca00000
 8008d64:	7fefffff 	.word	0x7fefffff
 8008d68:	f018 0310 	ands.w	r3, r8, #16
 8008d6c:	bf18      	it	ne
 8008d6e:	236a      	movne	r3, #106	; 0x6a
 8008d70:	f8df 93b4 	ldr.w	r9, [pc, #948]	; 8009128 <_strtod_l+0x978>
 8008d74:	9304      	str	r3, [sp, #16]
 8008d76:	4650      	mov	r0, sl
 8008d78:	4659      	mov	r1, fp
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f018 0f01 	tst.w	r8, #1
 8008d80:	d004      	beq.n	8008d8c <_strtod_l+0x5dc>
 8008d82:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008d86:	f7f7 fc37 	bl	80005f8 <__aeabi_dmul>
 8008d8a:	2301      	movs	r3, #1
 8008d8c:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008d90:	f109 0908 	add.w	r9, r9, #8
 8008d94:	d1f2      	bne.n	8008d7c <_strtod_l+0x5cc>
 8008d96:	b10b      	cbz	r3, 8008d9c <_strtod_l+0x5ec>
 8008d98:	4682      	mov	sl, r0
 8008d9a:	468b      	mov	fp, r1
 8008d9c:	9b04      	ldr	r3, [sp, #16]
 8008d9e:	b1bb      	cbz	r3, 8008dd0 <_strtod_l+0x620>
 8008da0:	f3cb 530a 	ubfx	r3, fp, #20, #11
 8008da4:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	4659      	mov	r1, fp
 8008dac:	dd10      	ble.n	8008dd0 <_strtod_l+0x620>
 8008dae:	2b1f      	cmp	r3, #31
 8008db0:	f340 8128 	ble.w	8009004 <_strtod_l+0x854>
 8008db4:	2b34      	cmp	r3, #52	; 0x34
 8008db6:	bfde      	ittt	le
 8008db8:	3b20      	suble	r3, #32
 8008dba:	f04f 32ff 	movle.w	r2, #4294967295
 8008dbe:	fa02 f303 	lslle.w	r3, r2, r3
 8008dc2:	f04f 0a00 	mov.w	sl, #0
 8008dc6:	bfcc      	ite	gt
 8008dc8:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008dcc:	ea03 0b01 	andle.w	fp, r3, r1
 8008dd0:	2200      	movs	r2, #0
 8008dd2:	2300      	movs	r3, #0
 8008dd4:	4650      	mov	r0, sl
 8008dd6:	4659      	mov	r1, fp
 8008dd8:	f7f7 fe76 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d1a4      	bne.n	8008d2a <_strtod_l+0x57a>
 8008de0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008de2:	9300      	str	r3, [sp, #0]
 8008de4:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008de6:	462b      	mov	r3, r5
 8008de8:	463a      	mov	r2, r7
 8008dea:	4620      	mov	r0, r4
 8008dec:	f001 fac4 	bl	800a378 <__s2b>
 8008df0:	9009      	str	r0, [sp, #36]	; 0x24
 8008df2:	2800      	cmp	r0, #0
 8008df4:	f43f af24 	beq.w	8008c40 <_strtod_l+0x490>
 8008df8:	9b07      	ldr	r3, [sp, #28]
 8008dfa:	1b9e      	subs	r6, r3, r6
 8008dfc:	9b08      	ldr	r3, [sp, #32]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfb4      	ite	lt
 8008e02:	4633      	movlt	r3, r6
 8008e04:	2300      	movge	r3, #0
 8008e06:	9310      	str	r3, [sp, #64]	; 0x40
 8008e08:	9b08      	ldr	r3, [sp, #32]
 8008e0a:	2500      	movs	r5, #0
 8008e0c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008e10:	9318      	str	r3, [sp, #96]	; 0x60
 8008e12:	462e      	mov	r6, r5
 8008e14:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e16:	4620      	mov	r0, r4
 8008e18:	6859      	ldr	r1, [r3, #4]
 8008e1a:	f001 fa01 	bl	800a220 <_Balloc>
 8008e1e:	9007      	str	r0, [sp, #28]
 8008e20:	2800      	cmp	r0, #0
 8008e22:	f43f af11 	beq.w	8008c48 <_strtod_l+0x498>
 8008e26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e28:	691a      	ldr	r2, [r3, #16]
 8008e2a:	3202      	adds	r2, #2
 8008e2c:	f103 010c 	add.w	r1, r3, #12
 8008e30:	0092      	lsls	r2, r2, #2
 8008e32:	300c      	adds	r0, #12
 8008e34:	f001 f9e6 	bl	800a204 <memcpy>
 8008e38:	ec4b ab10 	vmov	d0, sl, fp
 8008e3c:	aa20      	add	r2, sp, #128	; 0x80
 8008e3e:	a91f      	add	r1, sp, #124	; 0x7c
 8008e40:	4620      	mov	r0, r4
 8008e42:	e9cd ab0a 	strd	sl, fp, [sp, #40]	; 0x28
 8008e46:	f001 fdd3 	bl	800a9f0 <__d2b>
 8008e4a:	901e      	str	r0, [sp, #120]	; 0x78
 8008e4c:	2800      	cmp	r0, #0
 8008e4e:	f43f aefb 	beq.w	8008c48 <_strtod_l+0x498>
 8008e52:	2101      	movs	r1, #1
 8008e54:	4620      	mov	r0, r4
 8008e56:	f001 fb29 	bl	800a4ac <__i2b>
 8008e5a:	4606      	mov	r6, r0
 8008e5c:	2800      	cmp	r0, #0
 8008e5e:	f43f aef3 	beq.w	8008c48 <_strtod_l+0x498>
 8008e62:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8008e64:	9904      	ldr	r1, [sp, #16]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfab      	itete	ge
 8008e6a:	9a10      	ldrge	r2, [sp, #64]	; 0x40
 8008e6c:	9a18      	ldrlt	r2, [sp, #96]	; 0x60
 8008e6e:	9f18      	ldrge	r7, [sp, #96]	; 0x60
 8008e70:	f8dd 9040 	ldrlt.w	r9, [sp, #64]	; 0x40
 8008e74:	bfac      	ite	ge
 8008e76:	eb03 0902 	addge.w	r9, r3, r2
 8008e7a:	1ad7      	sublt	r7, r2, r3
 8008e7c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8008e7e:	eba3 0801 	sub.w	r8, r3, r1
 8008e82:	4490      	add	r8, r2
 8008e84:	4ba3      	ldr	r3, [pc, #652]	; (8009114 <_strtod_l+0x964>)
 8008e86:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e8a:	4598      	cmp	r8, r3
 8008e8c:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e90:	f280 80cc 	bge.w	800902c <_strtod_l+0x87c>
 8008e94:	eba3 0308 	sub.w	r3, r3, r8
 8008e98:	2b1f      	cmp	r3, #31
 8008e9a:	eba2 0203 	sub.w	r2, r2, r3
 8008e9e:	f04f 0101 	mov.w	r1, #1
 8008ea2:	f300 80b6 	bgt.w	8009012 <_strtod_l+0x862>
 8008ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8008eaa:	9311      	str	r3, [sp, #68]	; 0x44
 8008eac:	2300      	movs	r3, #0
 8008eae:	930c      	str	r3, [sp, #48]	; 0x30
 8008eb0:	eb09 0802 	add.w	r8, r9, r2
 8008eb4:	9b04      	ldr	r3, [sp, #16]
 8008eb6:	45c1      	cmp	r9, r8
 8008eb8:	4417      	add	r7, r2
 8008eba:	441f      	add	r7, r3
 8008ebc:	464b      	mov	r3, r9
 8008ebe:	bfa8      	it	ge
 8008ec0:	4643      	movge	r3, r8
 8008ec2:	42bb      	cmp	r3, r7
 8008ec4:	bfa8      	it	ge
 8008ec6:	463b      	movge	r3, r7
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	bfc2      	ittt	gt
 8008ecc:	eba8 0803 	subgt.w	r8, r8, r3
 8008ed0:	1aff      	subgt	r7, r7, r3
 8008ed2:	eba9 0903 	subgt.w	r9, r9, r3
 8008ed6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	dd17      	ble.n	8008f0c <_strtod_l+0x75c>
 8008edc:	4631      	mov	r1, r6
 8008ede:	461a      	mov	r2, r3
 8008ee0:	4620      	mov	r0, r4
 8008ee2:	f001 fb9f 	bl	800a624 <__pow5mult>
 8008ee6:	4606      	mov	r6, r0
 8008ee8:	2800      	cmp	r0, #0
 8008eea:	f43f aead 	beq.w	8008c48 <_strtod_l+0x498>
 8008eee:	4601      	mov	r1, r0
 8008ef0:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8008ef2:	4620      	mov	r0, r4
 8008ef4:	f001 faf0 	bl	800a4d8 <__multiply>
 8008ef8:	900f      	str	r0, [sp, #60]	; 0x3c
 8008efa:	2800      	cmp	r0, #0
 8008efc:	f43f aea4 	beq.w	8008c48 <_strtod_l+0x498>
 8008f00:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f02:	4620      	mov	r0, r4
 8008f04:	f001 f9cc 	bl	800a2a0 <_Bfree>
 8008f08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f0a:	931e      	str	r3, [sp, #120]	; 0x78
 8008f0c:	f1b8 0f00 	cmp.w	r8, #0
 8008f10:	f300 8091 	bgt.w	8009036 <_strtod_l+0x886>
 8008f14:	9b08      	ldr	r3, [sp, #32]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	dd08      	ble.n	8008f2c <_strtod_l+0x77c>
 8008f1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008f1c:	9907      	ldr	r1, [sp, #28]
 8008f1e:	4620      	mov	r0, r4
 8008f20:	f001 fb80 	bl	800a624 <__pow5mult>
 8008f24:	9007      	str	r0, [sp, #28]
 8008f26:	2800      	cmp	r0, #0
 8008f28:	f43f ae8e 	beq.w	8008c48 <_strtod_l+0x498>
 8008f2c:	2f00      	cmp	r7, #0
 8008f2e:	dd08      	ble.n	8008f42 <_strtod_l+0x792>
 8008f30:	9907      	ldr	r1, [sp, #28]
 8008f32:	463a      	mov	r2, r7
 8008f34:	4620      	mov	r0, r4
 8008f36:	f001 fbcf 	bl	800a6d8 <__lshift>
 8008f3a:	9007      	str	r0, [sp, #28]
 8008f3c:	2800      	cmp	r0, #0
 8008f3e:	f43f ae83 	beq.w	8008c48 <_strtod_l+0x498>
 8008f42:	f1b9 0f00 	cmp.w	r9, #0
 8008f46:	dd08      	ble.n	8008f5a <_strtod_l+0x7aa>
 8008f48:	4631      	mov	r1, r6
 8008f4a:	464a      	mov	r2, r9
 8008f4c:	4620      	mov	r0, r4
 8008f4e:	f001 fbc3 	bl	800a6d8 <__lshift>
 8008f52:	4606      	mov	r6, r0
 8008f54:	2800      	cmp	r0, #0
 8008f56:	f43f ae77 	beq.w	8008c48 <_strtod_l+0x498>
 8008f5a:	9a07      	ldr	r2, [sp, #28]
 8008f5c:	991e      	ldr	r1, [sp, #120]	; 0x78
 8008f5e:	4620      	mov	r0, r4
 8008f60:	f001 fc42 	bl	800a7e8 <__mdiff>
 8008f64:	4605      	mov	r5, r0
 8008f66:	2800      	cmp	r0, #0
 8008f68:	f43f ae6e 	beq.w	8008c48 <_strtod_l+0x498>
 8008f6c:	68c3      	ldr	r3, [r0, #12]
 8008f6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008f70:	2300      	movs	r3, #0
 8008f72:	60c3      	str	r3, [r0, #12]
 8008f74:	4631      	mov	r1, r6
 8008f76:	f001 fc1b 	bl	800a7b0 <__mcmp>
 8008f7a:	2800      	cmp	r0, #0
 8008f7c:	da65      	bge.n	800904a <_strtod_l+0x89a>
 8008f7e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008f80:	ea53 030a 	orrs.w	r3, r3, sl
 8008f84:	f040 8087 	bne.w	8009096 <_strtod_l+0x8e6>
 8008f88:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f8c:	2b00      	cmp	r3, #0
 8008f8e:	f040 8082 	bne.w	8009096 <_strtod_l+0x8e6>
 8008f92:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f96:	0d1b      	lsrs	r3, r3, #20
 8008f98:	051b      	lsls	r3, r3, #20
 8008f9a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f9e:	d97a      	bls.n	8009096 <_strtod_l+0x8e6>
 8008fa0:	696b      	ldr	r3, [r5, #20]
 8008fa2:	b913      	cbnz	r3, 8008faa <_strtod_l+0x7fa>
 8008fa4:	692b      	ldr	r3, [r5, #16]
 8008fa6:	2b01      	cmp	r3, #1
 8008fa8:	dd75      	ble.n	8009096 <_strtod_l+0x8e6>
 8008faa:	4629      	mov	r1, r5
 8008fac:	2201      	movs	r2, #1
 8008fae:	4620      	mov	r0, r4
 8008fb0:	f001 fb92 	bl	800a6d8 <__lshift>
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4605      	mov	r5, r0
 8008fb8:	f001 fbfa 	bl	800a7b0 <__mcmp>
 8008fbc:	2800      	cmp	r0, #0
 8008fbe:	dd6a      	ble.n	8009096 <_strtod_l+0x8e6>
 8008fc0:	9904      	ldr	r1, [sp, #16]
 8008fc2:	4a55      	ldr	r2, [pc, #340]	; (8009118 <_strtod_l+0x968>)
 8008fc4:	465b      	mov	r3, fp
 8008fc6:	2900      	cmp	r1, #0
 8008fc8:	f000 8085 	beq.w	80090d6 <_strtod_l+0x926>
 8008fcc:	ea02 010b 	and.w	r1, r2, fp
 8008fd0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008fd4:	dc7f      	bgt.n	80090d6 <_strtod_l+0x926>
 8008fd6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008fda:	f77f aeaa 	ble.w	8008d32 <_strtod_l+0x582>
 8008fde:	4a4f      	ldr	r2, [pc, #316]	; (800911c <_strtod_l+0x96c>)
 8008fe0:	2300      	movs	r3, #0
 8008fe2:	e9cd 3216 	strd	r3, r2, [sp, #88]	; 0x58
 8008fe6:	4650      	mov	r0, sl
 8008fe8:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
 8008fec:	4659      	mov	r1, fp
 8008fee:	f7f7 fb03 	bl	80005f8 <__aeabi_dmul>
 8008ff2:	460b      	mov	r3, r1
 8008ff4:	4303      	orrs	r3, r0
 8008ff6:	bf08      	it	eq
 8008ff8:	2322      	moveq	r3, #34	; 0x22
 8008ffa:	4682      	mov	sl, r0
 8008ffc:	468b      	mov	fp, r1
 8008ffe:	bf08      	it	eq
 8009000:	6023      	streq	r3, [r4, #0]
 8009002:	e62b      	b.n	8008c5c <_strtod_l+0x4ac>
 8009004:	f04f 32ff 	mov.w	r2, #4294967295
 8009008:	fa02 f303 	lsl.w	r3, r2, r3
 800900c:	ea03 0a0a 	and.w	sl, r3, sl
 8009010:	e6de      	b.n	8008dd0 <_strtod_l+0x620>
 8009012:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8009016:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800901a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800901e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8009022:	fa01 f308 	lsl.w	r3, r1, r8
 8009026:	930c      	str	r3, [sp, #48]	; 0x30
 8009028:	9111      	str	r1, [sp, #68]	; 0x44
 800902a:	e741      	b.n	8008eb0 <_strtod_l+0x700>
 800902c:	2300      	movs	r3, #0
 800902e:	930c      	str	r3, [sp, #48]	; 0x30
 8009030:	2301      	movs	r3, #1
 8009032:	9311      	str	r3, [sp, #68]	; 0x44
 8009034:	e73c      	b.n	8008eb0 <_strtod_l+0x700>
 8009036:	991e      	ldr	r1, [sp, #120]	; 0x78
 8009038:	4642      	mov	r2, r8
 800903a:	4620      	mov	r0, r4
 800903c:	f001 fb4c 	bl	800a6d8 <__lshift>
 8009040:	901e      	str	r0, [sp, #120]	; 0x78
 8009042:	2800      	cmp	r0, #0
 8009044:	f47f af66 	bne.w	8008f14 <_strtod_l+0x764>
 8009048:	e5fe      	b.n	8008c48 <_strtod_l+0x498>
 800904a:	465f      	mov	r7, fp
 800904c:	d16e      	bne.n	800912c <_strtod_l+0x97c>
 800904e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8009050:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009054:	b342      	cbz	r2, 80090a8 <_strtod_l+0x8f8>
 8009056:	4a32      	ldr	r2, [pc, #200]	; (8009120 <_strtod_l+0x970>)
 8009058:	4293      	cmp	r3, r2
 800905a:	d128      	bne.n	80090ae <_strtod_l+0x8fe>
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	4650      	mov	r0, sl
 8009060:	b1eb      	cbz	r3, 800909e <_strtod_l+0x8ee>
 8009062:	4a2d      	ldr	r2, [pc, #180]	; (8009118 <_strtod_l+0x968>)
 8009064:	403a      	ands	r2, r7
 8009066:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800906a:	f04f 31ff 	mov.w	r1, #4294967295
 800906e:	d819      	bhi.n	80090a4 <_strtod_l+0x8f4>
 8009070:	0d12      	lsrs	r2, r2, #20
 8009072:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8009076:	fa01 f303 	lsl.w	r3, r1, r3
 800907a:	4298      	cmp	r0, r3
 800907c:	d117      	bne.n	80090ae <_strtod_l+0x8fe>
 800907e:	4b29      	ldr	r3, [pc, #164]	; (8009124 <_strtod_l+0x974>)
 8009080:	429f      	cmp	r7, r3
 8009082:	d102      	bne.n	800908a <_strtod_l+0x8da>
 8009084:	3001      	adds	r0, #1
 8009086:	f43f addf 	beq.w	8008c48 <_strtod_l+0x498>
 800908a:	4b23      	ldr	r3, [pc, #140]	; (8009118 <_strtod_l+0x968>)
 800908c:	403b      	ands	r3, r7
 800908e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009092:	f04f 0a00 	mov.w	sl, #0
 8009096:	9b04      	ldr	r3, [sp, #16]
 8009098:	2b00      	cmp	r3, #0
 800909a:	d1a0      	bne.n	8008fde <_strtod_l+0x82e>
 800909c:	e5de      	b.n	8008c5c <_strtod_l+0x4ac>
 800909e:	f04f 33ff 	mov.w	r3, #4294967295
 80090a2:	e7ea      	b.n	800907a <_strtod_l+0x8ca>
 80090a4:	460b      	mov	r3, r1
 80090a6:	e7e8      	b.n	800907a <_strtod_l+0x8ca>
 80090a8:	ea53 030a 	orrs.w	r3, r3, sl
 80090ac:	d088      	beq.n	8008fc0 <_strtod_l+0x810>
 80090ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80090b0:	b1db      	cbz	r3, 80090ea <_strtod_l+0x93a>
 80090b2:	423b      	tst	r3, r7
 80090b4:	d0ef      	beq.n	8009096 <_strtod_l+0x8e6>
 80090b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80090b8:	9a04      	ldr	r2, [sp, #16]
 80090ba:	4650      	mov	r0, sl
 80090bc:	4659      	mov	r1, fp
 80090be:	b1c3      	cbz	r3, 80090f2 <_strtod_l+0x942>
 80090c0:	f7ff fb59 	bl	8008776 <sulp>
 80090c4:	4602      	mov	r2, r0
 80090c6:	460b      	mov	r3, r1
 80090c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090cc:	f7f7 f8de 	bl	800028c <__adddf3>
 80090d0:	4682      	mov	sl, r0
 80090d2:	468b      	mov	fp, r1
 80090d4:	e7df      	b.n	8009096 <_strtod_l+0x8e6>
 80090d6:	4013      	ands	r3, r2
 80090d8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 80090dc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80090e0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80090e4:	f04f 3aff 	mov.w	sl, #4294967295
 80090e8:	e7d5      	b.n	8009096 <_strtod_l+0x8e6>
 80090ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80090ec:	ea13 0f0a 	tst.w	r3, sl
 80090f0:	e7e0      	b.n	80090b4 <_strtod_l+0x904>
 80090f2:	f7ff fb40 	bl	8008776 <sulp>
 80090f6:	4602      	mov	r2, r0
 80090f8:	460b      	mov	r3, r1
 80090fa:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80090fe:	f7f7 f8c3 	bl	8000288 <__aeabi_dsub>
 8009102:	2200      	movs	r2, #0
 8009104:	2300      	movs	r3, #0
 8009106:	4682      	mov	sl, r0
 8009108:	468b      	mov	fp, r1
 800910a:	f7f7 fcdd 	bl	8000ac8 <__aeabi_dcmpeq>
 800910e:	2800      	cmp	r0, #0
 8009110:	d0c1      	beq.n	8009096 <_strtod_l+0x8e6>
 8009112:	e60e      	b.n	8008d32 <_strtod_l+0x582>
 8009114:	fffffc02 	.word	0xfffffc02
 8009118:	7ff00000 	.word	0x7ff00000
 800911c:	39500000 	.word	0x39500000
 8009120:	000fffff 	.word	0x000fffff
 8009124:	7fefffff 	.word	0x7fefffff
 8009128:	0800cb68 	.word	0x0800cb68
 800912c:	4631      	mov	r1, r6
 800912e:	4628      	mov	r0, r5
 8009130:	f001 fcba 	bl	800aaa8 <__ratio>
 8009134:	ec59 8b10 	vmov	r8, r9, d0
 8009138:	ee10 0a10 	vmov	r0, s0
 800913c:	2200      	movs	r2, #0
 800913e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009142:	4649      	mov	r1, r9
 8009144:	f7f7 fcd4 	bl	8000af0 <__aeabi_dcmple>
 8009148:	2800      	cmp	r0, #0
 800914a:	d07c      	beq.n	8009246 <_strtod_l+0xa96>
 800914c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800914e:	2b00      	cmp	r3, #0
 8009150:	d04c      	beq.n	80091ec <_strtod_l+0xa3c>
 8009152:	4b95      	ldr	r3, [pc, #596]	; (80093a8 <_strtod_l+0xbf8>)
 8009154:	2200      	movs	r2, #0
 8009156:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800915a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 80093a8 <_strtod_l+0xbf8>
 800915e:	f04f 0800 	mov.w	r8, #0
 8009162:	4b92      	ldr	r3, [pc, #584]	; (80093ac <_strtod_l+0xbfc>)
 8009164:	403b      	ands	r3, r7
 8009166:	9311      	str	r3, [sp, #68]	; 0x44
 8009168:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800916a:	4b91      	ldr	r3, [pc, #580]	; (80093b0 <_strtod_l+0xc00>)
 800916c:	429a      	cmp	r2, r3
 800916e:	f040 80b2 	bne.w	80092d6 <_strtod_l+0xb26>
 8009172:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009176:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800917a:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800917e:	ec4b ab10 	vmov	d0, sl, fp
 8009182:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
 8009186:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800918a:	f001 fbb5 	bl	800a8f8 <__ulp>
 800918e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8009192:	ec53 2b10 	vmov	r2, r3, d0
 8009196:	f7f7 fa2f 	bl	80005f8 <__aeabi_dmul>
 800919a:	4652      	mov	r2, sl
 800919c:	465b      	mov	r3, fp
 800919e:	f7f7 f875 	bl	800028c <__adddf3>
 80091a2:	460b      	mov	r3, r1
 80091a4:	4981      	ldr	r1, [pc, #516]	; (80093ac <_strtod_l+0xbfc>)
 80091a6:	4a83      	ldr	r2, [pc, #524]	; (80093b4 <_strtod_l+0xc04>)
 80091a8:	4019      	ands	r1, r3
 80091aa:	4291      	cmp	r1, r2
 80091ac:	4682      	mov	sl, r0
 80091ae:	d95e      	bls.n	800926e <_strtod_l+0xabe>
 80091b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091b2:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d103      	bne.n	80091c2 <_strtod_l+0xa12>
 80091ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80091bc:	3301      	adds	r3, #1
 80091be:	f43f ad43 	beq.w	8008c48 <_strtod_l+0x498>
 80091c2:	f8df b1fc 	ldr.w	fp, [pc, #508]	; 80093c0 <_strtod_l+0xc10>
 80091c6:	f04f 3aff 	mov.w	sl, #4294967295
 80091ca:	991e      	ldr	r1, [sp, #120]	; 0x78
 80091cc:	4620      	mov	r0, r4
 80091ce:	f001 f867 	bl	800a2a0 <_Bfree>
 80091d2:	9907      	ldr	r1, [sp, #28]
 80091d4:	4620      	mov	r0, r4
 80091d6:	f001 f863 	bl	800a2a0 <_Bfree>
 80091da:	4631      	mov	r1, r6
 80091dc:	4620      	mov	r0, r4
 80091de:	f001 f85f 	bl	800a2a0 <_Bfree>
 80091e2:	4629      	mov	r1, r5
 80091e4:	4620      	mov	r0, r4
 80091e6:	f001 f85b 	bl	800a2a0 <_Bfree>
 80091ea:	e613      	b.n	8008e14 <_strtod_l+0x664>
 80091ec:	f1ba 0f00 	cmp.w	sl, #0
 80091f0:	d11b      	bne.n	800922a <_strtod_l+0xa7a>
 80091f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80091f6:	b9f3      	cbnz	r3, 8009236 <_strtod_l+0xa86>
 80091f8:	4b6b      	ldr	r3, [pc, #428]	; (80093a8 <_strtod_l+0xbf8>)
 80091fa:	2200      	movs	r2, #0
 80091fc:	4640      	mov	r0, r8
 80091fe:	4649      	mov	r1, r9
 8009200:	f7f7 fc6c 	bl	8000adc <__aeabi_dcmplt>
 8009204:	b9d0      	cbnz	r0, 800923c <_strtod_l+0xa8c>
 8009206:	4640      	mov	r0, r8
 8009208:	4649      	mov	r1, r9
 800920a:	4b6b      	ldr	r3, [pc, #428]	; (80093b8 <_strtod_l+0xc08>)
 800920c:	2200      	movs	r2, #0
 800920e:	f7f7 f9f3 	bl	80005f8 <__aeabi_dmul>
 8009212:	4680      	mov	r8, r0
 8009214:	4689      	mov	r9, r1
 8009216:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800921a:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 800921e:	931b      	str	r3, [sp, #108]	; 0x6c
 8009220:	e9dd 231a 	ldrd	r2, r3, [sp, #104]	; 0x68
 8009224:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 8009228:	e79b      	b.n	8009162 <_strtod_l+0x9b2>
 800922a:	f1ba 0f01 	cmp.w	sl, #1
 800922e:	d102      	bne.n	8009236 <_strtod_l+0xa86>
 8009230:	2f00      	cmp	r7, #0
 8009232:	f43f ad7e 	beq.w	8008d32 <_strtod_l+0x582>
 8009236:	4b61      	ldr	r3, [pc, #388]	; (80093bc <_strtod_l+0xc0c>)
 8009238:	2200      	movs	r2, #0
 800923a:	e78c      	b.n	8009156 <_strtod_l+0x9a6>
 800923c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80093b8 <_strtod_l+0xc08>
 8009240:	f04f 0800 	mov.w	r8, #0
 8009244:	e7e7      	b.n	8009216 <_strtod_l+0xa66>
 8009246:	4b5c      	ldr	r3, [pc, #368]	; (80093b8 <_strtod_l+0xc08>)
 8009248:	4640      	mov	r0, r8
 800924a:	4649      	mov	r1, r9
 800924c:	2200      	movs	r2, #0
 800924e:	f7f7 f9d3 	bl	80005f8 <__aeabi_dmul>
 8009252:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009254:	4680      	mov	r8, r0
 8009256:	4689      	mov	r9, r1
 8009258:	b933      	cbnz	r3, 8009268 <_strtod_l+0xab8>
 800925a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800925e:	9012      	str	r0, [sp, #72]	; 0x48
 8009260:	9313      	str	r3, [sp, #76]	; 0x4c
 8009262:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 8009266:	e7dd      	b.n	8009224 <_strtod_l+0xa74>
 8009268:	e9cd 8912 	strd	r8, r9, [sp, #72]	; 0x48
 800926c:	e7f9      	b.n	8009262 <_strtod_l+0xab2>
 800926e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8009272:	9b04      	ldr	r3, [sp, #16]
 8009274:	2b00      	cmp	r3, #0
 8009276:	d1a8      	bne.n	80091ca <_strtod_l+0xa1a>
 8009278:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800927c:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800927e:	0d1b      	lsrs	r3, r3, #20
 8009280:	051b      	lsls	r3, r3, #20
 8009282:	429a      	cmp	r2, r3
 8009284:	d1a1      	bne.n	80091ca <_strtod_l+0xa1a>
 8009286:	4640      	mov	r0, r8
 8009288:	4649      	mov	r1, r9
 800928a:	f7f7 fced 	bl	8000c68 <__aeabi_d2lz>
 800928e:	f7f7 f985 	bl	800059c <__aeabi_l2d>
 8009292:	4602      	mov	r2, r0
 8009294:	460b      	mov	r3, r1
 8009296:	4640      	mov	r0, r8
 8009298:	4649      	mov	r1, r9
 800929a:	f7f6 fff5 	bl	8000288 <__aeabi_dsub>
 800929e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80092a0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80092a4:	ea43 030a 	orr.w	r3, r3, sl
 80092a8:	4313      	orrs	r3, r2
 80092aa:	4680      	mov	r8, r0
 80092ac:	4689      	mov	r9, r1
 80092ae:	d053      	beq.n	8009358 <_strtod_l+0xba8>
 80092b0:	a335      	add	r3, pc, #212	; (adr r3, 8009388 <_strtod_l+0xbd8>)
 80092b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092b6:	f7f7 fc11 	bl	8000adc <__aeabi_dcmplt>
 80092ba:	2800      	cmp	r0, #0
 80092bc:	f47f acce 	bne.w	8008c5c <_strtod_l+0x4ac>
 80092c0:	a333      	add	r3, pc, #204	; (adr r3, 8009390 <_strtod_l+0xbe0>)
 80092c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092c6:	4640      	mov	r0, r8
 80092c8:	4649      	mov	r1, r9
 80092ca:	f7f7 fc25 	bl	8000b18 <__aeabi_dcmpgt>
 80092ce:	2800      	cmp	r0, #0
 80092d0:	f43f af7b 	beq.w	80091ca <_strtod_l+0xa1a>
 80092d4:	e4c2      	b.n	8008c5c <_strtod_l+0x4ac>
 80092d6:	9b04      	ldr	r3, [sp, #16]
 80092d8:	b333      	cbz	r3, 8009328 <_strtod_l+0xb78>
 80092da:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80092dc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 80092e0:	d822      	bhi.n	8009328 <_strtod_l+0xb78>
 80092e2:	a32d      	add	r3, pc, #180	; (adr r3, 8009398 <_strtod_l+0xbe8>)
 80092e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e8:	4640      	mov	r0, r8
 80092ea:	4649      	mov	r1, r9
 80092ec:	f7f7 fc00 	bl	8000af0 <__aeabi_dcmple>
 80092f0:	b1a0      	cbz	r0, 800931c <_strtod_l+0xb6c>
 80092f2:	4649      	mov	r1, r9
 80092f4:	4640      	mov	r0, r8
 80092f6:	f7f7 fc2f 	bl	8000b58 <__aeabi_d2uiz>
 80092fa:	2801      	cmp	r0, #1
 80092fc:	bf38      	it	cc
 80092fe:	2001      	movcc	r0, #1
 8009300:	f7f7 f900 	bl	8000504 <__aeabi_ui2d>
 8009304:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009306:	4680      	mov	r8, r0
 8009308:	4689      	mov	r9, r1
 800930a:	bb13      	cbnz	r3, 8009352 <_strtod_l+0xba2>
 800930c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009310:	9014      	str	r0, [sp, #80]	; 0x50
 8009312:	9315      	str	r3, [sp, #84]	; 0x54
 8009314:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009318:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
 800931c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800931e:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8009320:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009324:	1a9b      	subs	r3, r3, r2
 8009326:	930d      	str	r3, [sp, #52]	; 0x34
 8009328:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800932c:	ed9d 0b0a 	vldr	d0, [sp, #40]	; 0x28
 8009330:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8009334:	f001 fae0 	bl	800a8f8 <__ulp>
 8009338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800933c:	ec53 2b10 	vmov	r2, r3, d0
 8009340:	f7f7 f95a 	bl	80005f8 <__aeabi_dmul>
 8009344:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8009348:	f7f6 ffa0 	bl	800028c <__adddf3>
 800934c:	4682      	mov	sl, r0
 800934e:	468b      	mov	fp, r1
 8009350:	e78f      	b.n	8009272 <_strtod_l+0xac2>
 8009352:	e9cd 8914 	strd	r8, r9, [sp, #80]	; 0x50
 8009356:	e7dd      	b.n	8009314 <_strtod_l+0xb64>
 8009358:	a311      	add	r3, pc, #68	; (adr r3, 80093a0 <_strtod_l+0xbf0>)
 800935a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800935e:	f7f7 fbbd 	bl	8000adc <__aeabi_dcmplt>
 8009362:	e7b4      	b.n	80092ce <_strtod_l+0xb1e>
 8009364:	2300      	movs	r3, #0
 8009366:	930e      	str	r3, [sp, #56]	; 0x38
 8009368:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800936a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800936c:	6013      	str	r3, [r2, #0]
 800936e:	f7ff ba65 	b.w	800883c <_strtod_l+0x8c>
 8009372:	2b65      	cmp	r3, #101	; 0x65
 8009374:	f43f ab5d 	beq.w	8008a32 <_strtod_l+0x282>
 8009378:	2b45      	cmp	r3, #69	; 0x45
 800937a:	f43f ab5a 	beq.w	8008a32 <_strtod_l+0x282>
 800937e:	2201      	movs	r2, #1
 8009380:	f7ff bb92 	b.w	8008aa8 <_strtod_l+0x2f8>
 8009384:	f3af 8000 	nop.w
 8009388:	94a03595 	.word	0x94a03595
 800938c:	3fdfffff 	.word	0x3fdfffff
 8009390:	35afe535 	.word	0x35afe535
 8009394:	3fe00000 	.word	0x3fe00000
 8009398:	ffc00000 	.word	0xffc00000
 800939c:	41dfffff 	.word	0x41dfffff
 80093a0:	94a03595 	.word	0x94a03595
 80093a4:	3fcfffff 	.word	0x3fcfffff
 80093a8:	3ff00000 	.word	0x3ff00000
 80093ac:	7ff00000 	.word	0x7ff00000
 80093b0:	7fe00000 	.word	0x7fe00000
 80093b4:	7c9fffff 	.word	0x7c9fffff
 80093b8:	3fe00000 	.word	0x3fe00000
 80093bc:	bff00000 	.word	0xbff00000
 80093c0:	7fefffff 	.word	0x7fefffff

080093c4 <_strtod_r>:
 80093c4:	4b01      	ldr	r3, [pc, #4]	; (80093cc <_strtod_r+0x8>)
 80093c6:	f7ff b9f3 	b.w	80087b0 <_strtod_l>
 80093ca:	bf00      	nop
 80093cc:	20000260 	.word	0x20000260

080093d0 <_strtol_l.isra.0>:
 80093d0:	2b01      	cmp	r3, #1
 80093d2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80093d6:	d001      	beq.n	80093dc <_strtol_l.isra.0+0xc>
 80093d8:	2b24      	cmp	r3, #36	; 0x24
 80093da:	d906      	bls.n	80093ea <_strtol_l.isra.0+0x1a>
 80093dc:	f7fe fe7c 	bl	80080d8 <__errno>
 80093e0:	2316      	movs	r3, #22
 80093e2:	6003      	str	r3, [r0, #0]
 80093e4:	2000      	movs	r0, #0
 80093e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093ea:	4f3a      	ldr	r7, [pc, #232]	; (80094d4 <_strtol_l.isra.0+0x104>)
 80093ec:	468e      	mov	lr, r1
 80093ee:	4676      	mov	r6, lr
 80093f0:	f81e 4b01 	ldrb.w	r4, [lr], #1
 80093f4:	5de5      	ldrb	r5, [r4, r7]
 80093f6:	f015 0508 	ands.w	r5, r5, #8
 80093fa:	d1f8      	bne.n	80093ee <_strtol_l.isra.0+0x1e>
 80093fc:	2c2d      	cmp	r4, #45	; 0x2d
 80093fe:	d134      	bne.n	800946a <_strtol_l.isra.0+0x9a>
 8009400:	f89e 4000 	ldrb.w	r4, [lr]
 8009404:	f04f 0801 	mov.w	r8, #1
 8009408:	f106 0e02 	add.w	lr, r6, #2
 800940c:	2b00      	cmp	r3, #0
 800940e:	d05c      	beq.n	80094ca <_strtol_l.isra.0+0xfa>
 8009410:	2b10      	cmp	r3, #16
 8009412:	d10c      	bne.n	800942e <_strtol_l.isra.0+0x5e>
 8009414:	2c30      	cmp	r4, #48	; 0x30
 8009416:	d10a      	bne.n	800942e <_strtol_l.isra.0+0x5e>
 8009418:	f89e 4000 	ldrb.w	r4, [lr]
 800941c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009420:	2c58      	cmp	r4, #88	; 0x58
 8009422:	d14d      	bne.n	80094c0 <_strtol_l.isra.0+0xf0>
 8009424:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8009428:	2310      	movs	r3, #16
 800942a:	f10e 0e02 	add.w	lr, lr, #2
 800942e:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8009432:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009436:	2600      	movs	r6, #0
 8009438:	fbbc f9f3 	udiv	r9, ip, r3
 800943c:	4635      	mov	r5, r6
 800943e:	fb03 ca19 	mls	sl, r3, r9, ip
 8009442:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8009446:	2f09      	cmp	r7, #9
 8009448:	d818      	bhi.n	800947c <_strtol_l.isra.0+0xac>
 800944a:	463c      	mov	r4, r7
 800944c:	42a3      	cmp	r3, r4
 800944e:	dd24      	ble.n	800949a <_strtol_l.isra.0+0xca>
 8009450:	2e00      	cmp	r6, #0
 8009452:	db1f      	blt.n	8009494 <_strtol_l.isra.0+0xc4>
 8009454:	45a9      	cmp	r9, r5
 8009456:	d31d      	bcc.n	8009494 <_strtol_l.isra.0+0xc4>
 8009458:	d101      	bne.n	800945e <_strtol_l.isra.0+0x8e>
 800945a:	45a2      	cmp	sl, r4
 800945c:	db1a      	blt.n	8009494 <_strtol_l.isra.0+0xc4>
 800945e:	fb05 4503 	mla	r5, r5, r3, r4
 8009462:	2601      	movs	r6, #1
 8009464:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8009468:	e7eb      	b.n	8009442 <_strtol_l.isra.0+0x72>
 800946a:	2c2b      	cmp	r4, #43	; 0x2b
 800946c:	bf08      	it	eq
 800946e:	f89e 4000 	ldrbeq.w	r4, [lr]
 8009472:	46a8      	mov	r8, r5
 8009474:	bf08      	it	eq
 8009476:	f106 0e02 	addeq.w	lr, r6, #2
 800947a:	e7c7      	b.n	800940c <_strtol_l.isra.0+0x3c>
 800947c:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8009480:	2f19      	cmp	r7, #25
 8009482:	d801      	bhi.n	8009488 <_strtol_l.isra.0+0xb8>
 8009484:	3c37      	subs	r4, #55	; 0x37
 8009486:	e7e1      	b.n	800944c <_strtol_l.isra.0+0x7c>
 8009488:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 800948c:	2f19      	cmp	r7, #25
 800948e:	d804      	bhi.n	800949a <_strtol_l.isra.0+0xca>
 8009490:	3c57      	subs	r4, #87	; 0x57
 8009492:	e7db      	b.n	800944c <_strtol_l.isra.0+0x7c>
 8009494:	f04f 36ff 	mov.w	r6, #4294967295
 8009498:	e7e4      	b.n	8009464 <_strtol_l.isra.0+0x94>
 800949a:	2e00      	cmp	r6, #0
 800949c:	da05      	bge.n	80094aa <_strtol_l.isra.0+0xda>
 800949e:	2322      	movs	r3, #34	; 0x22
 80094a0:	6003      	str	r3, [r0, #0]
 80094a2:	4665      	mov	r5, ip
 80094a4:	b942      	cbnz	r2, 80094b8 <_strtol_l.isra.0+0xe8>
 80094a6:	4628      	mov	r0, r5
 80094a8:	e79d      	b.n	80093e6 <_strtol_l.isra.0+0x16>
 80094aa:	f1b8 0f00 	cmp.w	r8, #0
 80094ae:	d000      	beq.n	80094b2 <_strtol_l.isra.0+0xe2>
 80094b0:	426d      	negs	r5, r5
 80094b2:	2a00      	cmp	r2, #0
 80094b4:	d0f7      	beq.n	80094a6 <_strtol_l.isra.0+0xd6>
 80094b6:	b10e      	cbz	r6, 80094bc <_strtol_l.isra.0+0xec>
 80094b8:	f10e 31ff 	add.w	r1, lr, #4294967295
 80094bc:	6011      	str	r1, [r2, #0]
 80094be:	e7f2      	b.n	80094a6 <_strtol_l.isra.0+0xd6>
 80094c0:	2430      	movs	r4, #48	; 0x30
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d1b3      	bne.n	800942e <_strtol_l.isra.0+0x5e>
 80094c6:	2308      	movs	r3, #8
 80094c8:	e7b1      	b.n	800942e <_strtol_l.isra.0+0x5e>
 80094ca:	2c30      	cmp	r4, #48	; 0x30
 80094cc:	d0a4      	beq.n	8009418 <_strtol_l.isra.0+0x48>
 80094ce:	230a      	movs	r3, #10
 80094d0:	e7ad      	b.n	800942e <_strtol_l.isra.0+0x5e>
 80094d2:	bf00      	nop
 80094d4:	0800cb91 	.word	0x0800cb91

080094d8 <_strtol_r>:
 80094d8:	f7ff bf7a 	b.w	80093d0 <_strtol_l.isra.0>

080094dc <__swbuf_r>:
 80094dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80094de:	460e      	mov	r6, r1
 80094e0:	4614      	mov	r4, r2
 80094e2:	4605      	mov	r5, r0
 80094e4:	b118      	cbz	r0, 80094ee <__swbuf_r+0x12>
 80094e6:	6983      	ldr	r3, [r0, #24]
 80094e8:	b90b      	cbnz	r3, 80094ee <__swbuf_r+0x12>
 80094ea:	f000 f9f3 	bl	80098d4 <__sinit>
 80094ee:	4b21      	ldr	r3, [pc, #132]	; (8009574 <__swbuf_r+0x98>)
 80094f0:	429c      	cmp	r4, r3
 80094f2:	d12b      	bne.n	800954c <__swbuf_r+0x70>
 80094f4:	686c      	ldr	r4, [r5, #4]
 80094f6:	69a3      	ldr	r3, [r4, #24]
 80094f8:	60a3      	str	r3, [r4, #8]
 80094fa:	89a3      	ldrh	r3, [r4, #12]
 80094fc:	071a      	lsls	r2, r3, #28
 80094fe:	d52f      	bpl.n	8009560 <__swbuf_r+0x84>
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	b36b      	cbz	r3, 8009560 <__swbuf_r+0x84>
 8009504:	6923      	ldr	r3, [r4, #16]
 8009506:	6820      	ldr	r0, [r4, #0]
 8009508:	1ac0      	subs	r0, r0, r3
 800950a:	6963      	ldr	r3, [r4, #20]
 800950c:	b2f6      	uxtb	r6, r6
 800950e:	4283      	cmp	r3, r0
 8009510:	4637      	mov	r7, r6
 8009512:	dc04      	bgt.n	800951e <__swbuf_r+0x42>
 8009514:	4621      	mov	r1, r4
 8009516:	4628      	mov	r0, r5
 8009518:	f000 f948 	bl	80097ac <_fflush_r>
 800951c:	bb30      	cbnz	r0, 800956c <__swbuf_r+0x90>
 800951e:	68a3      	ldr	r3, [r4, #8]
 8009520:	3b01      	subs	r3, #1
 8009522:	60a3      	str	r3, [r4, #8]
 8009524:	6823      	ldr	r3, [r4, #0]
 8009526:	1c5a      	adds	r2, r3, #1
 8009528:	6022      	str	r2, [r4, #0]
 800952a:	701e      	strb	r6, [r3, #0]
 800952c:	6963      	ldr	r3, [r4, #20]
 800952e:	3001      	adds	r0, #1
 8009530:	4283      	cmp	r3, r0
 8009532:	d004      	beq.n	800953e <__swbuf_r+0x62>
 8009534:	89a3      	ldrh	r3, [r4, #12]
 8009536:	07db      	lsls	r3, r3, #31
 8009538:	d506      	bpl.n	8009548 <__swbuf_r+0x6c>
 800953a:	2e0a      	cmp	r6, #10
 800953c:	d104      	bne.n	8009548 <__swbuf_r+0x6c>
 800953e:	4621      	mov	r1, r4
 8009540:	4628      	mov	r0, r5
 8009542:	f000 f933 	bl	80097ac <_fflush_r>
 8009546:	b988      	cbnz	r0, 800956c <__swbuf_r+0x90>
 8009548:	4638      	mov	r0, r7
 800954a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800954c:	4b0a      	ldr	r3, [pc, #40]	; (8009578 <__swbuf_r+0x9c>)
 800954e:	429c      	cmp	r4, r3
 8009550:	d101      	bne.n	8009556 <__swbuf_r+0x7a>
 8009552:	68ac      	ldr	r4, [r5, #8]
 8009554:	e7cf      	b.n	80094f6 <__swbuf_r+0x1a>
 8009556:	4b09      	ldr	r3, [pc, #36]	; (800957c <__swbuf_r+0xa0>)
 8009558:	429c      	cmp	r4, r3
 800955a:	bf08      	it	eq
 800955c:	68ec      	ldreq	r4, [r5, #12]
 800955e:	e7ca      	b.n	80094f6 <__swbuf_r+0x1a>
 8009560:	4621      	mov	r1, r4
 8009562:	4628      	mov	r0, r5
 8009564:	f000 f81e 	bl	80095a4 <__swsetup_r>
 8009568:	2800      	cmp	r0, #0
 800956a:	d0cb      	beq.n	8009504 <__swbuf_r+0x28>
 800956c:	f04f 37ff 	mov.w	r7, #4294967295
 8009570:	e7ea      	b.n	8009548 <__swbuf_r+0x6c>
 8009572:	bf00      	nop
 8009574:	0800ccb4 	.word	0x0800ccb4
 8009578:	0800ccd4 	.word	0x0800ccd4
 800957c:	0800cc94 	.word	0x0800cc94

08009580 <_write_r>:
 8009580:	b538      	push	{r3, r4, r5, lr}
 8009582:	4d07      	ldr	r5, [pc, #28]	; (80095a0 <_write_r+0x20>)
 8009584:	4604      	mov	r4, r0
 8009586:	4608      	mov	r0, r1
 8009588:	4611      	mov	r1, r2
 800958a:	2200      	movs	r2, #0
 800958c:	602a      	str	r2, [r5, #0]
 800958e:	461a      	mov	r2, r3
 8009590:	f7f7 ff48 	bl	8001424 <_write>
 8009594:	1c43      	adds	r3, r0, #1
 8009596:	d102      	bne.n	800959e <_write_r+0x1e>
 8009598:	682b      	ldr	r3, [r5, #0]
 800959a:	b103      	cbz	r3, 800959e <_write_r+0x1e>
 800959c:	6023      	str	r3, [r4, #0]
 800959e:	bd38      	pop	{r3, r4, r5, pc}
 80095a0:	20000f68 	.word	0x20000f68

080095a4 <__swsetup_r>:
 80095a4:	4b32      	ldr	r3, [pc, #200]	; (8009670 <__swsetup_r+0xcc>)
 80095a6:	b570      	push	{r4, r5, r6, lr}
 80095a8:	681d      	ldr	r5, [r3, #0]
 80095aa:	4606      	mov	r6, r0
 80095ac:	460c      	mov	r4, r1
 80095ae:	b125      	cbz	r5, 80095ba <__swsetup_r+0x16>
 80095b0:	69ab      	ldr	r3, [r5, #24]
 80095b2:	b913      	cbnz	r3, 80095ba <__swsetup_r+0x16>
 80095b4:	4628      	mov	r0, r5
 80095b6:	f000 f98d 	bl	80098d4 <__sinit>
 80095ba:	4b2e      	ldr	r3, [pc, #184]	; (8009674 <__swsetup_r+0xd0>)
 80095bc:	429c      	cmp	r4, r3
 80095be:	d10f      	bne.n	80095e0 <__swsetup_r+0x3c>
 80095c0:	686c      	ldr	r4, [r5, #4]
 80095c2:	89a3      	ldrh	r3, [r4, #12]
 80095c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80095c8:	0719      	lsls	r1, r3, #28
 80095ca:	d42c      	bmi.n	8009626 <__swsetup_r+0x82>
 80095cc:	06dd      	lsls	r5, r3, #27
 80095ce:	d411      	bmi.n	80095f4 <__swsetup_r+0x50>
 80095d0:	2309      	movs	r3, #9
 80095d2:	6033      	str	r3, [r6, #0]
 80095d4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80095d8:	81a3      	strh	r3, [r4, #12]
 80095da:	f04f 30ff 	mov.w	r0, #4294967295
 80095de:	e03e      	b.n	800965e <__swsetup_r+0xba>
 80095e0:	4b25      	ldr	r3, [pc, #148]	; (8009678 <__swsetup_r+0xd4>)
 80095e2:	429c      	cmp	r4, r3
 80095e4:	d101      	bne.n	80095ea <__swsetup_r+0x46>
 80095e6:	68ac      	ldr	r4, [r5, #8]
 80095e8:	e7eb      	b.n	80095c2 <__swsetup_r+0x1e>
 80095ea:	4b24      	ldr	r3, [pc, #144]	; (800967c <__swsetup_r+0xd8>)
 80095ec:	429c      	cmp	r4, r3
 80095ee:	bf08      	it	eq
 80095f0:	68ec      	ldreq	r4, [r5, #12]
 80095f2:	e7e6      	b.n	80095c2 <__swsetup_r+0x1e>
 80095f4:	0758      	lsls	r0, r3, #29
 80095f6:	d512      	bpl.n	800961e <__swsetup_r+0x7a>
 80095f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80095fa:	b141      	cbz	r1, 800960e <__swsetup_r+0x6a>
 80095fc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009600:	4299      	cmp	r1, r3
 8009602:	d002      	beq.n	800960a <__swsetup_r+0x66>
 8009604:	4630      	mov	r0, r6
 8009606:	f001 fad5 	bl	800abb4 <_free_r>
 800960a:	2300      	movs	r3, #0
 800960c:	6363      	str	r3, [r4, #52]	; 0x34
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009614:	81a3      	strh	r3, [r4, #12]
 8009616:	2300      	movs	r3, #0
 8009618:	6063      	str	r3, [r4, #4]
 800961a:	6923      	ldr	r3, [r4, #16]
 800961c:	6023      	str	r3, [r4, #0]
 800961e:	89a3      	ldrh	r3, [r4, #12]
 8009620:	f043 0308 	orr.w	r3, r3, #8
 8009624:	81a3      	strh	r3, [r4, #12]
 8009626:	6923      	ldr	r3, [r4, #16]
 8009628:	b94b      	cbnz	r3, 800963e <__swsetup_r+0x9a>
 800962a:	89a3      	ldrh	r3, [r4, #12]
 800962c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8009630:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009634:	d003      	beq.n	800963e <__swsetup_r+0x9a>
 8009636:	4621      	mov	r1, r4
 8009638:	4630      	mov	r0, r6
 800963a:	f000 fd91 	bl	800a160 <__smakebuf_r>
 800963e:	89a0      	ldrh	r0, [r4, #12]
 8009640:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009644:	f010 0301 	ands.w	r3, r0, #1
 8009648:	d00a      	beq.n	8009660 <__swsetup_r+0xbc>
 800964a:	2300      	movs	r3, #0
 800964c:	60a3      	str	r3, [r4, #8]
 800964e:	6963      	ldr	r3, [r4, #20]
 8009650:	425b      	negs	r3, r3
 8009652:	61a3      	str	r3, [r4, #24]
 8009654:	6923      	ldr	r3, [r4, #16]
 8009656:	b943      	cbnz	r3, 800966a <__swsetup_r+0xc6>
 8009658:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800965c:	d1ba      	bne.n	80095d4 <__swsetup_r+0x30>
 800965e:	bd70      	pop	{r4, r5, r6, pc}
 8009660:	0781      	lsls	r1, r0, #30
 8009662:	bf58      	it	pl
 8009664:	6963      	ldrpl	r3, [r4, #20]
 8009666:	60a3      	str	r3, [r4, #8]
 8009668:	e7f4      	b.n	8009654 <__swsetup_r+0xb0>
 800966a:	2000      	movs	r0, #0
 800966c:	e7f7      	b.n	800965e <__swsetup_r+0xba>
 800966e:	bf00      	nop
 8009670:	200001f8 	.word	0x200001f8
 8009674:	0800ccb4 	.word	0x0800ccb4
 8009678:	0800ccd4 	.word	0x0800ccd4
 800967c:	0800cc94 	.word	0x0800cc94

08009680 <_close_r>:
 8009680:	b538      	push	{r3, r4, r5, lr}
 8009682:	4d06      	ldr	r5, [pc, #24]	; (800969c <_close_r+0x1c>)
 8009684:	2300      	movs	r3, #0
 8009686:	4604      	mov	r4, r0
 8009688:	4608      	mov	r0, r1
 800968a:	602b      	str	r3, [r5, #0]
 800968c:	f7fa faf9 	bl	8003c82 <_close>
 8009690:	1c43      	adds	r3, r0, #1
 8009692:	d102      	bne.n	800969a <_close_r+0x1a>
 8009694:	682b      	ldr	r3, [r5, #0]
 8009696:	b103      	cbz	r3, 800969a <_close_r+0x1a>
 8009698:	6023      	str	r3, [r4, #0]
 800969a:	bd38      	pop	{r3, r4, r5, pc}
 800969c:	20000f68 	.word	0x20000f68

080096a0 <__sflush_r>:
 80096a0:	898a      	ldrh	r2, [r1, #12]
 80096a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80096a6:	4605      	mov	r5, r0
 80096a8:	0710      	lsls	r0, r2, #28
 80096aa:	460c      	mov	r4, r1
 80096ac:	d458      	bmi.n	8009760 <__sflush_r+0xc0>
 80096ae:	684b      	ldr	r3, [r1, #4]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	dc05      	bgt.n	80096c0 <__sflush_r+0x20>
 80096b4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80096b6:	2b00      	cmp	r3, #0
 80096b8:	dc02      	bgt.n	80096c0 <__sflush_r+0x20>
 80096ba:	2000      	movs	r0, #0
 80096bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096c2:	2e00      	cmp	r6, #0
 80096c4:	d0f9      	beq.n	80096ba <__sflush_r+0x1a>
 80096c6:	2300      	movs	r3, #0
 80096c8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80096cc:	682f      	ldr	r7, [r5, #0]
 80096ce:	602b      	str	r3, [r5, #0]
 80096d0:	d032      	beq.n	8009738 <__sflush_r+0x98>
 80096d2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80096d4:	89a3      	ldrh	r3, [r4, #12]
 80096d6:	075a      	lsls	r2, r3, #29
 80096d8:	d505      	bpl.n	80096e6 <__sflush_r+0x46>
 80096da:	6863      	ldr	r3, [r4, #4]
 80096dc:	1ac0      	subs	r0, r0, r3
 80096de:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80096e0:	b10b      	cbz	r3, 80096e6 <__sflush_r+0x46>
 80096e2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80096e4:	1ac0      	subs	r0, r0, r3
 80096e6:	2300      	movs	r3, #0
 80096e8:	4602      	mov	r2, r0
 80096ea:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80096ec:	6a21      	ldr	r1, [r4, #32]
 80096ee:	4628      	mov	r0, r5
 80096f0:	47b0      	blx	r6
 80096f2:	1c43      	adds	r3, r0, #1
 80096f4:	89a3      	ldrh	r3, [r4, #12]
 80096f6:	d106      	bne.n	8009706 <__sflush_r+0x66>
 80096f8:	6829      	ldr	r1, [r5, #0]
 80096fa:	291d      	cmp	r1, #29
 80096fc:	d82c      	bhi.n	8009758 <__sflush_r+0xb8>
 80096fe:	4a2a      	ldr	r2, [pc, #168]	; (80097a8 <__sflush_r+0x108>)
 8009700:	40ca      	lsrs	r2, r1
 8009702:	07d6      	lsls	r6, r2, #31
 8009704:	d528      	bpl.n	8009758 <__sflush_r+0xb8>
 8009706:	2200      	movs	r2, #0
 8009708:	6062      	str	r2, [r4, #4]
 800970a:	04d9      	lsls	r1, r3, #19
 800970c:	6922      	ldr	r2, [r4, #16]
 800970e:	6022      	str	r2, [r4, #0]
 8009710:	d504      	bpl.n	800971c <__sflush_r+0x7c>
 8009712:	1c42      	adds	r2, r0, #1
 8009714:	d101      	bne.n	800971a <__sflush_r+0x7a>
 8009716:	682b      	ldr	r3, [r5, #0]
 8009718:	b903      	cbnz	r3, 800971c <__sflush_r+0x7c>
 800971a:	6560      	str	r0, [r4, #84]	; 0x54
 800971c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800971e:	602f      	str	r7, [r5, #0]
 8009720:	2900      	cmp	r1, #0
 8009722:	d0ca      	beq.n	80096ba <__sflush_r+0x1a>
 8009724:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009728:	4299      	cmp	r1, r3
 800972a:	d002      	beq.n	8009732 <__sflush_r+0x92>
 800972c:	4628      	mov	r0, r5
 800972e:	f001 fa41 	bl	800abb4 <_free_r>
 8009732:	2000      	movs	r0, #0
 8009734:	6360      	str	r0, [r4, #52]	; 0x34
 8009736:	e7c1      	b.n	80096bc <__sflush_r+0x1c>
 8009738:	6a21      	ldr	r1, [r4, #32]
 800973a:	2301      	movs	r3, #1
 800973c:	4628      	mov	r0, r5
 800973e:	47b0      	blx	r6
 8009740:	1c41      	adds	r1, r0, #1
 8009742:	d1c7      	bne.n	80096d4 <__sflush_r+0x34>
 8009744:	682b      	ldr	r3, [r5, #0]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d0c4      	beq.n	80096d4 <__sflush_r+0x34>
 800974a:	2b1d      	cmp	r3, #29
 800974c:	d001      	beq.n	8009752 <__sflush_r+0xb2>
 800974e:	2b16      	cmp	r3, #22
 8009750:	d101      	bne.n	8009756 <__sflush_r+0xb6>
 8009752:	602f      	str	r7, [r5, #0]
 8009754:	e7b1      	b.n	80096ba <__sflush_r+0x1a>
 8009756:	89a3      	ldrh	r3, [r4, #12]
 8009758:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800975c:	81a3      	strh	r3, [r4, #12]
 800975e:	e7ad      	b.n	80096bc <__sflush_r+0x1c>
 8009760:	690f      	ldr	r7, [r1, #16]
 8009762:	2f00      	cmp	r7, #0
 8009764:	d0a9      	beq.n	80096ba <__sflush_r+0x1a>
 8009766:	0793      	lsls	r3, r2, #30
 8009768:	680e      	ldr	r6, [r1, #0]
 800976a:	bf08      	it	eq
 800976c:	694b      	ldreq	r3, [r1, #20]
 800976e:	600f      	str	r7, [r1, #0]
 8009770:	bf18      	it	ne
 8009772:	2300      	movne	r3, #0
 8009774:	eba6 0807 	sub.w	r8, r6, r7
 8009778:	608b      	str	r3, [r1, #8]
 800977a:	f1b8 0f00 	cmp.w	r8, #0
 800977e:	dd9c      	ble.n	80096ba <__sflush_r+0x1a>
 8009780:	6a21      	ldr	r1, [r4, #32]
 8009782:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009784:	4643      	mov	r3, r8
 8009786:	463a      	mov	r2, r7
 8009788:	4628      	mov	r0, r5
 800978a:	47b0      	blx	r6
 800978c:	2800      	cmp	r0, #0
 800978e:	dc06      	bgt.n	800979e <__sflush_r+0xfe>
 8009790:	89a3      	ldrh	r3, [r4, #12]
 8009792:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009796:	81a3      	strh	r3, [r4, #12]
 8009798:	f04f 30ff 	mov.w	r0, #4294967295
 800979c:	e78e      	b.n	80096bc <__sflush_r+0x1c>
 800979e:	4407      	add	r7, r0
 80097a0:	eba8 0800 	sub.w	r8, r8, r0
 80097a4:	e7e9      	b.n	800977a <__sflush_r+0xda>
 80097a6:	bf00      	nop
 80097a8:	20400001 	.word	0x20400001

080097ac <_fflush_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	690b      	ldr	r3, [r1, #16]
 80097b0:	4605      	mov	r5, r0
 80097b2:	460c      	mov	r4, r1
 80097b4:	b913      	cbnz	r3, 80097bc <_fflush_r+0x10>
 80097b6:	2500      	movs	r5, #0
 80097b8:	4628      	mov	r0, r5
 80097ba:	bd38      	pop	{r3, r4, r5, pc}
 80097bc:	b118      	cbz	r0, 80097c6 <_fflush_r+0x1a>
 80097be:	6983      	ldr	r3, [r0, #24]
 80097c0:	b90b      	cbnz	r3, 80097c6 <_fflush_r+0x1a>
 80097c2:	f000 f887 	bl	80098d4 <__sinit>
 80097c6:	4b14      	ldr	r3, [pc, #80]	; (8009818 <_fflush_r+0x6c>)
 80097c8:	429c      	cmp	r4, r3
 80097ca:	d11b      	bne.n	8009804 <_fflush_r+0x58>
 80097cc:	686c      	ldr	r4, [r5, #4]
 80097ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0ef      	beq.n	80097b6 <_fflush_r+0xa>
 80097d6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80097d8:	07d0      	lsls	r0, r2, #31
 80097da:	d404      	bmi.n	80097e6 <_fflush_r+0x3a>
 80097dc:	0599      	lsls	r1, r3, #22
 80097de:	d402      	bmi.n	80097e6 <_fflush_r+0x3a>
 80097e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097e2:	f000 fc84 	bl	800a0ee <__retarget_lock_acquire_recursive>
 80097e6:	4628      	mov	r0, r5
 80097e8:	4621      	mov	r1, r4
 80097ea:	f7ff ff59 	bl	80096a0 <__sflush_r>
 80097ee:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80097f0:	07da      	lsls	r2, r3, #31
 80097f2:	4605      	mov	r5, r0
 80097f4:	d4e0      	bmi.n	80097b8 <_fflush_r+0xc>
 80097f6:	89a3      	ldrh	r3, [r4, #12]
 80097f8:	059b      	lsls	r3, r3, #22
 80097fa:	d4dd      	bmi.n	80097b8 <_fflush_r+0xc>
 80097fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80097fe:	f000 fc77 	bl	800a0f0 <__retarget_lock_release_recursive>
 8009802:	e7d9      	b.n	80097b8 <_fflush_r+0xc>
 8009804:	4b05      	ldr	r3, [pc, #20]	; (800981c <_fflush_r+0x70>)
 8009806:	429c      	cmp	r4, r3
 8009808:	d101      	bne.n	800980e <_fflush_r+0x62>
 800980a:	68ac      	ldr	r4, [r5, #8]
 800980c:	e7df      	b.n	80097ce <_fflush_r+0x22>
 800980e:	4b04      	ldr	r3, [pc, #16]	; (8009820 <_fflush_r+0x74>)
 8009810:	429c      	cmp	r4, r3
 8009812:	bf08      	it	eq
 8009814:	68ec      	ldreq	r4, [r5, #12]
 8009816:	e7da      	b.n	80097ce <_fflush_r+0x22>
 8009818:	0800ccb4 	.word	0x0800ccb4
 800981c:	0800ccd4 	.word	0x0800ccd4
 8009820:	0800cc94 	.word	0x0800cc94

08009824 <std>:
 8009824:	2300      	movs	r3, #0
 8009826:	b510      	push	{r4, lr}
 8009828:	4604      	mov	r4, r0
 800982a:	e9c0 3300 	strd	r3, r3, [r0]
 800982e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009832:	6083      	str	r3, [r0, #8]
 8009834:	8181      	strh	r1, [r0, #12]
 8009836:	6643      	str	r3, [r0, #100]	; 0x64
 8009838:	81c2      	strh	r2, [r0, #14]
 800983a:	6183      	str	r3, [r0, #24]
 800983c:	4619      	mov	r1, r3
 800983e:	2208      	movs	r2, #8
 8009840:	305c      	adds	r0, #92	; 0x5c
 8009842:	f7fe fc73 	bl	800812c <memset>
 8009846:	4b05      	ldr	r3, [pc, #20]	; (800985c <std+0x38>)
 8009848:	6263      	str	r3, [r4, #36]	; 0x24
 800984a:	4b05      	ldr	r3, [pc, #20]	; (8009860 <std+0x3c>)
 800984c:	62a3      	str	r3, [r4, #40]	; 0x28
 800984e:	4b05      	ldr	r3, [pc, #20]	; (8009864 <std+0x40>)
 8009850:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009852:	4b05      	ldr	r3, [pc, #20]	; (8009868 <std+0x44>)
 8009854:	6224      	str	r4, [r4, #32]
 8009856:	6323      	str	r3, [r4, #48]	; 0x30
 8009858:	bd10      	pop	{r4, pc}
 800985a:	bf00      	nop
 800985c:	080086ed 	.word	0x080086ed
 8009860:	08008713 	.word	0x08008713
 8009864:	0800874b 	.word	0x0800874b
 8009868:	0800876f 	.word	0x0800876f

0800986c <_cleanup_r>:
 800986c:	4901      	ldr	r1, [pc, #4]	; (8009874 <_cleanup_r+0x8>)
 800986e:	f000 b8af 	b.w	80099d0 <_fwalk_reent>
 8009872:	bf00      	nop
 8009874:	080097ad 	.word	0x080097ad

08009878 <__sfmoreglue>:
 8009878:	b570      	push	{r4, r5, r6, lr}
 800987a:	1e4a      	subs	r2, r1, #1
 800987c:	2568      	movs	r5, #104	; 0x68
 800987e:	4355      	muls	r5, r2
 8009880:	460e      	mov	r6, r1
 8009882:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8009886:	f001 f9e5 	bl	800ac54 <_malloc_r>
 800988a:	4604      	mov	r4, r0
 800988c:	b140      	cbz	r0, 80098a0 <__sfmoreglue+0x28>
 800988e:	2100      	movs	r1, #0
 8009890:	e9c0 1600 	strd	r1, r6, [r0]
 8009894:	300c      	adds	r0, #12
 8009896:	60a0      	str	r0, [r4, #8]
 8009898:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800989c:	f7fe fc46 	bl	800812c <memset>
 80098a0:	4620      	mov	r0, r4
 80098a2:	bd70      	pop	{r4, r5, r6, pc}

080098a4 <__sfp_lock_acquire>:
 80098a4:	4801      	ldr	r0, [pc, #4]	; (80098ac <__sfp_lock_acquire+0x8>)
 80098a6:	f000 bc22 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 80098aa:	bf00      	nop
 80098ac:	20000f64 	.word	0x20000f64

080098b0 <__sfp_lock_release>:
 80098b0:	4801      	ldr	r0, [pc, #4]	; (80098b8 <__sfp_lock_release+0x8>)
 80098b2:	f000 bc1d 	b.w	800a0f0 <__retarget_lock_release_recursive>
 80098b6:	bf00      	nop
 80098b8:	20000f64 	.word	0x20000f64

080098bc <__sinit_lock_acquire>:
 80098bc:	4801      	ldr	r0, [pc, #4]	; (80098c4 <__sinit_lock_acquire+0x8>)
 80098be:	f000 bc16 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 80098c2:	bf00      	nop
 80098c4:	20000f5f 	.word	0x20000f5f

080098c8 <__sinit_lock_release>:
 80098c8:	4801      	ldr	r0, [pc, #4]	; (80098d0 <__sinit_lock_release+0x8>)
 80098ca:	f000 bc11 	b.w	800a0f0 <__retarget_lock_release_recursive>
 80098ce:	bf00      	nop
 80098d0:	20000f5f 	.word	0x20000f5f

080098d4 <__sinit>:
 80098d4:	b510      	push	{r4, lr}
 80098d6:	4604      	mov	r4, r0
 80098d8:	f7ff fff0 	bl	80098bc <__sinit_lock_acquire>
 80098dc:	69a3      	ldr	r3, [r4, #24]
 80098de:	b11b      	cbz	r3, 80098e8 <__sinit+0x14>
 80098e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80098e4:	f7ff bff0 	b.w	80098c8 <__sinit_lock_release>
 80098e8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80098ec:	6523      	str	r3, [r4, #80]	; 0x50
 80098ee:	4b13      	ldr	r3, [pc, #76]	; (800993c <__sinit+0x68>)
 80098f0:	4a13      	ldr	r2, [pc, #76]	; (8009940 <__sinit+0x6c>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	62a2      	str	r2, [r4, #40]	; 0x28
 80098f6:	42a3      	cmp	r3, r4
 80098f8:	bf04      	itt	eq
 80098fa:	2301      	moveq	r3, #1
 80098fc:	61a3      	streq	r3, [r4, #24]
 80098fe:	4620      	mov	r0, r4
 8009900:	f000 f820 	bl	8009944 <__sfp>
 8009904:	6060      	str	r0, [r4, #4]
 8009906:	4620      	mov	r0, r4
 8009908:	f000 f81c 	bl	8009944 <__sfp>
 800990c:	60a0      	str	r0, [r4, #8]
 800990e:	4620      	mov	r0, r4
 8009910:	f000 f818 	bl	8009944 <__sfp>
 8009914:	2200      	movs	r2, #0
 8009916:	60e0      	str	r0, [r4, #12]
 8009918:	2104      	movs	r1, #4
 800991a:	6860      	ldr	r0, [r4, #4]
 800991c:	f7ff ff82 	bl	8009824 <std>
 8009920:	68a0      	ldr	r0, [r4, #8]
 8009922:	2201      	movs	r2, #1
 8009924:	2109      	movs	r1, #9
 8009926:	f7ff ff7d 	bl	8009824 <std>
 800992a:	68e0      	ldr	r0, [r4, #12]
 800992c:	2202      	movs	r2, #2
 800992e:	2112      	movs	r1, #18
 8009930:	f7ff ff78 	bl	8009824 <std>
 8009934:	2301      	movs	r3, #1
 8009936:	61a3      	str	r3, [r4, #24]
 8009938:	e7d2      	b.n	80098e0 <__sinit+0xc>
 800993a:	bf00      	nop
 800993c:	0800cb24 	.word	0x0800cb24
 8009940:	0800986d 	.word	0x0800986d

08009944 <__sfp>:
 8009944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009946:	4607      	mov	r7, r0
 8009948:	f7ff ffac 	bl	80098a4 <__sfp_lock_acquire>
 800994c:	4b1e      	ldr	r3, [pc, #120]	; (80099c8 <__sfp+0x84>)
 800994e:	681e      	ldr	r6, [r3, #0]
 8009950:	69b3      	ldr	r3, [r6, #24]
 8009952:	b913      	cbnz	r3, 800995a <__sfp+0x16>
 8009954:	4630      	mov	r0, r6
 8009956:	f7ff ffbd 	bl	80098d4 <__sinit>
 800995a:	3648      	adds	r6, #72	; 0x48
 800995c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8009960:	3b01      	subs	r3, #1
 8009962:	d503      	bpl.n	800996c <__sfp+0x28>
 8009964:	6833      	ldr	r3, [r6, #0]
 8009966:	b30b      	cbz	r3, 80099ac <__sfp+0x68>
 8009968:	6836      	ldr	r6, [r6, #0]
 800996a:	e7f7      	b.n	800995c <__sfp+0x18>
 800996c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8009970:	b9d5      	cbnz	r5, 80099a8 <__sfp+0x64>
 8009972:	4b16      	ldr	r3, [pc, #88]	; (80099cc <__sfp+0x88>)
 8009974:	60e3      	str	r3, [r4, #12]
 8009976:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800997a:	6665      	str	r5, [r4, #100]	; 0x64
 800997c:	f000 fbb6 	bl	800a0ec <__retarget_lock_init_recursive>
 8009980:	f7ff ff96 	bl	80098b0 <__sfp_lock_release>
 8009984:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8009988:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800998c:	6025      	str	r5, [r4, #0]
 800998e:	61a5      	str	r5, [r4, #24]
 8009990:	2208      	movs	r2, #8
 8009992:	4629      	mov	r1, r5
 8009994:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8009998:	f7fe fbc8 	bl	800812c <memset>
 800999c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80099a0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80099a4:	4620      	mov	r0, r4
 80099a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80099a8:	3468      	adds	r4, #104	; 0x68
 80099aa:	e7d9      	b.n	8009960 <__sfp+0x1c>
 80099ac:	2104      	movs	r1, #4
 80099ae:	4638      	mov	r0, r7
 80099b0:	f7ff ff62 	bl	8009878 <__sfmoreglue>
 80099b4:	4604      	mov	r4, r0
 80099b6:	6030      	str	r0, [r6, #0]
 80099b8:	2800      	cmp	r0, #0
 80099ba:	d1d5      	bne.n	8009968 <__sfp+0x24>
 80099bc:	f7ff ff78 	bl	80098b0 <__sfp_lock_release>
 80099c0:	230c      	movs	r3, #12
 80099c2:	603b      	str	r3, [r7, #0]
 80099c4:	e7ee      	b.n	80099a4 <__sfp+0x60>
 80099c6:	bf00      	nop
 80099c8:	0800cb24 	.word	0x0800cb24
 80099cc:	ffff0001 	.word	0xffff0001

080099d0 <_fwalk_reent>:
 80099d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80099d4:	4606      	mov	r6, r0
 80099d6:	4688      	mov	r8, r1
 80099d8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80099dc:	2700      	movs	r7, #0
 80099de:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80099e2:	f1b9 0901 	subs.w	r9, r9, #1
 80099e6:	d505      	bpl.n	80099f4 <_fwalk_reent+0x24>
 80099e8:	6824      	ldr	r4, [r4, #0]
 80099ea:	2c00      	cmp	r4, #0
 80099ec:	d1f7      	bne.n	80099de <_fwalk_reent+0xe>
 80099ee:	4638      	mov	r0, r7
 80099f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099f4:	89ab      	ldrh	r3, [r5, #12]
 80099f6:	2b01      	cmp	r3, #1
 80099f8:	d907      	bls.n	8009a0a <_fwalk_reent+0x3a>
 80099fa:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80099fe:	3301      	adds	r3, #1
 8009a00:	d003      	beq.n	8009a0a <_fwalk_reent+0x3a>
 8009a02:	4629      	mov	r1, r5
 8009a04:	4630      	mov	r0, r6
 8009a06:	47c0      	blx	r8
 8009a08:	4307      	orrs	r7, r0
 8009a0a:	3568      	adds	r5, #104	; 0x68
 8009a0c:	e7e9      	b.n	80099e2 <_fwalk_reent+0x12>

08009a0e <rshift>:
 8009a0e:	6903      	ldr	r3, [r0, #16]
 8009a10:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009a14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009a18:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009a1c:	f100 0414 	add.w	r4, r0, #20
 8009a20:	dd45      	ble.n	8009aae <rshift+0xa0>
 8009a22:	f011 011f 	ands.w	r1, r1, #31
 8009a26:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009a2a:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009a2e:	d10c      	bne.n	8009a4a <rshift+0x3c>
 8009a30:	f100 0710 	add.w	r7, r0, #16
 8009a34:	4629      	mov	r1, r5
 8009a36:	42b1      	cmp	r1, r6
 8009a38:	d334      	bcc.n	8009aa4 <rshift+0x96>
 8009a3a:	1a9b      	subs	r3, r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	1eea      	subs	r2, r5, #3
 8009a40:	4296      	cmp	r6, r2
 8009a42:	bf38      	it	cc
 8009a44:	2300      	movcc	r3, #0
 8009a46:	4423      	add	r3, r4
 8009a48:	e015      	b.n	8009a76 <rshift+0x68>
 8009a4a:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009a4e:	f1c1 0820 	rsb	r8, r1, #32
 8009a52:	40cf      	lsrs	r7, r1
 8009a54:	f105 0e04 	add.w	lr, r5, #4
 8009a58:	46a1      	mov	r9, r4
 8009a5a:	4576      	cmp	r6, lr
 8009a5c:	46f4      	mov	ip, lr
 8009a5e:	d815      	bhi.n	8009a8c <rshift+0x7e>
 8009a60:	1a9b      	subs	r3, r3, r2
 8009a62:	009a      	lsls	r2, r3, #2
 8009a64:	3a04      	subs	r2, #4
 8009a66:	3501      	adds	r5, #1
 8009a68:	42ae      	cmp	r6, r5
 8009a6a:	bf38      	it	cc
 8009a6c:	2200      	movcc	r2, #0
 8009a6e:	18a3      	adds	r3, r4, r2
 8009a70:	50a7      	str	r7, [r4, r2]
 8009a72:	b107      	cbz	r7, 8009a76 <rshift+0x68>
 8009a74:	3304      	adds	r3, #4
 8009a76:	1b1a      	subs	r2, r3, r4
 8009a78:	42a3      	cmp	r3, r4
 8009a7a:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009a7e:	bf08      	it	eq
 8009a80:	2300      	moveq	r3, #0
 8009a82:	6102      	str	r2, [r0, #16]
 8009a84:	bf08      	it	eq
 8009a86:	6143      	streq	r3, [r0, #20]
 8009a88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009a8c:	f8dc c000 	ldr.w	ip, [ip]
 8009a90:	fa0c fc08 	lsl.w	ip, ip, r8
 8009a94:	ea4c 0707 	orr.w	r7, ip, r7
 8009a98:	f849 7b04 	str.w	r7, [r9], #4
 8009a9c:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009aa0:	40cf      	lsrs	r7, r1
 8009aa2:	e7da      	b.n	8009a5a <rshift+0x4c>
 8009aa4:	f851 cb04 	ldr.w	ip, [r1], #4
 8009aa8:	f847 cf04 	str.w	ip, [r7, #4]!
 8009aac:	e7c3      	b.n	8009a36 <rshift+0x28>
 8009aae:	4623      	mov	r3, r4
 8009ab0:	e7e1      	b.n	8009a76 <rshift+0x68>

08009ab2 <__hexdig_fun>:
 8009ab2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009ab6:	2b09      	cmp	r3, #9
 8009ab8:	d802      	bhi.n	8009ac0 <__hexdig_fun+0xe>
 8009aba:	3820      	subs	r0, #32
 8009abc:	b2c0      	uxtb	r0, r0
 8009abe:	4770      	bx	lr
 8009ac0:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009ac4:	2b05      	cmp	r3, #5
 8009ac6:	d801      	bhi.n	8009acc <__hexdig_fun+0x1a>
 8009ac8:	3847      	subs	r0, #71	; 0x47
 8009aca:	e7f7      	b.n	8009abc <__hexdig_fun+0xa>
 8009acc:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009ad0:	2b05      	cmp	r3, #5
 8009ad2:	d801      	bhi.n	8009ad8 <__hexdig_fun+0x26>
 8009ad4:	3827      	subs	r0, #39	; 0x27
 8009ad6:	e7f1      	b.n	8009abc <__hexdig_fun+0xa>
 8009ad8:	2000      	movs	r0, #0
 8009ada:	4770      	bx	lr

08009adc <__gethex>:
 8009adc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ae0:	ed2d 8b02 	vpush	{d8}
 8009ae4:	b089      	sub	sp, #36	; 0x24
 8009ae6:	ee08 0a10 	vmov	s16, r0
 8009aea:	9304      	str	r3, [sp, #16]
 8009aec:	4bbc      	ldr	r3, [pc, #752]	; (8009de0 <__gethex+0x304>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	9301      	str	r3, [sp, #4]
 8009af2:	4618      	mov	r0, r3
 8009af4:	468b      	mov	fp, r1
 8009af6:	4690      	mov	r8, r2
 8009af8:	f7f6 fb6a 	bl	80001d0 <strlen>
 8009afc:	9b01      	ldr	r3, [sp, #4]
 8009afe:	f8db 2000 	ldr.w	r2, [fp]
 8009b02:	4403      	add	r3, r0
 8009b04:	4682      	mov	sl, r0
 8009b06:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8009b0a:	9305      	str	r3, [sp, #20]
 8009b0c:	1c93      	adds	r3, r2, #2
 8009b0e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8009b12:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8009b16:	32fe      	adds	r2, #254	; 0xfe
 8009b18:	18d1      	adds	r1, r2, r3
 8009b1a:	461f      	mov	r7, r3
 8009b1c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8009b20:	9100      	str	r1, [sp, #0]
 8009b22:	2830      	cmp	r0, #48	; 0x30
 8009b24:	d0f8      	beq.n	8009b18 <__gethex+0x3c>
 8009b26:	f7ff ffc4 	bl	8009ab2 <__hexdig_fun>
 8009b2a:	4604      	mov	r4, r0
 8009b2c:	2800      	cmp	r0, #0
 8009b2e:	d13a      	bne.n	8009ba6 <__gethex+0xca>
 8009b30:	9901      	ldr	r1, [sp, #4]
 8009b32:	4652      	mov	r2, sl
 8009b34:	4638      	mov	r0, r7
 8009b36:	f001 ff59 	bl	800b9ec <strncmp>
 8009b3a:	4605      	mov	r5, r0
 8009b3c:	2800      	cmp	r0, #0
 8009b3e:	d168      	bne.n	8009c12 <__gethex+0x136>
 8009b40:	f817 000a 	ldrb.w	r0, [r7, sl]
 8009b44:	eb07 060a 	add.w	r6, r7, sl
 8009b48:	f7ff ffb3 	bl	8009ab2 <__hexdig_fun>
 8009b4c:	2800      	cmp	r0, #0
 8009b4e:	d062      	beq.n	8009c16 <__gethex+0x13a>
 8009b50:	4633      	mov	r3, r6
 8009b52:	7818      	ldrb	r0, [r3, #0]
 8009b54:	2830      	cmp	r0, #48	; 0x30
 8009b56:	461f      	mov	r7, r3
 8009b58:	f103 0301 	add.w	r3, r3, #1
 8009b5c:	d0f9      	beq.n	8009b52 <__gethex+0x76>
 8009b5e:	f7ff ffa8 	bl	8009ab2 <__hexdig_fun>
 8009b62:	2301      	movs	r3, #1
 8009b64:	fab0 f480 	clz	r4, r0
 8009b68:	0964      	lsrs	r4, r4, #5
 8009b6a:	4635      	mov	r5, r6
 8009b6c:	9300      	str	r3, [sp, #0]
 8009b6e:	463a      	mov	r2, r7
 8009b70:	4616      	mov	r6, r2
 8009b72:	3201      	adds	r2, #1
 8009b74:	7830      	ldrb	r0, [r6, #0]
 8009b76:	f7ff ff9c 	bl	8009ab2 <__hexdig_fun>
 8009b7a:	2800      	cmp	r0, #0
 8009b7c:	d1f8      	bne.n	8009b70 <__gethex+0x94>
 8009b7e:	9901      	ldr	r1, [sp, #4]
 8009b80:	4652      	mov	r2, sl
 8009b82:	4630      	mov	r0, r6
 8009b84:	f001 ff32 	bl	800b9ec <strncmp>
 8009b88:	b980      	cbnz	r0, 8009bac <__gethex+0xd0>
 8009b8a:	b94d      	cbnz	r5, 8009ba0 <__gethex+0xc4>
 8009b8c:	eb06 050a 	add.w	r5, r6, sl
 8009b90:	462a      	mov	r2, r5
 8009b92:	4616      	mov	r6, r2
 8009b94:	3201      	adds	r2, #1
 8009b96:	7830      	ldrb	r0, [r6, #0]
 8009b98:	f7ff ff8b 	bl	8009ab2 <__hexdig_fun>
 8009b9c:	2800      	cmp	r0, #0
 8009b9e:	d1f8      	bne.n	8009b92 <__gethex+0xb6>
 8009ba0:	1bad      	subs	r5, r5, r6
 8009ba2:	00ad      	lsls	r5, r5, #2
 8009ba4:	e004      	b.n	8009bb0 <__gethex+0xd4>
 8009ba6:	2400      	movs	r4, #0
 8009ba8:	4625      	mov	r5, r4
 8009baa:	e7e0      	b.n	8009b6e <__gethex+0x92>
 8009bac:	2d00      	cmp	r5, #0
 8009bae:	d1f7      	bne.n	8009ba0 <__gethex+0xc4>
 8009bb0:	7833      	ldrb	r3, [r6, #0]
 8009bb2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8009bb6:	2b50      	cmp	r3, #80	; 0x50
 8009bb8:	d13b      	bne.n	8009c32 <__gethex+0x156>
 8009bba:	7873      	ldrb	r3, [r6, #1]
 8009bbc:	2b2b      	cmp	r3, #43	; 0x2b
 8009bbe:	d02c      	beq.n	8009c1a <__gethex+0x13e>
 8009bc0:	2b2d      	cmp	r3, #45	; 0x2d
 8009bc2:	d02e      	beq.n	8009c22 <__gethex+0x146>
 8009bc4:	1c71      	adds	r1, r6, #1
 8009bc6:	f04f 0900 	mov.w	r9, #0
 8009bca:	7808      	ldrb	r0, [r1, #0]
 8009bcc:	f7ff ff71 	bl	8009ab2 <__hexdig_fun>
 8009bd0:	1e43      	subs	r3, r0, #1
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b18      	cmp	r3, #24
 8009bd6:	d82c      	bhi.n	8009c32 <__gethex+0x156>
 8009bd8:	f1a0 0210 	sub.w	r2, r0, #16
 8009bdc:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8009be0:	f7ff ff67 	bl	8009ab2 <__hexdig_fun>
 8009be4:	1e43      	subs	r3, r0, #1
 8009be6:	b2db      	uxtb	r3, r3
 8009be8:	2b18      	cmp	r3, #24
 8009bea:	d91d      	bls.n	8009c28 <__gethex+0x14c>
 8009bec:	f1b9 0f00 	cmp.w	r9, #0
 8009bf0:	d000      	beq.n	8009bf4 <__gethex+0x118>
 8009bf2:	4252      	negs	r2, r2
 8009bf4:	4415      	add	r5, r2
 8009bf6:	f8cb 1000 	str.w	r1, [fp]
 8009bfa:	b1e4      	cbz	r4, 8009c36 <__gethex+0x15a>
 8009bfc:	9b00      	ldr	r3, [sp, #0]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	bf14      	ite	ne
 8009c02:	2700      	movne	r7, #0
 8009c04:	2706      	moveq	r7, #6
 8009c06:	4638      	mov	r0, r7
 8009c08:	b009      	add	sp, #36	; 0x24
 8009c0a:	ecbd 8b02 	vpop	{d8}
 8009c0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c12:	463e      	mov	r6, r7
 8009c14:	4625      	mov	r5, r4
 8009c16:	2401      	movs	r4, #1
 8009c18:	e7ca      	b.n	8009bb0 <__gethex+0xd4>
 8009c1a:	f04f 0900 	mov.w	r9, #0
 8009c1e:	1cb1      	adds	r1, r6, #2
 8009c20:	e7d3      	b.n	8009bca <__gethex+0xee>
 8009c22:	f04f 0901 	mov.w	r9, #1
 8009c26:	e7fa      	b.n	8009c1e <__gethex+0x142>
 8009c28:	230a      	movs	r3, #10
 8009c2a:	fb03 0202 	mla	r2, r3, r2, r0
 8009c2e:	3a10      	subs	r2, #16
 8009c30:	e7d4      	b.n	8009bdc <__gethex+0x100>
 8009c32:	4631      	mov	r1, r6
 8009c34:	e7df      	b.n	8009bf6 <__gethex+0x11a>
 8009c36:	1bf3      	subs	r3, r6, r7
 8009c38:	3b01      	subs	r3, #1
 8009c3a:	4621      	mov	r1, r4
 8009c3c:	2b07      	cmp	r3, #7
 8009c3e:	dc0b      	bgt.n	8009c58 <__gethex+0x17c>
 8009c40:	ee18 0a10 	vmov	r0, s16
 8009c44:	f000 faec 	bl	800a220 <_Balloc>
 8009c48:	4604      	mov	r4, r0
 8009c4a:	b940      	cbnz	r0, 8009c5e <__gethex+0x182>
 8009c4c:	4b65      	ldr	r3, [pc, #404]	; (8009de4 <__gethex+0x308>)
 8009c4e:	4602      	mov	r2, r0
 8009c50:	21de      	movs	r1, #222	; 0xde
 8009c52:	4865      	ldr	r0, [pc, #404]	; (8009de8 <__gethex+0x30c>)
 8009c54:	f001 ffa2 	bl	800bb9c <__assert_func>
 8009c58:	3101      	adds	r1, #1
 8009c5a:	105b      	asrs	r3, r3, #1
 8009c5c:	e7ee      	b.n	8009c3c <__gethex+0x160>
 8009c5e:	f100 0914 	add.w	r9, r0, #20
 8009c62:	f04f 0b00 	mov.w	fp, #0
 8009c66:	f1ca 0301 	rsb	r3, sl, #1
 8009c6a:	f8cd 9008 	str.w	r9, [sp, #8]
 8009c6e:	f8cd b000 	str.w	fp, [sp]
 8009c72:	9306      	str	r3, [sp, #24]
 8009c74:	42b7      	cmp	r7, r6
 8009c76:	d340      	bcc.n	8009cfa <__gethex+0x21e>
 8009c78:	9802      	ldr	r0, [sp, #8]
 8009c7a:	9b00      	ldr	r3, [sp, #0]
 8009c7c:	f840 3b04 	str.w	r3, [r0], #4
 8009c80:	eba0 0009 	sub.w	r0, r0, r9
 8009c84:	1080      	asrs	r0, r0, #2
 8009c86:	0146      	lsls	r6, r0, #5
 8009c88:	6120      	str	r0, [r4, #16]
 8009c8a:	4618      	mov	r0, r3
 8009c8c:	f000 fbbe 	bl	800a40c <__hi0bits>
 8009c90:	1a30      	subs	r0, r6, r0
 8009c92:	f8d8 6000 	ldr.w	r6, [r8]
 8009c96:	42b0      	cmp	r0, r6
 8009c98:	dd63      	ble.n	8009d62 <__gethex+0x286>
 8009c9a:	1b87      	subs	r7, r0, r6
 8009c9c:	4639      	mov	r1, r7
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 ff58 	bl	800ab54 <__any_on>
 8009ca4:	4682      	mov	sl, r0
 8009ca6:	b1a8      	cbz	r0, 8009cd4 <__gethex+0x1f8>
 8009ca8:	1e7b      	subs	r3, r7, #1
 8009caa:	1159      	asrs	r1, r3, #5
 8009cac:	f003 021f 	and.w	r2, r3, #31
 8009cb0:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8009cb4:	f04f 0a01 	mov.w	sl, #1
 8009cb8:	fa0a f202 	lsl.w	r2, sl, r2
 8009cbc:	420a      	tst	r2, r1
 8009cbe:	d009      	beq.n	8009cd4 <__gethex+0x1f8>
 8009cc0:	4553      	cmp	r3, sl
 8009cc2:	dd05      	ble.n	8009cd0 <__gethex+0x1f4>
 8009cc4:	1eb9      	subs	r1, r7, #2
 8009cc6:	4620      	mov	r0, r4
 8009cc8:	f000 ff44 	bl	800ab54 <__any_on>
 8009ccc:	2800      	cmp	r0, #0
 8009cce:	d145      	bne.n	8009d5c <__gethex+0x280>
 8009cd0:	f04f 0a02 	mov.w	sl, #2
 8009cd4:	4639      	mov	r1, r7
 8009cd6:	4620      	mov	r0, r4
 8009cd8:	f7ff fe99 	bl	8009a0e <rshift>
 8009cdc:	443d      	add	r5, r7
 8009cde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009ce2:	42ab      	cmp	r3, r5
 8009ce4:	da4c      	bge.n	8009d80 <__gethex+0x2a4>
 8009ce6:	ee18 0a10 	vmov	r0, s16
 8009cea:	4621      	mov	r1, r4
 8009cec:	f000 fad8 	bl	800a2a0 <_Bfree>
 8009cf0:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009cf2:	2300      	movs	r3, #0
 8009cf4:	6013      	str	r3, [r2, #0]
 8009cf6:	27a3      	movs	r7, #163	; 0xa3
 8009cf8:	e785      	b.n	8009c06 <__gethex+0x12a>
 8009cfa:	1e73      	subs	r3, r6, #1
 8009cfc:	9a05      	ldr	r2, [sp, #20]
 8009cfe:	9303      	str	r3, [sp, #12]
 8009d00:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009d04:	4293      	cmp	r3, r2
 8009d06:	d019      	beq.n	8009d3c <__gethex+0x260>
 8009d08:	f1bb 0f20 	cmp.w	fp, #32
 8009d0c:	d107      	bne.n	8009d1e <__gethex+0x242>
 8009d0e:	9b02      	ldr	r3, [sp, #8]
 8009d10:	9a00      	ldr	r2, [sp, #0]
 8009d12:	f843 2b04 	str.w	r2, [r3], #4
 8009d16:	9302      	str	r3, [sp, #8]
 8009d18:	2300      	movs	r3, #0
 8009d1a:	9300      	str	r3, [sp, #0]
 8009d1c:	469b      	mov	fp, r3
 8009d1e:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8009d22:	f7ff fec6 	bl	8009ab2 <__hexdig_fun>
 8009d26:	9b00      	ldr	r3, [sp, #0]
 8009d28:	f000 000f 	and.w	r0, r0, #15
 8009d2c:	fa00 f00b 	lsl.w	r0, r0, fp
 8009d30:	4303      	orrs	r3, r0
 8009d32:	9300      	str	r3, [sp, #0]
 8009d34:	f10b 0b04 	add.w	fp, fp, #4
 8009d38:	9b03      	ldr	r3, [sp, #12]
 8009d3a:	e00d      	b.n	8009d58 <__gethex+0x27c>
 8009d3c:	9b03      	ldr	r3, [sp, #12]
 8009d3e:	9a06      	ldr	r2, [sp, #24]
 8009d40:	4413      	add	r3, r2
 8009d42:	42bb      	cmp	r3, r7
 8009d44:	d3e0      	bcc.n	8009d08 <__gethex+0x22c>
 8009d46:	4618      	mov	r0, r3
 8009d48:	9901      	ldr	r1, [sp, #4]
 8009d4a:	9307      	str	r3, [sp, #28]
 8009d4c:	4652      	mov	r2, sl
 8009d4e:	f001 fe4d 	bl	800b9ec <strncmp>
 8009d52:	9b07      	ldr	r3, [sp, #28]
 8009d54:	2800      	cmp	r0, #0
 8009d56:	d1d7      	bne.n	8009d08 <__gethex+0x22c>
 8009d58:	461e      	mov	r6, r3
 8009d5a:	e78b      	b.n	8009c74 <__gethex+0x198>
 8009d5c:	f04f 0a03 	mov.w	sl, #3
 8009d60:	e7b8      	b.n	8009cd4 <__gethex+0x1f8>
 8009d62:	da0a      	bge.n	8009d7a <__gethex+0x29e>
 8009d64:	1a37      	subs	r7, r6, r0
 8009d66:	4621      	mov	r1, r4
 8009d68:	ee18 0a10 	vmov	r0, s16
 8009d6c:	463a      	mov	r2, r7
 8009d6e:	f000 fcb3 	bl	800a6d8 <__lshift>
 8009d72:	1bed      	subs	r5, r5, r7
 8009d74:	4604      	mov	r4, r0
 8009d76:	f100 0914 	add.w	r9, r0, #20
 8009d7a:	f04f 0a00 	mov.w	sl, #0
 8009d7e:	e7ae      	b.n	8009cde <__gethex+0x202>
 8009d80:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8009d84:	42a8      	cmp	r0, r5
 8009d86:	dd72      	ble.n	8009e6e <__gethex+0x392>
 8009d88:	1b45      	subs	r5, r0, r5
 8009d8a:	42ae      	cmp	r6, r5
 8009d8c:	dc36      	bgt.n	8009dfc <__gethex+0x320>
 8009d8e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009d92:	2b02      	cmp	r3, #2
 8009d94:	d02a      	beq.n	8009dec <__gethex+0x310>
 8009d96:	2b03      	cmp	r3, #3
 8009d98:	d02c      	beq.n	8009df4 <__gethex+0x318>
 8009d9a:	2b01      	cmp	r3, #1
 8009d9c:	d115      	bne.n	8009dca <__gethex+0x2ee>
 8009d9e:	42ae      	cmp	r6, r5
 8009da0:	d113      	bne.n	8009dca <__gethex+0x2ee>
 8009da2:	2e01      	cmp	r6, #1
 8009da4:	d10b      	bne.n	8009dbe <__gethex+0x2e2>
 8009da6:	9a04      	ldr	r2, [sp, #16]
 8009da8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8009dac:	6013      	str	r3, [r2, #0]
 8009dae:	2301      	movs	r3, #1
 8009db0:	6123      	str	r3, [r4, #16]
 8009db2:	f8c9 3000 	str.w	r3, [r9]
 8009db6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009db8:	2762      	movs	r7, #98	; 0x62
 8009dba:	601c      	str	r4, [r3, #0]
 8009dbc:	e723      	b.n	8009c06 <__gethex+0x12a>
 8009dbe:	1e71      	subs	r1, r6, #1
 8009dc0:	4620      	mov	r0, r4
 8009dc2:	f000 fec7 	bl	800ab54 <__any_on>
 8009dc6:	2800      	cmp	r0, #0
 8009dc8:	d1ed      	bne.n	8009da6 <__gethex+0x2ca>
 8009dca:	ee18 0a10 	vmov	r0, s16
 8009dce:	4621      	mov	r1, r4
 8009dd0:	f000 fa66 	bl	800a2a0 <_Bfree>
 8009dd4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	6013      	str	r3, [r2, #0]
 8009dda:	2750      	movs	r7, #80	; 0x50
 8009ddc:	e713      	b.n	8009c06 <__gethex+0x12a>
 8009dde:	bf00      	nop
 8009de0:	0800cd70 	.word	0x0800cd70
 8009de4:	0800ccf4 	.word	0x0800ccf4
 8009de8:	0800cd05 	.word	0x0800cd05
 8009dec:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d1eb      	bne.n	8009dca <__gethex+0x2ee>
 8009df2:	e7d8      	b.n	8009da6 <__gethex+0x2ca>
 8009df4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009df6:	2b00      	cmp	r3, #0
 8009df8:	d1d5      	bne.n	8009da6 <__gethex+0x2ca>
 8009dfa:	e7e6      	b.n	8009dca <__gethex+0x2ee>
 8009dfc:	1e6f      	subs	r7, r5, #1
 8009dfe:	f1ba 0f00 	cmp.w	sl, #0
 8009e02:	d131      	bne.n	8009e68 <__gethex+0x38c>
 8009e04:	b127      	cbz	r7, 8009e10 <__gethex+0x334>
 8009e06:	4639      	mov	r1, r7
 8009e08:	4620      	mov	r0, r4
 8009e0a:	f000 fea3 	bl	800ab54 <__any_on>
 8009e0e:	4682      	mov	sl, r0
 8009e10:	117b      	asrs	r3, r7, #5
 8009e12:	2101      	movs	r1, #1
 8009e14:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8009e18:	f007 071f 	and.w	r7, r7, #31
 8009e1c:	fa01 f707 	lsl.w	r7, r1, r7
 8009e20:	421f      	tst	r7, r3
 8009e22:	4629      	mov	r1, r5
 8009e24:	4620      	mov	r0, r4
 8009e26:	bf18      	it	ne
 8009e28:	f04a 0a02 	orrne.w	sl, sl, #2
 8009e2c:	1b76      	subs	r6, r6, r5
 8009e2e:	f7ff fdee 	bl	8009a0e <rshift>
 8009e32:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8009e36:	2702      	movs	r7, #2
 8009e38:	f1ba 0f00 	cmp.w	sl, #0
 8009e3c:	d048      	beq.n	8009ed0 <__gethex+0x3f4>
 8009e3e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8009e42:	2b02      	cmp	r3, #2
 8009e44:	d015      	beq.n	8009e72 <__gethex+0x396>
 8009e46:	2b03      	cmp	r3, #3
 8009e48:	d017      	beq.n	8009e7a <__gethex+0x39e>
 8009e4a:	2b01      	cmp	r3, #1
 8009e4c:	d109      	bne.n	8009e62 <__gethex+0x386>
 8009e4e:	f01a 0f02 	tst.w	sl, #2
 8009e52:	d006      	beq.n	8009e62 <__gethex+0x386>
 8009e54:	f8d9 0000 	ldr.w	r0, [r9]
 8009e58:	ea4a 0a00 	orr.w	sl, sl, r0
 8009e5c:	f01a 0f01 	tst.w	sl, #1
 8009e60:	d10e      	bne.n	8009e80 <__gethex+0x3a4>
 8009e62:	f047 0710 	orr.w	r7, r7, #16
 8009e66:	e033      	b.n	8009ed0 <__gethex+0x3f4>
 8009e68:	f04f 0a01 	mov.w	sl, #1
 8009e6c:	e7d0      	b.n	8009e10 <__gethex+0x334>
 8009e6e:	2701      	movs	r7, #1
 8009e70:	e7e2      	b.n	8009e38 <__gethex+0x35c>
 8009e72:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e74:	f1c3 0301 	rsb	r3, r3, #1
 8009e78:	9315      	str	r3, [sp, #84]	; 0x54
 8009e7a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8009e7c:	2b00      	cmp	r3, #0
 8009e7e:	d0f0      	beq.n	8009e62 <__gethex+0x386>
 8009e80:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8009e84:	f104 0314 	add.w	r3, r4, #20
 8009e88:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8009e8c:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8009e90:	f04f 0c00 	mov.w	ip, #0
 8009e94:	4618      	mov	r0, r3
 8009e96:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e9a:	f1b2 3fff 	cmp.w	r2, #4294967295
 8009e9e:	d01c      	beq.n	8009eda <__gethex+0x3fe>
 8009ea0:	3201      	adds	r2, #1
 8009ea2:	6002      	str	r2, [r0, #0]
 8009ea4:	2f02      	cmp	r7, #2
 8009ea6:	f104 0314 	add.w	r3, r4, #20
 8009eaa:	d13f      	bne.n	8009f2c <__gethex+0x450>
 8009eac:	f8d8 2000 	ldr.w	r2, [r8]
 8009eb0:	3a01      	subs	r2, #1
 8009eb2:	42b2      	cmp	r2, r6
 8009eb4:	d10a      	bne.n	8009ecc <__gethex+0x3f0>
 8009eb6:	1171      	asrs	r1, r6, #5
 8009eb8:	2201      	movs	r2, #1
 8009eba:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009ebe:	f006 061f 	and.w	r6, r6, #31
 8009ec2:	fa02 f606 	lsl.w	r6, r2, r6
 8009ec6:	421e      	tst	r6, r3
 8009ec8:	bf18      	it	ne
 8009eca:	4617      	movne	r7, r2
 8009ecc:	f047 0720 	orr.w	r7, r7, #32
 8009ed0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009ed2:	601c      	str	r4, [r3, #0]
 8009ed4:	9b04      	ldr	r3, [sp, #16]
 8009ed6:	601d      	str	r5, [r3, #0]
 8009ed8:	e695      	b.n	8009c06 <__gethex+0x12a>
 8009eda:	4299      	cmp	r1, r3
 8009edc:	f843 cc04 	str.w	ip, [r3, #-4]
 8009ee0:	d8d8      	bhi.n	8009e94 <__gethex+0x3b8>
 8009ee2:	68a3      	ldr	r3, [r4, #8]
 8009ee4:	459b      	cmp	fp, r3
 8009ee6:	db19      	blt.n	8009f1c <__gethex+0x440>
 8009ee8:	6861      	ldr	r1, [r4, #4]
 8009eea:	ee18 0a10 	vmov	r0, s16
 8009eee:	3101      	adds	r1, #1
 8009ef0:	f000 f996 	bl	800a220 <_Balloc>
 8009ef4:	4681      	mov	r9, r0
 8009ef6:	b918      	cbnz	r0, 8009f00 <__gethex+0x424>
 8009ef8:	4b1a      	ldr	r3, [pc, #104]	; (8009f64 <__gethex+0x488>)
 8009efa:	4602      	mov	r2, r0
 8009efc:	2184      	movs	r1, #132	; 0x84
 8009efe:	e6a8      	b.n	8009c52 <__gethex+0x176>
 8009f00:	6922      	ldr	r2, [r4, #16]
 8009f02:	3202      	adds	r2, #2
 8009f04:	f104 010c 	add.w	r1, r4, #12
 8009f08:	0092      	lsls	r2, r2, #2
 8009f0a:	300c      	adds	r0, #12
 8009f0c:	f000 f97a 	bl	800a204 <memcpy>
 8009f10:	4621      	mov	r1, r4
 8009f12:	ee18 0a10 	vmov	r0, s16
 8009f16:	f000 f9c3 	bl	800a2a0 <_Bfree>
 8009f1a:	464c      	mov	r4, r9
 8009f1c:	6923      	ldr	r3, [r4, #16]
 8009f1e:	1c5a      	adds	r2, r3, #1
 8009f20:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009f24:	6122      	str	r2, [r4, #16]
 8009f26:	2201      	movs	r2, #1
 8009f28:	615a      	str	r2, [r3, #20]
 8009f2a:	e7bb      	b.n	8009ea4 <__gethex+0x3c8>
 8009f2c:	6922      	ldr	r2, [r4, #16]
 8009f2e:	455a      	cmp	r2, fp
 8009f30:	dd0b      	ble.n	8009f4a <__gethex+0x46e>
 8009f32:	2101      	movs	r1, #1
 8009f34:	4620      	mov	r0, r4
 8009f36:	f7ff fd6a 	bl	8009a0e <rshift>
 8009f3a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8009f3e:	3501      	adds	r5, #1
 8009f40:	42ab      	cmp	r3, r5
 8009f42:	f6ff aed0 	blt.w	8009ce6 <__gethex+0x20a>
 8009f46:	2701      	movs	r7, #1
 8009f48:	e7c0      	b.n	8009ecc <__gethex+0x3f0>
 8009f4a:	f016 061f 	ands.w	r6, r6, #31
 8009f4e:	d0fa      	beq.n	8009f46 <__gethex+0x46a>
 8009f50:	449a      	add	sl, r3
 8009f52:	f1c6 0620 	rsb	r6, r6, #32
 8009f56:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8009f5a:	f000 fa57 	bl	800a40c <__hi0bits>
 8009f5e:	42b0      	cmp	r0, r6
 8009f60:	dbe7      	blt.n	8009f32 <__gethex+0x456>
 8009f62:	e7f0      	b.n	8009f46 <__gethex+0x46a>
 8009f64:	0800ccf4 	.word	0x0800ccf4

08009f68 <L_shift>:
 8009f68:	f1c2 0208 	rsb	r2, r2, #8
 8009f6c:	0092      	lsls	r2, r2, #2
 8009f6e:	b570      	push	{r4, r5, r6, lr}
 8009f70:	f1c2 0620 	rsb	r6, r2, #32
 8009f74:	6843      	ldr	r3, [r0, #4]
 8009f76:	6804      	ldr	r4, [r0, #0]
 8009f78:	fa03 f506 	lsl.w	r5, r3, r6
 8009f7c:	432c      	orrs	r4, r5
 8009f7e:	40d3      	lsrs	r3, r2
 8009f80:	6004      	str	r4, [r0, #0]
 8009f82:	f840 3f04 	str.w	r3, [r0, #4]!
 8009f86:	4288      	cmp	r0, r1
 8009f88:	d3f4      	bcc.n	8009f74 <L_shift+0xc>
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}

08009f8c <__match>:
 8009f8c:	b530      	push	{r4, r5, lr}
 8009f8e:	6803      	ldr	r3, [r0, #0]
 8009f90:	3301      	adds	r3, #1
 8009f92:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009f96:	b914      	cbnz	r4, 8009f9e <__match+0x12>
 8009f98:	6003      	str	r3, [r0, #0]
 8009f9a:	2001      	movs	r0, #1
 8009f9c:	bd30      	pop	{r4, r5, pc}
 8009f9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009fa2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8009fa6:	2d19      	cmp	r5, #25
 8009fa8:	bf98      	it	ls
 8009faa:	3220      	addls	r2, #32
 8009fac:	42a2      	cmp	r2, r4
 8009fae:	d0f0      	beq.n	8009f92 <__match+0x6>
 8009fb0:	2000      	movs	r0, #0
 8009fb2:	e7f3      	b.n	8009f9c <__match+0x10>

08009fb4 <__hexnan>:
 8009fb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fb8:	680b      	ldr	r3, [r1, #0]
 8009fba:	6801      	ldr	r1, [r0, #0]
 8009fbc:	115e      	asrs	r6, r3, #5
 8009fbe:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8009fc2:	f013 031f 	ands.w	r3, r3, #31
 8009fc6:	b087      	sub	sp, #28
 8009fc8:	bf18      	it	ne
 8009fca:	3604      	addne	r6, #4
 8009fcc:	2500      	movs	r5, #0
 8009fce:	1f37      	subs	r7, r6, #4
 8009fd0:	4682      	mov	sl, r0
 8009fd2:	4690      	mov	r8, r2
 8009fd4:	9301      	str	r3, [sp, #4]
 8009fd6:	f846 5c04 	str.w	r5, [r6, #-4]
 8009fda:	46b9      	mov	r9, r7
 8009fdc:	463c      	mov	r4, r7
 8009fde:	9502      	str	r5, [sp, #8]
 8009fe0:	46ab      	mov	fp, r5
 8009fe2:	784a      	ldrb	r2, [r1, #1]
 8009fe4:	1c4b      	adds	r3, r1, #1
 8009fe6:	9303      	str	r3, [sp, #12]
 8009fe8:	b342      	cbz	r2, 800a03c <__hexnan+0x88>
 8009fea:	4610      	mov	r0, r2
 8009fec:	9105      	str	r1, [sp, #20]
 8009fee:	9204      	str	r2, [sp, #16]
 8009ff0:	f7ff fd5f 	bl	8009ab2 <__hexdig_fun>
 8009ff4:	2800      	cmp	r0, #0
 8009ff6:	d14f      	bne.n	800a098 <__hexnan+0xe4>
 8009ff8:	9a04      	ldr	r2, [sp, #16]
 8009ffa:	9905      	ldr	r1, [sp, #20]
 8009ffc:	2a20      	cmp	r2, #32
 8009ffe:	d818      	bhi.n	800a032 <__hexnan+0x7e>
 800a000:	9b02      	ldr	r3, [sp, #8]
 800a002:	459b      	cmp	fp, r3
 800a004:	dd13      	ble.n	800a02e <__hexnan+0x7a>
 800a006:	454c      	cmp	r4, r9
 800a008:	d206      	bcs.n	800a018 <__hexnan+0x64>
 800a00a:	2d07      	cmp	r5, #7
 800a00c:	dc04      	bgt.n	800a018 <__hexnan+0x64>
 800a00e:	462a      	mov	r2, r5
 800a010:	4649      	mov	r1, r9
 800a012:	4620      	mov	r0, r4
 800a014:	f7ff ffa8 	bl	8009f68 <L_shift>
 800a018:	4544      	cmp	r4, r8
 800a01a:	d950      	bls.n	800a0be <__hexnan+0x10a>
 800a01c:	2300      	movs	r3, #0
 800a01e:	f1a4 0904 	sub.w	r9, r4, #4
 800a022:	f844 3c04 	str.w	r3, [r4, #-4]
 800a026:	f8cd b008 	str.w	fp, [sp, #8]
 800a02a:	464c      	mov	r4, r9
 800a02c:	461d      	mov	r5, r3
 800a02e:	9903      	ldr	r1, [sp, #12]
 800a030:	e7d7      	b.n	8009fe2 <__hexnan+0x2e>
 800a032:	2a29      	cmp	r2, #41	; 0x29
 800a034:	d156      	bne.n	800a0e4 <__hexnan+0x130>
 800a036:	3102      	adds	r1, #2
 800a038:	f8ca 1000 	str.w	r1, [sl]
 800a03c:	f1bb 0f00 	cmp.w	fp, #0
 800a040:	d050      	beq.n	800a0e4 <__hexnan+0x130>
 800a042:	454c      	cmp	r4, r9
 800a044:	d206      	bcs.n	800a054 <__hexnan+0xa0>
 800a046:	2d07      	cmp	r5, #7
 800a048:	dc04      	bgt.n	800a054 <__hexnan+0xa0>
 800a04a:	462a      	mov	r2, r5
 800a04c:	4649      	mov	r1, r9
 800a04e:	4620      	mov	r0, r4
 800a050:	f7ff ff8a 	bl	8009f68 <L_shift>
 800a054:	4544      	cmp	r4, r8
 800a056:	d934      	bls.n	800a0c2 <__hexnan+0x10e>
 800a058:	f1a8 0204 	sub.w	r2, r8, #4
 800a05c:	4623      	mov	r3, r4
 800a05e:	f853 1b04 	ldr.w	r1, [r3], #4
 800a062:	f842 1f04 	str.w	r1, [r2, #4]!
 800a066:	429f      	cmp	r7, r3
 800a068:	d2f9      	bcs.n	800a05e <__hexnan+0xaa>
 800a06a:	1b3b      	subs	r3, r7, r4
 800a06c:	f023 0303 	bic.w	r3, r3, #3
 800a070:	3304      	adds	r3, #4
 800a072:	3401      	adds	r4, #1
 800a074:	3e03      	subs	r6, #3
 800a076:	42b4      	cmp	r4, r6
 800a078:	bf88      	it	hi
 800a07a:	2304      	movhi	r3, #4
 800a07c:	4443      	add	r3, r8
 800a07e:	2200      	movs	r2, #0
 800a080:	f843 2b04 	str.w	r2, [r3], #4
 800a084:	429f      	cmp	r7, r3
 800a086:	d2fb      	bcs.n	800a080 <__hexnan+0xcc>
 800a088:	683b      	ldr	r3, [r7, #0]
 800a08a:	b91b      	cbnz	r3, 800a094 <__hexnan+0xe0>
 800a08c:	4547      	cmp	r7, r8
 800a08e:	d127      	bne.n	800a0e0 <__hexnan+0x12c>
 800a090:	2301      	movs	r3, #1
 800a092:	603b      	str	r3, [r7, #0]
 800a094:	2005      	movs	r0, #5
 800a096:	e026      	b.n	800a0e6 <__hexnan+0x132>
 800a098:	3501      	adds	r5, #1
 800a09a:	2d08      	cmp	r5, #8
 800a09c:	f10b 0b01 	add.w	fp, fp, #1
 800a0a0:	dd06      	ble.n	800a0b0 <__hexnan+0xfc>
 800a0a2:	4544      	cmp	r4, r8
 800a0a4:	d9c3      	bls.n	800a02e <__hexnan+0x7a>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	f844 3c04 	str.w	r3, [r4, #-4]
 800a0ac:	2501      	movs	r5, #1
 800a0ae:	3c04      	subs	r4, #4
 800a0b0:	6822      	ldr	r2, [r4, #0]
 800a0b2:	f000 000f 	and.w	r0, r0, #15
 800a0b6:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a0ba:	6022      	str	r2, [r4, #0]
 800a0bc:	e7b7      	b.n	800a02e <__hexnan+0x7a>
 800a0be:	2508      	movs	r5, #8
 800a0c0:	e7b5      	b.n	800a02e <__hexnan+0x7a>
 800a0c2:	9b01      	ldr	r3, [sp, #4]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d0df      	beq.n	800a088 <__hexnan+0xd4>
 800a0c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a0cc:	f1c3 0320 	rsb	r3, r3, #32
 800a0d0:	fa22 f303 	lsr.w	r3, r2, r3
 800a0d4:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a0d8:	401a      	ands	r2, r3
 800a0da:	f846 2c04 	str.w	r2, [r6, #-4]
 800a0de:	e7d3      	b.n	800a088 <__hexnan+0xd4>
 800a0e0:	3f04      	subs	r7, #4
 800a0e2:	e7d1      	b.n	800a088 <__hexnan+0xd4>
 800a0e4:	2004      	movs	r0, #4
 800a0e6:	b007      	add	sp, #28
 800a0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a0ec <__retarget_lock_init_recursive>:
 800a0ec:	4770      	bx	lr

0800a0ee <__retarget_lock_acquire_recursive>:
 800a0ee:	4770      	bx	lr

0800a0f0 <__retarget_lock_release_recursive>:
 800a0f0:	4770      	bx	lr
	...

0800a0f4 <_lseek_r>:
 800a0f4:	b538      	push	{r3, r4, r5, lr}
 800a0f6:	4d07      	ldr	r5, [pc, #28]	; (800a114 <_lseek_r+0x20>)
 800a0f8:	4604      	mov	r4, r0
 800a0fa:	4608      	mov	r0, r1
 800a0fc:	4611      	mov	r1, r2
 800a0fe:	2200      	movs	r2, #0
 800a100:	602a      	str	r2, [r5, #0]
 800a102:	461a      	mov	r2, r3
 800a104:	f7f9 fde4 	bl	8003cd0 <_lseek>
 800a108:	1c43      	adds	r3, r0, #1
 800a10a:	d102      	bne.n	800a112 <_lseek_r+0x1e>
 800a10c:	682b      	ldr	r3, [r5, #0]
 800a10e:	b103      	cbz	r3, 800a112 <_lseek_r+0x1e>
 800a110:	6023      	str	r3, [r4, #0]
 800a112:	bd38      	pop	{r3, r4, r5, pc}
 800a114:	20000f68 	.word	0x20000f68

0800a118 <__swhatbuf_r>:
 800a118:	b570      	push	{r4, r5, r6, lr}
 800a11a:	460e      	mov	r6, r1
 800a11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a120:	2900      	cmp	r1, #0
 800a122:	b096      	sub	sp, #88	; 0x58
 800a124:	4614      	mov	r4, r2
 800a126:	461d      	mov	r5, r3
 800a128:	da07      	bge.n	800a13a <__swhatbuf_r+0x22>
 800a12a:	2300      	movs	r3, #0
 800a12c:	602b      	str	r3, [r5, #0]
 800a12e:	89b3      	ldrh	r3, [r6, #12]
 800a130:	061a      	lsls	r2, r3, #24
 800a132:	d410      	bmi.n	800a156 <__swhatbuf_r+0x3e>
 800a134:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a138:	e00e      	b.n	800a158 <__swhatbuf_r+0x40>
 800a13a:	466a      	mov	r2, sp
 800a13c:	f001 fd5e 	bl	800bbfc <_fstat_r>
 800a140:	2800      	cmp	r0, #0
 800a142:	dbf2      	blt.n	800a12a <__swhatbuf_r+0x12>
 800a144:	9a01      	ldr	r2, [sp, #4]
 800a146:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800a14a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800a14e:	425a      	negs	r2, r3
 800a150:	415a      	adcs	r2, r3
 800a152:	602a      	str	r2, [r5, #0]
 800a154:	e7ee      	b.n	800a134 <__swhatbuf_r+0x1c>
 800a156:	2340      	movs	r3, #64	; 0x40
 800a158:	2000      	movs	r0, #0
 800a15a:	6023      	str	r3, [r4, #0]
 800a15c:	b016      	add	sp, #88	; 0x58
 800a15e:	bd70      	pop	{r4, r5, r6, pc}

0800a160 <__smakebuf_r>:
 800a160:	898b      	ldrh	r3, [r1, #12]
 800a162:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a164:	079d      	lsls	r5, r3, #30
 800a166:	4606      	mov	r6, r0
 800a168:	460c      	mov	r4, r1
 800a16a:	d507      	bpl.n	800a17c <__smakebuf_r+0x1c>
 800a16c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800a170:	6023      	str	r3, [r4, #0]
 800a172:	6123      	str	r3, [r4, #16]
 800a174:	2301      	movs	r3, #1
 800a176:	6163      	str	r3, [r4, #20]
 800a178:	b002      	add	sp, #8
 800a17a:	bd70      	pop	{r4, r5, r6, pc}
 800a17c:	ab01      	add	r3, sp, #4
 800a17e:	466a      	mov	r2, sp
 800a180:	f7ff ffca 	bl	800a118 <__swhatbuf_r>
 800a184:	9900      	ldr	r1, [sp, #0]
 800a186:	4605      	mov	r5, r0
 800a188:	4630      	mov	r0, r6
 800a18a:	f000 fd63 	bl	800ac54 <_malloc_r>
 800a18e:	b948      	cbnz	r0, 800a1a4 <__smakebuf_r+0x44>
 800a190:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a194:	059a      	lsls	r2, r3, #22
 800a196:	d4ef      	bmi.n	800a178 <__smakebuf_r+0x18>
 800a198:	f023 0303 	bic.w	r3, r3, #3
 800a19c:	f043 0302 	orr.w	r3, r3, #2
 800a1a0:	81a3      	strh	r3, [r4, #12]
 800a1a2:	e7e3      	b.n	800a16c <__smakebuf_r+0xc>
 800a1a4:	4b0d      	ldr	r3, [pc, #52]	; (800a1dc <__smakebuf_r+0x7c>)
 800a1a6:	62b3      	str	r3, [r6, #40]	; 0x28
 800a1a8:	89a3      	ldrh	r3, [r4, #12]
 800a1aa:	6020      	str	r0, [r4, #0]
 800a1ac:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a1b0:	81a3      	strh	r3, [r4, #12]
 800a1b2:	9b00      	ldr	r3, [sp, #0]
 800a1b4:	6163      	str	r3, [r4, #20]
 800a1b6:	9b01      	ldr	r3, [sp, #4]
 800a1b8:	6120      	str	r0, [r4, #16]
 800a1ba:	b15b      	cbz	r3, 800a1d4 <__smakebuf_r+0x74>
 800a1bc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a1c0:	4630      	mov	r0, r6
 800a1c2:	f001 fd2d 	bl	800bc20 <_isatty_r>
 800a1c6:	b128      	cbz	r0, 800a1d4 <__smakebuf_r+0x74>
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	f023 0303 	bic.w	r3, r3, #3
 800a1ce:	f043 0301 	orr.w	r3, r3, #1
 800a1d2:	81a3      	strh	r3, [r4, #12]
 800a1d4:	89a0      	ldrh	r0, [r4, #12]
 800a1d6:	4305      	orrs	r5, r0
 800a1d8:	81a5      	strh	r5, [r4, #12]
 800a1da:	e7cd      	b.n	800a178 <__smakebuf_r+0x18>
 800a1dc:	0800986d 	.word	0x0800986d

0800a1e0 <__ascii_mbtowc>:
 800a1e0:	b082      	sub	sp, #8
 800a1e2:	b901      	cbnz	r1, 800a1e6 <__ascii_mbtowc+0x6>
 800a1e4:	a901      	add	r1, sp, #4
 800a1e6:	b142      	cbz	r2, 800a1fa <__ascii_mbtowc+0x1a>
 800a1e8:	b14b      	cbz	r3, 800a1fe <__ascii_mbtowc+0x1e>
 800a1ea:	7813      	ldrb	r3, [r2, #0]
 800a1ec:	600b      	str	r3, [r1, #0]
 800a1ee:	7812      	ldrb	r2, [r2, #0]
 800a1f0:	1e10      	subs	r0, r2, #0
 800a1f2:	bf18      	it	ne
 800a1f4:	2001      	movne	r0, #1
 800a1f6:	b002      	add	sp, #8
 800a1f8:	4770      	bx	lr
 800a1fa:	4610      	mov	r0, r2
 800a1fc:	e7fb      	b.n	800a1f6 <__ascii_mbtowc+0x16>
 800a1fe:	f06f 0001 	mvn.w	r0, #1
 800a202:	e7f8      	b.n	800a1f6 <__ascii_mbtowc+0x16>

0800a204 <memcpy>:
 800a204:	440a      	add	r2, r1
 800a206:	4291      	cmp	r1, r2
 800a208:	f100 33ff 	add.w	r3, r0, #4294967295
 800a20c:	d100      	bne.n	800a210 <memcpy+0xc>
 800a20e:	4770      	bx	lr
 800a210:	b510      	push	{r4, lr}
 800a212:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a216:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a21a:	4291      	cmp	r1, r2
 800a21c:	d1f9      	bne.n	800a212 <memcpy+0xe>
 800a21e:	bd10      	pop	{r4, pc}

0800a220 <_Balloc>:
 800a220:	b570      	push	{r4, r5, r6, lr}
 800a222:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a224:	4604      	mov	r4, r0
 800a226:	460d      	mov	r5, r1
 800a228:	b976      	cbnz	r6, 800a248 <_Balloc+0x28>
 800a22a:	2010      	movs	r0, #16
 800a22c:	f001 fd08 	bl	800bc40 <malloc>
 800a230:	4602      	mov	r2, r0
 800a232:	6260      	str	r0, [r4, #36]	; 0x24
 800a234:	b920      	cbnz	r0, 800a240 <_Balloc+0x20>
 800a236:	4b18      	ldr	r3, [pc, #96]	; (800a298 <_Balloc+0x78>)
 800a238:	4818      	ldr	r0, [pc, #96]	; (800a29c <_Balloc+0x7c>)
 800a23a:	2166      	movs	r1, #102	; 0x66
 800a23c:	f001 fcae 	bl	800bb9c <__assert_func>
 800a240:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a244:	6006      	str	r6, [r0, #0]
 800a246:	60c6      	str	r6, [r0, #12]
 800a248:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a24a:	68f3      	ldr	r3, [r6, #12]
 800a24c:	b183      	cbz	r3, 800a270 <_Balloc+0x50>
 800a24e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a250:	68db      	ldr	r3, [r3, #12]
 800a252:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a256:	b9b8      	cbnz	r0, 800a288 <_Balloc+0x68>
 800a258:	2101      	movs	r1, #1
 800a25a:	fa01 f605 	lsl.w	r6, r1, r5
 800a25e:	1d72      	adds	r2, r6, #5
 800a260:	0092      	lsls	r2, r2, #2
 800a262:	4620      	mov	r0, r4
 800a264:	f000 fc97 	bl	800ab96 <_calloc_r>
 800a268:	b160      	cbz	r0, 800a284 <_Balloc+0x64>
 800a26a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a26e:	e00e      	b.n	800a28e <_Balloc+0x6e>
 800a270:	2221      	movs	r2, #33	; 0x21
 800a272:	2104      	movs	r1, #4
 800a274:	4620      	mov	r0, r4
 800a276:	f000 fc8e 	bl	800ab96 <_calloc_r>
 800a27a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a27c:	60f0      	str	r0, [r6, #12]
 800a27e:	68db      	ldr	r3, [r3, #12]
 800a280:	2b00      	cmp	r3, #0
 800a282:	d1e4      	bne.n	800a24e <_Balloc+0x2e>
 800a284:	2000      	movs	r0, #0
 800a286:	bd70      	pop	{r4, r5, r6, pc}
 800a288:	6802      	ldr	r2, [r0, #0]
 800a28a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a28e:	2300      	movs	r3, #0
 800a290:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a294:	e7f7      	b.n	800a286 <_Balloc+0x66>
 800a296:	bf00      	nop
 800a298:	0800cd84 	.word	0x0800cd84
 800a29c:	0800cd9b 	.word	0x0800cd9b

0800a2a0 <_Bfree>:
 800a2a0:	b570      	push	{r4, r5, r6, lr}
 800a2a2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	460c      	mov	r4, r1
 800a2a8:	b976      	cbnz	r6, 800a2c8 <_Bfree+0x28>
 800a2aa:	2010      	movs	r0, #16
 800a2ac:	f001 fcc8 	bl	800bc40 <malloc>
 800a2b0:	4602      	mov	r2, r0
 800a2b2:	6268      	str	r0, [r5, #36]	; 0x24
 800a2b4:	b920      	cbnz	r0, 800a2c0 <_Bfree+0x20>
 800a2b6:	4b09      	ldr	r3, [pc, #36]	; (800a2dc <_Bfree+0x3c>)
 800a2b8:	4809      	ldr	r0, [pc, #36]	; (800a2e0 <_Bfree+0x40>)
 800a2ba:	218a      	movs	r1, #138	; 0x8a
 800a2bc:	f001 fc6e 	bl	800bb9c <__assert_func>
 800a2c0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a2c4:	6006      	str	r6, [r0, #0]
 800a2c6:	60c6      	str	r6, [r0, #12]
 800a2c8:	b13c      	cbz	r4, 800a2da <_Bfree+0x3a>
 800a2ca:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a2cc:	6862      	ldr	r2, [r4, #4]
 800a2ce:	68db      	ldr	r3, [r3, #12]
 800a2d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a2d4:	6021      	str	r1, [r4, #0]
 800a2d6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a2da:	bd70      	pop	{r4, r5, r6, pc}
 800a2dc:	0800cd84 	.word	0x0800cd84
 800a2e0:	0800cd9b 	.word	0x0800cd9b

0800a2e4 <__multadd>:
 800a2e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e8:	690e      	ldr	r6, [r1, #16]
 800a2ea:	4607      	mov	r7, r0
 800a2ec:	4698      	mov	r8, r3
 800a2ee:	460c      	mov	r4, r1
 800a2f0:	f101 0014 	add.w	r0, r1, #20
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	6805      	ldr	r5, [r0, #0]
 800a2f8:	b2a9      	uxth	r1, r5
 800a2fa:	fb02 8101 	mla	r1, r2, r1, r8
 800a2fe:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 800a302:	0c2d      	lsrs	r5, r5, #16
 800a304:	fb02 c505 	mla	r5, r2, r5, ip
 800a308:	b289      	uxth	r1, r1
 800a30a:	3301      	adds	r3, #1
 800a30c:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 800a310:	429e      	cmp	r6, r3
 800a312:	f840 1b04 	str.w	r1, [r0], #4
 800a316:	ea4f 4815 	mov.w	r8, r5, lsr #16
 800a31a:	dcec      	bgt.n	800a2f6 <__multadd+0x12>
 800a31c:	f1b8 0f00 	cmp.w	r8, #0
 800a320:	d022      	beq.n	800a368 <__multadd+0x84>
 800a322:	68a3      	ldr	r3, [r4, #8]
 800a324:	42b3      	cmp	r3, r6
 800a326:	dc19      	bgt.n	800a35c <__multadd+0x78>
 800a328:	6861      	ldr	r1, [r4, #4]
 800a32a:	4638      	mov	r0, r7
 800a32c:	3101      	adds	r1, #1
 800a32e:	f7ff ff77 	bl	800a220 <_Balloc>
 800a332:	4605      	mov	r5, r0
 800a334:	b928      	cbnz	r0, 800a342 <__multadd+0x5e>
 800a336:	4602      	mov	r2, r0
 800a338:	4b0d      	ldr	r3, [pc, #52]	; (800a370 <__multadd+0x8c>)
 800a33a:	480e      	ldr	r0, [pc, #56]	; (800a374 <__multadd+0x90>)
 800a33c:	21b5      	movs	r1, #181	; 0xb5
 800a33e:	f001 fc2d 	bl	800bb9c <__assert_func>
 800a342:	6922      	ldr	r2, [r4, #16]
 800a344:	3202      	adds	r2, #2
 800a346:	f104 010c 	add.w	r1, r4, #12
 800a34a:	0092      	lsls	r2, r2, #2
 800a34c:	300c      	adds	r0, #12
 800a34e:	f7ff ff59 	bl	800a204 <memcpy>
 800a352:	4621      	mov	r1, r4
 800a354:	4638      	mov	r0, r7
 800a356:	f7ff ffa3 	bl	800a2a0 <_Bfree>
 800a35a:	462c      	mov	r4, r5
 800a35c:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 800a360:	3601      	adds	r6, #1
 800a362:	f8c3 8014 	str.w	r8, [r3, #20]
 800a366:	6126      	str	r6, [r4, #16]
 800a368:	4620      	mov	r0, r4
 800a36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a36e:	bf00      	nop
 800a370:	0800ccf4 	.word	0x0800ccf4
 800a374:	0800cd9b 	.word	0x0800cd9b

0800a378 <__s2b>:
 800a378:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a37c:	460c      	mov	r4, r1
 800a37e:	4615      	mov	r5, r2
 800a380:	461f      	mov	r7, r3
 800a382:	2209      	movs	r2, #9
 800a384:	3308      	adds	r3, #8
 800a386:	4606      	mov	r6, r0
 800a388:	fb93 f3f2 	sdiv	r3, r3, r2
 800a38c:	2100      	movs	r1, #0
 800a38e:	2201      	movs	r2, #1
 800a390:	429a      	cmp	r2, r3
 800a392:	db09      	blt.n	800a3a8 <__s2b+0x30>
 800a394:	4630      	mov	r0, r6
 800a396:	f7ff ff43 	bl	800a220 <_Balloc>
 800a39a:	b940      	cbnz	r0, 800a3ae <__s2b+0x36>
 800a39c:	4602      	mov	r2, r0
 800a39e:	4b19      	ldr	r3, [pc, #100]	; (800a404 <__s2b+0x8c>)
 800a3a0:	4819      	ldr	r0, [pc, #100]	; (800a408 <__s2b+0x90>)
 800a3a2:	21ce      	movs	r1, #206	; 0xce
 800a3a4:	f001 fbfa 	bl	800bb9c <__assert_func>
 800a3a8:	0052      	lsls	r2, r2, #1
 800a3aa:	3101      	adds	r1, #1
 800a3ac:	e7f0      	b.n	800a390 <__s2b+0x18>
 800a3ae:	9b08      	ldr	r3, [sp, #32]
 800a3b0:	6143      	str	r3, [r0, #20]
 800a3b2:	2d09      	cmp	r5, #9
 800a3b4:	f04f 0301 	mov.w	r3, #1
 800a3b8:	6103      	str	r3, [r0, #16]
 800a3ba:	dd16      	ble.n	800a3ea <__s2b+0x72>
 800a3bc:	f104 0909 	add.w	r9, r4, #9
 800a3c0:	46c8      	mov	r8, r9
 800a3c2:	442c      	add	r4, r5
 800a3c4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a3c8:	4601      	mov	r1, r0
 800a3ca:	3b30      	subs	r3, #48	; 0x30
 800a3cc:	220a      	movs	r2, #10
 800a3ce:	4630      	mov	r0, r6
 800a3d0:	f7ff ff88 	bl	800a2e4 <__multadd>
 800a3d4:	45a0      	cmp	r8, r4
 800a3d6:	d1f5      	bne.n	800a3c4 <__s2b+0x4c>
 800a3d8:	f1a5 0408 	sub.w	r4, r5, #8
 800a3dc:	444c      	add	r4, r9
 800a3de:	1b2d      	subs	r5, r5, r4
 800a3e0:	1963      	adds	r3, r4, r5
 800a3e2:	42bb      	cmp	r3, r7
 800a3e4:	db04      	blt.n	800a3f0 <__s2b+0x78>
 800a3e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ea:	340a      	adds	r4, #10
 800a3ec:	2509      	movs	r5, #9
 800a3ee:	e7f6      	b.n	800a3de <__s2b+0x66>
 800a3f0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a3f4:	4601      	mov	r1, r0
 800a3f6:	3b30      	subs	r3, #48	; 0x30
 800a3f8:	220a      	movs	r2, #10
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f7ff ff72 	bl	800a2e4 <__multadd>
 800a400:	e7ee      	b.n	800a3e0 <__s2b+0x68>
 800a402:	bf00      	nop
 800a404:	0800ccf4 	.word	0x0800ccf4
 800a408:	0800cd9b 	.word	0x0800cd9b

0800a40c <__hi0bits>:
 800a40c:	0c03      	lsrs	r3, r0, #16
 800a40e:	041b      	lsls	r3, r3, #16
 800a410:	b9d3      	cbnz	r3, 800a448 <__hi0bits+0x3c>
 800a412:	0400      	lsls	r0, r0, #16
 800a414:	2310      	movs	r3, #16
 800a416:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a41a:	bf04      	itt	eq
 800a41c:	0200      	lsleq	r0, r0, #8
 800a41e:	3308      	addeq	r3, #8
 800a420:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a424:	bf04      	itt	eq
 800a426:	0100      	lsleq	r0, r0, #4
 800a428:	3304      	addeq	r3, #4
 800a42a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a42e:	bf04      	itt	eq
 800a430:	0080      	lsleq	r0, r0, #2
 800a432:	3302      	addeq	r3, #2
 800a434:	2800      	cmp	r0, #0
 800a436:	db05      	blt.n	800a444 <__hi0bits+0x38>
 800a438:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a43c:	f103 0301 	add.w	r3, r3, #1
 800a440:	bf08      	it	eq
 800a442:	2320      	moveq	r3, #32
 800a444:	4618      	mov	r0, r3
 800a446:	4770      	bx	lr
 800a448:	2300      	movs	r3, #0
 800a44a:	e7e4      	b.n	800a416 <__hi0bits+0xa>

0800a44c <__lo0bits>:
 800a44c:	6803      	ldr	r3, [r0, #0]
 800a44e:	f013 0207 	ands.w	r2, r3, #7
 800a452:	4601      	mov	r1, r0
 800a454:	d00b      	beq.n	800a46e <__lo0bits+0x22>
 800a456:	07da      	lsls	r2, r3, #31
 800a458:	d424      	bmi.n	800a4a4 <__lo0bits+0x58>
 800a45a:	0798      	lsls	r0, r3, #30
 800a45c:	bf49      	itett	mi
 800a45e:	085b      	lsrmi	r3, r3, #1
 800a460:	089b      	lsrpl	r3, r3, #2
 800a462:	2001      	movmi	r0, #1
 800a464:	600b      	strmi	r3, [r1, #0]
 800a466:	bf5c      	itt	pl
 800a468:	600b      	strpl	r3, [r1, #0]
 800a46a:	2002      	movpl	r0, #2
 800a46c:	4770      	bx	lr
 800a46e:	b298      	uxth	r0, r3
 800a470:	b9b0      	cbnz	r0, 800a4a0 <__lo0bits+0x54>
 800a472:	0c1b      	lsrs	r3, r3, #16
 800a474:	2010      	movs	r0, #16
 800a476:	f013 0fff 	tst.w	r3, #255	; 0xff
 800a47a:	bf04      	itt	eq
 800a47c:	0a1b      	lsreq	r3, r3, #8
 800a47e:	3008      	addeq	r0, #8
 800a480:	071a      	lsls	r2, r3, #28
 800a482:	bf04      	itt	eq
 800a484:	091b      	lsreq	r3, r3, #4
 800a486:	3004      	addeq	r0, #4
 800a488:	079a      	lsls	r2, r3, #30
 800a48a:	bf04      	itt	eq
 800a48c:	089b      	lsreq	r3, r3, #2
 800a48e:	3002      	addeq	r0, #2
 800a490:	07da      	lsls	r2, r3, #31
 800a492:	d403      	bmi.n	800a49c <__lo0bits+0x50>
 800a494:	085b      	lsrs	r3, r3, #1
 800a496:	f100 0001 	add.w	r0, r0, #1
 800a49a:	d005      	beq.n	800a4a8 <__lo0bits+0x5c>
 800a49c:	600b      	str	r3, [r1, #0]
 800a49e:	4770      	bx	lr
 800a4a0:	4610      	mov	r0, r2
 800a4a2:	e7e8      	b.n	800a476 <__lo0bits+0x2a>
 800a4a4:	2000      	movs	r0, #0
 800a4a6:	4770      	bx	lr
 800a4a8:	2020      	movs	r0, #32
 800a4aa:	4770      	bx	lr

0800a4ac <__i2b>:
 800a4ac:	b510      	push	{r4, lr}
 800a4ae:	460c      	mov	r4, r1
 800a4b0:	2101      	movs	r1, #1
 800a4b2:	f7ff feb5 	bl	800a220 <_Balloc>
 800a4b6:	4602      	mov	r2, r0
 800a4b8:	b928      	cbnz	r0, 800a4c6 <__i2b+0x1a>
 800a4ba:	4b05      	ldr	r3, [pc, #20]	; (800a4d0 <__i2b+0x24>)
 800a4bc:	4805      	ldr	r0, [pc, #20]	; (800a4d4 <__i2b+0x28>)
 800a4be:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a4c2:	f001 fb6b 	bl	800bb9c <__assert_func>
 800a4c6:	2301      	movs	r3, #1
 800a4c8:	6144      	str	r4, [r0, #20]
 800a4ca:	6103      	str	r3, [r0, #16]
 800a4cc:	bd10      	pop	{r4, pc}
 800a4ce:	bf00      	nop
 800a4d0:	0800ccf4 	.word	0x0800ccf4
 800a4d4:	0800cd9b 	.word	0x0800cd9b

0800a4d8 <__multiply>:
 800a4d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4dc:	4614      	mov	r4, r2
 800a4de:	690a      	ldr	r2, [r1, #16]
 800a4e0:	6923      	ldr	r3, [r4, #16]
 800a4e2:	429a      	cmp	r2, r3
 800a4e4:	bfb8      	it	lt
 800a4e6:	460b      	movlt	r3, r1
 800a4e8:	460d      	mov	r5, r1
 800a4ea:	bfbc      	itt	lt
 800a4ec:	4625      	movlt	r5, r4
 800a4ee:	461c      	movlt	r4, r3
 800a4f0:	f8d5 a010 	ldr.w	sl, [r5, #16]
 800a4f4:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800a4f8:	68ab      	ldr	r3, [r5, #8]
 800a4fa:	6869      	ldr	r1, [r5, #4]
 800a4fc:	eb0a 0709 	add.w	r7, sl, r9
 800a500:	42bb      	cmp	r3, r7
 800a502:	b085      	sub	sp, #20
 800a504:	bfb8      	it	lt
 800a506:	3101      	addlt	r1, #1
 800a508:	f7ff fe8a 	bl	800a220 <_Balloc>
 800a50c:	b930      	cbnz	r0, 800a51c <__multiply+0x44>
 800a50e:	4602      	mov	r2, r0
 800a510:	4b42      	ldr	r3, [pc, #264]	; (800a61c <__multiply+0x144>)
 800a512:	4843      	ldr	r0, [pc, #268]	; (800a620 <__multiply+0x148>)
 800a514:	f240 115d 	movw	r1, #349	; 0x15d
 800a518:	f001 fb40 	bl	800bb9c <__assert_func>
 800a51c:	f100 0614 	add.w	r6, r0, #20
 800a520:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 800a524:	4633      	mov	r3, r6
 800a526:	2200      	movs	r2, #0
 800a528:	4543      	cmp	r3, r8
 800a52a:	d31e      	bcc.n	800a56a <__multiply+0x92>
 800a52c:	f105 0c14 	add.w	ip, r5, #20
 800a530:	f104 0314 	add.w	r3, r4, #20
 800a534:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 800a538:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 800a53c:	9202      	str	r2, [sp, #8]
 800a53e:	ebac 0205 	sub.w	r2, ip, r5
 800a542:	3a15      	subs	r2, #21
 800a544:	f022 0203 	bic.w	r2, r2, #3
 800a548:	3204      	adds	r2, #4
 800a54a:	f105 0115 	add.w	r1, r5, #21
 800a54e:	458c      	cmp	ip, r1
 800a550:	bf38      	it	cc
 800a552:	2204      	movcc	r2, #4
 800a554:	9201      	str	r2, [sp, #4]
 800a556:	9a02      	ldr	r2, [sp, #8]
 800a558:	9303      	str	r3, [sp, #12]
 800a55a:	429a      	cmp	r2, r3
 800a55c:	d808      	bhi.n	800a570 <__multiply+0x98>
 800a55e:	2f00      	cmp	r7, #0
 800a560:	dc55      	bgt.n	800a60e <__multiply+0x136>
 800a562:	6107      	str	r7, [r0, #16]
 800a564:	b005      	add	sp, #20
 800a566:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a56a:	f843 2b04 	str.w	r2, [r3], #4
 800a56e:	e7db      	b.n	800a528 <__multiply+0x50>
 800a570:	f8b3 a000 	ldrh.w	sl, [r3]
 800a574:	f1ba 0f00 	cmp.w	sl, #0
 800a578:	d020      	beq.n	800a5bc <__multiply+0xe4>
 800a57a:	f105 0e14 	add.w	lr, r5, #20
 800a57e:	46b1      	mov	r9, r6
 800a580:	2200      	movs	r2, #0
 800a582:	f85e 4b04 	ldr.w	r4, [lr], #4
 800a586:	f8d9 b000 	ldr.w	fp, [r9]
 800a58a:	b2a1      	uxth	r1, r4
 800a58c:	fa1f fb8b 	uxth.w	fp, fp
 800a590:	fb0a b101 	mla	r1, sl, r1, fp
 800a594:	4411      	add	r1, r2
 800a596:	f8d9 2000 	ldr.w	r2, [r9]
 800a59a:	0c24      	lsrs	r4, r4, #16
 800a59c:	0c12      	lsrs	r2, r2, #16
 800a59e:	fb0a 2404 	mla	r4, sl, r4, r2
 800a5a2:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 800a5a6:	b289      	uxth	r1, r1
 800a5a8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800a5ac:	45f4      	cmp	ip, lr
 800a5ae:	f849 1b04 	str.w	r1, [r9], #4
 800a5b2:	ea4f 4214 	mov.w	r2, r4, lsr #16
 800a5b6:	d8e4      	bhi.n	800a582 <__multiply+0xaa>
 800a5b8:	9901      	ldr	r1, [sp, #4]
 800a5ba:	5072      	str	r2, [r6, r1]
 800a5bc:	9a03      	ldr	r2, [sp, #12]
 800a5be:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	f1b9 0f00 	cmp.w	r9, #0
 800a5c8:	d01f      	beq.n	800a60a <__multiply+0x132>
 800a5ca:	6834      	ldr	r4, [r6, #0]
 800a5cc:	f105 0114 	add.w	r1, r5, #20
 800a5d0:	46b6      	mov	lr, r6
 800a5d2:	f04f 0a00 	mov.w	sl, #0
 800a5d6:	880a      	ldrh	r2, [r1, #0]
 800a5d8:	f8be b002 	ldrh.w	fp, [lr, #2]
 800a5dc:	fb09 b202 	mla	r2, r9, r2, fp
 800a5e0:	4492      	add	sl, r2
 800a5e2:	b2a4      	uxth	r4, r4
 800a5e4:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 800a5e8:	f84e 4b04 	str.w	r4, [lr], #4
 800a5ec:	f851 4b04 	ldr.w	r4, [r1], #4
 800a5f0:	f8be 2000 	ldrh.w	r2, [lr]
 800a5f4:	0c24      	lsrs	r4, r4, #16
 800a5f6:	fb09 2404 	mla	r4, r9, r4, r2
 800a5fa:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800a5fe:	458c      	cmp	ip, r1
 800a600:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800a604:	d8e7      	bhi.n	800a5d6 <__multiply+0xfe>
 800a606:	9a01      	ldr	r2, [sp, #4]
 800a608:	50b4      	str	r4, [r6, r2]
 800a60a:	3604      	adds	r6, #4
 800a60c:	e7a3      	b.n	800a556 <__multiply+0x7e>
 800a60e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a612:	2b00      	cmp	r3, #0
 800a614:	d1a5      	bne.n	800a562 <__multiply+0x8a>
 800a616:	3f01      	subs	r7, #1
 800a618:	e7a1      	b.n	800a55e <__multiply+0x86>
 800a61a:	bf00      	nop
 800a61c:	0800ccf4 	.word	0x0800ccf4
 800a620:	0800cd9b 	.word	0x0800cd9b

0800a624 <__pow5mult>:
 800a624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a628:	4615      	mov	r5, r2
 800a62a:	f012 0203 	ands.w	r2, r2, #3
 800a62e:	4606      	mov	r6, r0
 800a630:	460f      	mov	r7, r1
 800a632:	d007      	beq.n	800a644 <__pow5mult+0x20>
 800a634:	4c25      	ldr	r4, [pc, #148]	; (800a6cc <__pow5mult+0xa8>)
 800a636:	3a01      	subs	r2, #1
 800a638:	2300      	movs	r3, #0
 800a63a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a63e:	f7ff fe51 	bl	800a2e4 <__multadd>
 800a642:	4607      	mov	r7, r0
 800a644:	10ad      	asrs	r5, r5, #2
 800a646:	d03d      	beq.n	800a6c4 <__pow5mult+0xa0>
 800a648:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800a64a:	b97c      	cbnz	r4, 800a66c <__pow5mult+0x48>
 800a64c:	2010      	movs	r0, #16
 800a64e:	f001 faf7 	bl	800bc40 <malloc>
 800a652:	4602      	mov	r2, r0
 800a654:	6270      	str	r0, [r6, #36]	; 0x24
 800a656:	b928      	cbnz	r0, 800a664 <__pow5mult+0x40>
 800a658:	4b1d      	ldr	r3, [pc, #116]	; (800a6d0 <__pow5mult+0xac>)
 800a65a:	481e      	ldr	r0, [pc, #120]	; (800a6d4 <__pow5mult+0xb0>)
 800a65c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800a660:	f001 fa9c 	bl	800bb9c <__assert_func>
 800a664:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a668:	6004      	str	r4, [r0, #0]
 800a66a:	60c4      	str	r4, [r0, #12]
 800a66c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800a670:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a674:	b94c      	cbnz	r4, 800a68a <__pow5mult+0x66>
 800a676:	f240 2171 	movw	r1, #625	; 0x271
 800a67a:	4630      	mov	r0, r6
 800a67c:	f7ff ff16 	bl	800a4ac <__i2b>
 800a680:	2300      	movs	r3, #0
 800a682:	f8c8 0008 	str.w	r0, [r8, #8]
 800a686:	4604      	mov	r4, r0
 800a688:	6003      	str	r3, [r0, #0]
 800a68a:	f04f 0900 	mov.w	r9, #0
 800a68e:	07eb      	lsls	r3, r5, #31
 800a690:	d50a      	bpl.n	800a6a8 <__pow5mult+0x84>
 800a692:	4639      	mov	r1, r7
 800a694:	4622      	mov	r2, r4
 800a696:	4630      	mov	r0, r6
 800a698:	f7ff ff1e 	bl	800a4d8 <__multiply>
 800a69c:	4639      	mov	r1, r7
 800a69e:	4680      	mov	r8, r0
 800a6a0:	4630      	mov	r0, r6
 800a6a2:	f7ff fdfd 	bl	800a2a0 <_Bfree>
 800a6a6:	4647      	mov	r7, r8
 800a6a8:	106d      	asrs	r5, r5, #1
 800a6aa:	d00b      	beq.n	800a6c4 <__pow5mult+0xa0>
 800a6ac:	6820      	ldr	r0, [r4, #0]
 800a6ae:	b938      	cbnz	r0, 800a6c0 <__pow5mult+0x9c>
 800a6b0:	4622      	mov	r2, r4
 800a6b2:	4621      	mov	r1, r4
 800a6b4:	4630      	mov	r0, r6
 800a6b6:	f7ff ff0f 	bl	800a4d8 <__multiply>
 800a6ba:	6020      	str	r0, [r4, #0]
 800a6bc:	f8c0 9000 	str.w	r9, [r0]
 800a6c0:	4604      	mov	r4, r0
 800a6c2:	e7e4      	b.n	800a68e <__pow5mult+0x6a>
 800a6c4:	4638      	mov	r0, r7
 800a6c6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a6ca:	bf00      	nop
 800a6cc:	0800cef0 	.word	0x0800cef0
 800a6d0:	0800cd84 	.word	0x0800cd84
 800a6d4:	0800cd9b 	.word	0x0800cd9b

0800a6d8 <__lshift>:
 800a6d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6dc:	460c      	mov	r4, r1
 800a6de:	6849      	ldr	r1, [r1, #4]
 800a6e0:	6923      	ldr	r3, [r4, #16]
 800a6e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a6e6:	68a3      	ldr	r3, [r4, #8]
 800a6e8:	4607      	mov	r7, r0
 800a6ea:	4691      	mov	r9, r2
 800a6ec:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a6f0:	f108 0601 	add.w	r6, r8, #1
 800a6f4:	42b3      	cmp	r3, r6
 800a6f6:	db0b      	blt.n	800a710 <__lshift+0x38>
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f7ff fd91 	bl	800a220 <_Balloc>
 800a6fe:	4605      	mov	r5, r0
 800a700:	b948      	cbnz	r0, 800a716 <__lshift+0x3e>
 800a702:	4602      	mov	r2, r0
 800a704:	4b28      	ldr	r3, [pc, #160]	; (800a7a8 <__lshift+0xd0>)
 800a706:	4829      	ldr	r0, [pc, #164]	; (800a7ac <__lshift+0xd4>)
 800a708:	f240 11d9 	movw	r1, #473	; 0x1d9
 800a70c:	f001 fa46 	bl	800bb9c <__assert_func>
 800a710:	3101      	adds	r1, #1
 800a712:	005b      	lsls	r3, r3, #1
 800a714:	e7ee      	b.n	800a6f4 <__lshift+0x1c>
 800a716:	2300      	movs	r3, #0
 800a718:	f100 0114 	add.w	r1, r0, #20
 800a71c:	f100 0210 	add.w	r2, r0, #16
 800a720:	4618      	mov	r0, r3
 800a722:	4553      	cmp	r3, sl
 800a724:	db33      	blt.n	800a78e <__lshift+0xb6>
 800a726:	6920      	ldr	r0, [r4, #16]
 800a728:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a72c:	f104 0314 	add.w	r3, r4, #20
 800a730:	f019 091f 	ands.w	r9, r9, #31
 800a734:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a738:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a73c:	d02b      	beq.n	800a796 <__lshift+0xbe>
 800a73e:	f1c9 0e20 	rsb	lr, r9, #32
 800a742:	468a      	mov	sl, r1
 800a744:	2200      	movs	r2, #0
 800a746:	6818      	ldr	r0, [r3, #0]
 800a748:	fa00 f009 	lsl.w	r0, r0, r9
 800a74c:	4302      	orrs	r2, r0
 800a74e:	f84a 2b04 	str.w	r2, [sl], #4
 800a752:	f853 2b04 	ldr.w	r2, [r3], #4
 800a756:	459c      	cmp	ip, r3
 800a758:	fa22 f20e 	lsr.w	r2, r2, lr
 800a75c:	d8f3      	bhi.n	800a746 <__lshift+0x6e>
 800a75e:	ebac 0304 	sub.w	r3, ip, r4
 800a762:	3b15      	subs	r3, #21
 800a764:	f023 0303 	bic.w	r3, r3, #3
 800a768:	3304      	adds	r3, #4
 800a76a:	f104 0015 	add.w	r0, r4, #21
 800a76e:	4584      	cmp	ip, r0
 800a770:	bf38      	it	cc
 800a772:	2304      	movcc	r3, #4
 800a774:	50ca      	str	r2, [r1, r3]
 800a776:	b10a      	cbz	r2, 800a77c <__lshift+0xa4>
 800a778:	f108 0602 	add.w	r6, r8, #2
 800a77c:	3e01      	subs	r6, #1
 800a77e:	4638      	mov	r0, r7
 800a780:	612e      	str	r6, [r5, #16]
 800a782:	4621      	mov	r1, r4
 800a784:	f7ff fd8c 	bl	800a2a0 <_Bfree>
 800a788:	4628      	mov	r0, r5
 800a78a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a78e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a792:	3301      	adds	r3, #1
 800a794:	e7c5      	b.n	800a722 <__lshift+0x4a>
 800a796:	3904      	subs	r1, #4
 800a798:	f853 2b04 	ldr.w	r2, [r3], #4
 800a79c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a7a0:	459c      	cmp	ip, r3
 800a7a2:	d8f9      	bhi.n	800a798 <__lshift+0xc0>
 800a7a4:	e7ea      	b.n	800a77c <__lshift+0xa4>
 800a7a6:	bf00      	nop
 800a7a8:	0800ccf4 	.word	0x0800ccf4
 800a7ac:	0800cd9b 	.word	0x0800cd9b

0800a7b0 <__mcmp>:
 800a7b0:	b530      	push	{r4, r5, lr}
 800a7b2:	6902      	ldr	r2, [r0, #16]
 800a7b4:	690c      	ldr	r4, [r1, #16]
 800a7b6:	1b12      	subs	r2, r2, r4
 800a7b8:	d10e      	bne.n	800a7d8 <__mcmp+0x28>
 800a7ba:	f100 0314 	add.w	r3, r0, #20
 800a7be:	3114      	adds	r1, #20
 800a7c0:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a7c4:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a7c8:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a7cc:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a7d0:	42a5      	cmp	r5, r4
 800a7d2:	d003      	beq.n	800a7dc <__mcmp+0x2c>
 800a7d4:	d305      	bcc.n	800a7e2 <__mcmp+0x32>
 800a7d6:	2201      	movs	r2, #1
 800a7d8:	4610      	mov	r0, r2
 800a7da:	bd30      	pop	{r4, r5, pc}
 800a7dc:	4283      	cmp	r3, r0
 800a7de:	d3f3      	bcc.n	800a7c8 <__mcmp+0x18>
 800a7e0:	e7fa      	b.n	800a7d8 <__mcmp+0x28>
 800a7e2:	f04f 32ff 	mov.w	r2, #4294967295
 800a7e6:	e7f7      	b.n	800a7d8 <__mcmp+0x28>

0800a7e8 <__mdiff>:
 800a7e8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ec:	460c      	mov	r4, r1
 800a7ee:	4606      	mov	r6, r0
 800a7f0:	4611      	mov	r1, r2
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	4617      	mov	r7, r2
 800a7f6:	f7ff ffdb 	bl	800a7b0 <__mcmp>
 800a7fa:	1e05      	subs	r5, r0, #0
 800a7fc:	d110      	bne.n	800a820 <__mdiff+0x38>
 800a7fe:	4629      	mov	r1, r5
 800a800:	4630      	mov	r0, r6
 800a802:	f7ff fd0d 	bl	800a220 <_Balloc>
 800a806:	b930      	cbnz	r0, 800a816 <__mdiff+0x2e>
 800a808:	4b39      	ldr	r3, [pc, #228]	; (800a8f0 <__mdiff+0x108>)
 800a80a:	4602      	mov	r2, r0
 800a80c:	f240 2132 	movw	r1, #562	; 0x232
 800a810:	4838      	ldr	r0, [pc, #224]	; (800a8f4 <__mdiff+0x10c>)
 800a812:	f001 f9c3 	bl	800bb9c <__assert_func>
 800a816:	2301      	movs	r3, #1
 800a818:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a81c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a820:	bfa4      	itt	ge
 800a822:	463b      	movge	r3, r7
 800a824:	4627      	movge	r7, r4
 800a826:	4630      	mov	r0, r6
 800a828:	6879      	ldr	r1, [r7, #4]
 800a82a:	bfa6      	itte	ge
 800a82c:	461c      	movge	r4, r3
 800a82e:	2500      	movge	r5, #0
 800a830:	2501      	movlt	r5, #1
 800a832:	f7ff fcf5 	bl	800a220 <_Balloc>
 800a836:	b920      	cbnz	r0, 800a842 <__mdiff+0x5a>
 800a838:	4b2d      	ldr	r3, [pc, #180]	; (800a8f0 <__mdiff+0x108>)
 800a83a:	4602      	mov	r2, r0
 800a83c:	f44f 7110 	mov.w	r1, #576	; 0x240
 800a840:	e7e6      	b.n	800a810 <__mdiff+0x28>
 800a842:	693e      	ldr	r6, [r7, #16]
 800a844:	60c5      	str	r5, [r0, #12]
 800a846:	6925      	ldr	r5, [r4, #16]
 800a848:	f107 0114 	add.w	r1, r7, #20
 800a84c:	f104 0914 	add.w	r9, r4, #20
 800a850:	f100 0e14 	add.w	lr, r0, #20
 800a854:	f107 0210 	add.w	r2, r7, #16
 800a858:	eb01 0c86 	add.w	ip, r1, r6, lsl #2
 800a85c:	eb09 0585 	add.w	r5, r9, r5, lsl #2
 800a860:	46f2      	mov	sl, lr
 800a862:	2700      	movs	r7, #0
 800a864:	f859 3b04 	ldr.w	r3, [r9], #4
 800a868:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a86c:	fa1f f883 	uxth.w	r8, r3
 800a870:	fa17 f78b 	uxtah	r7, r7, fp
 800a874:	0c1b      	lsrs	r3, r3, #16
 800a876:	eba7 0808 	sub.w	r8, r7, r8
 800a87a:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a87e:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a882:	fa1f f888 	uxth.w	r8, r8
 800a886:	141f      	asrs	r7, r3, #16
 800a888:	454d      	cmp	r5, r9
 800a88a:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a88e:	f84a 3b04 	str.w	r3, [sl], #4
 800a892:	d8e7      	bhi.n	800a864 <__mdiff+0x7c>
 800a894:	1b2b      	subs	r3, r5, r4
 800a896:	3b15      	subs	r3, #21
 800a898:	f023 0303 	bic.w	r3, r3, #3
 800a89c:	3304      	adds	r3, #4
 800a89e:	3415      	adds	r4, #21
 800a8a0:	42a5      	cmp	r5, r4
 800a8a2:	bf38      	it	cc
 800a8a4:	2304      	movcc	r3, #4
 800a8a6:	4419      	add	r1, r3
 800a8a8:	4473      	add	r3, lr
 800a8aa:	469e      	mov	lr, r3
 800a8ac:	460d      	mov	r5, r1
 800a8ae:	4565      	cmp	r5, ip
 800a8b0:	d30e      	bcc.n	800a8d0 <__mdiff+0xe8>
 800a8b2:	f10c 0203 	add.w	r2, ip, #3
 800a8b6:	1a52      	subs	r2, r2, r1
 800a8b8:	f022 0203 	bic.w	r2, r2, #3
 800a8bc:	3903      	subs	r1, #3
 800a8be:	458c      	cmp	ip, r1
 800a8c0:	bf38      	it	cc
 800a8c2:	2200      	movcc	r2, #0
 800a8c4:	441a      	add	r2, r3
 800a8c6:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800a8ca:	b17b      	cbz	r3, 800a8ec <__mdiff+0x104>
 800a8cc:	6106      	str	r6, [r0, #16]
 800a8ce:	e7a5      	b.n	800a81c <__mdiff+0x34>
 800a8d0:	f855 8b04 	ldr.w	r8, [r5], #4
 800a8d4:	fa17 f488 	uxtah	r4, r7, r8
 800a8d8:	1422      	asrs	r2, r4, #16
 800a8da:	eb02 4218 	add.w	r2, r2, r8, lsr #16
 800a8de:	b2a4      	uxth	r4, r4
 800a8e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800a8e4:	f84e 4b04 	str.w	r4, [lr], #4
 800a8e8:	1417      	asrs	r7, r2, #16
 800a8ea:	e7e0      	b.n	800a8ae <__mdiff+0xc6>
 800a8ec:	3e01      	subs	r6, #1
 800a8ee:	e7ea      	b.n	800a8c6 <__mdiff+0xde>
 800a8f0:	0800ccf4 	.word	0x0800ccf4
 800a8f4:	0800cd9b 	.word	0x0800cd9b

0800a8f8 <__ulp>:
 800a8f8:	b082      	sub	sp, #8
 800a8fa:	ed8d 0b00 	vstr	d0, [sp]
 800a8fe:	9b01      	ldr	r3, [sp, #4]
 800a900:	4912      	ldr	r1, [pc, #72]	; (800a94c <__ulp+0x54>)
 800a902:	4019      	ands	r1, r3
 800a904:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800a908:	2900      	cmp	r1, #0
 800a90a:	dd05      	ble.n	800a918 <__ulp+0x20>
 800a90c:	2200      	movs	r2, #0
 800a90e:	460b      	mov	r3, r1
 800a910:	ec43 2b10 	vmov	d0, r2, r3
 800a914:	b002      	add	sp, #8
 800a916:	4770      	bx	lr
 800a918:	4249      	negs	r1, r1
 800a91a:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800a91e:	ea4f 5021 	mov.w	r0, r1, asr #20
 800a922:	f04f 0200 	mov.w	r2, #0
 800a926:	f04f 0300 	mov.w	r3, #0
 800a92a:	da04      	bge.n	800a936 <__ulp+0x3e>
 800a92c:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800a930:	fa41 f300 	asr.w	r3, r1, r0
 800a934:	e7ec      	b.n	800a910 <__ulp+0x18>
 800a936:	f1a0 0114 	sub.w	r1, r0, #20
 800a93a:	291e      	cmp	r1, #30
 800a93c:	bfda      	itte	le
 800a93e:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800a942:	fa20 f101 	lsrle.w	r1, r0, r1
 800a946:	2101      	movgt	r1, #1
 800a948:	460a      	mov	r2, r1
 800a94a:	e7e1      	b.n	800a910 <__ulp+0x18>
 800a94c:	7ff00000 	.word	0x7ff00000

0800a950 <__b2d>:
 800a950:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a952:	6905      	ldr	r5, [r0, #16]
 800a954:	f100 0714 	add.w	r7, r0, #20
 800a958:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800a95c:	1f2e      	subs	r6, r5, #4
 800a95e:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800a962:	4620      	mov	r0, r4
 800a964:	f7ff fd52 	bl	800a40c <__hi0bits>
 800a968:	f1c0 0320 	rsb	r3, r0, #32
 800a96c:	280a      	cmp	r0, #10
 800a96e:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800a9ec <__b2d+0x9c>
 800a972:	600b      	str	r3, [r1, #0]
 800a974:	dc14      	bgt.n	800a9a0 <__b2d+0x50>
 800a976:	f1c0 0e0b 	rsb	lr, r0, #11
 800a97a:	fa24 f10e 	lsr.w	r1, r4, lr
 800a97e:	42b7      	cmp	r7, r6
 800a980:	ea41 030c 	orr.w	r3, r1, ip
 800a984:	bf34      	ite	cc
 800a986:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a98a:	2100      	movcs	r1, #0
 800a98c:	3015      	adds	r0, #21
 800a98e:	fa04 f000 	lsl.w	r0, r4, r0
 800a992:	fa21 f10e 	lsr.w	r1, r1, lr
 800a996:	ea40 0201 	orr.w	r2, r0, r1
 800a99a:	ec43 2b10 	vmov	d0, r2, r3
 800a99e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a9a0:	42b7      	cmp	r7, r6
 800a9a2:	bf3a      	itte	cc
 800a9a4:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800a9a8:	f1a5 0608 	subcc.w	r6, r5, #8
 800a9ac:	2100      	movcs	r1, #0
 800a9ae:	380b      	subs	r0, #11
 800a9b0:	d017      	beq.n	800a9e2 <__b2d+0x92>
 800a9b2:	f1c0 0c20 	rsb	ip, r0, #32
 800a9b6:	fa04 f500 	lsl.w	r5, r4, r0
 800a9ba:	42be      	cmp	r6, r7
 800a9bc:	fa21 f40c 	lsr.w	r4, r1, ip
 800a9c0:	ea45 0504 	orr.w	r5, r5, r4
 800a9c4:	bf8c      	ite	hi
 800a9c6:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800a9ca:	2400      	movls	r4, #0
 800a9cc:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800a9d0:	fa01 f000 	lsl.w	r0, r1, r0
 800a9d4:	fa24 f40c 	lsr.w	r4, r4, ip
 800a9d8:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a9dc:	ea40 0204 	orr.w	r2, r0, r4
 800a9e0:	e7db      	b.n	800a99a <__b2d+0x4a>
 800a9e2:	ea44 030c 	orr.w	r3, r4, ip
 800a9e6:	460a      	mov	r2, r1
 800a9e8:	e7d7      	b.n	800a99a <__b2d+0x4a>
 800a9ea:	bf00      	nop
 800a9ec:	3ff00000 	.word	0x3ff00000

0800a9f0 <__d2b>:
 800a9f0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9f4:	4689      	mov	r9, r1
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	ec57 6b10 	vmov	r6, r7, d0
 800a9fc:	4690      	mov	r8, r2
 800a9fe:	f7ff fc0f 	bl	800a220 <_Balloc>
 800aa02:	4604      	mov	r4, r0
 800aa04:	b930      	cbnz	r0, 800aa14 <__d2b+0x24>
 800aa06:	4602      	mov	r2, r0
 800aa08:	4b25      	ldr	r3, [pc, #148]	; (800aaa0 <__d2b+0xb0>)
 800aa0a:	4826      	ldr	r0, [pc, #152]	; (800aaa4 <__d2b+0xb4>)
 800aa0c:	f240 310a 	movw	r1, #778	; 0x30a
 800aa10:	f001 f8c4 	bl	800bb9c <__assert_func>
 800aa14:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800aa18:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800aa1c:	bb35      	cbnz	r5, 800aa6c <__d2b+0x7c>
 800aa1e:	2e00      	cmp	r6, #0
 800aa20:	9301      	str	r3, [sp, #4]
 800aa22:	d028      	beq.n	800aa76 <__d2b+0x86>
 800aa24:	4668      	mov	r0, sp
 800aa26:	9600      	str	r6, [sp, #0]
 800aa28:	f7ff fd10 	bl	800a44c <__lo0bits>
 800aa2c:	9900      	ldr	r1, [sp, #0]
 800aa2e:	b300      	cbz	r0, 800aa72 <__d2b+0x82>
 800aa30:	9a01      	ldr	r2, [sp, #4]
 800aa32:	f1c0 0320 	rsb	r3, r0, #32
 800aa36:	fa02 f303 	lsl.w	r3, r2, r3
 800aa3a:	430b      	orrs	r3, r1
 800aa3c:	40c2      	lsrs	r2, r0
 800aa3e:	6163      	str	r3, [r4, #20]
 800aa40:	9201      	str	r2, [sp, #4]
 800aa42:	9b01      	ldr	r3, [sp, #4]
 800aa44:	61a3      	str	r3, [r4, #24]
 800aa46:	2b00      	cmp	r3, #0
 800aa48:	bf14      	ite	ne
 800aa4a:	2202      	movne	r2, #2
 800aa4c:	2201      	moveq	r2, #1
 800aa4e:	6122      	str	r2, [r4, #16]
 800aa50:	b1d5      	cbz	r5, 800aa88 <__d2b+0x98>
 800aa52:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800aa56:	4405      	add	r5, r0
 800aa58:	f8c9 5000 	str.w	r5, [r9]
 800aa5c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800aa60:	f8c8 0000 	str.w	r0, [r8]
 800aa64:	4620      	mov	r0, r4
 800aa66:	b003      	add	sp, #12
 800aa68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa6c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aa70:	e7d5      	b.n	800aa1e <__d2b+0x2e>
 800aa72:	6161      	str	r1, [r4, #20]
 800aa74:	e7e5      	b.n	800aa42 <__d2b+0x52>
 800aa76:	a801      	add	r0, sp, #4
 800aa78:	f7ff fce8 	bl	800a44c <__lo0bits>
 800aa7c:	9b01      	ldr	r3, [sp, #4]
 800aa7e:	6163      	str	r3, [r4, #20]
 800aa80:	2201      	movs	r2, #1
 800aa82:	6122      	str	r2, [r4, #16]
 800aa84:	3020      	adds	r0, #32
 800aa86:	e7e3      	b.n	800aa50 <__d2b+0x60>
 800aa88:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa8c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aa90:	f8c9 0000 	str.w	r0, [r9]
 800aa94:	6918      	ldr	r0, [r3, #16]
 800aa96:	f7ff fcb9 	bl	800a40c <__hi0bits>
 800aa9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa9e:	e7df      	b.n	800aa60 <__d2b+0x70>
 800aaa0:	0800ccf4 	.word	0x0800ccf4
 800aaa4:	0800cd9b 	.word	0x0800cd9b

0800aaa8 <__ratio>:
 800aaa8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aaac:	4688      	mov	r8, r1
 800aaae:	4669      	mov	r1, sp
 800aab0:	4681      	mov	r9, r0
 800aab2:	f7ff ff4d 	bl	800a950 <__b2d>
 800aab6:	a901      	add	r1, sp, #4
 800aab8:	4640      	mov	r0, r8
 800aaba:	ec55 4b10 	vmov	r4, r5, d0
 800aabe:	f7ff ff47 	bl	800a950 <__b2d>
 800aac2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800aac6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800aaca:	eba3 0c02 	sub.w	ip, r3, r2
 800aace:	e9dd 3200 	ldrd	r3, r2, [sp]
 800aad2:	1a9b      	subs	r3, r3, r2
 800aad4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800aad8:	ec51 0b10 	vmov	r0, r1, d0
 800aadc:	2b00      	cmp	r3, #0
 800aade:	bfd6      	itet	le
 800aae0:	460a      	movle	r2, r1
 800aae2:	462a      	movgt	r2, r5
 800aae4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800aae8:	468b      	mov	fp, r1
 800aaea:	462f      	mov	r7, r5
 800aaec:	bfd4      	ite	le
 800aaee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800aaf2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800aaf6:	4620      	mov	r0, r4
 800aaf8:	ee10 2a10 	vmov	r2, s0
 800aafc:	465b      	mov	r3, fp
 800aafe:	4639      	mov	r1, r7
 800ab00:	f7f5 fea4 	bl	800084c <__aeabi_ddiv>
 800ab04:	ec41 0b10 	vmov	d0, r0, r1
 800ab08:	b003      	add	sp, #12
 800ab0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ab0e <__copybits>:
 800ab0e:	3901      	subs	r1, #1
 800ab10:	b570      	push	{r4, r5, r6, lr}
 800ab12:	1149      	asrs	r1, r1, #5
 800ab14:	6914      	ldr	r4, [r2, #16]
 800ab16:	3101      	adds	r1, #1
 800ab18:	f102 0314 	add.w	r3, r2, #20
 800ab1c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800ab20:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800ab24:	1f05      	subs	r5, r0, #4
 800ab26:	42a3      	cmp	r3, r4
 800ab28:	d30c      	bcc.n	800ab44 <__copybits+0x36>
 800ab2a:	1aa3      	subs	r3, r4, r2
 800ab2c:	3b11      	subs	r3, #17
 800ab2e:	f023 0303 	bic.w	r3, r3, #3
 800ab32:	3211      	adds	r2, #17
 800ab34:	42a2      	cmp	r2, r4
 800ab36:	bf88      	it	hi
 800ab38:	2300      	movhi	r3, #0
 800ab3a:	4418      	add	r0, r3
 800ab3c:	2300      	movs	r3, #0
 800ab3e:	4288      	cmp	r0, r1
 800ab40:	d305      	bcc.n	800ab4e <__copybits+0x40>
 800ab42:	bd70      	pop	{r4, r5, r6, pc}
 800ab44:	f853 6b04 	ldr.w	r6, [r3], #4
 800ab48:	f845 6f04 	str.w	r6, [r5, #4]!
 800ab4c:	e7eb      	b.n	800ab26 <__copybits+0x18>
 800ab4e:	f840 3b04 	str.w	r3, [r0], #4
 800ab52:	e7f4      	b.n	800ab3e <__copybits+0x30>

0800ab54 <__any_on>:
 800ab54:	f100 0214 	add.w	r2, r0, #20
 800ab58:	6900      	ldr	r0, [r0, #16]
 800ab5a:	114b      	asrs	r3, r1, #5
 800ab5c:	4298      	cmp	r0, r3
 800ab5e:	b510      	push	{r4, lr}
 800ab60:	db11      	blt.n	800ab86 <__any_on+0x32>
 800ab62:	dd0a      	ble.n	800ab7a <__any_on+0x26>
 800ab64:	f011 011f 	ands.w	r1, r1, #31
 800ab68:	d007      	beq.n	800ab7a <__any_on+0x26>
 800ab6a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ab6e:	fa24 f001 	lsr.w	r0, r4, r1
 800ab72:	fa00 f101 	lsl.w	r1, r0, r1
 800ab76:	428c      	cmp	r4, r1
 800ab78:	d10b      	bne.n	800ab92 <__any_on+0x3e>
 800ab7a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d803      	bhi.n	800ab8a <__any_on+0x36>
 800ab82:	2000      	movs	r0, #0
 800ab84:	bd10      	pop	{r4, pc}
 800ab86:	4603      	mov	r3, r0
 800ab88:	e7f7      	b.n	800ab7a <__any_on+0x26>
 800ab8a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ab8e:	2900      	cmp	r1, #0
 800ab90:	d0f5      	beq.n	800ab7e <__any_on+0x2a>
 800ab92:	2001      	movs	r0, #1
 800ab94:	e7f6      	b.n	800ab84 <__any_on+0x30>

0800ab96 <_calloc_r>:
 800ab96:	b513      	push	{r0, r1, r4, lr}
 800ab98:	434a      	muls	r2, r1
 800ab9a:	4611      	mov	r1, r2
 800ab9c:	9201      	str	r2, [sp, #4]
 800ab9e:	f000 f859 	bl	800ac54 <_malloc_r>
 800aba2:	4604      	mov	r4, r0
 800aba4:	b118      	cbz	r0, 800abae <_calloc_r+0x18>
 800aba6:	9a01      	ldr	r2, [sp, #4]
 800aba8:	2100      	movs	r1, #0
 800abaa:	f7fd fabf 	bl	800812c <memset>
 800abae:	4620      	mov	r0, r4
 800abb0:	b002      	add	sp, #8
 800abb2:	bd10      	pop	{r4, pc}

0800abb4 <_free_r>:
 800abb4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800abb6:	2900      	cmp	r1, #0
 800abb8:	d048      	beq.n	800ac4c <_free_r+0x98>
 800abba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abbe:	9001      	str	r0, [sp, #4]
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	f1a1 0404 	sub.w	r4, r1, #4
 800abc6:	bfb8      	it	lt
 800abc8:	18e4      	addlt	r4, r4, r3
 800abca:	f001 f85b 	bl	800bc84 <__malloc_lock>
 800abce:	4a20      	ldr	r2, [pc, #128]	; (800ac50 <_free_r+0x9c>)
 800abd0:	9801      	ldr	r0, [sp, #4]
 800abd2:	6813      	ldr	r3, [r2, #0]
 800abd4:	4615      	mov	r5, r2
 800abd6:	b933      	cbnz	r3, 800abe6 <_free_r+0x32>
 800abd8:	6063      	str	r3, [r4, #4]
 800abda:	6014      	str	r4, [r2, #0]
 800abdc:	b003      	add	sp, #12
 800abde:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800abe2:	f001 b855 	b.w	800bc90 <__malloc_unlock>
 800abe6:	42a3      	cmp	r3, r4
 800abe8:	d90b      	bls.n	800ac02 <_free_r+0x4e>
 800abea:	6821      	ldr	r1, [r4, #0]
 800abec:	1862      	adds	r2, r4, r1
 800abee:	4293      	cmp	r3, r2
 800abf0:	bf04      	itt	eq
 800abf2:	681a      	ldreq	r2, [r3, #0]
 800abf4:	685b      	ldreq	r3, [r3, #4]
 800abf6:	6063      	str	r3, [r4, #4]
 800abf8:	bf04      	itt	eq
 800abfa:	1852      	addeq	r2, r2, r1
 800abfc:	6022      	streq	r2, [r4, #0]
 800abfe:	602c      	str	r4, [r5, #0]
 800ac00:	e7ec      	b.n	800abdc <_free_r+0x28>
 800ac02:	461a      	mov	r2, r3
 800ac04:	685b      	ldr	r3, [r3, #4]
 800ac06:	b10b      	cbz	r3, 800ac0c <_free_r+0x58>
 800ac08:	42a3      	cmp	r3, r4
 800ac0a:	d9fa      	bls.n	800ac02 <_free_r+0x4e>
 800ac0c:	6811      	ldr	r1, [r2, #0]
 800ac0e:	1855      	adds	r5, r2, r1
 800ac10:	42a5      	cmp	r5, r4
 800ac12:	d10b      	bne.n	800ac2c <_free_r+0x78>
 800ac14:	6824      	ldr	r4, [r4, #0]
 800ac16:	4421      	add	r1, r4
 800ac18:	1854      	adds	r4, r2, r1
 800ac1a:	42a3      	cmp	r3, r4
 800ac1c:	6011      	str	r1, [r2, #0]
 800ac1e:	d1dd      	bne.n	800abdc <_free_r+0x28>
 800ac20:	681c      	ldr	r4, [r3, #0]
 800ac22:	685b      	ldr	r3, [r3, #4]
 800ac24:	6053      	str	r3, [r2, #4]
 800ac26:	4421      	add	r1, r4
 800ac28:	6011      	str	r1, [r2, #0]
 800ac2a:	e7d7      	b.n	800abdc <_free_r+0x28>
 800ac2c:	d902      	bls.n	800ac34 <_free_r+0x80>
 800ac2e:	230c      	movs	r3, #12
 800ac30:	6003      	str	r3, [r0, #0]
 800ac32:	e7d3      	b.n	800abdc <_free_r+0x28>
 800ac34:	6825      	ldr	r5, [r4, #0]
 800ac36:	1961      	adds	r1, r4, r5
 800ac38:	428b      	cmp	r3, r1
 800ac3a:	bf04      	itt	eq
 800ac3c:	6819      	ldreq	r1, [r3, #0]
 800ac3e:	685b      	ldreq	r3, [r3, #4]
 800ac40:	6063      	str	r3, [r4, #4]
 800ac42:	bf04      	itt	eq
 800ac44:	1949      	addeq	r1, r1, r5
 800ac46:	6021      	streq	r1, [r4, #0]
 800ac48:	6054      	str	r4, [r2, #4]
 800ac4a:	e7c7      	b.n	800abdc <_free_r+0x28>
 800ac4c:	b003      	add	sp, #12
 800ac4e:	bd30      	pop	{r4, r5, pc}
 800ac50:	2000047c 	.word	0x2000047c

0800ac54 <_malloc_r>:
 800ac54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac56:	1ccd      	adds	r5, r1, #3
 800ac58:	f025 0503 	bic.w	r5, r5, #3
 800ac5c:	3508      	adds	r5, #8
 800ac5e:	2d0c      	cmp	r5, #12
 800ac60:	bf38      	it	cc
 800ac62:	250c      	movcc	r5, #12
 800ac64:	2d00      	cmp	r5, #0
 800ac66:	4606      	mov	r6, r0
 800ac68:	db01      	blt.n	800ac6e <_malloc_r+0x1a>
 800ac6a:	42a9      	cmp	r1, r5
 800ac6c:	d903      	bls.n	800ac76 <_malloc_r+0x22>
 800ac6e:	230c      	movs	r3, #12
 800ac70:	6033      	str	r3, [r6, #0]
 800ac72:	2000      	movs	r0, #0
 800ac74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ac76:	f001 f805 	bl	800bc84 <__malloc_lock>
 800ac7a:	4921      	ldr	r1, [pc, #132]	; (800ad00 <_malloc_r+0xac>)
 800ac7c:	680a      	ldr	r2, [r1, #0]
 800ac7e:	4614      	mov	r4, r2
 800ac80:	b99c      	cbnz	r4, 800acaa <_malloc_r+0x56>
 800ac82:	4f20      	ldr	r7, [pc, #128]	; (800ad04 <_malloc_r+0xb0>)
 800ac84:	683b      	ldr	r3, [r7, #0]
 800ac86:	b923      	cbnz	r3, 800ac92 <_malloc_r+0x3e>
 800ac88:	4621      	mov	r1, r4
 800ac8a:	4630      	mov	r0, r6
 800ac8c:	f000 fe64 	bl	800b958 <_sbrk_r>
 800ac90:	6038      	str	r0, [r7, #0]
 800ac92:	4629      	mov	r1, r5
 800ac94:	4630      	mov	r0, r6
 800ac96:	f000 fe5f 	bl	800b958 <_sbrk_r>
 800ac9a:	1c43      	adds	r3, r0, #1
 800ac9c:	d123      	bne.n	800ace6 <_malloc_r+0x92>
 800ac9e:	230c      	movs	r3, #12
 800aca0:	6033      	str	r3, [r6, #0]
 800aca2:	4630      	mov	r0, r6
 800aca4:	f000 fff4 	bl	800bc90 <__malloc_unlock>
 800aca8:	e7e3      	b.n	800ac72 <_malloc_r+0x1e>
 800acaa:	6823      	ldr	r3, [r4, #0]
 800acac:	1b5b      	subs	r3, r3, r5
 800acae:	d417      	bmi.n	800ace0 <_malloc_r+0x8c>
 800acb0:	2b0b      	cmp	r3, #11
 800acb2:	d903      	bls.n	800acbc <_malloc_r+0x68>
 800acb4:	6023      	str	r3, [r4, #0]
 800acb6:	441c      	add	r4, r3
 800acb8:	6025      	str	r5, [r4, #0]
 800acba:	e004      	b.n	800acc6 <_malloc_r+0x72>
 800acbc:	6863      	ldr	r3, [r4, #4]
 800acbe:	42a2      	cmp	r2, r4
 800acc0:	bf0c      	ite	eq
 800acc2:	600b      	streq	r3, [r1, #0]
 800acc4:	6053      	strne	r3, [r2, #4]
 800acc6:	4630      	mov	r0, r6
 800acc8:	f000 ffe2 	bl	800bc90 <__malloc_unlock>
 800accc:	f104 000b 	add.w	r0, r4, #11
 800acd0:	1d23      	adds	r3, r4, #4
 800acd2:	f020 0007 	bic.w	r0, r0, #7
 800acd6:	1ac2      	subs	r2, r0, r3
 800acd8:	d0cc      	beq.n	800ac74 <_malloc_r+0x20>
 800acda:	1a1b      	subs	r3, r3, r0
 800acdc:	50a3      	str	r3, [r4, r2]
 800acde:	e7c9      	b.n	800ac74 <_malloc_r+0x20>
 800ace0:	4622      	mov	r2, r4
 800ace2:	6864      	ldr	r4, [r4, #4]
 800ace4:	e7cc      	b.n	800ac80 <_malloc_r+0x2c>
 800ace6:	1cc4      	adds	r4, r0, #3
 800ace8:	f024 0403 	bic.w	r4, r4, #3
 800acec:	42a0      	cmp	r0, r4
 800acee:	d0e3      	beq.n	800acb8 <_malloc_r+0x64>
 800acf0:	1a21      	subs	r1, r4, r0
 800acf2:	4630      	mov	r0, r6
 800acf4:	f000 fe30 	bl	800b958 <_sbrk_r>
 800acf8:	3001      	adds	r0, #1
 800acfa:	d1dd      	bne.n	800acb8 <_malloc_r+0x64>
 800acfc:	e7cf      	b.n	800ac9e <_malloc_r+0x4a>
 800acfe:	bf00      	nop
 800ad00:	2000047c 	.word	0x2000047c
 800ad04:	20000480 	.word	0x20000480

0800ad08 <__ssputs_r>:
 800ad08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ad0c:	688e      	ldr	r6, [r1, #8]
 800ad0e:	429e      	cmp	r6, r3
 800ad10:	4682      	mov	sl, r0
 800ad12:	460c      	mov	r4, r1
 800ad14:	4690      	mov	r8, r2
 800ad16:	461f      	mov	r7, r3
 800ad18:	d838      	bhi.n	800ad8c <__ssputs_r+0x84>
 800ad1a:	898a      	ldrh	r2, [r1, #12]
 800ad1c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ad20:	d032      	beq.n	800ad88 <__ssputs_r+0x80>
 800ad22:	6825      	ldr	r5, [r4, #0]
 800ad24:	6909      	ldr	r1, [r1, #16]
 800ad26:	eba5 0901 	sub.w	r9, r5, r1
 800ad2a:	6965      	ldr	r5, [r4, #20]
 800ad2c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ad30:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ad34:	3301      	adds	r3, #1
 800ad36:	444b      	add	r3, r9
 800ad38:	106d      	asrs	r5, r5, #1
 800ad3a:	429d      	cmp	r5, r3
 800ad3c:	bf38      	it	cc
 800ad3e:	461d      	movcc	r5, r3
 800ad40:	0553      	lsls	r3, r2, #21
 800ad42:	d531      	bpl.n	800ada8 <__ssputs_r+0xa0>
 800ad44:	4629      	mov	r1, r5
 800ad46:	f7ff ff85 	bl	800ac54 <_malloc_r>
 800ad4a:	4606      	mov	r6, r0
 800ad4c:	b950      	cbnz	r0, 800ad64 <__ssputs_r+0x5c>
 800ad4e:	230c      	movs	r3, #12
 800ad50:	f8ca 3000 	str.w	r3, [sl]
 800ad54:	89a3      	ldrh	r3, [r4, #12]
 800ad56:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ad5a:	81a3      	strh	r3, [r4, #12]
 800ad5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ad60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad64:	6921      	ldr	r1, [r4, #16]
 800ad66:	464a      	mov	r2, r9
 800ad68:	f7ff fa4c 	bl	800a204 <memcpy>
 800ad6c:	89a3      	ldrh	r3, [r4, #12]
 800ad6e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ad72:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ad76:	81a3      	strh	r3, [r4, #12]
 800ad78:	6126      	str	r6, [r4, #16]
 800ad7a:	6165      	str	r5, [r4, #20]
 800ad7c:	444e      	add	r6, r9
 800ad7e:	eba5 0509 	sub.w	r5, r5, r9
 800ad82:	6026      	str	r6, [r4, #0]
 800ad84:	60a5      	str	r5, [r4, #8]
 800ad86:	463e      	mov	r6, r7
 800ad88:	42be      	cmp	r6, r7
 800ad8a:	d900      	bls.n	800ad8e <__ssputs_r+0x86>
 800ad8c:	463e      	mov	r6, r7
 800ad8e:	4632      	mov	r2, r6
 800ad90:	6820      	ldr	r0, [r4, #0]
 800ad92:	4641      	mov	r1, r8
 800ad94:	f000 ff5c 	bl	800bc50 <memmove>
 800ad98:	68a3      	ldr	r3, [r4, #8]
 800ad9a:	6822      	ldr	r2, [r4, #0]
 800ad9c:	1b9b      	subs	r3, r3, r6
 800ad9e:	4432      	add	r2, r6
 800ada0:	60a3      	str	r3, [r4, #8]
 800ada2:	6022      	str	r2, [r4, #0]
 800ada4:	2000      	movs	r0, #0
 800ada6:	e7db      	b.n	800ad60 <__ssputs_r+0x58>
 800ada8:	462a      	mov	r2, r5
 800adaa:	f000 ff77 	bl	800bc9c <_realloc_r>
 800adae:	4606      	mov	r6, r0
 800adb0:	2800      	cmp	r0, #0
 800adb2:	d1e1      	bne.n	800ad78 <__ssputs_r+0x70>
 800adb4:	6921      	ldr	r1, [r4, #16]
 800adb6:	4650      	mov	r0, sl
 800adb8:	f7ff fefc 	bl	800abb4 <_free_r>
 800adbc:	e7c7      	b.n	800ad4e <__ssputs_r+0x46>
	...

0800adc0 <_svfiprintf_r>:
 800adc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adc4:	4698      	mov	r8, r3
 800adc6:	898b      	ldrh	r3, [r1, #12]
 800adc8:	061b      	lsls	r3, r3, #24
 800adca:	b09d      	sub	sp, #116	; 0x74
 800adcc:	4607      	mov	r7, r0
 800adce:	460d      	mov	r5, r1
 800add0:	4614      	mov	r4, r2
 800add2:	d50e      	bpl.n	800adf2 <_svfiprintf_r+0x32>
 800add4:	690b      	ldr	r3, [r1, #16]
 800add6:	b963      	cbnz	r3, 800adf2 <_svfiprintf_r+0x32>
 800add8:	2140      	movs	r1, #64	; 0x40
 800adda:	f7ff ff3b 	bl	800ac54 <_malloc_r>
 800adde:	6028      	str	r0, [r5, #0]
 800ade0:	6128      	str	r0, [r5, #16]
 800ade2:	b920      	cbnz	r0, 800adee <_svfiprintf_r+0x2e>
 800ade4:	230c      	movs	r3, #12
 800ade6:	603b      	str	r3, [r7, #0]
 800ade8:	f04f 30ff 	mov.w	r0, #4294967295
 800adec:	e0d1      	b.n	800af92 <_svfiprintf_r+0x1d2>
 800adee:	2340      	movs	r3, #64	; 0x40
 800adf0:	616b      	str	r3, [r5, #20]
 800adf2:	2300      	movs	r3, #0
 800adf4:	9309      	str	r3, [sp, #36]	; 0x24
 800adf6:	2320      	movs	r3, #32
 800adf8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800adfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ae00:	2330      	movs	r3, #48	; 0x30
 800ae02:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800afac <_svfiprintf_r+0x1ec>
 800ae06:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ae0a:	f04f 0901 	mov.w	r9, #1
 800ae0e:	4623      	mov	r3, r4
 800ae10:	469a      	mov	sl, r3
 800ae12:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ae16:	b10a      	cbz	r2, 800ae1c <_svfiprintf_r+0x5c>
 800ae18:	2a25      	cmp	r2, #37	; 0x25
 800ae1a:	d1f9      	bne.n	800ae10 <_svfiprintf_r+0x50>
 800ae1c:	ebba 0b04 	subs.w	fp, sl, r4
 800ae20:	d00b      	beq.n	800ae3a <_svfiprintf_r+0x7a>
 800ae22:	465b      	mov	r3, fp
 800ae24:	4622      	mov	r2, r4
 800ae26:	4629      	mov	r1, r5
 800ae28:	4638      	mov	r0, r7
 800ae2a:	f7ff ff6d 	bl	800ad08 <__ssputs_r>
 800ae2e:	3001      	adds	r0, #1
 800ae30:	f000 80aa 	beq.w	800af88 <_svfiprintf_r+0x1c8>
 800ae34:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae36:	445a      	add	r2, fp
 800ae38:	9209      	str	r2, [sp, #36]	; 0x24
 800ae3a:	f89a 3000 	ldrb.w	r3, [sl]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	f000 80a2 	beq.w	800af88 <_svfiprintf_r+0x1c8>
 800ae44:	2300      	movs	r3, #0
 800ae46:	f04f 32ff 	mov.w	r2, #4294967295
 800ae4a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ae4e:	f10a 0a01 	add.w	sl, sl, #1
 800ae52:	9304      	str	r3, [sp, #16]
 800ae54:	9307      	str	r3, [sp, #28]
 800ae56:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ae5a:	931a      	str	r3, [sp, #104]	; 0x68
 800ae5c:	4654      	mov	r4, sl
 800ae5e:	2205      	movs	r2, #5
 800ae60:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ae64:	4851      	ldr	r0, [pc, #324]	; (800afac <_svfiprintf_r+0x1ec>)
 800ae66:	f7f5 f9bb 	bl	80001e0 <memchr>
 800ae6a:	9a04      	ldr	r2, [sp, #16]
 800ae6c:	b9d8      	cbnz	r0, 800aea6 <_svfiprintf_r+0xe6>
 800ae6e:	06d0      	lsls	r0, r2, #27
 800ae70:	bf44      	itt	mi
 800ae72:	2320      	movmi	r3, #32
 800ae74:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae78:	0711      	lsls	r1, r2, #28
 800ae7a:	bf44      	itt	mi
 800ae7c:	232b      	movmi	r3, #43	; 0x2b
 800ae7e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ae82:	f89a 3000 	ldrb.w	r3, [sl]
 800ae86:	2b2a      	cmp	r3, #42	; 0x2a
 800ae88:	d015      	beq.n	800aeb6 <_svfiprintf_r+0xf6>
 800ae8a:	9a07      	ldr	r2, [sp, #28]
 800ae8c:	4654      	mov	r4, sl
 800ae8e:	2000      	movs	r0, #0
 800ae90:	f04f 0c0a 	mov.w	ip, #10
 800ae94:	4621      	mov	r1, r4
 800ae96:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ae9a:	3b30      	subs	r3, #48	; 0x30
 800ae9c:	2b09      	cmp	r3, #9
 800ae9e:	d94e      	bls.n	800af3e <_svfiprintf_r+0x17e>
 800aea0:	b1b0      	cbz	r0, 800aed0 <_svfiprintf_r+0x110>
 800aea2:	9207      	str	r2, [sp, #28]
 800aea4:	e014      	b.n	800aed0 <_svfiprintf_r+0x110>
 800aea6:	eba0 0308 	sub.w	r3, r0, r8
 800aeaa:	fa09 f303 	lsl.w	r3, r9, r3
 800aeae:	4313      	orrs	r3, r2
 800aeb0:	9304      	str	r3, [sp, #16]
 800aeb2:	46a2      	mov	sl, r4
 800aeb4:	e7d2      	b.n	800ae5c <_svfiprintf_r+0x9c>
 800aeb6:	9b03      	ldr	r3, [sp, #12]
 800aeb8:	1d19      	adds	r1, r3, #4
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	9103      	str	r1, [sp, #12]
 800aebe:	2b00      	cmp	r3, #0
 800aec0:	bfbb      	ittet	lt
 800aec2:	425b      	neglt	r3, r3
 800aec4:	f042 0202 	orrlt.w	r2, r2, #2
 800aec8:	9307      	strge	r3, [sp, #28]
 800aeca:	9307      	strlt	r3, [sp, #28]
 800aecc:	bfb8      	it	lt
 800aece:	9204      	strlt	r2, [sp, #16]
 800aed0:	7823      	ldrb	r3, [r4, #0]
 800aed2:	2b2e      	cmp	r3, #46	; 0x2e
 800aed4:	d10c      	bne.n	800aef0 <_svfiprintf_r+0x130>
 800aed6:	7863      	ldrb	r3, [r4, #1]
 800aed8:	2b2a      	cmp	r3, #42	; 0x2a
 800aeda:	d135      	bne.n	800af48 <_svfiprintf_r+0x188>
 800aedc:	9b03      	ldr	r3, [sp, #12]
 800aede:	1d1a      	adds	r2, r3, #4
 800aee0:	681b      	ldr	r3, [r3, #0]
 800aee2:	9203      	str	r2, [sp, #12]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bfb8      	it	lt
 800aee8:	f04f 33ff 	movlt.w	r3, #4294967295
 800aeec:	3402      	adds	r4, #2
 800aeee:	9305      	str	r3, [sp, #20]
 800aef0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800afbc <_svfiprintf_r+0x1fc>
 800aef4:	7821      	ldrb	r1, [r4, #0]
 800aef6:	2203      	movs	r2, #3
 800aef8:	4650      	mov	r0, sl
 800aefa:	f7f5 f971 	bl	80001e0 <memchr>
 800aefe:	b140      	cbz	r0, 800af12 <_svfiprintf_r+0x152>
 800af00:	2340      	movs	r3, #64	; 0x40
 800af02:	eba0 000a 	sub.w	r0, r0, sl
 800af06:	fa03 f000 	lsl.w	r0, r3, r0
 800af0a:	9b04      	ldr	r3, [sp, #16]
 800af0c:	4303      	orrs	r3, r0
 800af0e:	3401      	adds	r4, #1
 800af10:	9304      	str	r3, [sp, #16]
 800af12:	f814 1b01 	ldrb.w	r1, [r4], #1
 800af16:	4826      	ldr	r0, [pc, #152]	; (800afb0 <_svfiprintf_r+0x1f0>)
 800af18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800af1c:	2206      	movs	r2, #6
 800af1e:	f7f5 f95f 	bl	80001e0 <memchr>
 800af22:	2800      	cmp	r0, #0
 800af24:	d038      	beq.n	800af98 <_svfiprintf_r+0x1d8>
 800af26:	4b23      	ldr	r3, [pc, #140]	; (800afb4 <_svfiprintf_r+0x1f4>)
 800af28:	bb1b      	cbnz	r3, 800af72 <_svfiprintf_r+0x1b2>
 800af2a:	9b03      	ldr	r3, [sp, #12]
 800af2c:	3307      	adds	r3, #7
 800af2e:	f023 0307 	bic.w	r3, r3, #7
 800af32:	3308      	adds	r3, #8
 800af34:	9303      	str	r3, [sp, #12]
 800af36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800af38:	4433      	add	r3, r6
 800af3a:	9309      	str	r3, [sp, #36]	; 0x24
 800af3c:	e767      	b.n	800ae0e <_svfiprintf_r+0x4e>
 800af3e:	fb0c 3202 	mla	r2, ip, r2, r3
 800af42:	460c      	mov	r4, r1
 800af44:	2001      	movs	r0, #1
 800af46:	e7a5      	b.n	800ae94 <_svfiprintf_r+0xd4>
 800af48:	2300      	movs	r3, #0
 800af4a:	3401      	adds	r4, #1
 800af4c:	9305      	str	r3, [sp, #20]
 800af4e:	4619      	mov	r1, r3
 800af50:	f04f 0c0a 	mov.w	ip, #10
 800af54:	4620      	mov	r0, r4
 800af56:	f810 2b01 	ldrb.w	r2, [r0], #1
 800af5a:	3a30      	subs	r2, #48	; 0x30
 800af5c:	2a09      	cmp	r2, #9
 800af5e:	d903      	bls.n	800af68 <_svfiprintf_r+0x1a8>
 800af60:	2b00      	cmp	r3, #0
 800af62:	d0c5      	beq.n	800aef0 <_svfiprintf_r+0x130>
 800af64:	9105      	str	r1, [sp, #20]
 800af66:	e7c3      	b.n	800aef0 <_svfiprintf_r+0x130>
 800af68:	fb0c 2101 	mla	r1, ip, r1, r2
 800af6c:	4604      	mov	r4, r0
 800af6e:	2301      	movs	r3, #1
 800af70:	e7f0      	b.n	800af54 <_svfiprintf_r+0x194>
 800af72:	ab03      	add	r3, sp, #12
 800af74:	9300      	str	r3, [sp, #0]
 800af76:	462a      	mov	r2, r5
 800af78:	4b0f      	ldr	r3, [pc, #60]	; (800afb8 <_svfiprintf_r+0x1f8>)
 800af7a:	a904      	add	r1, sp, #16
 800af7c:	4638      	mov	r0, r7
 800af7e:	f3af 8000 	nop.w
 800af82:	1c42      	adds	r2, r0, #1
 800af84:	4606      	mov	r6, r0
 800af86:	d1d6      	bne.n	800af36 <_svfiprintf_r+0x176>
 800af88:	89ab      	ldrh	r3, [r5, #12]
 800af8a:	065b      	lsls	r3, r3, #25
 800af8c:	f53f af2c 	bmi.w	800ade8 <_svfiprintf_r+0x28>
 800af90:	9809      	ldr	r0, [sp, #36]	; 0x24
 800af92:	b01d      	add	sp, #116	; 0x74
 800af94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800af98:	ab03      	add	r3, sp, #12
 800af9a:	9300      	str	r3, [sp, #0]
 800af9c:	462a      	mov	r2, r5
 800af9e:	4b06      	ldr	r3, [pc, #24]	; (800afb8 <_svfiprintf_r+0x1f8>)
 800afa0:	a904      	add	r1, sp, #16
 800afa2:	4638      	mov	r0, r7
 800afa4:	f000 fa4c 	bl	800b440 <_printf_i>
 800afa8:	e7eb      	b.n	800af82 <_svfiprintf_r+0x1c2>
 800afaa:	bf00      	nop
 800afac:	0800cefc 	.word	0x0800cefc
 800afb0:	0800cf06 	.word	0x0800cf06
 800afb4:	00000000 	.word	0x00000000
 800afb8:	0800ad09 	.word	0x0800ad09
 800afbc:	0800cf02 	.word	0x0800cf02

0800afc0 <_sungetc_r>:
 800afc0:	b538      	push	{r3, r4, r5, lr}
 800afc2:	1c4b      	adds	r3, r1, #1
 800afc4:	4614      	mov	r4, r2
 800afc6:	d103      	bne.n	800afd0 <_sungetc_r+0x10>
 800afc8:	f04f 35ff 	mov.w	r5, #4294967295
 800afcc:	4628      	mov	r0, r5
 800afce:	bd38      	pop	{r3, r4, r5, pc}
 800afd0:	8993      	ldrh	r3, [r2, #12]
 800afd2:	f023 0320 	bic.w	r3, r3, #32
 800afd6:	8193      	strh	r3, [r2, #12]
 800afd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800afda:	6852      	ldr	r2, [r2, #4]
 800afdc:	b2cd      	uxtb	r5, r1
 800afde:	b18b      	cbz	r3, 800b004 <_sungetc_r+0x44>
 800afe0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800afe2:	4293      	cmp	r3, r2
 800afe4:	dd08      	ble.n	800aff8 <_sungetc_r+0x38>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	1e5a      	subs	r2, r3, #1
 800afea:	6022      	str	r2, [r4, #0]
 800afec:	f803 5c01 	strb.w	r5, [r3, #-1]
 800aff0:	6863      	ldr	r3, [r4, #4]
 800aff2:	3301      	adds	r3, #1
 800aff4:	6063      	str	r3, [r4, #4]
 800aff6:	e7e9      	b.n	800afcc <_sungetc_r+0xc>
 800aff8:	4621      	mov	r1, r4
 800affa:	f000 fd87 	bl	800bb0c <__submore>
 800affe:	2800      	cmp	r0, #0
 800b000:	d0f1      	beq.n	800afe6 <_sungetc_r+0x26>
 800b002:	e7e1      	b.n	800afc8 <_sungetc_r+0x8>
 800b004:	6921      	ldr	r1, [r4, #16]
 800b006:	6823      	ldr	r3, [r4, #0]
 800b008:	b151      	cbz	r1, 800b020 <_sungetc_r+0x60>
 800b00a:	4299      	cmp	r1, r3
 800b00c:	d208      	bcs.n	800b020 <_sungetc_r+0x60>
 800b00e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800b012:	42a9      	cmp	r1, r5
 800b014:	d104      	bne.n	800b020 <_sungetc_r+0x60>
 800b016:	3b01      	subs	r3, #1
 800b018:	3201      	adds	r2, #1
 800b01a:	6023      	str	r3, [r4, #0]
 800b01c:	6062      	str	r2, [r4, #4]
 800b01e:	e7d5      	b.n	800afcc <_sungetc_r+0xc>
 800b020:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800b024:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b028:	6363      	str	r3, [r4, #52]	; 0x34
 800b02a:	2303      	movs	r3, #3
 800b02c:	63a3      	str	r3, [r4, #56]	; 0x38
 800b02e:	4623      	mov	r3, r4
 800b030:	f803 5f46 	strb.w	r5, [r3, #70]!
 800b034:	6023      	str	r3, [r4, #0]
 800b036:	2301      	movs	r3, #1
 800b038:	e7dc      	b.n	800aff4 <_sungetc_r+0x34>

0800b03a <__ssrefill_r>:
 800b03a:	b510      	push	{r4, lr}
 800b03c:	460c      	mov	r4, r1
 800b03e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800b040:	b169      	cbz	r1, 800b05e <__ssrefill_r+0x24>
 800b042:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b046:	4299      	cmp	r1, r3
 800b048:	d001      	beq.n	800b04e <__ssrefill_r+0x14>
 800b04a:	f7ff fdb3 	bl	800abb4 <_free_r>
 800b04e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b050:	6063      	str	r3, [r4, #4]
 800b052:	2000      	movs	r0, #0
 800b054:	6360      	str	r0, [r4, #52]	; 0x34
 800b056:	b113      	cbz	r3, 800b05e <__ssrefill_r+0x24>
 800b058:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800b05a:	6023      	str	r3, [r4, #0]
 800b05c:	bd10      	pop	{r4, pc}
 800b05e:	6923      	ldr	r3, [r4, #16]
 800b060:	6023      	str	r3, [r4, #0]
 800b062:	2300      	movs	r3, #0
 800b064:	6063      	str	r3, [r4, #4]
 800b066:	89a3      	ldrh	r3, [r4, #12]
 800b068:	f043 0320 	orr.w	r3, r3, #32
 800b06c:	81a3      	strh	r3, [r4, #12]
 800b06e:	f04f 30ff 	mov.w	r0, #4294967295
 800b072:	e7f3      	b.n	800b05c <__ssrefill_r+0x22>

0800b074 <__ssvfiscanf_r>:
 800b074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b078:	460c      	mov	r4, r1
 800b07a:	f5ad 7d23 	sub.w	sp, sp, #652	; 0x28c
 800b07e:	2100      	movs	r1, #0
 800b080:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800b084:	49b2      	ldr	r1, [pc, #712]	; (800b350 <__ssvfiscanf_r+0x2dc>)
 800b086:	91a0      	str	r1, [sp, #640]	; 0x280
 800b088:	f10d 0804 	add.w	r8, sp, #4
 800b08c:	49b1      	ldr	r1, [pc, #708]	; (800b354 <__ssvfiscanf_r+0x2e0>)
 800b08e:	4fb2      	ldr	r7, [pc, #712]	; (800b358 <__ssvfiscanf_r+0x2e4>)
 800b090:	f8df 92c8 	ldr.w	r9, [pc, #712]	; 800b35c <__ssvfiscanf_r+0x2e8>
 800b094:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800b098:	4606      	mov	r6, r0
 800b09a:	91a1      	str	r1, [sp, #644]	; 0x284
 800b09c:	9300      	str	r3, [sp, #0]
 800b09e:	f892 a000 	ldrb.w	sl, [r2]
 800b0a2:	f1ba 0f00 	cmp.w	sl, #0
 800b0a6:	f000 8151 	beq.w	800b34c <__ssvfiscanf_r+0x2d8>
 800b0aa:	f81a 3007 	ldrb.w	r3, [sl, r7]
 800b0ae:	f013 0308 	ands.w	r3, r3, #8
 800b0b2:	f102 0501 	add.w	r5, r2, #1
 800b0b6:	d019      	beq.n	800b0ec <__ssvfiscanf_r+0x78>
 800b0b8:	6863      	ldr	r3, [r4, #4]
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	dd0f      	ble.n	800b0de <__ssvfiscanf_r+0x6a>
 800b0be:	6823      	ldr	r3, [r4, #0]
 800b0c0:	781a      	ldrb	r2, [r3, #0]
 800b0c2:	5cba      	ldrb	r2, [r7, r2]
 800b0c4:	0712      	lsls	r2, r2, #28
 800b0c6:	d401      	bmi.n	800b0cc <__ssvfiscanf_r+0x58>
 800b0c8:	462a      	mov	r2, r5
 800b0ca:	e7e8      	b.n	800b09e <__ssvfiscanf_r+0x2a>
 800b0cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b0ce:	3201      	adds	r2, #1
 800b0d0:	9245      	str	r2, [sp, #276]	; 0x114
 800b0d2:	6862      	ldr	r2, [r4, #4]
 800b0d4:	3301      	adds	r3, #1
 800b0d6:	3a01      	subs	r2, #1
 800b0d8:	6062      	str	r2, [r4, #4]
 800b0da:	6023      	str	r3, [r4, #0]
 800b0dc:	e7ec      	b.n	800b0b8 <__ssvfiscanf_r+0x44>
 800b0de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b0e0:	4621      	mov	r1, r4
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4798      	blx	r3
 800b0e6:	2800      	cmp	r0, #0
 800b0e8:	d0e9      	beq.n	800b0be <__ssvfiscanf_r+0x4a>
 800b0ea:	e7ed      	b.n	800b0c8 <__ssvfiscanf_r+0x54>
 800b0ec:	f1ba 0f25 	cmp.w	sl, #37	; 0x25
 800b0f0:	f040 8083 	bne.w	800b1fa <__ssvfiscanf_r+0x186>
 800b0f4:	9341      	str	r3, [sp, #260]	; 0x104
 800b0f6:	9343      	str	r3, [sp, #268]	; 0x10c
 800b0f8:	7853      	ldrb	r3, [r2, #1]
 800b0fa:	2b2a      	cmp	r3, #42	; 0x2a
 800b0fc:	bf02      	ittt	eq
 800b0fe:	2310      	moveq	r3, #16
 800b100:	1c95      	addeq	r5, r2, #2
 800b102:	9341      	streq	r3, [sp, #260]	; 0x104
 800b104:	220a      	movs	r2, #10
 800b106:	46ab      	mov	fp, r5
 800b108:	f81b 1b01 	ldrb.w	r1, [fp], #1
 800b10c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800b110:	2b09      	cmp	r3, #9
 800b112:	d91d      	bls.n	800b150 <__ssvfiscanf_r+0xdc>
 800b114:	4891      	ldr	r0, [pc, #580]	; (800b35c <__ssvfiscanf_r+0x2e8>)
 800b116:	2203      	movs	r2, #3
 800b118:	f7f5 f862 	bl	80001e0 <memchr>
 800b11c:	b140      	cbz	r0, 800b130 <__ssvfiscanf_r+0xbc>
 800b11e:	2301      	movs	r3, #1
 800b120:	eba0 0009 	sub.w	r0, r0, r9
 800b124:	fa03 f000 	lsl.w	r0, r3, r0
 800b128:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b12a:	4318      	orrs	r0, r3
 800b12c:	9041      	str	r0, [sp, #260]	; 0x104
 800b12e:	465d      	mov	r5, fp
 800b130:	f815 3b01 	ldrb.w	r3, [r5], #1
 800b134:	2b78      	cmp	r3, #120	; 0x78
 800b136:	d806      	bhi.n	800b146 <__ssvfiscanf_r+0xd2>
 800b138:	2b57      	cmp	r3, #87	; 0x57
 800b13a:	d810      	bhi.n	800b15e <__ssvfiscanf_r+0xea>
 800b13c:	2b25      	cmp	r3, #37	; 0x25
 800b13e:	d05c      	beq.n	800b1fa <__ssvfiscanf_r+0x186>
 800b140:	d856      	bhi.n	800b1f0 <__ssvfiscanf_r+0x17c>
 800b142:	2b00      	cmp	r3, #0
 800b144:	d074      	beq.n	800b230 <__ssvfiscanf_r+0x1bc>
 800b146:	2303      	movs	r3, #3
 800b148:	9347      	str	r3, [sp, #284]	; 0x11c
 800b14a:	230a      	movs	r3, #10
 800b14c:	9342      	str	r3, [sp, #264]	; 0x108
 800b14e:	e081      	b.n	800b254 <__ssvfiscanf_r+0x1e0>
 800b150:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800b152:	fb02 1303 	mla	r3, r2, r3, r1
 800b156:	3b30      	subs	r3, #48	; 0x30
 800b158:	9343      	str	r3, [sp, #268]	; 0x10c
 800b15a:	465d      	mov	r5, fp
 800b15c:	e7d3      	b.n	800b106 <__ssvfiscanf_r+0x92>
 800b15e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800b162:	2a20      	cmp	r2, #32
 800b164:	d8ef      	bhi.n	800b146 <__ssvfiscanf_r+0xd2>
 800b166:	a101      	add	r1, pc, #4	; (adr r1, 800b16c <__ssvfiscanf_r+0xf8>)
 800b168:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b16c:	0800b23f 	.word	0x0800b23f
 800b170:	0800b147 	.word	0x0800b147
 800b174:	0800b147 	.word	0x0800b147
 800b178:	0800b29d 	.word	0x0800b29d
 800b17c:	0800b147 	.word	0x0800b147
 800b180:	0800b147 	.word	0x0800b147
 800b184:	0800b147 	.word	0x0800b147
 800b188:	0800b147 	.word	0x0800b147
 800b18c:	0800b147 	.word	0x0800b147
 800b190:	0800b147 	.word	0x0800b147
 800b194:	0800b147 	.word	0x0800b147
 800b198:	0800b2b3 	.word	0x0800b2b3
 800b19c:	0800b289 	.word	0x0800b289
 800b1a0:	0800b1f7 	.word	0x0800b1f7
 800b1a4:	0800b1f7 	.word	0x0800b1f7
 800b1a8:	0800b1f7 	.word	0x0800b1f7
 800b1ac:	0800b147 	.word	0x0800b147
 800b1b0:	0800b28d 	.word	0x0800b28d
 800b1b4:	0800b147 	.word	0x0800b147
 800b1b8:	0800b147 	.word	0x0800b147
 800b1bc:	0800b147 	.word	0x0800b147
 800b1c0:	0800b147 	.word	0x0800b147
 800b1c4:	0800b2c3 	.word	0x0800b2c3
 800b1c8:	0800b295 	.word	0x0800b295
 800b1cc:	0800b237 	.word	0x0800b237
 800b1d0:	0800b147 	.word	0x0800b147
 800b1d4:	0800b147 	.word	0x0800b147
 800b1d8:	0800b2bf 	.word	0x0800b2bf
 800b1dc:	0800b147 	.word	0x0800b147
 800b1e0:	0800b289 	.word	0x0800b289
 800b1e4:	0800b147 	.word	0x0800b147
 800b1e8:	0800b147 	.word	0x0800b147
 800b1ec:	0800b23f 	.word	0x0800b23f
 800b1f0:	3b45      	subs	r3, #69	; 0x45
 800b1f2:	2b02      	cmp	r3, #2
 800b1f4:	d8a7      	bhi.n	800b146 <__ssvfiscanf_r+0xd2>
 800b1f6:	2305      	movs	r3, #5
 800b1f8:	e02b      	b.n	800b252 <__ssvfiscanf_r+0x1de>
 800b1fa:	6863      	ldr	r3, [r4, #4]
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	dd0d      	ble.n	800b21c <__ssvfiscanf_r+0x1a8>
 800b200:	6823      	ldr	r3, [r4, #0]
 800b202:	781a      	ldrb	r2, [r3, #0]
 800b204:	4552      	cmp	r2, sl
 800b206:	f040 80a1 	bne.w	800b34c <__ssvfiscanf_r+0x2d8>
 800b20a:	3301      	adds	r3, #1
 800b20c:	6862      	ldr	r2, [r4, #4]
 800b20e:	6023      	str	r3, [r4, #0]
 800b210:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800b212:	3a01      	subs	r2, #1
 800b214:	3301      	adds	r3, #1
 800b216:	6062      	str	r2, [r4, #4]
 800b218:	9345      	str	r3, [sp, #276]	; 0x114
 800b21a:	e755      	b.n	800b0c8 <__ssvfiscanf_r+0x54>
 800b21c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b21e:	4621      	mov	r1, r4
 800b220:	4630      	mov	r0, r6
 800b222:	4798      	blx	r3
 800b224:	2800      	cmp	r0, #0
 800b226:	d0eb      	beq.n	800b200 <__ssvfiscanf_r+0x18c>
 800b228:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b22a:	2800      	cmp	r0, #0
 800b22c:	f040 8084 	bne.w	800b338 <__ssvfiscanf_r+0x2c4>
 800b230:	f04f 30ff 	mov.w	r0, #4294967295
 800b234:	e086      	b.n	800b344 <__ssvfiscanf_r+0x2d0>
 800b236:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b238:	f042 0220 	orr.w	r2, r2, #32
 800b23c:	9241      	str	r2, [sp, #260]	; 0x104
 800b23e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800b240:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b244:	9241      	str	r2, [sp, #260]	; 0x104
 800b246:	2210      	movs	r2, #16
 800b248:	2b6f      	cmp	r3, #111	; 0x6f
 800b24a:	9242      	str	r2, [sp, #264]	; 0x108
 800b24c:	bf34      	ite	cc
 800b24e:	2303      	movcc	r3, #3
 800b250:	2304      	movcs	r3, #4
 800b252:	9347      	str	r3, [sp, #284]	; 0x11c
 800b254:	6863      	ldr	r3, [r4, #4]
 800b256:	2b00      	cmp	r3, #0
 800b258:	dd41      	ble.n	800b2de <__ssvfiscanf_r+0x26a>
 800b25a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b25c:	0659      	lsls	r1, r3, #25
 800b25e:	d404      	bmi.n	800b26a <__ssvfiscanf_r+0x1f6>
 800b260:	6823      	ldr	r3, [r4, #0]
 800b262:	781a      	ldrb	r2, [r3, #0]
 800b264:	5cba      	ldrb	r2, [r7, r2]
 800b266:	0712      	lsls	r2, r2, #28
 800b268:	d440      	bmi.n	800b2ec <__ssvfiscanf_r+0x278>
 800b26a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800b26c:	2b02      	cmp	r3, #2
 800b26e:	dc4f      	bgt.n	800b310 <__ssvfiscanf_r+0x29c>
 800b270:	466b      	mov	r3, sp
 800b272:	4622      	mov	r2, r4
 800b274:	a941      	add	r1, sp, #260	; 0x104
 800b276:	4630      	mov	r0, r6
 800b278:	f000 fa08 	bl	800b68c <_scanf_chars>
 800b27c:	2801      	cmp	r0, #1
 800b27e:	d065      	beq.n	800b34c <__ssvfiscanf_r+0x2d8>
 800b280:	2802      	cmp	r0, #2
 800b282:	f47f af21 	bne.w	800b0c8 <__ssvfiscanf_r+0x54>
 800b286:	e7cf      	b.n	800b228 <__ssvfiscanf_r+0x1b4>
 800b288:	220a      	movs	r2, #10
 800b28a:	e7dd      	b.n	800b248 <__ssvfiscanf_r+0x1d4>
 800b28c:	2300      	movs	r3, #0
 800b28e:	9342      	str	r3, [sp, #264]	; 0x108
 800b290:	2303      	movs	r3, #3
 800b292:	e7de      	b.n	800b252 <__ssvfiscanf_r+0x1de>
 800b294:	2308      	movs	r3, #8
 800b296:	9342      	str	r3, [sp, #264]	; 0x108
 800b298:	2304      	movs	r3, #4
 800b29a:	e7da      	b.n	800b252 <__ssvfiscanf_r+0x1de>
 800b29c:	4629      	mov	r1, r5
 800b29e:	4640      	mov	r0, r8
 800b2a0:	f000 fb6a 	bl	800b978 <__sccl>
 800b2a4:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2aa:	9341      	str	r3, [sp, #260]	; 0x104
 800b2ac:	4605      	mov	r5, r0
 800b2ae:	2301      	movs	r3, #1
 800b2b0:	e7cf      	b.n	800b252 <__ssvfiscanf_r+0x1de>
 800b2b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800b2b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b2b8:	9341      	str	r3, [sp, #260]	; 0x104
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	e7c9      	b.n	800b252 <__ssvfiscanf_r+0x1de>
 800b2be:	2302      	movs	r3, #2
 800b2c0:	e7c7      	b.n	800b252 <__ssvfiscanf_r+0x1de>
 800b2c2:	9841      	ldr	r0, [sp, #260]	; 0x104
 800b2c4:	06c3      	lsls	r3, r0, #27
 800b2c6:	f53f aeff 	bmi.w	800b0c8 <__ssvfiscanf_r+0x54>
 800b2ca:	9b00      	ldr	r3, [sp, #0]
 800b2cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2ce:	1d19      	adds	r1, r3, #4
 800b2d0:	9100      	str	r1, [sp, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	07c0      	lsls	r0, r0, #31
 800b2d6:	bf4c      	ite	mi
 800b2d8:	801a      	strhmi	r2, [r3, #0]
 800b2da:	601a      	strpl	r2, [r3, #0]
 800b2dc:	e6f4      	b.n	800b0c8 <__ssvfiscanf_r+0x54>
 800b2de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b2e0:	4621      	mov	r1, r4
 800b2e2:	4630      	mov	r0, r6
 800b2e4:	4798      	blx	r3
 800b2e6:	2800      	cmp	r0, #0
 800b2e8:	d0b7      	beq.n	800b25a <__ssvfiscanf_r+0x1e6>
 800b2ea:	e79d      	b.n	800b228 <__ssvfiscanf_r+0x1b4>
 800b2ec:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800b2ee:	3201      	adds	r2, #1
 800b2f0:	9245      	str	r2, [sp, #276]	; 0x114
 800b2f2:	6862      	ldr	r2, [r4, #4]
 800b2f4:	3a01      	subs	r2, #1
 800b2f6:	2a00      	cmp	r2, #0
 800b2f8:	6062      	str	r2, [r4, #4]
 800b2fa:	dd02      	ble.n	800b302 <__ssvfiscanf_r+0x28e>
 800b2fc:	3301      	adds	r3, #1
 800b2fe:	6023      	str	r3, [r4, #0]
 800b300:	e7ae      	b.n	800b260 <__ssvfiscanf_r+0x1ec>
 800b302:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800b304:	4621      	mov	r1, r4
 800b306:	4630      	mov	r0, r6
 800b308:	4798      	blx	r3
 800b30a:	2800      	cmp	r0, #0
 800b30c:	d0a8      	beq.n	800b260 <__ssvfiscanf_r+0x1ec>
 800b30e:	e78b      	b.n	800b228 <__ssvfiscanf_r+0x1b4>
 800b310:	2b04      	cmp	r3, #4
 800b312:	dc06      	bgt.n	800b322 <__ssvfiscanf_r+0x2ae>
 800b314:	466b      	mov	r3, sp
 800b316:	4622      	mov	r2, r4
 800b318:	a941      	add	r1, sp, #260	; 0x104
 800b31a:	4630      	mov	r0, r6
 800b31c:	f000 fa0e 	bl	800b73c <_scanf_i>
 800b320:	e7ac      	b.n	800b27c <__ssvfiscanf_r+0x208>
 800b322:	4b0f      	ldr	r3, [pc, #60]	; (800b360 <__ssvfiscanf_r+0x2ec>)
 800b324:	2b00      	cmp	r3, #0
 800b326:	f43f aecf 	beq.w	800b0c8 <__ssvfiscanf_r+0x54>
 800b32a:	466b      	mov	r3, sp
 800b32c:	4622      	mov	r2, r4
 800b32e:	a941      	add	r1, sp, #260	; 0x104
 800b330:	4630      	mov	r0, r6
 800b332:	f7fc ff03 	bl	800813c <_scanf_float>
 800b336:	e7a1      	b.n	800b27c <__ssvfiscanf_r+0x208>
 800b338:	89a3      	ldrh	r3, [r4, #12]
 800b33a:	f013 0f40 	tst.w	r3, #64	; 0x40
 800b33e:	bf18      	it	ne
 800b340:	f04f 30ff 	movne.w	r0, #4294967295
 800b344:	f50d 7d23 	add.w	sp, sp, #652	; 0x28c
 800b348:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b34c:	9844      	ldr	r0, [sp, #272]	; 0x110
 800b34e:	e7f9      	b.n	800b344 <__ssvfiscanf_r+0x2d0>
 800b350:	0800afc1 	.word	0x0800afc1
 800b354:	0800b03b 	.word	0x0800b03b
 800b358:	0800cb91 	.word	0x0800cb91
 800b35c:	0800cf02 	.word	0x0800cf02
 800b360:	0800813d 	.word	0x0800813d

0800b364 <_printf_common>:
 800b364:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b368:	4616      	mov	r6, r2
 800b36a:	4699      	mov	r9, r3
 800b36c:	688a      	ldr	r2, [r1, #8]
 800b36e:	690b      	ldr	r3, [r1, #16]
 800b370:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b374:	4293      	cmp	r3, r2
 800b376:	bfb8      	it	lt
 800b378:	4613      	movlt	r3, r2
 800b37a:	6033      	str	r3, [r6, #0]
 800b37c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b380:	4607      	mov	r7, r0
 800b382:	460c      	mov	r4, r1
 800b384:	b10a      	cbz	r2, 800b38a <_printf_common+0x26>
 800b386:	3301      	adds	r3, #1
 800b388:	6033      	str	r3, [r6, #0]
 800b38a:	6823      	ldr	r3, [r4, #0]
 800b38c:	0699      	lsls	r1, r3, #26
 800b38e:	bf42      	ittt	mi
 800b390:	6833      	ldrmi	r3, [r6, #0]
 800b392:	3302      	addmi	r3, #2
 800b394:	6033      	strmi	r3, [r6, #0]
 800b396:	6825      	ldr	r5, [r4, #0]
 800b398:	f015 0506 	ands.w	r5, r5, #6
 800b39c:	d106      	bne.n	800b3ac <_printf_common+0x48>
 800b39e:	f104 0a19 	add.w	sl, r4, #25
 800b3a2:	68e3      	ldr	r3, [r4, #12]
 800b3a4:	6832      	ldr	r2, [r6, #0]
 800b3a6:	1a9b      	subs	r3, r3, r2
 800b3a8:	42ab      	cmp	r3, r5
 800b3aa:	dc26      	bgt.n	800b3fa <_printf_common+0x96>
 800b3ac:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b3b0:	1e13      	subs	r3, r2, #0
 800b3b2:	6822      	ldr	r2, [r4, #0]
 800b3b4:	bf18      	it	ne
 800b3b6:	2301      	movne	r3, #1
 800b3b8:	0692      	lsls	r2, r2, #26
 800b3ba:	d42b      	bmi.n	800b414 <_printf_common+0xb0>
 800b3bc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b3c0:	4649      	mov	r1, r9
 800b3c2:	4638      	mov	r0, r7
 800b3c4:	47c0      	blx	r8
 800b3c6:	3001      	adds	r0, #1
 800b3c8:	d01e      	beq.n	800b408 <_printf_common+0xa4>
 800b3ca:	6823      	ldr	r3, [r4, #0]
 800b3cc:	68e5      	ldr	r5, [r4, #12]
 800b3ce:	6832      	ldr	r2, [r6, #0]
 800b3d0:	f003 0306 	and.w	r3, r3, #6
 800b3d4:	2b04      	cmp	r3, #4
 800b3d6:	bf08      	it	eq
 800b3d8:	1aad      	subeq	r5, r5, r2
 800b3da:	68a3      	ldr	r3, [r4, #8]
 800b3dc:	6922      	ldr	r2, [r4, #16]
 800b3de:	bf0c      	ite	eq
 800b3e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b3e4:	2500      	movne	r5, #0
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	bfc4      	itt	gt
 800b3ea:	1a9b      	subgt	r3, r3, r2
 800b3ec:	18ed      	addgt	r5, r5, r3
 800b3ee:	2600      	movs	r6, #0
 800b3f0:	341a      	adds	r4, #26
 800b3f2:	42b5      	cmp	r5, r6
 800b3f4:	d11a      	bne.n	800b42c <_printf_common+0xc8>
 800b3f6:	2000      	movs	r0, #0
 800b3f8:	e008      	b.n	800b40c <_printf_common+0xa8>
 800b3fa:	2301      	movs	r3, #1
 800b3fc:	4652      	mov	r2, sl
 800b3fe:	4649      	mov	r1, r9
 800b400:	4638      	mov	r0, r7
 800b402:	47c0      	blx	r8
 800b404:	3001      	adds	r0, #1
 800b406:	d103      	bne.n	800b410 <_printf_common+0xac>
 800b408:	f04f 30ff 	mov.w	r0, #4294967295
 800b40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b410:	3501      	adds	r5, #1
 800b412:	e7c6      	b.n	800b3a2 <_printf_common+0x3e>
 800b414:	18e1      	adds	r1, r4, r3
 800b416:	1c5a      	adds	r2, r3, #1
 800b418:	2030      	movs	r0, #48	; 0x30
 800b41a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b41e:	4422      	add	r2, r4
 800b420:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b424:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b428:	3302      	adds	r3, #2
 800b42a:	e7c7      	b.n	800b3bc <_printf_common+0x58>
 800b42c:	2301      	movs	r3, #1
 800b42e:	4622      	mov	r2, r4
 800b430:	4649      	mov	r1, r9
 800b432:	4638      	mov	r0, r7
 800b434:	47c0      	blx	r8
 800b436:	3001      	adds	r0, #1
 800b438:	d0e6      	beq.n	800b408 <_printf_common+0xa4>
 800b43a:	3601      	adds	r6, #1
 800b43c:	e7d9      	b.n	800b3f2 <_printf_common+0x8e>
	...

0800b440 <_printf_i>:
 800b440:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b444:	460c      	mov	r4, r1
 800b446:	4691      	mov	r9, r2
 800b448:	7e27      	ldrb	r7, [r4, #24]
 800b44a:	990c      	ldr	r1, [sp, #48]	; 0x30
 800b44c:	2f78      	cmp	r7, #120	; 0x78
 800b44e:	4680      	mov	r8, r0
 800b450:	469a      	mov	sl, r3
 800b452:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b456:	d807      	bhi.n	800b468 <_printf_i+0x28>
 800b458:	2f62      	cmp	r7, #98	; 0x62
 800b45a:	d80a      	bhi.n	800b472 <_printf_i+0x32>
 800b45c:	2f00      	cmp	r7, #0
 800b45e:	f000 80d8 	beq.w	800b612 <_printf_i+0x1d2>
 800b462:	2f58      	cmp	r7, #88	; 0x58
 800b464:	f000 80a3 	beq.w	800b5ae <_printf_i+0x16e>
 800b468:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b46c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b470:	e03a      	b.n	800b4e8 <_printf_i+0xa8>
 800b472:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b476:	2b15      	cmp	r3, #21
 800b478:	d8f6      	bhi.n	800b468 <_printf_i+0x28>
 800b47a:	a001      	add	r0, pc, #4	; (adr r0, 800b480 <_printf_i+0x40>)
 800b47c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800b480:	0800b4d9 	.word	0x0800b4d9
 800b484:	0800b4ed 	.word	0x0800b4ed
 800b488:	0800b469 	.word	0x0800b469
 800b48c:	0800b469 	.word	0x0800b469
 800b490:	0800b469 	.word	0x0800b469
 800b494:	0800b469 	.word	0x0800b469
 800b498:	0800b4ed 	.word	0x0800b4ed
 800b49c:	0800b469 	.word	0x0800b469
 800b4a0:	0800b469 	.word	0x0800b469
 800b4a4:	0800b469 	.word	0x0800b469
 800b4a8:	0800b469 	.word	0x0800b469
 800b4ac:	0800b5f9 	.word	0x0800b5f9
 800b4b0:	0800b51d 	.word	0x0800b51d
 800b4b4:	0800b5db 	.word	0x0800b5db
 800b4b8:	0800b469 	.word	0x0800b469
 800b4bc:	0800b469 	.word	0x0800b469
 800b4c0:	0800b61b 	.word	0x0800b61b
 800b4c4:	0800b469 	.word	0x0800b469
 800b4c8:	0800b51d 	.word	0x0800b51d
 800b4cc:	0800b469 	.word	0x0800b469
 800b4d0:	0800b469 	.word	0x0800b469
 800b4d4:	0800b5e3 	.word	0x0800b5e3
 800b4d8:	680b      	ldr	r3, [r1, #0]
 800b4da:	1d1a      	adds	r2, r3, #4
 800b4dc:	681b      	ldr	r3, [r3, #0]
 800b4de:	600a      	str	r2, [r1, #0]
 800b4e0:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800b4e4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b4e8:	2301      	movs	r3, #1
 800b4ea:	e0a3      	b.n	800b634 <_printf_i+0x1f4>
 800b4ec:	6825      	ldr	r5, [r4, #0]
 800b4ee:	6808      	ldr	r0, [r1, #0]
 800b4f0:	062e      	lsls	r6, r5, #24
 800b4f2:	f100 0304 	add.w	r3, r0, #4
 800b4f6:	d50a      	bpl.n	800b50e <_printf_i+0xce>
 800b4f8:	6805      	ldr	r5, [r0, #0]
 800b4fa:	600b      	str	r3, [r1, #0]
 800b4fc:	2d00      	cmp	r5, #0
 800b4fe:	da03      	bge.n	800b508 <_printf_i+0xc8>
 800b500:	232d      	movs	r3, #45	; 0x2d
 800b502:	426d      	negs	r5, r5
 800b504:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b508:	485e      	ldr	r0, [pc, #376]	; (800b684 <_printf_i+0x244>)
 800b50a:	230a      	movs	r3, #10
 800b50c:	e019      	b.n	800b542 <_printf_i+0x102>
 800b50e:	f015 0f40 	tst.w	r5, #64	; 0x40
 800b512:	6805      	ldr	r5, [r0, #0]
 800b514:	600b      	str	r3, [r1, #0]
 800b516:	bf18      	it	ne
 800b518:	b22d      	sxthne	r5, r5
 800b51a:	e7ef      	b.n	800b4fc <_printf_i+0xbc>
 800b51c:	680b      	ldr	r3, [r1, #0]
 800b51e:	6825      	ldr	r5, [r4, #0]
 800b520:	1d18      	adds	r0, r3, #4
 800b522:	6008      	str	r0, [r1, #0]
 800b524:	0628      	lsls	r0, r5, #24
 800b526:	d501      	bpl.n	800b52c <_printf_i+0xec>
 800b528:	681d      	ldr	r5, [r3, #0]
 800b52a:	e002      	b.n	800b532 <_printf_i+0xf2>
 800b52c:	0669      	lsls	r1, r5, #25
 800b52e:	d5fb      	bpl.n	800b528 <_printf_i+0xe8>
 800b530:	881d      	ldrh	r5, [r3, #0]
 800b532:	4854      	ldr	r0, [pc, #336]	; (800b684 <_printf_i+0x244>)
 800b534:	2f6f      	cmp	r7, #111	; 0x6f
 800b536:	bf0c      	ite	eq
 800b538:	2308      	moveq	r3, #8
 800b53a:	230a      	movne	r3, #10
 800b53c:	2100      	movs	r1, #0
 800b53e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b542:	6866      	ldr	r6, [r4, #4]
 800b544:	60a6      	str	r6, [r4, #8]
 800b546:	2e00      	cmp	r6, #0
 800b548:	bfa2      	ittt	ge
 800b54a:	6821      	ldrge	r1, [r4, #0]
 800b54c:	f021 0104 	bicge.w	r1, r1, #4
 800b550:	6021      	strge	r1, [r4, #0]
 800b552:	b90d      	cbnz	r5, 800b558 <_printf_i+0x118>
 800b554:	2e00      	cmp	r6, #0
 800b556:	d04d      	beq.n	800b5f4 <_printf_i+0x1b4>
 800b558:	4616      	mov	r6, r2
 800b55a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b55e:	fb03 5711 	mls	r7, r3, r1, r5
 800b562:	5dc7      	ldrb	r7, [r0, r7]
 800b564:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b568:	462f      	mov	r7, r5
 800b56a:	42bb      	cmp	r3, r7
 800b56c:	460d      	mov	r5, r1
 800b56e:	d9f4      	bls.n	800b55a <_printf_i+0x11a>
 800b570:	2b08      	cmp	r3, #8
 800b572:	d10b      	bne.n	800b58c <_printf_i+0x14c>
 800b574:	6823      	ldr	r3, [r4, #0]
 800b576:	07df      	lsls	r7, r3, #31
 800b578:	d508      	bpl.n	800b58c <_printf_i+0x14c>
 800b57a:	6923      	ldr	r3, [r4, #16]
 800b57c:	6861      	ldr	r1, [r4, #4]
 800b57e:	4299      	cmp	r1, r3
 800b580:	bfde      	ittt	le
 800b582:	2330      	movle	r3, #48	; 0x30
 800b584:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b588:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b58c:	1b92      	subs	r2, r2, r6
 800b58e:	6122      	str	r2, [r4, #16]
 800b590:	f8cd a000 	str.w	sl, [sp]
 800b594:	464b      	mov	r3, r9
 800b596:	aa03      	add	r2, sp, #12
 800b598:	4621      	mov	r1, r4
 800b59a:	4640      	mov	r0, r8
 800b59c:	f7ff fee2 	bl	800b364 <_printf_common>
 800b5a0:	3001      	adds	r0, #1
 800b5a2:	d14c      	bne.n	800b63e <_printf_i+0x1fe>
 800b5a4:	f04f 30ff 	mov.w	r0, #4294967295
 800b5a8:	b004      	add	sp, #16
 800b5aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b5ae:	4835      	ldr	r0, [pc, #212]	; (800b684 <_printf_i+0x244>)
 800b5b0:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800b5b4:	6823      	ldr	r3, [r4, #0]
 800b5b6:	680e      	ldr	r6, [r1, #0]
 800b5b8:	061f      	lsls	r7, r3, #24
 800b5ba:	f856 5b04 	ldr.w	r5, [r6], #4
 800b5be:	600e      	str	r6, [r1, #0]
 800b5c0:	d514      	bpl.n	800b5ec <_printf_i+0x1ac>
 800b5c2:	07d9      	lsls	r1, r3, #31
 800b5c4:	bf44      	itt	mi
 800b5c6:	f043 0320 	orrmi.w	r3, r3, #32
 800b5ca:	6023      	strmi	r3, [r4, #0]
 800b5cc:	b91d      	cbnz	r5, 800b5d6 <_printf_i+0x196>
 800b5ce:	6823      	ldr	r3, [r4, #0]
 800b5d0:	f023 0320 	bic.w	r3, r3, #32
 800b5d4:	6023      	str	r3, [r4, #0]
 800b5d6:	2310      	movs	r3, #16
 800b5d8:	e7b0      	b.n	800b53c <_printf_i+0xfc>
 800b5da:	6823      	ldr	r3, [r4, #0]
 800b5dc:	f043 0320 	orr.w	r3, r3, #32
 800b5e0:	6023      	str	r3, [r4, #0]
 800b5e2:	2378      	movs	r3, #120	; 0x78
 800b5e4:	4828      	ldr	r0, [pc, #160]	; (800b688 <_printf_i+0x248>)
 800b5e6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b5ea:	e7e3      	b.n	800b5b4 <_printf_i+0x174>
 800b5ec:	065e      	lsls	r6, r3, #25
 800b5ee:	bf48      	it	mi
 800b5f0:	b2ad      	uxthmi	r5, r5
 800b5f2:	e7e6      	b.n	800b5c2 <_printf_i+0x182>
 800b5f4:	4616      	mov	r6, r2
 800b5f6:	e7bb      	b.n	800b570 <_printf_i+0x130>
 800b5f8:	680b      	ldr	r3, [r1, #0]
 800b5fa:	6826      	ldr	r6, [r4, #0]
 800b5fc:	6960      	ldr	r0, [r4, #20]
 800b5fe:	1d1d      	adds	r5, r3, #4
 800b600:	600d      	str	r5, [r1, #0]
 800b602:	0635      	lsls	r5, r6, #24
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	d501      	bpl.n	800b60c <_printf_i+0x1cc>
 800b608:	6018      	str	r0, [r3, #0]
 800b60a:	e002      	b.n	800b612 <_printf_i+0x1d2>
 800b60c:	0671      	lsls	r1, r6, #25
 800b60e:	d5fb      	bpl.n	800b608 <_printf_i+0x1c8>
 800b610:	8018      	strh	r0, [r3, #0]
 800b612:	2300      	movs	r3, #0
 800b614:	6123      	str	r3, [r4, #16]
 800b616:	4616      	mov	r6, r2
 800b618:	e7ba      	b.n	800b590 <_printf_i+0x150>
 800b61a:	680b      	ldr	r3, [r1, #0]
 800b61c:	1d1a      	adds	r2, r3, #4
 800b61e:	600a      	str	r2, [r1, #0]
 800b620:	681e      	ldr	r6, [r3, #0]
 800b622:	6862      	ldr	r2, [r4, #4]
 800b624:	2100      	movs	r1, #0
 800b626:	4630      	mov	r0, r6
 800b628:	f7f4 fdda 	bl	80001e0 <memchr>
 800b62c:	b108      	cbz	r0, 800b632 <_printf_i+0x1f2>
 800b62e:	1b80      	subs	r0, r0, r6
 800b630:	6060      	str	r0, [r4, #4]
 800b632:	6863      	ldr	r3, [r4, #4]
 800b634:	6123      	str	r3, [r4, #16]
 800b636:	2300      	movs	r3, #0
 800b638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b63c:	e7a8      	b.n	800b590 <_printf_i+0x150>
 800b63e:	6923      	ldr	r3, [r4, #16]
 800b640:	4632      	mov	r2, r6
 800b642:	4649      	mov	r1, r9
 800b644:	4640      	mov	r0, r8
 800b646:	47d0      	blx	sl
 800b648:	3001      	adds	r0, #1
 800b64a:	d0ab      	beq.n	800b5a4 <_printf_i+0x164>
 800b64c:	6823      	ldr	r3, [r4, #0]
 800b64e:	079b      	lsls	r3, r3, #30
 800b650:	d413      	bmi.n	800b67a <_printf_i+0x23a>
 800b652:	68e0      	ldr	r0, [r4, #12]
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	4298      	cmp	r0, r3
 800b658:	bfb8      	it	lt
 800b65a:	4618      	movlt	r0, r3
 800b65c:	e7a4      	b.n	800b5a8 <_printf_i+0x168>
 800b65e:	2301      	movs	r3, #1
 800b660:	4632      	mov	r2, r6
 800b662:	4649      	mov	r1, r9
 800b664:	4640      	mov	r0, r8
 800b666:	47d0      	blx	sl
 800b668:	3001      	adds	r0, #1
 800b66a:	d09b      	beq.n	800b5a4 <_printf_i+0x164>
 800b66c:	3501      	adds	r5, #1
 800b66e:	68e3      	ldr	r3, [r4, #12]
 800b670:	9903      	ldr	r1, [sp, #12]
 800b672:	1a5b      	subs	r3, r3, r1
 800b674:	42ab      	cmp	r3, r5
 800b676:	dcf2      	bgt.n	800b65e <_printf_i+0x21e>
 800b678:	e7eb      	b.n	800b652 <_printf_i+0x212>
 800b67a:	2500      	movs	r5, #0
 800b67c:	f104 0619 	add.w	r6, r4, #25
 800b680:	e7f5      	b.n	800b66e <_printf_i+0x22e>
 800b682:	bf00      	nop
 800b684:	0800cf0d 	.word	0x0800cf0d
 800b688:	0800cf1e 	.word	0x0800cf1e

0800b68c <_scanf_chars>:
 800b68c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b690:	4615      	mov	r5, r2
 800b692:	688a      	ldr	r2, [r1, #8]
 800b694:	4680      	mov	r8, r0
 800b696:	460c      	mov	r4, r1
 800b698:	b932      	cbnz	r2, 800b6a8 <_scanf_chars+0x1c>
 800b69a:	698a      	ldr	r2, [r1, #24]
 800b69c:	2a00      	cmp	r2, #0
 800b69e:	bf0c      	ite	eq
 800b6a0:	2201      	moveq	r2, #1
 800b6a2:	f04f 32ff 	movne.w	r2, #4294967295
 800b6a6:	608a      	str	r2, [r1, #8]
 800b6a8:	6822      	ldr	r2, [r4, #0]
 800b6aa:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800b738 <_scanf_chars+0xac>
 800b6ae:	06d1      	lsls	r1, r2, #27
 800b6b0:	bf5f      	itttt	pl
 800b6b2:	681a      	ldrpl	r2, [r3, #0]
 800b6b4:	1d11      	addpl	r1, r2, #4
 800b6b6:	6019      	strpl	r1, [r3, #0]
 800b6b8:	6816      	ldrpl	r6, [r2, #0]
 800b6ba:	2700      	movs	r7, #0
 800b6bc:	69a0      	ldr	r0, [r4, #24]
 800b6be:	b188      	cbz	r0, 800b6e4 <_scanf_chars+0x58>
 800b6c0:	2801      	cmp	r0, #1
 800b6c2:	d107      	bne.n	800b6d4 <_scanf_chars+0x48>
 800b6c4:	682b      	ldr	r3, [r5, #0]
 800b6c6:	781a      	ldrb	r2, [r3, #0]
 800b6c8:	6963      	ldr	r3, [r4, #20]
 800b6ca:	5c9b      	ldrb	r3, [r3, r2]
 800b6cc:	b953      	cbnz	r3, 800b6e4 <_scanf_chars+0x58>
 800b6ce:	bb27      	cbnz	r7, 800b71a <_scanf_chars+0x8e>
 800b6d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6d4:	2802      	cmp	r0, #2
 800b6d6:	d120      	bne.n	800b71a <_scanf_chars+0x8e>
 800b6d8:	682b      	ldr	r3, [r5, #0]
 800b6da:	781b      	ldrb	r3, [r3, #0]
 800b6dc:	f813 3009 	ldrb.w	r3, [r3, r9]
 800b6e0:	071b      	lsls	r3, r3, #28
 800b6e2:	d41a      	bmi.n	800b71a <_scanf_chars+0x8e>
 800b6e4:	6823      	ldr	r3, [r4, #0]
 800b6e6:	06da      	lsls	r2, r3, #27
 800b6e8:	bf5e      	ittt	pl
 800b6ea:	682b      	ldrpl	r3, [r5, #0]
 800b6ec:	781b      	ldrbpl	r3, [r3, #0]
 800b6ee:	f806 3b01 	strbpl.w	r3, [r6], #1
 800b6f2:	682a      	ldr	r2, [r5, #0]
 800b6f4:	686b      	ldr	r3, [r5, #4]
 800b6f6:	3201      	adds	r2, #1
 800b6f8:	602a      	str	r2, [r5, #0]
 800b6fa:	68a2      	ldr	r2, [r4, #8]
 800b6fc:	3b01      	subs	r3, #1
 800b6fe:	3a01      	subs	r2, #1
 800b700:	606b      	str	r3, [r5, #4]
 800b702:	3701      	adds	r7, #1
 800b704:	60a2      	str	r2, [r4, #8]
 800b706:	b142      	cbz	r2, 800b71a <_scanf_chars+0x8e>
 800b708:	2b00      	cmp	r3, #0
 800b70a:	dcd7      	bgt.n	800b6bc <_scanf_chars+0x30>
 800b70c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b710:	4629      	mov	r1, r5
 800b712:	4640      	mov	r0, r8
 800b714:	4798      	blx	r3
 800b716:	2800      	cmp	r0, #0
 800b718:	d0d0      	beq.n	800b6bc <_scanf_chars+0x30>
 800b71a:	6823      	ldr	r3, [r4, #0]
 800b71c:	f013 0310 	ands.w	r3, r3, #16
 800b720:	d105      	bne.n	800b72e <_scanf_chars+0xa2>
 800b722:	68e2      	ldr	r2, [r4, #12]
 800b724:	3201      	adds	r2, #1
 800b726:	60e2      	str	r2, [r4, #12]
 800b728:	69a2      	ldr	r2, [r4, #24]
 800b72a:	b102      	cbz	r2, 800b72e <_scanf_chars+0xa2>
 800b72c:	7033      	strb	r3, [r6, #0]
 800b72e:	6923      	ldr	r3, [r4, #16]
 800b730:	441f      	add	r7, r3
 800b732:	6127      	str	r7, [r4, #16]
 800b734:	2000      	movs	r0, #0
 800b736:	e7cb      	b.n	800b6d0 <_scanf_chars+0x44>
 800b738:	0800cb91 	.word	0x0800cb91

0800b73c <_scanf_i>:
 800b73c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b740:	4698      	mov	r8, r3
 800b742:	4b74      	ldr	r3, [pc, #464]	; (800b914 <_scanf_i+0x1d8>)
 800b744:	460c      	mov	r4, r1
 800b746:	4682      	mov	sl, r0
 800b748:	4616      	mov	r6, r2
 800b74a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800b74e:	b087      	sub	sp, #28
 800b750:	ab03      	add	r3, sp, #12
 800b752:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800b756:	4b70      	ldr	r3, [pc, #448]	; (800b918 <_scanf_i+0x1dc>)
 800b758:	69a1      	ldr	r1, [r4, #24]
 800b75a:	4a70      	ldr	r2, [pc, #448]	; (800b91c <_scanf_i+0x1e0>)
 800b75c:	2903      	cmp	r1, #3
 800b75e:	bf18      	it	ne
 800b760:	461a      	movne	r2, r3
 800b762:	68a3      	ldr	r3, [r4, #8]
 800b764:	9201      	str	r2, [sp, #4]
 800b766:	1e5a      	subs	r2, r3, #1
 800b768:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b76c:	bf88      	it	hi
 800b76e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b772:	4627      	mov	r7, r4
 800b774:	bf82      	ittt	hi
 800b776:	eb03 0905 	addhi.w	r9, r3, r5
 800b77a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b77e:	60a3      	strhi	r3, [r4, #8]
 800b780:	f857 3b1c 	ldr.w	r3, [r7], #28
 800b784:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800b788:	bf98      	it	ls
 800b78a:	f04f 0900 	movls.w	r9, #0
 800b78e:	6023      	str	r3, [r4, #0]
 800b790:	463d      	mov	r5, r7
 800b792:	f04f 0b00 	mov.w	fp, #0
 800b796:	6831      	ldr	r1, [r6, #0]
 800b798:	ab03      	add	r3, sp, #12
 800b79a:	7809      	ldrb	r1, [r1, #0]
 800b79c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800b7a0:	2202      	movs	r2, #2
 800b7a2:	f7f4 fd1d 	bl	80001e0 <memchr>
 800b7a6:	b328      	cbz	r0, 800b7f4 <_scanf_i+0xb8>
 800b7a8:	f1bb 0f01 	cmp.w	fp, #1
 800b7ac:	d159      	bne.n	800b862 <_scanf_i+0x126>
 800b7ae:	6862      	ldr	r2, [r4, #4]
 800b7b0:	b92a      	cbnz	r2, 800b7be <_scanf_i+0x82>
 800b7b2:	6822      	ldr	r2, [r4, #0]
 800b7b4:	2308      	movs	r3, #8
 800b7b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7ba:	6063      	str	r3, [r4, #4]
 800b7bc:	6022      	str	r2, [r4, #0]
 800b7be:	6822      	ldr	r2, [r4, #0]
 800b7c0:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800b7c4:	6022      	str	r2, [r4, #0]
 800b7c6:	68a2      	ldr	r2, [r4, #8]
 800b7c8:	1e51      	subs	r1, r2, #1
 800b7ca:	60a1      	str	r1, [r4, #8]
 800b7cc:	b192      	cbz	r2, 800b7f4 <_scanf_i+0xb8>
 800b7ce:	6832      	ldr	r2, [r6, #0]
 800b7d0:	1c51      	adds	r1, r2, #1
 800b7d2:	6031      	str	r1, [r6, #0]
 800b7d4:	7812      	ldrb	r2, [r2, #0]
 800b7d6:	f805 2b01 	strb.w	r2, [r5], #1
 800b7da:	6872      	ldr	r2, [r6, #4]
 800b7dc:	3a01      	subs	r2, #1
 800b7de:	2a00      	cmp	r2, #0
 800b7e0:	6072      	str	r2, [r6, #4]
 800b7e2:	dc07      	bgt.n	800b7f4 <_scanf_i+0xb8>
 800b7e4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800b7e8:	4631      	mov	r1, r6
 800b7ea:	4650      	mov	r0, sl
 800b7ec:	4790      	blx	r2
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f040 8085 	bne.w	800b8fe <_scanf_i+0x1c2>
 800b7f4:	f10b 0b01 	add.w	fp, fp, #1
 800b7f8:	f1bb 0f03 	cmp.w	fp, #3
 800b7fc:	d1cb      	bne.n	800b796 <_scanf_i+0x5a>
 800b7fe:	6863      	ldr	r3, [r4, #4]
 800b800:	b90b      	cbnz	r3, 800b806 <_scanf_i+0xca>
 800b802:	230a      	movs	r3, #10
 800b804:	6063      	str	r3, [r4, #4]
 800b806:	6863      	ldr	r3, [r4, #4]
 800b808:	4945      	ldr	r1, [pc, #276]	; (800b920 <_scanf_i+0x1e4>)
 800b80a:	6960      	ldr	r0, [r4, #20]
 800b80c:	1ac9      	subs	r1, r1, r3
 800b80e:	f000 f8b3 	bl	800b978 <__sccl>
 800b812:	f04f 0b00 	mov.w	fp, #0
 800b816:	68a3      	ldr	r3, [r4, #8]
 800b818:	6822      	ldr	r2, [r4, #0]
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d03d      	beq.n	800b89a <_scanf_i+0x15e>
 800b81e:	6831      	ldr	r1, [r6, #0]
 800b820:	6960      	ldr	r0, [r4, #20]
 800b822:	f891 c000 	ldrb.w	ip, [r1]
 800b826:	f810 000c 	ldrb.w	r0, [r0, ip]
 800b82a:	2800      	cmp	r0, #0
 800b82c:	d035      	beq.n	800b89a <_scanf_i+0x15e>
 800b82e:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800b832:	d124      	bne.n	800b87e <_scanf_i+0x142>
 800b834:	0510      	lsls	r0, r2, #20
 800b836:	d522      	bpl.n	800b87e <_scanf_i+0x142>
 800b838:	f10b 0b01 	add.w	fp, fp, #1
 800b83c:	f1b9 0f00 	cmp.w	r9, #0
 800b840:	d003      	beq.n	800b84a <_scanf_i+0x10e>
 800b842:	3301      	adds	r3, #1
 800b844:	f109 39ff 	add.w	r9, r9, #4294967295
 800b848:	60a3      	str	r3, [r4, #8]
 800b84a:	6873      	ldr	r3, [r6, #4]
 800b84c:	3b01      	subs	r3, #1
 800b84e:	2b00      	cmp	r3, #0
 800b850:	6073      	str	r3, [r6, #4]
 800b852:	dd1b      	ble.n	800b88c <_scanf_i+0x150>
 800b854:	6833      	ldr	r3, [r6, #0]
 800b856:	3301      	adds	r3, #1
 800b858:	6033      	str	r3, [r6, #0]
 800b85a:	68a3      	ldr	r3, [r4, #8]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	60a3      	str	r3, [r4, #8]
 800b860:	e7d9      	b.n	800b816 <_scanf_i+0xda>
 800b862:	f1bb 0f02 	cmp.w	fp, #2
 800b866:	d1ae      	bne.n	800b7c6 <_scanf_i+0x8a>
 800b868:	6822      	ldr	r2, [r4, #0]
 800b86a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800b86e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800b872:	d1bf      	bne.n	800b7f4 <_scanf_i+0xb8>
 800b874:	2310      	movs	r3, #16
 800b876:	6063      	str	r3, [r4, #4]
 800b878:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b87c:	e7a2      	b.n	800b7c4 <_scanf_i+0x88>
 800b87e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800b882:	6022      	str	r2, [r4, #0]
 800b884:	780b      	ldrb	r3, [r1, #0]
 800b886:	f805 3b01 	strb.w	r3, [r5], #1
 800b88a:	e7de      	b.n	800b84a <_scanf_i+0x10e>
 800b88c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b890:	4631      	mov	r1, r6
 800b892:	4650      	mov	r0, sl
 800b894:	4798      	blx	r3
 800b896:	2800      	cmp	r0, #0
 800b898:	d0df      	beq.n	800b85a <_scanf_i+0x11e>
 800b89a:	6823      	ldr	r3, [r4, #0]
 800b89c:	05d9      	lsls	r1, r3, #23
 800b89e:	d50d      	bpl.n	800b8bc <_scanf_i+0x180>
 800b8a0:	42bd      	cmp	r5, r7
 800b8a2:	d909      	bls.n	800b8b8 <_scanf_i+0x17c>
 800b8a4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800b8a8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8ac:	4632      	mov	r2, r6
 800b8ae:	4650      	mov	r0, sl
 800b8b0:	4798      	blx	r3
 800b8b2:	f105 39ff 	add.w	r9, r5, #4294967295
 800b8b6:	464d      	mov	r5, r9
 800b8b8:	42bd      	cmp	r5, r7
 800b8ba:	d028      	beq.n	800b90e <_scanf_i+0x1d2>
 800b8bc:	6822      	ldr	r2, [r4, #0]
 800b8be:	f012 0210 	ands.w	r2, r2, #16
 800b8c2:	d113      	bne.n	800b8ec <_scanf_i+0x1b0>
 800b8c4:	702a      	strb	r2, [r5, #0]
 800b8c6:	6863      	ldr	r3, [r4, #4]
 800b8c8:	9e01      	ldr	r6, [sp, #4]
 800b8ca:	4639      	mov	r1, r7
 800b8cc:	4650      	mov	r0, sl
 800b8ce:	47b0      	blx	r6
 800b8d0:	f8d8 3000 	ldr.w	r3, [r8]
 800b8d4:	6821      	ldr	r1, [r4, #0]
 800b8d6:	1d1a      	adds	r2, r3, #4
 800b8d8:	f8c8 2000 	str.w	r2, [r8]
 800b8dc:	f011 0f20 	tst.w	r1, #32
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	d00f      	beq.n	800b904 <_scanf_i+0x1c8>
 800b8e4:	6018      	str	r0, [r3, #0]
 800b8e6:	68e3      	ldr	r3, [r4, #12]
 800b8e8:	3301      	adds	r3, #1
 800b8ea:	60e3      	str	r3, [r4, #12]
 800b8ec:	1bed      	subs	r5, r5, r7
 800b8ee:	44ab      	add	fp, r5
 800b8f0:	6925      	ldr	r5, [r4, #16]
 800b8f2:	445d      	add	r5, fp
 800b8f4:	6125      	str	r5, [r4, #16]
 800b8f6:	2000      	movs	r0, #0
 800b8f8:	b007      	add	sp, #28
 800b8fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8fe:	f04f 0b00 	mov.w	fp, #0
 800b902:	e7ca      	b.n	800b89a <_scanf_i+0x15e>
 800b904:	07ca      	lsls	r2, r1, #31
 800b906:	bf4c      	ite	mi
 800b908:	8018      	strhmi	r0, [r3, #0]
 800b90a:	6018      	strpl	r0, [r3, #0]
 800b90c:	e7eb      	b.n	800b8e6 <_scanf_i+0x1aa>
 800b90e:	2001      	movs	r0, #1
 800b910:	e7f2      	b.n	800b8f8 <_scanf_i+0x1bc>
 800b912:	bf00      	nop
 800b914:	0800c094 	.word	0x0800c094
 800b918:	0800bb09 	.word	0x0800bb09
 800b91c:	080094d9 	.word	0x080094d9
 800b920:	0800cf48 	.word	0x0800cf48

0800b924 <_read_r>:
 800b924:	b538      	push	{r3, r4, r5, lr}
 800b926:	4d07      	ldr	r5, [pc, #28]	; (800b944 <_read_r+0x20>)
 800b928:	4604      	mov	r4, r0
 800b92a:	4608      	mov	r0, r1
 800b92c:	4611      	mov	r1, r2
 800b92e:	2200      	movs	r2, #0
 800b930:	602a      	str	r2, [r5, #0]
 800b932:	461a      	mov	r2, r3
 800b934:	f7f8 f988 	bl	8003c48 <_read>
 800b938:	1c43      	adds	r3, r0, #1
 800b93a:	d102      	bne.n	800b942 <_read_r+0x1e>
 800b93c:	682b      	ldr	r3, [r5, #0]
 800b93e:	b103      	cbz	r3, 800b942 <_read_r+0x1e>
 800b940:	6023      	str	r3, [r4, #0]
 800b942:	bd38      	pop	{r3, r4, r5, pc}
 800b944:	20000f68 	.word	0x20000f68

0800b948 <nan>:
 800b948:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b950 <nan+0x8>
 800b94c:	4770      	bx	lr
 800b94e:	bf00      	nop
 800b950:	00000000 	.word	0x00000000
 800b954:	7ff80000 	.word	0x7ff80000

0800b958 <_sbrk_r>:
 800b958:	b538      	push	{r3, r4, r5, lr}
 800b95a:	4d06      	ldr	r5, [pc, #24]	; (800b974 <_sbrk_r+0x1c>)
 800b95c:	2300      	movs	r3, #0
 800b95e:	4604      	mov	r4, r0
 800b960:	4608      	mov	r0, r1
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	f7f8 f9c2 	bl	8003cec <_sbrk>
 800b968:	1c43      	adds	r3, r0, #1
 800b96a:	d102      	bne.n	800b972 <_sbrk_r+0x1a>
 800b96c:	682b      	ldr	r3, [r5, #0]
 800b96e:	b103      	cbz	r3, 800b972 <_sbrk_r+0x1a>
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	bd38      	pop	{r3, r4, r5, pc}
 800b974:	20000f68 	.word	0x20000f68

0800b978 <__sccl>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	780b      	ldrb	r3, [r1, #0]
 800b97c:	4604      	mov	r4, r0
 800b97e:	2b5e      	cmp	r3, #94	; 0x5e
 800b980:	bf0b      	itete	eq
 800b982:	784b      	ldrbeq	r3, [r1, #1]
 800b984:	1c48      	addne	r0, r1, #1
 800b986:	1c88      	addeq	r0, r1, #2
 800b988:	2200      	movne	r2, #0
 800b98a:	bf08      	it	eq
 800b98c:	2201      	moveq	r2, #1
 800b98e:	1e61      	subs	r1, r4, #1
 800b990:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800b994:	f801 2f01 	strb.w	r2, [r1, #1]!
 800b998:	42a9      	cmp	r1, r5
 800b99a:	d1fb      	bne.n	800b994 <__sccl+0x1c>
 800b99c:	b90b      	cbnz	r3, 800b9a2 <__sccl+0x2a>
 800b99e:	3801      	subs	r0, #1
 800b9a0:	bd70      	pop	{r4, r5, r6, pc}
 800b9a2:	f082 0101 	eor.w	r1, r2, #1
 800b9a6:	54e1      	strb	r1, [r4, r3]
 800b9a8:	1c42      	adds	r2, r0, #1
 800b9aa:	f812 5c01 	ldrb.w	r5, [r2, #-1]
 800b9ae:	2d2d      	cmp	r5, #45	; 0x2d
 800b9b0:	f102 36ff 	add.w	r6, r2, #4294967295
 800b9b4:	4610      	mov	r0, r2
 800b9b6:	d006      	beq.n	800b9c6 <__sccl+0x4e>
 800b9b8:	2d5d      	cmp	r5, #93	; 0x5d
 800b9ba:	d0f1      	beq.n	800b9a0 <__sccl+0x28>
 800b9bc:	b90d      	cbnz	r5, 800b9c2 <__sccl+0x4a>
 800b9be:	4630      	mov	r0, r6
 800b9c0:	e7ee      	b.n	800b9a0 <__sccl+0x28>
 800b9c2:	462b      	mov	r3, r5
 800b9c4:	e7ef      	b.n	800b9a6 <__sccl+0x2e>
 800b9c6:	7816      	ldrb	r6, [r2, #0]
 800b9c8:	2e5d      	cmp	r6, #93	; 0x5d
 800b9ca:	d0fa      	beq.n	800b9c2 <__sccl+0x4a>
 800b9cc:	42b3      	cmp	r3, r6
 800b9ce:	dcf8      	bgt.n	800b9c2 <__sccl+0x4a>
 800b9d0:	4618      	mov	r0, r3
 800b9d2:	3001      	adds	r0, #1
 800b9d4:	4286      	cmp	r6, r0
 800b9d6:	5421      	strb	r1, [r4, r0]
 800b9d8:	dcfb      	bgt.n	800b9d2 <__sccl+0x5a>
 800b9da:	43d8      	mvns	r0, r3
 800b9dc:	4430      	add	r0, r6
 800b9de:	1c5d      	adds	r5, r3, #1
 800b9e0:	42b3      	cmp	r3, r6
 800b9e2:	bfa8      	it	ge
 800b9e4:	2000      	movge	r0, #0
 800b9e6:	182b      	adds	r3, r5, r0
 800b9e8:	3202      	adds	r2, #2
 800b9ea:	e7de      	b.n	800b9aa <__sccl+0x32>

0800b9ec <strncmp>:
 800b9ec:	b510      	push	{r4, lr}
 800b9ee:	b16a      	cbz	r2, 800ba0c <strncmp+0x20>
 800b9f0:	3901      	subs	r1, #1
 800b9f2:	1884      	adds	r4, r0, r2
 800b9f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 800b9f8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b9fc:	4293      	cmp	r3, r2
 800b9fe:	d103      	bne.n	800ba08 <strncmp+0x1c>
 800ba00:	42a0      	cmp	r0, r4
 800ba02:	d001      	beq.n	800ba08 <strncmp+0x1c>
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d1f5      	bne.n	800b9f4 <strncmp+0x8>
 800ba08:	1a98      	subs	r0, r3, r2
 800ba0a:	bd10      	pop	{r4, pc}
 800ba0c:	4610      	mov	r0, r2
 800ba0e:	e7fc      	b.n	800ba0a <strncmp+0x1e>

0800ba10 <_strtoul_l.isra.0>:
 800ba10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ba14:	4e3b      	ldr	r6, [pc, #236]	; (800bb04 <_strtoul_l.isra.0+0xf4>)
 800ba16:	4686      	mov	lr, r0
 800ba18:	468c      	mov	ip, r1
 800ba1a:	4660      	mov	r0, ip
 800ba1c:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ba20:	5da5      	ldrb	r5, [r4, r6]
 800ba22:	f015 0508 	ands.w	r5, r5, #8
 800ba26:	d1f8      	bne.n	800ba1a <_strtoul_l.isra.0+0xa>
 800ba28:	2c2d      	cmp	r4, #45	; 0x2d
 800ba2a:	d134      	bne.n	800ba96 <_strtoul_l.isra.0+0x86>
 800ba2c:	f89c 4000 	ldrb.w	r4, [ip]
 800ba30:	f04f 0801 	mov.w	r8, #1
 800ba34:	f100 0c02 	add.w	ip, r0, #2
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d05e      	beq.n	800bafa <_strtoul_l.isra.0+0xea>
 800ba3c:	2b10      	cmp	r3, #16
 800ba3e:	d10c      	bne.n	800ba5a <_strtoul_l.isra.0+0x4a>
 800ba40:	2c30      	cmp	r4, #48	; 0x30
 800ba42:	d10a      	bne.n	800ba5a <_strtoul_l.isra.0+0x4a>
 800ba44:	f89c 0000 	ldrb.w	r0, [ip]
 800ba48:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800ba4c:	2858      	cmp	r0, #88	; 0x58
 800ba4e:	d14f      	bne.n	800baf0 <_strtoul_l.isra.0+0xe0>
 800ba50:	f89c 4001 	ldrb.w	r4, [ip, #1]
 800ba54:	2310      	movs	r3, #16
 800ba56:	f10c 0c02 	add.w	ip, ip, #2
 800ba5a:	f04f 37ff 	mov.w	r7, #4294967295
 800ba5e:	2500      	movs	r5, #0
 800ba60:	fbb7 f7f3 	udiv	r7, r7, r3
 800ba64:	fb03 f907 	mul.w	r9, r3, r7
 800ba68:	ea6f 0909 	mvn.w	r9, r9
 800ba6c:	4628      	mov	r0, r5
 800ba6e:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
 800ba72:	2e09      	cmp	r6, #9
 800ba74:	d818      	bhi.n	800baa8 <_strtoul_l.isra.0+0x98>
 800ba76:	4634      	mov	r4, r6
 800ba78:	42a3      	cmp	r3, r4
 800ba7a:	dd24      	ble.n	800bac6 <_strtoul_l.isra.0+0xb6>
 800ba7c:	2d00      	cmp	r5, #0
 800ba7e:	db1f      	blt.n	800bac0 <_strtoul_l.isra.0+0xb0>
 800ba80:	4287      	cmp	r7, r0
 800ba82:	d31d      	bcc.n	800bac0 <_strtoul_l.isra.0+0xb0>
 800ba84:	d101      	bne.n	800ba8a <_strtoul_l.isra.0+0x7a>
 800ba86:	45a1      	cmp	r9, r4
 800ba88:	db1a      	blt.n	800bac0 <_strtoul_l.isra.0+0xb0>
 800ba8a:	fb00 4003 	mla	r0, r0, r3, r4
 800ba8e:	2501      	movs	r5, #1
 800ba90:	f81c 4b01 	ldrb.w	r4, [ip], #1
 800ba94:	e7eb      	b.n	800ba6e <_strtoul_l.isra.0+0x5e>
 800ba96:	2c2b      	cmp	r4, #43	; 0x2b
 800ba98:	bf08      	it	eq
 800ba9a:	f89c 4000 	ldrbeq.w	r4, [ip]
 800ba9e:	46a8      	mov	r8, r5
 800baa0:	bf08      	it	eq
 800baa2:	f100 0c02 	addeq.w	ip, r0, #2
 800baa6:	e7c7      	b.n	800ba38 <_strtoul_l.isra.0+0x28>
 800baa8:	f1a4 0641 	sub.w	r6, r4, #65	; 0x41
 800baac:	2e19      	cmp	r6, #25
 800baae:	d801      	bhi.n	800bab4 <_strtoul_l.isra.0+0xa4>
 800bab0:	3c37      	subs	r4, #55	; 0x37
 800bab2:	e7e1      	b.n	800ba78 <_strtoul_l.isra.0+0x68>
 800bab4:	f1a4 0661 	sub.w	r6, r4, #97	; 0x61
 800bab8:	2e19      	cmp	r6, #25
 800baba:	d804      	bhi.n	800bac6 <_strtoul_l.isra.0+0xb6>
 800babc:	3c57      	subs	r4, #87	; 0x57
 800babe:	e7db      	b.n	800ba78 <_strtoul_l.isra.0+0x68>
 800bac0:	f04f 35ff 	mov.w	r5, #4294967295
 800bac4:	e7e4      	b.n	800ba90 <_strtoul_l.isra.0+0x80>
 800bac6:	2d00      	cmp	r5, #0
 800bac8:	da07      	bge.n	800bada <_strtoul_l.isra.0+0xca>
 800baca:	2322      	movs	r3, #34	; 0x22
 800bacc:	f8ce 3000 	str.w	r3, [lr]
 800bad0:	f04f 30ff 	mov.w	r0, #4294967295
 800bad4:	b942      	cbnz	r2, 800bae8 <_strtoul_l.isra.0+0xd8>
 800bad6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bada:	f1b8 0f00 	cmp.w	r8, #0
 800bade:	d000      	beq.n	800bae2 <_strtoul_l.isra.0+0xd2>
 800bae0:	4240      	negs	r0, r0
 800bae2:	2a00      	cmp	r2, #0
 800bae4:	d0f7      	beq.n	800bad6 <_strtoul_l.isra.0+0xc6>
 800bae6:	b10d      	cbz	r5, 800baec <_strtoul_l.isra.0+0xdc>
 800bae8:	f10c 31ff 	add.w	r1, ip, #4294967295
 800baec:	6011      	str	r1, [r2, #0]
 800baee:	e7f2      	b.n	800bad6 <_strtoul_l.isra.0+0xc6>
 800baf0:	2430      	movs	r4, #48	; 0x30
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d1b1      	bne.n	800ba5a <_strtoul_l.isra.0+0x4a>
 800baf6:	2308      	movs	r3, #8
 800baf8:	e7af      	b.n	800ba5a <_strtoul_l.isra.0+0x4a>
 800bafa:	2c30      	cmp	r4, #48	; 0x30
 800bafc:	d0a2      	beq.n	800ba44 <_strtoul_l.isra.0+0x34>
 800bafe:	230a      	movs	r3, #10
 800bb00:	e7ab      	b.n	800ba5a <_strtoul_l.isra.0+0x4a>
 800bb02:	bf00      	nop
 800bb04:	0800cb91 	.word	0x0800cb91

0800bb08 <_strtoul_r>:
 800bb08:	f7ff bf82 	b.w	800ba10 <_strtoul_l.isra.0>

0800bb0c <__submore>:
 800bb0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb10:	460c      	mov	r4, r1
 800bb12:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800bb14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bb18:	4299      	cmp	r1, r3
 800bb1a:	d11d      	bne.n	800bb58 <__submore+0x4c>
 800bb1c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800bb20:	f7ff f898 	bl	800ac54 <_malloc_r>
 800bb24:	b918      	cbnz	r0, 800bb2e <__submore+0x22>
 800bb26:	f04f 30ff 	mov.w	r0, #4294967295
 800bb2a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bb32:	63a3      	str	r3, [r4, #56]	; 0x38
 800bb34:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800bb38:	6360      	str	r0, [r4, #52]	; 0x34
 800bb3a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800bb3e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800bb42:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800bb46:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800bb4a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800bb4e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800bb52:	6020      	str	r0, [r4, #0]
 800bb54:	2000      	movs	r0, #0
 800bb56:	e7e8      	b.n	800bb2a <__submore+0x1e>
 800bb58:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800bb5a:	0077      	lsls	r7, r6, #1
 800bb5c:	463a      	mov	r2, r7
 800bb5e:	f000 f89d 	bl	800bc9c <_realloc_r>
 800bb62:	4605      	mov	r5, r0
 800bb64:	2800      	cmp	r0, #0
 800bb66:	d0de      	beq.n	800bb26 <__submore+0x1a>
 800bb68:	eb00 0806 	add.w	r8, r0, r6
 800bb6c:	4601      	mov	r1, r0
 800bb6e:	4632      	mov	r2, r6
 800bb70:	4640      	mov	r0, r8
 800bb72:	f7fe fb47 	bl	800a204 <memcpy>
 800bb76:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800bb7a:	f8c4 8000 	str.w	r8, [r4]
 800bb7e:	e7e9      	b.n	800bb54 <__submore+0x48>

0800bb80 <__ascii_wctomb>:
 800bb80:	b149      	cbz	r1, 800bb96 <__ascii_wctomb+0x16>
 800bb82:	2aff      	cmp	r2, #255	; 0xff
 800bb84:	bf85      	ittet	hi
 800bb86:	238a      	movhi	r3, #138	; 0x8a
 800bb88:	6003      	strhi	r3, [r0, #0]
 800bb8a:	700a      	strbls	r2, [r1, #0]
 800bb8c:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb90:	bf98      	it	ls
 800bb92:	2001      	movls	r0, #1
 800bb94:	4770      	bx	lr
 800bb96:	4608      	mov	r0, r1
 800bb98:	4770      	bx	lr
	...

0800bb9c <__assert_func>:
 800bb9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bb9e:	4614      	mov	r4, r2
 800bba0:	461a      	mov	r2, r3
 800bba2:	4b09      	ldr	r3, [pc, #36]	; (800bbc8 <__assert_func+0x2c>)
 800bba4:	681b      	ldr	r3, [r3, #0]
 800bba6:	4605      	mov	r5, r0
 800bba8:	68d8      	ldr	r0, [r3, #12]
 800bbaa:	b14c      	cbz	r4, 800bbc0 <__assert_func+0x24>
 800bbac:	4b07      	ldr	r3, [pc, #28]	; (800bbcc <__assert_func+0x30>)
 800bbae:	9100      	str	r1, [sp, #0]
 800bbb0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800bbb4:	4906      	ldr	r1, [pc, #24]	; (800bbd0 <__assert_func+0x34>)
 800bbb6:	462b      	mov	r3, r5
 800bbb8:	f000 f80e 	bl	800bbd8 <fiprintf>
 800bbbc:	f000 f9ee 	bl	800bf9c <abort>
 800bbc0:	4b04      	ldr	r3, [pc, #16]	; (800bbd4 <__assert_func+0x38>)
 800bbc2:	461c      	mov	r4, r3
 800bbc4:	e7f3      	b.n	800bbae <__assert_func+0x12>
 800bbc6:	bf00      	nop
 800bbc8:	200001f8 	.word	0x200001f8
 800bbcc:	0800cf4a 	.word	0x0800cf4a
 800bbd0:	0800cf57 	.word	0x0800cf57
 800bbd4:	0800cf85 	.word	0x0800cf85

0800bbd8 <fiprintf>:
 800bbd8:	b40e      	push	{r1, r2, r3}
 800bbda:	b503      	push	{r0, r1, lr}
 800bbdc:	4601      	mov	r1, r0
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	4805      	ldr	r0, [pc, #20]	; (800bbf8 <fiprintf+0x20>)
 800bbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe6:	6800      	ldr	r0, [r0, #0]
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	f000 f8a7 	bl	800bd3c <_vfiprintf_r>
 800bbee:	b002      	add	sp, #8
 800bbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf4:	b003      	add	sp, #12
 800bbf6:	4770      	bx	lr
 800bbf8:	200001f8 	.word	0x200001f8

0800bbfc <_fstat_r>:
 800bbfc:	b538      	push	{r3, r4, r5, lr}
 800bbfe:	4d07      	ldr	r5, [pc, #28]	; (800bc1c <_fstat_r+0x20>)
 800bc00:	2300      	movs	r3, #0
 800bc02:	4604      	mov	r4, r0
 800bc04:	4608      	mov	r0, r1
 800bc06:	4611      	mov	r1, r2
 800bc08:	602b      	str	r3, [r5, #0]
 800bc0a:	f7f8 f846 	bl	8003c9a <_fstat>
 800bc0e:	1c43      	adds	r3, r0, #1
 800bc10:	d102      	bne.n	800bc18 <_fstat_r+0x1c>
 800bc12:	682b      	ldr	r3, [r5, #0]
 800bc14:	b103      	cbz	r3, 800bc18 <_fstat_r+0x1c>
 800bc16:	6023      	str	r3, [r4, #0]
 800bc18:	bd38      	pop	{r3, r4, r5, pc}
 800bc1a:	bf00      	nop
 800bc1c:	20000f68 	.word	0x20000f68

0800bc20 <_isatty_r>:
 800bc20:	b538      	push	{r3, r4, r5, lr}
 800bc22:	4d06      	ldr	r5, [pc, #24]	; (800bc3c <_isatty_r+0x1c>)
 800bc24:	2300      	movs	r3, #0
 800bc26:	4604      	mov	r4, r0
 800bc28:	4608      	mov	r0, r1
 800bc2a:	602b      	str	r3, [r5, #0]
 800bc2c:	f7f8 f845 	bl	8003cba <_isatty>
 800bc30:	1c43      	adds	r3, r0, #1
 800bc32:	d102      	bne.n	800bc3a <_isatty_r+0x1a>
 800bc34:	682b      	ldr	r3, [r5, #0]
 800bc36:	b103      	cbz	r3, 800bc3a <_isatty_r+0x1a>
 800bc38:	6023      	str	r3, [r4, #0]
 800bc3a:	bd38      	pop	{r3, r4, r5, pc}
 800bc3c:	20000f68 	.word	0x20000f68

0800bc40 <malloc>:
 800bc40:	4b02      	ldr	r3, [pc, #8]	; (800bc4c <malloc+0xc>)
 800bc42:	4601      	mov	r1, r0
 800bc44:	6818      	ldr	r0, [r3, #0]
 800bc46:	f7ff b805 	b.w	800ac54 <_malloc_r>
 800bc4a:	bf00      	nop
 800bc4c:	200001f8 	.word	0x200001f8

0800bc50 <memmove>:
 800bc50:	4288      	cmp	r0, r1
 800bc52:	b510      	push	{r4, lr}
 800bc54:	eb01 0402 	add.w	r4, r1, r2
 800bc58:	d902      	bls.n	800bc60 <memmove+0x10>
 800bc5a:	4284      	cmp	r4, r0
 800bc5c:	4623      	mov	r3, r4
 800bc5e:	d807      	bhi.n	800bc70 <memmove+0x20>
 800bc60:	1e43      	subs	r3, r0, #1
 800bc62:	42a1      	cmp	r1, r4
 800bc64:	d008      	beq.n	800bc78 <memmove+0x28>
 800bc66:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bc6a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bc6e:	e7f8      	b.n	800bc62 <memmove+0x12>
 800bc70:	4402      	add	r2, r0
 800bc72:	4601      	mov	r1, r0
 800bc74:	428a      	cmp	r2, r1
 800bc76:	d100      	bne.n	800bc7a <memmove+0x2a>
 800bc78:	bd10      	pop	{r4, pc}
 800bc7a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bc7e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bc82:	e7f7      	b.n	800bc74 <memmove+0x24>

0800bc84 <__malloc_lock>:
 800bc84:	4801      	ldr	r0, [pc, #4]	; (800bc8c <__malloc_lock+0x8>)
 800bc86:	f7fe ba32 	b.w	800a0ee <__retarget_lock_acquire_recursive>
 800bc8a:	bf00      	nop
 800bc8c:	20000f60 	.word	0x20000f60

0800bc90 <__malloc_unlock>:
 800bc90:	4801      	ldr	r0, [pc, #4]	; (800bc98 <__malloc_unlock+0x8>)
 800bc92:	f7fe ba2d 	b.w	800a0f0 <__retarget_lock_release_recursive>
 800bc96:	bf00      	nop
 800bc98:	20000f60 	.word	0x20000f60

0800bc9c <_realloc_r>:
 800bc9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc9e:	4607      	mov	r7, r0
 800bca0:	4614      	mov	r4, r2
 800bca2:	460e      	mov	r6, r1
 800bca4:	b921      	cbnz	r1, 800bcb0 <_realloc_r+0x14>
 800bca6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800bcaa:	4611      	mov	r1, r2
 800bcac:	f7fe bfd2 	b.w	800ac54 <_malloc_r>
 800bcb0:	b922      	cbnz	r2, 800bcbc <_realloc_r+0x20>
 800bcb2:	f7fe ff7f 	bl	800abb4 <_free_r>
 800bcb6:	4625      	mov	r5, r4
 800bcb8:	4628      	mov	r0, r5
 800bcba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bcbc:	f000 f975 	bl	800bfaa <_malloc_usable_size_r>
 800bcc0:	42a0      	cmp	r0, r4
 800bcc2:	d20f      	bcs.n	800bce4 <_realloc_r+0x48>
 800bcc4:	4621      	mov	r1, r4
 800bcc6:	4638      	mov	r0, r7
 800bcc8:	f7fe ffc4 	bl	800ac54 <_malloc_r>
 800bccc:	4605      	mov	r5, r0
 800bcce:	2800      	cmp	r0, #0
 800bcd0:	d0f2      	beq.n	800bcb8 <_realloc_r+0x1c>
 800bcd2:	4631      	mov	r1, r6
 800bcd4:	4622      	mov	r2, r4
 800bcd6:	f7fe fa95 	bl	800a204 <memcpy>
 800bcda:	4631      	mov	r1, r6
 800bcdc:	4638      	mov	r0, r7
 800bcde:	f7fe ff69 	bl	800abb4 <_free_r>
 800bce2:	e7e9      	b.n	800bcb8 <_realloc_r+0x1c>
 800bce4:	4635      	mov	r5, r6
 800bce6:	e7e7      	b.n	800bcb8 <_realloc_r+0x1c>

0800bce8 <__sfputc_r>:
 800bce8:	6893      	ldr	r3, [r2, #8]
 800bcea:	3b01      	subs	r3, #1
 800bcec:	2b00      	cmp	r3, #0
 800bcee:	b410      	push	{r4}
 800bcf0:	6093      	str	r3, [r2, #8]
 800bcf2:	da08      	bge.n	800bd06 <__sfputc_r+0x1e>
 800bcf4:	6994      	ldr	r4, [r2, #24]
 800bcf6:	42a3      	cmp	r3, r4
 800bcf8:	db01      	blt.n	800bcfe <__sfputc_r+0x16>
 800bcfa:	290a      	cmp	r1, #10
 800bcfc:	d103      	bne.n	800bd06 <__sfputc_r+0x1e>
 800bcfe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd02:	f7fd bbeb 	b.w	80094dc <__swbuf_r>
 800bd06:	6813      	ldr	r3, [r2, #0]
 800bd08:	1c58      	adds	r0, r3, #1
 800bd0a:	6010      	str	r0, [r2, #0]
 800bd0c:	7019      	strb	r1, [r3, #0]
 800bd0e:	4608      	mov	r0, r1
 800bd10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800bd14:	4770      	bx	lr

0800bd16 <__sfputs_r>:
 800bd16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd18:	4606      	mov	r6, r0
 800bd1a:	460f      	mov	r7, r1
 800bd1c:	4614      	mov	r4, r2
 800bd1e:	18d5      	adds	r5, r2, r3
 800bd20:	42ac      	cmp	r4, r5
 800bd22:	d101      	bne.n	800bd28 <__sfputs_r+0x12>
 800bd24:	2000      	movs	r0, #0
 800bd26:	e007      	b.n	800bd38 <__sfputs_r+0x22>
 800bd28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd2c:	463a      	mov	r2, r7
 800bd2e:	4630      	mov	r0, r6
 800bd30:	f7ff ffda 	bl	800bce8 <__sfputc_r>
 800bd34:	1c43      	adds	r3, r0, #1
 800bd36:	d1f3      	bne.n	800bd20 <__sfputs_r+0xa>
 800bd38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800bd3c <_vfiprintf_r>:
 800bd3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd40:	460d      	mov	r5, r1
 800bd42:	b09d      	sub	sp, #116	; 0x74
 800bd44:	4614      	mov	r4, r2
 800bd46:	4698      	mov	r8, r3
 800bd48:	4606      	mov	r6, r0
 800bd4a:	b118      	cbz	r0, 800bd54 <_vfiprintf_r+0x18>
 800bd4c:	6983      	ldr	r3, [r0, #24]
 800bd4e:	b90b      	cbnz	r3, 800bd54 <_vfiprintf_r+0x18>
 800bd50:	f7fd fdc0 	bl	80098d4 <__sinit>
 800bd54:	4b89      	ldr	r3, [pc, #548]	; (800bf7c <_vfiprintf_r+0x240>)
 800bd56:	429d      	cmp	r5, r3
 800bd58:	d11b      	bne.n	800bd92 <_vfiprintf_r+0x56>
 800bd5a:	6875      	ldr	r5, [r6, #4]
 800bd5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd5e:	07d9      	lsls	r1, r3, #31
 800bd60:	d405      	bmi.n	800bd6e <_vfiprintf_r+0x32>
 800bd62:	89ab      	ldrh	r3, [r5, #12]
 800bd64:	059a      	lsls	r2, r3, #22
 800bd66:	d402      	bmi.n	800bd6e <_vfiprintf_r+0x32>
 800bd68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bd6a:	f7fe f9c0 	bl	800a0ee <__retarget_lock_acquire_recursive>
 800bd6e:	89ab      	ldrh	r3, [r5, #12]
 800bd70:	071b      	lsls	r3, r3, #28
 800bd72:	d501      	bpl.n	800bd78 <_vfiprintf_r+0x3c>
 800bd74:	692b      	ldr	r3, [r5, #16]
 800bd76:	b9eb      	cbnz	r3, 800bdb4 <_vfiprintf_r+0x78>
 800bd78:	4629      	mov	r1, r5
 800bd7a:	4630      	mov	r0, r6
 800bd7c:	f7fd fc12 	bl	80095a4 <__swsetup_r>
 800bd80:	b1c0      	cbz	r0, 800bdb4 <_vfiprintf_r+0x78>
 800bd82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bd84:	07dc      	lsls	r4, r3, #31
 800bd86:	d50e      	bpl.n	800bda6 <_vfiprintf_r+0x6a>
 800bd88:	f04f 30ff 	mov.w	r0, #4294967295
 800bd8c:	b01d      	add	sp, #116	; 0x74
 800bd8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd92:	4b7b      	ldr	r3, [pc, #492]	; (800bf80 <_vfiprintf_r+0x244>)
 800bd94:	429d      	cmp	r5, r3
 800bd96:	d101      	bne.n	800bd9c <_vfiprintf_r+0x60>
 800bd98:	68b5      	ldr	r5, [r6, #8]
 800bd9a:	e7df      	b.n	800bd5c <_vfiprintf_r+0x20>
 800bd9c:	4b79      	ldr	r3, [pc, #484]	; (800bf84 <_vfiprintf_r+0x248>)
 800bd9e:	429d      	cmp	r5, r3
 800bda0:	bf08      	it	eq
 800bda2:	68f5      	ldreq	r5, [r6, #12]
 800bda4:	e7da      	b.n	800bd5c <_vfiprintf_r+0x20>
 800bda6:	89ab      	ldrh	r3, [r5, #12]
 800bda8:	0598      	lsls	r0, r3, #22
 800bdaa:	d4ed      	bmi.n	800bd88 <_vfiprintf_r+0x4c>
 800bdac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bdae:	f7fe f99f 	bl	800a0f0 <__retarget_lock_release_recursive>
 800bdb2:	e7e9      	b.n	800bd88 <_vfiprintf_r+0x4c>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	9309      	str	r3, [sp, #36]	; 0x24
 800bdb8:	2320      	movs	r3, #32
 800bdba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bdbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800bdc2:	2330      	movs	r3, #48	; 0x30
 800bdc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800bf88 <_vfiprintf_r+0x24c>
 800bdc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bdcc:	f04f 0901 	mov.w	r9, #1
 800bdd0:	4623      	mov	r3, r4
 800bdd2:	469a      	mov	sl, r3
 800bdd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bdd8:	b10a      	cbz	r2, 800bdde <_vfiprintf_r+0xa2>
 800bdda:	2a25      	cmp	r2, #37	; 0x25
 800bddc:	d1f9      	bne.n	800bdd2 <_vfiprintf_r+0x96>
 800bdde:	ebba 0b04 	subs.w	fp, sl, r4
 800bde2:	d00b      	beq.n	800bdfc <_vfiprintf_r+0xc0>
 800bde4:	465b      	mov	r3, fp
 800bde6:	4622      	mov	r2, r4
 800bde8:	4629      	mov	r1, r5
 800bdea:	4630      	mov	r0, r6
 800bdec:	f7ff ff93 	bl	800bd16 <__sfputs_r>
 800bdf0:	3001      	adds	r0, #1
 800bdf2:	f000 80aa 	beq.w	800bf4a <_vfiprintf_r+0x20e>
 800bdf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bdf8:	445a      	add	r2, fp
 800bdfa:	9209      	str	r2, [sp, #36]	; 0x24
 800bdfc:	f89a 3000 	ldrb.w	r3, [sl]
 800be00:	2b00      	cmp	r3, #0
 800be02:	f000 80a2 	beq.w	800bf4a <_vfiprintf_r+0x20e>
 800be06:	2300      	movs	r3, #0
 800be08:	f04f 32ff 	mov.w	r2, #4294967295
 800be0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800be10:	f10a 0a01 	add.w	sl, sl, #1
 800be14:	9304      	str	r3, [sp, #16]
 800be16:	9307      	str	r3, [sp, #28]
 800be18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800be1c:	931a      	str	r3, [sp, #104]	; 0x68
 800be1e:	4654      	mov	r4, sl
 800be20:	2205      	movs	r2, #5
 800be22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be26:	4858      	ldr	r0, [pc, #352]	; (800bf88 <_vfiprintf_r+0x24c>)
 800be28:	f7f4 f9da 	bl	80001e0 <memchr>
 800be2c:	9a04      	ldr	r2, [sp, #16]
 800be2e:	b9d8      	cbnz	r0, 800be68 <_vfiprintf_r+0x12c>
 800be30:	06d1      	lsls	r1, r2, #27
 800be32:	bf44      	itt	mi
 800be34:	2320      	movmi	r3, #32
 800be36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be3a:	0713      	lsls	r3, r2, #28
 800be3c:	bf44      	itt	mi
 800be3e:	232b      	movmi	r3, #43	; 0x2b
 800be40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800be44:	f89a 3000 	ldrb.w	r3, [sl]
 800be48:	2b2a      	cmp	r3, #42	; 0x2a
 800be4a:	d015      	beq.n	800be78 <_vfiprintf_r+0x13c>
 800be4c:	9a07      	ldr	r2, [sp, #28]
 800be4e:	4654      	mov	r4, sl
 800be50:	2000      	movs	r0, #0
 800be52:	f04f 0c0a 	mov.w	ip, #10
 800be56:	4621      	mov	r1, r4
 800be58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800be5c:	3b30      	subs	r3, #48	; 0x30
 800be5e:	2b09      	cmp	r3, #9
 800be60:	d94e      	bls.n	800bf00 <_vfiprintf_r+0x1c4>
 800be62:	b1b0      	cbz	r0, 800be92 <_vfiprintf_r+0x156>
 800be64:	9207      	str	r2, [sp, #28]
 800be66:	e014      	b.n	800be92 <_vfiprintf_r+0x156>
 800be68:	eba0 0308 	sub.w	r3, r0, r8
 800be6c:	fa09 f303 	lsl.w	r3, r9, r3
 800be70:	4313      	orrs	r3, r2
 800be72:	9304      	str	r3, [sp, #16]
 800be74:	46a2      	mov	sl, r4
 800be76:	e7d2      	b.n	800be1e <_vfiprintf_r+0xe2>
 800be78:	9b03      	ldr	r3, [sp, #12]
 800be7a:	1d19      	adds	r1, r3, #4
 800be7c:	681b      	ldr	r3, [r3, #0]
 800be7e:	9103      	str	r1, [sp, #12]
 800be80:	2b00      	cmp	r3, #0
 800be82:	bfbb      	ittet	lt
 800be84:	425b      	neglt	r3, r3
 800be86:	f042 0202 	orrlt.w	r2, r2, #2
 800be8a:	9307      	strge	r3, [sp, #28]
 800be8c:	9307      	strlt	r3, [sp, #28]
 800be8e:	bfb8      	it	lt
 800be90:	9204      	strlt	r2, [sp, #16]
 800be92:	7823      	ldrb	r3, [r4, #0]
 800be94:	2b2e      	cmp	r3, #46	; 0x2e
 800be96:	d10c      	bne.n	800beb2 <_vfiprintf_r+0x176>
 800be98:	7863      	ldrb	r3, [r4, #1]
 800be9a:	2b2a      	cmp	r3, #42	; 0x2a
 800be9c:	d135      	bne.n	800bf0a <_vfiprintf_r+0x1ce>
 800be9e:	9b03      	ldr	r3, [sp, #12]
 800bea0:	1d1a      	adds	r2, r3, #4
 800bea2:	681b      	ldr	r3, [r3, #0]
 800bea4:	9203      	str	r2, [sp, #12]
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	bfb8      	it	lt
 800beaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800beae:	3402      	adds	r4, #2
 800beb0:	9305      	str	r3, [sp, #20]
 800beb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800bf98 <_vfiprintf_r+0x25c>
 800beb6:	7821      	ldrb	r1, [r4, #0]
 800beb8:	2203      	movs	r2, #3
 800beba:	4650      	mov	r0, sl
 800bebc:	f7f4 f990 	bl	80001e0 <memchr>
 800bec0:	b140      	cbz	r0, 800bed4 <_vfiprintf_r+0x198>
 800bec2:	2340      	movs	r3, #64	; 0x40
 800bec4:	eba0 000a 	sub.w	r0, r0, sl
 800bec8:	fa03 f000 	lsl.w	r0, r3, r0
 800becc:	9b04      	ldr	r3, [sp, #16]
 800bece:	4303      	orrs	r3, r0
 800bed0:	3401      	adds	r4, #1
 800bed2:	9304      	str	r3, [sp, #16]
 800bed4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bed8:	482c      	ldr	r0, [pc, #176]	; (800bf8c <_vfiprintf_r+0x250>)
 800beda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bede:	2206      	movs	r2, #6
 800bee0:	f7f4 f97e 	bl	80001e0 <memchr>
 800bee4:	2800      	cmp	r0, #0
 800bee6:	d03f      	beq.n	800bf68 <_vfiprintf_r+0x22c>
 800bee8:	4b29      	ldr	r3, [pc, #164]	; (800bf90 <_vfiprintf_r+0x254>)
 800beea:	bb1b      	cbnz	r3, 800bf34 <_vfiprintf_r+0x1f8>
 800beec:	9b03      	ldr	r3, [sp, #12]
 800beee:	3307      	adds	r3, #7
 800bef0:	f023 0307 	bic.w	r3, r3, #7
 800bef4:	3308      	adds	r3, #8
 800bef6:	9303      	str	r3, [sp, #12]
 800bef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800befa:	443b      	add	r3, r7
 800befc:	9309      	str	r3, [sp, #36]	; 0x24
 800befe:	e767      	b.n	800bdd0 <_vfiprintf_r+0x94>
 800bf00:	fb0c 3202 	mla	r2, ip, r2, r3
 800bf04:	460c      	mov	r4, r1
 800bf06:	2001      	movs	r0, #1
 800bf08:	e7a5      	b.n	800be56 <_vfiprintf_r+0x11a>
 800bf0a:	2300      	movs	r3, #0
 800bf0c:	3401      	adds	r4, #1
 800bf0e:	9305      	str	r3, [sp, #20]
 800bf10:	4619      	mov	r1, r3
 800bf12:	f04f 0c0a 	mov.w	ip, #10
 800bf16:	4620      	mov	r0, r4
 800bf18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bf1c:	3a30      	subs	r2, #48	; 0x30
 800bf1e:	2a09      	cmp	r2, #9
 800bf20:	d903      	bls.n	800bf2a <_vfiprintf_r+0x1ee>
 800bf22:	2b00      	cmp	r3, #0
 800bf24:	d0c5      	beq.n	800beb2 <_vfiprintf_r+0x176>
 800bf26:	9105      	str	r1, [sp, #20]
 800bf28:	e7c3      	b.n	800beb2 <_vfiprintf_r+0x176>
 800bf2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800bf2e:	4604      	mov	r4, r0
 800bf30:	2301      	movs	r3, #1
 800bf32:	e7f0      	b.n	800bf16 <_vfiprintf_r+0x1da>
 800bf34:	ab03      	add	r3, sp, #12
 800bf36:	9300      	str	r3, [sp, #0]
 800bf38:	462a      	mov	r2, r5
 800bf3a:	4b16      	ldr	r3, [pc, #88]	; (800bf94 <_vfiprintf_r+0x258>)
 800bf3c:	a904      	add	r1, sp, #16
 800bf3e:	4630      	mov	r0, r6
 800bf40:	f3af 8000 	nop.w
 800bf44:	4607      	mov	r7, r0
 800bf46:	1c78      	adds	r0, r7, #1
 800bf48:	d1d6      	bne.n	800bef8 <_vfiprintf_r+0x1bc>
 800bf4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800bf4c:	07d9      	lsls	r1, r3, #31
 800bf4e:	d405      	bmi.n	800bf5c <_vfiprintf_r+0x220>
 800bf50:	89ab      	ldrh	r3, [r5, #12]
 800bf52:	059a      	lsls	r2, r3, #22
 800bf54:	d402      	bmi.n	800bf5c <_vfiprintf_r+0x220>
 800bf56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800bf58:	f7fe f8ca 	bl	800a0f0 <__retarget_lock_release_recursive>
 800bf5c:	89ab      	ldrh	r3, [r5, #12]
 800bf5e:	065b      	lsls	r3, r3, #25
 800bf60:	f53f af12 	bmi.w	800bd88 <_vfiprintf_r+0x4c>
 800bf64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bf66:	e711      	b.n	800bd8c <_vfiprintf_r+0x50>
 800bf68:	ab03      	add	r3, sp, #12
 800bf6a:	9300      	str	r3, [sp, #0]
 800bf6c:	462a      	mov	r2, r5
 800bf6e:	4b09      	ldr	r3, [pc, #36]	; (800bf94 <_vfiprintf_r+0x258>)
 800bf70:	a904      	add	r1, sp, #16
 800bf72:	4630      	mov	r0, r6
 800bf74:	f7ff fa64 	bl	800b440 <_printf_i>
 800bf78:	e7e4      	b.n	800bf44 <_vfiprintf_r+0x208>
 800bf7a:	bf00      	nop
 800bf7c:	0800ccb4 	.word	0x0800ccb4
 800bf80:	0800ccd4 	.word	0x0800ccd4
 800bf84:	0800cc94 	.word	0x0800cc94
 800bf88:	0800cefc 	.word	0x0800cefc
 800bf8c:	0800cf06 	.word	0x0800cf06
 800bf90:	00000000 	.word	0x00000000
 800bf94:	0800bd17 	.word	0x0800bd17
 800bf98:	0800cf02 	.word	0x0800cf02

0800bf9c <abort>:
 800bf9c:	b508      	push	{r3, lr}
 800bf9e:	2006      	movs	r0, #6
 800bfa0:	f000 f834 	bl	800c00c <raise>
 800bfa4:	2001      	movs	r0, #1
 800bfa6:	f7f7 fe45 	bl	8003c34 <_exit>

0800bfaa <_malloc_usable_size_r>:
 800bfaa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfae:	1f18      	subs	r0, r3, #4
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	bfbc      	itt	lt
 800bfb4:	580b      	ldrlt	r3, [r1, r0]
 800bfb6:	18c0      	addlt	r0, r0, r3
 800bfb8:	4770      	bx	lr

0800bfba <_raise_r>:
 800bfba:	291f      	cmp	r1, #31
 800bfbc:	b538      	push	{r3, r4, r5, lr}
 800bfbe:	4604      	mov	r4, r0
 800bfc0:	460d      	mov	r5, r1
 800bfc2:	d904      	bls.n	800bfce <_raise_r+0x14>
 800bfc4:	2316      	movs	r3, #22
 800bfc6:	6003      	str	r3, [r0, #0]
 800bfc8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfcc:	bd38      	pop	{r3, r4, r5, pc}
 800bfce:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800bfd0:	b112      	cbz	r2, 800bfd8 <_raise_r+0x1e>
 800bfd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bfd6:	b94b      	cbnz	r3, 800bfec <_raise_r+0x32>
 800bfd8:	4620      	mov	r0, r4
 800bfda:	f000 f831 	bl	800c040 <_getpid_r>
 800bfde:	462a      	mov	r2, r5
 800bfe0:	4601      	mov	r1, r0
 800bfe2:	4620      	mov	r0, r4
 800bfe4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bfe8:	f000 b818 	b.w	800c01c <_kill_r>
 800bfec:	2b01      	cmp	r3, #1
 800bfee:	d00a      	beq.n	800c006 <_raise_r+0x4c>
 800bff0:	1c59      	adds	r1, r3, #1
 800bff2:	d103      	bne.n	800bffc <_raise_r+0x42>
 800bff4:	2316      	movs	r3, #22
 800bff6:	6003      	str	r3, [r0, #0]
 800bff8:	2001      	movs	r0, #1
 800bffa:	e7e7      	b.n	800bfcc <_raise_r+0x12>
 800bffc:	2400      	movs	r4, #0
 800bffe:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c002:	4628      	mov	r0, r5
 800c004:	4798      	blx	r3
 800c006:	2000      	movs	r0, #0
 800c008:	e7e0      	b.n	800bfcc <_raise_r+0x12>
	...

0800c00c <raise>:
 800c00c:	4b02      	ldr	r3, [pc, #8]	; (800c018 <raise+0xc>)
 800c00e:	4601      	mov	r1, r0
 800c010:	6818      	ldr	r0, [r3, #0]
 800c012:	f7ff bfd2 	b.w	800bfba <_raise_r>
 800c016:	bf00      	nop
 800c018:	200001f8 	.word	0x200001f8

0800c01c <_kill_r>:
 800c01c:	b538      	push	{r3, r4, r5, lr}
 800c01e:	4d07      	ldr	r5, [pc, #28]	; (800c03c <_kill_r+0x20>)
 800c020:	2300      	movs	r3, #0
 800c022:	4604      	mov	r4, r0
 800c024:	4608      	mov	r0, r1
 800c026:	4611      	mov	r1, r2
 800c028:	602b      	str	r3, [r5, #0]
 800c02a:	f7f7 fdf3 	bl	8003c14 <_kill>
 800c02e:	1c43      	adds	r3, r0, #1
 800c030:	d102      	bne.n	800c038 <_kill_r+0x1c>
 800c032:	682b      	ldr	r3, [r5, #0]
 800c034:	b103      	cbz	r3, 800c038 <_kill_r+0x1c>
 800c036:	6023      	str	r3, [r4, #0]
 800c038:	bd38      	pop	{r3, r4, r5, pc}
 800c03a:	bf00      	nop
 800c03c:	20000f68 	.word	0x20000f68

0800c040 <_getpid_r>:
 800c040:	f7f7 bde0 	b.w	8003c04 <_getpid>

0800c044 <_init>:
 800c044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c046:	bf00      	nop
 800c048:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c04a:	bc08      	pop	{r3}
 800c04c:	469e      	mov	lr, r3
 800c04e:	4770      	bx	lr

0800c050 <_fini>:
 800c050:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c052:	bf00      	nop
 800c054:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c056:	bc08      	pop	{r3}
 800c058:	469e      	mov	lr, r3
 800c05a:	4770      	bx	lr
