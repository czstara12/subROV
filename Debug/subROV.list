
subROV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007540  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  080076c8  080076c8  000176c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d0  080081d0  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081d8  080081d8  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d8  080081d8  000181d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081dc  080081dc  000181dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  080081e0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a30  20000244  08008424  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c74  08008424  00020c74  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001380f  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002c49  00000000  00000000  00033a83  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001150  00000000  00000000  000366d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000fe8  00000000  00000000  00037820  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b5a  00000000  00000000  00038808  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000e2e1  00000000  00000000  0005a362  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c6d9e  00000000  00000000  00068643  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012f3e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cdc  00000000  00000000  0012f45c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000244 	.word	0x20000244
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080076b0 	.word	0x080076b0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000248 	.word	0x20000248
 80001c4:	080076b0 	.word	0x080076b0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <PID_init>:
};
//Roll,Pitch,Yaw,z x y
float target_ver[6];
int pidinit = 0;
void PID_init()
{
 80004c8:	b480      	push	{r7}
 80004ca:	af00      	add	r7, sp, #0
    target_ver[0] = 0;
 80004cc:	4b09      	ldr	r3, [pc, #36]	; (80004f4 <PID_init+0x2c>)
 80004ce:	f04f 0200 	mov.w	r2, #0
 80004d2:	601a      	str	r2, [r3, #0]
    target_ver[1] = 0;
 80004d4:	4b07      	ldr	r3, [pc, #28]	; (80004f4 <PID_init+0x2c>)
 80004d6:	f04f 0200 	mov.w	r2, #0
 80004da:	605a      	str	r2, [r3, #4]
    target_ver[2] = yaw;
 80004dc:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <PID_init+0x30>)
 80004de:	681b      	ldr	r3, [r3, #0]
 80004e0:	4a04      	ldr	r2, [pc, #16]	; (80004f4 <PID_init+0x2c>)
 80004e2:	6093      	str	r3, [r2, #8]
    pidinit = 1;
 80004e4:	4b05      	ldr	r3, [pc, #20]	; (80004fc <PID_init+0x34>)
 80004e6:	2201      	movs	r2, #1
 80004e8:	601a      	str	r2, [r3, #0]
}
 80004ea:	bf00      	nop
 80004ec:	46bd      	mov	sp, r7
 80004ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f2:	4770      	bx	lr
 80004f4:	200002c8 	.word	0x200002c8
 80004f8:	20000340 	.word	0x20000340
 80004fc:	20000260 	.word	0x20000260

08000500 <PID_CTRL>:

void PID_CTRL() //综合控制 encodeL左侧编码器 encodeR右侧编码器
{
 8000500:	b480      	push	{r7}
 8000502:	b089      	sub	sp, #36	; 0x24
 8000504:	af00      	add	r7, sp, #0
    //out += Kpr * (err - err1) + Tir * err+Tdr*(err-2*err1+err2); //
    //增量式PID方程 输出=输出+P*(本次误差-上次误差)+I*本次误差
    float err[6];

    if(target_ver[2] > 180)
 8000506:	4b96      	ldr	r3, [pc, #600]	; (8000760 <PID_CTRL+0x260>)
 8000508:	edd3 7a02 	vldr	s15, [r3, #8]
 800050c:	ed9f 7a95 	vldr	s14, [pc, #596]	; 8000764 <PID_CTRL+0x264>
 8000510:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000514:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000518:	dd09      	ble.n	800052e <PID_CTRL+0x2e>
        target_ver[2] -= 360;
 800051a:	4b91      	ldr	r3, [pc, #580]	; (8000760 <PID_CTRL+0x260>)
 800051c:	edd3 7a02 	vldr	s15, [r3, #8]
 8000520:	ed9f 7a91 	vldr	s14, [pc, #580]	; 8000768 <PID_CTRL+0x268>
 8000524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000528:	4b8d      	ldr	r3, [pc, #564]	; (8000760 <PID_CTRL+0x260>)
 800052a:	edc3 7a02 	vstr	s15, [r3, #8]
    if(target_ver[2] < -180)
 800052e:	4b8c      	ldr	r3, [pc, #560]	; (8000760 <PID_CTRL+0x260>)
 8000530:	edd3 7a02 	vldr	s15, [r3, #8]
 8000534:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800076c <PID_CTRL+0x26c>
 8000538:	eef4 7ac7 	vcmpe.f32	s15, s14
 800053c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000540:	d509      	bpl.n	8000556 <PID_CTRL+0x56>
        target_ver[2] += 360;
 8000542:	4b87      	ldr	r3, [pc, #540]	; (8000760 <PID_CTRL+0x260>)
 8000544:	edd3 7a02 	vldr	s15, [r3, #8]
 8000548:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8000768 <PID_CTRL+0x268>
 800054c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000550:	4b83      	ldr	r3, [pc, #524]	; (8000760 <PID_CTRL+0x260>)
 8000552:	edc3 7a02 	vstr	s15, [r3, #8]

    err[0] = target_ver[0] - roll; //求误差
 8000556:	4b82      	ldr	r3, [pc, #520]	; (8000760 <PID_CTRL+0x260>)
 8000558:	ed93 7a00 	vldr	s14, [r3]
 800055c:	4b84      	ldr	r3, [pc, #528]	; (8000770 <PID_CTRL+0x270>)
 800055e:	edd3 7a00 	vldr	s15, [r3]
 8000562:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000566:	edc7 7a01 	vstr	s15, [r7, #4]
    err[1] = target_ver[1] - pitch; //求误差
 800056a:	4b7d      	ldr	r3, [pc, #500]	; (8000760 <PID_CTRL+0x260>)
 800056c:	ed93 7a01 	vldr	s14, [r3, #4]
 8000570:	4b80      	ldr	r3, [pc, #512]	; (8000774 <PID_CTRL+0x274>)
 8000572:	edd3 7a00 	vldr	s15, [r3]
 8000576:	ee77 7a67 	vsub.f32	s15, s14, s15
 800057a:	edc7 7a02 	vstr	s15, [r7, #8]
    err[2] = target_ver[2] - yaw; //求误差
 800057e:	4b78      	ldr	r3, [pc, #480]	; (8000760 <PID_CTRL+0x260>)
 8000580:	ed93 7a02 	vldr	s14, [r3, #8]
 8000584:	4b7c      	ldr	r3, [pc, #496]	; (8000778 <PID_CTRL+0x278>)
 8000586:	edd3 7a00 	vldr	s15, [r3]
 800058a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800058e:	edc7 7a03 	vstr	s15, [r7, #12]

    if(err[2] > 180)
 8000592:	edd7 7a03 	vldr	s15, [r7, #12]
 8000596:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000764 <PID_CTRL+0x264>
 800059a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800059e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005a2:	dd07      	ble.n	80005b4 <PID_CTRL+0xb4>
        err[2] -= 360;
 80005a4:	edd7 7a03 	vldr	s15, [r7, #12]
 80005a8:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000768 <PID_CTRL+0x268>
 80005ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80005b0:	edc7 7a03 	vstr	s15, [r7, #12]
    if(err[2] < -180)
 80005b4:	edd7 7a03 	vldr	s15, [r7, #12]
 80005b8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800076c <PID_CTRL+0x26c>
 80005bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80005c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80005c4:	d507      	bpl.n	80005d6 <PID_CTRL+0xd6>
        err[2] += 360;
 80005c6:	edd7 7a03 	vldr	s15, [r7, #12]
 80005ca:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000768 <PID_CTRL+0x268>
 80005ce:	ee77 7a87 	vadd.f32	s15, s15, s14
 80005d2:	edc7 7a03 	vstr	s15, [r7, #12]

    err[3] = target_ver[3]; //求误差
 80005d6:	4b62      	ldr	r3, [pc, #392]	; (8000760 <PID_CTRL+0x260>)
 80005d8:	68db      	ldr	r3, [r3, #12]
 80005da:	613b      	str	r3, [r7, #16]
    err[4] = target_ver[4]; //求误差
 80005dc:	4b60      	ldr	r3, [pc, #384]	; (8000760 <PID_CTRL+0x260>)
 80005de:	691b      	ldr	r3, [r3, #16]
 80005e0:	617b      	str	r3, [r7, #20]
    err[5] = target_ver[5]; //求误差
 80005e2:	4b5f      	ldr	r3, [pc, #380]	; (8000760 <PID_CTRL+0x260>)
 80005e4:	695b      	ldr	r3, [r3, #20]
 80005e6:	61bb      	str	r3, [r7, #24]
    for(int i = 0; i < 6; i++)
 80005e8:	2300      	movs	r3, #0
 80005ea:	61fb      	str	r3, [r7, #28]
 80005ec:	e0ad      	b.n	800074a <PID_CTRL+0x24a>
    {
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4])
 80005ee:	4963      	ldr	r1, [pc, #396]	; (800077c <PID_CTRL+0x27c>)
 80005f0:	69fa      	ldr	r2, [r7, #28]
 80005f2:	4613      	mov	r3, r2
 80005f4:	00db      	lsls	r3, r3, #3
 80005f6:	1a9b      	subs	r3, r3, r2
 80005f8:	009b      	lsls	r3, r3, #2
 80005fa:	440b      	add	r3, r1
 80005fc:	330c      	adds	r3, #12
 80005fe:	ed93 7a00 	vldr	s14, [r3]
 8000602:	495e      	ldr	r1, [pc, #376]	; (800077c <PID_CTRL+0x27c>)
 8000604:	69fa      	ldr	r2, [r7, #28]
 8000606:	4613      	mov	r3, r2
 8000608:	00db      	lsls	r3, r3, #3
 800060a:	1a9b      	subs	r3, r3, r2
 800060c:	009b      	lsls	r3, r3, #2
 800060e:	440b      	add	r3, r1
 8000610:	edd3 6a00 	vldr	s13, [r3]
 8000614:	69fb      	ldr	r3, [r7, #28]
 8000616:	009b      	lsls	r3, r3, #2
 8000618:	f107 0220 	add.w	r2, r7, #32
 800061c:	4413      	add	r3, r2
 800061e:	3b1c      	subs	r3, #28
 8000620:	ed93 6a00 	vldr	s12, [r3]
 8000624:	4955      	ldr	r1, [pc, #340]	; (800077c <PID_CTRL+0x27c>)
 8000626:	69fa      	ldr	r2, [r7, #28]
 8000628:	4613      	mov	r3, r2
 800062a:	00db      	lsls	r3, r3, #3
 800062c:	1a9b      	subs	r3, r3, r2
 800062e:	009b      	lsls	r3, r3, #2
 8000630:	440b      	add	r3, r1
 8000632:	3310      	adds	r3, #16
 8000634:	edd3 7a00 	vldr	s15, [r3]
 8000638:	ee76 7a67 	vsub.f32	s15, s12, s15
 800063c:	ee66 6aa7 	vmul.f32	s13, s13, s15
                         + pid_ver[i][1] * err[i]
 8000640:	494e      	ldr	r1, [pc, #312]	; (800077c <PID_CTRL+0x27c>)
 8000642:	69fa      	ldr	r2, [r7, #28]
 8000644:	4613      	mov	r3, r2
 8000646:	00db      	lsls	r3, r3, #3
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	009b      	lsls	r3, r3, #2
 800064c:	440b      	add	r3, r1
 800064e:	3304      	adds	r3, #4
 8000650:	ed93 6a00 	vldr	s12, [r3]
 8000654:	69fb      	ldr	r3, [r7, #28]
 8000656:	009b      	lsls	r3, r3, #2
 8000658:	f107 0220 	add.w	r2, r7, #32
 800065c:	4413      	add	r3, r2
 800065e:	3b1c      	subs	r3, #28
 8000660:	edd3 7a00 	vldr	s15, [r3]
 8000664:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000668:	ee76 6aa7 	vadd.f32	s13, s13, s15
                         + pid_ver[i][2] * (err[i] - 2 * pid_ver[i][5] + pid_ver[i][5]);
 800066c:	4943      	ldr	r1, [pc, #268]	; (800077c <PID_CTRL+0x27c>)
 800066e:	69fa      	ldr	r2, [r7, #28]
 8000670:	4613      	mov	r3, r2
 8000672:	00db      	lsls	r3, r3, #3
 8000674:	1a9b      	subs	r3, r3, r2
 8000676:	009b      	lsls	r3, r3, #2
 8000678:	440b      	add	r3, r1
 800067a:	3308      	adds	r3, #8
 800067c:	ed93 6a00 	vldr	s12, [r3]
 8000680:	69fb      	ldr	r3, [r7, #28]
 8000682:	009b      	lsls	r3, r3, #2
 8000684:	f107 0220 	add.w	r2, r7, #32
 8000688:	4413      	add	r3, r2
 800068a:	3b1c      	subs	r3, #28
 800068c:	edd3 5a00 	vldr	s11, [r3]
 8000690:	493a      	ldr	r1, [pc, #232]	; (800077c <PID_CTRL+0x27c>)
 8000692:	69fa      	ldr	r2, [r7, #28]
 8000694:	4613      	mov	r3, r2
 8000696:	00db      	lsls	r3, r3, #3
 8000698:	1a9b      	subs	r3, r3, r2
 800069a:	009b      	lsls	r3, r3, #2
 800069c:	440b      	add	r3, r1
 800069e:	3314      	adds	r3, #20
 80006a0:	edd3 7a00 	vldr	s15, [r3]
 80006a4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80006a8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 80006ac:	4933      	ldr	r1, [pc, #204]	; (800077c <PID_CTRL+0x27c>)
 80006ae:	69fa      	ldr	r2, [r7, #28]
 80006b0:	4613      	mov	r3, r2
 80006b2:	00db      	lsls	r3, r3, #3
 80006b4:	1a9b      	subs	r3, r3, r2
 80006b6:	009b      	lsls	r3, r3, #2
 80006b8:	440b      	add	r3, r1
 80006ba:	3314      	adds	r3, #20
 80006bc:	edd3 7a00 	vldr	s15, [r3]
 80006c0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 80006c4:	ee66 7a27 	vmul.f32	s15, s12, s15
 80006c8:	ee76 7aa7 	vadd.f32	s15, s13, s15
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4])
 80006cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80006d0:	492a      	ldr	r1, [pc, #168]	; (800077c <PID_CTRL+0x27c>)
 80006d2:	69fa      	ldr	r2, [r7, #28]
 80006d4:	4613      	mov	r3, r2
 80006d6:	00db      	lsls	r3, r3, #3
 80006d8:	1a9b      	subs	r3, r3, r2
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	440b      	add	r3, r1
 80006de:	330c      	adds	r3, #12
 80006e0:	edc3 7a00 	vstr	s15, [r3]
        dof6[i] = pid_ver[i][3]; //输出到6自由度
 80006e4:	4925      	ldr	r1, [pc, #148]	; (800077c <PID_CTRL+0x27c>)
 80006e6:	69fa      	ldr	r2, [r7, #28]
 80006e8:	4613      	mov	r3, r2
 80006ea:	00db      	lsls	r3, r3, #3
 80006ec:	1a9b      	subs	r3, r3, r2
 80006ee:	009b      	lsls	r3, r3, #2
 80006f0:	440b      	add	r3, r1
 80006f2:	330c      	adds	r3, #12
 80006f4:	681a      	ldr	r2, [r3, #0]
 80006f6:	4922      	ldr	r1, [pc, #136]	; (8000780 <PID_CTRL+0x280>)
 80006f8:	69fb      	ldr	r3, [r7, #28]
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	440b      	add	r3, r1
 80006fe:	601a      	str	r2, [r3, #0]
        pid_ver[i][5] = pid_ver[i][4];//更新上上次误差
 8000700:	491e      	ldr	r1, [pc, #120]	; (800077c <PID_CTRL+0x27c>)
 8000702:	69fa      	ldr	r2, [r7, #28]
 8000704:	4613      	mov	r3, r2
 8000706:	00db      	lsls	r3, r3, #3
 8000708:	1a9b      	subs	r3, r3, r2
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	440b      	add	r3, r1
 800070e:	3310      	adds	r3, #16
 8000710:	6819      	ldr	r1, [r3, #0]
 8000712:	481a      	ldr	r0, [pc, #104]	; (800077c <PID_CTRL+0x27c>)
 8000714:	69fa      	ldr	r2, [r7, #28]
 8000716:	4613      	mov	r3, r2
 8000718:	00db      	lsls	r3, r3, #3
 800071a:	1a9b      	subs	r3, r3, r2
 800071c:	009b      	lsls	r3, r3, #2
 800071e:	4403      	add	r3, r0
 8000720:	3314      	adds	r3, #20
 8000722:	6019      	str	r1, [r3, #0]
        pid_ver[i][4] = err[i];//更新上次误差
 8000724:	69fb      	ldr	r3, [r7, #28]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	f107 0220 	add.w	r2, r7, #32
 800072c:	4413      	add	r3, r2
 800072e:	3b1c      	subs	r3, #28
 8000730:	6819      	ldr	r1, [r3, #0]
 8000732:	4812      	ldr	r0, [pc, #72]	; (800077c <PID_CTRL+0x27c>)
 8000734:	69fa      	ldr	r2, [r7, #28]
 8000736:	4613      	mov	r3, r2
 8000738:	00db      	lsls	r3, r3, #3
 800073a:	1a9b      	subs	r3, r3, r2
 800073c:	009b      	lsls	r3, r3, #2
 800073e:	4403      	add	r3, r0
 8000740:	3310      	adds	r3, #16
 8000742:	6019      	str	r1, [r3, #0]
    for(int i = 0; i < 6; i++)
 8000744:	69fb      	ldr	r3, [r7, #28]
 8000746:	3301      	adds	r3, #1
 8000748:	61fb      	str	r3, [r7, #28]
 800074a:	69fb      	ldr	r3, [r7, #28]
 800074c:	2b05      	cmp	r3, #5
 800074e:	f77f af4e 	ble.w	80005ee <PID_CTRL+0xee>
    }
}
 8000752:	bf00      	nop
 8000754:	3724      	adds	r7, #36	; 0x24
 8000756:	46bd      	mov	sp, r7
 8000758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075c:	4770      	bx	lr
 800075e:	bf00      	nop
 8000760:	200002c8 	.word	0x200002c8
 8000764:	43340000 	.word	0x43340000
 8000768:	43b40000 	.word	0x43b40000
 800076c:	c3340000 	.word	0xc3340000
 8000770:	20000348 	.word	0x20000348
 8000774:	20000344 	.word	0x20000344
 8000778:	20000340 	.word	0x20000340
 800077c:	20000000 	.word	0x20000000
 8000780:	20000264 	.word	0x20000264

08000784 <VRUinit>:
float pitch, roll, yaw,*dat;
int tim;
UART_HandleTypeDef *VRUhuart;

void VRUinit(UART_HandleTypeDef *huart)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	VRUhuart = huart;
 800078c:	4a09      	ldr	r2, [pc, #36]	; (80007b4 <VRUinit+0x30>)
 800078e:	687b      	ldr	r3, [r7, #4]
 8000790:	6013      	str	r3, [r2, #0]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	68da      	ldr	r2, [r3, #12]
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	f042 0210 	orr.w	r2, r2, #16
 80007a0:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, ch110, 82);
 80007a2:	2252      	movs	r2, #82	; 0x52
 80007a4:	4904      	ldr	r1, [pc, #16]	; (80007b8 <VRUinit+0x34>)
 80007a6:	6878      	ldr	r0, [r7, #4]
 80007a8:	f005 fb7e 	bl	8005ea8 <HAL_UART_Receive_DMA>
}
 80007ac:	bf00      	nop
 80007ae:	3708      	adds	r7, #8
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	200002e8 	.word	0x200002e8
 80007b8:	200002ec 	.word	0x200002ec

080007bc <VRUupdate>:
//从串口中断触发 每次执行 提取姿态数据
void VRUupdate()
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
	float * datflo;
	datflo=(float *) (ch110 + 18);
 80007c2:	4b15      	ldr	r3, [pc, #84]	; (8000818 <VRUupdate+0x5c>)
 80007c4:	603b      	str	r3, [r7, #0]
	/*
	roll = *(float *) (ch110 + 54);
	pitch = *(float *) (ch110 + 58);
	yaw = *(float *) (ch110 + 62);
	*/
	roll = datflo[9];
 80007c6:	683b      	ldr	r3, [r7, #0]
 80007c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007ca:	4a14      	ldr	r2, [pc, #80]	; (800081c <VRUupdate+0x60>)
 80007cc:	6013      	str	r3, [r2, #0]
	pitch = datflo[10];
 80007ce:	683b      	ldr	r3, [r7, #0]
 80007d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80007d2:	4a13      	ldr	r2, [pc, #76]	; (8000820 <VRUupdate+0x64>)
 80007d4:	6013      	str	r3, [r2, #0]
	yaw = datflo[11];
 80007d6:	683b      	ldr	r3, [r7, #0]
 80007d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007da:	4a12      	ldr	r2, [pc, #72]	; (8000824 <VRUupdate+0x68>)
 80007dc:	6013      	str	r3, [r2, #0]

	for(int i=0;i<16;i++)
 80007de:	2300      	movs	r3, #0
 80007e0:	607b      	str	r3, [r7, #4]
 80007e2:	e00c      	b.n	80007fe <VRUupdate+0x42>
	{
		frame.fdata[i] = datflo[i];
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	009b      	lsls	r3, r3, #2
 80007e8:	683a      	ldr	r2, [r7, #0]
 80007ea:	4413      	add	r3, r2
 80007ec:	681a      	ldr	r2, [r3, #0]
 80007ee:	490e      	ldr	r1, [pc, #56]	; (8000828 <VRUupdate+0x6c>)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	009b      	lsls	r3, r3, #2
 80007f4:	440b      	add	r3, r1
 80007f6:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	3301      	adds	r3, #1
 80007fc:	607b      	str	r3, [r7, #4]
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2b0f      	cmp	r3, #15
 8000802:	ddef      	ble.n	80007e4 <VRUupdate+0x28>
		//3角速度XYZ
		//6磁强度XYZ
		//9欧拉角Roll Pitch Yaw
		//12四元数WXYZ
	}
    if(pidinit == 0)
 8000804:	4b09      	ldr	r3, [pc, #36]	; (800082c <VRUupdate+0x70>)
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d101      	bne.n	8000810 <VRUupdate+0x54>
        PID_init();
 800080c:	f7ff fe5c 	bl	80004c8 <PID_init>
    if(pidinit == 1)
    {
        PID_CTRL();
        setmotor();
    }*/
}
 8000810:	bf00      	nop
 8000812:	3708      	adds	r7, #8
 8000814:	46bd      	mov	sp, r7
 8000816:	bd80      	pop	{r7, pc}
 8000818:	200002fe 	.word	0x200002fe
 800081c:	20000348 	.word	0x20000348
 8000820:	20000344 	.word	0x20000344
 8000824:	20000340 	.word	0x20000340
 8000828:	200000a8 	.word	0x200000a8
 800082c:	20000260 	.word	0x20000260

08000830 <VRUerror>:
void VRUerror()
{
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
    HAL_UART_AbortReceive(VRUhuart);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <VRUerror+0x20>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4618      	mov	r0, r3
 800083a:	f005 fbb5 	bl	8005fa8 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(VRUhuart, ch110, 82);
 800083e:	4b04      	ldr	r3, [pc, #16]	; (8000850 <VRUerror+0x20>)
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	2252      	movs	r2, #82	; 0x52
 8000844:	4903      	ldr	r1, [pc, #12]	; (8000854 <VRUerror+0x24>)
 8000846:	4618      	mov	r0, r3
 8000848:	f005 fb2e 	bl	8005ea8 <HAL_UART_Receive_DMA>
}
 800084c:	bf00      	nop
 800084e:	bd80      	pop	{r7, pc}
 8000850:	200002e8 	.word	0x200002e8
 8000854:	200002ec 	.word	0x200002ec

08000858 <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 8000858:	b580      	push	{r7, lr}
 800085a:	b084      	sub	sp, #16
 800085c:	af00      	add	r7, sp, #0
 800085e:	60f8      	str	r0, [r7, #12]
 8000860:	60b9      	str	r1, [r7, #8]
 8000862:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart5, (uint8_t*) ptr, len, 300);
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	b29a      	uxth	r2, r3
 8000868:	f44f 7396 	mov.w	r3, #300	; 0x12c
 800086c:	68b9      	ldr	r1, [r7, #8]
 800086e:	4804      	ldr	r0, [pc, #16]	; (8000880 <_write+0x28>)
 8000870:	f005 fa3b 	bl	8005cea <HAL_UART_Transmit>
	return len;
 8000874:	687b      	ldr	r3, [r7, #4]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	200004ec 	.word	0x200004ec

08000884 <HAL_UART_RxCpltCallback>:
void delay_ms(unsigned int ms) {
	HAL_Delay(ms);
	return;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
 800088a:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	4a04      	ldr	r2, [pc, #16]	; (80008a0 <HAL_UART_RxCpltCallback+0x1c>)
 8000890:	4293      	cmp	r3, r2
 8000892:	d101      	bne.n	8000898 <HAL_UART_RxCpltCallback+0x14>
	{
		VRUupdate();
 8000894:	f7ff ff92 	bl	80007bc <VRUupdate>
	}
}
 8000898:	bf00      	nop
 800089a:	3708      	adds	r7, #8
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	2000072c 	.word	0x2000072c

080008a4 <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	4a04      	ldr	r2, [pc, #16]	; (80008c0 <HAL_UART_ErrorCallback+0x1c>)
 80008b0:	4293      	cmp	r3, r2
 80008b2:	d101      	bne.n	80008b8 <HAL_UART_ErrorCallback+0x14>
	{
		VRUerror();
 80008b4:	f7ff ffbc 	bl	8000830 <VRUerror>
	}
}
 80008b8:	bf00      	nop
 80008ba:	3708      	adds	r7, #8
 80008bc:	46bd      	mov	sp, r7
 80008be:	bd80      	pop	{r7, pc}
 80008c0:	2000072c 	.word	0x2000072c

080008c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b082      	sub	sp, #8
 80008c8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008ca:	f002 fa05 	bl	8002cd8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008ce:	f000 f85d 	bl	800098c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80008d2:	f000 fda1 	bl	8001418 <MX_GPIO_Init>
  MX_DMA_Init();
 80008d6:	f000 fd61 	bl	800139c <MX_DMA_Init>
  MX_ADC1_Init();
 80008da:	f000 f8c1 	bl	8000a60 <MX_ADC1_Init>
  MX_SPI1_Init();
 80008de:	f000 f911 	bl	8000b04 <MX_SPI1_Init>
  MX_TIM1_Init();
 80008e2:	f000 f945 	bl	8000b70 <MX_TIM1_Init>
  MX_TIM2_Init();
 80008e6:	f000 f993 	bl	8000c10 <MX_TIM2_Init>
  MX_TIM3_Init();
 80008ea:	f000 f9dd 	bl	8000ca8 <MX_TIM3_Init>
  MX_TIM4_Init();
 80008ee:	f000 fa73 	bl	8000dd8 <MX_TIM4_Init>
  MX_TIM5_Init();
 80008f2:	f000 fb09 	bl	8000f08 <MX_TIM5_Init>
  MX_TIM8_Init();
 80008f6:	f000 fb6b 	bl	8000fd0 <MX_TIM8_Init>
  MX_UART4_Init();
 80008fa:	f000 fc7d 	bl	80011f8 <MX_UART4_Init>
  MX_UART5_Init();
 80008fe:	f000 fca5 	bl	800124c <MX_UART5_Init>
  MX_USART1_UART_Init();
 8000902:	f000 fccd 	bl	80012a0 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8000906:	f000 fcf5 	bl	80012f4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800090a:	f000 fd1d 	bl	8001348 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800090e:	f000 fc23 	bl	8001158 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//delay function sppeeort
 8000912:	4816      	ldr	r0, [pc, #88]	; (800096c <main+0xa8>)
 8000914:	f004 fa4b 	bl	8004dae <HAL_TIM_Base_Start>

  motorinit();
 8000918:	f000 fea6 	bl	8001668 <motorinit>

	HAL_TIM_Base_Start_IT(&htim1);
 800091c:	4814      	ldr	r0, [pc, #80]	; (8000970 <main+0xac>)
 800091e:	f004 fa6a 	bl	8004df6 <HAL_TIM_Base_Start_IT>

	VRUinit(&huart2);
 8000922:	4814      	ldr	r0, [pc, #80]	; (8000974 <main+0xb0>)
 8000924:	f7ff ff2e 	bl	8000784 <VRUinit>
	OLED_Init();
 8000928:	f001 f9d8 	bl	8001cdc <OLED_Init>
	//PID_init();
	remoteInit(&huart5);
 800092c:	4812      	ldr	r0, [pc, #72]	; (8000978 <main+0xb4>)
 800092e:	f001 fa81 	bl	8001e34 <remoteInit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello\r\n");
 8000932:	4812      	ldr	r0, [pc, #72]	; (800097c <main+0xb8>)
 8000934:	f006 fab0 	bl	8006e98 <puts>
  OLED_ShowString(0,0,"runing...");
 8000938:	4a11      	ldr	r2, [pc, #68]	; (8000980 <main+0xbc>)
 800093a:	2100      	movs	r1, #0
 800093c:	2000      	movs	r0, #0
 800093e:	f001 f99b 	bl	8001c78 <OLED_ShowString>

  while (1)
  {
	  OLED_ShowString(0,12,"run time:");
 8000942:	4a10      	ldr	r2, [pc, #64]	; (8000984 <main+0xc0>)
 8000944:	210c      	movs	r1, #12
 8000946:	2000      	movs	r0, #0
 8000948:	f001 f996 	bl	8001c78 <OLED_ShowString>
	  OLED_ShowNumber(0, 24, HAL_GetTick()/1000, 3, 12);
 800094c:	f002 f9fa 	bl	8002d44 <HAL_GetTick>
 8000950:	4602      	mov	r2, r0
 8000952:	4b0d      	ldr	r3, [pc, #52]	; (8000988 <main+0xc4>)
 8000954:	fba3 2302 	umull	r2, r3, r3, r2
 8000958:	099a      	lsrs	r2, r3, #6
 800095a:	230c      	movs	r3, #12
 800095c:	9300      	str	r3, [sp, #0]
 800095e:	2303      	movs	r3, #3
 8000960:	2118      	movs	r1, #24
 8000962:	2000      	movs	r0, #0
 8000964:	f001 f91a 	bl	8001b9c <OLED_ShowNumber>
	  OLED_ShowString(0,12,"run time:");
 8000968:	e7eb      	b.n	8000942 <main+0x7e>
 800096a:	bf00      	nop
 800096c:	200006ec 	.word	0x200006ec
 8000970:	20000614 	.word	0x20000614
 8000974:	2000072c 	.word	0x2000072c
 8000978:	200004ec 	.word	0x200004ec
 800097c:	080076c8 	.word	0x080076c8
 8000980:	080076d0 	.word	0x080076d0
 8000984:	080076dc 	.word	0x080076dc
 8000988:	10624dd3 	.word	0x10624dd3

0800098c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b094      	sub	sp, #80	; 0x50
 8000990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000992:	f107 0320 	add.w	r3, r7, #32
 8000996:	2230      	movs	r2, #48	; 0x30
 8000998:	2100      	movs	r1, #0
 800099a:	4618      	mov	r0, r3
 800099c:	f006 fa18 	bl	8006dd0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009a0:	f107 030c 	add.w	r3, r7, #12
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80009b0:	2300      	movs	r3, #0
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	4b28      	ldr	r3, [pc, #160]	; (8000a58 <SystemClock_Config+0xcc>)
 80009b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <SystemClock_Config+0xcc>)
 80009ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009be:	6413      	str	r3, [r2, #64]	; 0x40
 80009c0:	4b25      	ldr	r3, [pc, #148]	; (8000a58 <SystemClock_Config+0xcc>)
 80009c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009cc:	2300      	movs	r3, #0
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	4b22      	ldr	r3, [pc, #136]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a21      	ldr	r2, [pc, #132]	; (8000a5c <SystemClock_Config+0xd0>)
 80009d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80009da:	6013      	str	r3, [r2, #0]
 80009dc:	4b1f      	ldr	r3, [pc, #124]	; (8000a5c <SystemClock_Config+0xd0>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009e8:	2301      	movs	r3, #1
 80009ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80009f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009f2:	2302      	movs	r3, #2
 80009f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80009fc:	2308      	movs	r3, #8
 80009fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000a00:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000a04:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000a06:	2302      	movs	r3, #2
 8000a08:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a0a:	2304      	movs	r3, #4
 8000a0c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a0e:	f107 0320 	add.w	r3, r7, #32
 8000a12:	4618      	mov	r0, r3
 8000a14:	f003 fac8 	bl	8003fa8 <HAL_RCC_OscConfig>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d001      	beq.n	8000a22 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000a1e:	f000 fe1f 	bl	8001660 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a22:	230f      	movs	r3, #15
 8000a24:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a26:	2302      	movs	r3, #2
 8000a28:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000a2e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000a32:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a38:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000a3a:	f107 030c 	add.w	r3, r7, #12
 8000a3e:	2105      	movs	r1, #5
 8000a40:	4618      	mov	r0, r3
 8000a42:	f003 fd21 	bl	8004488 <HAL_RCC_ClockConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000a4c:	f000 fe08 	bl	8001660 <Error_Handler>
  }
}
 8000a50:	bf00      	nop
 8000a52:	3750      	adds	r7, #80	; 0x50
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	40023800 	.word	0x40023800
 8000a5c:	40007000 	.word	0x40007000

08000a60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000a66:	463b      	mov	r3, r7
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a74:	4a21      	ldr	r2, [pc, #132]	; (8000afc <MX_ADC1_Init+0x9c>)
 8000a76:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000a78:	4b1f      	ldr	r3, [pc, #124]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a7a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000a7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000a80:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a82:	2200      	movs	r2, #0
 8000a84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000a86:	4b1c      	ldr	r3, [pc, #112]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a88:	2200      	movs	r2, #0
 8000a8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a8c:	4b1a      	ldr	r3, [pc, #104]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a92:	4b19      	ldr	r3, [pc, #100]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a9a:	4b17      	ldr	r3, [pc, #92]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000aa0:	4b15      	ldr	r3, [pc, #84]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa2:	4a17      	ldr	r2, [pc, #92]	; (8000b00 <MX_ADC1_Init+0xa0>)
 8000aa4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000aa6:	4b14      	ldr	r3, [pc, #80]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000aac:	4b12      	ldr	r3, [pc, #72]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000ab2:	4b11      	ldr	r3, [pc, #68]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000aba:	4b0f      	ldr	r3, [pc, #60]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000abc:	2201      	movs	r2, #1
 8000abe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ac0:	480d      	ldr	r0, [pc, #52]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ac2:	f002 f96d 	bl	8002da0 <HAL_ADC_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000acc:	f000 fdc8 	bl	8001660 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ad0:	2304      	movs	r3, #4
 8000ad2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ad4:	2301      	movs	r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000adc:	463b      	mov	r3, r7
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4805      	ldr	r0, [pc, #20]	; (8000af8 <MX_ADC1_Init+0x98>)
 8000ae2:	f002 f9a1 	bl	8002e28 <HAL_ADC_ConfigChannel>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d001      	beq.n	8000af0 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000aec:	f000 fdb8 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000af0:	bf00      	nop
 8000af2:	3710      	adds	r7, #16
 8000af4:	46bd      	mov	sp, r7
 8000af6:	bd80      	pop	{r7, pc}
 8000af8:	2000052c 	.word	0x2000052c
 8000afc:	40012000 	.word	0x40012000
 8000b00:	0f000001 	.word	0x0f000001

08000b04 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000b08:	4b17      	ldr	r3, [pc, #92]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b0a:	4a18      	ldr	r2, [pc, #96]	; (8000b6c <MX_SPI1_Init+0x68>)
 8000b0c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000b0e:	4b16      	ldr	r3, [pc, #88]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b10:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000b14:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000b16:	4b14      	ldr	r3, [pc, #80]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000b1c:	4b12      	ldr	r3, [pc, #72]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000b22:	4b11      	ldr	r3, [pc, #68]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000b28:	4b0f      	ldr	r3, [pc, #60]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000b2e:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b30:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b34:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b38:	2200      	movs	r2, #0
 8000b3a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000b3c:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b3e:	2200      	movs	r2, #0
 8000b40:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b44:	2200      	movs	r2, #0
 8000b46:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000b48:	4b07      	ldr	r3, [pc, #28]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b50:	220a      	movs	r2, #10
 8000b52:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000b54:	4804      	ldr	r0, [pc, #16]	; (8000b68 <MX_SPI1_Init+0x64>)
 8000b56:	f003 febb 	bl	80048d0 <HAL_SPI_Init>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000b60:	f000 fd7e 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}
 8000b68:	20000694 	.word	0x20000694
 8000b6c:	40013000 	.word	0x40013000

08000b70 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b086      	sub	sp, #24
 8000b74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b76:	f107 0308 	add.w	r3, r7, #8
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	601a      	str	r2, [r3, #0]
 8000b7e:	605a      	str	r2, [r3, #4]
 8000b80:	609a      	str	r2, [r3, #8]
 8000b82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b84:	463b      	mov	r3, r7
 8000b86:	2200      	movs	r2, #0
 8000b88:	601a      	str	r2, [r3, #0]
 8000b8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b8e:	4a1f      	ldr	r2, [pc, #124]	; (8000c0c <MX_TIM1_Init+0x9c>)
 8000b90:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 8000b92:	4b1d      	ldr	r3, [pc, #116]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b94:	22a7      	movs	r2, #167	; 0xa7
 8000b96:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b98:	4b1b      	ldr	r3, [pc, #108]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 8000b9e:	4b1a      	ldr	r3, [pc, #104]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba0:	f644 6220 	movw	r2, #20000	; 0x4e20
 8000ba4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000ba6:	4b18      	ldr	r3, [pc, #96]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000bac:	4b16      	ldr	r3, [pc, #88]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bae:	2200      	movs	r2, #0
 8000bb0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bb2:	4b15      	ldr	r3, [pc, #84]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000bb8:	4813      	ldr	r0, [pc, #76]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bba:	f004 f8cd 	bl	8004d58 <HAL_TIM_Base_Init>
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d001      	beq.n	8000bc8 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000bc4:	f000 fd4c 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000bc8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bcc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000bce:	f107 0308 	add.w	r3, r7, #8
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	480c      	ldr	r0, [pc, #48]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bd6:	f004 fb69 	bl	80052ac <HAL_TIM_ConfigClockSource>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	2b00      	cmp	r3, #0
 8000bde:	d001      	beq.n	8000be4 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000be0:	f000 fd3e 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000be4:	2300      	movs	r3, #0
 8000be6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000be8:	2300      	movs	r3, #0
 8000bea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000bec:	463b      	mov	r3, r7
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4805      	ldr	r0, [pc, #20]	; (8000c08 <MX_TIM1_Init+0x98>)
 8000bf2:	f004 ff4b 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8000bfc:	f000 fd30 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000c00:	bf00      	nop
 8000c02:	3718      	adds	r7, #24
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000614 	.word	0x20000614
 8000c0c:	40010000 	.word	0x40010000

08000c10 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b086      	sub	sp, #24
 8000c14:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c16:	f107 0308 	add.w	r3, r7, #8
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c24:	463b      	mov	r3, r7
 8000c26:	2200      	movs	r2, #0
 8000c28:	601a      	str	r2, [r3, #0]
 8000c2a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000c2c:	4b1d      	ldr	r3, [pc, #116]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c2e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000c32:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 8000c34:	4b1b      	ldr	r3, [pc, #108]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c36:	2253      	movs	r2, #83	; 0x53
 8000c38:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8000c40:	4b18      	ldr	r3, [pc, #96]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c42:	f04f 32ff 	mov.w	r2, #4294967295
 8000c46:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c48:	4b16      	ldr	r3, [pc, #88]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c4e:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000c54:	4813      	ldr	r0, [pc, #76]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c56:	f004 f87f 	bl	8004d58 <HAL_TIM_Base_Init>
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d001      	beq.n	8000c64 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000c60:	f000 fcfe 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000c64:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c68:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000c6a:	f107 0308 	add.w	r3, r7, #8
 8000c6e:	4619      	mov	r1, r3
 8000c70:	480c      	ldr	r0, [pc, #48]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c72:	f004 fb1b 	bl	80052ac <HAL_TIM_ConfigClockSource>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d001      	beq.n	8000c80 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000c7c:	f000 fcf0 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c84:	2300      	movs	r3, #0
 8000c86:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000c88:	463b      	mov	r3, r7
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	4805      	ldr	r0, [pc, #20]	; (8000ca4 <MX_TIM2_Init+0x94>)
 8000c8e:	f004 fefd 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000c98:	f000 fce2 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	3718      	adds	r7, #24
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	200006ec 	.word	0x200006ec

08000ca8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b08e      	sub	sp, #56	; 0x38
 8000cac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	601a      	str	r2, [r3, #0]
 8000cb6:	605a      	str	r2, [r3, #4]
 8000cb8:	609a      	str	r2, [r3, #8]
 8000cba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cbc:	f107 0320 	add.w	r3, r7, #32
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cc6:	1d3b      	adds	r3, r7, #4
 8000cc8:	2200      	movs	r2, #0
 8000cca:	601a      	str	r2, [r3, #0]
 8000ccc:	605a      	str	r2, [r3, #4]
 8000cce:	609a      	str	r2, [r3, #8]
 8000cd0:	60da      	str	r2, [r3, #12]
 8000cd2:	611a      	str	r2, [r3, #16]
 8000cd4:	615a      	str	r2, [r3, #20]
 8000cd6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000cd8:	4b3d      	ldr	r3, [pc, #244]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cda:	4a3e      	ldr	r2, [pc, #248]	; (8000dd4 <MX_TIM3_Init+0x12c>)
 8000cdc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000cde:	4b3c      	ldr	r3, [pc, #240]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce4:	4b3a      	ldr	r3, [pc, #232]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000cea:	4b39      	ldr	r3, [pc, #228]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cec:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000cf0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cf2:	4b37      	ldr	r3, [pc, #220]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf8:	4b35      	ldr	r3, [pc, #212]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000cfe:	4834      	ldr	r0, [pc, #208]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d00:	f004 f82a 	bl	8004d58 <HAL_TIM_Base_Init>
 8000d04:	4603      	mov	r3, r0
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d001      	beq.n	8000d0e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8000d0a:	f000 fca9 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d12:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000d14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d18:	4619      	mov	r1, r3
 8000d1a:	482d      	ldr	r0, [pc, #180]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d1c:	f004 fac6 	bl	80052ac <HAL_TIM_ConfigClockSource>
 8000d20:	4603      	mov	r3, r0
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d001      	beq.n	8000d2a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8000d26:	f000 fc9b 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000d2a:	4829      	ldr	r0, [pc, #164]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d2c:	f004 f887 	bl	8004e3e <HAL_TIM_PWM_Init>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8000d36:	f000 fc93 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000d42:	f107 0320 	add.w	r3, r7, #32
 8000d46:	4619      	mov	r1, r3
 8000d48:	4821      	ldr	r0, [pc, #132]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d4a:	f004 fe9f 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000d4e:	4603      	mov	r3, r0
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d001      	beq.n	8000d58 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8000d54:	f000 fc84 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d58:	2360      	movs	r3, #96	; 0x60
 8000d5a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d64:	2300      	movs	r3, #0
 8000d66:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d68:	1d3b      	adds	r3, r7, #4
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4818      	ldr	r0, [pc, #96]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d70:	f004 f9d6 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000d74:	4603      	mov	r3, r0
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d001      	beq.n	8000d7e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8000d7a:	f000 fc71 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	2204      	movs	r2, #4
 8000d82:	4619      	mov	r1, r3
 8000d84:	4812      	ldr	r0, [pc, #72]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d86:	f004 f9cb 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8000d90:	f000 fc66 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000d94:	1d3b      	adds	r3, r7, #4
 8000d96:	2208      	movs	r2, #8
 8000d98:	4619      	mov	r1, r3
 8000d9a:	480d      	ldr	r0, [pc, #52]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000d9c:	f004 f9c0 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8000da6:	f000 fc5b 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	220c      	movs	r2, #12
 8000dae:	4619      	mov	r1, r3
 8000db0:	4807      	ldr	r0, [pc, #28]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000db2:	f004 f9b5 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8000dbc:	f000 fc50 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000dc0:	4803      	ldr	r0, [pc, #12]	; (8000dd0 <MX_TIM3_Init+0x128>)
 8000dc2:	f001 faaf 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8000dc6:	bf00      	nop
 8000dc8:	3738      	adds	r7, #56	; 0x38
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	200004ac 	.word	0x200004ac
 8000dd4:	40000400 	.word	0x40000400

08000dd8 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08e      	sub	sp, #56	; 0x38
 8000ddc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000de2:	2200      	movs	r2, #0
 8000de4:	601a      	str	r2, [r3, #0]
 8000de6:	605a      	str	r2, [r3, #4]
 8000de8:	609a      	str	r2, [r3, #8]
 8000dea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000dec:	f107 0320 	add.w	r3, r7, #32
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]
 8000e06:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000e08:	4b3d      	ldr	r3, [pc, #244]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e0a:	4a3e      	ldr	r2, [pc, #248]	; (8000f04 <MX_TIM4_Init+0x12c>)
 8000e0c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 8000e0e:	4b3c      	ldr	r3, [pc, #240]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e10:	2253      	movs	r2, #83	; 0x53
 8000e12:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e14:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e16:	2200      	movs	r2, #0
 8000e18:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 8000e1a:	4b39      	ldr	r3, [pc, #228]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e1c:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000e20:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e22:	4b37      	ldr	r3, [pc, #220]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e28:	4b35      	ldr	r3, [pc, #212]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000e2e:	4834      	ldr	r0, [pc, #208]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e30:	f003 ff92 	bl	8004d58 <HAL_TIM_Base_Init>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8000e3a:	f000 fc11 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e42:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8000e44:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e48:	4619      	mov	r1, r3
 8000e4a:	482d      	ldr	r0, [pc, #180]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e4c:	f004 fa2e 	bl	80052ac <HAL_TIM_ConfigClockSource>
 8000e50:	4603      	mov	r3, r0
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d001      	beq.n	8000e5a <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8000e56:	f000 fc03 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000e5a:	4829      	ldr	r0, [pc, #164]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e5c:	f003 ffef 	bl	8004e3e <HAL_TIM_PWM_Init>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d001      	beq.n	8000e6a <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8000e66:	f000 fbfb 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000e72:	f107 0320 	add.w	r3, r7, #32
 8000e76:	4619      	mov	r1, r3
 8000e78:	4821      	ldr	r0, [pc, #132]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000e7a:	f004 fe07 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8000e84:	f000 fbec 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e88:	2360      	movs	r3, #96	; 0x60
 8000e8a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e90:	2300      	movs	r3, #0
 8000e92:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e94:	2300      	movs	r3, #0
 8000e96:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	4619      	mov	r1, r3
 8000e9e:	4818      	ldr	r0, [pc, #96]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ea0:	f004 f93e 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8000eaa:	f000 fbd9 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	2204      	movs	r2, #4
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	4812      	ldr	r0, [pc, #72]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000eb6:	f004 f933 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8000ec0:	f000 fbce 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000ec4:	1d3b      	adds	r3, r7, #4
 8000ec6:	2208      	movs	r2, #8
 8000ec8:	4619      	mov	r1, r3
 8000eca:	480d      	ldr	r0, [pc, #52]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ecc:	f004 f928 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d001      	beq.n	8000eda <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8000ed6:	f000 fbc3 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000eda:	1d3b      	adds	r3, r7, #4
 8000edc:	220c      	movs	r2, #12
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4807      	ldr	r0, [pc, #28]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ee2:	f004 f91d 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8000eec:	f000 fbb8 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000ef0:	4803      	ldr	r0, [pc, #12]	; (8000f00 <MX_TIM4_Init+0x128>)
 8000ef2:	f001 fa17 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8000ef6:	bf00      	nop
 8000ef8:	3738      	adds	r7, #56	; 0x38
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
 8000efe:	bf00      	nop
 8000f00:	200003ec 	.word	0x200003ec
 8000f04:	40000800 	.word	0x40000800

08000f08 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b08a      	sub	sp, #40	; 0x28
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0e:	f107 0320 	add.w	r3, r7, #32
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
 8000f16:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	601a      	str	r2, [r3, #0]
 8000f1e:	605a      	str	r2, [r3, #4]
 8000f20:	609a      	str	r2, [r3, #8]
 8000f22:	60da      	str	r2, [r3, #12]
 8000f24:	611a      	str	r2, [r3, #16]
 8000f26:	615a      	str	r2, [r3, #20]
 8000f28:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f2a:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f2c:	4a27      	ldr	r2, [pc, #156]	; (8000fcc <MX_TIM5_Init+0xc4>)
 8000f2e:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8000f30:	4b25      	ldr	r3, [pc, #148]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 8000f3c:	4b22      	ldr	r3, [pc, #136]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f3e:	f04f 32ff 	mov.w	r2, #4294967295
 8000f42:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b20      	ldr	r3, [pc, #128]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b1f      	ldr	r3, [pc, #124]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8000f50:	481d      	ldr	r0, [pc, #116]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f52:	f003 ff74 	bl	8004e3e <HAL_TIM_PWM_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 8000f5c:	f000 fb80 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f60:	2300      	movs	r3, #0
 8000f62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f64:	2300      	movs	r3, #0
 8000f66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000f68:	f107 0320 	add.w	r3, r7, #32
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4816      	ldr	r0, [pc, #88]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f70:	f004 fd8c 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8000f7a:	f000 fb71 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f7e:	2360      	movs	r3, #96	; 0x60
 8000f80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f86:	2300      	movs	r3, #0
 8000f88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f8e:	1d3b      	adds	r3, r7, #4
 8000f90:	2208      	movs	r2, #8
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000f96:	f004 f8c3 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 8000fa0:	f000 fb5e 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000fa4:	1d3b      	adds	r3, r7, #4
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	4619      	mov	r1, r3
 8000faa:	4807      	ldr	r0, [pc, #28]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000fac:	f004 f8b8 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d001      	beq.n	8000fba <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8000fb6:	f000 fb53 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8000fba:	4803      	ldr	r0, [pc, #12]	; (8000fc8 <MX_TIM5_Init+0xc0>)
 8000fbc:	f001 f9b2 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8000fc0:	bf00      	nop
 8000fc2:	3728      	adds	r7, #40	; 0x28
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	2000046c 	.word	0x2000046c
 8000fcc:	40000c00 	.word	0x40000c00

08000fd0 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b096      	sub	sp, #88	; 0x58
 8000fd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fd6:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8000fda:	2200      	movs	r2, #0
 8000fdc:	601a      	str	r2, [r3, #0]
 8000fde:	605a      	str	r2, [r3, #4]
 8000fe0:	609a      	str	r2, [r3, #8]
 8000fe2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fe4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	605a      	str	r2, [r3, #4]
 8000ff8:	609a      	str	r2, [r3, #8]
 8000ffa:	60da      	str	r2, [r3, #12]
 8000ffc:	611a      	str	r2, [r3, #16]
 8000ffe:	615a      	str	r2, [r3, #20]
 8001000:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2220      	movs	r2, #32
 8001006:	2100      	movs	r1, #0
 8001008:	4618      	mov	r0, r3
 800100a:	f005 fee1 	bl	8006dd0 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800100e:	4b50      	ldr	r3, [pc, #320]	; (8001150 <MX_TIM8_Init+0x180>)
 8001010:	4a50      	ldr	r2, [pc, #320]	; (8001154 <MX_TIM8_Init+0x184>)
 8001012:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 8001014:	4b4e      	ldr	r3, [pc, #312]	; (8001150 <MX_TIM8_Init+0x180>)
 8001016:	22a7      	movs	r2, #167	; 0xa7
 8001018:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800101a:	4b4d      	ldr	r3, [pc, #308]	; (8001150 <MX_TIM8_Init+0x180>)
 800101c:	2200      	movs	r2, #0
 800101e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 8001020:	4b4b      	ldr	r3, [pc, #300]	; (8001150 <MX_TIM8_Init+0x180>)
 8001022:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8001026:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001028:	4b49      	ldr	r3, [pc, #292]	; (8001150 <MX_TIM8_Init+0x180>)
 800102a:	2200      	movs	r2, #0
 800102c:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800102e:	4b48      	ldr	r3, [pc, #288]	; (8001150 <MX_TIM8_Init+0x180>)
 8001030:	2200      	movs	r2, #0
 8001032:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001034:	4b46      	ldr	r3, [pc, #280]	; (8001150 <MX_TIM8_Init+0x180>)
 8001036:	2200      	movs	r2, #0
 8001038:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800103a:	4845      	ldr	r0, [pc, #276]	; (8001150 <MX_TIM8_Init+0x180>)
 800103c:	f003 fe8c 	bl	8004d58 <HAL_TIM_Base_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001046:	f000 fb0b 	bl	8001660 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800104a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800104e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001050:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001054:	4619      	mov	r1, r3
 8001056:	483e      	ldr	r0, [pc, #248]	; (8001150 <MX_TIM8_Init+0x180>)
 8001058:	f004 f928 	bl	80052ac <HAL_TIM_ConfigClockSource>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001062:	f000 fafd 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001066:	483a      	ldr	r0, [pc, #232]	; (8001150 <MX_TIM8_Init+0x180>)
 8001068:	f003 fee9 	bl	8004e3e <HAL_TIM_PWM_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001072:	f000 faf5 	bl	8001660 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001076:	2300      	movs	r3, #0
 8001078:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800107a:	2300      	movs	r3, #0
 800107c:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800107e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001082:	4619      	mov	r1, r3
 8001084:	4832      	ldr	r0, [pc, #200]	; (8001150 <MX_TIM8_Init+0x180>)
 8001086:	f004 fd01 	bl	8005a8c <HAL_TIMEx_MasterConfigSynchronization>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001090:	f000 fae6 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001094:	2360      	movs	r3, #96	; 0x60
 8001096:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800109c:	2300      	movs	r3, #0
 800109e:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80010a0:	2300      	movs	r3, #0
 80010a2:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80010a4:	2300      	movs	r3, #0
 80010a6:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80010a8:	2300      	movs	r3, #0
 80010aa:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80010ac:	2300      	movs	r3, #0
 80010ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010b4:	2200      	movs	r2, #0
 80010b6:	4619      	mov	r1, r3
 80010b8:	4825      	ldr	r0, [pc, #148]	; (8001150 <MX_TIM8_Init+0x180>)
 80010ba:	f004 f831 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80010c4:	f000 facc 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80010c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010cc:	2204      	movs	r2, #4
 80010ce:	4619      	mov	r1, r3
 80010d0:	481f      	ldr	r0, [pc, #124]	; (8001150 <MX_TIM8_Init+0x180>)
 80010d2:	f004 f825 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80010dc:	f000 fac0 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80010e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010e4:	2208      	movs	r2, #8
 80010e6:	4619      	mov	r1, r3
 80010e8:	4819      	ldr	r0, [pc, #100]	; (8001150 <MX_TIM8_Init+0x180>)
 80010ea:	f004 f819 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80010ee:	4603      	mov	r3, r0
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d001      	beq.n	80010f8 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80010f4:	f000 fab4 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80010f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fc:	220c      	movs	r2, #12
 80010fe:	4619      	mov	r1, r3
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_TIM8_Init+0x180>)
 8001102:	f004 f80d 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 800110c:	f000 faa8 	bl	8001660 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001114:	2300      	movs	r3, #0
 8001116:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001118:	2300      	movs	r3, #0
 800111a:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800111c:	2300      	movs	r3, #0
 800111e:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001120:	2300      	movs	r3, #0
 8001122:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001124:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001128:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800112a:	2300      	movs	r3, #0
 800112c:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800112e:	1d3b      	adds	r3, r7, #4
 8001130:	4619      	mov	r1, r3
 8001132:	4807      	ldr	r0, [pc, #28]	; (8001150 <MX_TIM8_Init+0x180>)
 8001134:	f004 fd26 	bl	8005b84 <HAL_TIMEx_ConfigBreakDeadTime>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800113e:	f000 fa8f 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001142:	4803      	ldr	r0, [pc, #12]	; (8001150 <MX_TIM8_Init+0x180>)
 8001144:	f001 f8ee 	bl	8002324 <HAL_TIM_MspPostInit>

}
 8001148:	bf00      	nop
 800114a:	3758      	adds	r7, #88	; 0x58
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	200003ac 	.word	0x200003ac
 8001154:	40010400 	.word	0x40010400

08001158 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b088      	sub	sp, #32
 800115c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800115e:	1d3b      	adds	r3, r7, #4
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
 800116c:	615a      	str	r2, [r3, #20]
 800116e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001170:	4b1f      	ldr	r3, [pc, #124]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001172:	4a20      	ldr	r2, [pc, #128]	; (80011f4 <MX_TIM12_Init+0x9c>)
 8001174:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001176:	4b1e      	ldr	r3, [pc, #120]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 800117c:	4b1c      	ldr	r3, [pc, #112]	; (80011f0 <MX_TIM12_Init+0x98>)
 800117e:	2200      	movs	r2, #0
 8001180:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001182:	4b1b      	ldr	r3, [pc, #108]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001184:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001188:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800118a:	4b19      	ldr	r3, [pc, #100]	; (80011f0 <MX_TIM12_Init+0x98>)
 800118c:	2200      	movs	r2, #0
 800118e:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001192:	2200      	movs	r2, #0
 8001194:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001196:	4816      	ldr	r0, [pc, #88]	; (80011f0 <MX_TIM12_Init+0x98>)
 8001198:	f003 fe51 	bl	8004e3e <HAL_TIM_PWM_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80011a2:	f000 fa5d 	bl	8001660 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011a6:	2360      	movs	r3, #96	; 0x60
 80011a8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ae:	2300      	movs	r3, #0
 80011b0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011b2:	2300      	movs	r3, #0
 80011b4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	1d3b      	adds	r3, r7, #4
 80011b8:	2200      	movs	r2, #0
 80011ba:	4619      	mov	r1, r3
 80011bc:	480c      	ldr	r0, [pc, #48]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011be:	f003 ffaf 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80011c8:	f000 fa4a 	bl	8001660 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011cc:	1d3b      	adds	r3, r7, #4
 80011ce:	2204      	movs	r2, #4
 80011d0:	4619      	mov	r1, r3
 80011d2:	4807      	ldr	r0, [pc, #28]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011d4:	f003 ffa4 	bl	8005120 <HAL_TIM_PWM_ConfigChannel>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 80011de:	f000 fa3f 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80011e2:	4803      	ldr	r0, [pc, #12]	; (80011f0 <MX_TIM12_Init+0x98>)
 80011e4:	f001 f89e 	bl	8002324 <HAL_TIM_MspPostInit>

}
 80011e8:	bf00      	nop
 80011ea:	3720      	adds	r7, #32
 80011ec:	46bd      	mov	sp, r7
 80011ee:	bd80      	pop	{r7, pc}
 80011f0:	200007cc 	.word	0x200007cc
 80011f4:	40001800 	.word	0x40001800

080011f8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80011fc:	4b11      	ldr	r3, [pc, #68]	; (8001244 <MX_UART4_Init+0x4c>)
 80011fe:	4a12      	ldr	r2, [pc, #72]	; (8001248 <MX_UART4_Init+0x50>)
 8001200:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <MX_UART4_Init+0x4c>)
 8001204:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001208:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <MX_UART4_Init+0x4c>)
 800120c:	2200      	movs	r2, #0
 800120e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001210:	4b0c      	ldr	r3, [pc, #48]	; (8001244 <MX_UART4_Init+0x4c>)
 8001212:	2200      	movs	r2, #0
 8001214:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <MX_UART4_Init+0x4c>)
 8001218:	2200      	movs	r2, #0
 800121a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800121c:	4b09      	ldr	r3, [pc, #36]	; (8001244 <MX_UART4_Init+0x4c>)
 800121e:	220c      	movs	r2, #12
 8001220:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001222:	4b08      	ldr	r3, [pc, #32]	; (8001244 <MX_UART4_Init+0x4c>)
 8001224:	2200      	movs	r2, #0
 8001226:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001228:	4b06      	ldr	r3, [pc, #24]	; (8001244 <MX_UART4_Init+0x4c>)
 800122a:	2200      	movs	r2, #0
 800122c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_UART4_Init+0x4c>)
 8001230:	f004 fd0e 	bl	8005c50 <HAL_UART_Init>
 8001234:	4603      	mov	r3, r0
 8001236:	2b00      	cmp	r3, #0
 8001238:	d001      	beq.n	800123e <MX_UART4_Init+0x46>
  {
    Error_Handler();
 800123a:	f000 fa11 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	20000654 	.word	0x20000654
 8001248:	40004c00 	.word	0x40004c00

0800124c <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_UART5_Init+0x4c>)
 8001252:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_UART5_Init+0x50>)
 8001254:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <MX_UART5_Init+0x4c>)
 8001258:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800125c:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_UART5_Init+0x4c>)
 8001260:	2200      	movs	r2, #0
 8001262:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_UART5_Init+0x4c>)
 8001266:	2200      	movs	r2, #0
 8001268:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800126a:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <MX_UART5_Init+0x4c>)
 800126c:	2200      	movs	r2, #0
 800126e:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001270:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_UART5_Init+0x4c>)
 8001272:	220c      	movs	r2, #12
 8001274:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001276:	4b08      	ldr	r3, [pc, #32]	; (8001298 <MX_UART5_Init+0x4c>)
 8001278:	2200      	movs	r2, #0
 800127a:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 800127c:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_UART5_Init+0x4c>)
 800127e:	2200      	movs	r2, #0
 8001280:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001282:	4805      	ldr	r0, [pc, #20]	; (8001298 <MX_UART5_Init+0x4c>)
 8001284:	f004 fce4 	bl	8005c50 <HAL_UART_Init>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800128e:	f000 f9e7 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	200004ec 	.word	0x200004ec
 800129c:	40005000 	.word	0x40005000

080012a0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80012a4:	4b11      	ldr	r3, [pc, #68]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012a6:	4a12      	ldr	r2, [pc, #72]	; (80012f0 <MX_USART1_UART_Init+0x50>)
 80012a8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80012aa:	4b10      	ldr	r3, [pc, #64]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80012b0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80012b2:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012b4:	2200      	movs	r2, #0
 80012b6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80012b8:	4b0c      	ldr	r3, [pc, #48]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012ba:	2200      	movs	r2, #0
 80012bc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80012be:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80012c4:	4b09      	ldr	r3, [pc, #36]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012c6:	220c      	movs	r2, #12
 80012c8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80012ca:	4b08      	ldr	r3, [pc, #32]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012cc:	2200      	movs	r2, #0
 80012ce:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d2:	2200      	movs	r2, #0
 80012d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80012d6:	4805      	ldr	r0, [pc, #20]	; (80012ec <MX_USART1_UART_Init+0x4c>)
 80012d8:	f004 fcba 	bl	8005c50 <HAL_UART_Init>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80012e2:	f000 f9bd 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80012e6:	bf00      	nop
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	200005d4 	.word	0x200005d4
 80012f0:	40011000 	.word	0x40011000

080012f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80012f8:	4b11      	ldr	r3, [pc, #68]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 80012fa:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_USART2_UART_Init+0x50>)
 80012fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80012fe:	4b10      	ldr	r3, [pc, #64]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001300:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001304:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001306:	4b0e      	ldr	r3, [pc, #56]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001308:	2200      	movs	r2, #0
 800130a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800130c:	4b0c      	ldr	r3, [pc, #48]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800130e:	2200      	movs	r2, #0
 8001310:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001314:	2200      	movs	r2, #0
 8001316:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001318:	4b09      	ldr	r3, [pc, #36]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800131a:	220c      	movs	r2, #12
 800131c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800131e:	4b08      	ldr	r3, [pc, #32]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001320:	2200      	movs	r2, #0
 8001322:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001324:	4b06      	ldr	r3, [pc, #24]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 8001326:	2200      	movs	r2, #0
 8001328:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800132a:	4805      	ldr	r0, [pc, #20]	; (8001340 <MX_USART2_UART_Init+0x4c>)
 800132c:	f004 fc90 	bl	8005c50 <HAL_UART_Init>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001336:	f000 f993 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000072c 	.word	0x2000072c
 8001344:	40004400 	.word	0x40004400

08001348 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800134c:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800134e:	4a12      	ldr	r2, [pc, #72]	; (8001398 <MX_USART3_UART_Init+0x50>)
 8001350:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001352:	4b10      	ldr	r3, [pc, #64]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001354:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001358:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800135a:	4b0e      	ldr	r3, [pc, #56]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001360:	4b0c      	ldr	r3, [pc, #48]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001362:	2200      	movs	r2, #0
 8001364:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001366:	4b0b      	ldr	r3, [pc, #44]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001368:	2200      	movs	r2, #0
 800136a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800136c:	4b09      	ldr	r3, [pc, #36]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800136e:	220c      	movs	r2, #12
 8001370:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001372:	4b08      	ldr	r3, [pc, #32]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001374:	2200      	movs	r2, #0
 8001376:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 800137a:	2200      	movs	r2, #0
 800137c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800137e:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_USART3_UART_Init+0x4c>)
 8001380:	f004 fc66 	bl	8005c50 <HAL_UART_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800138a:	f000 f969 	bl	8001660 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800138e:	bf00      	nop
 8001390:	bd80      	pop	{r7, pc}
 8001392:	bf00      	nop
 8001394:	2000042c 	.word	0x2000042c
 8001398:	40004800 	.word	0x40004800

0800139c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b082      	sub	sp, #8
 80013a0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b1b      	ldr	r3, [pc, #108]	; (8001414 <MX_DMA_Init+0x78>)
 80013a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013aa:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <MX_DMA_Init+0x78>)
 80013ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80013b0:	6313      	str	r3, [r2, #48]	; 0x30
 80013b2:	4b18      	ldr	r3, [pc, #96]	; (8001414 <MX_DMA_Init+0x78>)
 80013b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_DMA_Init+0x78>)
 80013c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c6:	4a13      	ldr	r2, [pc, #76]	; (8001414 <MX_DMA_Init+0x78>)
 80013c8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80013cc:	6313      	str	r3, [r2, #48]	; 0x30
 80013ce:	4b11      	ldr	r3, [pc, #68]	; (8001414 <MX_DMA_Init+0x78>)
 80013d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 80013da:	2200      	movs	r2, #0
 80013dc:	2100      	movs	r1, #0
 80013de:	200b      	movs	r0, #11
 80013e0:	f001 fff8 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80013e4:	200b      	movs	r0, #11
 80013e6:	f002 f811 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80013ea:	2200      	movs	r2, #0
 80013ec:	2100      	movs	r1, #0
 80013ee:	2010      	movs	r0, #16
 80013f0:	f001 fff0 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80013f4:	2010      	movs	r0, #16
 80013f6:	f002 f809 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 80013fa:	2200      	movs	r2, #0
 80013fc:	2100      	movs	r1, #0
 80013fe:	203a      	movs	r0, #58	; 0x3a
 8001400:	f001 ffe8 	bl	80033d4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001404:	203a      	movs	r0, #58	; 0x3a
 8001406:	f002 f801 	bl	800340c <HAL_NVIC_EnableIRQ>

}
 800140a:	bf00      	nop
 800140c:	3708      	adds	r7, #8
 800140e:	46bd      	mov	sp, r7
 8001410:	bd80      	pop	{r7, pc}
 8001412:	bf00      	nop
 8001414:	40023800 	.word	0x40023800

08001418 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b08c      	sub	sp, #48	; 0x30
 800141c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800141e:	f107 031c 	add.w	r3, r7, #28
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
 800142c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	61bb      	str	r3, [r7, #24]
 8001432:	4b58      	ldr	r3, [pc, #352]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001436:	4a57      	ldr	r2, [pc, #348]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001438:	f043 0310 	orr.w	r3, r3, #16
 800143c:	6313      	str	r3, [r2, #48]	; 0x30
 800143e:	4b55      	ldr	r3, [pc, #340]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001442:	f003 0310 	and.w	r3, r3, #16
 8001446:	61bb      	str	r3, [r7, #24]
 8001448:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800144a:	2300      	movs	r3, #0
 800144c:	617b      	str	r3, [r7, #20]
 800144e:	4b51      	ldr	r3, [pc, #324]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	4a50      	ldr	r2, [pc, #320]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001454:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001458:	6313      	str	r3, [r2, #48]	; 0x30
 800145a:	4b4e      	ldr	r3, [pc, #312]	; (8001594 <MX_GPIO_Init+0x17c>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001462:	617b      	str	r3, [r7, #20]
 8001464:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001466:	2300      	movs	r3, #0
 8001468:	613b      	str	r3, [r7, #16]
 800146a:	4b4a      	ldr	r3, [pc, #296]	; (8001594 <MX_GPIO_Init+0x17c>)
 800146c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800146e:	4a49      	ldr	r2, [pc, #292]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001470:	f043 0301 	orr.w	r3, r3, #1
 8001474:	6313      	str	r3, [r2, #48]	; 0x30
 8001476:	4b47      	ldr	r3, [pc, #284]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	613b      	str	r3, [r7, #16]
 8001480:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	60fb      	str	r3, [r7, #12]
 8001486:	4b43      	ldr	r3, [pc, #268]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001488:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800148a:	4a42      	ldr	r2, [pc, #264]	; (8001594 <MX_GPIO_Init+0x17c>)
 800148c:	f043 0302 	orr.w	r3, r3, #2
 8001490:	6313      	str	r3, [r2, #48]	; 0x30
 8001492:	4b40      	ldr	r3, [pc, #256]	; (8001594 <MX_GPIO_Init+0x17c>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	60fb      	str	r3, [r7, #12]
 800149c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	60bb      	str	r3, [r7, #8]
 80014a2:	4b3c      	ldr	r3, [pc, #240]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a6:	4a3b      	ldr	r2, [pc, #236]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014a8:	f043 0308 	orr.w	r3, r3, #8
 80014ac:	6313      	str	r3, [r2, #48]	; 0x30
 80014ae:	4b39      	ldr	r3, [pc, #228]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b2:	f003 0308 	and.w	r3, r3, #8
 80014b6:	60bb      	str	r3, [r7, #8]
 80014b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	607b      	str	r3, [r7, #4]
 80014be:	4b35      	ldr	r3, [pc, #212]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	4a34      	ldr	r2, [pc, #208]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014c4:	f043 0304 	orr.w	r3, r3, #4
 80014c8:	6313      	str	r3, [r2, #48]	; 0x30
 80014ca:	4b32      	ldr	r3, [pc, #200]	; (8001594 <MX_GPIO_Init+0x17c>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ce:	f003 0304 	and.w	r3, r3, #4
 80014d2:	607b      	str	r3, [r7, #4]
 80014d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CSN_GPIO_Port, OLED_CSN_Pin, GPIO_PIN_RESET);
 80014d6:	2200      	movs	r2, #0
 80014d8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014dc:	482e      	ldr	r0, [pc, #184]	; (8001598 <MX_GPIO_Init+0x180>)
 80014de:	f002 fd49 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	21c0      	movs	r1, #192	; 0xc0
 80014e6:	482d      	ldr	r0, [pc, #180]	; (800159c <MX_GPIO_Init+0x184>)
 80014e8:	f002 fd44 	bl	8003f74 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80014ec:	2360      	movs	r3, #96	; 0x60
 80014ee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80014fc:	2303      	movs	r3, #3
 80014fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001500:	f107 031c 	add.w	r3, r7, #28
 8001504:	4619      	mov	r1, r3
 8001506:	4826      	ldr	r0, [pc, #152]	; (80015a0 <MX_GPIO_Init+0x188>)
 8001508:	f002 fb9a 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CSN_Pin */
  GPIO_InitStruct.Pin = OLED_CSN_Pin;
 800150c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001510:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001512:	2301      	movs	r3, #1
 8001514:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001516:	2300      	movs	r3, #0
 8001518:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800151a:	2303      	movs	r3, #3
 800151c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CSN_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 031c 	add.w	r3, r7, #28
 8001522:	4619      	mov	r1, r3
 8001524:	481c      	ldr	r0, [pc, #112]	; (8001598 <MX_GPIO_Init+0x180>)
 8001526:	f002 fb8b 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 800152a:	23c0      	movs	r3, #192	; 0xc0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800153a:	f107 031c 	add.w	r3, r7, #28
 800153e:	4619      	mov	r1, r3
 8001540:	4816      	ldr	r0, [pc, #88]	; (800159c <MX_GPIO_Init+0x184>)
 8001542:	f002 fb7d 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001546:	f44f 7380 	mov.w	r3, #256	; 0x100
 800154a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800154c:	2302      	movs	r3, #2
 800154e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001550:	2300      	movs	r3, #0
 8001552:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001554:	2300      	movs	r3, #0
 8001556:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001558:	2303      	movs	r3, #3
 800155a:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800155c:	f107 031c 	add.w	r3, r7, #28
 8001560:	4619      	mov	r1, r3
 8001562:	480e      	ldr	r0, [pc, #56]	; (800159c <MX_GPIO_Init+0x184>)
 8001564:	f002 fb6c 	bl	8003c40 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001568:	f44f 7300 	mov.w	r3, #512	; 0x200
 800156c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800156e:	2302      	movs	r3, #2
 8001570:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001576:	2300      	movs	r3, #0
 8001578:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 800157a:	2303      	movs	r3, #3
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800157e:	f107 031c 	add.w	r3, r7, #28
 8001582:	4619      	mov	r1, r3
 8001584:	4805      	ldr	r0, [pc, #20]	; (800159c <MX_GPIO_Init+0x184>)
 8001586:	f002 fb5b 	bl	8003c40 <HAL_GPIO_Init>

}
 800158a:	bf00      	nop
 800158c:	3730      	adds	r7, #48	; 0x30
 800158e:	46bd      	mov	sp, r7
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	40023800 	.word	0x40023800
 8001598:	40020000 	.word	0x40020000
 800159c:	40020400 	.word	0x40020400
 80015a0:	40021000 	.word	0x40021000

080015a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	4a24      	ldr	r2, [pc, #144]	; (8001644 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d102      	bne.n	80015bc <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 80015b6:	f001 fbb1 	bl	8002d1c <HAL_IncTick>
      if(pidinit==1)
    	  PID_CTRL();
      setmotor();
  }
  /* USER CODE END Callback 1 */
}
 80015ba:	e03e      	b.n	800163a <HAL_TIM_PeriodElapsedCallback+0x96>
  else if(htim->Instance == TIM1)
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a21      	ldr	r2, [pc, #132]	; (8001648 <HAL_TIM_PeriodElapsedCallback+0xa4>)
 80015c2:	4293      	cmp	r3, r2
 80015c4:	d139      	bne.n	800163a <HAL_TIM_PeriodElapsedCallback+0x96>
	  HAL_UART_Transmit_IT(&huart5, (unsigned char *)&frame, sizeof(frame));
 80015c6:	226c      	movs	r2, #108	; 0x6c
 80015c8:	4920      	ldr	r1, [pc, #128]	; (800164c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 80015ca:	4821      	ldr	r0, [pc, #132]	; (8001650 <HAL_TIM_PeriodElapsedCallback+0xac>)
 80015cc:	f004 fc26 	bl	8005e1c <HAL_UART_Transmit_IT>
	  OLED_Refresh_Gram();
 80015d0:	f000 f97e 	bl	80018d0 <OLED_Refresh_Gram>
      target_ver[0] = ch_float[0]*30;
 80015d4:	4b1f      	ldr	r3, [pc, #124]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015d6:	edd3 7a00 	vldr	s15, [r3]
 80015da:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015de:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015e2:	4b1d      	ldr	r3, [pc, #116]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015e4:	edc3 7a00 	vstr	s15, [r3]
      target_ver[1] = ch_float[1]*30;
 80015e8:	4b1a      	ldr	r3, [pc, #104]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 80015ea:	edd3 7a01 	vldr	s15, [r3, #4]
 80015ee:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80015f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80015f6:	4b18      	ldr	r3, [pc, #96]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015f8:	edc3 7a01 	vstr	s15, [r3, #4]
      target_ver[2] -= ch_float[2];
 80015fc:	4b16      	ldr	r3, [pc, #88]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 80015fe:	ed93 7a02 	vldr	s14, [r3, #8]
 8001602:	4b14      	ldr	r3, [pc, #80]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001604:	edd3 7a02 	vldr	s15, [r3, #8]
 8001608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800160c:	4b12      	ldr	r3, [pc, #72]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800160e:	edc3 7a02 	vstr	s15, [r3, #8]
      target_ver[3] = ch_float[3]; //求误�?
 8001612:	4b10      	ldr	r3, [pc, #64]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001614:	68db      	ldr	r3, [r3, #12]
 8001616:	4a10      	ldr	r2, [pc, #64]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001618:	60d3      	str	r3, [r2, #12]
      target_ver[4] = ch_float[4]; //求误�?
 800161a:	4b0e      	ldr	r3, [pc, #56]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 800161c:	691b      	ldr	r3, [r3, #16]
 800161e:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001620:	6113      	str	r3, [r2, #16]
      target_ver[5] = ch_float[5]; //求误�?
 8001622:	4b0c      	ldr	r3, [pc, #48]	; (8001654 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8001624:	695b      	ldr	r3, [r3, #20]
 8001626:	4a0c      	ldr	r2, [pc, #48]	; (8001658 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8001628:	6153      	str	r3, [r2, #20]
      if(pidinit==1)
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	2b01      	cmp	r3, #1
 8001630:	d101      	bne.n	8001636 <HAL_TIM_PeriodElapsedCallback+0x92>
    	  PID_CTRL();
 8001632:	f7fe ff65 	bl	8000500 <PID_CTRL>
      setmotor();
 8001636:	f000 f83f 	bl	80016b8 <setmotor>
}
 800163a:	bf00      	nop
 800163c:	3708      	adds	r7, #8
 800163e:	46bd      	mov	sp, r7
 8001640:	bd80      	pop	{r7, pc}
 8001642:	bf00      	nop
 8001644:	40001400 	.word	0x40001400
 8001648:	40010000 	.word	0x40010000
 800164c:	200000a8 	.word	0x200000a8
 8001650:	200004ec 	.word	0x200004ec
 8001654:	2000029c 	.word	0x2000029c
 8001658:	200002c8 	.word	0x200002c8
 800165c:	20000260 	.word	0x20000260

08001660 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001664:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001666:	e7fe      	b.n	8001666 <Error_Handler+0x6>

08001668 <motorinit>:
		{ 1.0f, 1.0f, 0, 0,1.0f, 0, 0, 0, 0, },
		{ -1.0f, 1.0f, 0, 0, 1.0f, 0, 0, 0, 0, }, };*/
float motor[8];
//每次执行会将六自由度dof6转换为8个电机通道 并赋值
void motorinit()
{
 8001668:	b580      	push	{r7, lr}
 800166a:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim4;
	extern TIM_HandleTypeDef htim8;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 800166c:	2100      	movs	r1, #0
 800166e:	4810      	ldr	r0, [pc, #64]	; (80016b0 <motorinit+0x48>)
 8001670:	f003 fc10 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001674:	2104      	movs	r1, #4
 8001676:	480e      	ldr	r0, [pc, #56]	; (80016b0 <motorinit+0x48>)
 8001678:	f003 fc0c 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 800167c:	2108      	movs	r1, #8
 800167e:	480c      	ldr	r0, [pc, #48]	; (80016b0 <motorinit+0x48>)
 8001680:	f003 fc08 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001684:	210c      	movs	r1, #12
 8001686:	480a      	ldr	r0, [pc, #40]	; (80016b0 <motorinit+0x48>)
 8001688:	f003 fc04 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 800168c:	2100      	movs	r1, #0
 800168e:	4809      	ldr	r0, [pc, #36]	; (80016b4 <motorinit+0x4c>)
 8001690:	f003 fc00 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001694:	2104      	movs	r1, #4
 8001696:	4807      	ldr	r0, [pc, #28]	; (80016b4 <motorinit+0x4c>)
 8001698:	f003 fbfc 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 800169c:	2108      	movs	r1, #8
 800169e:	4805      	ldr	r0, [pc, #20]	; (80016b4 <motorinit+0x4c>)
 80016a0:	f003 fbf8 	bl	8004e94 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 80016a4:	210c      	movs	r1, #12
 80016a6:	4803      	ldr	r0, [pc, #12]	; (80016b4 <motorinit+0x4c>)
 80016a8:	f003 fbf4 	bl	8004e94 <HAL_TIM_PWM_Start>
}
 80016ac:	bf00      	nop
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	200003ec 	.word	0x200003ec
 80016b4:	200003ac 	.word	0x200003ac

080016b8 <setmotor>:
void setmotor()
{
 80016b8:	b580      	push	{r7, lr}
 80016ba:	b084      	sub	sp, #16
 80016bc:	af00      	add	r7, sp, #0
    int time = HAL_GetTick();
 80016be:	f001 fb41 	bl	8002d44 <HAL_GetTick>
 80016c2:	4603      	mov	r3, r0
 80016c4:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 8; i++)
 80016c6:	2300      	movs	r3, #0
 80016c8:	60fb      	str	r3, [r7, #12]
 80016ca:	e05d      	b.n	8001788 <setmotor+0xd0>
    {
        float tmp = 0;
 80016cc:	f04f 0300 	mov.w	r3, #0
 80016d0:	60bb      	str	r3, [r7, #8]
        for (int j = 0; j < 6; j++)
 80016d2:	2300      	movs	r3, #0
 80016d4:	607b      	str	r3, [r7, #4]
 80016d6:	e01c      	b.n	8001712 <setmotor+0x5a>
            tmp += hcc[i][j] * dof6[j];
 80016d8:	4973      	ldr	r1, [pc, #460]	; (80018a8 <setmotor+0x1f0>)
 80016da:	68fa      	ldr	r2, [r7, #12]
 80016dc:	4613      	mov	r3, r2
 80016de:	005b      	lsls	r3, r3, #1
 80016e0:	4413      	add	r3, r2
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	4413      	add	r3, r2
 80016e8:	009b      	lsls	r3, r3, #2
 80016ea:	440b      	add	r3, r1
 80016ec:	ed93 7a00 	vldr	s14, [r3]
 80016f0:	4a6e      	ldr	r2, [pc, #440]	; (80018ac <setmotor+0x1f4>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	4413      	add	r3, r2
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001700:	ed97 7a02 	vldr	s14, [r7, #8]
 8001704:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001708:	edc7 7a02 	vstr	s15, [r7, #8]
        for (int j = 0; j < 6; j++)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	3301      	adds	r3, #1
 8001710:	607b      	str	r3, [r7, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	2b05      	cmp	r3, #5
 8001716:	dddf      	ble.n	80016d8 <setmotor+0x20>
        if(tmp > 1)
 8001718:	edd7 7a02 	vldr	s15, [r7, #8]
 800171c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001720:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001724:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001728:	dd02      	ble.n	8001730 <setmotor+0x78>
            tmp = 1;
 800172a:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800172e:	60bb      	str	r3, [r7, #8]
        if(tmp < -1)
 8001730:	edd7 7a02 	vldr	s15, [r7, #8]
 8001734:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001738:	eef4 7ac7 	vcmpe.f32	s15, s14
 800173c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001740:	d501      	bpl.n	8001746 <setmotor+0x8e>
            tmp = -1;
 8001742:	4b5b      	ldr	r3, [pc, #364]	; (80018b0 <setmotor+0x1f8>)
 8001744:	60bb      	str	r3, [r7, #8]
        if(time<10000||lock==0)//初始化||没有解开锁定
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	f242 720f 	movw	r2, #9999	; 0x270f
 800174c:	4293      	cmp	r3, r2
 800174e:	dd03      	ble.n	8001758 <setmotor+0xa0>
 8001750:	4b58      	ldr	r3, [pc, #352]	; (80018b4 <setmotor+0x1fc>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d107      	bne.n	8001768 <setmotor+0xb0>
			motor[i] = 0;
 8001758:	4a57      	ldr	r2, [pc, #348]	; (80018b8 <setmotor+0x200>)
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	009b      	lsls	r3, r3, #2
 800175e:	4413      	add	r3, r2
 8001760:	f04f 0200 	mov.w	r2, #0
 8001764:	601a      	str	r2, [r3, #0]
 8001766:	e005      	b.n	8001774 <setmotor+0xbc>
        else
        	motor[i] = tmp;
 8001768:	4a53      	ldr	r2, [pc, #332]	; (80018b8 <setmotor+0x200>)
 800176a:	68fb      	ldr	r3, [r7, #12]
 800176c:	009b      	lsls	r3, r3, #2
 800176e:	4413      	add	r3, r2
 8001770:	68ba      	ldr	r2, [r7, #8]
 8001772:	601a      	str	r2, [r3, #0]
        frame.fdata[i + 16] = tmp;//回传数据
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	3310      	adds	r3, #16
 8001778:	4a50      	ldr	r2, [pc, #320]	; (80018bc <setmotor+0x204>)
 800177a:	009b      	lsls	r3, r3, #2
 800177c:	4413      	add	r3, r2
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	3301      	adds	r3, #1
 8001786:	60fb      	str	r3, [r7, #12]
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2b07      	cmp	r3, #7
 800178c:	dd9e      	ble.n	80016cc <setmotor+0x14>
    }

    MOTOR_1 = motor[0] * MOTOR_WAY + MOTOR_CENTER;
 800178e:	4b4a      	ldr	r3, [pc, #296]	; (80018b8 <setmotor+0x200>)
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 80018c0 <setmotor+0x208>
 8001798:	ee67 7a87 	vmul.f32	s15, s15, s14
 800179c:	ed9f 7a49 	vldr	s14, [pc, #292]	; 80018c4 <setmotor+0x20c>
 80017a0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017a4:	4b48      	ldr	r3, [pc, #288]	; (80018c8 <setmotor+0x210>)
 80017a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017aa:	ee17 2a90 	vmov	r2, s15
 80017ae:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_2 = motor[1] * MOTOR_WAY + MOTOR_CENTER;
 80017b0:	4b41      	ldr	r3, [pc, #260]	; (80018b8 <setmotor+0x200>)
 80017b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80017b6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80018c0 <setmotor+0x208>
 80017ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017be:	ed9f 7a41 	vldr	s14, [pc, #260]	; 80018c4 <setmotor+0x20c>
 80017c2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017c6:	4b40      	ldr	r3, [pc, #256]	; (80018c8 <setmotor+0x210>)
 80017c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017cc:	ee17 2a90 	vmov	r2, s15
 80017d0:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_3 = motor[2] * MOTOR_WAY + MOTOR_CENTER;
 80017d2:	4b39      	ldr	r3, [pc, #228]	; (80018b8 <setmotor+0x200>)
 80017d4:	edd3 7a02 	vldr	s15, [r3, #8]
 80017d8:	ed9f 7a39 	vldr	s14, [pc, #228]	; 80018c0 <setmotor+0x208>
 80017dc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017e0:	ed9f 7a38 	vldr	s14, [pc, #224]	; 80018c4 <setmotor+0x20c>
 80017e4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80017e8:	4b37      	ldr	r3, [pc, #220]	; (80018c8 <setmotor+0x210>)
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	ee17 2a90 	vmov	r2, s15
 80017f2:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_4 = motor[3] * MOTOR_WAY + MOTOR_CENTER;
 80017f4:	4b30      	ldr	r3, [pc, #192]	; (80018b8 <setmotor+0x200>)
 80017f6:	edd3 7a03 	vldr	s15, [r3, #12]
 80017fa:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80018c0 <setmotor+0x208>
 80017fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001802:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80018c4 <setmotor+0x20c>
 8001806:	ee77 7a87 	vadd.f32	s15, s15, s14
 800180a:	4b2f      	ldr	r3, [pc, #188]	; (80018c8 <setmotor+0x210>)
 800180c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001810:	ee17 2a90 	vmov	r2, s15
 8001814:	641a      	str	r2, [r3, #64]	; 0x40
    MOTOR_5 = motor[4] * MOTOR_WAY + MOTOR_CENTER;
 8001816:	4b28      	ldr	r3, [pc, #160]	; (80018b8 <setmotor+0x200>)
 8001818:	edd3 7a04 	vldr	s15, [r3, #16]
 800181c:	ed9f 7a28 	vldr	s14, [pc, #160]	; 80018c0 <setmotor+0x208>
 8001820:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001824:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80018c4 <setmotor+0x20c>
 8001828:	ee77 7a87 	vadd.f32	s15, s15, s14
 800182c:	4b27      	ldr	r3, [pc, #156]	; (80018cc <setmotor+0x214>)
 800182e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001832:	ee17 2a90 	vmov	r2, s15
 8001836:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_6 = motor[5] * MOTOR_WAY + MOTOR_CENTER;
 8001838:	4b1f      	ldr	r3, [pc, #124]	; (80018b8 <setmotor+0x200>)
 800183a:	edd3 7a05 	vldr	s15, [r3, #20]
 800183e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80018c0 <setmotor+0x208>
 8001842:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001846:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80018c4 <setmotor+0x20c>
 800184a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800184e:	4b1f      	ldr	r3, [pc, #124]	; (80018cc <setmotor+0x214>)
 8001850:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001854:	ee17 2a90 	vmov	r2, s15
 8001858:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_7 = motor[6] * MOTOR_WAY + MOTOR_CENTER;
 800185a:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <setmotor+0x200>)
 800185c:	edd3 7a06 	vldr	s15, [r3, #24]
 8001860:	ed9f 7a17 	vldr	s14, [pc, #92]	; 80018c0 <setmotor+0x208>
 8001864:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001868:	ed9f 7a16 	vldr	s14, [pc, #88]	; 80018c4 <setmotor+0x20c>
 800186c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001870:	4b16      	ldr	r3, [pc, #88]	; (80018cc <setmotor+0x214>)
 8001872:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001876:	ee17 2a90 	vmov	r2, s15
 800187a:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_8 = motor[7] * MOTOR_WAY + MOTOR_CENTER;
 800187c:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <setmotor+0x200>)
 800187e:	edd3 7a07 	vldr	s15, [r3, #28]
 8001882:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 80018c0 <setmotor+0x208>
 8001886:	ee67 7a87 	vmul.f32	s15, s15, s14
 800188a:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 80018c4 <setmotor+0x20c>
 800188e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <setmotor+0x214>)
 8001894:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001898:	ee17 2a90 	vmov	r2, s15
 800189c:	641a      	str	r2, [r3, #64]	; 0x40
}
 800189e:	bf00      	nop
 80018a0:	3710      	adds	r7, #16
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	20000114 	.word	0x20000114
 80018ac:	20000264 	.word	0x20000264
 80018b0:	bf800000 	.word	0xbf800000
 80018b4:	2000027c 	.word	0x2000027c
 80018b8:	2000080c 	.word	0x2000080c
 80018bc:	200000a8 	.word	0x200000a8
 80018c0:	44480000 	.word	0x44480000
 80018c4:	44bb8000 	.word	0x44bb8000
 80018c8:	40000800 	.word	0x40000800
 80018cc:	40010400 	.word	0x40010400

080018d0 <OLED_Refresh_Gram>:
extern SPI_HandleTypeDef hspi1;

  
u8 OLED_GRAM[8][128];	   //内部定义了一块GRAM
void OLED_Refresh_Gram(void) //把32内部的GRAM刷新到OLED里面显示
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
	//u8 i,n;
	for(int i=0;i<8;i++)
 80018d6:	2300      	movs	r3, #0
 80018d8:	607b      	str	r3, [r7, #4]
 80018da:	e01b      	b.n	8001914 <OLED_Refresh_Gram+0x44>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	3b50      	subs	r3, #80	; 0x50
 80018e2:	b2db      	uxtb	r3, r3
 80018e4:	2100      	movs	r1, #0
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f820 	bl	800192c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 80018ec:	2100      	movs	r1, #0
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f81c 	bl	800192c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 80018f4:	2100      	movs	r1, #0
 80018f6:	2010      	movs	r0, #16
 80018f8:	f000 f818 	bl	800192c <OLED_WR_Byte>
		//OLED_RS_Set();
		HAL_SPI_Transmit(&hspi1, OLED_GRAM[i], 128, 10);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	01db      	lsls	r3, r3, #7
 8001900:	4a08      	ldr	r2, [pc, #32]	; (8001924 <OLED_Refresh_Gram+0x54>)
 8001902:	1899      	adds	r1, r3, r2
 8001904:	230a      	movs	r3, #10
 8001906:	2280      	movs	r2, #128	; 0x80
 8001908:	4807      	ldr	r0, [pc, #28]	; (8001928 <OLED_Refresh_Gram+0x58>)
 800190a:	f003 f845 	bl	8004998 <HAL_SPI_Transmit>
	for(int i=0;i<8;i++)
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	3301      	adds	r3, #1
 8001912:	607b      	str	r3, [r7, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2b07      	cmp	r3, #7
 8001918:	dde0      	ble.n	80018dc <OLED_Refresh_Gram+0xc>
		//for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
	}
}
 800191a:	bf00      	nop
 800191c:	3708      	adds	r7, #8
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
 8001922:	bf00      	nop
 8001924:	2000082c 	.word	0x2000082c
 8001928:	20000694 	.word	0x20000694

0800192c <OLED_WR_Byte>:
函数功能：向OLED写入一个字节
入口参数：dat:要写入的数据/命令  ，cmd:数据/命令标志 0,表示命令;1,表示数据;
返 回 值：无
**************************************************************************/
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 800192c:	b580      	push	{r7, lr}
 800192e:	b082      	sub	sp, #8
 8001930:	af00      	add	r7, sp, #0
 8001932:	4603      	mov	r3, r0
 8001934:	460a      	mov	r2, r1
 8001936:	71fb      	strb	r3, [r7, #7]
 8001938:	4613      	mov	r3, r2
 800193a:	71bb      	strb	r3, [r7, #6]
	//u8 i;
	if(cmd)
 800193c:	79bb      	ldrb	r3, [r7, #6]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d005      	beq.n	800194e <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 8001942:	2201      	movs	r2, #1
 8001944:	2180      	movs	r1, #128	; 0x80
 8001946:	480c      	ldr	r0, [pc, #48]	; (8001978 <OLED_WR_Byte+0x4c>)
 8001948:	f002 fb14 	bl	8003f74 <HAL_GPIO_WritePin>
 800194c:	e004      	b.n	8001958 <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();
 800194e:	2200      	movs	r2, #0
 8001950:	2180      	movs	r1, #128	; 0x80
 8001952:	4809      	ldr	r0, [pc, #36]	; (8001978 <OLED_WR_Byte+0x4c>)
 8001954:	f002 fb0e 	bl	8003f74 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 10);
 8001958:	1df9      	adds	r1, r7, #7
 800195a:	230a      	movs	r3, #10
 800195c:	2201      	movs	r2, #1
 800195e:	4807      	ldr	r0, [pc, #28]	; (800197c <OLED_WR_Byte+0x50>)
 8001960:	f003 f81a 	bl	8004998 <HAL_SPI_Transmit>
		   OLED_SDIN_Clr();
		OLED_SCLK_Set();
		dat<<=1;   
	}				 		  
	*/
	OLED_RS_Set();   	  
 8001964:	2201      	movs	r2, #1
 8001966:	2180      	movs	r1, #128	; 0x80
 8001968:	4803      	ldr	r0, [pc, #12]	; (8001978 <OLED_WR_Byte+0x4c>)
 800196a:	f002 fb03 	bl	8003f74 <HAL_GPIO_WritePin>
} 
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}
 8001976:	bf00      	nop
 8001978:	40020400 	.word	0x40020400
 800197c:	20000694 	.word	0x20000694

08001980 <OLED_Clear>:
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}	
////////////////////////////////////////////////////////////////////////////////
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
	u8 i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[i][n]=0X00;
 8001986:	2300      	movs	r3, #0
 8001988:	71fb      	strb	r3, [r7, #7]
 800198a:	e014      	b.n	80019b6 <OLED_Clear+0x36>
 800198c:	2300      	movs	r3, #0
 800198e:	71bb      	strb	r3, [r7, #6]
 8001990:	e00a      	b.n	80019a8 <OLED_Clear+0x28>
 8001992:	79fa      	ldrb	r2, [r7, #7]
 8001994:	79bb      	ldrb	r3, [r7, #6]
 8001996:	490c      	ldr	r1, [pc, #48]	; (80019c8 <OLED_Clear+0x48>)
 8001998:	01d2      	lsls	r2, r2, #7
 800199a:	440a      	add	r2, r1
 800199c:	4413      	add	r3, r2
 800199e:	2200      	movs	r2, #0
 80019a0:	701a      	strb	r2, [r3, #0]
 80019a2:	79bb      	ldrb	r3, [r7, #6]
 80019a4:	3301      	adds	r3, #1
 80019a6:	71bb      	strb	r3, [r7, #6]
 80019a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	daf0      	bge.n	8001992 <OLED_Clear+0x12>
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	3301      	adds	r3, #1
 80019b4:	71fb      	strb	r3, [r7, #7]
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	2b07      	cmp	r3, #7
 80019ba:	d9e7      	bls.n	800198c <OLED_Clear+0xc>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
		//for(k=0;k<128;k++)OLED_WR_Byte(OLED_GRAM[j][k],OLED_DATA);
	}
	//OLED_Refresh_Gram();//更新显示
	 */
}
 80019bc:	bf00      	nop
 80019be:	370c      	adds	r7, #12
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr
 80019c8:	2000082c 	.word	0x2000082c

080019cc <OLED_DrawPoint>:
函数功能：在OLED中画点
入口参数：坐标:x：0~127，y:0~63  ，t:1 填充 0,清空		
返 回 值：无
**************************************************************************/
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b085      	sub	sp, #20
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	71fb      	strb	r3, [r7, #7]
 80019d6:	460b      	mov	r3, r1
 80019d8:	71bb      	strb	r3, [r7, #6]
 80019da:	4613      	mov	r3, r2
 80019dc:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 80019de:	2300      	movs	r3, #0
 80019e0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	db41      	blt.n	8001a6e <OLED_DrawPoint+0xa2>
 80019ea:	79bb      	ldrb	r3, [r7, #6]
 80019ec:	2b3f      	cmp	r3, #63	; 0x3f
 80019ee:	d83e      	bhi.n	8001a6e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 80019f0:	79bb      	ldrb	r3, [r7, #6]
 80019f2:	08db      	lsrs	r3, r3, #3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	f1c3 0307 	rsb	r3, r3, #7
 80019fa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 80019fc:	79bb      	ldrb	r3, [r7, #6]
 80019fe:	f003 0307 	and.w	r3, r3, #7
 8001a02:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8001a04:	7b7b      	ldrb	r3, [r7, #13]
 8001a06:	f1c3 0307 	rsb	r3, r3, #7
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a10:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[pos][x]|=temp;
 8001a12:	797b      	ldrb	r3, [r7, #5]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d012      	beq.n	8001a3e <OLED_DrawPoint+0x72>
 8001a18:	7bba      	ldrb	r2, [r7, #14]
 8001a1a:	79fb      	ldrb	r3, [r7, #7]
 8001a1c:	4917      	ldr	r1, [pc, #92]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a1e:	01d2      	lsls	r2, r2, #7
 8001a20:	440a      	add	r2, r1
 8001a22:	4413      	add	r3, r2
 8001a24:	7818      	ldrb	r0, [r3, #0]
 8001a26:	7bba      	ldrb	r2, [r7, #14]
 8001a28:	79fb      	ldrb	r3, [r7, #7]
 8001a2a:	7bf9      	ldrb	r1, [r7, #15]
 8001a2c:	4301      	orrs	r1, r0
 8001a2e:	b2c8      	uxtb	r0, r1
 8001a30:	4912      	ldr	r1, [pc, #72]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a32:	01d2      	lsls	r2, r2, #7
 8001a34:	440a      	add	r2, r1
 8001a36:	4413      	add	r3, r2
 8001a38:	4602      	mov	r2, r0
 8001a3a:	701a      	strb	r2, [r3, #0]
 8001a3c:	e018      	b.n	8001a70 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[pos][x]&=~temp;
 8001a3e:	7bba      	ldrb	r2, [r7, #14]
 8001a40:	79fb      	ldrb	r3, [r7, #7]
 8001a42:	490e      	ldr	r1, [pc, #56]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a44:	01d2      	lsls	r2, r2, #7
 8001a46:	440a      	add	r2, r1
 8001a48:	4413      	add	r3, r2
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	b25a      	sxtb	r2, r3
 8001a4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a52:	43db      	mvns	r3, r3
 8001a54:	b25b      	sxtb	r3, r3
 8001a56:	4013      	ands	r3, r2
 8001a58:	b259      	sxtb	r1, r3
 8001a5a:	7bba      	ldrb	r2, [r7, #14]
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	b2c8      	uxtb	r0, r1
 8001a60:	4906      	ldr	r1, [pc, #24]	; (8001a7c <OLED_DrawPoint+0xb0>)
 8001a62:	01d2      	lsls	r2, r2, #7
 8001a64:	440a      	add	r2, r1
 8001a66:	4413      	add	r3, r2
 8001a68:	4602      	mov	r2, r0
 8001a6a:	701a      	strb	r2, [r3, #0]
 8001a6c:	e000      	b.n	8001a70 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 8001a6e:	bf00      	nop
}
 8001a70:	3714      	adds	r7, #20
 8001a72:	46bd      	mov	sp, r7
 8001a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a78:	4770      	bx	lr
 8001a7a:	bf00      	nop
 8001a7c:	2000082c 	.word	0x2000082c

08001a80 <OLED_ShowChar>:
函数功能：在指定的位置显示一个字符
入口参数：坐标:x：0~127，y:0~63 ，mode:0,反白显示;1,正常显示	，size:选择字体 12-16		
返 回 值：无
**************************************************************************/
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{      			    
 8001a80:	b590      	push	{r4, r7, lr}
 8001a82:	b085      	sub	sp, #20
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	4604      	mov	r4, r0
 8001a88:	4608      	mov	r0, r1
 8001a8a:	4611      	mov	r1, r2
 8001a8c:	461a      	mov	r2, r3
 8001a8e:	4623      	mov	r3, r4
 8001a90:	71fb      	strb	r3, [r7, #7]
 8001a92:	4603      	mov	r3, r0
 8001a94:	71bb      	strb	r3, [r7, #6]
 8001a96:	460b      	mov	r3, r1
 8001a98:	717b      	strb	r3, [r7, #5]
 8001a9a:	4613      	mov	r3, r2
 8001a9c:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 8001a9e:	79bb      	ldrb	r3, [r7, #6]
 8001aa0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值				   
 8001aa2:	797b      	ldrb	r3, [r7, #5]
 8001aa4:	3b20      	subs	r3, #32
 8001aa6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	73bb      	strb	r3, [r7, #14]
 8001aac:	e04d      	b.n	8001b4a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 8001aae:	793b      	ldrb	r3, [r7, #4]
 8001ab0:	2b0c      	cmp	r3, #12
 8001ab2:	d10b      	bne.n	8001acc <OLED_ShowChar+0x4c>
 8001ab4:	797a      	ldrb	r2, [r7, #5]
 8001ab6:	7bb9      	ldrb	r1, [r7, #14]
 8001ab8:	4828      	ldr	r0, [pc, #160]	; (8001b5c <OLED_ShowChar+0xdc>)
 8001aba:	4613      	mov	r3, r2
 8001abc:	005b      	lsls	r3, r3, #1
 8001abe:	4413      	add	r3, r2
 8001ac0:	009b      	lsls	r3, r3, #2
 8001ac2:	4403      	add	r3, r0
 8001ac4:	440b      	add	r3, r1
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	73fb      	strb	r3, [r7, #15]
 8001aca:	e007      	b.n	8001adc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体 	                          
 8001acc:	797a      	ldrb	r2, [r7, #5]
 8001ace:	7bbb      	ldrb	r3, [r7, #14]
 8001ad0:	4923      	ldr	r1, [pc, #140]	; (8001b60 <OLED_ShowChar+0xe0>)
 8001ad2:	0112      	lsls	r2, r2, #4
 8001ad4:	440a      	add	r2, r1
 8001ad6:	4413      	add	r3, r2
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8001adc:	2300      	movs	r3, #0
 8001ade:	737b      	strb	r3, [r7, #13]
 8001ae0:	e02d      	b.n	8001b3e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 8001ae2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	da07      	bge.n	8001afa <OLED_ShowChar+0x7a>
 8001aea:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001aee:	79b9      	ldrb	r1, [r7, #6]
 8001af0:	79fb      	ldrb	r3, [r7, #7]
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff ff6a 	bl	80019cc <OLED_DrawPoint>
 8001af8:	e00c      	b.n	8001b14 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8001afa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	bf0c      	ite	eq
 8001b02:	2301      	moveq	r3, #1
 8001b04:	2300      	movne	r3, #0
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	461a      	mov	r2, r3
 8001b0a:	79b9      	ldrb	r1, [r7, #6]
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff5c 	bl	80019cc <OLED_DrawPoint>
			temp<<=1;
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	005b      	lsls	r3, r3, #1
 8001b18:	73fb      	strb	r3, [r7, #15]
			y++;
 8001b1a:	79bb      	ldrb	r3, [r7, #6]
 8001b1c:	3301      	adds	r3, #1
 8001b1e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 8001b20:	79ba      	ldrb	r2, [r7, #6]
 8001b22:	7b3b      	ldrb	r3, [r7, #12]
 8001b24:	1ad2      	subs	r2, r2, r3
 8001b26:	793b      	ldrb	r3, [r7, #4]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d105      	bne.n	8001b38 <OLED_ShowChar+0xb8>
			{
				y=y0;
 8001b2c:	7b3b      	ldrb	r3, [r7, #12]
 8001b2e:	71bb      	strb	r3, [r7, #6]
				x++;
 8001b30:	79fb      	ldrb	r3, [r7, #7]
 8001b32:	3301      	adds	r3, #1
 8001b34:	71fb      	strb	r3, [r7, #7]
				break;
 8001b36:	e005      	b.n	8001b44 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 8001b38:	7b7b      	ldrb	r3, [r7, #13]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	737b      	strb	r3, [r7, #13]
 8001b3e:	7b7b      	ldrb	r3, [r7, #13]
 8001b40:	2b07      	cmp	r3, #7
 8001b42:	d9ce      	bls.n	8001ae2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 8001b44:	7bbb      	ldrb	r3, [r7, #14]
 8001b46:	3301      	adds	r3, #1
 8001b48:	73bb      	strb	r3, [r7, #14]
 8001b4a:	7bba      	ldrb	r2, [r7, #14]
 8001b4c:	793b      	ldrb	r3, [r7, #4]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d3ad      	bcc.n	8001aae <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 8001b52:	bf00      	nop
 8001b54:	3714      	adds	r7, #20
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd90      	pop	{r4, r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	080076e8 	.word	0x080076e8
 8001b60:	08007b5c 	.word	0x08007b5c

08001b64 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 8001b64:	b480      	push	{r7}
 8001b66:	b085      	sub	sp, #20
 8001b68:	af00      	add	r7, sp, #0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460a      	mov	r2, r1
 8001b6e:	71fb      	strb	r3, [r7, #7]
 8001b70:	4613      	mov	r3, r2
 8001b72:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 8001b74:	2301      	movs	r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8001b78:	e004      	b.n	8001b84 <oled_pow+0x20>
 8001b7a:	79fa      	ldrb	r2, [r7, #7]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	fb02 f303 	mul.w	r3, r2, r3
 8001b82:	60fb      	str	r3, [r7, #12]
 8001b84:	79bb      	ldrb	r3, [r7, #6]
 8001b86:	1e5a      	subs	r2, r3, #1
 8001b88:	71ba      	strb	r2, [r7, #6]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1f5      	bne.n	8001b7a <oled_pow+0x16>
	return result;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
}	
 8001b90:	4618      	mov	r0, r3
 8001b92:	3714      	adds	r7, #20
 8001b94:	46bd      	mov	sp, r7
 8001b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9a:	4770      	bx	lr

08001b9c <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：坐标:x：0~127，y:0~63 ；num:数值(0~4294967295)；mode:0,填充模式 1,叠加模式； size:选择字体 12-16		
返 回 值：无
**************************************************************************/  
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 8001b9c:	b590      	push	{r4, r7, lr}
 8001b9e:	b087      	sub	sp, #28
 8001ba0:	af02      	add	r7, sp, #8
 8001ba2:	603a      	str	r2, [r7, #0]
 8001ba4:	461a      	mov	r2, r3
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	71fb      	strb	r3, [r7, #7]
 8001baa:	460b      	mov	r3, r1
 8001bac:	71bb      	strb	r3, [r7, #6]
 8001bae:	4613      	mov	r3, r2
 8001bb0:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e053      	b.n	8001c64 <OLED_ShowNumber+0xc8>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8001bbc:	797a      	ldrb	r2, [r7, #5]
 8001bbe:	7bfb      	ldrb	r3, [r7, #15]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	3b01      	subs	r3, #1
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	4619      	mov	r1, r3
 8001bca:	200a      	movs	r0, #10
 8001bcc:	f7ff ffca 	bl	8001b64 <oled_pow>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	fbb3 f1f2 	udiv	r1, r3, r2
 8001bd8:	4b26      	ldr	r3, [pc, #152]	; (8001c74 <OLED_ShowNumber+0xd8>)
 8001bda:	fba3 2301 	umull	r2, r3, r3, r1
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	4613      	mov	r3, r2
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	4413      	add	r3, r2
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	1aca      	subs	r2, r1, r3
 8001bea:	4613      	mov	r3, r2
 8001bec:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 8001bee:	7bbb      	ldrb	r3, [r7, #14]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d11e      	bne.n	8001c32 <OLED_ShowNumber+0x96>
 8001bf4:	7bfa      	ldrb	r2, [r7, #15]
 8001bf6:	797b      	ldrb	r3, [r7, #5]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	429a      	cmp	r2, r3
 8001bfc:	da19      	bge.n	8001c32 <OLED_ShowNumber+0x96>
		{
			if(temp==0)
 8001bfe:	7b7b      	ldrb	r3, [r7, #13]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d114      	bne.n	8001c2e <OLED_ShowNumber+0x92>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8001c04:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	7bfa      	ldrb	r2, [r7, #15]
 8001c0e:	fb12 f303 	smulbb	r3, r2, r3
 8001c12:	b2da      	uxtb	r2, r3
 8001c14:	79fb      	ldrb	r3, [r7, #7]
 8001c16:	4413      	add	r3, r2
 8001c18:	b2d8      	uxtb	r0, r3
 8001c1a:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001c1e:	79b9      	ldrb	r1, [r7, #6]
 8001c20:	2301      	movs	r3, #1
 8001c22:	9300      	str	r3, [sp, #0]
 8001c24:	4613      	mov	r3, r2
 8001c26:	2220      	movs	r2, #32
 8001c28:	f7ff ff2a 	bl	8001a80 <OLED_ShowChar>
				continue;
 8001c2c:	e017      	b.n	8001c5e <OLED_ShowNumber+0xc2>
			}else enshow=1; 
 8001c2e:	2301      	movs	r3, #1
 8001c30:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 8001c32:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	7bfa      	ldrb	r2, [r7, #15]
 8001c3c:	fb12 f303 	smulbb	r3, r2, r3
 8001c40:	b2da      	uxtb	r2, r3
 8001c42:	79fb      	ldrb	r3, [r7, #7]
 8001c44:	4413      	add	r3, r2
 8001c46:	b2d8      	uxtb	r0, r3
 8001c48:	7b7b      	ldrb	r3, [r7, #13]
 8001c4a:	3330      	adds	r3, #48	; 0x30
 8001c4c:	b2da      	uxtb	r2, r3
 8001c4e:	f897 4020 	ldrb.w	r4, [r7, #32]
 8001c52:	79b9      	ldrb	r1, [r7, #6]
 8001c54:	2301      	movs	r3, #1
 8001c56:	9300      	str	r3, [sp, #0]
 8001c58:	4623      	mov	r3, r4
 8001c5a:	f7ff ff11 	bl	8001a80 <OLED_ShowChar>
	for(t=0;t<len;t++)
 8001c5e:	7bfb      	ldrb	r3, [r7, #15]
 8001c60:	3301      	adds	r3, #1
 8001c62:	73fb      	strb	r3, [r7, #15]
 8001c64:	7bfa      	ldrb	r2, [r7, #15]
 8001c66:	797b      	ldrb	r3, [r7, #5]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	d3a7      	bcc.n	8001bbc <OLED_ShowNumber+0x20>
	}
} 
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}
 8001c74:	cccccccd 	.word	0xcccccccd

08001c78 <OLED_ShowString>:
函数功能：显示字符串
入口参数：坐标:x：0~127，y:0~63 ；*p:字符串起始地址；
返 回 值：无
**************************************************************************/  
void OLED_ShowString(u8 x,u8 y,const char *p)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af02      	add	r7, sp, #8
 8001c7e:	4603      	mov	r3, r0
 8001c80:	603a      	str	r2, [r7, #0]
 8001c82:	71fb      	strb	r3, [r7, #7]
 8001c84:	460b      	mov	r3, r1
 8001c86:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8001c88:	e01f      	b.n	8001cca <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	2b7a      	cmp	r3, #122	; 0x7a
 8001c8e:	d904      	bls.n	8001c9a <OLED_ShowString+0x22>
 8001c90:	2300      	movs	r3, #0
 8001c92:	71fb      	strb	r3, [r7, #7]
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	3310      	adds	r3, #16
 8001c98:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8001c9a:	79bb      	ldrb	r3, [r7, #6]
 8001c9c:	2b3a      	cmp	r3, #58	; 0x3a
 8001c9e:	d905      	bls.n	8001cac <OLED_ShowString+0x34>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	71fb      	strb	r3, [r7, #7]
 8001ca4:	79fb      	ldrb	r3, [r7, #7]
 8001ca6:	71bb      	strb	r3, [r7, #6]
 8001ca8:	f7ff fe6a 	bl	8001980 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	781a      	ldrb	r2, [r3, #0]
 8001cb0:	79b9      	ldrb	r1, [r7, #6]
 8001cb2:	79f8      	ldrb	r0, [r7, #7]
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	9300      	str	r3, [sp, #0]
 8001cb8:	230c      	movs	r3, #12
 8001cba:	f7ff fee1 	bl	8001a80 <OLED_ShowChar>
        x+=8;
 8001cbe:	79fb      	ldrb	r3, [r7, #7]
 8001cc0:	3308      	adds	r3, #8
 8001cc2:	71fb      	strb	r3, [r7, #7]
        p++;
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	3301      	adds	r3, #1
 8001cc8:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d1db      	bne.n	8001c8a <OLED_ShowString+0x12>
    }  
}	
 8001cd2:	bf00      	nop
 8001cd4:	3708      	adds	r7, #8
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <OLED_Init>:
函数功能：初始化OLED
入口参数：无
返 回 值：无
**************************************************************************/ 
void OLED_Init(void)
{ 	 	 
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	2140      	movs	r1, #64	; 0x40
 8001ce6:	4851      	ldr	r0, [pc, #324]	; (8001e2c <OLED_Init+0x150>)
 8001ce8:	f002 f944 	bl	8003f74 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cec:	2001      	movs	r0, #1
 8001cee:	f001 f835 	bl	8002d5c <HAL_Delay>
	OLED_RST_Set();   //OLED复位
 8001cf2:	2201      	movs	r2, #1
 8001cf4:	2140      	movs	r1, #64	; 0x40
 8001cf6:	484d      	ldr	r0, [pc, #308]	; (8001e2c <OLED_Init+0x150>)
 8001cf8:	f002 f93c 	bl	8003f74 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 8001cfc:	2100      	movs	r1, #0
 8001cfe:	20ae      	movs	r0, #174	; 0xae
 8001d00:	f7ff fe14 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8001d04:	2100      	movs	r1, #0
 8001d06:	20d5      	movs	r0, #213	; 0xd5
 8001d08:	f7ff fe10 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 8001d0c:	2100      	movs	r1, #0
 8001d0e:	2050      	movs	r0, #80	; 0x50
 8001d10:	f7ff fe0c 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 8001d14:	2100      	movs	r1, #0
 8001d16:	20a8      	movs	r0, #168	; 0xa8
 8001d18:	f7ff fe08 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
 8001d1c:	2100      	movs	r1, #0
 8001d1e:	203f      	movs	r0, #63	; 0x3f
 8001d20:	f7ff fe04 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 8001d24:	2100      	movs	r1, #0
 8001d26:	20d3      	movs	r0, #211	; 0xd3
 8001d28:	f7ff fe00 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	2000      	movs	r0, #0
 8001d30:	f7ff fdfc 	bl	800192c <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 8001d34:	2100      	movs	r1, #0
 8001d36:	2040      	movs	r0, #64	; 0x40
 8001d38:	f7ff fdf8 	bl	800192c <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 8001d3c:	2100      	movs	r1, #0
 8001d3e:	208d      	movs	r0, #141	; 0x8d
 8001d40:	f7ff fdf4 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 8001d44:	2100      	movs	r1, #0
 8001d46:	2014      	movs	r0, #20
 8001d48:	f7ff fdf0 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 8001d4c:	2100      	movs	r1, #0
 8001d4e:	2020      	movs	r0, #32
 8001d50:	f7ff fdec 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 8001d54:	2100      	movs	r1, #0
 8001d56:	2002      	movs	r0, #2
 8001d58:	f7ff fde8 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 8001d5c:	2100      	movs	r1, #0
 8001d5e:	20a1      	movs	r0, #161	; 0xa1
 8001d60:	f7ff fde4 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 8001d64:	2100      	movs	r1, #0
 8001d66:	20c0      	movs	r0, #192	; 0xc0
 8001d68:	f7ff fde0 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	20da      	movs	r0, #218	; 0xda
 8001d70:	f7ff fddc 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 8001d74:	2100      	movs	r1, #0
 8001d76:	2012      	movs	r0, #18
 8001d78:	f7ff fdd8 	bl	800192c <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	2081      	movs	r0, #129	; 0x81
 8001d80:	f7ff fdd4 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 8001d84:	2100      	movs	r1, #0
 8001d86:	20ef      	movs	r0, #239	; 0xef
 8001d88:	f7ff fdd0 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 8001d8c:	2100      	movs	r1, #0
 8001d8e:	20d9      	movs	r0, #217	; 0xd9
 8001d90:	f7ff fdcc 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8001d94:	2100      	movs	r1, #0
 8001d96:	20f1      	movs	r0, #241	; 0xf1
 8001d98:	f7ff fdc8 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 8001d9c:	2100      	movs	r1, #0
 8001d9e:	20db      	movs	r0, #219	; 0xdb
 8001da0:	f7ff fdc4 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8001da4:	2100      	movs	r1, #0
 8001da6:	2030      	movs	r0, #48	; 0x30
 8001da8:	f7ff fdc0 	bl	800192c <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 8001dac:	2100      	movs	r1, #0
 8001dae:	20a4      	movs	r0, #164	; 0xa4
 8001db0:	f7ff fdbc 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
 8001db4:	2100      	movs	r1, #0
 8001db6:	20a6      	movs	r0, #166	; 0xa6
 8001db8:	f7ff fdb8 	bl	800192c <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
 8001dbc:	2100      	movs	r1, #0
 8001dbe:	20af      	movs	r0, #175	; 0xaf
 8001dc0:	f7ff fdb4 	bl	800192c <OLED_WR_Byte>
	OLED_Clear();                //清屏
 8001dc4:	f7ff fddc 	bl	8001980 <OLED_Clear>
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8001dc8:	2300      	movs	r3, #0
 8001dca:	71fb      	strb	r3, [r7, #7]
 8001dcc:	e026      	b.n	8001e1c <OLED_Init+0x140>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8001dce:	79fb      	ldrb	r3, [r7, #7]
 8001dd0:	3b50      	subs	r3, #80	; 0x50
 8001dd2:	b2db      	uxtb	r3, r3
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff fda8 	bl	800192c <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8001ddc:	2100      	movs	r1, #0
 8001dde:	2000      	movs	r0, #0
 8001de0:	f7ff fda4 	bl	800192c <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8001de4:	2100      	movs	r1, #0
 8001de6:	2010      	movs	r0, #16
 8001de8:	f7ff fda0 	bl	800192c <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[i][n],OLED_DATA);
 8001dec:	2300      	movs	r3, #0
 8001dee:	71bb      	strb	r3, [r7, #6]
 8001df0:	e00d      	b.n	8001e0e <OLED_Init+0x132>
 8001df2:	79fa      	ldrb	r2, [r7, #7]
 8001df4:	79bb      	ldrb	r3, [r7, #6]
 8001df6:	490e      	ldr	r1, [pc, #56]	; (8001e30 <OLED_Init+0x154>)
 8001df8:	01d2      	lsls	r2, r2, #7
 8001dfa:	440a      	add	r2, r1
 8001dfc:	4413      	add	r3, r2
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	2101      	movs	r1, #1
 8001e02:	4618      	mov	r0, r3
 8001e04:	f7ff fd92 	bl	800192c <OLED_WR_Byte>
 8001e08:	79bb      	ldrb	r3, [r7, #6]
 8001e0a:	3301      	adds	r3, #1
 8001e0c:	71bb      	strb	r3, [r7, #6]
 8001e0e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	daed      	bge.n	8001df2 <OLED_Init+0x116>
	for(i=0;i<8;i++)  
 8001e16:	79fb      	ldrb	r3, [r7, #7]
 8001e18:	3301      	adds	r3, #1
 8001e1a:	71fb      	strb	r3, [r7, #7]
 8001e1c:	79fb      	ldrb	r3, [r7, #7]
 8001e1e:	2b07      	cmp	r3, #7
 8001e20:	d9d5      	bls.n	8001dce <OLED_Init+0xf2>
	}   
}  
 8001e22:	bf00      	nop
 8001e24:	3708      	adds	r7, #8
 8001e26:	46bd      	mov	sp, r7
 8001e28:	bd80      	pop	{r7, pc}
 8001e2a:	bf00      	nop
 8001e2c:	40020400 	.word	0x40020400
 8001e30:	2000082c 	.word	0x2000082c

08001e34 <remoteInit>:
float ch_float[6] = { }; //遥控器通道
float conf=0;
float val=0;
//Roll Factor,Pitch Factor,Yaw Factor,Throttle Factor,Forward Factor,Lateral Factor
void remoteInit(UART_HandleTypeDef *huart)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	68da      	ldr	r2, [r3, #12]
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f042 0210 	orr.w	r2, r2, #16
 8001e4a:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8001e4c:	2219      	movs	r2, #25
 8001e4e:	4904      	ldr	r1, [pc, #16]	; (8001e60 <remoteInit+0x2c>)
 8001e50:	6878      	ldr	r0, [r7, #4]
 8001e52:	f004 f829 	bl	8005ea8 <HAL_UART_Receive_DMA>
}
 8001e56:	bf00      	nop
 8001e58:	3708      	adds	r7, #8
 8001e5a:	46bd      	mov	sp, r7
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	20000280 	.word	0x20000280

08001e64 <remote>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void remote(UART_HandleTypeDef *huart)
{
 8001e64:	b490      	push	{r4, r7}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
	float *dat = (float*)(remoteBuffer+4);
 8001e6c:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <remote+0x13c>)
 8001e6e:	617b      	str	r3, [r7, #20]
	if(remoteBuffer[3]==0x00)
 8001e70:	4b4c      	ldr	r3, [pc, #304]	; (8001fa4 <remote+0x140>)
 8001e72:	78db      	ldrb	r3, [r3, #3]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d108      	bne.n	8001e8a <remote+0x26>
	{
		ch_float[4]=dat[1];
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	4a4a      	ldr	r2, [pc, #296]	; (8001fa8 <remote+0x144>)
 8001e7e:	6113      	str	r3, [r2, #16]
		ch_float[5]=dat[0];
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	4a48      	ldr	r2, [pc, #288]	; (8001fa8 <remote+0x144>)
 8001e86:	6153      	str	r3, [r2, #20]
	}else if(remoteBuffer[3]==0x05)
	{
		ch_float[2]=dat[0];
		ch_float[3]=dat[1];
	}
}
 8001e88:	e084      	b.n	8001f94 <remote+0x130>
	}else if(remoteBuffer[3]==0x01)
 8001e8a:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <remote+0x140>)
 8001e8c:	78db      	ldrb	r3, [r3, #3]
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d108      	bne.n	8001ea4 <remote+0x40>
		ch_float[0]=dat[0];
 8001e92:	697b      	ldr	r3, [r7, #20]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	4a44      	ldr	r2, [pc, #272]	; (8001fa8 <remote+0x144>)
 8001e98:	6013      	str	r3, [r2, #0]
		ch_float[1]=dat[1];
 8001e9a:	697b      	ldr	r3, [r7, #20]
 8001e9c:	685b      	ldr	r3, [r3, #4]
 8001e9e:	4a42      	ldr	r2, [pc, #264]	; (8001fa8 <remote+0x144>)
 8001ea0:	6053      	str	r3, [r2, #4]
}
 8001ea2:	e077      	b.n	8001f94 <remote+0x130>
	}else if(remoteBuffer[3]==0x02)
 8001ea4:	4b3f      	ldr	r3, [pc, #252]	; (8001fa4 <remote+0x140>)
 8001ea6:	78db      	ldrb	r3, [r3, #3]
 8001ea8:	2b02      	cmp	r3, #2
 8001eaa:	d105      	bne.n	8001eb8 <remote+0x54>
		lock = remoteBuffer[7];
 8001eac:	4b3d      	ldr	r3, [pc, #244]	; (8001fa4 <remote+0x140>)
 8001eae:	79db      	ldrb	r3, [r3, #7]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b3e      	ldr	r3, [pc, #248]	; (8001fac <remote+0x148>)
 8001eb4:	601a      	str	r2, [r3, #0]
}
 8001eb6:	e06d      	b.n	8001f94 <remote+0x130>
	}else if(remoteBuffer[3]==0x03)//通道选择
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	; (8001fa4 <remote+0x140>)
 8001eba:	78db      	ldrb	r3, [r3, #3]
 8001ebc:	2b03      	cmp	r3, #3
 8001ebe:	d12e      	bne.n	8001f1e <remote+0xba>
		conf=dat[0];
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a3a      	ldr	r2, [pc, #232]	; (8001fb0 <remote+0x14c>)
 8001ec6:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8001ec8:	4b39      	ldr	r3, [pc, #228]	; (8001fb0 <remote+0x14c>)
 8001eca:	edd3 7a00 	vldr	s15, [r3]
 8001ece:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ed2:	ee17 3a90 	vmov	r3, s15
 8001ed6:	60fb      	str	r3, [r7, #12]
		val=pid_ver[i_conf/3][i_conf%3];
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	4a36      	ldr	r2, [pc, #216]	; (8001fb4 <remote+0x150>)
 8001edc:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee0:	17db      	asrs	r3, r3, #31
 8001ee2:	1ad0      	subs	r0, r2, r3
 8001ee4:	68f9      	ldr	r1, [r7, #12]
 8001ee6:	4b33      	ldr	r3, [pc, #204]	; (8001fb4 <remote+0x150>)
 8001ee8:	fb83 3201 	smull	r3, r2, r3, r1
 8001eec:	17cb      	asrs	r3, r1, #31
 8001eee:	1ad2      	subs	r2, r2, r3
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	005b      	lsls	r3, r3, #1
 8001ef4:	4413      	add	r3, r2
 8001ef6:	1aca      	subs	r2, r1, r3
 8001ef8:	492f      	ldr	r1, [pc, #188]	; (8001fb8 <remote+0x154>)
 8001efa:	4603      	mov	r3, r0
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	1a1b      	subs	r3, r3, r0
 8001f00:	4413      	add	r3, r2
 8001f02:	009b      	lsls	r3, r3, #2
 8001f04:	440b      	add	r3, r1
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	4a2c      	ldr	r2, [pc, #176]	; (8001fbc <remote+0x158>)
 8001f0a:	6013      	str	r3, [r2, #0]
		frame.fdata[24]=conf;
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <remote+0x14c>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a2b      	ldr	r2, [pc, #172]	; (8001fc0 <remote+0x15c>)
 8001f12:	6613      	str	r3, [r2, #96]	; 0x60
		frame.fdata[25]=val;
 8001f14:	4b29      	ldr	r3, [pc, #164]	; (8001fbc <remote+0x158>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a29      	ldr	r2, [pc, #164]	; (8001fc0 <remote+0x15c>)
 8001f1a:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001f1c:	e03a      	b.n	8001f94 <remote+0x130>
	}else if(remoteBuffer[3]==0x04)//通道值
 8001f1e:	4b21      	ldr	r3, [pc, #132]	; (8001fa4 <remote+0x140>)
 8001f20:	78db      	ldrb	r3, [r3, #3]
 8001f22:	2b04      	cmp	r3, #4
 8001f24:	d12a      	bne.n	8001f7c <remote+0x118>
		val=dat[0];
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a24      	ldr	r2, [pc, #144]	; (8001fbc <remote+0x158>)
 8001f2c:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 8001f2e:	4b20      	ldr	r3, [pc, #128]	; (8001fb0 <remote+0x14c>)
 8001f30:	edd3 7a00 	vldr	s15, [r3]
 8001f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f38:	ee17 3a90 	vmov	r3, s15
 8001f3c:	613b      	str	r3, [r7, #16]
		pid_ver[i_conf/3][i_conf%3]=val;
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4a1c      	ldr	r2, [pc, #112]	; (8001fb4 <remote+0x150>)
 8001f42:	fb82 1203 	smull	r1, r2, r2, r3
 8001f46:	17db      	asrs	r3, r3, #31
 8001f48:	1ad0      	subs	r0, r2, r3
 8001f4a:	6939      	ldr	r1, [r7, #16]
 8001f4c:	4b19      	ldr	r3, [pc, #100]	; (8001fb4 <remote+0x150>)
 8001f4e:	fb83 3201 	smull	r3, r2, r3, r1
 8001f52:	17cb      	asrs	r3, r1, #31
 8001f54:	1ad2      	subs	r2, r2, r3
 8001f56:	4613      	mov	r3, r2
 8001f58:	005b      	lsls	r3, r3, #1
 8001f5a:	4413      	add	r3, r2
 8001f5c:	1aca      	subs	r2, r1, r3
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <remote+0x158>)
 8001f60:	6819      	ldr	r1, [r3, #0]
 8001f62:	4c15      	ldr	r4, [pc, #84]	; (8001fb8 <remote+0x154>)
 8001f64:	4603      	mov	r3, r0
 8001f66:	00db      	lsls	r3, r3, #3
 8001f68:	1a1b      	subs	r3, r3, r0
 8001f6a:	4413      	add	r3, r2
 8001f6c:	009b      	lsls	r3, r3, #2
 8001f6e:	4423      	add	r3, r4
 8001f70:	6019      	str	r1, [r3, #0]
		frame.fdata[25]=val;
 8001f72:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <remote+0x158>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a12      	ldr	r2, [pc, #72]	; (8001fc0 <remote+0x15c>)
 8001f78:	6653      	str	r3, [r2, #100]	; 0x64
}
 8001f7a:	e00b      	b.n	8001f94 <remote+0x130>
	}else if(remoteBuffer[3]==0x05)
 8001f7c:	4b09      	ldr	r3, [pc, #36]	; (8001fa4 <remote+0x140>)
 8001f7e:	78db      	ldrb	r3, [r3, #3]
 8001f80:	2b05      	cmp	r3, #5
 8001f82:	d107      	bne.n	8001f94 <remote+0x130>
		ch_float[2]=dat[0];
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a07      	ldr	r2, [pc, #28]	; (8001fa8 <remote+0x144>)
 8001f8a:	6093      	str	r3, [r2, #8]
		ch_float[3]=dat[1];
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	4a05      	ldr	r2, [pc, #20]	; (8001fa8 <remote+0x144>)
 8001f92:	60d3      	str	r3, [r2, #12]
}
 8001f94:	bf00      	nop
 8001f96:	3718      	adds	r7, #24
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bc90      	pop	{r4, r7}
 8001f9c:	4770      	bx	lr
 8001f9e:	bf00      	nop
 8001fa0:	20000284 	.word	0x20000284
 8001fa4:	20000280 	.word	0x20000280
 8001fa8:	2000029c 	.word	0x2000029c
 8001fac:	2000027c 	.word	0x2000027c
 8001fb0:	200002b4 	.word	0x200002b4
 8001fb4:	55555556 	.word	0x55555556
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	200002b8 	.word	0x200002b8
 8001fc0:	200000a8 	.word	0x200000a8

08001fc4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b083      	sub	sp, #12
 8001fc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fca:	2300      	movs	r3, #0
 8001fcc:	607b      	str	r3, [r7, #4]
 8001fce:	4b10      	ldr	r3, [pc, #64]	; (8002010 <HAL_MspInit+0x4c>)
 8001fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fd2:	4a0f      	ldr	r2, [pc, #60]	; (8002010 <HAL_MspInit+0x4c>)
 8001fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_MspInit+0x4c>)
 8001fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fe2:	607b      	str	r3, [r7, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	603b      	str	r3, [r7, #0]
 8001fea:	4b09      	ldr	r3, [pc, #36]	; (8002010 <HAL_MspInit+0x4c>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	4a08      	ldr	r2, [pc, #32]	; (8002010 <HAL_MspInit+0x4c>)
 8001ff0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	6413      	str	r3, [r2, #64]	; 0x40
 8001ff6:	4b06      	ldr	r3, [pc, #24]	; (8002010 <HAL_MspInit+0x4c>)
 8001ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ffa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ffe:	603b      	str	r3, [r7, #0]
 8002000:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002002:	bf00      	nop
 8002004:	370c      	adds	r7, #12
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40023800 	.word	0x40023800

08002014 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a17      	ldr	r2, [pc, #92]	; (8002090 <HAL_ADC_MspInit+0x7c>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d127      	bne.n	8002086 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002036:	2300      	movs	r3, #0
 8002038:	613b      	str	r3, [r7, #16]
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_ADC_MspInit+0x80>)
 800203c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800203e:	4a15      	ldr	r2, [pc, #84]	; (8002094 <HAL_ADC_MspInit+0x80>)
 8002040:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002044:	6453      	str	r3, [r2, #68]	; 0x44
 8002046:	4b13      	ldr	r3, [pc, #76]	; (8002094 <HAL_ADC_MspInit+0x80>)
 8002048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800204a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	60fb      	str	r3, [r7, #12]
 8002056:	4b0f      	ldr	r3, [pc, #60]	; (8002094 <HAL_ADC_MspInit+0x80>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a0e      	ldr	r2, [pc, #56]	; (8002094 <HAL_ADC_MspInit+0x80>)
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <HAL_ADC_MspInit+0x80>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0301 	and.w	r3, r3, #1
 800206a:	60fb      	str	r3, [r7, #12]
 800206c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800206e:	2310      	movs	r3, #16
 8002070:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002072:	2303      	movs	r3, #3
 8002074:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002076:	2300      	movs	r3, #0
 8002078:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	; (8002098 <HAL_ADC_MspInit+0x84>)
 8002082:	f001 fddd 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40012000 	.word	0x40012000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000

0800209c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	; 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a28      	ldr	r2, [pc, #160]	; (800215c <HAL_SPI_MspInit+0xc0>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d149      	bne.n	8002152 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b27      	ldr	r3, [pc, #156]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	4a26      	ldr	r2, [pc, #152]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 80020c8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80020cc:	6453      	str	r3, [r2, #68]	; 0x44
 80020ce:	4b24      	ldr	r3, [pc, #144]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 80020d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b20      	ldr	r3, [pc, #128]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020e2:	4a1f      	ldr	r2, [pc, #124]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ea:	4b1d      	ldr	r3, [pc, #116]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f6:	2300      	movs	r3, #0
 80020f8:	60bb      	str	r3, [r7, #8]
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 80020fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fe:	4a18      	ldr	r2, [pc, #96]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 8002100:	f043 0302 	orr.w	r3, r3, #2
 8002104:	6313      	str	r3, [r2, #48]	; 0x30
 8002106:	4b16      	ldr	r3, [pc, #88]	; (8002160 <HAL_SPI_MspInit+0xc4>)
 8002108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210a:	f003 0302 	and.w	r3, r3, #2
 800210e:	60bb      	str	r3, [r7, #8]
 8002110:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002112:	2320      	movs	r3, #32
 8002114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002116:	2302      	movs	r3, #2
 8002118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800211a:	2300      	movs	r3, #0
 800211c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211e:	2303      	movs	r3, #3
 8002120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002122:	2305      	movs	r3, #5
 8002124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002126:	f107 0314 	add.w	r3, r7, #20
 800212a:	4619      	mov	r1, r3
 800212c:	480d      	ldr	r0, [pc, #52]	; (8002164 <HAL_SPI_MspInit+0xc8>)
 800212e:	f001 fd87 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002132:	2330      	movs	r3, #48	; 0x30
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002136:	2302      	movs	r3, #2
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800213e:	2303      	movs	r3, #3
 8002140:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002142:	2305      	movs	r3, #5
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002146:	f107 0314 	add.w	r3, r7, #20
 800214a:	4619      	mov	r1, r3
 800214c:	4806      	ldr	r0, [pc, #24]	; (8002168 <HAL_SPI_MspInit+0xcc>)
 800214e:	f001 fd77 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002152:	bf00      	nop
 8002154:	3728      	adds	r7, #40	; 0x28
 8002156:	46bd      	mov	sp, r7
 8002158:	bd80      	pop	{r7, pc}
 800215a:	bf00      	nop
 800215c:	40013000 	.word	0x40013000
 8002160:	40023800 	.word	0x40023800
 8002164:	40020000 	.word	0x40020000
 8002168:	40020400 	.word	0x40020400

0800216c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b088      	sub	sp, #32
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a36      	ldr	r2, [pc, #216]	; (8002254 <HAL_TIM_Base_MspInit+0xe8>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d116      	bne.n	80021ac <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	4b35      	ldr	r3, [pc, #212]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a34      	ldr	r2, [pc, #208]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002188:	f043 0301 	orr.w	r3, r3, #1
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b32      	ldr	r3, [pc, #200]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f003 0301 	and.w	r3, r3, #1
 8002196:	61fb      	str	r3, [r7, #28]
 8002198:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 800219a:	2200      	movs	r2, #0
 800219c:	2100      	movs	r1, #0
 800219e:	2019      	movs	r0, #25
 80021a0:	f001 f918 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80021a4:	2019      	movs	r0, #25
 80021a6:	f001 f931 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 80021aa:	e04e      	b.n	800224a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d10e      	bne.n	80021d4 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	4b27      	ldr	r3, [pc, #156]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a26      	ldr	r2, [pc, #152]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b24      	ldr	r3, [pc, #144]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]
}
 80021d2:	e03a      	b.n	800224a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4a20      	ldr	r2, [pc, #128]	; (800225c <HAL_TIM_Base_MspInit+0xf0>)
 80021da:	4293      	cmp	r3, r2
 80021dc:	d10e      	bne.n	80021fc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80021de:	2300      	movs	r3, #0
 80021e0:	617b      	str	r3, [r7, #20]
 80021e2:	4b1d      	ldr	r3, [pc, #116]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 80021e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021e6:	4a1c      	ldr	r2, [pc, #112]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 80021e8:	f043 0302 	orr.w	r3, r3, #2
 80021ec:	6413      	str	r3, [r2, #64]	; 0x40
 80021ee:	4b1a      	ldr	r3, [pc, #104]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 80021f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021f2:	f003 0302 	and.w	r3, r3, #2
 80021f6:	617b      	str	r3, [r7, #20]
 80021f8:	697b      	ldr	r3, [r7, #20]
}
 80021fa:	e026      	b.n	800224a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	4a17      	ldr	r2, [pc, #92]	; (8002260 <HAL_TIM_Base_MspInit+0xf4>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d10e      	bne.n	8002224 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002206:	2300      	movs	r3, #0
 8002208:	613b      	str	r3, [r7, #16]
 800220a:	4b13      	ldr	r3, [pc, #76]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 800220c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220e:	4a12      	ldr	r2, [pc, #72]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002210:	f043 0304 	orr.w	r3, r3, #4
 8002214:	6413      	str	r3, [r2, #64]	; 0x40
 8002216:	4b10      	ldr	r3, [pc, #64]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221a:	f003 0304 	and.w	r3, r3, #4
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	693b      	ldr	r3, [r7, #16]
}
 8002222:	e012      	b.n	800224a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a0e      	ldr	r2, [pc, #56]	; (8002264 <HAL_TIM_Base_MspInit+0xf8>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10d      	bne.n	800224a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b09      	ldr	r3, [pc, #36]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002234:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002236:	4a08      	ldr	r2, [pc, #32]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002238:	f043 0302 	orr.w	r3, r3, #2
 800223c:	6453      	str	r3, [r2, #68]	; 0x44
 800223e:	4b06      	ldr	r3, [pc, #24]	; (8002258 <HAL_TIM_Base_MspInit+0xec>)
 8002240:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002242:	f003 0302 	and.w	r3, r3, #2
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
}
 800224a:	bf00      	nop
 800224c:	3720      	adds	r7, #32
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	40010000 	.word	0x40010000
 8002258:	40023800 	.word	0x40023800
 800225c:	40000400 	.word	0x40000400
 8002260:	40000800 	.word	0x40000800
 8002264:	40010400 	.word	0x40010400

08002268 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b08a      	sub	sp, #40	; 0x28
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	2200      	movs	r2, #0
 8002276:	601a      	str	r2, [r3, #0]
 8002278:	605a      	str	r2, [r3, #4]
 800227a:	609a      	str	r2, [r3, #8]
 800227c:	60da      	str	r2, [r3, #12]
 800227e:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM5)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a23      	ldr	r2, [pc, #140]	; (8002314 <HAL_TIM_PWM_MspInit+0xac>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d12c      	bne.n	80022e4 <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b22      	ldr	r3, [pc, #136]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 8002290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002292:	4a21      	ldr	r2, [pc, #132]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 8002294:	f043 0308 	orr.w	r3, r3, #8
 8002298:	6413      	str	r3, [r2, #64]	; 0x40
 800229a:	4b1f      	ldr	r3, [pc, #124]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 800229c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800229e:	f003 0308 	and.w	r3, r3, #8
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022a6:	2300      	movs	r3, #0
 80022a8:	60fb      	str	r3, [r7, #12]
 80022aa:	4b1b      	ldr	r3, [pc, #108]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	4a1a      	ldr	r2, [pc, #104]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 80022b0:	f043 0301 	orr.w	r3, r3, #1
 80022b4:	6313      	str	r3, [r2, #48]	; 0x30
 80022b6:	4b18      	ldr	r3, [pc, #96]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 80022b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ba:	f003 0301 	and.w	r3, r3, #1
 80022be:	60fb      	str	r3, [r7, #12]
 80022c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80022c2:	2303      	movs	r3, #3
 80022c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022c6:	2302      	movs	r3, #2
 80022c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022ca:	2300      	movs	r3, #0
 80022cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022ce:	2300      	movs	r3, #0
 80022d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80022d2:	2302      	movs	r3, #2
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d6:	f107 0314 	add.w	r3, r7, #20
 80022da:	4619      	mov	r1, r3
 80022dc:	480f      	ldr	r0, [pc, #60]	; (800231c <HAL_TIM_PWM_MspInit+0xb4>)
 80022de:	f001 fcaf 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 80022e2:	e012      	b.n	800230a <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM12)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	4a0d      	ldr	r2, [pc, #52]	; (8002320 <HAL_TIM_PWM_MspInit+0xb8>)
 80022ea:	4293      	cmp	r3, r2
 80022ec:	d10d      	bne.n	800230a <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 80022ee:	2300      	movs	r3, #0
 80022f0:	60bb      	str	r3, [r7, #8]
 80022f2:	4b09      	ldr	r3, [pc, #36]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 80022f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f6:	4a08      	ldr	r2, [pc, #32]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 80022f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80022fc:	6413      	str	r3, [r2, #64]	; 0x40
 80022fe:	4b06      	ldr	r3, [pc, #24]	; (8002318 <HAL_TIM_PWM_MspInit+0xb0>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002302:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002306:	60bb      	str	r3, [r7, #8]
 8002308:	68bb      	ldr	r3, [r7, #8]
}
 800230a:	bf00      	nop
 800230c:	3728      	adds	r7, #40	; 0x28
 800230e:	46bd      	mov	sp, r7
 8002310:	bd80      	pop	{r7, pc}
 8002312:	bf00      	nop
 8002314:	40000c00 	.word	0x40000c00
 8002318:	40023800 	.word	0x40023800
 800231c:	40020000 	.word	0x40020000
 8002320:	40001800 	.word	0x40001800

08002324 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08e      	sub	sp, #56	; 0x38
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]
 8002334:	605a      	str	r2, [r3, #4]
 8002336:	609a      	str	r2, [r3, #8]
 8002338:	60da      	str	r2, [r3, #12]
 800233a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	4a6a      	ldr	r2, [pc, #424]	; (80024ec <HAL_TIM_MspPostInit+0x1c8>)
 8002342:	4293      	cmp	r3, r2
 8002344:	d13c      	bne.n	80023c0 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002346:	2300      	movs	r3, #0
 8002348:	623b      	str	r3, [r7, #32]
 800234a:	4b69      	ldr	r3, [pc, #420]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	4a68      	ldr	r2, [pc, #416]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 8002350:	f043 0301 	orr.w	r3, r3, #1
 8002354:	6313      	str	r3, [r2, #48]	; 0x30
 8002356:	4b66      	ldr	r3, [pc, #408]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 8002358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	623b      	str	r3, [r7, #32]
 8002360:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	61fb      	str	r3, [r7, #28]
 8002366:	4b62      	ldr	r3, [pc, #392]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	6313      	str	r3, [r2, #48]	; 0x30
 8002372:	4b5f      	ldr	r3, [pc, #380]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 8002374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	61fb      	str	r3, [r7, #28]
 800237c:	69fb      	ldr	r3, [r7, #28]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800237e:	23c0      	movs	r3, #192	; 0xc0
 8002380:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002382:	2302      	movs	r3, #2
 8002384:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002386:	2300      	movs	r3, #0
 8002388:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238a:	2300      	movs	r3, #0
 800238c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800238e:	2302      	movs	r3, #2
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002392:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002396:	4619      	mov	r1, r3
 8002398:	4856      	ldr	r0, [pc, #344]	; (80024f4 <HAL_TIM_MspPostInit+0x1d0>)
 800239a:	f001 fc51 	bl	8003c40 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800239e:	2303      	movs	r3, #3
 80023a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a2:	2302      	movs	r3, #2
 80023a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a6:	2300      	movs	r3, #0
 80023a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023aa:	2300      	movs	r3, #0
 80023ac:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80023ae:	2302      	movs	r3, #2
 80023b0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80023b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80023b6:	4619      	mov	r1, r3
 80023b8:	484f      	ldr	r0, [pc, #316]	; (80024f8 <HAL_TIM_MspPostInit+0x1d4>)
 80023ba:	f001 fc41 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 80023be:	e091      	b.n	80024e4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4a4d      	ldr	r2, [pc, #308]	; (80024fc <HAL_TIM_MspPostInit+0x1d8>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d11f      	bne.n	800240a <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80023ca:	2300      	movs	r3, #0
 80023cc:	61bb      	str	r3, [r7, #24]
 80023ce:	4b48      	ldr	r3, [pc, #288]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 80023d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d2:	4a47      	ldr	r2, [pc, #284]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 80023d4:	f043 0308 	orr.w	r3, r3, #8
 80023d8:	6313      	str	r3, [r2, #48]	; 0x30
 80023da:	4b45      	ldr	r3, [pc, #276]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 80023dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023de:	f003 0308 	and.w	r3, r3, #8
 80023e2:	61bb      	str	r3, [r7, #24]
 80023e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023e6:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023ec:	2302      	movs	r3, #2
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023f0:	2300      	movs	r3, #0
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023f4:	2300      	movs	r3, #0
 80023f6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80023f8:	2302      	movs	r3, #2
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80023fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002400:	4619      	mov	r1, r3
 8002402:	483f      	ldr	r0, [pc, #252]	; (8002500 <HAL_TIM_MspPostInit+0x1dc>)
 8002404:	f001 fc1c 	bl	8003c40 <HAL_GPIO_Init>
}
 8002408:	e06c      	b.n	80024e4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a3d      	ldr	r2, [pc, #244]	; (8002504 <HAL_TIM_MspPostInit+0x1e0>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d11e      	bne.n	8002452 <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002414:	2300      	movs	r3, #0
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	4b35      	ldr	r3, [pc, #212]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 800241a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800241c:	4a34      	ldr	r2, [pc, #208]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 800241e:	f043 0301 	orr.w	r3, r3, #1
 8002422:	6313      	str	r3, [r2, #48]	; 0x30
 8002424:	4b32      	ldr	r3, [pc, #200]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 8002426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002428:	f003 0301 	and.w	r3, r3, #1
 800242c:	617b      	str	r3, [r7, #20]
 800242e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002430:	230c      	movs	r3, #12
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002434:	2302      	movs	r3, #2
 8002436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002438:	2300      	movs	r3, #0
 800243a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800243c:	2300      	movs	r3, #0
 800243e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002440:	2302      	movs	r3, #2
 8002442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002448:	4619      	mov	r1, r3
 800244a:	482a      	ldr	r0, [pc, #168]	; (80024f4 <HAL_TIM_MspPostInit+0x1d0>)
 800244c:	f001 fbf8 	bl	8003c40 <HAL_GPIO_Init>
}
 8002450:	e048      	b.n	80024e4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a2c      	ldr	r2, [pc, #176]	; (8002508 <HAL_TIM_MspPostInit+0x1e4>)
 8002458:	4293      	cmp	r3, r2
 800245a:	d11f      	bne.n	800249c <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800245c:	2300      	movs	r3, #0
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	4b23      	ldr	r3, [pc, #140]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 8002462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002464:	4a22      	ldr	r2, [pc, #136]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 8002466:	f043 0304 	orr.w	r3, r3, #4
 800246a:	6313      	str	r3, [r2, #48]	; 0x30
 800246c:	4b20      	ldr	r3, [pc, #128]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 800246e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002470:	f003 0304 	and.w	r3, r3, #4
 8002474:	613b      	str	r3, [r7, #16]
 8002476:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002478:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800247c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800247e:	2302      	movs	r3, #2
 8002480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002482:	2300      	movs	r3, #0
 8002484:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002486:	2300      	movs	r3, #0
 8002488:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800248a:	2303      	movs	r3, #3
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800248e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002492:	4619      	mov	r1, r3
 8002494:	481d      	ldr	r0, [pc, #116]	; (800250c <HAL_TIM_MspPostInit+0x1e8>)
 8002496:	f001 fbd3 	bl	8003c40 <HAL_GPIO_Init>
}
 800249a:	e023      	b.n	80024e4 <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a1b      	ldr	r2, [pc, #108]	; (8002510 <HAL_TIM_MspPostInit+0x1ec>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d11e      	bne.n	80024e4 <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	60fb      	str	r3, [r7, #12]
 80024aa:	4b11      	ldr	r3, [pc, #68]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 80024ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ae:	4a10      	ldr	r2, [pc, #64]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 80024b0:	f043 0302 	orr.w	r3, r3, #2
 80024b4:	6313      	str	r3, [r2, #48]	; 0x30
 80024b6:	4b0e      	ldr	r3, [pc, #56]	; (80024f0 <HAL_TIM_MspPostInit+0x1cc>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f003 0302 	and.w	r3, r3, #2
 80024be:	60fb      	str	r3, [r7, #12]
 80024c0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80024c2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80024c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024c8:	2302      	movs	r3, #2
 80024ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024cc:	2300      	movs	r3, #0
 80024ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024d0:	2300      	movs	r3, #0
 80024d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 80024d4:	2309      	movs	r3, #9
 80024d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80024dc:	4619      	mov	r1, r3
 80024de:	4806      	ldr	r0, [pc, #24]	; (80024f8 <HAL_TIM_MspPostInit+0x1d4>)
 80024e0:	f001 fbae 	bl	8003c40 <HAL_GPIO_Init>
}
 80024e4:	bf00      	nop
 80024e6:	3738      	adds	r7, #56	; 0x38
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	40000400 	.word	0x40000400
 80024f0:	40023800 	.word	0x40023800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40000800 	.word	0x40000800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40000c00 	.word	0x40000c00
 8002508:	40010400 	.word	0x40010400
 800250c:	40020800 	.word	0x40020800
 8002510:	40001800 	.word	0x40001800

08002514 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002514:	b580      	push	{r7, lr}
 8002516:	b092      	sub	sp, #72	; 0x48
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800251c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002520:	2200      	movs	r2, #0
 8002522:	601a      	str	r2, [r3, #0]
 8002524:	605a      	str	r2, [r3, #4]
 8002526:	609a      	str	r2, [r3, #8]
 8002528:	60da      	str	r2, [r3, #12]
 800252a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	4a91      	ldr	r2, [pc, #580]	; (8002778 <HAL_UART_MspInit+0x264>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d12d      	bne.n	8002592 <HAL_UART_MspInit+0x7e>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002536:	2300      	movs	r3, #0
 8002538:	633b      	str	r3, [r7, #48]	; 0x30
 800253a:	4b90      	ldr	r3, [pc, #576]	; (800277c <HAL_UART_MspInit+0x268>)
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4a8f      	ldr	r2, [pc, #572]	; (800277c <HAL_UART_MspInit+0x268>)
 8002540:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002544:	6413      	str	r3, [r2, #64]	; 0x40
 8002546:	4b8d      	ldr	r3, [pc, #564]	; (800277c <HAL_UART_MspInit+0x268>)
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800254e:	633b      	str	r3, [r7, #48]	; 0x30
 8002550:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002552:	2300      	movs	r3, #0
 8002554:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002556:	4b89      	ldr	r3, [pc, #548]	; (800277c <HAL_UART_MspInit+0x268>)
 8002558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800255a:	4a88      	ldr	r2, [pc, #544]	; (800277c <HAL_UART_MspInit+0x268>)
 800255c:	f043 0304 	orr.w	r3, r3, #4
 8002560:	6313      	str	r3, [r2, #48]	; 0x30
 8002562:	4b86      	ldr	r3, [pc, #536]	; (800277c <HAL_UART_MspInit+0x268>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800256c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800256e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002572:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002574:	2302      	movs	r3, #2
 8002576:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002578:	2301      	movs	r3, #1
 800257a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800257c:	2303      	movs	r3, #3
 800257e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002580:	2308      	movs	r3, #8
 8002582:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002584:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002588:	4619      	mov	r1, r3
 800258a:	487d      	ldr	r0, [pc, #500]	; (8002780 <HAL_UART_MspInit+0x26c>)
 800258c:	f001 fb58 	bl	8003c40 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8002590:	e1a3      	b.n	80028da <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==UART5)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a7b      	ldr	r2, [pc, #492]	; (8002784 <HAL_UART_MspInit+0x270>)
 8002598:	4293      	cmp	r3, r2
 800259a:	f040 8083 	bne.w	80026a4 <HAL_UART_MspInit+0x190>
    __HAL_RCC_UART5_CLK_ENABLE();
 800259e:	2300      	movs	r3, #0
 80025a0:	62bb      	str	r3, [r7, #40]	; 0x28
 80025a2:	4b76      	ldr	r3, [pc, #472]	; (800277c <HAL_UART_MspInit+0x268>)
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4a75      	ldr	r2, [pc, #468]	; (800277c <HAL_UART_MspInit+0x268>)
 80025a8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025ac:	6413      	str	r3, [r2, #64]	; 0x40
 80025ae:	4b73      	ldr	r3, [pc, #460]	; (800277c <HAL_UART_MspInit+0x268>)
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80025b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025ba:	2300      	movs	r3, #0
 80025bc:	627b      	str	r3, [r7, #36]	; 0x24
 80025be:	4b6f      	ldr	r3, [pc, #444]	; (800277c <HAL_UART_MspInit+0x268>)
 80025c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c2:	4a6e      	ldr	r2, [pc, #440]	; (800277c <HAL_UART_MspInit+0x268>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6313      	str	r3, [r2, #48]	; 0x30
 80025ca:	4b6c      	ldr	r3, [pc, #432]	; (800277c <HAL_UART_MspInit+0x268>)
 80025cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	627b      	str	r3, [r7, #36]	; 0x24
 80025d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025d6:	2300      	movs	r3, #0
 80025d8:	623b      	str	r3, [r7, #32]
 80025da:	4b68      	ldr	r3, [pc, #416]	; (800277c <HAL_UART_MspInit+0x268>)
 80025dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025de:	4a67      	ldr	r2, [pc, #412]	; (800277c <HAL_UART_MspInit+0x268>)
 80025e0:	f043 0308 	orr.w	r3, r3, #8
 80025e4:	6313      	str	r3, [r2, #48]	; 0x30
 80025e6:	4b65      	ldr	r3, [pc, #404]	; (800277c <HAL_UART_MspInit+0x268>)
 80025e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ea:	f003 0308 	and.w	r3, r3, #8
 80025ee:	623b      	str	r3, [r7, #32]
 80025f0:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80025f2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80025f6:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025fc:	2301      	movs	r3, #1
 80025fe:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002600:	2303      	movs	r3, #3
 8002602:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002604:	2308      	movs	r3, #8
 8002606:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002608:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800260c:	4619      	mov	r1, r3
 800260e:	485c      	ldr	r0, [pc, #368]	; (8002780 <HAL_UART_MspInit+0x26c>)
 8002610:	f001 fb16 	bl	8003c40 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002614:	2304      	movs	r3, #4
 8002616:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800261c:	2301      	movs	r3, #1
 800261e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002620:	2303      	movs	r3, #3
 8002622:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002624:	2308      	movs	r3, #8
 8002626:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002628:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800262c:	4619      	mov	r1, r3
 800262e:	4856      	ldr	r0, [pc, #344]	; (8002788 <HAL_UART_MspInit+0x274>)
 8002630:	f001 fb06 	bl	8003c40 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002634:	4b55      	ldr	r3, [pc, #340]	; (800278c <HAL_UART_MspInit+0x278>)
 8002636:	4a56      	ldr	r2, [pc, #344]	; (8002790 <HAL_UART_MspInit+0x27c>)
 8002638:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800263a:	4b54      	ldr	r3, [pc, #336]	; (800278c <HAL_UART_MspInit+0x278>)
 800263c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002640:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002642:	4b52      	ldr	r3, [pc, #328]	; (800278c <HAL_UART_MspInit+0x278>)
 8002644:	2200      	movs	r2, #0
 8002646:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002648:	4b50      	ldr	r3, [pc, #320]	; (800278c <HAL_UART_MspInit+0x278>)
 800264a:	2200      	movs	r2, #0
 800264c:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800264e:	4b4f      	ldr	r3, [pc, #316]	; (800278c <HAL_UART_MspInit+0x278>)
 8002650:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002654:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002656:	4b4d      	ldr	r3, [pc, #308]	; (800278c <HAL_UART_MspInit+0x278>)
 8002658:	2200      	movs	r2, #0
 800265a:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800265c:	4b4b      	ldr	r3, [pc, #300]	; (800278c <HAL_UART_MspInit+0x278>)
 800265e:	2200      	movs	r2, #0
 8002660:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8002662:	4b4a      	ldr	r3, [pc, #296]	; (800278c <HAL_UART_MspInit+0x278>)
 8002664:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002668:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800266a:	4b48      	ldr	r3, [pc, #288]	; (800278c <HAL_UART_MspInit+0x278>)
 800266c:	2200      	movs	r2, #0
 800266e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002670:	4b46      	ldr	r3, [pc, #280]	; (800278c <HAL_UART_MspInit+0x278>)
 8002672:	2200      	movs	r2, #0
 8002674:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002676:	4845      	ldr	r0, [pc, #276]	; (800278c <HAL_UART_MspInit+0x278>)
 8002678:	f000 fed6 	bl	8003428 <HAL_DMA_Init>
 800267c:	4603      	mov	r3, r0
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_UART_MspInit+0x172>
      Error_Handler();
 8002682:	f7fe ffed 	bl	8001660 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a40      	ldr	r2, [pc, #256]	; (800278c <HAL_UART_MspInit+0x278>)
 800268a:	635a      	str	r2, [r3, #52]	; 0x34
 800268c:	4a3f      	ldr	r2, [pc, #252]	; (800278c <HAL_UART_MspInit+0x278>)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8002692:	2200      	movs	r2, #0
 8002694:	2100      	movs	r1, #0
 8002696:	2035      	movs	r0, #53	; 0x35
 8002698:	f000 fe9c 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800269c:	2035      	movs	r0, #53	; 0x35
 800269e:	f000 feb5 	bl	800340c <HAL_NVIC_EnableIRQ>
}
 80026a2:	e11a      	b.n	80028da <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==USART1)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a3a      	ldr	r2, [pc, #232]	; (8002794 <HAL_UART_MspInit+0x280>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d17a      	bne.n	80027a4 <HAL_UART_MspInit+0x290>
    __HAL_RCC_USART1_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
 80026b2:	4b32      	ldr	r3, [pc, #200]	; (800277c <HAL_UART_MspInit+0x268>)
 80026b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b6:	4a31      	ldr	r2, [pc, #196]	; (800277c <HAL_UART_MspInit+0x268>)
 80026b8:	f043 0310 	orr.w	r3, r3, #16
 80026bc:	6453      	str	r3, [r2, #68]	; 0x44
 80026be:	4b2f      	ldr	r3, [pc, #188]	; (800277c <HAL_UART_MspInit+0x268>)
 80026c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026c2:	f003 0310 	and.w	r3, r3, #16
 80026c6:	61fb      	str	r3, [r7, #28]
 80026c8:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	61bb      	str	r3, [r7, #24]
 80026ce:	4b2b      	ldr	r3, [pc, #172]	; (800277c <HAL_UART_MspInit+0x268>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a2a      	ldr	r2, [pc, #168]	; (800277c <HAL_UART_MspInit+0x268>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b28      	ldr	r3, [pc, #160]	; (800277c <HAL_UART_MspInit+0x268>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	61bb      	str	r3, [r7, #24]
 80026e4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80026e6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80026ea:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026ec:	2302      	movs	r3, #2
 80026ee:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026f0:	2300      	movs	r3, #0
 80026f2:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80026f4:	2303      	movs	r3, #3
 80026f6:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80026f8:	2307      	movs	r3, #7
 80026fa:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002700:	4619      	mov	r1, r3
 8002702:	4825      	ldr	r0, [pc, #148]	; (8002798 <HAL_UART_MspInit+0x284>)
 8002704:	f001 fa9c 	bl	8003c40 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8002708:	4b24      	ldr	r3, [pc, #144]	; (800279c <HAL_UART_MspInit+0x288>)
 800270a:	4a25      	ldr	r2, [pc, #148]	; (80027a0 <HAL_UART_MspInit+0x28c>)
 800270c:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800270e:	4b23      	ldr	r3, [pc, #140]	; (800279c <HAL_UART_MspInit+0x288>)
 8002710:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002714:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002716:	4b21      	ldr	r3, [pc, #132]	; (800279c <HAL_UART_MspInit+0x288>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800271c:	4b1f      	ldr	r3, [pc, #124]	; (800279c <HAL_UART_MspInit+0x288>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002722:	4b1e      	ldr	r3, [pc, #120]	; (800279c <HAL_UART_MspInit+0x288>)
 8002724:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002728:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800272a:	4b1c      	ldr	r3, [pc, #112]	; (800279c <HAL_UART_MspInit+0x288>)
 800272c:	2200      	movs	r2, #0
 800272e:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002730:	4b1a      	ldr	r3, [pc, #104]	; (800279c <HAL_UART_MspInit+0x288>)
 8002732:	2200      	movs	r2, #0
 8002734:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8002736:	4b19      	ldr	r3, [pc, #100]	; (800279c <HAL_UART_MspInit+0x288>)
 8002738:	f44f 7280 	mov.w	r2, #256	; 0x100
 800273c:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800273e:	4b17      	ldr	r3, [pc, #92]	; (800279c <HAL_UART_MspInit+0x288>)
 8002740:	2200      	movs	r2, #0
 8002742:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002744:	4b15      	ldr	r3, [pc, #84]	; (800279c <HAL_UART_MspInit+0x288>)
 8002746:	2200      	movs	r2, #0
 8002748:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800274a:	4814      	ldr	r0, [pc, #80]	; (800279c <HAL_UART_MspInit+0x288>)
 800274c:	f000 fe6c 	bl	8003428 <HAL_DMA_Init>
 8002750:	4603      	mov	r3, r0
 8002752:	2b00      	cmp	r3, #0
 8002754:	d001      	beq.n	800275a <HAL_UART_MspInit+0x246>
      Error_Handler();
 8002756:	f7fe ff83 	bl	8001660 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a0f      	ldr	r2, [pc, #60]	; (800279c <HAL_UART_MspInit+0x288>)
 800275e:	635a      	str	r2, [r3, #52]	; 0x34
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <HAL_UART_MspInit+0x288>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002766:	2200      	movs	r2, #0
 8002768:	2100      	movs	r1, #0
 800276a:	2025      	movs	r0, #37	; 0x25
 800276c:	f000 fe32 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002770:	2025      	movs	r0, #37	; 0x25
 8002772:	f000 fe4b 	bl	800340c <HAL_NVIC_EnableIRQ>
}
 8002776:	e0b0      	b.n	80028da <HAL_UART_MspInit+0x3c6>
 8002778:	40004c00 	.word	0x40004c00
 800277c:	40023800 	.word	0x40023800
 8002780:	40020800 	.word	0x40020800
 8002784:	40005000 	.word	0x40005000
 8002788:	40020c00 	.word	0x40020c00
 800278c:	2000076c 	.word	0x2000076c
 8002790:	40026010 	.word	0x40026010
 8002794:	40011000 	.word	0x40011000
 8002798:	40020000 	.word	0x40020000
 800279c:	20000574 	.word	0x20000574
 80027a0:	40026440 	.word	0x40026440
  else if(huart->Instance==USART2)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a4e      	ldr	r2, [pc, #312]	; (80028e4 <HAL_UART_MspInit+0x3d0>)
 80027aa:	4293      	cmp	r3, r2
 80027ac:	d163      	bne.n	8002876 <HAL_UART_MspInit+0x362>
    __HAL_RCC_USART2_CLK_ENABLE();
 80027ae:	2300      	movs	r3, #0
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	4b4d      	ldr	r3, [pc, #308]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80027b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b6:	4a4c      	ldr	r2, [pc, #304]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80027b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80027bc:	6413      	str	r3, [r2, #64]	; 0x40
 80027be:	4b4a      	ldr	r3, [pc, #296]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80027c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80027ca:	2300      	movs	r3, #0
 80027cc:	613b      	str	r3, [r7, #16]
 80027ce:	4b46      	ldr	r3, [pc, #280]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80027d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027d2:	4a45      	ldr	r2, [pc, #276]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80027d4:	f043 0308 	orr.w	r3, r3, #8
 80027d8:	6313      	str	r3, [r2, #48]	; 0x30
 80027da:	4b43      	ldr	r3, [pc, #268]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80027dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027de:	f003 0308 	and.w	r3, r3, #8
 80027e2:	613b      	str	r3, [r7, #16]
 80027e4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80027e6:	2360      	movs	r3, #96	; 0x60
 80027e8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027ea:	2302      	movs	r3, #2
 80027ec:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ee:	2300      	movs	r3, #0
 80027f0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027f2:	2303      	movs	r3, #3
 80027f4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80027f6:	2307      	movs	r3, #7
 80027f8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027fa:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027fe:	4619      	mov	r1, r3
 8002800:	483a      	ldr	r0, [pc, #232]	; (80028ec <HAL_UART_MspInit+0x3d8>)
 8002802:	f001 fa1d 	bl	8003c40 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002806:	4b3a      	ldr	r3, [pc, #232]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 8002808:	4a3a      	ldr	r2, [pc, #232]	; (80028f4 <HAL_UART_MspInit+0x3e0>)
 800280a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800280c:	4b38      	ldr	r3, [pc, #224]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 800280e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002812:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002814:	4b36      	ldr	r3, [pc, #216]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 8002816:	2200      	movs	r2, #0
 8002818:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800281a:	4b35      	ldr	r3, [pc, #212]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 800281c:	2200      	movs	r2, #0
 800281e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002820:	4b33      	ldr	r3, [pc, #204]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 8002822:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002826:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002828:	4b31      	ldr	r3, [pc, #196]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 800282a:	2200      	movs	r2, #0
 800282c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800282e:	4b30      	ldr	r3, [pc, #192]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 8002830:	2200      	movs	r2, #0
 8002832:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002834:	4b2e      	ldr	r3, [pc, #184]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 8002836:	f44f 7280 	mov.w	r2, #256	; 0x100
 800283a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800283c:	4b2c      	ldr	r3, [pc, #176]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 800283e:	2200      	movs	r2, #0
 8002840:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002842:	4b2b      	ldr	r3, [pc, #172]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 8002844:	2200      	movs	r2, #0
 8002846:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002848:	4829      	ldr	r0, [pc, #164]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 800284a:	f000 fded 	bl	8003428 <HAL_DMA_Init>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_MspInit+0x344>
      Error_Handler();
 8002854:	f7fe ff04 	bl	8001660 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	4a25      	ldr	r2, [pc, #148]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 800285c:	635a      	str	r2, [r3, #52]	; 0x34
 800285e:	4a24      	ldr	r2, [pc, #144]	; (80028f0 <HAL_UART_MspInit+0x3dc>)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002864:	2200      	movs	r2, #0
 8002866:	2100      	movs	r1, #0
 8002868:	2026      	movs	r0, #38	; 0x26
 800286a:	f000 fdb3 	bl	80033d4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800286e:	2026      	movs	r0, #38	; 0x26
 8002870:	f000 fdcc 	bl	800340c <HAL_NVIC_EnableIRQ>
}
 8002874:	e031      	b.n	80028da <HAL_UART_MspInit+0x3c6>
  else if(huart->Instance==USART3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1f      	ldr	r2, [pc, #124]	; (80028f8 <HAL_UART_MspInit+0x3e4>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d12c      	bne.n	80028da <HAL_UART_MspInit+0x3c6>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
 8002884:	4b18      	ldr	r3, [pc, #96]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 8002886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002888:	4a17      	ldr	r2, [pc, #92]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 800288a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800288e:	6413      	str	r3, [r2, #64]	; 0x40
 8002890:	4b15      	ldr	r3, [pc, #84]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 8002892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002894:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002898:	60fb      	str	r3, [r7, #12]
 800289a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800289c:	2300      	movs	r3, #0
 800289e:	60bb      	str	r3, [r7, #8]
 80028a0:	4b11      	ldr	r3, [pc, #68]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80028a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028a4:	4a10      	ldr	r2, [pc, #64]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80028a6:	f043 0302 	orr.w	r3, r3, #2
 80028aa:	6313      	str	r3, [r2, #48]	; 0x30
 80028ac:	4b0e      	ldr	r3, [pc, #56]	; (80028e8 <HAL_UART_MspInit+0x3d4>)
 80028ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028b0:	f003 0302 	and.w	r3, r3, #2
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80028b8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80028bc:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028be:	2302      	movs	r3, #2
 80028c0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c2:	2300      	movs	r3, #0
 80028c4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028c6:	2303      	movs	r3, #3
 80028c8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80028ca:	2307      	movs	r3, #7
 80028cc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80028ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80028d2:	4619      	mov	r1, r3
 80028d4:	4809      	ldr	r0, [pc, #36]	; (80028fc <HAL_UART_MspInit+0x3e8>)
 80028d6:	f001 f9b3 	bl	8003c40 <HAL_GPIO_Init>
}
 80028da:	bf00      	nop
 80028dc:	3748      	adds	r7, #72	; 0x48
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40004400 	.word	0x40004400
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40020c00 	.word	0x40020c00
 80028f0:	2000034c 	.word	0x2000034c
 80028f4:	40026088 	.word	0x40026088
 80028f8:	40004800 	.word	0x40004800
 80028fc:	40020400 	.word	0x40020400

08002900 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08c      	sub	sp, #48	; 0x30
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8002908:	2300      	movs	r3, #0
 800290a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800290c:	2300      	movs	r3, #0
 800290e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8002910:	2200      	movs	r2, #0
 8002912:	6879      	ldr	r1, [r7, #4]
 8002914:	2037      	movs	r0, #55	; 0x37
 8002916:	f000 fd5d 	bl	80033d4 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800291a:	2037      	movs	r0, #55	; 0x37
 800291c:	f000 fd76 	bl	800340c <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8002920:	2300      	movs	r3, #0
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <HAL_InitTick+0xa4>)
 8002926:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <HAL_InitTick+0xa4>)
 800292a:	f043 0320 	orr.w	r3, r3, #32
 800292e:	6413      	str	r3, [r2, #64]	; 0x40
 8002930:	4b1c      	ldr	r3, [pc, #112]	; (80029a4 <HAL_InitTick+0xa4>)
 8002932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002934:	f003 0320 	and.w	r3, r3, #32
 8002938:	60fb      	str	r3, [r7, #12]
 800293a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800293c:	f107 0210 	add.w	r2, r7, #16
 8002940:	f107 0314 	add.w	r3, r7, #20
 8002944:	4611      	mov	r1, r2
 8002946:	4618      	mov	r0, r3
 8002948:	f001 ff90 	bl	800486c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800294c:	f001 ff66 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8002950:	4603      	mov	r3, r0
 8002952:	005b      	lsls	r3, r3, #1
 8002954:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002958:	4a13      	ldr	r2, [pc, #76]	; (80029a8 <HAL_InitTick+0xa8>)
 800295a:	fba2 2303 	umull	r2, r3, r2, r3
 800295e:	0c9b      	lsrs	r3, r3, #18
 8002960:	3b01      	subs	r3, #1
 8002962:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8002964:	4b11      	ldr	r3, [pc, #68]	; (80029ac <HAL_InitTick+0xac>)
 8002966:	4a12      	ldr	r2, [pc, #72]	; (80029b0 <HAL_InitTick+0xb0>)
 8002968:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_InitTick+0xac>)
 800296c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002970:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8002972:	4a0e      	ldr	r2, [pc, #56]	; (80029ac <HAL_InitTick+0xac>)
 8002974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002976:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8002978:	4b0c      	ldr	r3, [pc, #48]	; (80029ac <HAL_InitTick+0xac>)
 800297a:	2200      	movs	r2, #0
 800297c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800297e:	4b0b      	ldr	r3, [pc, #44]	; (80029ac <HAL_InitTick+0xac>)
 8002980:	2200      	movs	r2, #0
 8002982:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8002984:	4809      	ldr	r0, [pc, #36]	; (80029ac <HAL_InitTick+0xac>)
 8002986:	f002 f9e7 	bl	8004d58 <HAL_TIM_Base_Init>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d104      	bne.n	800299a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8002990:	4806      	ldr	r0, [pc, #24]	; (80029ac <HAL_InitTick+0xac>)
 8002992:	f002 fa30 	bl	8004df6 <HAL_TIM_Base_Start_IT>
 8002996:	4603      	mov	r3, r0
 8002998:	e000      	b.n	800299c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800299a:	2301      	movs	r3, #1
}
 800299c:	4618      	mov	r0, r3
 800299e:	3730      	adds	r7, #48	; 0x30
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd80      	pop	{r7, pc}
 80029a4:	40023800 	.word	0x40023800
 80029a8:	431bde83 	.word	0x431bde83
 80029ac:	20000c2c 	.word	0x20000c2c
 80029b0:	40001400 	.word	0x40001400

080029b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <NMI_Handler+0x4>

080029ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029ba:	b480      	push	{r7}
 80029bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029be:	e7fe      	b.n	80029be <HardFault_Handler+0x4>

080029c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029c4:	e7fe      	b.n	80029c4 <MemManage_Handler+0x4>

080029c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029c6:	b480      	push	{r7}
 80029c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029ca:	e7fe      	b.n	80029ca <BusFault_Handler+0x4>

080029cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029d0:	e7fe      	b.n	80029d0 <UsageFault_Handler+0x4>

080029d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029d2:	b480      	push	{r7}
 80029d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029d6:	bf00      	nop
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80029e4:	bf00      	nop
 80029e6:	46bd      	mov	sp, r7
 80029e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ec:	4770      	bx	lr

080029ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80029ee:	b480      	push	{r7}
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80029f2:	bf00      	nop
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr

080029fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80029fc:	b480      	push	{r7}
 80029fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a00:	bf00      	nop
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
	...

08002a0c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002a0c:	b580      	push	{r7, lr}
 8002a0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8002a10:	4802      	ldr	r0, [pc, #8]	; (8002a1c <DMA1_Stream0_IRQHandler+0x10>)
 8002a12:	f000 fea1 	bl	8003758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002a16:	bf00      	nop
 8002a18:	bd80      	pop	{r7, pc}
 8002a1a:	bf00      	nop
 8002a1c:	2000076c 	.word	0x2000076c

08002a20 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002a20:	b580      	push	{r7, lr}
 8002a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002a24:	4802      	ldr	r0, [pc, #8]	; (8002a30 <DMA1_Stream5_IRQHandler+0x10>)
 8002a26:	f000 fe97 	bl	8003758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002a2a:	bf00      	nop
 8002a2c:	bd80      	pop	{r7, pc}
 8002a2e:	bf00      	nop
 8002a30:	2000034c 	.word	0x2000034c

08002a34 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002a34:	b580      	push	{r7, lr}
 8002a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002a38:	4802      	ldr	r0, [pc, #8]	; (8002a44 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002a3a:	f002 fa69 	bl	8004f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	20000614 	.word	0x20000614

08002a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002a4c:	4802      	ldr	r0, [pc, #8]	; (8002a58 <USART1_IRQHandler+0x10>)
 8002a4e:	f003 faf7 	bl	8006040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002a52:	bf00      	nop
 8002a54:	bd80      	pop	{r7, pc}
 8002a56:	bf00      	nop
 8002a58:	200005d4 	.word	0x200005d4

08002a5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern unsigned char ch110[82];
    if(USART2->SR & 0x10)
 8002a62:	4b12      	ldr	r3, [pc, #72]	; (8002aac <USART2_IRQHandler+0x50>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d016      	beq.n	8002a9c <USART2_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8002a6e:	2300      	movs	r3, #0
 8002a70:	607b      	str	r3, [r7, #4]
 8002a72:	4b0f      	ldr	r3, [pc, #60]	; (8002ab0 <USART2_IRQHandler+0x54>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	607b      	str	r3, [r7, #4]
 8002a7a:	4b0d      	ldr	r3, [pc, #52]	; (8002ab0 <USART2_IRQHandler+0x54>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	687b      	ldr	r3, [r7, #4]
        if(ch110[0] != 0x5a)
 8002a84:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <USART2_IRQHandler+0x58>)
 8002a86:	781b      	ldrb	r3, [r3, #0]
 8002a88:	2b5a      	cmp	r3, #90	; 0x5a
 8002a8a:	d007      	beq.n	8002a9c <USART2_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart2);
 8002a8c:	4808      	ldr	r0, [pc, #32]	; (8002ab0 <USART2_IRQHandler+0x54>)
 8002a8e:	f003 fa8b 	bl	8005fa8 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart2, ch110, 82);
 8002a92:	2252      	movs	r2, #82	; 0x52
 8002a94:	4907      	ldr	r1, [pc, #28]	; (8002ab4 <USART2_IRQHandler+0x58>)
 8002a96:	4806      	ldr	r0, [pc, #24]	; (8002ab0 <USART2_IRQHandler+0x54>)
 8002a98:	f003 fa06 	bl	8005ea8 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a9c:	4804      	ldr	r0, [pc, #16]	; (8002ab0 <USART2_IRQHandler+0x54>)
 8002a9e:	f003 facf 	bl	8006040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
 8002aaa:	bf00      	nop
 8002aac:	40004400 	.word	0x40004400
 8002ab0:	2000072c 	.word	0x2000072c
 8002ab4:	200002ec 	.word	0x200002ec

08002ab8 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

    extern unsigned char remoteBuffer[25];
    if(UART5->SR & 0x10)
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <UART5_IRQHandler+0x5c>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f003 0310 	and.w	r3, r3, #16
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d01d      	beq.n	8002b06 <UART5_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 8002aca:	2300      	movs	r3, #0
 8002acc:	607b      	str	r3, [r7, #4]
 8002ace:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <UART5_IRQHandler+0x60>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	607b      	str	r3, [r7, #4]
 8002ad6:	4b10      	ldr	r3, [pc, #64]	; (8002b18 <UART5_IRQHandler+0x60>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	607b      	str	r3, [r7, #4]
 8002ade:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart5);
 8002ae0:	480d      	ldr	r0, [pc, #52]	; (8002b18 <UART5_IRQHandler+0x60>)
 8002ae2:	f003 fa61 	bl	8005fa8 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart5, remoteBuffer, 25);
 8002ae6:	2219      	movs	r2, #25
 8002ae8:	490c      	ldr	r1, [pc, #48]	; (8002b1c <UART5_IRQHandler+0x64>)
 8002aea:	480b      	ldr	r0, [pc, #44]	; (8002b18 <UART5_IRQHandler+0x60>)
 8002aec:	f003 f9dc 	bl	8005ea8 <HAL_UART_Receive_DMA>
        if (0x5a == remoteBuffer[0]&&0xa5 == remoteBuffer[1])
 8002af0:	4b0a      	ldr	r3, [pc, #40]	; (8002b1c <UART5_IRQHandler+0x64>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b5a      	cmp	r3, #90	; 0x5a
 8002af6:	d106      	bne.n	8002b06 <UART5_IRQHandler+0x4e>
 8002af8:	4b08      	ldr	r3, [pc, #32]	; (8002b1c <UART5_IRQHandler+0x64>)
 8002afa:	785b      	ldrb	r3, [r3, #1]
 8002afc:	2ba5      	cmp	r3, #165	; 0xa5
 8002afe:	d102      	bne.n	8002b06 <UART5_IRQHandler+0x4e>
        {
        	void remote(UART_HandleTypeDef *huart);

        	remote(&huart5);
 8002b00:	4805      	ldr	r0, [pc, #20]	; (8002b18 <UART5_IRQHandler+0x60>)
 8002b02:	f7ff f9af 	bl	8001e64 <remote>
        }
    }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002b06:	4804      	ldr	r0, [pc, #16]	; (8002b18 <UART5_IRQHandler+0x60>)
 8002b08:	f003 fa9a 	bl	8006040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8002b0c:	bf00      	nop
 8002b0e:	3708      	adds	r7, #8
 8002b10:	46bd      	mov	sp, r7
 8002b12:	bd80      	pop	{r7, pc}
 8002b14:	40005000 	.word	0x40005000
 8002b18:	200004ec 	.word	0x200004ec
 8002b1c:	20000280 	.word	0x20000280

08002b20 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002b24:	4802      	ldr	r0, [pc, #8]	; (8002b30 <TIM7_IRQHandler+0x10>)
 8002b26:	f002 f9f3 	bl	8004f10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002b2a:	bf00      	nop
 8002b2c:	bd80      	pop	{r7, pc}
 8002b2e:	bf00      	nop
 8002b30:	20000c2c 	.word	0x20000c2c

08002b34 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002b38:	4802      	ldr	r0, [pc, #8]	; (8002b44 <DMA2_Stream2_IRQHandler+0x10>)
 8002b3a:	f000 fe0d 	bl	8003758 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8002b3e:	bf00      	nop
 8002b40:	bd80      	pop	{r7, pc}
 8002b42:	bf00      	nop
 8002b44:	20000574 	.word	0x20000574

08002b48 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b086      	sub	sp, #24
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	60f8      	str	r0, [r7, #12]
 8002b50:	60b9      	str	r1, [r7, #8]
 8002b52:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
 8002b58:	e00a      	b.n	8002b70 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002b5a:	f3af 8000 	nop.w
 8002b5e:	4601      	mov	r1, r0
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	1c5a      	adds	r2, r3, #1
 8002b64:	60ba      	str	r2, [r7, #8]
 8002b66:	b2ca      	uxtb	r2, r1
 8002b68:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002b6a:	697b      	ldr	r3, [r7, #20]
 8002b6c:	3301      	adds	r3, #1
 8002b6e:	617b      	str	r3, [r7, #20]
 8002b70:	697a      	ldr	r2, [r7, #20]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	429a      	cmp	r2, r3
 8002b76:	dbf0      	blt.n	8002b5a <_read+0x12>
	}

return len;
 8002b78:	687b      	ldr	r3, [r7, #4]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}

08002b82 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002b82:	b480      	push	{r7}
 8002b84:	b083      	sub	sp, #12
 8002b86:	af00      	add	r7, sp, #0
 8002b88:	6078      	str	r0, [r7, #4]
	return -1;
 8002b8a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	370c      	adds	r7, #12
 8002b92:	46bd      	mov	sp, r7
 8002b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b98:	4770      	bx	lr

08002b9a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002b9a:	b480      	push	{r7}
 8002b9c:	b083      	sub	sp, #12
 8002b9e:	af00      	add	r7, sp, #0
 8002ba0:	6078      	str	r0, [r7, #4]
 8002ba2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002baa:	605a      	str	r2, [r3, #4]
	return 0;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	4618      	mov	r0, r3
 8002bb0:	370c      	adds	r7, #12
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb8:	4770      	bx	lr

08002bba <_isatty>:

int _isatty(int file)
{
 8002bba:	b480      	push	{r7}
 8002bbc:	b083      	sub	sp, #12
 8002bbe:	af00      	add	r7, sp, #0
 8002bc0:	6078      	str	r0, [r7, #4]
	return 1;
 8002bc2:	2301      	movs	r3, #1
}
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	b085      	sub	sp, #20
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	607a      	str	r2, [r7, #4]
	return 0;
 8002bdc:	2300      	movs	r3, #0
}
 8002bde:	4618      	mov	r0, r3
 8002be0:	3714      	adds	r7, #20
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
	...

08002bec <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002bec:	b580      	push	{r7, lr}
 8002bee:	b086      	sub	sp, #24
 8002bf0:	af00      	add	r7, sp, #0
 8002bf2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002bf4:	4a14      	ldr	r2, [pc, #80]	; (8002c48 <_sbrk+0x5c>)
 8002bf6:	4b15      	ldr	r3, [pc, #84]	; (8002c4c <_sbrk+0x60>)
 8002bf8:	1ad3      	subs	r3, r2, r3
 8002bfa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002bfc:	697b      	ldr	r3, [r7, #20]
 8002bfe:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002c00:	4b13      	ldr	r3, [pc, #76]	; (8002c50 <_sbrk+0x64>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d102      	bne.n	8002c0e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002c08:	4b11      	ldr	r3, [pc, #68]	; (8002c50 <_sbrk+0x64>)
 8002c0a:	4a12      	ldr	r2, [pc, #72]	; (8002c54 <_sbrk+0x68>)
 8002c0c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <_sbrk+0x64>)
 8002c10:	681a      	ldr	r2, [r3, #0]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4413      	add	r3, r2
 8002c16:	693a      	ldr	r2, [r7, #16]
 8002c18:	429a      	cmp	r2, r3
 8002c1a:	d207      	bcs.n	8002c2c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002c1c:	f004 f8ae 	bl	8006d7c <__errno>
 8002c20:	4602      	mov	r2, r0
 8002c22:	230c      	movs	r3, #12
 8002c24:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002c26:	f04f 33ff 	mov.w	r3, #4294967295
 8002c2a:	e009      	b.n	8002c40 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002c2c:	4b08      	ldr	r3, [pc, #32]	; (8002c50 <_sbrk+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002c32:	4b07      	ldr	r3, [pc, #28]	; (8002c50 <_sbrk+0x64>)
 8002c34:	681a      	ldr	r2, [r3, #0]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4413      	add	r3, r2
 8002c3a:	4a05      	ldr	r2, [pc, #20]	; (8002c50 <_sbrk+0x64>)
 8002c3c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002c3e:	68fb      	ldr	r3, [r7, #12]
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3718      	adds	r7, #24
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	20020000 	.word	0x20020000
 8002c4c:	00000400 	.word	0x00000400
 8002c50:	200002bc 	.word	0x200002bc
 8002c54:	20000c78 	.word	0x20000c78

08002c58 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c5c:	4b08      	ldr	r3, [pc, #32]	; (8002c80 <SystemInit+0x28>)
 8002c5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002c62:	4a07      	ldr	r2, [pc, #28]	; (8002c80 <SystemInit+0x28>)
 8002c64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002c68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002c6c:	4b04      	ldr	r3, [pc, #16]	; (8002c80 <SystemInit+0x28>)
 8002c6e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002c72:	609a      	str	r2, [r3, #8]
#endif
}
 8002c74:	bf00      	nop
 8002c76:	46bd      	mov	sp, r7
 8002c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7c:	4770      	bx	lr
 8002c7e:	bf00      	nop
 8002c80:	e000ed00 	.word	0xe000ed00

08002c84 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002cbc <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002c88:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002c8a:	e003      	b.n	8002c94 <LoopCopyDataInit>

08002c8c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002c8c:	4b0c      	ldr	r3, [pc, #48]	; (8002cc0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002c8e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002c90:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002c92:	3104      	adds	r1, #4

08002c94 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002c94:	480b      	ldr	r0, [pc, #44]	; (8002cc4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002c96:	4b0c      	ldr	r3, [pc, #48]	; (8002cc8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002c98:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002c9a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002c9c:	d3f6      	bcc.n	8002c8c <CopyDataInit>
  ldr  r2, =_sbss
 8002c9e:	4a0b      	ldr	r2, [pc, #44]	; (8002ccc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002ca0:	e002      	b.n	8002ca8 <LoopFillZerobss>

08002ca2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002ca2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002ca4:	f842 3b04 	str.w	r3, [r2], #4

08002ca8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002ca8:	4b09      	ldr	r3, [pc, #36]	; (8002cd0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002caa:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002cac:	d3f9      	bcc.n	8002ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cae:	f7ff ffd3 	bl	8002c58 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cb2:	f004 f869 	bl	8006d88 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002cb6:	f7fd fe05 	bl	80008c4 <main>
  bx  lr    
 8002cba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002cbc:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002cc0:	080081e0 	.word	0x080081e0
  ldr  r0, =_sdata
 8002cc4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002cc8:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 8002ccc:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8002cd0:	20000c74 	.word	0x20000c74

08002cd4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002cd4:	e7fe      	b.n	8002cd4 <ADC_IRQHandler>
	...

08002cd8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002cdc:	4b0e      	ldr	r3, [pc, #56]	; (8002d18 <HAL_Init+0x40>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a0d      	ldr	r2, [pc, #52]	; (8002d18 <HAL_Init+0x40>)
 8002ce2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ce6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002ce8:	4b0b      	ldr	r3, [pc, #44]	; (8002d18 <HAL_Init+0x40>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a0a      	ldr	r2, [pc, #40]	; (8002d18 <HAL_Init+0x40>)
 8002cee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cf2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cf4:	4b08      	ldr	r3, [pc, #32]	; (8002d18 <HAL_Init+0x40>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	4a07      	ldr	r2, [pc, #28]	; (8002d18 <HAL_Init+0x40>)
 8002cfa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002cfe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d00:	2003      	movs	r0, #3
 8002d02:	f000 fb5c 	bl	80033be <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d06:	2000      	movs	r0, #0
 8002d08:	f7ff fdfa 	bl	8002900 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d0c:	f7ff f95a 	bl	8001fc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d10:	2300      	movs	r3, #0
}
 8002d12:	4618      	mov	r0, r3
 8002d14:	bd80      	pop	{r7, pc}
 8002d16:	bf00      	nop
 8002d18:	40023c00 	.word	0x40023c00

08002d1c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d20:	4b06      	ldr	r3, [pc, #24]	; (8002d3c <HAL_IncTick+0x20>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	461a      	mov	r2, r3
 8002d26:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <HAL_IncTick+0x24>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4413      	add	r3, r2
 8002d2c:	4a04      	ldr	r2, [pc, #16]	; (8002d40 <HAL_IncTick+0x24>)
 8002d2e:	6013      	str	r3, [r2, #0]
}
 8002d30:	bf00      	nop
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	200001dc 	.word	0x200001dc
 8002d40:	20000c6c 	.word	0x20000c6c

08002d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return uwTick;
 8002d48:	4b03      	ldr	r3, [pc, #12]	; (8002d58 <HAL_GetTick+0x14>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr
 8002d56:	bf00      	nop
 8002d58:	20000c6c 	.word	0x20000c6c

08002d5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b084      	sub	sp, #16
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002d64:	f7ff ffee 	bl	8002d44 <HAL_GetTick>
 8002d68:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d74:	d005      	beq.n	8002d82 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002d76:	4b09      	ldr	r3, [pc, #36]	; (8002d9c <HAL_Delay+0x40>)
 8002d78:	781b      	ldrb	r3, [r3, #0]
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	4413      	add	r3, r2
 8002d80:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002d82:	bf00      	nop
 8002d84:	f7ff ffde 	bl	8002d44 <HAL_GetTick>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	68bb      	ldr	r3, [r7, #8]
 8002d8c:	1ad3      	subs	r3, r2, r3
 8002d8e:	68fa      	ldr	r2, [r7, #12]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d8f7      	bhi.n	8002d84 <HAL_Delay+0x28>
  {
  }
}
 8002d94:	bf00      	nop
 8002d96:	3710      	adds	r7, #16
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}
 8002d9c:	200001dc 	.word	0x200001dc

08002da0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002da0:	b580      	push	{r7, lr}
 8002da2:	b084      	sub	sp, #16
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002da8:	2300      	movs	r3, #0
 8002daa:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e033      	b.n	8002e1e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d109      	bne.n	8002dd2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff f928 	bl	8002014 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	f003 0310 	and.w	r3, r3, #16
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d118      	bne.n	8002e10 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002de6:	f023 0302 	bic.w	r3, r3, #2
 8002dea:	f043 0202 	orr.w	r2, r3, #2
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002df2:	6878      	ldr	r0, [r7, #4]
 8002df4:	f000 f93a 	bl	800306c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	f023 0303 	bic.w	r3, r3, #3
 8002e06:	f043 0201 	orr.w	r2, r3, #1
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	641a      	str	r2, [r3, #64]	; 0x40
 8002e0e:	e001      	b.n	8002e14 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002e10:	2301      	movs	r3, #1
 8002e12:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2200      	movs	r2, #0
 8002e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3710      	adds	r7, #16
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]
 8002e30:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002e3c:	2b01      	cmp	r3, #1
 8002e3e:	d101      	bne.n	8002e44 <HAL_ADC_ConfigChannel+0x1c>
 8002e40:	2302      	movs	r3, #2
 8002e42:	e105      	b.n	8003050 <HAL_ADC_ConfigChannel+0x228>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	2201      	movs	r2, #1
 8002e48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	2b09      	cmp	r3, #9
 8002e52:	d925      	bls.n	8002ea0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68d9      	ldr	r1, [r3, #12]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	b29b      	uxth	r3, r3
 8002e60:	461a      	mov	r2, r3
 8002e62:	4613      	mov	r3, r2
 8002e64:	005b      	lsls	r3, r3, #1
 8002e66:	4413      	add	r3, r2
 8002e68:	3b1e      	subs	r3, #30
 8002e6a:	2207      	movs	r2, #7
 8002e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e70:	43da      	mvns	r2, r3
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	400a      	ands	r2, r1
 8002e78:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	68d9      	ldr	r1, [r3, #12]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689a      	ldr	r2, [r3, #8]
 8002e84:	683b      	ldr	r3, [r7, #0]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	005b      	lsls	r3, r3, #1
 8002e90:	4403      	add	r3, r0
 8002e92:	3b1e      	subs	r3, #30
 8002e94:	409a      	lsls	r2, r3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	430a      	orrs	r2, r1
 8002e9c:	60da      	str	r2, [r3, #12]
 8002e9e:	e022      	b.n	8002ee6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	6919      	ldr	r1, [r3, #16]
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	b29b      	uxth	r3, r3
 8002eac:	461a      	mov	r2, r3
 8002eae:	4613      	mov	r3, r2
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	4413      	add	r3, r2
 8002eb4:	2207      	movs	r2, #7
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	43da      	mvns	r2, r3
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	400a      	ands	r2, r1
 8002ec2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	6919      	ldr	r1, [r3, #16]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	689a      	ldr	r2, [r3, #8]
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	b29b      	uxth	r3, r3
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	4603      	mov	r3, r0
 8002ed8:	005b      	lsls	r3, r3, #1
 8002eda:	4403      	add	r3, r0
 8002edc:	409a      	lsls	r2, r3
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	430a      	orrs	r2, r1
 8002ee4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	2b06      	cmp	r3, #6
 8002eec:	d824      	bhi.n	8002f38 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3b05      	subs	r3, #5
 8002f00:	221f      	movs	r2, #31
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	3b05      	subs	r3, #5
 8002f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	635a      	str	r2, [r3, #52]	; 0x34
 8002f36:	e04c      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	2b0c      	cmp	r3, #12
 8002f3e:	d824      	bhi.n	8002f8a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	685a      	ldr	r2, [r3, #4]
 8002f4a:	4613      	mov	r3, r2
 8002f4c:	009b      	lsls	r3, r3, #2
 8002f4e:	4413      	add	r3, r2
 8002f50:	3b23      	subs	r3, #35	; 0x23
 8002f52:	221f      	movs	r2, #31
 8002f54:	fa02 f303 	lsl.w	r3, r2, r3
 8002f58:	43da      	mvns	r2, r3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	400a      	ands	r2, r1
 8002f60:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	b29b      	uxth	r3, r3
 8002f6e:	4618      	mov	r0, r3
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	685a      	ldr	r2, [r3, #4]
 8002f74:	4613      	mov	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	4413      	add	r3, r2
 8002f7a:	3b23      	subs	r3, #35	; 0x23
 8002f7c:	fa00 f203 	lsl.w	r2, r0, r3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	430a      	orrs	r2, r1
 8002f86:	631a      	str	r2, [r3, #48]	; 0x30
 8002f88:	e023      	b.n	8002fd2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f90:	683b      	ldr	r3, [r7, #0]
 8002f92:	685a      	ldr	r2, [r3, #4]
 8002f94:	4613      	mov	r3, r2
 8002f96:	009b      	lsls	r3, r3, #2
 8002f98:	4413      	add	r3, r2
 8002f9a:	3b41      	subs	r3, #65	; 0x41
 8002f9c:	221f      	movs	r2, #31
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43da      	mvns	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	400a      	ands	r2, r1
 8002faa:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	b29b      	uxth	r3, r3
 8002fb8:	4618      	mov	r0, r3
 8002fba:	683b      	ldr	r3, [r7, #0]
 8002fbc:	685a      	ldr	r2, [r3, #4]
 8002fbe:	4613      	mov	r3, r2
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4413      	add	r3, r2
 8002fc4:	3b41      	subs	r3, #65	; 0x41
 8002fc6:	fa00 f203 	lsl.w	r2, r0, r3
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	430a      	orrs	r2, r1
 8002fd0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd2:	4b22      	ldr	r3, [pc, #136]	; (800305c <HAL_ADC_ConfigChannel+0x234>)
 8002fd4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4a21      	ldr	r2, [pc, #132]	; (8003060 <HAL_ADC_ConfigChannel+0x238>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d109      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1cc>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	2b12      	cmp	r3, #18
 8002fe6:	d105      	bne.n	8002ff4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	4a19      	ldr	r2, [pc, #100]	; (8003060 <HAL_ADC_ConfigChannel+0x238>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d123      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x21e>
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2b10      	cmp	r3, #16
 8003004:	d003      	beq.n	800300e <HAL_ADC_ConfigChannel+0x1e6>
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	2b11      	cmp	r3, #17
 800300c:	d11b      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 800301a:	683b      	ldr	r3, [r7, #0]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2b10      	cmp	r3, #16
 8003020:	d111      	bne.n	8003046 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003022:	4b10      	ldr	r3, [pc, #64]	; (8003064 <HAL_ADC_ConfigChannel+0x23c>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	4a10      	ldr	r2, [pc, #64]	; (8003068 <HAL_ADC_ConfigChannel+0x240>)
 8003028:	fba2 2303 	umull	r2, r3, r2, r3
 800302c:	0c9a      	lsrs	r2, r3, #18
 800302e:	4613      	mov	r3, r2
 8003030:	009b      	lsls	r3, r3, #2
 8003032:	4413      	add	r3, r2
 8003034:	005b      	lsls	r3, r3, #1
 8003036:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003038:	e002      	b.n	8003040 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	3b01      	subs	r3, #1
 800303e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003040:	68bb      	ldr	r3, [r7, #8]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d1f9      	bne.n	800303a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	2200      	movs	r2, #0
 800304a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800304e:	2300      	movs	r3, #0
}
 8003050:	4618      	mov	r0, r3
 8003052:	3714      	adds	r7, #20
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	40012300 	.word	0x40012300
 8003060:	40012000 	.word	0x40012000
 8003064:	200001d4 	.word	0x200001d4
 8003068:	431bde83 	.word	0x431bde83

0800306c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003074:	4b79      	ldr	r3, [pc, #484]	; (800325c <ADC_Init+0x1f0>)
 8003076:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	685a      	ldr	r2, [r3, #4]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	685b      	ldr	r3, [r3, #4]
 800308c:	431a      	orrs	r2, r3
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80030a0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	6859      	ldr	r1, [r3, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	021a      	lsls	r2, r3, #8
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	430a      	orrs	r2, r1
 80030b4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	685a      	ldr	r2, [r3, #4]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80030c4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	6859      	ldr	r1, [r3, #4]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	689a      	ldr	r2, [r3, #8]
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	430a      	orrs	r2, r1
 80030d6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	689a      	ldr	r2, [r3, #8]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80030e6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	6899      	ldr	r1, [r3, #8]
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68da      	ldr	r2, [r3, #12]
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	430a      	orrs	r2, r1
 80030f8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	4a58      	ldr	r2, [pc, #352]	; (8003260 <ADC_Init+0x1f4>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d022      	beq.n	800314a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	689a      	ldr	r2, [r3, #8]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003112:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	6899      	ldr	r1, [r3, #8]
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	430a      	orrs	r2, r1
 8003124:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003134:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	6899      	ldr	r1, [r3, #8]
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	430a      	orrs	r2, r1
 8003146:	609a      	str	r2, [r3, #8]
 8003148:	e00f      	b.n	800316a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003158:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	689a      	ldr	r2, [r3, #8]
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003168:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f022 0202 	bic.w	r2, r2, #2
 8003178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	7e1b      	ldrb	r3, [r3, #24]
 8003184:	005a      	lsls	r2, r3, #1
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01b      	beq.n	80031d0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80031a6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	685a      	ldr	r2, [r3, #4]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80031b6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6859      	ldr	r1, [r3, #4]
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031c2:	3b01      	subs	r3, #1
 80031c4:	035a      	lsls	r2, r3, #13
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
 80031ce:	e007      	b.n	80031e0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80031de:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80031ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	69db      	ldr	r3, [r3, #28]
 80031fa:	3b01      	subs	r3, #1
 80031fc:	051a      	lsls	r2, r3, #20
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	430a      	orrs	r2, r1
 8003204:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	689a      	ldr	r2, [r3, #8]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003214:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	6899      	ldr	r1, [r3, #8]
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003222:	025a      	lsls	r2, r3, #9
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	689a      	ldr	r2, [r3, #8]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800323a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	6899      	ldr	r1, [r3, #8]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	029a      	lsls	r2, r3, #10
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	430a      	orrs	r2, r1
 800324e:	609a      	str	r2, [r3, #8]
}
 8003250:	bf00      	nop
 8003252:	3714      	adds	r7, #20
 8003254:	46bd      	mov	sp, r7
 8003256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325a:	4770      	bx	lr
 800325c:	40012300 	.word	0x40012300
 8003260:	0f000001 	.word	0x0f000001

08003264 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b480      	push	{r7}
 8003266:	b085      	sub	sp, #20
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f003 0307 	and.w	r3, r3, #7
 8003272:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003274:	4b0c      	ldr	r3, [pc, #48]	; (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800327a:	68ba      	ldr	r2, [r7, #8]
 800327c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003280:	4013      	ands	r3, r2
 8003282:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003288:	68bb      	ldr	r3, [r7, #8]
 800328a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800328c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003290:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003296:	4a04      	ldr	r2, [pc, #16]	; (80032a8 <__NVIC_SetPriorityGrouping+0x44>)
 8003298:	68bb      	ldr	r3, [r7, #8]
 800329a:	60d3      	str	r3, [r2, #12]
}
 800329c:	bf00      	nop
 800329e:	3714      	adds	r7, #20
 80032a0:	46bd      	mov	sp, r7
 80032a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a6:	4770      	bx	lr
 80032a8:	e000ed00 	.word	0xe000ed00

080032ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80032ac:	b480      	push	{r7}
 80032ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80032b0:	4b04      	ldr	r3, [pc, #16]	; (80032c4 <__NVIC_GetPriorityGrouping+0x18>)
 80032b2:	68db      	ldr	r3, [r3, #12]
 80032b4:	0a1b      	lsrs	r3, r3, #8
 80032b6:	f003 0307 	and.w	r3, r3, #7
}
 80032ba:	4618      	mov	r0, r3
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr
 80032c4:	e000ed00 	.word	0xe000ed00

080032c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b083      	sub	sp, #12
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	4603      	mov	r3, r0
 80032d0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80032d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	db0b      	blt.n	80032f2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80032da:	79fb      	ldrb	r3, [r7, #7]
 80032dc:	f003 021f 	and.w	r2, r3, #31
 80032e0:	4907      	ldr	r1, [pc, #28]	; (8003300 <__NVIC_EnableIRQ+0x38>)
 80032e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032e6:	095b      	lsrs	r3, r3, #5
 80032e8:	2001      	movs	r0, #1
 80032ea:	fa00 f202 	lsl.w	r2, r0, r2
 80032ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80032f2:	bf00      	nop
 80032f4:	370c      	adds	r7, #12
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
 80032fe:	bf00      	nop
 8003300:	e000e100 	.word	0xe000e100

08003304 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003304:	b480      	push	{r7}
 8003306:	b083      	sub	sp, #12
 8003308:	af00      	add	r7, sp, #0
 800330a:	4603      	mov	r3, r0
 800330c:	6039      	str	r1, [r7, #0]
 800330e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003314:	2b00      	cmp	r3, #0
 8003316:	db0a      	blt.n	800332e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003318:	683b      	ldr	r3, [r7, #0]
 800331a:	b2da      	uxtb	r2, r3
 800331c:	490c      	ldr	r1, [pc, #48]	; (8003350 <__NVIC_SetPriority+0x4c>)
 800331e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003322:	0112      	lsls	r2, r2, #4
 8003324:	b2d2      	uxtb	r2, r2
 8003326:	440b      	add	r3, r1
 8003328:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800332c:	e00a      	b.n	8003344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	b2da      	uxtb	r2, r3
 8003332:	4908      	ldr	r1, [pc, #32]	; (8003354 <__NVIC_SetPriority+0x50>)
 8003334:	79fb      	ldrb	r3, [r7, #7]
 8003336:	f003 030f 	and.w	r3, r3, #15
 800333a:	3b04      	subs	r3, #4
 800333c:	0112      	lsls	r2, r2, #4
 800333e:	b2d2      	uxtb	r2, r2
 8003340:	440b      	add	r3, r1
 8003342:	761a      	strb	r2, [r3, #24]
}
 8003344:	bf00      	nop
 8003346:	370c      	adds	r7, #12
 8003348:	46bd      	mov	sp, r7
 800334a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800334e:	4770      	bx	lr
 8003350:	e000e100 	.word	0xe000e100
 8003354:	e000ed00 	.word	0xe000ed00

08003358 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003358:	b480      	push	{r7}
 800335a:	b089      	sub	sp, #36	; 0x24
 800335c:	af00      	add	r7, sp, #0
 800335e:	60f8      	str	r0, [r7, #12]
 8003360:	60b9      	str	r1, [r7, #8]
 8003362:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f003 0307 	and.w	r3, r3, #7
 800336a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800336c:	69fb      	ldr	r3, [r7, #28]
 800336e:	f1c3 0307 	rsb	r3, r3, #7
 8003372:	2b04      	cmp	r3, #4
 8003374:	bf28      	it	cs
 8003376:	2304      	movcs	r3, #4
 8003378:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	3304      	adds	r3, #4
 800337e:	2b06      	cmp	r3, #6
 8003380:	d902      	bls.n	8003388 <NVIC_EncodePriority+0x30>
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	3b03      	subs	r3, #3
 8003386:	e000      	b.n	800338a <NVIC_EncodePriority+0x32>
 8003388:	2300      	movs	r3, #0
 800338a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800338c:	f04f 32ff 	mov.w	r2, #4294967295
 8003390:	69bb      	ldr	r3, [r7, #24]
 8003392:	fa02 f303 	lsl.w	r3, r2, r3
 8003396:	43da      	mvns	r2, r3
 8003398:	68bb      	ldr	r3, [r7, #8]
 800339a:	401a      	ands	r2, r3
 800339c:	697b      	ldr	r3, [r7, #20]
 800339e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80033a0:	f04f 31ff 	mov.w	r1, #4294967295
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	fa01 f303 	lsl.w	r3, r1, r3
 80033aa:	43d9      	mvns	r1, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80033b0:	4313      	orrs	r3, r2
         );
}
 80033b2:	4618      	mov	r0, r3
 80033b4:	3724      	adds	r7, #36	; 0x24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033bc:	4770      	bx	lr

080033be <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b082      	sub	sp, #8
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80033c6:	6878      	ldr	r0, [r7, #4]
 80033c8:	f7ff ff4c 	bl	8003264 <__NVIC_SetPriorityGrouping>
}
 80033cc:	bf00      	nop
 80033ce:	3708      	adds	r7, #8
 80033d0:	46bd      	mov	sp, r7
 80033d2:	bd80      	pop	{r7, pc}

080033d4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033d4:	b580      	push	{r7, lr}
 80033d6:	b086      	sub	sp, #24
 80033d8:	af00      	add	r7, sp, #0
 80033da:	4603      	mov	r3, r0
 80033dc:	60b9      	str	r1, [r7, #8]
 80033de:	607a      	str	r2, [r7, #4]
 80033e0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033e2:	2300      	movs	r3, #0
 80033e4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033e6:	f7ff ff61 	bl	80032ac <__NVIC_GetPriorityGrouping>
 80033ea:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	68b9      	ldr	r1, [r7, #8]
 80033f0:	6978      	ldr	r0, [r7, #20]
 80033f2:	f7ff ffb1 	bl	8003358 <NVIC_EncodePriority>
 80033f6:	4602      	mov	r2, r0
 80033f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033fc:	4611      	mov	r1, r2
 80033fe:	4618      	mov	r0, r3
 8003400:	f7ff ff80 	bl	8003304 <__NVIC_SetPriority>
}
 8003404:	bf00      	nop
 8003406:	3718      	adds	r7, #24
 8003408:	46bd      	mov	sp, r7
 800340a:	bd80      	pop	{r7, pc}

0800340c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	b082      	sub	sp, #8
 8003410:	af00      	add	r7, sp, #0
 8003412:	4603      	mov	r3, r0
 8003414:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003416:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800341a:	4618      	mov	r0, r3
 800341c:	f7ff ff54 	bl	80032c8 <__NVIC_EnableIRQ>
}
 8003420:	bf00      	nop
 8003422:	3708      	adds	r7, #8
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003430:	2300      	movs	r3, #0
 8003432:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003434:	f7ff fc86 	bl	8002d44 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2b00      	cmp	r3, #0
 800343e:	d101      	bne.n	8003444 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e099      	b.n	8003578 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2200      	movs	r2, #0
 8003448:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2202      	movs	r2, #2
 8003450:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f022 0201 	bic.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003464:	e00f      	b.n	8003486 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003466:	f7ff fc6d 	bl	8002d44 <HAL_GetTick>
 800346a:	4602      	mov	r2, r0
 800346c:	693b      	ldr	r3, [r7, #16]
 800346e:	1ad3      	subs	r3, r2, r3
 8003470:	2b05      	cmp	r3, #5
 8003472:	d908      	bls.n	8003486 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2220      	movs	r2, #32
 8003478:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2203      	movs	r2, #3
 800347e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e078      	b.n	8003578 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f003 0301 	and.w	r3, r3, #1
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e8      	bne.n	8003466 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800349c:	697a      	ldr	r2, [r7, #20]
 800349e:	4b38      	ldr	r3, [pc, #224]	; (8003580 <HAL_DMA_Init+0x158>)
 80034a0:	4013      	ands	r3, r2
 80034a2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685a      	ldr	r2, [r3, #4]
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	689b      	ldr	r3, [r3, #8]
 80034ac:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034b2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	691b      	ldr	r3, [r3, #16]
 80034b8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80034be:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	699b      	ldr	r3, [r3, #24]
 80034c4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80034ca:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	6a1b      	ldr	r3, [r3, #32]
 80034d0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80034d2:	697a      	ldr	r2, [r7, #20]
 80034d4:	4313      	orrs	r3, r2
 80034d6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034dc:	2b04      	cmp	r3, #4
 80034de:	d107      	bne.n	80034f0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034e8:	4313      	orrs	r3, r2
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	697a      	ldr	r2, [r7, #20]
 80034f6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	695b      	ldr	r3, [r3, #20]
 80034fe:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	f023 0307 	bic.w	r3, r3, #7
 8003506:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350c:	697a      	ldr	r2, [r7, #20]
 800350e:	4313      	orrs	r3, r2
 8003510:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003516:	2b04      	cmp	r3, #4
 8003518:	d117      	bne.n	800354a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800351e:	697a      	ldr	r2, [r7, #20]
 8003520:	4313      	orrs	r3, r2
 8003522:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	2b00      	cmp	r3, #0
 800352a:	d00e      	beq.n	800354a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 fb0d 	bl	8003b4c <DMA_CheckFifoParam>
 8003532:	4603      	mov	r3, r0
 8003534:	2b00      	cmp	r3, #0
 8003536:	d008      	beq.n	800354a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2240      	movs	r2, #64	; 0x40
 800353c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2201      	movs	r2, #1
 8003542:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003546:	2301      	movs	r3, #1
 8003548:	e016      	b.n	8003578 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	697a      	ldr	r2, [r7, #20]
 8003550:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f000 fac4 	bl	8003ae0 <DMA_CalcBaseAndBitshift>
 8003558:	4603      	mov	r3, r0
 800355a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003560:	223f      	movs	r2, #63	; 0x3f
 8003562:	409a      	lsls	r2, r3
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2200      	movs	r2, #0
 800356c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2201      	movs	r2, #1
 8003572:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003576:	2300      	movs	r3, #0
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	f010803f 	.word	0xf010803f

08003584 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	60b9      	str	r1, [r7, #8]
 800358e:	607a      	str	r2, [r7, #4]
 8003590:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003592:	2300      	movs	r3, #0
 8003594:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800359a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80035a2:	2b01      	cmp	r3, #1
 80035a4:	d101      	bne.n	80035aa <HAL_DMA_Start_IT+0x26>
 80035a6:	2302      	movs	r3, #2
 80035a8:	e040      	b.n	800362c <HAL_DMA_Start_IT+0xa8>
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2201      	movs	r2, #1
 80035ae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80035b8:	b2db      	uxtb	r3, r3
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d12f      	bne.n	800361e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	2202      	movs	r2, #2
 80035c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	2200      	movs	r2, #0
 80035ca:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	687a      	ldr	r2, [r7, #4]
 80035d0:	68b9      	ldr	r1, [r7, #8]
 80035d2:	68f8      	ldr	r0, [r7, #12]
 80035d4:	f000 fa56 	bl	8003a84 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035dc:	223f      	movs	r2, #63	; 0x3f
 80035de:	409a      	lsls	r2, r3
 80035e0:	693b      	ldr	r3, [r7, #16]
 80035e2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f042 0216 	orr.w	r2, r2, #22
 80035f2:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f042 0208 	orr.w	r2, r2, #8
 800360a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	681a      	ldr	r2, [r3, #0]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f042 0201 	orr.w	r2, r2, #1
 800361a:	601a      	str	r2, [r3, #0]
 800361c:	e005      	b.n	800362a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	2200      	movs	r2, #0
 8003622:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003626:	2302      	movs	r3, #2
 8003628:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800362a:	7dfb      	ldrb	r3, [r7, #23]
}
 800362c:	4618      	mov	r0, r3
 800362e:	3718      	adds	r7, #24
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b084      	sub	sp, #16
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003640:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003642:	f7ff fb7f 	bl	8002d44 <HAL_GetTick>
 8003646:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800364e:	b2db      	uxtb	r3, r3
 8003650:	2b02      	cmp	r3, #2
 8003652:	d008      	beq.n	8003666 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2280      	movs	r2, #128	; 0x80
 8003658:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	2200      	movs	r2, #0
 800365e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003662:	2301      	movs	r3, #1
 8003664:	e052      	b.n	800370c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0216 	bic.w	r2, r2, #22
 8003674:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	695a      	ldr	r2, [r3, #20]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003684:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800368a:	2b00      	cmp	r3, #0
 800368c:	d103      	bne.n	8003696 <HAL_DMA_Abort+0x62>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003692:	2b00      	cmp	r3, #0
 8003694:	d007      	beq.n	80036a6 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	681a      	ldr	r2, [r3, #0]
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f022 0208 	bic.w	r2, r2, #8
 80036a4:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	681a      	ldr	r2, [r3, #0]
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	f022 0201 	bic.w	r2, r2, #1
 80036b4:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036b6:	e013      	b.n	80036e0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80036b8:	f7ff fb44 	bl	8002d44 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	68bb      	ldr	r3, [r7, #8]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b05      	cmp	r3, #5
 80036c4:	d90c      	bls.n	80036e0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	2220      	movs	r2, #32
 80036ca:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2200      	movs	r2, #0
 80036d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2203      	movs	r2, #3
 80036d8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e015      	b.n	800370c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f003 0301 	and.w	r3, r3, #1
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d1e4      	bne.n	80036b8 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036f2:	223f      	movs	r2, #63	; 0x3f
 80036f4:	409a      	lsls	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2201      	movs	r2, #1
 8003706:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800370a:	2300      	movs	r3, #0
}
 800370c:	4618      	mov	r0, r3
 800370e:	3710      	adds	r7, #16
 8003710:	46bd      	mov	sp, r7
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003722:	b2db      	uxtb	r3, r3
 8003724:	2b02      	cmp	r3, #2
 8003726:	d004      	beq.n	8003732 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	2280      	movs	r2, #128	; 0x80
 800372c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e00c      	b.n	800374c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	2205      	movs	r2, #5
 8003736:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800374a:	2300      	movs	r3, #0
}
 800374c:	4618      	mov	r0, r3
 800374e:	370c      	adds	r7, #12
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr

08003758 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b086      	sub	sp, #24
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003760:	2300      	movs	r3, #0
 8003762:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003764:	4b92      	ldr	r3, [pc, #584]	; (80039b0 <HAL_DMA_IRQHandler+0x258>)
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	4a92      	ldr	r2, [pc, #584]	; (80039b4 <HAL_DMA_IRQHandler+0x25c>)
 800376a:	fba2 2303 	umull	r2, r3, r2, r3
 800376e:	0a9b      	lsrs	r3, r3, #10
 8003770:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003776:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003778:	693b      	ldr	r3, [r7, #16]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003782:	2208      	movs	r2, #8
 8003784:	409a      	lsls	r2, r3
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	4013      	ands	r3, r2
 800378a:	2b00      	cmp	r3, #0
 800378c:	d01a      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d013      	beq.n	80037c4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f022 0204 	bic.w	r2, r2, #4
 80037aa:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037b0:	2208      	movs	r2, #8
 80037b2:	409a      	lsls	r2, r3
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037bc:	f043 0201 	orr.w	r2, r3, #1
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037c8:	2201      	movs	r2, #1
 80037ca:	409a      	lsls	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4013      	ands	r3, r2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d012      	beq.n	80037fa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00b      	beq.n	80037fa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037e6:	2201      	movs	r2, #1
 80037e8:	409a      	lsls	r2, r3
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037f2:	f043 0202 	orr.w	r2, r3, #2
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037fe:	2204      	movs	r2, #4
 8003800:	409a      	lsls	r2, r3
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	4013      	ands	r3, r2
 8003806:	2b00      	cmp	r3, #0
 8003808:	d012      	beq.n	8003830 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	f003 0302 	and.w	r3, r3, #2
 8003814:	2b00      	cmp	r3, #0
 8003816:	d00b      	beq.n	8003830 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800381c:	2204      	movs	r2, #4
 800381e:	409a      	lsls	r2, r3
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003828:	f043 0204 	orr.w	r2, r3, #4
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003834:	2210      	movs	r2, #16
 8003836:	409a      	lsls	r2, r3
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	4013      	ands	r3, r2
 800383c:	2b00      	cmp	r3, #0
 800383e:	d043      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f003 0308 	and.w	r3, r3, #8
 800384a:	2b00      	cmp	r3, #0
 800384c:	d03c      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003852:	2210      	movs	r2, #16
 8003854:	409a      	lsls	r2, r3
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003864:	2b00      	cmp	r3, #0
 8003866:	d018      	beq.n	800389a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003872:	2b00      	cmp	r3, #0
 8003874:	d108      	bne.n	8003888 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387a:	2b00      	cmp	r3, #0
 800387c:	d024      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	4798      	blx	r3
 8003886:	e01f      	b.n	80038c8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800388c:	2b00      	cmp	r3, #0
 800388e:	d01b      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003894:	6878      	ldr	r0, [r7, #4]
 8003896:	4798      	blx	r3
 8003898:	e016      	b.n	80038c8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d107      	bne.n	80038b8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	681a      	ldr	r2, [r3, #0]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f022 0208 	bic.w	r2, r2, #8
 80038b6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d003      	beq.n	80038c8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038cc:	2220      	movs	r2, #32
 80038ce:	409a      	lsls	r2, r3
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	4013      	ands	r3, r2
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	f000 808e 	beq.w	80039f6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0310 	and.w	r3, r3, #16
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	f000 8086 	beq.w	80039f6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038ee:	2220      	movs	r2, #32
 80038f0:	409a      	lsls	r2, r3
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038fc:	b2db      	uxtb	r3, r3
 80038fe:	2b05      	cmp	r3, #5
 8003900:	d136      	bne.n	8003970 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f022 0216 	bic.w	r2, r2, #22
 8003910:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	695a      	ldr	r2, [r3, #20]
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003920:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003926:	2b00      	cmp	r3, #0
 8003928:	d103      	bne.n	8003932 <HAL_DMA_IRQHandler+0x1da>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800392e:	2b00      	cmp	r3, #0
 8003930:	d007      	beq.n	8003942 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	681a      	ldr	r2, [r3, #0]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f022 0208 	bic.w	r2, r2, #8
 8003940:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003946:	223f      	movs	r2, #63	; 0x3f
 8003948:	409a      	lsls	r2, r3
 800394a:	693b      	ldr	r3, [r7, #16]
 800394c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003962:	2b00      	cmp	r3, #0
 8003964:	d07d      	beq.n	8003a62 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800396a:	6878      	ldr	r0, [r7, #4]
 800396c:	4798      	blx	r3
        }
        return;
 800396e:	e078      	b.n	8003a62 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d01c      	beq.n	80039b8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d108      	bne.n	800399e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003990:	2b00      	cmp	r3, #0
 8003992:	d030      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003998:	6878      	ldr	r0, [r7, #4]
 800399a:	4798      	blx	r3
 800399c:	e02b      	b.n	80039f6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d027      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	4798      	blx	r3
 80039ae:	e022      	b.n	80039f6 <HAL_DMA_IRQHandler+0x29e>
 80039b0:	200001d4 	.word	0x200001d4
 80039b4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10f      	bne.n	80039e6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	681a      	ldr	r2, [r3, #0]
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	f022 0210 	bic.w	r2, r2, #16
 80039d4:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2201      	movs	r2, #1
 80039e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d003      	beq.n	80039f6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039f2:	6878      	ldr	r0, [r7, #4]
 80039f4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d032      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a02:	f003 0301 	and.w	r3, r3, #1
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d022      	beq.n	8003a50 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2205      	movs	r2, #5
 8003a0e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	681a      	ldr	r2, [r3, #0]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f022 0201 	bic.w	r2, r2, #1
 8003a20:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	3301      	adds	r3, #1
 8003a26:	60bb      	str	r3, [r7, #8]
 8003a28:	697a      	ldr	r2, [r7, #20]
 8003a2a:	429a      	cmp	r2, r3
 8003a2c:	d307      	bcc.n	8003a3e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	f003 0301 	and.w	r3, r3, #1
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d1f2      	bne.n	8003a22 <HAL_DMA_IRQHandler+0x2ca>
 8003a3c:	e000      	b.n	8003a40 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8003a3e:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5c:	6878      	ldr	r0, [r7, #4]
 8003a5e:	4798      	blx	r3
 8003a60:	e000      	b.n	8003a64 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a62:	bf00      	nop
    }
  }
}
 8003a64:	3718      	adds	r7, #24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}
 8003a6a:	bf00      	nop

08003a6c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	370c      	adds	r7, #12
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a82:	4770      	bx	lr

08003a84 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a84:	b480      	push	{r7}
 8003a86:	b085      	sub	sp, #20
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
 8003a90:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	681a      	ldr	r2, [r3, #0]
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d108      	bne.n	8003ac4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68ba      	ldr	r2, [r7, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003ac2:	e007      	b.n	8003ad4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	68ba      	ldr	r2, [r7, #8]
 8003aca:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	687a      	ldr	r2, [r7, #4]
 8003ad2:	60da      	str	r2, [r3, #12]
}
 8003ad4:	bf00      	nop
 8003ad6:	3714      	adds	r7, #20
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003ae0:	b480      	push	{r7}
 8003ae2:	b085      	sub	sp, #20
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	3b10      	subs	r3, #16
 8003af0:	4a14      	ldr	r2, [pc, #80]	; (8003b44 <DMA_CalcBaseAndBitshift+0x64>)
 8003af2:	fba2 2303 	umull	r2, r3, r2, r3
 8003af6:	091b      	lsrs	r3, r3, #4
 8003af8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003afa:	4a13      	ldr	r2, [pc, #76]	; (8003b48 <DMA_CalcBaseAndBitshift+0x68>)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	781b      	ldrb	r3, [r3, #0]
 8003b02:	461a      	mov	r2, r3
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	2b03      	cmp	r3, #3
 8003b0c:	d909      	bls.n	8003b22 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b16:	f023 0303 	bic.w	r3, r3, #3
 8003b1a:	1d1a      	adds	r2, r3, #4
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	659a      	str	r2, [r3, #88]	; 0x58
 8003b20:	e007      	b.n	8003b32 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003b2a:	f023 0303 	bic.w	r3, r3, #3
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3714      	adds	r7, #20
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
 8003b42:	bf00      	nop
 8003b44:	aaaaaaab 	.word	0xaaaaaaab
 8003b48:	08008164 	.word	0x08008164

08003b4c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b4c:	b480      	push	{r7}
 8003b4e:	b085      	sub	sp, #20
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b5c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d11f      	bne.n	8003ba6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	2b03      	cmp	r3, #3
 8003b6a:	d855      	bhi.n	8003c18 <DMA_CheckFifoParam+0xcc>
 8003b6c:	a201      	add	r2, pc, #4	; (adr r2, 8003b74 <DMA_CheckFifoParam+0x28>)
 8003b6e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b72:	bf00      	nop
 8003b74:	08003b85 	.word	0x08003b85
 8003b78:	08003b97 	.word	0x08003b97
 8003b7c:	08003b85 	.word	0x08003b85
 8003b80:	08003c19 	.word	0x08003c19
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d045      	beq.n	8003c1c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b94:	e042      	b.n	8003c1c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b9a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b9e:	d13f      	bne.n	8003c20 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba4:	e03c      	b.n	8003c20 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	699b      	ldr	r3, [r3, #24]
 8003baa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003bae:	d121      	bne.n	8003bf4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	2b03      	cmp	r3, #3
 8003bb4:	d836      	bhi.n	8003c24 <DMA_CheckFifoParam+0xd8>
 8003bb6:	a201      	add	r2, pc, #4	; (adr r2, 8003bbc <DMA_CheckFifoParam+0x70>)
 8003bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bbc:	08003bcd 	.word	0x08003bcd
 8003bc0:	08003bd3 	.word	0x08003bd3
 8003bc4:	08003bcd 	.word	0x08003bcd
 8003bc8:	08003be5 	.word	0x08003be5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003bcc:	2301      	movs	r3, #1
 8003bce:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd0:	e02f      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d024      	beq.n	8003c28 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8003bde:	2301      	movs	r3, #1
 8003be0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003be2:	e021      	b.n	8003c28 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bec:	d11e      	bne.n	8003c2c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bf2:	e01b      	b.n	8003c2c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bf4:	68bb      	ldr	r3, [r7, #8]
 8003bf6:	2b02      	cmp	r3, #2
 8003bf8:	d902      	bls.n	8003c00 <DMA_CheckFifoParam+0xb4>
 8003bfa:	2b03      	cmp	r3, #3
 8003bfc:	d003      	beq.n	8003c06 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bfe:	e018      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8003c00:	2301      	movs	r3, #1
 8003c02:	73fb      	strb	r3, [r7, #15]
      break;
 8003c04:	e015      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d00e      	beq.n	8003c30 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8003c12:	2301      	movs	r3, #1
 8003c14:	73fb      	strb	r3, [r7, #15]
      break;
 8003c16:	e00b      	b.n	8003c30 <DMA_CheckFifoParam+0xe4>
      break;
 8003c18:	bf00      	nop
 8003c1a:	e00a      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      break;
 8003c1c:	bf00      	nop
 8003c1e:	e008      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      break;
 8003c20:	bf00      	nop
 8003c22:	e006      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      break;
 8003c24:	bf00      	nop
 8003c26:	e004      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      break;
 8003c28:	bf00      	nop
 8003c2a:	e002      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      break;   
 8003c2c:	bf00      	nop
 8003c2e:	e000      	b.n	8003c32 <DMA_CheckFifoParam+0xe6>
      break;
 8003c30:	bf00      	nop
    }
  } 
  
  return status; 
 8003c32:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	3714      	adds	r7, #20
 8003c38:	46bd      	mov	sp, r7
 8003c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3e:	4770      	bx	lr

08003c40 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c40:	b480      	push	{r7}
 8003c42:	b089      	sub	sp, #36	; 0x24
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
 8003c48:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c52:	2300      	movs	r3, #0
 8003c54:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c56:	2300      	movs	r3, #0
 8003c58:	61fb      	str	r3, [r7, #28]
 8003c5a:	e16b      	b.n	8003f34 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c5c:	2201      	movs	r2, #1
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	fa02 f303 	lsl.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	697a      	ldr	r2, [r7, #20]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c70:	693a      	ldr	r2, [r7, #16]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	429a      	cmp	r2, r3
 8003c76:	f040 815a 	bne.w	8003f2e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	685b      	ldr	r3, [r3, #4]
 8003c7e:	2b01      	cmp	r3, #1
 8003c80:	d00b      	beq.n	8003c9a <HAL_GPIO_Init+0x5a>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d007      	beq.n	8003c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8003c8e:	2b11      	cmp	r3, #17
 8003c90:	d003      	beq.n	8003c9a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	2b12      	cmp	r3, #18
 8003c98:	d130      	bne.n	8003cfc <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003ca0:	69fb      	ldr	r3, [r7, #28]
 8003ca2:	005b      	lsls	r3, r3, #1
 8003ca4:	2203      	movs	r2, #3
 8003ca6:	fa02 f303 	lsl.w	r3, r2, r3
 8003caa:	43db      	mvns	r3, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4013      	ands	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	68da      	ldr	r2, [r3, #12]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	005b      	lsls	r3, r3, #1
 8003cba:	fa02 f303 	lsl.w	r3, r2, r3
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	69ba      	ldr	r2, [r7, #24]
 8003cc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	685b      	ldr	r3, [r3, #4]
 8003cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	69fb      	ldr	r3, [r7, #28]
 8003cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd8:	43db      	mvns	r3, r3
 8003cda:	69ba      	ldr	r2, [r7, #24]
 8003cdc:	4013      	ands	r3, r2
 8003cde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003ce0:	683b      	ldr	r3, [r7, #0]
 8003ce2:	685b      	ldr	r3, [r3, #4]
 8003ce4:	091b      	lsrs	r3, r3, #4
 8003ce6:	f003 0201 	and.w	r2, r3, #1
 8003cea:	69fb      	ldr	r3, [r7, #28]
 8003cec:	fa02 f303 	lsl.w	r3, r2, r3
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	69ba      	ldr	r2, [r7, #24]
 8003cfa:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	68db      	ldr	r3, [r3, #12]
 8003d00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003d02:	69fb      	ldr	r3, [r7, #28]
 8003d04:	005b      	lsls	r3, r3, #1
 8003d06:	2203      	movs	r2, #3
 8003d08:	fa02 f303 	lsl.w	r3, r2, r3
 8003d0c:	43db      	mvns	r3, r3
 8003d0e:	69ba      	ldr	r2, [r7, #24]
 8003d10:	4013      	ands	r3, r2
 8003d12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	689a      	ldr	r2, [r3, #8]
 8003d18:	69fb      	ldr	r3, [r7, #28]
 8003d1a:	005b      	lsls	r3, r3, #1
 8003d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d20:	69ba      	ldr	r2, [r7, #24]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69ba      	ldr	r2, [r7, #24]
 8003d2a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b02      	cmp	r3, #2
 8003d32:	d003      	beq.n	8003d3c <HAL_GPIO_Init+0xfc>
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	2b12      	cmp	r3, #18
 8003d3a:	d123      	bne.n	8003d84 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d3c:	69fb      	ldr	r3, [r7, #28]
 8003d3e:	08da      	lsrs	r2, r3, #3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	3208      	adds	r2, #8
 8003d44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d48:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	f003 0307 	and.w	r3, r3, #7
 8003d50:	009b      	lsls	r3, r3, #2
 8003d52:	220f      	movs	r2, #15
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	691a      	ldr	r2, [r3, #16]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	f003 0307 	and.w	r3, r3, #7
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	08da      	lsrs	r2, r3, #3
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	3208      	adds	r2, #8
 8003d7e:	69b9      	ldr	r1, [r7, #24]
 8003d80:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	005b      	lsls	r3, r3, #1
 8003d8e:	2203      	movs	r2, #3
 8003d90:	fa02 f303 	lsl.w	r3, r2, r3
 8003d94:	43db      	mvns	r3, r3
 8003d96:	69ba      	ldr	r2, [r7, #24]
 8003d98:	4013      	ands	r3, r2
 8003d9a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d9c:	683b      	ldr	r3, [r7, #0]
 8003d9e:	685b      	ldr	r3, [r3, #4]
 8003da0:	f003 0203 	and.w	r2, r3, #3
 8003da4:	69fb      	ldr	r3, [r7, #28]
 8003da6:	005b      	lsls	r3, r3, #1
 8003da8:	fa02 f303 	lsl.w	r3, r2, r3
 8003dac:	69ba      	ldr	r2, [r7, #24]
 8003dae:	4313      	orrs	r3, r2
 8003db0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69ba      	ldr	r2, [r7, #24]
 8003db6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003db8:	683b      	ldr	r3, [r7, #0]
 8003dba:	685b      	ldr	r3, [r3, #4]
 8003dbc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	f000 80b4 	beq.w	8003f2e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003dc6:	2300      	movs	r3, #0
 8003dc8:	60fb      	str	r3, [r7, #12]
 8003dca:	4b5f      	ldr	r3, [pc, #380]	; (8003f48 <HAL_GPIO_Init+0x308>)
 8003dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dce:	4a5e      	ldr	r2, [pc, #376]	; (8003f48 <HAL_GPIO_Init+0x308>)
 8003dd0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003dd4:	6453      	str	r3, [r2, #68]	; 0x44
 8003dd6:	4b5c      	ldr	r3, [pc, #368]	; (8003f48 <HAL_GPIO_Init+0x308>)
 8003dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dda:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003de2:	4a5a      	ldr	r2, [pc, #360]	; (8003f4c <HAL_GPIO_Init+0x30c>)
 8003de4:	69fb      	ldr	r3, [r7, #28]
 8003de6:	089b      	lsrs	r3, r3, #2
 8003de8:	3302      	adds	r3, #2
 8003dea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dee:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003df0:	69fb      	ldr	r3, [r7, #28]
 8003df2:	f003 0303 	and.w	r3, r3, #3
 8003df6:	009b      	lsls	r3, r3, #2
 8003df8:	220f      	movs	r2, #15
 8003dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8003dfe:	43db      	mvns	r3, r3
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	4013      	ands	r3, r2
 8003e04:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	4a51      	ldr	r2, [pc, #324]	; (8003f50 <HAL_GPIO_Init+0x310>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d02b      	beq.n	8003e66 <HAL_GPIO_Init+0x226>
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	4a50      	ldr	r2, [pc, #320]	; (8003f54 <HAL_GPIO_Init+0x314>)
 8003e12:	4293      	cmp	r3, r2
 8003e14:	d025      	beq.n	8003e62 <HAL_GPIO_Init+0x222>
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	4a4f      	ldr	r2, [pc, #316]	; (8003f58 <HAL_GPIO_Init+0x318>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d01f      	beq.n	8003e5e <HAL_GPIO_Init+0x21e>
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4a4e      	ldr	r2, [pc, #312]	; (8003f5c <HAL_GPIO_Init+0x31c>)
 8003e22:	4293      	cmp	r3, r2
 8003e24:	d019      	beq.n	8003e5a <HAL_GPIO_Init+0x21a>
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	4a4d      	ldr	r2, [pc, #308]	; (8003f60 <HAL_GPIO_Init+0x320>)
 8003e2a:	4293      	cmp	r3, r2
 8003e2c:	d013      	beq.n	8003e56 <HAL_GPIO_Init+0x216>
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	4a4c      	ldr	r2, [pc, #304]	; (8003f64 <HAL_GPIO_Init+0x324>)
 8003e32:	4293      	cmp	r3, r2
 8003e34:	d00d      	beq.n	8003e52 <HAL_GPIO_Init+0x212>
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	4a4b      	ldr	r2, [pc, #300]	; (8003f68 <HAL_GPIO_Init+0x328>)
 8003e3a:	4293      	cmp	r3, r2
 8003e3c:	d007      	beq.n	8003e4e <HAL_GPIO_Init+0x20e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	4a4a      	ldr	r2, [pc, #296]	; (8003f6c <HAL_GPIO_Init+0x32c>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d101      	bne.n	8003e4a <HAL_GPIO_Init+0x20a>
 8003e46:	2307      	movs	r3, #7
 8003e48:	e00e      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	e00c      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e4e:	2306      	movs	r3, #6
 8003e50:	e00a      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e52:	2305      	movs	r3, #5
 8003e54:	e008      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e56:	2304      	movs	r3, #4
 8003e58:	e006      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e5a:	2303      	movs	r3, #3
 8003e5c:	e004      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e5e:	2302      	movs	r3, #2
 8003e60:	e002      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e62:	2301      	movs	r3, #1
 8003e64:	e000      	b.n	8003e68 <HAL_GPIO_Init+0x228>
 8003e66:	2300      	movs	r3, #0
 8003e68:	69fa      	ldr	r2, [r7, #28]
 8003e6a:	f002 0203 	and.w	r2, r2, #3
 8003e6e:	0092      	lsls	r2, r2, #2
 8003e70:	4093      	lsls	r3, r2
 8003e72:	69ba      	ldr	r2, [r7, #24]
 8003e74:	4313      	orrs	r3, r2
 8003e76:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e78:	4934      	ldr	r1, [pc, #208]	; (8003f4c <HAL_GPIO_Init+0x30c>)
 8003e7a:	69fb      	ldr	r3, [r7, #28]
 8003e7c:	089b      	lsrs	r3, r3, #2
 8003e7e:	3302      	adds	r3, #2
 8003e80:	69ba      	ldr	r2, [r7, #24]
 8003e82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e86:	4b3a      	ldr	r3, [pc, #232]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	43db      	mvns	r3, r3
 8003e90:	69ba      	ldr	r2, [r7, #24]
 8003e92:	4013      	ands	r3, r2
 8003e94:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	685b      	ldr	r3, [r3, #4]
 8003e9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d003      	beq.n	8003eaa <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003ea2:	69ba      	ldr	r2, [r7, #24]
 8003ea4:	693b      	ldr	r3, [r7, #16]
 8003ea6:	4313      	orrs	r3, r2
 8003ea8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003eaa:	4a31      	ldr	r2, [pc, #196]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003eac:	69bb      	ldr	r3, [r7, #24]
 8003eae:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003eb0:	4b2f      	ldr	r3, [pc, #188]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003eb2:	685b      	ldr	r3, [r3, #4]
 8003eb4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eb6:	693b      	ldr	r3, [r7, #16]
 8003eb8:	43db      	mvns	r3, r3
 8003eba:	69ba      	ldr	r2, [r7, #24]
 8003ebc:	4013      	ands	r3, r2
 8003ebe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	685b      	ldr	r3, [r3, #4]
 8003ec4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d003      	beq.n	8003ed4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003ecc:	69ba      	ldr	r2, [r7, #24]
 8003ece:	693b      	ldr	r3, [r7, #16]
 8003ed0:	4313      	orrs	r3, r2
 8003ed2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003ed4:	4a26      	ldr	r2, [pc, #152]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003eda:	4b25      	ldr	r3, [pc, #148]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	43db      	mvns	r3, r3
 8003ee4:	69ba      	ldr	r2, [r7, #24]
 8003ee6:	4013      	ands	r3, r2
 8003ee8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003eea:	683b      	ldr	r3, [r7, #0]
 8003eec:	685b      	ldr	r3, [r3, #4]
 8003eee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d003      	beq.n	8003efe <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003ef6:	69ba      	ldr	r2, [r7, #24]
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003efe:	4a1c      	ldr	r2, [pc, #112]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003f04:	4b1a      	ldr	r3, [pc, #104]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	43db      	mvns	r3, r3
 8003f0e:	69ba      	ldr	r2, [r7, #24]
 8003f10:	4013      	ands	r3, r2
 8003f12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	685b      	ldr	r3, [r3, #4]
 8003f18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d003      	beq.n	8003f28 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8003f20:	69ba      	ldr	r2, [r7, #24]
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	4313      	orrs	r3, r2
 8003f26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003f28:	4a11      	ldr	r2, [pc, #68]	; (8003f70 <HAL_GPIO_Init+0x330>)
 8003f2a:	69bb      	ldr	r3, [r7, #24]
 8003f2c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	3301      	adds	r3, #1
 8003f32:	61fb      	str	r3, [r7, #28]
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2b0f      	cmp	r3, #15
 8003f38:	f67f ae90 	bls.w	8003c5c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003f3c:	bf00      	nop
 8003f3e:	3724      	adds	r7, #36	; 0x24
 8003f40:	46bd      	mov	sp, r7
 8003f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f46:	4770      	bx	lr
 8003f48:	40023800 	.word	0x40023800
 8003f4c:	40013800 	.word	0x40013800
 8003f50:	40020000 	.word	0x40020000
 8003f54:	40020400 	.word	0x40020400
 8003f58:	40020800 	.word	0x40020800
 8003f5c:	40020c00 	.word	0x40020c00
 8003f60:	40021000 	.word	0x40021000
 8003f64:	40021400 	.word	0x40021400
 8003f68:	40021800 	.word	0x40021800
 8003f6c:	40021c00 	.word	0x40021c00
 8003f70:	40013c00 	.word	0x40013c00

08003f74 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b083      	sub	sp, #12
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	460b      	mov	r3, r1
 8003f7e:	807b      	strh	r3, [r7, #2]
 8003f80:	4613      	mov	r3, r2
 8003f82:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f84:	787b      	ldrb	r3, [r7, #1]
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d003      	beq.n	8003f92 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f8a:	887a      	ldrh	r2, [r7, #2]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f90:	e003      	b.n	8003f9a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f92:	887b      	ldrh	r3, [r7, #2]
 8003f94:	041a      	lsls	r2, r3, #16
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	619a      	str	r2, [r3, #24]
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
	...

08003fa8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b086      	sub	sp, #24
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d101      	bne.n	8003fba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003fb6:	2301      	movs	r3, #1
 8003fb8:	e25b      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f003 0301 	and.w	r3, r3, #1
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d075      	beq.n	80040b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fc6:	4ba3      	ldr	r3, [pc, #652]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	f003 030c 	and.w	r3, r3, #12
 8003fce:	2b04      	cmp	r3, #4
 8003fd0:	d00c      	beq.n	8003fec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fd2:	4ba0      	ldr	r3, [pc, #640]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fda:	2b08      	cmp	r3, #8
 8003fdc:	d112      	bne.n	8004004 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fde:	4b9d      	ldr	r3, [pc, #628]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8003fe0:	685b      	ldr	r3, [r3, #4]
 8003fe2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fe6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fea:	d10b      	bne.n	8004004 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fec:	4b99      	ldr	r3, [pc, #612]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d05b      	beq.n	80040b0 <HAL_RCC_OscConfig+0x108>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d157      	bne.n	80040b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e236      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800400c:	d106      	bne.n	800401c <HAL_RCC_OscConfig+0x74>
 800400e:	4b91      	ldr	r3, [pc, #580]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a90      	ldr	r2, [pc, #576]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004018:	6013      	str	r3, [r2, #0]
 800401a:	e01d      	b.n	8004058 <HAL_RCC_OscConfig+0xb0>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	685b      	ldr	r3, [r3, #4]
 8004020:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004024:	d10c      	bne.n	8004040 <HAL_RCC_OscConfig+0x98>
 8004026:	4b8b      	ldr	r3, [pc, #556]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	4a8a      	ldr	r2, [pc, #552]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 800402c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004030:	6013      	str	r3, [r2, #0]
 8004032:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a87      	ldr	r2, [pc, #540]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004038:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800403c:	6013      	str	r3, [r2, #0]
 800403e:	e00b      	b.n	8004058 <HAL_RCC_OscConfig+0xb0>
 8004040:	4b84      	ldr	r3, [pc, #528]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a83      	ldr	r2, [pc, #524]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004046:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800404a:	6013      	str	r3, [r2, #0]
 800404c:	4b81      	ldr	r3, [pc, #516]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	4a80      	ldr	r2, [pc, #512]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004052:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004056:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	685b      	ldr	r3, [r3, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d013      	beq.n	8004088 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe fe70 	bl	8002d44 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7fe fe6c 	bl	8002d44 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1fb      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800407a:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d0f0      	beq.n	8004068 <HAL_RCC_OscConfig+0xc0>
 8004086:	e014      	b.n	80040b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004088:	f7fe fe5c 	bl	8002d44 <HAL_GetTick>
 800408c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800408e:	e008      	b.n	80040a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004090:	f7fe fe58 	bl	8002d44 <HAL_GetTick>
 8004094:	4602      	mov	r2, r0
 8004096:	693b      	ldr	r3, [r7, #16]
 8004098:	1ad3      	subs	r3, r2, r3
 800409a:	2b64      	cmp	r3, #100	; 0x64
 800409c:	d901      	bls.n	80040a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800409e:	2303      	movs	r3, #3
 80040a0:	e1e7      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040a2:	4b6c      	ldr	r3, [pc, #432]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d1f0      	bne.n	8004090 <HAL_RCC_OscConfig+0xe8>
 80040ae:	e000      	b.n	80040b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80040b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f003 0302 	and.w	r3, r3, #2
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d063      	beq.n	8004186 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040be:	4b65      	ldr	r3, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f003 030c 	and.w	r3, r3, #12
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ca:	4b62      	ldr	r3, [pc, #392]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80040cc:	689b      	ldr	r3, [r3, #8]
 80040ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040d2:	2b08      	cmp	r3, #8
 80040d4:	d11c      	bne.n	8004110 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040d6:	4b5f      	ldr	r3, [pc, #380]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d116      	bne.n	8004110 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e2:	4b5c      	ldr	r3, [pc, #368]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d005      	beq.n	80040fa <HAL_RCC_OscConfig+0x152>
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	68db      	ldr	r3, [r3, #12]
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d001      	beq.n	80040fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e1bb      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040fa:	4b56      	ldr	r3, [pc, #344]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	691b      	ldr	r3, [r3, #16]
 8004106:	00db      	lsls	r3, r3, #3
 8004108:	4952      	ldr	r1, [pc, #328]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 800410a:	4313      	orrs	r3, r2
 800410c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800410e:	e03a      	b.n	8004186 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	68db      	ldr	r3, [r3, #12]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d020      	beq.n	800415a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004118:	4b4f      	ldr	r3, [pc, #316]	; (8004258 <HAL_RCC_OscConfig+0x2b0>)
 800411a:	2201      	movs	r2, #1
 800411c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800411e:	f7fe fe11 	bl	8002d44 <HAL_GetTick>
 8004122:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004124:	e008      	b.n	8004138 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004126:	f7fe fe0d 	bl	8002d44 <HAL_GetTick>
 800412a:	4602      	mov	r2, r0
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	1ad3      	subs	r3, r2, r3
 8004130:	2b02      	cmp	r3, #2
 8004132:	d901      	bls.n	8004138 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004134:	2303      	movs	r3, #3
 8004136:	e19c      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004138:	4b46      	ldr	r3, [pc, #280]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f003 0302 	and.w	r3, r3, #2
 8004140:	2b00      	cmp	r3, #0
 8004142:	d0f0      	beq.n	8004126 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004144:	4b43      	ldr	r3, [pc, #268]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	00db      	lsls	r3, r3, #3
 8004152:	4940      	ldr	r1, [pc, #256]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004154:	4313      	orrs	r3, r2
 8004156:	600b      	str	r3, [r1, #0]
 8004158:	e015      	b.n	8004186 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800415a:	4b3f      	ldr	r3, [pc, #252]	; (8004258 <HAL_RCC_OscConfig+0x2b0>)
 800415c:	2200      	movs	r2, #0
 800415e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004160:	f7fe fdf0 	bl	8002d44 <HAL_GetTick>
 8004164:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004166:	e008      	b.n	800417a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004168:	f7fe fdec 	bl	8002d44 <HAL_GetTick>
 800416c:	4602      	mov	r2, r0
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	1ad3      	subs	r3, r2, r3
 8004172:	2b02      	cmp	r3, #2
 8004174:	d901      	bls.n	800417a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004176:	2303      	movs	r3, #3
 8004178:	e17b      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800417a:	4b36      	ldr	r3, [pc, #216]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	f003 0302 	and.w	r3, r3, #2
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1f0      	bne.n	8004168 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 0308 	and.w	r3, r3, #8
 800418e:	2b00      	cmp	r3, #0
 8004190:	d030      	beq.n	80041f4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	695b      	ldr	r3, [r3, #20]
 8004196:	2b00      	cmp	r3, #0
 8004198:	d016      	beq.n	80041c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800419a:	4b30      	ldr	r3, [pc, #192]	; (800425c <HAL_RCC_OscConfig+0x2b4>)
 800419c:	2201      	movs	r2, #1
 800419e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a0:	f7fe fdd0 	bl	8002d44 <HAL_GetTick>
 80041a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041a6:	e008      	b.n	80041ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a8:	f7fe fdcc 	bl	8002d44 <HAL_GetTick>
 80041ac:	4602      	mov	r2, r0
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	1ad3      	subs	r3, r2, r3
 80041b2:	2b02      	cmp	r3, #2
 80041b4:	d901      	bls.n	80041ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80041b6:	2303      	movs	r3, #3
 80041b8:	e15b      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80041ba:	4b26      	ldr	r3, [pc, #152]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80041bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041be:	f003 0302 	and.w	r3, r3, #2
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d0f0      	beq.n	80041a8 <HAL_RCC_OscConfig+0x200>
 80041c6:	e015      	b.n	80041f4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041c8:	4b24      	ldr	r3, [pc, #144]	; (800425c <HAL_RCC_OscConfig+0x2b4>)
 80041ca:	2200      	movs	r2, #0
 80041cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041ce:	f7fe fdb9 	bl	8002d44 <HAL_GetTick>
 80041d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041d4:	e008      	b.n	80041e8 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041d6:	f7fe fdb5 	bl	8002d44 <HAL_GetTick>
 80041da:	4602      	mov	r2, r0
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	1ad3      	subs	r3, r2, r3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d901      	bls.n	80041e8 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80041e4:	2303      	movs	r3, #3
 80041e6:	e144      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041e8:	4b1a      	ldr	r3, [pc, #104]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 80041ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041ec:	f003 0302 	and.w	r3, r3, #2
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d1f0      	bne.n	80041d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f003 0304 	and.w	r3, r3, #4
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	f000 80a0 	beq.w	8004342 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004202:	2300      	movs	r3, #0
 8004204:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004206:	4b13      	ldr	r3, [pc, #76]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10f      	bne.n	8004232 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004212:	2300      	movs	r3, #0
 8004214:	60bb      	str	r3, [r7, #8]
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004218:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800421a:	4a0e      	ldr	r2, [pc, #56]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 800421c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004220:	6413      	str	r3, [r2, #64]	; 0x40
 8004222:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <HAL_RCC_OscConfig+0x2ac>)
 8004224:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800422a:	60bb      	str	r3, [r7, #8]
 800422c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800422e:	2301      	movs	r3, #1
 8004230:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004232:	4b0b      	ldr	r3, [pc, #44]	; (8004260 <HAL_RCC_OscConfig+0x2b8>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800423a:	2b00      	cmp	r3, #0
 800423c:	d121      	bne.n	8004282 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800423e:	4b08      	ldr	r3, [pc, #32]	; (8004260 <HAL_RCC_OscConfig+0x2b8>)
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a07      	ldr	r2, [pc, #28]	; (8004260 <HAL_RCC_OscConfig+0x2b8>)
 8004244:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004248:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800424a:	f7fe fd7b 	bl	8002d44 <HAL_GetTick>
 800424e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004250:	e011      	b.n	8004276 <HAL_RCC_OscConfig+0x2ce>
 8004252:	bf00      	nop
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
 8004260:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004264:	f7fe fd6e 	bl	8002d44 <HAL_GetTick>
 8004268:	4602      	mov	r2, r0
 800426a:	693b      	ldr	r3, [r7, #16]
 800426c:	1ad3      	subs	r3, r2, r3
 800426e:	2b02      	cmp	r3, #2
 8004270:	d901      	bls.n	8004276 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004272:	2303      	movs	r3, #3
 8004274:	e0fd      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004276:	4b81      	ldr	r3, [pc, #516]	; (800447c <HAL_RCC_OscConfig+0x4d4>)
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800427e:	2b00      	cmp	r3, #0
 8004280:	d0f0      	beq.n	8004264 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	689b      	ldr	r3, [r3, #8]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d106      	bne.n	8004298 <HAL_RCC_OscConfig+0x2f0>
 800428a:	4b7d      	ldr	r3, [pc, #500]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 800428c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800428e:	4a7c      	ldr	r2, [pc, #496]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 8004290:	f043 0301 	orr.w	r3, r3, #1
 8004294:	6713      	str	r3, [r2, #112]	; 0x70
 8004296:	e01c      	b.n	80042d2 <HAL_RCC_OscConfig+0x32a>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b05      	cmp	r3, #5
 800429e:	d10c      	bne.n	80042ba <HAL_RCC_OscConfig+0x312>
 80042a0:	4b77      	ldr	r3, [pc, #476]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042a4:	4a76      	ldr	r2, [pc, #472]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042a6:	f043 0304 	orr.w	r3, r3, #4
 80042aa:	6713      	str	r3, [r2, #112]	; 0x70
 80042ac:	4b74      	ldr	r3, [pc, #464]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042b0:	4a73      	ldr	r2, [pc, #460]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042b2:	f043 0301 	orr.w	r3, r3, #1
 80042b6:	6713      	str	r3, [r2, #112]	; 0x70
 80042b8:	e00b      	b.n	80042d2 <HAL_RCC_OscConfig+0x32a>
 80042ba:	4b71      	ldr	r3, [pc, #452]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042be:	4a70      	ldr	r2, [pc, #448]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042c0:	f023 0301 	bic.w	r3, r3, #1
 80042c4:	6713      	str	r3, [r2, #112]	; 0x70
 80042c6:	4b6e      	ldr	r3, [pc, #440]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ca:	4a6d      	ldr	r2, [pc, #436]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042cc:	f023 0304 	bic.w	r3, r3, #4
 80042d0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d015      	beq.n	8004306 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042da:	f7fe fd33 	bl	8002d44 <HAL_GetTick>
 80042de:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042e0:	e00a      	b.n	80042f8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e2:	f7fe fd2f 	bl	8002d44 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	693b      	ldr	r3, [r7, #16]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	f241 3288 	movw	r2, #5000	; 0x1388
 80042f0:	4293      	cmp	r3, r2
 80042f2:	d901      	bls.n	80042f8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80042f4:	2303      	movs	r3, #3
 80042f6:	e0bc      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80042fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fc:	f003 0302 	and.w	r3, r3, #2
 8004300:	2b00      	cmp	r3, #0
 8004302:	d0ee      	beq.n	80042e2 <HAL_RCC_OscConfig+0x33a>
 8004304:	e014      	b.n	8004330 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004306:	f7fe fd1d 	bl	8002d44 <HAL_GetTick>
 800430a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800430c:	e00a      	b.n	8004324 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800430e:	f7fe fd19 	bl	8002d44 <HAL_GetTick>
 8004312:	4602      	mov	r2, r0
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	1ad3      	subs	r3, r2, r3
 8004318:	f241 3288 	movw	r2, #5000	; 0x1388
 800431c:	4293      	cmp	r3, r2
 800431e:	d901      	bls.n	8004324 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e0a6      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004324:	4b56      	ldr	r3, [pc, #344]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 8004326:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004328:	f003 0302 	and.w	r3, r3, #2
 800432c:	2b00      	cmp	r3, #0
 800432e:	d1ee      	bne.n	800430e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004330:	7dfb      	ldrb	r3, [r7, #23]
 8004332:	2b01      	cmp	r3, #1
 8004334:	d105      	bne.n	8004342 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004336:	4b52      	ldr	r3, [pc, #328]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 8004338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800433a:	4a51      	ldr	r2, [pc, #324]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 800433c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004340:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	699b      	ldr	r3, [r3, #24]
 8004346:	2b00      	cmp	r3, #0
 8004348:	f000 8092 	beq.w	8004470 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800434c:	4b4c      	ldr	r3, [pc, #304]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	f003 030c 	and.w	r3, r3, #12
 8004354:	2b08      	cmp	r3, #8
 8004356:	d05c      	beq.n	8004412 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	2b02      	cmp	r3, #2
 800435e:	d141      	bne.n	80043e4 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004360:	4b48      	ldr	r3, [pc, #288]	; (8004484 <HAL_RCC_OscConfig+0x4dc>)
 8004362:	2200      	movs	r2, #0
 8004364:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004366:	f7fe fced 	bl	8002d44 <HAL_GetTick>
 800436a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800436c:	e008      	b.n	8004380 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800436e:	f7fe fce9 	bl	8002d44 <HAL_GetTick>
 8004372:	4602      	mov	r2, r0
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	1ad3      	subs	r3, r2, r3
 8004378:	2b02      	cmp	r3, #2
 800437a:	d901      	bls.n	8004380 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800437c:	2303      	movs	r3, #3
 800437e:	e078      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004380:	4b3f      	ldr	r3, [pc, #252]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1f0      	bne.n	800436e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	69da      	ldr	r2, [r3, #28]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6a1b      	ldr	r3, [r3, #32]
 8004394:	431a      	orrs	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800439a:	019b      	lsls	r3, r3, #6
 800439c:	431a      	orrs	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043a2:	085b      	lsrs	r3, r3, #1
 80043a4:	3b01      	subs	r3, #1
 80043a6:	041b      	lsls	r3, r3, #16
 80043a8:	431a      	orrs	r2, r3
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	061b      	lsls	r3, r3, #24
 80043b0:	4933      	ldr	r1, [pc, #204]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80043b2:	4313      	orrs	r3, r2
 80043b4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80043b6:	4b33      	ldr	r3, [pc, #204]	; (8004484 <HAL_RCC_OscConfig+0x4dc>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fcc2 	bl	8002d44 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fe fcbe 	bl	8002d44 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e04d      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043d6:	4b2a      	ldr	r3, [pc, #168]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d0f0      	beq.n	80043c4 <HAL_RCC_OscConfig+0x41c>
 80043e2:	e045      	b.n	8004470 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043e4:	4b27      	ldr	r3, [pc, #156]	; (8004484 <HAL_RCC_OscConfig+0x4dc>)
 80043e6:	2200      	movs	r2, #0
 80043e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043ea:	f7fe fcab 	bl	8002d44 <HAL_GetTick>
 80043ee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043f0:	e008      	b.n	8004404 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043f2:	f7fe fca7 	bl	8002d44 <HAL_GetTick>
 80043f6:	4602      	mov	r2, r0
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	1ad3      	subs	r3, r2, r3
 80043fc:	2b02      	cmp	r3, #2
 80043fe:	d901      	bls.n	8004404 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004400:	2303      	movs	r3, #3
 8004402:	e036      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004404:	4b1e      	ldr	r3, [pc, #120]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1f0      	bne.n	80043f2 <HAL_RCC_OscConfig+0x44a>
 8004410:	e02e      	b.n	8004470 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2b01      	cmp	r3, #1
 8004418:	d101      	bne.n	800441e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800441a:	2301      	movs	r3, #1
 800441c:	e029      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800441e:	4b18      	ldr	r3, [pc, #96]	; (8004480 <HAL_RCC_OscConfig+0x4d8>)
 8004420:	685b      	ldr	r3, [r3, #4]
 8004422:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	69db      	ldr	r3, [r3, #28]
 800442e:	429a      	cmp	r2, r3
 8004430:	d11c      	bne.n	800446c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d115      	bne.n	800446c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8004440:	68fa      	ldr	r2, [r7, #12]
 8004442:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004446:	4013      	ands	r3, r2
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800444c:	4293      	cmp	r3, r2
 800444e:	d10d      	bne.n	800446c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800445a:	429a      	cmp	r2, r3
 800445c:	d106      	bne.n	800446c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004468:	429a      	cmp	r2, r3
 800446a:	d001      	beq.n	8004470 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e000      	b.n	8004472 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8004470:	2300      	movs	r3, #0
}
 8004472:	4618      	mov	r0, r3
 8004474:	3718      	adds	r7, #24
 8004476:	46bd      	mov	sp, r7
 8004478:	bd80      	pop	{r7, pc}
 800447a:	bf00      	nop
 800447c:	40007000 	.word	0x40007000
 8004480:	40023800 	.word	0x40023800
 8004484:	42470060 	.word	0x42470060

08004488 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d101      	bne.n	800449c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004498:	2301      	movs	r3, #1
 800449a:	e0cc      	b.n	8004636 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800449c:	4b68      	ldr	r3, [pc, #416]	; (8004640 <HAL_RCC_ClockConfig+0x1b8>)
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f003 030f 	and.w	r3, r3, #15
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d90c      	bls.n	80044c4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044aa:	4b65      	ldr	r3, [pc, #404]	; (8004640 <HAL_RCC_ClockConfig+0x1b8>)
 80044ac:	683a      	ldr	r2, [r7, #0]
 80044ae:	b2d2      	uxtb	r2, r2
 80044b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80044b2:	4b63      	ldr	r3, [pc, #396]	; (8004640 <HAL_RCC_ClockConfig+0x1b8>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f003 030f 	and.w	r3, r3, #15
 80044ba:	683a      	ldr	r2, [r7, #0]
 80044bc:	429a      	cmp	r2, r3
 80044be:	d001      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e0b8      	b.n	8004636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0302 	and.w	r3, r3, #2
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d020      	beq.n	8004512 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0304 	and.w	r3, r3, #4
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044dc:	4b59      	ldr	r3, [pc, #356]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a58      	ldr	r2, [pc, #352]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044e6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	f003 0308 	and.w	r3, r3, #8
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d005      	beq.n	8004500 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044f4:	4b53      	ldr	r3, [pc, #332]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	689b      	ldr	r3, [r3, #8]
 80044f8:	4a52      	ldr	r2, [pc, #328]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 80044fa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044fe:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004500:	4b50      	ldr	r3, [pc, #320]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	689b      	ldr	r3, [r3, #8]
 800450c:	494d      	ldr	r1, [pc, #308]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 800450e:	4313      	orrs	r3, r2
 8004510:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d044      	beq.n	80045a8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b01      	cmp	r3, #1
 8004524:	d107      	bne.n	8004536 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004526:	4b47      	ldr	r3, [pc, #284]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452e:	2b00      	cmp	r3, #0
 8004530:	d119      	bne.n	8004566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	e07f      	b.n	8004636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	2b02      	cmp	r3, #2
 800453c:	d003      	beq.n	8004546 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004542:	2b03      	cmp	r3, #3
 8004544:	d107      	bne.n	8004556 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004546:	4b3f      	ldr	r3, [pc, #252]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d109      	bne.n	8004566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	e06f      	b.n	8004636 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004556:	4b3b      	ldr	r3, [pc, #236]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f003 0302 	and.w	r3, r3, #2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d101      	bne.n	8004566 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004562:	2301      	movs	r3, #1
 8004564:	e067      	b.n	8004636 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004566:	4b37      	ldr	r3, [pc, #220]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004568:	689b      	ldr	r3, [r3, #8]
 800456a:	f023 0203 	bic.w	r2, r3, #3
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	4934      	ldr	r1, [pc, #208]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	4313      	orrs	r3, r2
 8004576:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004578:	f7fe fbe4 	bl	8002d44 <HAL_GetTick>
 800457c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	e00a      	b.n	8004596 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004580:	f7fe fbe0 	bl	8002d44 <HAL_GetTick>
 8004584:	4602      	mov	r2, r0
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	1ad3      	subs	r3, r2, r3
 800458a:	f241 3288 	movw	r2, #5000	; 0x1388
 800458e:	4293      	cmp	r3, r2
 8004590:	d901      	bls.n	8004596 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e04f      	b.n	8004636 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004596:	4b2b      	ldr	r3, [pc, #172]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f003 020c 	and.w	r2, r3, #12
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	685b      	ldr	r3, [r3, #4]
 80045a2:	009b      	lsls	r3, r3, #2
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d1eb      	bne.n	8004580 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80045a8:	4b25      	ldr	r3, [pc, #148]	; (8004640 <HAL_RCC_ClockConfig+0x1b8>)
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f003 030f 	and.w	r3, r3, #15
 80045b0:	683a      	ldr	r2, [r7, #0]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d20c      	bcs.n	80045d0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80045b6:	4b22      	ldr	r3, [pc, #136]	; (8004640 <HAL_RCC_ClockConfig+0x1b8>)
 80045b8:	683a      	ldr	r2, [r7, #0]
 80045ba:	b2d2      	uxtb	r2, r2
 80045bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045be:	4b20      	ldr	r3, [pc, #128]	; (8004640 <HAL_RCC_ClockConfig+0x1b8>)
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f003 030f 	and.w	r3, r3, #15
 80045c6:	683a      	ldr	r2, [r7, #0]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	d001      	beq.n	80045d0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045cc:	2301      	movs	r3, #1
 80045ce:	e032      	b.n	8004636 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0304 	and.w	r3, r3, #4
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d008      	beq.n	80045ee <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045dc:	4b19      	ldr	r3, [pc, #100]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 80045de:	689b      	ldr	r3, [r3, #8]
 80045e0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68db      	ldr	r3, [r3, #12]
 80045e8:	4916      	ldr	r1, [pc, #88]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 80045ea:	4313      	orrs	r3, r2
 80045ec:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0308 	and.w	r3, r3, #8
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d009      	beq.n	800460e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045fa:	4b12      	ldr	r3, [pc, #72]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	691b      	ldr	r3, [r3, #16]
 8004606:	00db      	lsls	r3, r3, #3
 8004608:	490e      	ldr	r1, [pc, #56]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 800460a:	4313      	orrs	r3, r2
 800460c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800460e:	f000 f821 	bl	8004654 <HAL_RCC_GetSysClockFreq>
 8004612:	4601      	mov	r1, r0
 8004614:	4b0b      	ldr	r3, [pc, #44]	; (8004644 <HAL_RCC_ClockConfig+0x1bc>)
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	091b      	lsrs	r3, r3, #4
 800461a:	f003 030f 	and.w	r3, r3, #15
 800461e:	4a0a      	ldr	r2, [pc, #40]	; (8004648 <HAL_RCC_ClockConfig+0x1c0>)
 8004620:	5cd3      	ldrb	r3, [r2, r3]
 8004622:	fa21 f303 	lsr.w	r3, r1, r3
 8004626:	4a09      	ldr	r2, [pc, #36]	; (800464c <HAL_RCC_ClockConfig+0x1c4>)
 8004628:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_RCC_ClockConfig+0x1c8>)
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4618      	mov	r0, r3
 8004630:	f7fe f966 	bl	8002900 <HAL_InitTick>

  return HAL_OK;
 8004634:	2300      	movs	r3, #0
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	40023c00 	.word	0x40023c00
 8004644:	40023800 	.word	0x40023800
 8004648:	0800814c 	.word	0x0800814c
 800464c:	200001d4 	.word	0x200001d4
 8004650:	200001d8 	.word	0x200001d8

08004654 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800465a:	2300      	movs	r3, #0
 800465c:	607b      	str	r3, [r7, #4]
 800465e:	2300      	movs	r3, #0
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	2300      	movs	r3, #0
 8004664:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8004666:	2300      	movs	r3, #0
 8004668:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800466a:	4b63      	ldr	r3, [pc, #396]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800466c:	689b      	ldr	r3, [r3, #8]
 800466e:	f003 030c 	and.w	r3, r3, #12
 8004672:	2b04      	cmp	r3, #4
 8004674:	d007      	beq.n	8004686 <HAL_RCC_GetSysClockFreq+0x32>
 8004676:	2b08      	cmp	r3, #8
 8004678:	d008      	beq.n	800468c <HAL_RCC_GetSysClockFreq+0x38>
 800467a:	2b00      	cmp	r3, #0
 800467c:	f040 80b4 	bne.w	80047e8 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004680:	4b5e      	ldr	r3, [pc, #376]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 8004682:	60bb      	str	r3, [r7, #8]
       break;
 8004684:	e0b3      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004686:	4b5e      	ldr	r3, [pc, #376]	; (8004800 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8004688:	60bb      	str	r3, [r7, #8]
      break;
 800468a:	e0b0      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800468c:	4b5a      	ldr	r3, [pc, #360]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800468e:	685b      	ldr	r3, [r3, #4]
 8004690:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004694:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004696:	4b58      	ldr	r3, [pc, #352]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d04a      	beq.n	8004738 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80046a2:	4b55      	ldr	r3, [pc, #340]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80046a4:	685b      	ldr	r3, [r3, #4]
 80046a6:	099b      	lsrs	r3, r3, #6
 80046a8:	f04f 0400 	mov.w	r4, #0
 80046ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	ea03 0501 	and.w	r5, r3, r1
 80046b8:	ea04 0602 	and.w	r6, r4, r2
 80046bc:	4629      	mov	r1, r5
 80046be:	4632      	mov	r2, r6
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	f04f 0400 	mov.w	r4, #0
 80046c8:	0154      	lsls	r4, r2, #5
 80046ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80046ce:	014b      	lsls	r3, r1, #5
 80046d0:	4619      	mov	r1, r3
 80046d2:	4622      	mov	r2, r4
 80046d4:	1b49      	subs	r1, r1, r5
 80046d6:	eb62 0206 	sbc.w	r2, r2, r6
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	f04f 0400 	mov.w	r4, #0
 80046e2:	0194      	lsls	r4, r2, #6
 80046e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80046e8:	018b      	lsls	r3, r1, #6
 80046ea:	1a5b      	subs	r3, r3, r1
 80046ec:	eb64 0402 	sbc.w	r4, r4, r2
 80046f0:	f04f 0100 	mov.w	r1, #0
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	00e2      	lsls	r2, r4, #3
 80046fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80046fe:	00d9      	lsls	r1, r3, #3
 8004700:	460b      	mov	r3, r1
 8004702:	4614      	mov	r4, r2
 8004704:	195b      	adds	r3, r3, r5
 8004706:	eb44 0406 	adc.w	r4, r4, r6
 800470a:	f04f 0100 	mov.w	r1, #0
 800470e:	f04f 0200 	mov.w	r2, #0
 8004712:	0262      	lsls	r2, r4, #9
 8004714:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8004718:	0259      	lsls	r1, r3, #9
 800471a:	460b      	mov	r3, r1
 800471c:	4614      	mov	r4, r2
 800471e:	4618      	mov	r0, r3
 8004720:	4621      	mov	r1, r4
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f04f 0400 	mov.w	r4, #0
 8004728:	461a      	mov	r2, r3
 800472a:	4623      	mov	r3, r4
 800472c:	f7fb fd4c 	bl	80001c8 <__aeabi_uldivmod>
 8004730:	4603      	mov	r3, r0
 8004732:	460c      	mov	r4, r1
 8004734:	60fb      	str	r3, [r7, #12]
 8004736:	e049      	b.n	80047cc <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004738:	4b2f      	ldr	r3, [pc, #188]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	099b      	lsrs	r3, r3, #6
 800473e:	f04f 0400 	mov.w	r4, #0
 8004742:	f240 11ff 	movw	r1, #511	; 0x1ff
 8004746:	f04f 0200 	mov.w	r2, #0
 800474a:	ea03 0501 	and.w	r5, r3, r1
 800474e:	ea04 0602 	and.w	r6, r4, r2
 8004752:	4629      	mov	r1, r5
 8004754:	4632      	mov	r2, r6
 8004756:	f04f 0300 	mov.w	r3, #0
 800475a:	f04f 0400 	mov.w	r4, #0
 800475e:	0154      	lsls	r4, r2, #5
 8004760:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8004764:	014b      	lsls	r3, r1, #5
 8004766:	4619      	mov	r1, r3
 8004768:	4622      	mov	r2, r4
 800476a:	1b49      	subs	r1, r1, r5
 800476c:	eb62 0206 	sbc.w	r2, r2, r6
 8004770:	f04f 0300 	mov.w	r3, #0
 8004774:	f04f 0400 	mov.w	r4, #0
 8004778:	0194      	lsls	r4, r2, #6
 800477a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800477e:	018b      	lsls	r3, r1, #6
 8004780:	1a5b      	subs	r3, r3, r1
 8004782:	eb64 0402 	sbc.w	r4, r4, r2
 8004786:	f04f 0100 	mov.w	r1, #0
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	00e2      	lsls	r2, r4, #3
 8004790:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8004794:	00d9      	lsls	r1, r3, #3
 8004796:	460b      	mov	r3, r1
 8004798:	4614      	mov	r4, r2
 800479a:	195b      	adds	r3, r3, r5
 800479c:	eb44 0406 	adc.w	r4, r4, r6
 80047a0:	f04f 0100 	mov.w	r1, #0
 80047a4:	f04f 0200 	mov.w	r2, #0
 80047a8:	02a2      	lsls	r2, r4, #10
 80047aa:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 80047ae:	0299      	lsls	r1, r3, #10
 80047b0:	460b      	mov	r3, r1
 80047b2:	4614      	mov	r4, r2
 80047b4:	4618      	mov	r0, r3
 80047b6:	4621      	mov	r1, r4
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f04f 0400 	mov.w	r4, #0
 80047be:	461a      	mov	r2, r3
 80047c0:	4623      	mov	r3, r4
 80047c2:	f7fb fd01 	bl	80001c8 <__aeabi_uldivmod>
 80047c6:	4603      	mov	r3, r0
 80047c8:	460c      	mov	r4, r1
 80047ca:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047cc:	4b0a      	ldr	r3, [pc, #40]	; (80047f8 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80047ce:	685b      	ldr	r3, [r3, #4]
 80047d0:	0c1b      	lsrs	r3, r3, #16
 80047d2:	f003 0303 	and.w	r3, r3, #3
 80047d6:	3301      	adds	r3, #1
 80047d8:	005b      	lsls	r3, r3, #1
 80047da:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e4:	60bb      	str	r3, [r7, #8]
      break;
 80047e6:	e002      	b.n	80047ee <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047e8:	4b04      	ldr	r3, [pc, #16]	; (80047fc <HAL_RCC_GetSysClockFreq+0x1a8>)
 80047ea:	60bb      	str	r3, [r7, #8]
      break;
 80047ec:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047ee:	68bb      	ldr	r3, [r7, #8]
}
 80047f0:	4618      	mov	r0, r3
 80047f2:	3714      	adds	r7, #20
 80047f4:	46bd      	mov	sp, r7
 80047f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80047f8:	40023800 	.word	0x40023800
 80047fc:	00f42400 	.word	0x00f42400
 8004800:	007a1200 	.word	0x007a1200

08004804 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004804:	b480      	push	{r7}
 8004806:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004808:	4b03      	ldr	r3, [pc, #12]	; (8004818 <HAL_RCC_GetHCLKFreq+0x14>)
 800480a:	681b      	ldr	r3, [r3, #0]
}
 800480c:	4618      	mov	r0, r3
 800480e:	46bd      	mov	sp, r7
 8004810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004814:	4770      	bx	lr
 8004816:	bf00      	nop
 8004818:	200001d4 	.word	0x200001d4

0800481c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004820:	f7ff fff0 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 8004824:	4601      	mov	r1, r0
 8004826:	4b05      	ldr	r3, [pc, #20]	; (800483c <HAL_RCC_GetPCLK1Freq+0x20>)
 8004828:	689b      	ldr	r3, [r3, #8]
 800482a:	0a9b      	lsrs	r3, r3, #10
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	4a03      	ldr	r2, [pc, #12]	; (8004840 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004832:	5cd3      	ldrb	r3, [r2, r3]
 8004834:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004838:	4618      	mov	r0, r3
 800483a:	bd80      	pop	{r7, pc}
 800483c:	40023800 	.word	0x40023800
 8004840:	0800815c 	.word	0x0800815c

08004844 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004848:	f7ff ffdc 	bl	8004804 <HAL_RCC_GetHCLKFreq>
 800484c:	4601      	mov	r1, r0
 800484e:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004850:	689b      	ldr	r3, [r3, #8]
 8004852:	0b5b      	lsrs	r3, r3, #13
 8004854:	f003 0307 	and.w	r3, r3, #7
 8004858:	4a03      	ldr	r2, [pc, #12]	; (8004868 <HAL_RCC_GetPCLK2Freq+0x24>)
 800485a:	5cd3      	ldrb	r3, [r2, r3]
 800485c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8004860:	4618      	mov	r0, r3
 8004862:	bd80      	pop	{r7, pc}
 8004864:	40023800 	.word	0x40023800
 8004868:	0800815c 	.word	0x0800815c

0800486c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800486c:	b480      	push	{r7}
 800486e:	b083      	sub	sp, #12
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	220f      	movs	r2, #15
 800487a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800487c:	4b12      	ldr	r3, [pc, #72]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 800487e:	689b      	ldr	r3, [r3, #8]
 8004880:	f003 0203 	and.w	r2, r3, #3
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004888:	4b0f      	ldr	r3, [pc, #60]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 800488a:	689b      	ldr	r3, [r3, #8]
 800488c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004894:	4b0c      	ldr	r3, [pc, #48]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80048a0:	4b09      	ldr	r3, [pc, #36]	; (80048c8 <HAL_RCC_GetClockConfig+0x5c>)
 80048a2:	689b      	ldr	r3, [r3, #8]
 80048a4:	08db      	lsrs	r3, r3, #3
 80048a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80048ae:	4b07      	ldr	r3, [pc, #28]	; (80048cc <HAL_RCC_GetClockConfig+0x60>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f003 020f 	and.w	r2, r3, #15
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	601a      	str	r2, [r3, #0]
}
 80048ba:	bf00      	nop
 80048bc:	370c      	adds	r7, #12
 80048be:	46bd      	mov	sp, r7
 80048c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	40023800 	.word	0x40023800
 80048cc:	40023c00 	.word	0x40023c00

080048d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e056      	b.n	8004990 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048ee:	b2db      	uxtb	r3, r3
 80048f0:	2b00      	cmp	r3, #0
 80048f2:	d106      	bne.n	8004902 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7fd fbcd 	bl	800209c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2202      	movs	r2, #2
 8004906:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004918:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	685a      	ldr	r2, [r3, #4]
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	431a      	orrs	r2, r3
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	68db      	ldr	r3, [r3, #12]
 8004928:	431a      	orrs	r2, r3
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	691b      	ldr	r3, [r3, #16]
 800492e:	431a      	orrs	r2, r3
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	695b      	ldr	r3, [r3, #20]
 8004934:	431a      	orrs	r2, r3
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	699b      	ldr	r3, [r3, #24]
 800493a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493e:	431a      	orrs	r2, r3
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	69db      	ldr	r3, [r3, #28]
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a1b      	ldr	r3, [r3, #32]
 800494a:	ea42 0103 	orr.w	r1, r2, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699b      	ldr	r3, [r3, #24]
 800495e:	0c1b      	lsrs	r3, r3, #16
 8004960:	f003 0104 	and.w	r1, r3, #4
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	430a      	orrs	r2, r1
 800496e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	69da      	ldr	r2, [r3, #28]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800497e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	2201      	movs	r2, #1
 800498a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800498e:	2300      	movs	r3, #0
}
 8004990:	4618      	mov	r0, r3
 8004992:	3708      	adds	r7, #8
 8004994:	46bd      	mov	sp, r7
 8004996:	bd80      	pop	{r7, pc}

08004998 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004998:	b580      	push	{r7, lr}
 800499a:	b088      	sub	sp, #32
 800499c:	af00      	add	r7, sp, #0
 800499e:	60f8      	str	r0, [r7, #12]
 80049a0:	60b9      	str	r1, [r7, #8]
 80049a2:	603b      	str	r3, [r7, #0]
 80049a4:	4613      	mov	r3, r2
 80049a6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049a8:	2300      	movs	r3, #0
 80049aa:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049b2:	2b01      	cmp	r3, #1
 80049b4:	d101      	bne.n	80049ba <HAL_SPI_Transmit+0x22>
 80049b6:	2302      	movs	r3, #2
 80049b8:	e11e      	b.n	8004bf8 <HAL_SPI_Transmit+0x260>
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	2201      	movs	r2, #1
 80049be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049c2:	f7fe f9bf 	bl	8002d44 <HAL_GetTick>
 80049c6:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049c8:	88fb      	ldrh	r3, [r7, #6]
 80049ca:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049d2:	b2db      	uxtb	r3, r3
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d002      	beq.n	80049de <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80049d8:	2302      	movs	r3, #2
 80049da:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049dc:	e103      	b.n	8004be6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80049de:	68bb      	ldr	r3, [r7, #8]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d002      	beq.n	80049ea <HAL_SPI_Transmit+0x52>
 80049e4:	88fb      	ldrh	r3, [r7, #6]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d102      	bne.n	80049f0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80049ea:	2301      	movs	r3, #1
 80049ec:	77fb      	strb	r3, [r7, #31]
    goto error;
 80049ee:	e0fa      	b.n	8004be6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	2203      	movs	r2, #3
 80049f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2200      	movs	r2, #0
 80049fc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	68ba      	ldr	r2, [r7, #8]
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	88fa      	ldrh	r2, [r7, #6]
 8004a08:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	88fa      	ldrh	r2, [r7, #6]
 8004a0e:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	2200      	movs	r2, #0
 8004a14:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	689b      	ldr	r3, [r3, #8]
 8004a32:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a36:	d107      	bne.n	8004a48 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	681a      	ldr	r2, [r3, #0]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a46:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a52:	2b40      	cmp	r3, #64	; 0x40
 8004a54:	d007      	beq.n	8004a66 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a64:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a6e:	d14b      	bne.n	8004b08 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d002      	beq.n	8004a7e <HAL_SPI_Transmit+0xe6>
 8004a78:	8afb      	ldrh	r3, [r7, #22]
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d13e      	bne.n	8004afc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a82:	881a      	ldrh	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a8e:	1c9a      	adds	r2, r3, #2
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004a98:	b29b      	uxth	r3, r3
 8004a9a:	3b01      	subs	r3, #1
 8004a9c:	b29a      	uxth	r2, r3
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004aa2:	e02b      	b.n	8004afc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 0302 	and.w	r3, r3, #2
 8004aae:	2b02      	cmp	r3, #2
 8004ab0:	d112      	bne.n	8004ad8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ab6:	881a      	ldrh	r2, [r3, #0]
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac2:	1c9a      	adds	r2, r3, #2
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ad6:	e011      	b.n	8004afc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ad8:	f7fe f934 	bl	8002d44 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	429a      	cmp	r2, r3
 8004ae6:	d803      	bhi.n	8004af0 <HAL_SPI_Transmit+0x158>
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004aee:	d102      	bne.n	8004af6 <HAL_SPI_Transmit+0x15e>
 8004af0:	683b      	ldr	r3, [r7, #0]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d102      	bne.n	8004afc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 8004af6:	2303      	movs	r3, #3
 8004af8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004afa:	e074      	b.n	8004be6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b00:	b29b      	uxth	r3, r3
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d1ce      	bne.n	8004aa4 <HAL_SPI_Transmit+0x10c>
 8004b06:	e04c      	b.n	8004ba2 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	685b      	ldr	r3, [r3, #4]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d002      	beq.n	8004b16 <HAL_SPI_Transmit+0x17e>
 8004b10:	8afb      	ldrh	r3, [r7, #22]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d140      	bne.n	8004b98 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	330c      	adds	r3, #12
 8004b20:	7812      	ldrb	r2, [r2, #0]
 8004b22:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b28:	1c5a      	adds	r2, r3, #1
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b32:	b29b      	uxth	r3, r3
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b3c:	e02c      	b.n	8004b98 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	f003 0302 	and.w	r3, r3, #2
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d113      	bne.n	8004b74 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	330c      	adds	r3, #12
 8004b56:	7812      	ldrb	r2, [r2, #0]
 8004b58:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5e:	1c5a      	adds	r2, r3, #1
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b68:	b29b      	uxth	r3, r3
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	b29a      	uxth	r2, r3
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b72:	e011      	b.n	8004b98 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b74:	f7fe f8e6 	bl	8002d44 <HAL_GetTick>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	69bb      	ldr	r3, [r7, #24]
 8004b7c:	1ad3      	subs	r3, r2, r3
 8004b7e:	683a      	ldr	r2, [r7, #0]
 8004b80:	429a      	cmp	r2, r3
 8004b82:	d803      	bhi.n	8004b8c <HAL_SPI_Transmit+0x1f4>
 8004b84:	683b      	ldr	r3, [r7, #0]
 8004b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b8a:	d102      	bne.n	8004b92 <HAL_SPI_Transmit+0x1fa>
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8004b92:	2303      	movs	r3, #3
 8004b94:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b96:	e026      	b.n	8004be6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9c:	b29b      	uxth	r3, r3
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d1cd      	bne.n	8004b3e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004ba2:	69ba      	ldr	r2, [r7, #24]
 8004ba4:	6839      	ldr	r1, [r7, #0]
 8004ba6:	68f8      	ldr	r0, [r7, #12]
 8004ba8:	f000 f894 	bl	8004cd4 <SPI_EndRxTxTransaction>
 8004bac:	4603      	mov	r3, r0
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2220      	movs	r2, #32
 8004bb6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	689b      	ldr	r3, [r3, #8]
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	613b      	str	r3, [r7, #16]
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68db      	ldr	r3, [r3, #12]
 8004bca:	613b      	str	r3, [r7, #16]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	689b      	ldr	r3, [r3, #8]
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 8004bde:	2301      	movs	r3, #1
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e000      	b.n	8004be6 <HAL_SPI_Transmit+0x24e>
  }

error:
 8004be4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2201      	movs	r2, #1
 8004bea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004bf6:	7ffb      	ldrb	r3, [r7, #31]
}
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	3720      	adds	r7, #32
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	bd80      	pop	{r7, pc}

08004c00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	603b      	str	r3, [r7, #0]
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c10:	e04c      	b.n	8004cac <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c18:	d048      	beq.n	8004cac <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8004c1a:	f7fe f893 	bl	8002d44 <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	683a      	ldr	r2, [r7, #0]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d902      	bls.n	8004c30 <SPI_WaitFlagStateUntilTimeout+0x30>
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d13d      	bne.n	8004cac <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	685a      	ldr	r2, [r3, #4]
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004c3e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	685b      	ldr	r3, [r3, #4]
 8004c44:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004c48:	d111      	bne.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0x6e>
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	689b      	ldr	r3, [r3, #8]
 8004c4e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c52:	d004      	beq.n	8004c5e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	689b      	ldr	r3, [r3, #8]
 8004c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c5c:	d107      	bne.n	8004c6e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c6c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c72:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004c76:	d10f      	bne.n	8004c98 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	681a      	ldr	r2, [r3, #0]
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c86:	601a      	str	r2, [r3, #0]
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c96:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004ca0:	68fb      	ldr	r3, [r7, #12]
 8004ca2:	2200      	movs	r2, #0
 8004ca4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004ca8:	2303      	movs	r3, #3
 8004caa:	e00f      	b.n	8004ccc <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	689a      	ldr	r2, [r3, #8]
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	68ba      	ldr	r2, [r7, #8]
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	bf0c      	ite	eq
 8004cbc:	2301      	moveq	r3, #1
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	b2db      	uxtb	r3, r3
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	79fb      	ldrb	r3, [r7, #7]
 8004cc6:	429a      	cmp	r2, r3
 8004cc8:	d1a3      	bne.n	8004c12 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3710      	adds	r7, #16
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd80      	pop	{r7, pc}

08004cd4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b088      	sub	sp, #32
 8004cd8:	af02      	add	r7, sp, #8
 8004cda:	60f8      	str	r0, [r7, #12]
 8004cdc:	60b9      	str	r1, [r7, #8]
 8004cde:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004ce0:	4b1b      	ldr	r3, [pc, #108]	; (8004d50 <SPI_EndRxTxTransaction+0x7c>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	4a1b      	ldr	r2, [pc, #108]	; (8004d54 <SPI_EndRxTxTransaction+0x80>)
 8004ce6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cea:	0d5b      	lsrs	r3, r3, #21
 8004cec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004cf0:	fb02 f303 	mul.w	r3, r2, r3
 8004cf4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004cfe:	d112      	bne.n	8004d26 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	9300      	str	r3, [sp, #0]
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	2200      	movs	r2, #0
 8004d08:	2180      	movs	r1, #128	; 0x80
 8004d0a:	68f8      	ldr	r0, [r7, #12]
 8004d0c:	f7ff ff78 	bl	8004c00 <SPI_WaitFlagStateUntilTimeout>
 8004d10:	4603      	mov	r3, r0
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d016      	beq.n	8004d44 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d1a:	f043 0220 	orr.w	r2, r3, #32
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e00f      	b.n	8004d46 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d00a      	beq.n	8004d42 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004d2c:	697b      	ldr	r3, [r7, #20]
 8004d2e:	3b01      	subs	r3, #1
 8004d30:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b80      	cmp	r3, #128	; 0x80
 8004d3e:	d0f2      	beq.n	8004d26 <SPI_EndRxTxTransaction+0x52>
 8004d40:	e000      	b.n	8004d44 <SPI_EndRxTxTransaction+0x70>
        break;
 8004d42:	bf00      	nop
  }

  return HAL_OK;
 8004d44:	2300      	movs	r3, #0
}
 8004d46:	4618      	mov	r0, r3
 8004d48:	3718      	adds	r7, #24
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	bd80      	pop	{r7, pc}
 8004d4e:	bf00      	nop
 8004d50:	200001d4 	.word	0x200001d4
 8004d54:	165e9f81 	.word	0x165e9f81

08004d58 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	b082      	sub	sp, #8
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d101      	bne.n	8004d6a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e01d      	b.n	8004da6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d70:	b2db      	uxtb	r3, r3
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d106      	bne.n	8004d84 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d7e:	6878      	ldr	r0, [r7, #4]
 8004d80:	f7fd f9f4 	bl	800216c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2202      	movs	r2, #2
 8004d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681a      	ldr	r2, [r3, #0]
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	3304      	adds	r3, #4
 8004d94:	4619      	mov	r1, r3
 8004d96:	4610      	mov	r0, r2
 8004d98:	f000 fb68 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2201      	movs	r2, #1
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004da4:	2300      	movs	r3, #0
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3708      	adds	r7, #8
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004dae:	b480      	push	{r7}
 8004db0:	b085      	sub	sp, #20
 8004db2:	af00      	add	r7, sp, #0
 8004db4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2202      	movs	r2, #2
 8004dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	689b      	ldr	r3, [r3, #8]
 8004dc4:	f003 0307 	and.w	r3, r3, #7
 8004dc8:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b06      	cmp	r3, #6
 8004dce:	d007      	beq.n	8004de0 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	681a      	ldr	r2, [r3, #0]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f042 0201 	orr.w	r2, r2, #1
 8004dde:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr

08004df6 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004df6:	b480      	push	{r7}
 8004df8:	b085      	sub	sp, #20
 8004dfa:	af00      	add	r7, sp, #0
 8004dfc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	68da      	ldr	r2, [r3, #12]
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	f003 0307 	and.w	r3, r3, #7
 8004e18:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	2b06      	cmp	r3, #6
 8004e1e:	d007      	beq.n	8004e30 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f042 0201 	orr.w	r2, r2, #1
 8004e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3714      	adds	r7, #20
 8004e36:	46bd      	mov	sp, r7
 8004e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3c:	4770      	bx	lr

08004e3e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004e3e:	b580      	push	{r7, lr}
 8004e40:	b082      	sub	sp, #8
 8004e42:	af00      	add	r7, sp, #0
 8004e44:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d101      	bne.n	8004e50 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e01d      	b.n	8004e8c <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fd f9ff 	bl	8002268 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2202      	movs	r2, #2
 8004e6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681a      	ldr	r2, [r3, #0]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	3304      	adds	r3, #4
 8004e7a:	4619      	mov	r1, r3
 8004e7c:	4610      	mov	r0, r2
 8004e7e:	f000 faf5 	bl	800546c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2201      	movs	r2, #1
 8004e86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e8a:	2300      	movs	r3, #0
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3708      	adds	r7, #8
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b084      	sub	sp, #16
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	6078      	str	r0, [r7, #4]
 8004e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	2201      	movs	r2, #1
 8004ea4:	6839      	ldr	r1, [r7, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f000 fdca 	bl	8005a40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4a15      	ldr	r2, [pc, #84]	; (8004f08 <HAL_TIM_PWM_Start+0x74>)
 8004eb2:	4293      	cmp	r3, r2
 8004eb4:	d004      	beq.n	8004ec0 <HAL_TIM_PWM_Start+0x2c>
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a14      	ldr	r2, [pc, #80]	; (8004f0c <HAL_TIM_PWM_Start+0x78>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d101      	bne.n	8004ec4 <HAL_TIM_PWM_Start+0x30>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <HAL_TIM_PWM_Start+0x32>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d007      	beq.n	8004eda <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004ed8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	689b      	ldr	r3, [r3, #8]
 8004ee0:	f003 0307 	and.w	r3, r3, #7
 8004ee4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d007      	beq.n	8004efc <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	681a      	ldr	r2, [r3, #0]
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f042 0201 	orr.w	r2, r2, #1
 8004efa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40010000 	.word	0x40010000
 8004f0c:	40010400 	.word	0x40010400

08004f10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b082      	sub	sp, #8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	691b      	ldr	r3, [r3, #16]
 8004f1e:	f003 0302 	and.w	r3, r3, #2
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d122      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	68db      	ldr	r3, [r3, #12]
 8004f2c:	f003 0302 	and.w	r3, r3, #2
 8004f30:	2b02      	cmp	r3, #2
 8004f32:	d11b      	bne.n	8004f6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f06f 0202 	mvn.w	r2, #2
 8004f3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2201      	movs	r2, #1
 8004f42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	f003 0303 	and.w	r3, r3, #3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d003      	beq.n	8004f5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004f52:	6878      	ldr	r0, [r7, #4]
 8004f54:	f000 fa6b 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 8004f58:	e005      	b.n	8004f66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f000 fa5d 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004f60:	6878      	ldr	r0, [r7, #4]
 8004f62:	f000 fa6e 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	f003 0304 	and.w	r3, r3, #4
 8004f76:	2b04      	cmp	r3, #4
 8004f78:	d122      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	68db      	ldr	r3, [r3, #12]
 8004f80:	f003 0304 	and.w	r3, r3, #4
 8004f84:	2b04      	cmp	r3, #4
 8004f86:	d11b      	bne.n	8004fc0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f06f 0204 	mvn.w	r2, #4
 8004f90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	2202      	movs	r2, #2
 8004f96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	699b      	ldr	r3, [r3, #24]
 8004f9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d003      	beq.n	8004fae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 fa41 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 8004fac:	e005      	b.n	8004fba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 fa33 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 fa44 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	691b      	ldr	r3, [r3, #16]
 8004fc6:	f003 0308 	and.w	r3, r3, #8
 8004fca:	2b08      	cmp	r3, #8
 8004fcc:	d122      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	68db      	ldr	r3, [r3, #12]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b08      	cmp	r3, #8
 8004fda:	d11b      	bne.n	8005014 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f06f 0208 	mvn.w	r2, #8
 8004fe4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2204      	movs	r2, #4
 8004fea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	69db      	ldr	r3, [r3, #28]
 8004ff2:	f003 0303 	and.w	r3, r3, #3
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d003      	beq.n	8005002 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004ffa:	6878      	ldr	r0, [r7, #4]
 8004ffc:	f000 fa17 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 8005000:	e005      	b.n	800500e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005002:	6878      	ldr	r0, [r7, #4]
 8005004:	f000 fa09 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005008:	6878      	ldr	r0, [r7, #4]
 800500a:	f000 fa1a 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	2200      	movs	r2, #0
 8005012:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	f003 0310 	and.w	r3, r3, #16
 800501e:	2b10      	cmp	r3, #16
 8005020:	d122      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	68db      	ldr	r3, [r3, #12]
 8005028:	f003 0310 	and.w	r3, r3, #16
 800502c:	2b10      	cmp	r3, #16
 800502e:	d11b      	bne.n	8005068 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f06f 0210 	mvn.w	r2, #16
 8005038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	2208      	movs	r2, #8
 800503e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	69db      	ldr	r3, [r3, #28]
 8005046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800504a:	2b00      	cmp	r3, #0
 800504c:	d003      	beq.n	8005056 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 f9ed 	bl	800542e <HAL_TIM_IC_CaptureCallback>
 8005054:	e005      	b.n	8005062 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005056:	6878      	ldr	r0, [r7, #4]
 8005058:	f000 f9df 	bl	800541a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f9f0 	bl	8005442 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	2200      	movs	r2, #0
 8005066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	691b      	ldr	r3, [r3, #16]
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10e      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b01      	cmp	r3, #1
 8005082:	d107      	bne.n	8005094 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	f06f 0201 	mvn.w	r2, #1
 800508c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800508e:	6878      	ldr	r0, [r7, #4]
 8005090:	f7fc fa88 	bl	80015a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	691b      	ldr	r3, [r3, #16]
 800509a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800509e:	2b80      	cmp	r3, #128	; 0x80
 80050a0:	d10e      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	68db      	ldr	r3, [r3, #12]
 80050a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ac:	2b80      	cmp	r3, #128	; 0x80
 80050ae:	d107      	bne.n	80050c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80050b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fdbe 	bl	8005c3c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	691b      	ldr	r3, [r3, #16]
 80050c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ca:	2b40      	cmp	r3, #64	; 0x40
 80050cc:	d10e      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	68db      	ldr	r3, [r3, #12]
 80050d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050d8:	2b40      	cmp	r3, #64	; 0x40
 80050da:	d107      	bne.n	80050ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80050e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80050e6:	6878      	ldr	r0, [r7, #4]
 80050e8:	f000 f9b5 	bl	8005456 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	691b      	ldr	r3, [r3, #16]
 80050f2:	f003 0320 	and.w	r3, r3, #32
 80050f6:	2b20      	cmp	r3, #32
 80050f8:	d10e      	bne.n	8005118 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	68db      	ldr	r3, [r3, #12]
 8005100:	f003 0320 	and.w	r3, r3, #32
 8005104:	2b20      	cmp	r3, #32
 8005106:	d107      	bne.n	8005118 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	f06f 0220 	mvn.w	r2, #32
 8005110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005112:	6878      	ldr	r0, [r7, #4]
 8005114:	f000 fd88 	bl	8005c28 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005118:	bf00      	nop
 800511a:	3708      	adds	r7, #8
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}

08005120 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	60f8      	str	r0, [r7, #12]
 8005128:	60b9      	str	r1, [r7, #8]
 800512a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005132:	2b01      	cmp	r3, #1
 8005134:	d101      	bne.n	800513a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005136:	2302      	movs	r3, #2
 8005138:	e0b4      	b.n	80052a4 <HAL_TIM_PWM_ConfigChannel+0x184>
 800513a:	68fb      	ldr	r3, [r7, #12]
 800513c:	2201      	movs	r2, #1
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	2202      	movs	r2, #2
 8005146:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2b0c      	cmp	r3, #12
 800514e:	f200 809f 	bhi.w	8005290 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005152:	a201      	add	r2, pc, #4	; (adr r2, 8005158 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005158:	0800518d 	.word	0x0800518d
 800515c:	08005291 	.word	0x08005291
 8005160:	08005291 	.word	0x08005291
 8005164:	08005291 	.word	0x08005291
 8005168:	080051cd 	.word	0x080051cd
 800516c:	08005291 	.word	0x08005291
 8005170:	08005291 	.word	0x08005291
 8005174:	08005291 	.word	0x08005291
 8005178:	0800520f 	.word	0x0800520f
 800517c:	08005291 	.word	0x08005291
 8005180:	08005291 	.word	0x08005291
 8005184:	08005291 	.word	0x08005291
 8005188:	0800524f 	.word	0x0800524f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	68b9      	ldr	r1, [r7, #8]
 8005192:	4618      	mov	r0, r3
 8005194:	f000 fa0a 	bl	80055ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	699a      	ldr	r2, [r3, #24]
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	f042 0208 	orr.w	r2, r2, #8
 80051a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	699a      	ldr	r2, [r3, #24]
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	f022 0204 	bic.w	r2, r2, #4
 80051b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	6999      	ldr	r1, [r3, #24]
 80051be:	68bb      	ldr	r3, [r7, #8]
 80051c0:	691a      	ldr	r2, [r3, #16]
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	430a      	orrs	r2, r1
 80051c8:	619a      	str	r2, [r3, #24]
      break;
 80051ca:	e062      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	68b9      	ldr	r1, [r7, #8]
 80051d2:	4618      	mov	r0, r3
 80051d4:	f000 fa5a 	bl	800568c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	699a      	ldr	r2, [r3, #24]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80051e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	699a      	ldr	r2, [r3, #24]
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	6999      	ldr	r1, [r3, #24]
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	691b      	ldr	r3, [r3, #16]
 8005202:	021a      	lsls	r2, r3, #8
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	430a      	orrs	r2, r1
 800520a:	619a      	str	r2, [r3, #24]
      break;
 800520c:	e041      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	68b9      	ldr	r1, [r7, #8]
 8005214:	4618      	mov	r0, r3
 8005216:	f000 faaf 	bl	8005778 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	69da      	ldr	r2, [r3, #28]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f042 0208 	orr.w	r2, r2, #8
 8005228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	69da      	ldr	r2, [r3, #28]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	f022 0204 	bic.w	r2, r2, #4
 8005238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	69d9      	ldr	r1, [r3, #28]
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	691a      	ldr	r2, [r3, #16]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	430a      	orrs	r2, r1
 800524a:	61da      	str	r2, [r3, #28]
      break;
 800524c:	e021      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	68b9      	ldr	r1, [r7, #8]
 8005254:	4618      	mov	r0, r3
 8005256:	f000 fb03 	bl	8005860 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	69da      	ldr	r2, [r3, #28]
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	69da      	ldr	r2, [r3, #28]
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	69d9      	ldr	r1, [r3, #28]
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	021a      	lsls	r2, r3, #8
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	430a      	orrs	r2, r1
 800528c:	61da      	str	r2, [r3, #28]
      break;
 800528e:	e000      	b.n	8005292 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005290:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	2201      	movs	r2, #1
 8005296:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3710      	adds	r7, #16
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b084      	sub	sp, #16
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
 80052b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052bc:	2b01      	cmp	r3, #1
 80052be:	d101      	bne.n	80052c4 <HAL_TIM_ConfigClockSource+0x18>
 80052c0:	2302      	movs	r3, #2
 80052c2:	e0a6      	b.n	8005412 <HAL_TIM_ConfigClockSource+0x166>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	2201      	movs	r2, #1
 80052c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	2202      	movs	r2, #2
 80052d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	689b      	ldr	r3, [r3, #8]
 80052da:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80052e2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052ea:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	68fa      	ldr	r2, [r7, #12]
 80052f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80052f4:	683b      	ldr	r3, [r7, #0]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	2b40      	cmp	r3, #64	; 0x40
 80052fa:	d067      	beq.n	80053cc <HAL_TIM_ConfigClockSource+0x120>
 80052fc:	2b40      	cmp	r3, #64	; 0x40
 80052fe:	d80b      	bhi.n	8005318 <HAL_TIM_ConfigClockSource+0x6c>
 8005300:	2b10      	cmp	r3, #16
 8005302:	d073      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0x140>
 8005304:	2b10      	cmp	r3, #16
 8005306:	d802      	bhi.n	800530e <HAL_TIM_ConfigClockSource+0x62>
 8005308:	2b00      	cmp	r3, #0
 800530a:	d06f      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800530c:	e078      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800530e:	2b20      	cmp	r3, #32
 8005310:	d06c      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0x140>
 8005312:	2b30      	cmp	r3, #48	; 0x30
 8005314:	d06a      	beq.n	80053ec <HAL_TIM_ConfigClockSource+0x140>
      break;
 8005316:	e073      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8005318:	2b70      	cmp	r3, #112	; 0x70
 800531a:	d00d      	beq.n	8005338 <HAL_TIM_ConfigClockSource+0x8c>
 800531c:	2b70      	cmp	r3, #112	; 0x70
 800531e:	d804      	bhi.n	800532a <HAL_TIM_ConfigClockSource+0x7e>
 8005320:	2b50      	cmp	r3, #80	; 0x50
 8005322:	d033      	beq.n	800538c <HAL_TIM_ConfigClockSource+0xe0>
 8005324:	2b60      	cmp	r3, #96	; 0x60
 8005326:	d041      	beq.n	80053ac <HAL_TIM_ConfigClockSource+0x100>
      break;
 8005328:	e06a      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800532a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800532e:	d066      	beq.n	80053fe <HAL_TIM_ConfigClockSource+0x152>
 8005330:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005334:	d017      	beq.n	8005366 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8005336:	e063      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6818      	ldr	r0, [r3, #0]
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6899      	ldr	r1, [r3, #8]
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685a      	ldr	r2, [r3, #4]
 8005344:	683b      	ldr	r3, [r7, #0]
 8005346:	68db      	ldr	r3, [r3, #12]
 8005348:	f000 fb5a 	bl	8005a00 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800535a:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	609a      	str	r2, [r3, #8]
      break;
 8005364:	e04c      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6818      	ldr	r0, [r3, #0]
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	6899      	ldr	r1, [r3, #8]
 800536e:	683b      	ldr	r3, [r7, #0]
 8005370:	685a      	ldr	r2, [r3, #4]
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	68db      	ldr	r3, [r3, #12]
 8005376:	f000 fb43 	bl	8005a00 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	689a      	ldr	r2, [r3, #8]
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005388:	609a      	str	r2, [r3, #8]
      break;
 800538a:	e039      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	6818      	ldr	r0, [r3, #0]
 8005390:	683b      	ldr	r3, [r7, #0]
 8005392:	6859      	ldr	r1, [r3, #4]
 8005394:	683b      	ldr	r3, [r7, #0]
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	461a      	mov	r2, r3
 800539a:	f000 fab7 	bl	800590c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2150      	movs	r1, #80	; 0x50
 80053a4:	4618      	mov	r0, r3
 80053a6:	f000 fb10 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 80053aa:	e029      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	6818      	ldr	r0, [r3, #0]
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	6859      	ldr	r1, [r3, #4]
 80053b4:	683b      	ldr	r3, [r7, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	461a      	mov	r2, r3
 80053ba:	f000 fad6 	bl	800596a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	2160      	movs	r1, #96	; 0x60
 80053c4:	4618      	mov	r0, r3
 80053c6:	f000 fb00 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 80053ca:	e019      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	6818      	ldr	r0, [r3, #0]
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	6859      	ldr	r1, [r3, #4]
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	68db      	ldr	r3, [r3, #12]
 80053d8:	461a      	mov	r2, r3
 80053da:	f000 fa97 	bl	800590c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	2140      	movs	r1, #64	; 0x40
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 faf0 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 80053ea:	e009      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681a      	ldr	r2, [r3, #0]
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	4619      	mov	r1, r3
 80053f6:	4610      	mov	r0, r2
 80053f8:	f000 fae7 	bl	80059ca <TIM_ITRx_SetConfig>
      break;
 80053fc:	e000      	b.n	8005400 <HAL_TIM_ConfigClockSource+0x154>
      break;
 80053fe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	2201      	movs	r2, #1
 8005404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2200      	movs	r2, #0
 800540c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005410:	2300      	movs	r3, #0
}
 8005412:	4618      	mov	r0, r3
 8005414:	3710      	adds	r7, #16
 8005416:	46bd      	mov	sp, r7
 8005418:	bd80      	pop	{r7, pc}

0800541a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800541a:	b480      	push	{r7}
 800541c:	b083      	sub	sp, #12
 800541e:	af00      	add	r7, sp, #0
 8005420:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005422:	bf00      	nop
 8005424:	370c      	adds	r7, #12
 8005426:	46bd      	mov	sp, r7
 8005428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800542c:	4770      	bx	lr

0800542e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800542e:	b480      	push	{r7}
 8005430:	b083      	sub	sp, #12
 8005432:	af00      	add	r7, sp, #0
 8005434:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005436:	bf00      	nop
 8005438:	370c      	adds	r7, #12
 800543a:	46bd      	mov	sp, r7
 800543c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005440:	4770      	bx	lr

08005442 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005442:	b480      	push	{r7}
 8005444:	b083      	sub	sp, #12
 8005446:	af00      	add	r7, sp, #0
 8005448:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800544a:	bf00      	nop
 800544c:	370c      	adds	r7, #12
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005456:	b480      	push	{r7}
 8005458:	b083      	sub	sp, #12
 800545a:	af00      	add	r7, sp, #0
 800545c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800545e:	bf00      	nop
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
	...

0800546c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800546c:	b480      	push	{r7}
 800546e:	b085      	sub	sp, #20
 8005470:	af00      	add	r7, sp, #0
 8005472:	6078      	str	r0, [r7, #4]
 8005474:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	4a40      	ldr	r2, [pc, #256]	; (8005580 <TIM_Base_SetConfig+0x114>)
 8005480:	4293      	cmp	r3, r2
 8005482:	d013      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800548a:	d00f      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	4a3d      	ldr	r2, [pc, #244]	; (8005584 <TIM_Base_SetConfig+0x118>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00b      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	4a3c      	ldr	r2, [pc, #240]	; (8005588 <TIM_Base_SetConfig+0x11c>)
 8005498:	4293      	cmp	r3, r2
 800549a:	d007      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	4a3b      	ldr	r2, [pc, #236]	; (800558c <TIM_Base_SetConfig+0x120>)
 80054a0:	4293      	cmp	r3, r2
 80054a2:	d003      	beq.n	80054ac <TIM_Base_SetConfig+0x40>
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a3a      	ldr	r2, [pc, #232]	; (8005590 <TIM_Base_SetConfig+0x124>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d108      	bne.n	80054be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80054b4:	683b      	ldr	r3, [r7, #0]
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	68fa      	ldr	r2, [r7, #12]
 80054ba:	4313      	orrs	r3, r2
 80054bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	4a2f      	ldr	r2, [pc, #188]	; (8005580 <TIM_Base_SetConfig+0x114>)
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d02b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054cc:	d027      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	4a2c      	ldr	r2, [pc, #176]	; (8005584 <TIM_Base_SetConfig+0x118>)
 80054d2:	4293      	cmp	r3, r2
 80054d4:	d023      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	4a2b      	ldr	r2, [pc, #172]	; (8005588 <TIM_Base_SetConfig+0x11c>)
 80054da:	4293      	cmp	r3, r2
 80054dc:	d01f      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	4a2a      	ldr	r2, [pc, #168]	; (800558c <TIM_Base_SetConfig+0x120>)
 80054e2:	4293      	cmp	r3, r2
 80054e4:	d01b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	4a29      	ldr	r2, [pc, #164]	; (8005590 <TIM_Base_SetConfig+0x124>)
 80054ea:	4293      	cmp	r3, r2
 80054ec:	d017      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	4a28      	ldr	r2, [pc, #160]	; (8005594 <TIM_Base_SetConfig+0x128>)
 80054f2:	4293      	cmp	r3, r2
 80054f4:	d013      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	4a27      	ldr	r2, [pc, #156]	; (8005598 <TIM_Base_SetConfig+0x12c>)
 80054fa:	4293      	cmp	r3, r2
 80054fc:	d00f      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	4a26      	ldr	r2, [pc, #152]	; (800559c <TIM_Base_SetConfig+0x130>)
 8005502:	4293      	cmp	r3, r2
 8005504:	d00b      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4a25      	ldr	r2, [pc, #148]	; (80055a0 <TIM_Base_SetConfig+0x134>)
 800550a:	4293      	cmp	r3, r2
 800550c:	d007      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	4a24      	ldr	r2, [pc, #144]	; (80055a4 <TIM_Base_SetConfig+0x138>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d003      	beq.n	800551e <TIM_Base_SetConfig+0xb2>
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	4a23      	ldr	r2, [pc, #140]	; (80055a8 <TIM_Base_SetConfig+0x13c>)
 800551a:	4293      	cmp	r3, r2
 800551c:	d108      	bne.n	8005530 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005524:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	68fa      	ldr	r2, [r7, #12]
 800552c:	4313      	orrs	r3, r2
 800552e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	695b      	ldr	r3, [r3, #20]
 800553a:	4313      	orrs	r3, r2
 800553c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005544:	683b      	ldr	r3, [r7, #0]
 8005546:	689a      	ldr	r2, [r3, #8]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800554c:	683b      	ldr	r3, [r7, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	4a0a      	ldr	r2, [pc, #40]	; (8005580 <TIM_Base_SetConfig+0x114>)
 8005558:	4293      	cmp	r3, r2
 800555a:	d003      	beq.n	8005564 <TIM_Base_SetConfig+0xf8>
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	4a0c      	ldr	r2, [pc, #48]	; (8005590 <TIM_Base_SetConfig+0x124>)
 8005560:	4293      	cmp	r3, r2
 8005562:	d103      	bne.n	800556c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005564:	683b      	ldr	r3, [r7, #0]
 8005566:	691a      	ldr	r2, [r3, #16]
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2201      	movs	r2, #1
 8005570:	615a      	str	r2, [r3, #20]
}
 8005572:	bf00      	nop
 8005574:	3714      	adds	r7, #20
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	40010000 	.word	0x40010000
 8005584:	40000400 	.word	0x40000400
 8005588:	40000800 	.word	0x40000800
 800558c:	40000c00 	.word	0x40000c00
 8005590:	40010400 	.word	0x40010400
 8005594:	40014000 	.word	0x40014000
 8005598:	40014400 	.word	0x40014400
 800559c:	40014800 	.word	0x40014800
 80055a0:	40001800 	.word	0x40001800
 80055a4:	40001c00 	.word	0x40001c00
 80055a8:	40002000 	.word	0x40002000

080055ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b087      	sub	sp, #28
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	6a1b      	ldr	r3, [r3, #32]
 80055ba:	f023 0201 	bic.w	r2, r3, #1
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	6a1b      	ldr	r3, [r3, #32]
 80055c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	685b      	ldr	r3, [r3, #4]
 80055cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	699b      	ldr	r3, [r3, #24]
 80055d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80055da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	f023 0303 	bic.w	r3, r3, #3
 80055e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80055e4:	683b      	ldr	r3, [r7, #0]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	68fa      	ldr	r2, [r7, #12]
 80055ea:	4313      	orrs	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80055ee:	697b      	ldr	r3, [r7, #20]
 80055f0:	f023 0302 	bic.w	r3, r3, #2
 80055f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	689b      	ldr	r3, [r3, #8]
 80055fa:	697a      	ldr	r2, [r7, #20]
 80055fc:	4313      	orrs	r3, r2
 80055fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	4a20      	ldr	r2, [pc, #128]	; (8005684 <TIM_OC1_SetConfig+0xd8>)
 8005604:	4293      	cmp	r3, r2
 8005606:	d003      	beq.n	8005610 <TIM_OC1_SetConfig+0x64>
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	4a1f      	ldr	r2, [pc, #124]	; (8005688 <TIM_OC1_SetConfig+0xdc>)
 800560c:	4293      	cmp	r3, r2
 800560e:	d10c      	bne.n	800562a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005610:	697b      	ldr	r3, [r7, #20]
 8005612:	f023 0308 	bic.w	r3, r3, #8
 8005616:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005618:	683b      	ldr	r3, [r7, #0]
 800561a:	68db      	ldr	r3, [r3, #12]
 800561c:	697a      	ldr	r2, [r7, #20]
 800561e:	4313      	orrs	r3, r2
 8005620:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005622:	697b      	ldr	r3, [r7, #20]
 8005624:	f023 0304 	bic.w	r3, r3, #4
 8005628:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	4a15      	ldr	r2, [pc, #84]	; (8005684 <TIM_OC1_SetConfig+0xd8>)
 800562e:	4293      	cmp	r3, r2
 8005630:	d003      	beq.n	800563a <TIM_OC1_SetConfig+0x8e>
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	4a14      	ldr	r2, [pc, #80]	; (8005688 <TIM_OC1_SetConfig+0xdc>)
 8005636:	4293      	cmp	r3, r2
 8005638:	d111      	bne.n	800565e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800563a:	693b      	ldr	r3, [r7, #16]
 800563c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005640:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005648:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	693a      	ldr	r2, [r7, #16]
 8005650:	4313      	orrs	r3, r2
 8005652:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	699b      	ldr	r3, [r3, #24]
 8005658:	693a      	ldr	r2, [r7, #16]
 800565a:	4313      	orrs	r3, r2
 800565c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	693a      	ldr	r2, [r7, #16]
 8005662:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	685a      	ldr	r2, [r3, #4]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	697a      	ldr	r2, [r7, #20]
 8005676:	621a      	str	r2, [r3, #32]
}
 8005678:	bf00      	nop
 800567a:	371c      	adds	r7, #28
 800567c:	46bd      	mov	sp, r7
 800567e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005682:	4770      	bx	lr
 8005684:	40010000 	.word	0x40010000
 8005688:	40010400 	.word	0x40010400

0800568c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800568c:	b480      	push	{r7}
 800568e:	b087      	sub	sp, #28
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
 8005694:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	6a1b      	ldr	r3, [r3, #32]
 800569a:	f023 0210 	bic.w	r2, r3, #16
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6a1b      	ldr	r3, [r3, #32]
 80056a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	685b      	ldr	r3, [r3, #4]
 80056ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	699b      	ldr	r3, [r3, #24]
 80056b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80056ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80056c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	021b      	lsls	r3, r3, #8
 80056ca:	68fa      	ldr	r2, [r7, #12]
 80056cc:	4313      	orrs	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80056d0:	697b      	ldr	r3, [r7, #20]
 80056d2:	f023 0320 	bic.w	r3, r3, #32
 80056d6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	011b      	lsls	r3, r3, #4
 80056de:	697a      	ldr	r2, [r7, #20]
 80056e0:	4313      	orrs	r3, r2
 80056e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4a22      	ldr	r2, [pc, #136]	; (8005770 <TIM_OC2_SetConfig+0xe4>)
 80056e8:	4293      	cmp	r3, r2
 80056ea:	d003      	beq.n	80056f4 <TIM_OC2_SetConfig+0x68>
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	4a21      	ldr	r2, [pc, #132]	; (8005774 <TIM_OC2_SetConfig+0xe8>)
 80056f0:	4293      	cmp	r3, r2
 80056f2:	d10d      	bne.n	8005710 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80056fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80056fc:	683b      	ldr	r3, [r7, #0]
 80056fe:	68db      	ldr	r3, [r3, #12]
 8005700:	011b      	lsls	r3, r3, #4
 8005702:	697a      	ldr	r2, [r7, #20]
 8005704:	4313      	orrs	r3, r2
 8005706:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005708:	697b      	ldr	r3, [r7, #20]
 800570a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800570e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4a17      	ldr	r2, [pc, #92]	; (8005770 <TIM_OC2_SetConfig+0xe4>)
 8005714:	4293      	cmp	r3, r2
 8005716:	d003      	beq.n	8005720 <TIM_OC2_SetConfig+0x94>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4a16      	ldr	r2, [pc, #88]	; (8005774 <TIM_OC2_SetConfig+0xe8>)
 800571c:	4293      	cmp	r3, r2
 800571e:	d113      	bne.n	8005748 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005726:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800572e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	695b      	ldr	r3, [r3, #20]
 8005734:	009b      	lsls	r3, r3, #2
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	4313      	orrs	r3, r2
 800573a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	699b      	ldr	r3, [r3, #24]
 8005740:	009b      	lsls	r3, r3, #2
 8005742:	693a      	ldr	r2, [r7, #16]
 8005744:	4313      	orrs	r3, r2
 8005746:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	693a      	ldr	r2, [r7, #16]
 800574c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	68fa      	ldr	r2, [r7, #12]
 8005752:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005754:	683b      	ldr	r3, [r7, #0]
 8005756:	685a      	ldr	r2, [r3, #4]
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	697a      	ldr	r2, [r7, #20]
 8005760:	621a      	str	r2, [r3, #32]
}
 8005762:	bf00      	nop
 8005764:	371c      	adds	r7, #28
 8005766:	46bd      	mov	sp, r7
 8005768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576c:	4770      	bx	lr
 800576e:	bf00      	nop
 8005770:	40010000 	.word	0x40010000
 8005774:	40010400 	.word	0x40010400

08005778 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005778:	b480      	push	{r7}
 800577a:	b087      	sub	sp, #28
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
 8005780:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6a1b      	ldr	r3, [r3, #32]
 8005786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6a1b      	ldr	r3, [r3, #32]
 8005792:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	685b      	ldr	r3, [r3, #4]
 8005798:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	69db      	ldr	r3, [r3, #28]
 800579e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0303 	bic.w	r3, r3, #3
 80057ae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057b0:	683b      	ldr	r3, [r7, #0]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	4313      	orrs	r3, r2
 80057b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80057c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80057c2:	683b      	ldr	r3, [r7, #0]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	021b      	lsls	r3, r3, #8
 80057c8:	697a      	ldr	r2, [r7, #20]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a21      	ldr	r2, [pc, #132]	; (8005858 <TIM_OC3_SetConfig+0xe0>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d003      	beq.n	80057de <TIM_OC3_SetConfig+0x66>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a20      	ldr	r2, [pc, #128]	; (800585c <TIM_OC3_SetConfig+0xe4>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d10d      	bne.n	80057fa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80057de:	697b      	ldr	r3, [r7, #20]
 80057e0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80057e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	68db      	ldr	r3, [r3, #12]
 80057ea:	021b      	lsls	r3, r3, #8
 80057ec:	697a      	ldr	r2, [r7, #20]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80057f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a16      	ldr	r2, [pc, #88]	; (8005858 <TIM_OC3_SetConfig+0xe0>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d003      	beq.n	800580a <TIM_OC3_SetConfig+0x92>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a15      	ldr	r2, [pc, #84]	; (800585c <TIM_OC3_SetConfig+0xe4>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d113      	bne.n	8005832 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005810:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005818:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	695b      	ldr	r3, [r3, #20]
 800581e:	011b      	lsls	r3, r3, #4
 8005820:	693a      	ldr	r2, [r7, #16]
 8005822:	4313      	orrs	r3, r2
 8005824:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	699b      	ldr	r3, [r3, #24]
 800582a:	011b      	lsls	r3, r3, #4
 800582c:	693a      	ldr	r2, [r7, #16]
 800582e:	4313      	orrs	r3, r2
 8005830:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	693a      	ldr	r2, [r7, #16]
 8005836:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	68fa      	ldr	r2, [r7, #12]
 800583c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800583e:	683b      	ldr	r3, [r7, #0]
 8005840:	685a      	ldr	r2, [r3, #4]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	697a      	ldr	r2, [r7, #20]
 800584a:	621a      	str	r2, [r3, #32]
}
 800584c:	bf00      	nop
 800584e:	371c      	adds	r7, #28
 8005850:	46bd      	mov	sp, r7
 8005852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005856:	4770      	bx	lr
 8005858:	40010000 	.word	0x40010000
 800585c:	40010400 	.word	0x40010400

08005860 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005860:	b480      	push	{r7}
 8005862:	b087      	sub	sp, #28
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
 8005868:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	6a1b      	ldr	r3, [r3, #32]
 800586e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6a1b      	ldr	r3, [r3, #32]
 800587a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	685b      	ldr	r3, [r3, #4]
 8005880:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	69db      	ldr	r3, [r3, #28]
 8005886:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800588e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005896:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	681b      	ldr	r3, [r3, #0]
 800589c:	021b      	lsls	r3, r3, #8
 800589e:	68fa      	ldr	r2, [r7, #12]
 80058a0:	4313      	orrs	r3, r2
 80058a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80058a4:	693b      	ldr	r3, [r7, #16]
 80058a6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80058aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	031b      	lsls	r3, r3, #12
 80058b2:	693a      	ldr	r2, [r7, #16]
 80058b4:	4313      	orrs	r3, r2
 80058b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	4a12      	ldr	r2, [pc, #72]	; (8005904 <TIM_OC4_SetConfig+0xa4>)
 80058bc:	4293      	cmp	r3, r2
 80058be:	d003      	beq.n	80058c8 <TIM_OC4_SetConfig+0x68>
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	4a11      	ldr	r2, [pc, #68]	; (8005908 <TIM_OC4_SetConfig+0xa8>)
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d109      	bne.n	80058dc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80058c8:	697b      	ldr	r3, [r7, #20]
 80058ca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80058ce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80058d0:	683b      	ldr	r3, [r7, #0]
 80058d2:	695b      	ldr	r3, [r3, #20]
 80058d4:	019b      	lsls	r3, r3, #6
 80058d6:	697a      	ldr	r2, [r7, #20]
 80058d8:	4313      	orrs	r3, r2
 80058da:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	697a      	ldr	r2, [r7, #20]
 80058e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	68fa      	ldr	r2, [r7, #12]
 80058e6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	685a      	ldr	r2, [r3, #4]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	693a      	ldr	r2, [r7, #16]
 80058f4:	621a      	str	r2, [r3, #32]
}
 80058f6:	bf00      	nop
 80058f8:	371c      	adds	r7, #28
 80058fa:	46bd      	mov	sp, r7
 80058fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005900:	4770      	bx	lr
 8005902:	bf00      	nop
 8005904:	40010000 	.word	0x40010000
 8005908:	40010400 	.word	0x40010400

0800590c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800590c:	b480      	push	{r7}
 800590e:	b087      	sub	sp, #28
 8005910:	af00      	add	r7, sp, #0
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	6a1b      	ldr	r3, [r3, #32]
 800591c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	f023 0201 	bic.w	r2, r3, #1
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	699b      	ldr	r3, [r3, #24]
 800592e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005930:	693b      	ldr	r3, [r7, #16]
 8005932:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005936:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	011b      	lsls	r3, r3, #4
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4313      	orrs	r3, r2
 8005940:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	f023 030a 	bic.w	r3, r3, #10
 8005948:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800594a:	697a      	ldr	r2, [r7, #20]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	4313      	orrs	r3, r2
 8005950:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	693a      	ldr	r2, [r7, #16]
 8005956:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	697a      	ldr	r2, [r7, #20]
 800595c:	621a      	str	r2, [r3, #32]
}
 800595e:	bf00      	nop
 8005960:	371c      	adds	r7, #28
 8005962:	46bd      	mov	sp, r7
 8005964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005968:	4770      	bx	lr

0800596a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800596a:	b480      	push	{r7}
 800596c:	b087      	sub	sp, #28
 800596e:	af00      	add	r7, sp, #0
 8005970:	60f8      	str	r0, [r7, #12]
 8005972:	60b9      	str	r1, [r7, #8]
 8005974:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	6a1b      	ldr	r3, [r3, #32]
 800597a:	f023 0210 	bic.w	r2, r3, #16
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	699b      	ldr	r3, [r3, #24]
 8005986:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	6a1b      	ldr	r3, [r3, #32]
 800598c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800598e:	697b      	ldr	r3, [r7, #20]
 8005990:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005994:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	031b      	lsls	r3, r3, #12
 800599a:	697a      	ldr	r2, [r7, #20]
 800599c:	4313      	orrs	r3, r2
 800599e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80059a0:	693b      	ldr	r3, [r7, #16]
 80059a2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80059a6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	011b      	lsls	r3, r3, #4
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	4313      	orrs	r3, r2
 80059b0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	697a      	ldr	r2, [r7, #20]
 80059b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	693a      	ldr	r2, [r7, #16]
 80059bc:	621a      	str	r2, [r3, #32]
}
 80059be:	bf00      	nop
 80059c0:	371c      	adds	r7, #28
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80059ca:	b480      	push	{r7}
 80059cc:	b085      	sub	sp, #20
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	689b      	ldr	r3, [r3, #8]
 80059d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80059e2:	683a      	ldr	r2, [r7, #0]
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4313      	orrs	r3, r2
 80059e8:	f043 0307 	orr.w	r3, r3, #7
 80059ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	68fa      	ldr	r2, [r7, #12]
 80059f2:	609a      	str	r2, [r3, #8]
}
 80059f4:	bf00      	nop
 80059f6:	3714      	adds	r7, #20
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005a00:	b480      	push	{r7}
 8005a02:	b087      	sub	sp, #28
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	60f8      	str	r0, [r7, #12]
 8005a08:	60b9      	str	r1, [r7, #8]
 8005a0a:	607a      	str	r2, [r7, #4]
 8005a0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	689b      	ldr	r3, [r3, #8]
 8005a12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005a1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	021a      	lsls	r2, r3, #8
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	431a      	orrs	r2, r3
 8005a24:	68bb      	ldr	r3, [r7, #8]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	697a      	ldr	r2, [r7, #20]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	697a      	ldr	r2, [r7, #20]
 8005a32:	609a      	str	r2, [r3, #8]
}
 8005a34:	bf00      	nop
 8005a36:	371c      	adds	r7, #28
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b087      	sub	sp, #28
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	60f8      	str	r0, [r7, #12]
 8005a48:	60b9      	str	r1, [r7, #8]
 8005a4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005a4c:	68bb      	ldr	r3, [r7, #8]
 8005a4e:	f003 031f 	and.w	r3, r3, #31
 8005a52:	2201      	movs	r2, #1
 8005a54:	fa02 f303 	lsl.w	r3, r2, r3
 8005a58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	43db      	mvns	r3, r3
 8005a62:	401a      	ands	r2, r3
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	6a1a      	ldr	r2, [r3, #32]
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	f003 031f 	and.w	r3, r3, #31
 8005a72:	6879      	ldr	r1, [r7, #4]
 8005a74:	fa01 f303 	lsl.w	r3, r1, r3
 8005a78:	431a      	orrs	r2, r3
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	621a      	str	r2, [r3, #32]
}
 8005a7e:	bf00      	nop
 8005a80:	371c      	adds	r7, #28
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
	...

08005a8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d101      	bne.n	8005aa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005aa0:	2302      	movs	r3, #2
 8005aa2:	e05a      	b.n	8005b5a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	2202      	movs	r2, #2
 8005ab0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	685b      	ldr	r3, [r3, #4]
 8005aba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	689b      	ldr	r3, [r3, #8]
 8005ac2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005aca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005acc:	683b      	ldr	r3, [r7, #0]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	68fa      	ldr	r2, [r7, #12]
 8005ad2:	4313      	orrs	r3, r2
 8005ad4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	68fa      	ldr	r2, [r7, #12]
 8005adc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	4a21      	ldr	r2, [pc, #132]	; (8005b68 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d022      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005af0:	d01d      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	4a1d      	ldr	r2, [pc, #116]	; (8005b6c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005af8:	4293      	cmp	r3, r2
 8005afa:	d018      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a1b      	ldr	r2, [pc, #108]	; (8005b70 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d013      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	4a1a      	ldr	r2, [pc, #104]	; (8005b74 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005b0c:	4293      	cmp	r3, r2
 8005b0e:	d00e      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a18      	ldr	r2, [pc, #96]	; (8005b78 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d009      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	4a17      	ldr	r2, [pc, #92]	; (8005b7c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d004      	beq.n	8005b2e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a15      	ldr	r2, [pc, #84]	; (8005b80 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d10c      	bne.n	8005b48 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b34:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	68ba      	ldr	r2, [r7, #8]
 8005b3c:	4313      	orrs	r3, r2
 8005b3e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	68ba      	ldr	r2, [r7, #8]
 8005b46:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2200      	movs	r2, #0
 8005b54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b58:	2300      	movs	r3, #0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3714      	adds	r7, #20
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b64:	4770      	bx	lr
 8005b66:	bf00      	nop
 8005b68:	40010000 	.word	0x40010000
 8005b6c:	40000400 	.word	0x40000400
 8005b70:	40000800 	.word	0x40000800
 8005b74:	40000c00 	.word	0x40000c00
 8005b78:	40010400 	.word	0x40010400
 8005b7c:	40014000 	.word	0x40014000
 8005b80:	40001800 	.word	0x40001800

08005b84 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b085      	sub	sp, #20
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
 8005b8c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b98:	2b01      	cmp	r3, #1
 8005b9a:	d101      	bne.n	8005ba0 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005b9c:	2302      	movs	r3, #2
 8005b9e:	e03d      	b.n	8005c1c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	68db      	ldr	r3, [r3, #12]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	685b      	ldr	r3, [r3, #4]
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	4313      	orrs	r3, r2
 8005bde:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	695b      	ldr	r3, [r3, #20]
 8005bf8:	4313      	orrs	r3, r2
 8005bfa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	69db      	ldr	r3, [r3, #28]
 8005c06:	4313      	orrs	r3, r2
 8005c08:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005c1a:	2300      	movs	r3, #0
}
 8005c1c:	4618      	mov	r0, r3
 8005c1e:	3714      	adds	r7, #20
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005c3c:	b480      	push	{r7}
 8005c3e:	b083      	sub	sp, #12
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c50:	b580      	push	{r7, lr}
 8005c52:	b082      	sub	sp, #8
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d101      	bne.n	8005c62 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c5e:	2301      	movs	r3, #1
 8005c60:	e03f      	b.n	8005ce2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d106      	bne.n	8005c7c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	2200      	movs	r2, #0
 8005c72:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f7fc fc4c 	bl	8002514 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2224      	movs	r2, #36	; 0x24
 8005c80:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	68da      	ldr	r2, [r3, #12]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005c92:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005c94:	6878      	ldr	r0, [r7, #4]
 8005c96:	f000 fcf5 	bl	8006684 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	691a      	ldr	r2, [r3, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ca8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	695a      	ldr	r2, [r3, #20]
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005cb8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	68da      	ldr	r2, [r3, #12]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005cc8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	2220      	movs	r2, #32
 8005cd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2220      	movs	r2, #32
 8005cdc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8005ce0:	2300      	movs	r3, #0
}
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	3708      	adds	r7, #8
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	bd80      	pop	{r7, pc}

08005cea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005cea:	b580      	push	{r7, lr}
 8005cec:	b088      	sub	sp, #32
 8005cee:	af02      	add	r7, sp, #8
 8005cf0:	60f8      	str	r0, [r7, #12]
 8005cf2:	60b9      	str	r1, [r7, #8]
 8005cf4:	603b      	str	r3, [r7, #0]
 8005cf6:	4613      	mov	r3, r2
 8005cf8:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005d04:	b2db      	uxtb	r3, r3
 8005d06:	2b20      	cmp	r3, #32
 8005d08:	f040 8083 	bne.w	8005e12 <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d0c:	68bb      	ldr	r3, [r7, #8]
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d002      	beq.n	8005d18 <HAL_UART_Transmit+0x2e>
 8005d12:	88fb      	ldrh	r3, [r7, #6]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d101      	bne.n	8005d1c <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 8005d18:	2301      	movs	r3, #1
 8005d1a:	e07b      	b.n	8005e14 <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005d22:	2b01      	cmp	r3, #1
 8005d24:	d101      	bne.n	8005d2a <HAL_UART_Transmit+0x40>
 8005d26:	2302      	movs	r3, #2
 8005d28:	e074      	b.n	8005e14 <HAL_UART_Transmit+0x12a>
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	2221      	movs	r2, #33	; 0x21
 8005d3c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8005d40:	f7fd f800 	bl	8002d44 <HAL_GetTick>
 8005d44:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	88fa      	ldrh	r2, [r7, #6]
 8005d4a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	88fa      	ldrh	r2, [r7, #6]
 8005d50:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	2200      	movs	r2, #0
 8005d56:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 8005d5a:	e042      	b.n	8005de2 <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005d60:	b29b      	uxth	r3, r3
 8005d62:	3b01      	subs	r3, #1
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	689b      	ldr	r3, [r3, #8]
 8005d6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d72:	d122      	bne.n	8005dba <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d74:	683b      	ldr	r3, [r7, #0]
 8005d76:	9300      	str	r3, [sp, #0]
 8005d78:	697b      	ldr	r3, [r7, #20]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	2180      	movs	r1, #128	; 0x80
 8005d7e:	68f8      	ldr	r0, [r7, #12]
 8005d80:	f000 fafe 	bl	8006380 <UART_WaitOnFlagUntilTimeout>
 8005d84:	4603      	mov	r3, r0
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d001      	beq.n	8005d8e <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 8005d8a:	2303      	movs	r3, #3
 8005d8c:	e042      	b.n	8005e14 <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	881b      	ldrh	r3, [r3, #0]
 8005d96:	461a      	mov	r2, r3
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005da0:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	691b      	ldr	r3, [r3, #16]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d103      	bne.n	8005db2 <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 8005daa:	68bb      	ldr	r3, [r7, #8]
 8005dac:	3302      	adds	r3, #2
 8005dae:	60bb      	str	r3, [r7, #8]
 8005db0:	e017      	b.n	8005de2 <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 8005db2:	68bb      	ldr	r3, [r7, #8]
 8005db4:	3301      	adds	r3, #1
 8005db6:	60bb      	str	r3, [r7, #8]
 8005db8:	e013      	b.n	8005de2 <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005dba:	683b      	ldr	r3, [r7, #0]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	697b      	ldr	r3, [r7, #20]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2180      	movs	r1, #128	; 0x80
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f000 fadb 	bl	8006380 <UART_WaitOnFlagUntilTimeout>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d001      	beq.n	8005dd4 <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 8005dd0:	2303      	movs	r3, #3
 8005dd2:	e01f      	b.n	8005e14 <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	1c5a      	adds	r2, r3, #1
 8005dd8:	60ba      	str	r2, [r7, #8]
 8005dda:	781a      	ldrb	r2, [r3, #0]
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005de6:	b29b      	uxth	r3, r3
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d1b7      	bne.n	8005d5c <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	9300      	str	r3, [sp, #0]
 8005df0:	697b      	ldr	r3, [r7, #20]
 8005df2:	2200      	movs	r2, #0
 8005df4:	2140      	movs	r1, #64	; 0x40
 8005df6:	68f8      	ldr	r0, [r7, #12]
 8005df8:	f000 fac2 	bl	8006380 <UART_WaitOnFlagUntilTimeout>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d001      	beq.n	8005e06 <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 8005e02:	2303      	movs	r3, #3
 8005e04:	e006      	b.n	8005e14 <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	2220      	movs	r2, #32
 8005e0a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	e000      	b.n	8005e14 <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 8005e12:	2302      	movs	r3, #2
  }
}
 8005e14:	4618      	mov	r0, r3
 8005e16:	3718      	adds	r7, #24
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}

08005e1c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e1c:	b480      	push	{r7}
 8005e1e:	b085      	sub	sp, #20
 8005e20:	af00      	add	r7, sp, #0
 8005e22:	60f8      	str	r0, [r7, #12]
 8005e24:	60b9      	str	r1, [r7, #8]
 8005e26:	4613      	mov	r3, r2
 8005e28:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8005e30:	b2db      	uxtb	r3, r3
 8005e32:	2b20      	cmp	r3, #32
 8005e34:	d130      	bne.n	8005e98 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d002      	beq.n	8005e42 <HAL_UART_Transmit_IT+0x26>
 8005e3c:	88fb      	ldrh	r3, [r7, #6]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d101      	bne.n	8005e46 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8005e42:	2301      	movs	r3, #1
 8005e44:	e029      	b.n	8005e9a <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d101      	bne.n	8005e54 <HAL_UART_Transmit_IT+0x38>
 8005e50:	2302      	movs	r3, #2
 8005e52:	e022      	b.n	8005e9a <HAL_UART_Transmit_IT+0x7e>
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pTxBuffPtr = pData;
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	68ba      	ldr	r2, [r7, #8]
 8005e60:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	88fa      	ldrh	r2, [r7, #6]
 8005e66:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	88fa      	ldrh	r2, [r7, #6]
 8005e6c:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	2200      	movs	r2, #0
 8005e72:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	2221      	movs	r2, #33	; 0x21
 8005e78:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	68da      	ldr	r2, [r3, #12]
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005e92:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8005e94:	2300      	movs	r3, #0
 8005e96:	e000      	b.n	8005e9a <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8005e98:	2302      	movs	r3, #2
  }
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
	...

08005ea8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005ea8:	b580      	push	{r7, lr}
 8005eaa:	b086      	sub	sp, #24
 8005eac:	af00      	add	r7, sp, #0
 8005eae:	60f8      	str	r0, [r7, #12]
 8005eb0:	60b9      	str	r1, [r7, #8]
 8005eb2:	4613      	mov	r3, r2
 8005eb4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b20      	cmp	r3, #32
 8005ec0:	d166      	bne.n	8005f90 <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ec2:	68bb      	ldr	r3, [r7, #8]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <HAL_UART_Receive_DMA+0x26>
 8005ec8:	88fb      	ldrh	r3, [r7, #6]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d101      	bne.n	8005ed2 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8005ece:	2301      	movs	r3, #1
 8005ed0:	e05f      	b.n	8005f92 <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ed2:	68fb      	ldr	r3, [r7, #12]
 8005ed4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d101      	bne.n	8005ee0 <HAL_UART_Receive_DMA+0x38>
 8005edc:	2302      	movs	r3, #2
 8005ede:	e058      	b.n	8005f92 <HAL_UART_Receive_DMA+0xea>
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	2201      	movs	r2, #1
 8005ee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 8005ee8:	68ba      	ldr	r2, [r7, #8]
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	88fa      	ldrh	r2, [r7, #6]
 8005ef2:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ef4:	68fb      	ldr	r3, [r7, #12]
 8005ef6:	2200      	movs	r2, #0
 8005ef8:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2222      	movs	r2, #34	; 0x22
 8005efe:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f06:	4a25      	ldr	r2, [pc, #148]	; (8005f9c <HAL_UART_Receive_DMA+0xf4>)
 8005f08:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f0e:	4a24      	ldr	r2, [pc, #144]	; (8005fa0 <HAL_UART_Receive_DMA+0xf8>)
 8005f10:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f16:	4a23      	ldr	r2, [pc, #140]	; (8005fa4 <HAL_UART_Receive_DMA+0xfc>)
 8005f18:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8005f1a:	68fb      	ldr	r3, [r7, #12]
 8005f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f1e:	2200      	movs	r2, #0
 8005f20:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 8005f22:	f107 0308 	add.w	r3, r7, #8
 8005f26:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8005f2c:	68fb      	ldr	r3, [r7, #12]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	3304      	adds	r3, #4
 8005f32:	4619      	mov	r1, r3
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	88fb      	ldrh	r3, [r7, #6]
 8005f3a:	f7fd fb23 	bl	8003584 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 8005f3e:	2300      	movs	r3, #0
 8005f40:	613b      	str	r3, [r7, #16]
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	613b      	str	r3, [r7, #16]
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	613b      	str	r3, [r7, #16]
 8005f52:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	2200      	movs	r2, #0
 8005f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	68da      	ldr	r2, [r3, #12]
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f6a:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	695a      	ldr	r2, [r3, #20]
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f042 0201 	orr.w	r2, r2, #1
 8005f7a:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	695a      	ldr	r2, [r3, #20]
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005f8a:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	e000      	b.n	8005f92 <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 8005f90:	2302      	movs	r3, #2
  }
}
 8005f92:	4618      	mov	r0, r3
 8005f94:	3718      	adds	r7, #24
 8005f96:	46bd      	mov	sp, r7
 8005f98:	bd80      	pop	{r7, pc}
 8005f9a:	bf00      	nop
 8005f9c:	08006269 	.word	0x08006269
 8005fa0:	080062d1 	.word	0x080062d1
 8005fa4:	080062ed 	.word	0x080062ed

08005fa8 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b082      	sub	sp, #8
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68da      	ldr	r2, [r3, #12]
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	695a      	ldr	r2, [r3, #20]
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f022 0201 	bic.w	r2, r2, #1
 8005fce:	615a      	str	r2, [r3, #20]

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	695b      	ldr	r3, [r3, #20]
 8005fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fda:	2b40      	cmp	r3, #64	; 0x40
 8005fdc:	d124      	bne.n	8006028 <HAL_UART_AbortReceive+0x80>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	695a      	ldr	r2, [r3, #20]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005fec:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d018      	beq.n	8006028 <HAL_UART_AbortReceive+0x80>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006002:	4618      	mov	r0, r3
 8006004:	f7fd fb16 	bl	8003634 <HAL_DMA_Abort>
 8006008:	4603      	mov	r3, r0
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00c      	beq.n	8006028 <HAL_UART_AbortReceive+0x80>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd fd2a 	bl	8003a6c <HAL_DMA_GetError>
 8006018:	4603      	mov	r3, r0
 800601a:	2b20      	cmp	r3, #32
 800601c:	d104      	bne.n	8006028 <HAL_UART_AbortReceive+0x80>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	2210      	movs	r2, #16
 8006022:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8006024:	2303      	movs	r3, #3
 8006026:	e007      	b.n	8006038 <HAL_UART_AbortReceive+0x90>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2220      	movs	r2, #32
 8006032:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006036:	2300      	movs	r3, #0
}
 8006038:	4618      	mov	r0, r3
 800603a:	3708      	adds	r7, #8
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}

08006040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b088      	sub	sp, #32
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	695b      	ldr	r3, [r3, #20]
 800605e:	617b      	str	r3, [r7, #20]
  uint32_t errorflags = 0x00U;
 8006060:	2300      	movs	r3, #0
 8006062:	613b      	str	r3, [r7, #16]
  uint32_t dmarequest = 0x00U;
 8006064:	2300      	movs	r3, #0
 8006066:	60fb      	str	r3, [r7, #12]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006068:	69fb      	ldr	r3, [r7, #28]
 800606a:	f003 030f 	and.w	r3, r3, #15
 800606e:	613b      	str	r3, [r7, #16]
  if (errorflags == RESET)
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10d      	bne.n	8006092 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006076:	69fb      	ldr	r3, [r7, #28]
 8006078:	f003 0320 	and.w	r3, r3, #32
 800607c:	2b00      	cmp	r3, #0
 800607e:	d008      	beq.n	8006092 <HAL_UART_IRQHandler+0x52>
 8006080:	69bb      	ldr	r3, [r7, #24]
 8006082:	f003 0320 	and.w	r3, r3, #32
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f000 fa78 	bl	8006580 <UART_Receive_IT>
      return;
 8006090:	e0d1      	b.n	8006236 <HAL_UART_IRQHandler+0x1f6>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006092:	693b      	ldr	r3, [r7, #16]
 8006094:	2b00      	cmp	r3, #0
 8006096:	f000 80b0 	beq.w	80061fa <HAL_UART_IRQHandler+0x1ba>
 800609a:	697b      	ldr	r3, [r7, #20]
 800609c:	f003 0301 	and.w	r3, r3, #1
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d105      	bne.n	80060b0 <HAL_UART_IRQHandler+0x70>
 80060a4:	69bb      	ldr	r3, [r7, #24]
 80060a6:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f000 80a5 	beq.w	80061fa <HAL_UART_IRQHandler+0x1ba>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80060b0:	69fb      	ldr	r3, [r7, #28]
 80060b2:	f003 0301 	and.w	r3, r3, #1
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d00a      	beq.n	80060d0 <HAL_UART_IRQHandler+0x90>
 80060ba:	69bb      	ldr	r3, [r7, #24]
 80060bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060c8:	f043 0201 	orr.w	r2, r3, #1
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060d0:	69fb      	ldr	r3, [r7, #28]
 80060d2:	f003 0304 	and.w	r3, r3, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d00a      	beq.n	80060f0 <HAL_UART_IRQHandler+0xb0>
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f003 0301 	and.w	r3, r3, #1
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d005      	beq.n	80060f0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80060e8:	f043 0202 	orr.w	r2, r3, #2
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80060f0:	69fb      	ldr	r3, [r7, #28]
 80060f2:	f003 0302 	and.w	r3, r3, #2
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d00a      	beq.n	8006110 <HAL_UART_IRQHandler+0xd0>
 80060fa:	697b      	ldr	r3, [r7, #20]
 80060fc:	f003 0301 	and.w	r3, r3, #1
 8006100:	2b00      	cmp	r3, #0
 8006102:	d005      	beq.n	8006110 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006108:	f043 0204 	orr.w	r2, r3, #4
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006110:	69fb      	ldr	r3, [r7, #28]
 8006112:	f003 0308 	and.w	r3, r3, #8
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00f      	beq.n	800613a <HAL_UART_IRQHandler+0xfa>
 800611a:	69bb      	ldr	r3, [r7, #24]
 800611c:	f003 0320 	and.w	r3, r3, #32
 8006120:	2b00      	cmp	r3, #0
 8006122:	d104      	bne.n	800612e <HAL_UART_IRQHandler+0xee>
 8006124:	697b      	ldr	r3, [r7, #20]
 8006126:	f003 0301 	and.w	r3, r3, #1
 800612a:	2b00      	cmp	r3, #0
 800612c:	d005      	beq.n	800613a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006132:	f043 0208 	orr.w	r2, r3, #8
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	63da      	str	r2, [r3, #60]	; 0x3c
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800613e:	2b00      	cmp	r3, #0
 8006140:	d078      	beq.n	8006234 <HAL_UART_IRQHandler+0x1f4>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006142:	69fb      	ldr	r3, [r7, #28]
 8006144:	f003 0320 	and.w	r3, r3, #32
 8006148:	2b00      	cmp	r3, #0
 800614a:	d007      	beq.n	800615c <HAL_UART_IRQHandler+0x11c>
 800614c:	69bb      	ldr	r3, [r7, #24]
 800614e:	f003 0320 	and.w	r3, r3, #32
 8006152:	2b00      	cmp	r3, #0
 8006154:	d002      	beq.n	800615c <HAL_UART_IRQHandler+0x11c>
      {
        UART_Receive_IT(huart);
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f000 fa12 	bl	8006580 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	695b      	ldr	r3, [r3, #20]
 8006162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006166:	2b40      	cmp	r3, #64	; 0x40
 8006168:	bf0c      	ite	eq
 800616a:	2301      	moveq	r3, #1
 800616c:	2300      	movne	r3, #0
 800616e:	b2db      	uxtb	r3, r3
 8006170:	60fb      	str	r3, [r7, #12]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006176:	f003 0308 	and.w	r3, r3, #8
 800617a:	2b00      	cmp	r3, #0
 800617c:	d102      	bne.n	8006184 <HAL_UART_IRQHandler+0x144>
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d031      	beq.n	80061e8 <HAL_UART_IRQHandler+0x1a8>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006184:	6878      	ldr	r0, [r7, #4]
 8006186:	f000 f95b 	bl	8006440 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	695b      	ldr	r3, [r3, #20]
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b40      	cmp	r3, #64	; 0x40
 8006196:	d123      	bne.n	80061e0 <HAL_UART_IRQHandler+0x1a0>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	695a      	ldr	r2, [r3, #20]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061a6:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d013      	beq.n	80061d8 <HAL_UART_IRQHandler+0x198>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061b4:	4a21      	ldr	r2, [pc, #132]	; (800623c <HAL_UART_IRQHandler+0x1fc>)
 80061b6:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061bc:	4618      	mov	r0, r3
 80061be:	f7fd faa9 	bl	8003714 <HAL_DMA_Abort_IT>
 80061c2:	4603      	mov	r3, r0
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d016      	beq.n	80061f6 <HAL_UART_IRQHandler+0x1b6>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80061d2:	4610      	mov	r0, r2
 80061d4:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061d6:	e00e      	b.n	80061f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7fa fb63 	bl	80008a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061de:	e00a      	b.n	80061f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7fa fb5f 	bl	80008a4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061e6:	e006      	b.n	80061f6 <HAL_UART_IRQHandler+0x1b6>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80061e8:	6878      	ldr	r0, [r7, #4]
 80061ea:	f7fa fb5b 	bl	80008a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
    return;
 80061f4:	e01e      	b.n	8006234 <HAL_UART_IRQHandler+0x1f4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80061f6:	bf00      	nop
    return;
 80061f8:	e01c      	b.n	8006234 <HAL_UART_IRQHandler+0x1f4>
  } /* End if some error occurs */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80061fa:	69fb      	ldr	r3, [r7, #28]
 80061fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006200:	2b00      	cmp	r3, #0
 8006202:	d008      	beq.n	8006216 <HAL_UART_IRQHandler+0x1d6>
 8006204:	69bb      	ldr	r3, [r7, #24]
 8006206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800620a:	2b00      	cmp	r3, #0
 800620c:	d003      	beq.n	8006216 <HAL_UART_IRQHandler+0x1d6>
  {
    UART_Transmit_IT(huart);
 800620e:	6878      	ldr	r0, [r7, #4]
 8006210:	f000 f948 	bl	80064a4 <UART_Transmit_IT>
    return;
 8006214:	e00f      	b.n	8006236 <HAL_UART_IRQHandler+0x1f6>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006216:	69fb      	ldr	r3, [r7, #28]
 8006218:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800621c:	2b00      	cmp	r3, #0
 800621e:	d00a      	beq.n	8006236 <HAL_UART_IRQHandler+0x1f6>
 8006220:	69bb      	ldr	r3, [r7, #24]
 8006222:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006226:	2b00      	cmp	r3, #0
 8006228:	d005      	beq.n	8006236 <HAL_UART_IRQHandler+0x1f6>
  {
    UART_EndTransmit_IT(huart);
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 f990 	bl	8006550 <UART_EndTransmit_IT>
    return;
 8006230:	bf00      	nop
 8006232:	e000      	b.n	8006236 <HAL_UART_IRQHandler+0x1f6>
    return;
 8006234:	bf00      	nop
  }
}
 8006236:	3720      	adds	r7, #32
 8006238:	46bd      	mov	sp, r7
 800623a:	bd80      	pop	{r7, pc}
 800623c:	0800647d 	.word	0x0800647d

08006240 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006248:	bf00      	nop
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800625c:	bf00      	nop
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006274:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006280:	2b00      	cmp	r3, #0
 8006282:	d11e      	bne.n	80062c2 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2200      	movs	r2, #0
 8006288:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	68da      	ldr	r2, [r3, #12]
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006298:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	695a      	ldr	r2, [r3, #20]
 80062a0:	68fb      	ldr	r3, [r7, #12]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f022 0201 	bic.w	r2, r2, #1
 80062a8:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	695a      	ldr	r2, [r3, #20]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80062b8:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 80062c2:	68f8      	ldr	r0, [r7, #12]
 80062c4:	f7fa fade 	bl	8000884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062c8:	bf00      	nop
 80062ca:	3710      	adds	r7, #16
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b084      	sub	sp, #16
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 80062de:	68f8      	ldr	r0, [r7, #12]
 80062e0:	f7ff ffb8 	bl	8006254 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e4:	bf00      	nop
 80062e6:	3710      	adds	r7, #16
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bd80      	pop	{r7, pc}

080062ec <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b084      	sub	sp, #16
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80062f4:	2300      	movs	r3, #0
 80062f6:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062fc:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	695b      	ldr	r3, [r3, #20]
 8006304:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006308:	2b80      	cmp	r3, #128	; 0x80
 800630a:	bf0c      	ite	eq
 800630c:	2301      	moveq	r3, #1
 800630e:	2300      	movne	r3, #0
 8006310:	b2db      	uxtb	r3, r3
 8006312:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8006314:	68bb      	ldr	r3, [r7, #8]
 8006316:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800631a:	b2db      	uxtb	r3, r3
 800631c:	2b21      	cmp	r3, #33	; 0x21
 800631e:	d108      	bne.n	8006332 <UART_DMAError+0x46>
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d005      	beq.n	8006332 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	2200      	movs	r2, #0
 800632a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800632c:	68b8      	ldr	r0, [r7, #8]
 800632e:	f000 f871 	bl	8006414 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006332:	68bb      	ldr	r3, [r7, #8]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	695b      	ldr	r3, [r3, #20]
 8006338:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800633c:	2b40      	cmp	r3, #64	; 0x40
 800633e:	bf0c      	ite	eq
 8006340:	2301      	moveq	r3, #1
 8006342:	2300      	movne	r3, #0
 8006344:	b2db      	uxtb	r3, r3
 8006346:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8006348:	68bb      	ldr	r3, [r7, #8]
 800634a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b22      	cmp	r3, #34	; 0x22
 8006352:	d108      	bne.n	8006366 <UART_DMAError+0x7a>
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d005      	beq.n	8006366 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2200      	movs	r2, #0
 800635e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8006360:	68b8      	ldr	r0, [r7, #8]
 8006362:	f000 f86d 	bl	8006440 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8006366:	68bb      	ldr	r3, [r7, #8]
 8006368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800636a:	f043 0210 	orr.w	r2, r3, #16
 800636e:	68bb      	ldr	r3, [r7, #8]
 8006370:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006372:	68b8      	ldr	r0, [r7, #8]
 8006374:	f7fa fa96 	bl	80008a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}

08006380 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8006380:	b580      	push	{r7, lr}
 8006382:	b084      	sub	sp, #16
 8006384:	af00      	add	r7, sp, #0
 8006386:	60f8      	str	r0, [r7, #12]
 8006388:	60b9      	str	r1, [r7, #8]
 800638a:	603b      	str	r3, [r7, #0]
 800638c:	4613      	mov	r3, r2
 800638e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006390:	e02c      	b.n	80063ec <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006392:	69bb      	ldr	r3, [r7, #24]
 8006394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006398:	d028      	beq.n	80063ec <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800639a:	69bb      	ldr	r3, [r7, #24]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d007      	beq.n	80063b0 <UART_WaitOnFlagUntilTimeout+0x30>
 80063a0:	f7fc fcd0 	bl	8002d44 <HAL_GetTick>
 80063a4:	4602      	mov	r2, r0
 80063a6:	683b      	ldr	r3, [r7, #0]
 80063a8:	1ad3      	subs	r3, r2, r3
 80063aa:	69ba      	ldr	r2, [r7, #24]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d21d      	bcs.n	80063ec <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68da      	ldr	r2, [r3, #12]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80063be:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	695a      	ldr	r2, [r3, #20]
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2220      	movs	r2, #32
 80063d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	2220      	movs	r2, #32
 80063dc:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80063e8:	2303      	movs	r3, #3
 80063ea:	e00f      	b.n	800640c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	681a      	ldr	r2, [r3, #0]
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	4013      	ands	r3, r2
 80063f6:	68ba      	ldr	r2, [r7, #8]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	bf0c      	ite	eq
 80063fc:	2301      	moveq	r3, #1
 80063fe:	2300      	movne	r3, #0
 8006400:	b2db      	uxtb	r3, r3
 8006402:	461a      	mov	r2, r3
 8006404:	79fb      	ldrb	r3, [r7, #7]
 8006406:	429a      	cmp	r2, r3
 8006408:	d0c3      	beq.n	8006392 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800640a:	2300      	movs	r3, #0
}
 800640c:	4618      	mov	r0, r3
 800640e:	3710      	adds	r7, #16
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}

08006414 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006414:	b480      	push	{r7}
 8006416:	b083      	sub	sp, #12
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800642a:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2220      	movs	r2, #32
 8006430:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	68da      	ldr	r2, [r3, #12]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	681b      	ldr	r3, [r3, #0]
 8006452:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006456:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	695a      	ldr	r2, [r3, #20]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f022 0201 	bic.w	r2, r2, #1
 8006466:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006468:	687b      	ldr	r3, [r7, #4]
 800646a:	2220      	movs	r2, #32
 800646c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 8006470:	bf00      	nop
 8006472:	370c      	adds	r7, #12
 8006474:	46bd      	mov	sp, r7
 8006476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647a:	4770      	bx	lr

0800647c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006488:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f7fa fa04 	bl	80008a4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800649c:	bf00      	nop
 800649e:	3710      	adds	r7, #16
 80064a0:	46bd      	mov	sp, r7
 80064a2:	bd80      	pop	{r7, pc}

080064a4 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80064a4:	b480      	push	{r7}
 80064a6:	b085      	sub	sp, #20
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b21      	cmp	r3, #33	; 0x21
 80064b6:	d144      	bne.n	8006542 <UART_Transmit_IT+0x9e>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	689b      	ldr	r3, [r3, #8]
 80064bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80064c0:	d11a      	bne.n	80064f8 <UART_Transmit_IT+0x54>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	6a1b      	ldr	r3, [r3, #32]
 80064c6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	881b      	ldrh	r3, [r3, #0]
 80064cc:	461a      	mov	r2, r3
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80064d6:	605a      	str	r2, [r3, #4]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d105      	bne.n	80064ec <UART_Transmit_IT+0x48>
      {
        huart->pTxBuffPtr += 2U;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	6a1b      	ldr	r3, [r3, #32]
 80064e4:	1c9a      	adds	r2, r3, #2
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	621a      	str	r2, [r3, #32]
 80064ea:	e00e      	b.n	800650a <UART_Transmit_IT+0x66>
      }
      else
      {
        huart->pTxBuffPtr += 1U;
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	6a1b      	ldr	r3, [r3, #32]
 80064f0:	1c5a      	adds	r2, r3, #1
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	621a      	str	r2, [r3, #32]
 80064f6:	e008      	b.n	800650a <UART_Transmit_IT+0x66>
      }
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6a1b      	ldr	r3, [r3, #32]
 80064fc:	1c59      	adds	r1, r3, #1
 80064fe:	687a      	ldr	r2, [r7, #4]
 8006500:	6211      	str	r1, [r2, #32]
 8006502:	781a      	ldrb	r2, [r3, #0]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800650e:	b29b      	uxth	r3, r3
 8006510:	3b01      	subs	r3, #1
 8006512:	b29b      	uxth	r3, r3
 8006514:	687a      	ldr	r2, [r7, #4]
 8006516:	4619      	mov	r1, r3
 8006518:	84d1      	strh	r1, [r2, #38]	; 0x26
 800651a:	2b00      	cmp	r3, #0
 800651c:	d10f      	bne.n	800653e <UART_Transmit_IT+0x9a>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	68da      	ldr	r2, [r3, #12]
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800652c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	68da      	ldr	r2, [r3, #12]
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800653c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800653e:	2300      	movs	r3, #0
 8006540:	e000      	b.n	8006544 <UART_Transmit_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8006542:	2302      	movs	r3, #2
  }
}
 8006544:	4618      	mov	r0, r3
 8006546:	3714      	adds	r7, #20
 8006548:	46bd      	mov	sp, r7
 800654a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654e:	4770      	bx	lr

08006550 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006550:	b580      	push	{r7, lr}
 8006552:	b082      	sub	sp, #8
 8006554:	af00      	add	r7, sp, #0
 8006556:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	68da      	ldr	r2, [r3, #12]
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006566:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2220      	movs	r2, #32
 800656c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f7ff fe65 	bl	8006240 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006576:	2300      	movs	r3, #0
}
 8006578:	4618      	mov	r0, r3
 800657a:	3708      	adds	r7, #8
 800657c:	46bd      	mov	sp, r7
 800657e:	bd80      	pop	{r7, pc}

08006580 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b22      	cmp	r3, #34	; 0x22
 8006592:	d171      	bne.n	8006678 <UART_Receive_IT+0xf8>
  {
    if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800659c:	d123      	bne.n	80065e6 <UART_Receive_IT+0x66>
    {
      tmp = (uint16_t *) huart->pRxBuffPtr;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065a2:	60fb      	str	r3, [r7, #12]
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	691b      	ldr	r3, [r3, #16]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d10e      	bne.n	80065ca <UART_Receive_IT+0x4a>
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	685b      	ldr	r3, [r3, #4]
 80065b2:	b29b      	uxth	r3, r3
 80065b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b8:	b29a      	uxth	r2, r3
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 2U;
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065c2:	1c9a      	adds	r2, r3, #2
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	629a      	str	r2, [r3, #40]	; 0x28
 80065c8:	e029      	b.n	800661e <UART_Receive_IT+0x9e>
      }
      else
      {
        *tmp = (uint16_t)(huart->Instance->DR & (uint16_t)0x00FF);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	685b      	ldr	r3, [r3, #4]
 80065d0:	b29b      	uxth	r3, r3
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	b29a      	uxth	r2, r3
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	801a      	strh	r2, [r3, #0]
        huart->pRxBuffPtr += 1U;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065de:	1c5a      	adds	r2, r3, #1
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	629a      	str	r2, [r3, #40]	; 0x28
 80065e4:	e01b      	b.n	800661e <UART_Receive_IT+0x9e>
      }
    }
    else
    {
      if (huart->Init.Parity == UART_PARITY_NONE)
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	691b      	ldr	r3, [r3, #16]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d10a      	bne.n	8006604 <UART_Receive_IT+0x84>
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	6858      	ldr	r0, [r3, #4]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80065f8:	1c59      	adds	r1, r3, #1
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	6291      	str	r1, [r2, #40]	; 0x28
 80065fe:	b2c2      	uxtb	r2, r0
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e00c      	b.n	800661e <UART_Receive_IT+0x9e>
      }
      else
      {
        *huart->pRxBuffPtr++ = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	685b      	ldr	r3, [r3, #4]
 800660a:	b2da      	uxtb	r2, r3
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006610:	1c58      	adds	r0, r3, #1
 8006612:	6879      	ldr	r1, [r7, #4]
 8006614:	6288      	str	r0, [r1, #40]	; 0x28
 8006616:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800661a:	b2d2      	uxtb	r2, r2
 800661c:	701a      	strb	r2, [r3, #0]
      }
    }

    if (--huart->RxXferCount == 0U)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006622:	b29b      	uxth	r3, r3
 8006624:	3b01      	subs	r3, #1
 8006626:	b29b      	uxth	r3, r3
 8006628:	687a      	ldr	r2, [r7, #4]
 800662a:	4619      	mov	r1, r3
 800662c:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800662e:	2b00      	cmp	r3, #0
 8006630:	d120      	bne.n	8006674 <UART_Receive_IT+0xf4>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	68da      	ldr	r2, [r3, #12]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f022 0220 	bic.w	r2, r2, #32
 8006640:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006650:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 0201 	bic.w	r2, r2, #1
 8006660:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	2220      	movs	r2, #32
 8006666:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /*Call registered Rx complete callback*/
      huart->RxCpltCallback(huart);
#else
      /*Call legacy weak Rx complete callback*/
      HAL_UART_RxCpltCallback(huart);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f7fa f90a 	bl	8000884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

      return HAL_OK;
 8006670:	2300      	movs	r3, #0
 8006672:	e002      	b.n	800667a <UART_Receive_IT+0xfa>
    }
    return HAL_OK;
 8006674:	2300      	movs	r3, #0
 8006676:	e000      	b.n	800667a <UART_Receive_IT+0xfa>
  }
  else
  {
    return HAL_BUSY;
 8006678:	2302      	movs	r3, #2
  }
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
	...

08006684 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006688:	b085      	sub	sp, #20
 800668a:	af00      	add	r7, sp, #0
 800668c:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	691b      	ldr	r3, [r3, #16]
 8006694:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	68da      	ldr	r2, [r3, #12]
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	681b      	ldr	r3, [r3, #0]
 80066a0:	430a      	orrs	r2, r1
 80066a2:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	689a      	ldr	r2, [r3, #8]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	691b      	ldr	r3, [r3, #16]
 80066ac:	431a      	orrs	r2, r3
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	695b      	ldr	r3, [r3, #20]
 80066b2:	431a      	orrs	r2, r3
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	69db      	ldr	r3, [r3, #28]
 80066b8:	4313      	orrs	r3, r2
 80066ba:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68db      	ldr	r3, [r3, #12]
 80066c2:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 80066c6:	f023 030c 	bic.w	r3, r3, #12
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	6812      	ldr	r2, [r2, #0]
 80066ce:	68f9      	ldr	r1, [r7, #12]
 80066d0:	430b      	orrs	r3, r1
 80066d2:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	695b      	ldr	r3, [r3, #20]
 80066da:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699a      	ldr	r2, [r3, #24]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	430a      	orrs	r2, r1
 80066e8:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	69db      	ldr	r3, [r3, #28]
 80066ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066f2:	f040 818b 	bne.w	8006a0c <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4ac1      	ldr	r2, [pc, #772]	; (8006a00 <UART_SetConfig+0x37c>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d005      	beq.n	800670c <UART_SetConfig+0x88>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	4abf      	ldr	r2, [pc, #764]	; (8006a04 <UART_SetConfig+0x380>)
 8006706:	4293      	cmp	r3, r2
 8006708:	f040 80bd 	bne.w	8006886 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800670c:	f7fe f89a 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 8006710:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	461d      	mov	r5, r3
 8006716:	f04f 0600 	mov.w	r6, #0
 800671a:	46a8      	mov	r8, r5
 800671c:	46b1      	mov	r9, r6
 800671e:	eb18 0308 	adds.w	r3, r8, r8
 8006722:	eb49 0409 	adc.w	r4, r9, r9
 8006726:	4698      	mov	r8, r3
 8006728:	46a1      	mov	r9, r4
 800672a:	eb18 0805 	adds.w	r8, r8, r5
 800672e:	eb49 0906 	adc.w	r9, r9, r6
 8006732:	f04f 0100 	mov.w	r1, #0
 8006736:	f04f 0200 	mov.w	r2, #0
 800673a:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800673e:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006742:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006746:	4688      	mov	r8, r1
 8006748:	4691      	mov	r9, r2
 800674a:	eb18 0005 	adds.w	r0, r8, r5
 800674e:	eb49 0106 	adc.w	r1, r9, r6
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	685b      	ldr	r3, [r3, #4]
 8006756:	461d      	mov	r5, r3
 8006758:	f04f 0600 	mov.w	r6, #0
 800675c:	196b      	adds	r3, r5, r5
 800675e:	eb46 0406 	adc.w	r4, r6, r6
 8006762:	461a      	mov	r2, r3
 8006764:	4623      	mov	r3, r4
 8006766:	f7f9 fd2f 	bl	80001c8 <__aeabi_uldivmod>
 800676a:	4603      	mov	r3, r0
 800676c:	460c      	mov	r4, r1
 800676e:	461a      	mov	r2, r3
 8006770:	4ba5      	ldr	r3, [pc, #660]	; (8006a08 <UART_SetConfig+0x384>)
 8006772:	fba3 2302 	umull	r2, r3, r3, r2
 8006776:	095b      	lsrs	r3, r3, #5
 8006778:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800677c:	68bb      	ldr	r3, [r7, #8]
 800677e:	461d      	mov	r5, r3
 8006780:	f04f 0600 	mov.w	r6, #0
 8006784:	46a9      	mov	r9, r5
 8006786:	46b2      	mov	sl, r6
 8006788:	eb19 0309 	adds.w	r3, r9, r9
 800678c:	eb4a 040a 	adc.w	r4, sl, sl
 8006790:	4699      	mov	r9, r3
 8006792:	46a2      	mov	sl, r4
 8006794:	eb19 0905 	adds.w	r9, r9, r5
 8006798:	eb4a 0a06 	adc.w	sl, sl, r6
 800679c:	f04f 0100 	mov.w	r1, #0
 80067a0:	f04f 0200 	mov.w	r2, #0
 80067a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80067a8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80067ac:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80067b0:	4689      	mov	r9, r1
 80067b2:	4692      	mov	sl, r2
 80067b4:	eb19 0005 	adds.w	r0, r9, r5
 80067b8:	eb4a 0106 	adc.w	r1, sl, r6
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	461d      	mov	r5, r3
 80067c2:	f04f 0600 	mov.w	r6, #0
 80067c6:	196b      	adds	r3, r5, r5
 80067c8:	eb46 0406 	adc.w	r4, r6, r6
 80067cc:	461a      	mov	r2, r3
 80067ce:	4623      	mov	r3, r4
 80067d0:	f7f9 fcfa 	bl	80001c8 <__aeabi_uldivmod>
 80067d4:	4603      	mov	r3, r0
 80067d6:	460c      	mov	r4, r1
 80067d8:	461a      	mov	r2, r3
 80067da:	4b8b      	ldr	r3, [pc, #556]	; (8006a08 <UART_SetConfig+0x384>)
 80067dc:	fba3 1302 	umull	r1, r3, r3, r2
 80067e0:	095b      	lsrs	r3, r3, #5
 80067e2:	2164      	movs	r1, #100	; 0x64
 80067e4:	fb01 f303 	mul.w	r3, r1, r3
 80067e8:	1ad3      	subs	r3, r2, r3
 80067ea:	00db      	lsls	r3, r3, #3
 80067ec:	3332      	adds	r3, #50	; 0x32
 80067ee:	4a86      	ldr	r2, [pc, #536]	; (8006a08 <UART_SetConfig+0x384>)
 80067f0:	fba2 2303 	umull	r2, r3, r2, r3
 80067f4:	095b      	lsrs	r3, r3, #5
 80067f6:	005b      	lsls	r3, r3, #1
 80067f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80067fc:	4498      	add	r8, r3
 80067fe:	68bb      	ldr	r3, [r7, #8]
 8006800:	461d      	mov	r5, r3
 8006802:	f04f 0600 	mov.w	r6, #0
 8006806:	46a9      	mov	r9, r5
 8006808:	46b2      	mov	sl, r6
 800680a:	eb19 0309 	adds.w	r3, r9, r9
 800680e:	eb4a 040a 	adc.w	r4, sl, sl
 8006812:	4699      	mov	r9, r3
 8006814:	46a2      	mov	sl, r4
 8006816:	eb19 0905 	adds.w	r9, r9, r5
 800681a:	eb4a 0a06 	adc.w	sl, sl, r6
 800681e:	f04f 0100 	mov.w	r1, #0
 8006822:	f04f 0200 	mov.w	r2, #0
 8006826:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800682a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800682e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006832:	4689      	mov	r9, r1
 8006834:	4692      	mov	sl, r2
 8006836:	eb19 0005 	adds.w	r0, r9, r5
 800683a:	eb4a 0106 	adc.w	r1, sl, r6
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	685b      	ldr	r3, [r3, #4]
 8006842:	461d      	mov	r5, r3
 8006844:	f04f 0600 	mov.w	r6, #0
 8006848:	196b      	adds	r3, r5, r5
 800684a:	eb46 0406 	adc.w	r4, r6, r6
 800684e:	461a      	mov	r2, r3
 8006850:	4623      	mov	r3, r4
 8006852:	f7f9 fcb9 	bl	80001c8 <__aeabi_uldivmod>
 8006856:	4603      	mov	r3, r0
 8006858:	460c      	mov	r4, r1
 800685a:	461a      	mov	r2, r3
 800685c:	4b6a      	ldr	r3, [pc, #424]	; (8006a08 <UART_SetConfig+0x384>)
 800685e:	fba3 1302 	umull	r1, r3, r3, r2
 8006862:	095b      	lsrs	r3, r3, #5
 8006864:	2164      	movs	r1, #100	; 0x64
 8006866:	fb01 f303 	mul.w	r3, r1, r3
 800686a:	1ad3      	subs	r3, r2, r3
 800686c:	00db      	lsls	r3, r3, #3
 800686e:	3332      	adds	r3, #50	; 0x32
 8006870:	4a65      	ldr	r2, [pc, #404]	; (8006a08 <UART_SetConfig+0x384>)
 8006872:	fba2 2303 	umull	r2, r3, r2, r3
 8006876:	095b      	lsrs	r3, r3, #5
 8006878:	f003 0207 	and.w	r2, r3, #7
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4442      	add	r2, r8
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	e26f      	b.n	8006d66 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006886:	f7fd ffc9 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 800688a:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800688c:	68bb      	ldr	r3, [r7, #8]
 800688e:	461d      	mov	r5, r3
 8006890:	f04f 0600 	mov.w	r6, #0
 8006894:	46a8      	mov	r8, r5
 8006896:	46b1      	mov	r9, r6
 8006898:	eb18 0308 	adds.w	r3, r8, r8
 800689c:	eb49 0409 	adc.w	r4, r9, r9
 80068a0:	4698      	mov	r8, r3
 80068a2:	46a1      	mov	r9, r4
 80068a4:	eb18 0805 	adds.w	r8, r8, r5
 80068a8:	eb49 0906 	adc.w	r9, r9, r6
 80068ac:	f04f 0100 	mov.w	r1, #0
 80068b0:	f04f 0200 	mov.w	r2, #0
 80068b4:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 80068b8:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 80068bc:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 80068c0:	4688      	mov	r8, r1
 80068c2:	4691      	mov	r9, r2
 80068c4:	eb18 0005 	adds.w	r0, r8, r5
 80068c8:	eb49 0106 	adc.w	r1, r9, r6
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	685b      	ldr	r3, [r3, #4]
 80068d0:	461d      	mov	r5, r3
 80068d2:	f04f 0600 	mov.w	r6, #0
 80068d6:	196b      	adds	r3, r5, r5
 80068d8:	eb46 0406 	adc.w	r4, r6, r6
 80068dc:	461a      	mov	r2, r3
 80068de:	4623      	mov	r3, r4
 80068e0:	f7f9 fc72 	bl	80001c8 <__aeabi_uldivmod>
 80068e4:	4603      	mov	r3, r0
 80068e6:	460c      	mov	r4, r1
 80068e8:	461a      	mov	r2, r3
 80068ea:	4b47      	ldr	r3, [pc, #284]	; (8006a08 <UART_SetConfig+0x384>)
 80068ec:	fba3 2302 	umull	r2, r3, r3, r2
 80068f0:	095b      	lsrs	r3, r3, #5
 80068f2:	ea4f 1803 	mov.w	r8, r3, lsl #4
 80068f6:	68bb      	ldr	r3, [r7, #8]
 80068f8:	461d      	mov	r5, r3
 80068fa:	f04f 0600 	mov.w	r6, #0
 80068fe:	46a9      	mov	r9, r5
 8006900:	46b2      	mov	sl, r6
 8006902:	eb19 0309 	adds.w	r3, r9, r9
 8006906:	eb4a 040a 	adc.w	r4, sl, sl
 800690a:	4699      	mov	r9, r3
 800690c:	46a2      	mov	sl, r4
 800690e:	eb19 0905 	adds.w	r9, r9, r5
 8006912:	eb4a 0a06 	adc.w	sl, sl, r6
 8006916:	f04f 0100 	mov.w	r1, #0
 800691a:	f04f 0200 	mov.w	r2, #0
 800691e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006922:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006926:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800692a:	4689      	mov	r9, r1
 800692c:	4692      	mov	sl, r2
 800692e:	eb19 0005 	adds.w	r0, r9, r5
 8006932:	eb4a 0106 	adc.w	r1, sl, r6
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	685b      	ldr	r3, [r3, #4]
 800693a:	461d      	mov	r5, r3
 800693c:	f04f 0600 	mov.w	r6, #0
 8006940:	196b      	adds	r3, r5, r5
 8006942:	eb46 0406 	adc.w	r4, r6, r6
 8006946:	461a      	mov	r2, r3
 8006948:	4623      	mov	r3, r4
 800694a:	f7f9 fc3d 	bl	80001c8 <__aeabi_uldivmod>
 800694e:	4603      	mov	r3, r0
 8006950:	460c      	mov	r4, r1
 8006952:	461a      	mov	r2, r3
 8006954:	4b2c      	ldr	r3, [pc, #176]	; (8006a08 <UART_SetConfig+0x384>)
 8006956:	fba3 1302 	umull	r1, r3, r3, r2
 800695a:	095b      	lsrs	r3, r3, #5
 800695c:	2164      	movs	r1, #100	; 0x64
 800695e:	fb01 f303 	mul.w	r3, r1, r3
 8006962:	1ad3      	subs	r3, r2, r3
 8006964:	00db      	lsls	r3, r3, #3
 8006966:	3332      	adds	r3, #50	; 0x32
 8006968:	4a27      	ldr	r2, [pc, #156]	; (8006a08 <UART_SetConfig+0x384>)
 800696a:	fba2 2303 	umull	r2, r3, r2, r3
 800696e:	095b      	lsrs	r3, r3, #5
 8006970:	005b      	lsls	r3, r3, #1
 8006972:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006976:	4498      	add	r8, r3
 8006978:	68bb      	ldr	r3, [r7, #8]
 800697a:	461d      	mov	r5, r3
 800697c:	f04f 0600 	mov.w	r6, #0
 8006980:	46a9      	mov	r9, r5
 8006982:	46b2      	mov	sl, r6
 8006984:	eb19 0309 	adds.w	r3, r9, r9
 8006988:	eb4a 040a 	adc.w	r4, sl, sl
 800698c:	4699      	mov	r9, r3
 800698e:	46a2      	mov	sl, r4
 8006990:	eb19 0905 	adds.w	r9, r9, r5
 8006994:	eb4a 0a06 	adc.w	sl, sl, r6
 8006998:	f04f 0100 	mov.w	r1, #0
 800699c:	f04f 0200 	mov.w	r2, #0
 80069a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80069a4:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 80069a8:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 80069ac:	4689      	mov	r9, r1
 80069ae:	4692      	mov	sl, r2
 80069b0:	eb19 0005 	adds.w	r0, r9, r5
 80069b4:	eb4a 0106 	adc.w	r1, sl, r6
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	685b      	ldr	r3, [r3, #4]
 80069bc:	461d      	mov	r5, r3
 80069be:	f04f 0600 	mov.w	r6, #0
 80069c2:	196b      	adds	r3, r5, r5
 80069c4:	eb46 0406 	adc.w	r4, r6, r6
 80069c8:	461a      	mov	r2, r3
 80069ca:	4623      	mov	r3, r4
 80069cc:	f7f9 fbfc 	bl	80001c8 <__aeabi_uldivmod>
 80069d0:	4603      	mov	r3, r0
 80069d2:	460c      	mov	r4, r1
 80069d4:	461a      	mov	r2, r3
 80069d6:	4b0c      	ldr	r3, [pc, #48]	; (8006a08 <UART_SetConfig+0x384>)
 80069d8:	fba3 1302 	umull	r1, r3, r3, r2
 80069dc:	095b      	lsrs	r3, r3, #5
 80069de:	2164      	movs	r1, #100	; 0x64
 80069e0:	fb01 f303 	mul.w	r3, r1, r3
 80069e4:	1ad3      	subs	r3, r2, r3
 80069e6:	00db      	lsls	r3, r3, #3
 80069e8:	3332      	adds	r3, #50	; 0x32
 80069ea:	4a07      	ldr	r2, [pc, #28]	; (8006a08 <UART_SetConfig+0x384>)
 80069ec:	fba2 2303 	umull	r2, r3, r2, r3
 80069f0:	095b      	lsrs	r3, r3, #5
 80069f2:	f003 0207 	and.w	r2, r3, #7
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4442      	add	r2, r8
 80069fc:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 80069fe:	e1b2      	b.n	8006d66 <UART_SetConfig+0x6e2>
 8006a00:	40011000 	.word	0x40011000
 8006a04:	40011400 	.word	0x40011400
 8006a08:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4ad7      	ldr	r2, [pc, #860]	; (8006d70 <UART_SetConfig+0x6ec>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d005      	beq.n	8006a22 <UART_SetConfig+0x39e>
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	4ad6      	ldr	r2, [pc, #856]	; (8006d74 <UART_SetConfig+0x6f0>)
 8006a1c:	4293      	cmp	r3, r2
 8006a1e:	f040 80d1 	bne.w	8006bc4 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a22:	f7fd ff0f 	bl	8004844 <HAL_RCC_GetPCLK2Freq>
 8006a26:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	469a      	mov	sl, r3
 8006a2c:	f04f 0b00 	mov.w	fp, #0
 8006a30:	46d0      	mov	r8, sl
 8006a32:	46d9      	mov	r9, fp
 8006a34:	eb18 0308 	adds.w	r3, r8, r8
 8006a38:	eb49 0409 	adc.w	r4, r9, r9
 8006a3c:	4698      	mov	r8, r3
 8006a3e:	46a1      	mov	r9, r4
 8006a40:	eb18 080a 	adds.w	r8, r8, sl
 8006a44:	eb49 090b 	adc.w	r9, r9, fp
 8006a48:	f04f 0100 	mov.w	r1, #0
 8006a4c:	f04f 0200 	mov.w	r2, #0
 8006a50:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006a54:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006a58:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006a5c:	4688      	mov	r8, r1
 8006a5e:	4691      	mov	r9, r2
 8006a60:	eb1a 0508 	adds.w	r5, sl, r8
 8006a64:	eb4b 0609 	adc.w	r6, fp, r9
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	685b      	ldr	r3, [r3, #4]
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	f04f 0200 	mov.w	r2, #0
 8006a72:	f04f 0300 	mov.w	r3, #0
 8006a76:	f04f 0400 	mov.w	r4, #0
 8006a7a:	0094      	lsls	r4, r2, #2
 8006a7c:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006a80:	008b      	lsls	r3, r1, #2
 8006a82:	461a      	mov	r2, r3
 8006a84:	4623      	mov	r3, r4
 8006a86:	4628      	mov	r0, r5
 8006a88:	4631      	mov	r1, r6
 8006a8a:	f7f9 fb9d 	bl	80001c8 <__aeabi_uldivmod>
 8006a8e:	4603      	mov	r3, r0
 8006a90:	460c      	mov	r4, r1
 8006a92:	461a      	mov	r2, r3
 8006a94:	4bb8      	ldr	r3, [pc, #736]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006a96:	fba3 2302 	umull	r2, r3, r3, r2
 8006a9a:	095b      	lsrs	r3, r3, #5
 8006a9c:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	469b      	mov	fp, r3
 8006aa4:	f04f 0c00 	mov.w	ip, #0
 8006aa8:	46d9      	mov	r9, fp
 8006aaa:	46e2      	mov	sl, ip
 8006aac:	eb19 0309 	adds.w	r3, r9, r9
 8006ab0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ab4:	4699      	mov	r9, r3
 8006ab6:	46a2      	mov	sl, r4
 8006ab8:	eb19 090b 	adds.w	r9, r9, fp
 8006abc:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006ac0:	f04f 0100 	mov.w	r1, #0
 8006ac4:	f04f 0200 	mov.w	r2, #0
 8006ac8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006acc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006ad0:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006ad4:	4689      	mov	r9, r1
 8006ad6:	4692      	mov	sl, r2
 8006ad8:	eb1b 0509 	adds.w	r5, fp, r9
 8006adc:	eb4c 060a 	adc.w	r6, ip, sl
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	f04f 0200 	mov.w	r2, #0
 8006aea:	f04f 0300 	mov.w	r3, #0
 8006aee:	f04f 0400 	mov.w	r4, #0
 8006af2:	0094      	lsls	r4, r2, #2
 8006af4:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006af8:	008b      	lsls	r3, r1, #2
 8006afa:	461a      	mov	r2, r3
 8006afc:	4623      	mov	r3, r4
 8006afe:	4628      	mov	r0, r5
 8006b00:	4631      	mov	r1, r6
 8006b02:	f7f9 fb61 	bl	80001c8 <__aeabi_uldivmod>
 8006b06:	4603      	mov	r3, r0
 8006b08:	460c      	mov	r4, r1
 8006b0a:	461a      	mov	r2, r3
 8006b0c:	4b9a      	ldr	r3, [pc, #616]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006b0e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b12:	095b      	lsrs	r3, r3, #5
 8006b14:	2164      	movs	r1, #100	; 0x64
 8006b16:	fb01 f303 	mul.w	r3, r1, r3
 8006b1a:	1ad3      	subs	r3, r2, r3
 8006b1c:	011b      	lsls	r3, r3, #4
 8006b1e:	3332      	adds	r3, #50	; 0x32
 8006b20:	4a95      	ldr	r2, [pc, #596]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006b22:	fba2 2303 	umull	r2, r3, r2, r3
 8006b26:	095b      	lsrs	r3, r3, #5
 8006b28:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b2c:	4498      	add	r8, r3
 8006b2e:	68bb      	ldr	r3, [r7, #8]
 8006b30:	469b      	mov	fp, r3
 8006b32:	f04f 0c00 	mov.w	ip, #0
 8006b36:	46d9      	mov	r9, fp
 8006b38:	46e2      	mov	sl, ip
 8006b3a:	eb19 0309 	adds.w	r3, r9, r9
 8006b3e:	eb4a 040a 	adc.w	r4, sl, sl
 8006b42:	4699      	mov	r9, r3
 8006b44:	46a2      	mov	sl, r4
 8006b46:	eb19 090b 	adds.w	r9, r9, fp
 8006b4a:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006b4e:	f04f 0100 	mov.w	r1, #0
 8006b52:	f04f 0200 	mov.w	r2, #0
 8006b56:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006b5a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006b5e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006b62:	4689      	mov	r9, r1
 8006b64:	4692      	mov	sl, r2
 8006b66:	eb1b 0509 	adds.w	r5, fp, r9
 8006b6a:	eb4c 060a 	adc.w	r6, ip, sl
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	685b      	ldr	r3, [r3, #4]
 8006b72:	4619      	mov	r1, r3
 8006b74:	f04f 0200 	mov.w	r2, #0
 8006b78:	f04f 0300 	mov.w	r3, #0
 8006b7c:	f04f 0400 	mov.w	r4, #0
 8006b80:	0094      	lsls	r4, r2, #2
 8006b82:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006b86:	008b      	lsls	r3, r1, #2
 8006b88:	461a      	mov	r2, r3
 8006b8a:	4623      	mov	r3, r4
 8006b8c:	4628      	mov	r0, r5
 8006b8e:	4631      	mov	r1, r6
 8006b90:	f7f9 fb1a 	bl	80001c8 <__aeabi_uldivmod>
 8006b94:	4603      	mov	r3, r0
 8006b96:	460c      	mov	r4, r1
 8006b98:	461a      	mov	r2, r3
 8006b9a:	4b77      	ldr	r3, [pc, #476]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006b9c:	fba3 1302 	umull	r1, r3, r3, r2
 8006ba0:	095b      	lsrs	r3, r3, #5
 8006ba2:	2164      	movs	r1, #100	; 0x64
 8006ba4:	fb01 f303 	mul.w	r3, r1, r3
 8006ba8:	1ad3      	subs	r3, r2, r3
 8006baa:	011b      	lsls	r3, r3, #4
 8006bac:	3332      	adds	r3, #50	; 0x32
 8006bae:	4a72      	ldr	r2, [pc, #456]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8006bb4:	095b      	lsrs	r3, r3, #5
 8006bb6:	f003 020f 	and.w	r2, r3, #15
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4442      	add	r2, r8
 8006bc0:	609a      	str	r2, [r3, #8]
 8006bc2:	e0d0      	b.n	8006d66 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006bc4:	f7fd fe2a 	bl	800481c <HAL_RCC_GetPCLK1Freq>
 8006bc8:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006bca:	68bb      	ldr	r3, [r7, #8]
 8006bcc:	469a      	mov	sl, r3
 8006bce:	f04f 0b00 	mov.w	fp, #0
 8006bd2:	46d0      	mov	r8, sl
 8006bd4:	46d9      	mov	r9, fp
 8006bd6:	eb18 0308 	adds.w	r3, r8, r8
 8006bda:	eb49 0409 	adc.w	r4, r9, r9
 8006bde:	4698      	mov	r8, r3
 8006be0:	46a1      	mov	r9, r4
 8006be2:	eb18 080a 	adds.w	r8, r8, sl
 8006be6:	eb49 090b 	adc.w	r9, r9, fp
 8006bea:	f04f 0100 	mov.w	r1, #0
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 8006bf6:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 8006bfa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 8006bfe:	4688      	mov	r8, r1
 8006c00:	4691      	mov	r9, r2
 8006c02:	eb1a 0508 	adds.w	r5, sl, r8
 8006c06:	eb4b 0609 	adc.w	r6, fp, r9
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	685b      	ldr	r3, [r3, #4]
 8006c0e:	4619      	mov	r1, r3
 8006c10:	f04f 0200 	mov.w	r2, #0
 8006c14:	f04f 0300 	mov.w	r3, #0
 8006c18:	f04f 0400 	mov.w	r4, #0
 8006c1c:	0094      	lsls	r4, r2, #2
 8006c1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c22:	008b      	lsls	r3, r1, #2
 8006c24:	461a      	mov	r2, r3
 8006c26:	4623      	mov	r3, r4
 8006c28:	4628      	mov	r0, r5
 8006c2a:	4631      	mov	r1, r6
 8006c2c:	f7f9 facc 	bl	80001c8 <__aeabi_uldivmod>
 8006c30:	4603      	mov	r3, r0
 8006c32:	460c      	mov	r4, r1
 8006c34:	461a      	mov	r2, r3
 8006c36:	4b50      	ldr	r3, [pc, #320]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006c38:	fba3 2302 	umull	r2, r3, r3, r2
 8006c3c:	095b      	lsrs	r3, r3, #5
 8006c3e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8006c42:	68bb      	ldr	r3, [r7, #8]
 8006c44:	469b      	mov	fp, r3
 8006c46:	f04f 0c00 	mov.w	ip, #0
 8006c4a:	46d9      	mov	r9, fp
 8006c4c:	46e2      	mov	sl, ip
 8006c4e:	eb19 0309 	adds.w	r3, r9, r9
 8006c52:	eb4a 040a 	adc.w	r4, sl, sl
 8006c56:	4699      	mov	r9, r3
 8006c58:	46a2      	mov	sl, r4
 8006c5a:	eb19 090b 	adds.w	r9, r9, fp
 8006c5e:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006c62:	f04f 0100 	mov.w	r1, #0
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006c6e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006c72:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006c76:	4689      	mov	r9, r1
 8006c78:	4692      	mov	sl, r2
 8006c7a:	eb1b 0509 	adds.w	r5, fp, r9
 8006c7e:	eb4c 060a 	adc.w	r6, ip, sl
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	4619      	mov	r1, r3
 8006c88:	f04f 0200 	mov.w	r2, #0
 8006c8c:	f04f 0300 	mov.w	r3, #0
 8006c90:	f04f 0400 	mov.w	r4, #0
 8006c94:	0094      	lsls	r4, r2, #2
 8006c96:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006c9a:	008b      	lsls	r3, r1, #2
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	4623      	mov	r3, r4
 8006ca0:	4628      	mov	r0, r5
 8006ca2:	4631      	mov	r1, r6
 8006ca4:	f7f9 fa90 	bl	80001c8 <__aeabi_uldivmod>
 8006ca8:	4603      	mov	r3, r0
 8006caa:	460c      	mov	r4, r1
 8006cac:	461a      	mov	r2, r3
 8006cae:	4b32      	ldr	r3, [pc, #200]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006cb0:	fba3 1302 	umull	r1, r3, r3, r2
 8006cb4:	095b      	lsrs	r3, r3, #5
 8006cb6:	2164      	movs	r1, #100	; 0x64
 8006cb8:	fb01 f303 	mul.w	r3, r1, r3
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	011b      	lsls	r3, r3, #4
 8006cc0:	3332      	adds	r3, #50	; 0x32
 8006cc2:	4a2d      	ldr	r2, [pc, #180]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006cc4:	fba2 2303 	umull	r2, r3, r2, r3
 8006cc8:	095b      	lsrs	r3, r3, #5
 8006cca:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006cce:	4498      	add	r8, r3
 8006cd0:	68bb      	ldr	r3, [r7, #8]
 8006cd2:	469b      	mov	fp, r3
 8006cd4:	f04f 0c00 	mov.w	ip, #0
 8006cd8:	46d9      	mov	r9, fp
 8006cda:	46e2      	mov	sl, ip
 8006cdc:	eb19 0309 	adds.w	r3, r9, r9
 8006ce0:	eb4a 040a 	adc.w	r4, sl, sl
 8006ce4:	4699      	mov	r9, r3
 8006ce6:	46a2      	mov	sl, r4
 8006ce8:	eb19 090b 	adds.w	r9, r9, fp
 8006cec:	eb4a 0a0c 	adc.w	sl, sl, ip
 8006cf0:	f04f 0100 	mov.w	r1, #0
 8006cf4:	f04f 0200 	mov.w	r2, #0
 8006cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006cfc:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 8006d00:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 8006d04:	4689      	mov	r9, r1
 8006d06:	4692      	mov	sl, r2
 8006d08:	eb1b 0509 	adds.w	r5, fp, r9
 8006d0c:	eb4c 060a 	adc.w	r6, ip, sl
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4619      	mov	r1, r3
 8006d16:	f04f 0200 	mov.w	r2, #0
 8006d1a:	f04f 0300 	mov.w	r3, #0
 8006d1e:	f04f 0400 	mov.w	r4, #0
 8006d22:	0094      	lsls	r4, r2, #2
 8006d24:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 8006d28:	008b      	lsls	r3, r1, #2
 8006d2a:	461a      	mov	r2, r3
 8006d2c:	4623      	mov	r3, r4
 8006d2e:	4628      	mov	r0, r5
 8006d30:	4631      	mov	r1, r6
 8006d32:	f7f9 fa49 	bl	80001c8 <__aeabi_uldivmod>
 8006d36:	4603      	mov	r3, r0
 8006d38:	460c      	mov	r4, r1
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	4b0e      	ldr	r3, [pc, #56]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006d3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006d42:	095b      	lsrs	r3, r3, #5
 8006d44:	2164      	movs	r1, #100	; 0x64
 8006d46:	fb01 f303 	mul.w	r3, r1, r3
 8006d4a:	1ad3      	subs	r3, r2, r3
 8006d4c:	011b      	lsls	r3, r3, #4
 8006d4e:	3332      	adds	r3, #50	; 0x32
 8006d50:	4a09      	ldr	r2, [pc, #36]	; (8006d78 <UART_SetConfig+0x6f4>)
 8006d52:	fba2 2303 	umull	r2, r3, r2, r3
 8006d56:	095b      	lsrs	r3, r3, #5
 8006d58:	f003 020f 	and.w	r2, r3, #15
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	4442      	add	r2, r8
 8006d62:	609a      	str	r2, [r3, #8]
}
 8006d64:	e7ff      	b.n	8006d66 <UART_SetConfig+0x6e2>
 8006d66:	bf00      	nop
 8006d68:	3714      	adds	r7, #20
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d70:	40011000 	.word	0x40011000
 8006d74:	40011400 	.word	0x40011400
 8006d78:	51eb851f 	.word	0x51eb851f

08006d7c <__errno>:
 8006d7c:	4b01      	ldr	r3, [pc, #4]	; (8006d84 <__errno+0x8>)
 8006d7e:	6818      	ldr	r0, [r3, #0]
 8006d80:	4770      	bx	lr
 8006d82:	bf00      	nop
 8006d84:	200001e0 	.word	0x200001e0

08006d88 <__libc_init_array>:
 8006d88:	b570      	push	{r4, r5, r6, lr}
 8006d8a:	4e0d      	ldr	r6, [pc, #52]	; (8006dc0 <__libc_init_array+0x38>)
 8006d8c:	4c0d      	ldr	r4, [pc, #52]	; (8006dc4 <__libc_init_array+0x3c>)
 8006d8e:	1ba4      	subs	r4, r4, r6
 8006d90:	10a4      	asrs	r4, r4, #2
 8006d92:	2500      	movs	r5, #0
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d109      	bne.n	8006dac <__libc_init_array+0x24>
 8006d98:	4e0b      	ldr	r6, [pc, #44]	; (8006dc8 <__libc_init_array+0x40>)
 8006d9a:	4c0c      	ldr	r4, [pc, #48]	; (8006dcc <__libc_init_array+0x44>)
 8006d9c:	f000 fc88 	bl	80076b0 <_init>
 8006da0:	1ba4      	subs	r4, r4, r6
 8006da2:	10a4      	asrs	r4, r4, #2
 8006da4:	2500      	movs	r5, #0
 8006da6:	42a5      	cmp	r5, r4
 8006da8:	d105      	bne.n	8006db6 <__libc_init_array+0x2e>
 8006daa:	bd70      	pop	{r4, r5, r6, pc}
 8006dac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006db0:	4798      	blx	r3
 8006db2:	3501      	adds	r5, #1
 8006db4:	e7ee      	b.n	8006d94 <__libc_init_array+0xc>
 8006db6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8006dba:	4798      	blx	r3
 8006dbc:	3501      	adds	r5, #1
 8006dbe:	e7f2      	b.n	8006da6 <__libc_init_array+0x1e>
 8006dc0:	080081d8 	.word	0x080081d8
 8006dc4:	080081d8 	.word	0x080081d8
 8006dc8:	080081d8 	.word	0x080081d8
 8006dcc:	080081dc 	.word	0x080081dc

08006dd0 <memset>:
 8006dd0:	4402      	add	r2, r0
 8006dd2:	4603      	mov	r3, r0
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d100      	bne.n	8006dda <memset+0xa>
 8006dd8:	4770      	bx	lr
 8006dda:	f803 1b01 	strb.w	r1, [r3], #1
 8006dde:	e7f9      	b.n	8006dd4 <memset+0x4>

08006de0 <_puts_r>:
 8006de0:	b570      	push	{r4, r5, r6, lr}
 8006de2:	460e      	mov	r6, r1
 8006de4:	4605      	mov	r5, r0
 8006de6:	b118      	cbz	r0, 8006df0 <_puts_r+0x10>
 8006de8:	6983      	ldr	r3, [r0, #24]
 8006dea:	b90b      	cbnz	r3, 8006df0 <_puts_r+0x10>
 8006dec:	f000 fa0c 	bl	8007208 <__sinit>
 8006df0:	69ab      	ldr	r3, [r5, #24]
 8006df2:	68ac      	ldr	r4, [r5, #8]
 8006df4:	b913      	cbnz	r3, 8006dfc <_puts_r+0x1c>
 8006df6:	4628      	mov	r0, r5
 8006df8:	f000 fa06 	bl	8007208 <__sinit>
 8006dfc:	4b23      	ldr	r3, [pc, #140]	; (8006e8c <_puts_r+0xac>)
 8006dfe:	429c      	cmp	r4, r3
 8006e00:	d117      	bne.n	8006e32 <_puts_r+0x52>
 8006e02:	686c      	ldr	r4, [r5, #4]
 8006e04:	89a3      	ldrh	r3, [r4, #12]
 8006e06:	071b      	lsls	r3, r3, #28
 8006e08:	d51d      	bpl.n	8006e46 <_puts_r+0x66>
 8006e0a:	6923      	ldr	r3, [r4, #16]
 8006e0c:	b1db      	cbz	r3, 8006e46 <_puts_r+0x66>
 8006e0e:	3e01      	subs	r6, #1
 8006e10:	68a3      	ldr	r3, [r4, #8]
 8006e12:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006e16:	3b01      	subs	r3, #1
 8006e18:	60a3      	str	r3, [r4, #8]
 8006e1a:	b9e9      	cbnz	r1, 8006e58 <_puts_r+0x78>
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	da2e      	bge.n	8006e7e <_puts_r+0x9e>
 8006e20:	4622      	mov	r2, r4
 8006e22:	210a      	movs	r1, #10
 8006e24:	4628      	mov	r0, r5
 8006e26:	f000 f83f 	bl	8006ea8 <__swbuf_r>
 8006e2a:	3001      	adds	r0, #1
 8006e2c:	d011      	beq.n	8006e52 <_puts_r+0x72>
 8006e2e:	200a      	movs	r0, #10
 8006e30:	e011      	b.n	8006e56 <_puts_r+0x76>
 8006e32:	4b17      	ldr	r3, [pc, #92]	; (8006e90 <_puts_r+0xb0>)
 8006e34:	429c      	cmp	r4, r3
 8006e36:	d101      	bne.n	8006e3c <_puts_r+0x5c>
 8006e38:	68ac      	ldr	r4, [r5, #8]
 8006e3a:	e7e3      	b.n	8006e04 <_puts_r+0x24>
 8006e3c:	4b15      	ldr	r3, [pc, #84]	; (8006e94 <_puts_r+0xb4>)
 8006e3e:	429c      	cmp	r4, r3
 8006e40:	bf08      	it	eq
 8006e42:	68ec      	ldreq	r4, [r5, #12]
 8006e44:	e7de      	b.n	8006e04 <_puts_r+0x24>
 8006e46:	4621      	mov	r1, r4
 8006e48:	4628      	mov	r0, r5
 8006e4a:	f000 f87f 	bl	8006f4c <__swsetup_r>
 8006e4e:	2800      	cmp	r0, #0
 8006e50:	d0dd      	beq.n	8006e0e <_puts_r+0x2e>
 8006e52:	f04f 30ff 	mov.w	r0, #4294967295
 8006e56:	bd70      	pop	{r4, r5, r6, pc}
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	da04      	bge.n	8006e66 <_puts_r+0x86>
 8006e5c:	69a2      	ldr	r2, [r4, #24]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	dc06      	bgt.n	8006e70 <_puts_r+0x90>
 8006e62:	290a      	cmp	r1, #10
 8006e64:	d004      	beq.n	8006e70 <_puts_r+0x90>
 8006e66:	6823      	ldr	r3, [r4, #0]
 8006e68:	1c5a      	adds	r2, r3, #1
 8006e6a:	6022      	str	r2, [r4, #0]
 8006e6c:	7019      	strb	r1, [r3, #0]
 8006e6e:	e7cf      	b.n	8006e10 <_puts_r+0x30>
 8006e70:	4622      	mov	r2, r4
 8006e72:	4628      	mov	r0, r5
 8006e74:	f000 f818 	bl	8006ea8 <__swbuf_r>
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d1c9      	bne.n	8006e10 <_puts_r+0x30>
 8006e7c:	e7e9      	b.n	8006e52 <_puts_r+0x72>
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	200a      	movs	r0, #10
 8006e82:	1c5a      	adds	r2, r3, #1
 8006e84:	6022      	str	r2, [r4, #0]
 8006e86:	7018      	strb	r0, [r3, #0]
 8006e88:	e7e5      	b.n	8006e56 <_puts_r+0x76>
 8006e8a:	bf00      	nop
 8006e8c:	08008190 	.word	0x08008190
 8006e90:	080081b0 	.word	0x080081b0
 8006e94:	08008170 	.word	0x08008170

08006e98 <puts>:
 8006e98:	4b02      	ldr	r3, [pc, #8]	; (8006ea4 <puts+0xc>)
 8006e9a:	4601      	mov	r1, r0
 8006e9c:	6818      	ldr	r0, [r3, #0]
 8006e9e:	f7ff bf9f 	b.w	8006de0 <_puts_r>
 8006ea2:	bf00      	nop
 8006ea4:	200001e0 	.word	0x200001e0

08006ea8 <__swbuf_r>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	460e      	mov	r6, r1
 8006eac:	4614      	mov	r4, r2
 8006eae:	4605      	mov	r5, r0
 8006eb0:	b118      	cbz	r0, 8006eba <__swbuf_r+0x12>
 8006eb2:	6983      	ldr	r3, [r0, #24]
 8006eb4:	b90b      	cbnz	r3, 8006eba <__swbuf_r+0x12>
 8006eb6:	f000 f9a7 	bl	8007208 <__sinit>
 8006eba:	4b21      	ldr	r3, [pc, #132]	; (8006f40 <__swbuf_r+0x98>)
 8006ebc:	429c      	cmp	r4, r3
 8006ebe:	d12a      	bne.n	8006f16 <__swbuf_r+0x6e>
 8006ec0:	686c      	ldr	r4, [r5, #4]
 8006ec2:	69a3      	ldr	r3, [r4, #24]
 8006ec4:	60a3      	str	r3, [r4, #8]
 8006ec6:	89a3      	ldrh	r3, [r4, #12]
 8006ec8:	071a      	lsls	r2, r3, #28
 8006eca:	d52e      	bpl.n	8006f2a <__swbuf_r+0x82>
 8006ecc:	6923      	ldr	r3, [r4, #16]
 8006ece:	b363      	cbz	r3, 8006f2a <__swbuf_r+0x82>
 8006ed0:	6923      	ldr	r3, [r4, #16]
 8006ed2:	6820      	ldr	r0, [r4, #0]
 8006ed4:	1ac0      	subs	r0, r0, r3
 8006ed6:	6963      	ldr	r3, [r4, #20]
 8006ed8:	b2f6      	uxtb	r6, r6
 8006eda:	4283      	cmp	r3, r0
 8006edc:	4637      	mov	r7, r6
 8006ede:	dc04      	bgt.n	8006eea <__swbuf_r+0x42>
 8006ee0:	4621      	mov	r1, r4
 8006ee2:	4628      	mov	r0, r5
 8006ee4:	f000 f926 	bl	8007134 <_fflush_r>
 8006ee8:	bb28      	cbnz	r0, 8006f36 <__swbuf_r+0x8e>
 8006eea:	68a3      	ldr	r3, [r4, #8]
 8006eec:	3b01      	subs	r3, #1
 8006eee:	60a3      	str	r3, [r4, #8]
 8006ef0:	6823      	ldr	r3, [r4, #0]
 8006ef2:	1c5a      	adds	r2, r3, #1
 8006ef4:	6022      	str	r2, [r4, #0]
 8006ef6:	701e      	strb	r6, [r3, #0]
 8006ef8:	6963      	ldr	r3, [r4, #20]
 8006efa:	3001      	adds	r0, #1
 8006efc:	4283      	cmp	r3, r0
 8006efe:	d004      	beq.n	8006f0a <__swbuf_r+0x62>
 8006f00:	89a3      	ldrh	r3, [r4, #12]
 8006f02:	07db      	lsls	r3, r3, #31
 8006f04:	d519      	bpl.n	8006f3a <__swbuf_r+0x92>
 8006f06:	2e0a      	cmp	r6, #10
 8006f08:	d117      	bne.n	8006f3a <__swbuf_r+0x92>
 8006f0a:	4621      	mov	r1, r4
 8006f0c:	4628      	mov	r0, r5
 8006f0e:	f000 f911 	bl	8007134 <_fflush_r>
 8006f12:	b190      	cbz	r0, 8006f3a <__swbuf_r+0x92>
 8006f14:	e00f      	b.n	8006f36 <__swbuf_r+0x8e>
 8006f16:	4b0b      	ldr	r3, [pc, #44]	; (8006f44 <__swbuf_r+0x9c>)
 8006f18:	429c      	cmp	r4, r3
 8006f1a:	d101      	bne.n	8006f20 <__swbuf_r+0x78>
 8006f1c:	68ac      	ldr	r4, [r5, #8]
 8006f1e:	e7d0      	b.n	8006ec2 <__swbuf_r+0x1a>
 8006f20:	4b09      	ldr	r3, [pc, #36]	; (8006f48 <__swbuf_r+0xa0>)
 8006f22:	429c      	cmp	r4, r3
 8006f24:	bf08      	it	eq
 8006f26:	68ec      	ldreq	r4, [r5, #12]
 8006f28:	e7cb      	b.n	8006ec2 <__swbuf_r+0x1a>
 8006f2a:	4621      	mov	r1, r4
 8006f2c:	4628      	mov	r0, r5
 8006f2e:	f000 f80d 	bl	8006f4c <__swsetup_r>
 8006f32:	2800      	cmp	r0, #0
 8006f34:	d0cc      	beq.n	8006ed0 <__swbuf_r+0x28>
 8006f36:	f04f 37ff 	mov.w	r7, #4294967295
 8006f3a:	4638      	mov	r0, r7
 8006f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f3e:	bf00      	nop
 8006f40:	08008190 	.word	0x08008190
 8006f44:	080081b0 	.word	0x080081b0
 8006f48:	08008170 	.word	0x08008170

08006f4c <__swsetup_r>:
 8006f4c:	4b32      	ldr	r3, [pc, #200]	; (8007018 <__swsetup_r+0xcc>)
 8006f4e:	b570      	push	{r4, r5, r6, lr}
 8006f50:	681d      	ldr	r5, [r3, #0]
 8006f52:	4606      	mov	r6, r0
 8006f54:	460c      	mov	r4, r1
 8006f56:	b125      	cbz	r5, 8006f62 <__swsetup_r+0x16>
 8006f58:	69ab      	ldr	r3, [r5, #24]
 8006f5a:	b913      	cbnz	r3, 8006f62 <__swsetup_r+0x16>
 8006f5c:	4628      	mov	r0, r5
 8006f5e:	f000 f953 	bl	8007208 <__sinit>
 8006f62:	4b2e      	ldr	r3, [pc, #184]	; (800701c <__swsetup_r+0xd0>)
 8006f64:	429c      	cmp	r4, r3
 8006f66:	d10f      	bne.n	8006f88 <__swsetup_r+0x3c>
 8006f68:	686c      	ldr	r4, [r5, #4]
 8006f6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f6e:	b29a      	uxth	r2, r3
 8006f70:	0715      	lsls	r5, r2, #28
 8006f72:	d42c      	bmi.n	8006fce <__swsetup_r+0x82>
 8006f74:	06d0      	lsls	r0, r2, #27
 8006f76:	d411      	bmi.n	8006f9c <__swsetup_r+0x50>
 8006f78:	2209      	movs	r2, #9
 8006f7a:	6032      	str	r2, [r6, #0]
 8006f7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	f04f 30ff 	mov.w	r0, #4294967295
 8006f86:	e03e      	b.n	8007006 <__swsetup_r+0xba>
 8006f88:	4b25      	ldr	r3, [pc, #148]	; (8007020 <__swsetup_r+0xd4>)
 8006f8a:	429c      	cmp	r4, r3
 8006f8c:	d101      	bne.n	8006f92 <__swsetup_r+0x46>
 8006f8e:	68ac      	ldr	r4, [r5, #8]
 8006f90:	e7eb      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f92:	4b24      	ldr	r3, [pc, #144]	; (8007024 <__swsetup_r+0xd8>)
 8006f94:	429c      	cmp	r4, r3
 8006f96:	bf08      	it	eq
 8006f98:	68ec      	ldreq	r4, [r5, #12]
 8006f9a:	e7e6      	b.n	8006f6a <__swsetup_r+0x1e>
 8006f9c:	0751      	lsls	r1, r2, #29
 8006f9e:	d512      	bpl.n	8006fc6 <__swsetup_r+0x7a>
 8006fa0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fa2:	b141      	cbz	r1, 8006fb6 <__swsetup_r+0x6a>
 8006fa4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa8:	4299      	cmp	r1, r3
 8006faa:	d002      	beq.n	8006fb2 <__swsetup_r+0x66>
 8006fac:	4630      	mov	r0, r6
 8006fae:	f000 fa19 	bl	80073e4 <_free_r>
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	6363      	str	r3, [r4, #52]	; 0x34
 8006fb6:	89a3      	ldrh	r3, [r4, #12]
 8006fb8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fbc:	81a3      	strh	r3, [r4, #12]
 8006fbe:	2300      	movs	r3, #0
 8006fc0:	6063      	str	r3, [r4, #4]
 8006fc2:	6923      	ldr	r3, [r4, #16]
 8006fc4:	6023      	str	r3, [r4, #0]
 8006fc6:	89a3      	ldrh	r3, [r4, #12]
 8006fc8:	f043 0308 	orr.w	r3, r3, #8
 8006fcc:	81a3      	strh	r3, [r4, #12]
 8006fce:	6923      	ldr	r3, [r4, #16]
 8006fd0:	b94b      	cbnz	r3, 8006fe6 <__swsetup_r+0x9a>
 8006fd2:	89a3      	ldrh	r3, [r4, #12]
 8006fd4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fdc:	d003      	beq.n	8006fe6 <__swsetup_r+0x9a>
 8006fde:	4621      	mov	r1, r4
 8006fe0:	4630      	mov	r0, r6
 8006fe2:	f000 f9bf 	bl	8007364 <__smakebuf_r>
 8006fe6:	89a2      	ldrh	r2, [r4, #12]
 8006fe8:	f012 0301 	ands.w	r3, r2, #1
 8006fec:	d00c      	beq.n	8007008 <__swsetup_r+0xbc>
 8006fee:	2300      	movs	r3, #0
 8006ff0:	60a3      	str	r3, [r4, #8]
 8006ff2:	6963      	ldr	r3, [r4, #20]
 8006ff4:	425b      	negs	r3, r3
 8006ff6:	61a3      	str	r3, [r4, #24]
 8006ff8:	6923      	ldr	r3, [r4, #16]
 8006ffa:	b953      	cbnz	r3, 8007012 <__swsetup_r+0xc6>
 8006ffc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007000:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007004:	d1ba      	bne.n	8006f7c <__swsetup_r+0x30>
 8007006:	bd70      	pop	{r4, r5, r6, pc}
 8007008:	0792      	lsls	r2, r2, #30
 800700a:	bf58      	it	pl
 800700c:	6963      	ldrpl	r3, [r4, #20]
 800700e:	60a3      	str	r3, [r4, #8]
 8007010:	e7f2      	b.n	8006ff8 <__swsetup_r+0xac>
 8007012:	2000      	movs	r0, #0
 8007014:	e7f7      	b.n	8007006 <__swsetup_r+0xba>
 8007016:	bf00      	nop
 8007018:	200001e0 	.word	0x200001e0
 800701c:	08008190 	.word	0x08008190
 8007020:	080081b0 	.word	0x080081b0
 8007024:	08008170 	.word	0x08008170

08007028 <__sflush_r>:
 8007028:	898a      	ldrh	r2, [r1, #12]
 800702a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800702e:	4605      	mov	r5, r0
 8007030:	0710      	lsls	r0, r2, #28
 8007032:	460c      	mov	r4, r1
 8007034:	d458      	bmi.n	80070e8 <__sflush_r+0xc0>
 8007036:	684b      	ldr	r3, [r1, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	dc05      	bgt.n	8007048 <__sflush_r+0x20>
 800703c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800703e:	2b00      	cmp	r3, #0
 8007040:	dc02      	bgt.n	8007048 <__sflush_r+0x20>
 8007042:	2000      	movs	r0, #0
 8007044:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007048:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800704a:	2e00      	cmp	r6, #0
 800704c:	d0f9      	beq.n	8007042 <__sflush_r+0x1a>
 800704e:	2300      	movs	r3, #0
 8007050:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007054:	682f      	ldr	r7, [r5, #0]
 8007056:	6a21      	ldr	r1, [r4, #32]
 8007058:	602b      	str	r3, [r5, #0]
 800705a:	d032      	beq.n	80070c2 <__sflush_r+0x9a>
 800705c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800705e:	89a3      	ldrh	r3, [r4, #12]
 8007060:	075a      	lsls	r2, r3, #29
 8007062:	d505      	bpl.n	8007070 <__sflush_r+0x48>
 8007064:	6863      	ldr	r3, [r4, #4]
 8007066:	1ac0      	subs	r0, r0, r3
 8007068:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800706a:	b10b      	cbz	r3, 8007070 <__sflush_r+0x48>
 800706c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800706e:	1ac0      	subs	r0, r0, r3
 8007070:	2300      	movs	r3, #0
 8007072:	4602      	mov	r2, r0
 8007074:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007076:	6a21      	ldr	r1, [r4, #32]
 8007078:	4628      	mov	r0, r5
 800707a:	47b0      	blx	r6
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	89a3      	ldrh	r3, [r4, #12]
 8007080:	d106      	bne.n	8007090 <__sflush_r+0x68>
 8007082:	6829      	ldr	r1, [r5, #0]
 8007084:	291d      	cmp	r1, #29
 8007086:	d848      	bhi.n	800711a <__sflush_r+0xf2>
 8007088:	4a29      	ldr	r2, [pc, #164]	; (8007130 <__sflush_r+0x108>)
 800708a:	40ca      	lsrs	r2, r1
 800708c:	07d6      	lsls	r6, r2, #31
 800708e:	d544      	bpl.n	800711a <__sflush_r+0xf2>
 8007090:	2200      	movs	r2, #0
 8007092:	6062      	str	r2, [r4, #4]
 8007094:	04d9      	lsls	r1, r3, #19
 8007096:	6922      	ldr	r2, [r4, #16]
 8007098:	6022      	str	r2, [r4, #0]
 800709a:	d504      	bpl.n	80070a6 <__sflush_r+0x7e>
 800709c:	1c42      	adds	r2, r0, #1
 800709e:	d101      	bne.n	80070a4 <__sflush_r+0x7c>
 80070a0:	682b      	ldr	r3, [r5, #0]
 80070a2:	b903      	cbnz	r3, 80070a6 <__sflush_r+0x7e>
 80070a4:	6560      	str	r0, [r4, #84]	; 0x54
 80070a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070a8:	602f      	str	r7, [r5, #0]
 80070aa:	2900      	cmp	r1, #0
 80070ac:	d0c9      	beq.n	8007042 <__sflush_r+0x1a>
 80070ae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80070b2:	4299      	cmp	r1, r3
 80070b4:	d002      	beq.n	80070bc <__sflush_r+0x94>
 80070b6:	4628      	mov	r0, r5
 80070b8:	f000 f994 	bl	80073e4 <_free_r>
 80070bc:	2000      	movs	r0, #0
 80070be:	6360      	str	r0, [r4, #52]	; 0x34
 80070c0:	e7c0      	b.n	8007044 <__sflush_r+0x1c>
 80070c2:	2301      	movs	r3, #1
 80070c4:	4628      	mov	r0, r5
 80070c6:	47b0      	blx	r6
 80070c8:	1c41      	adds	r1, r0, #1
 80070ca:	d1c8      	bne.n	800705e <__sflush_r+0x36>
 80070cc:	682b      	ldr	r3, [r5, #0]
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d0c5      	beq.n	800705e <__sflush_r+0x36>
 80070d2:	2b1d      	cmp	r3, #29
 80070d4:	d001      	beq.n	80070da <__sflush_r+0xb2>
 80070d6:	2b16      	cmp	r3, #22
 80070d8:	d101      	bne.n	80070de <__sflush_r+0xb6>
 80070da:	602f      	str	r7, [r5, #0]
 80070dc:	e7b1      	b.n	8007042 <__sflush_r+0x1a>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80070e4:	81a3      	strh	r3, [r4, #12]
 80070e6:	e7ad      	b.n	8007044 <__sflush_r+0x1c>
 80070e8:	690f      	ldr	r7, [r1, #16]
 80070ea:	2f00      	cmp	r7, #0
 80070ec:	d0a9      	beq.n	8007042 <__sflush_r+0x1a>
 80070ee:	0793      	lsls	r3, r2, #30
 80070f0:	680e      	ldr	r6, [r1, #0]
 80070f2:	bf08      	it	eq
 80070f4:	694b      	ldreq	r3, [r1, #20]
 80070f6:	600f      	str	r7, [r1, #0]
 80070f8:	bf18      	it	ne
 80070fa:	2300      	movne	r3, #0
 80070fc:	eba6 0807 	sub.w	r8, r6, r7
 8007100:	608b      	str	r3, [r1, #8]
 8007102:	f1b8 0f00 	cmp.w	r8, #0
 8007106:	dd9c      	ble.n	8007042 <__sflush_r+0x1a>
 8007108:	4643      	mov	r3, r8
 800710a:	463a      	mov	r2, r7
 800710c:	6a21      	ldr	r1, [r4, #32]
 800710e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007110:	4628      	mov	r0, r5
 8007112:	47b0      	blx	r6
 8007114:	2800      	cmp	r0, #0
 8007116:	dc06      	bgt.n	8007126 <__sflush_r+0xfe>
 8007118:	89a3      	ldrh	r3, [r4, #12]
 800711a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800711e:	81a3      	strh	r3, [r4, #12]
 8007120:	f04f 30ff 	mov.w	r0, #4294967295
 8007124:	e78e      	b.n	8007044 <__sflush_r+0x1c>
 8007126:	4407      	add	r7, r0
 8007128:	eba8 0800 	sub.w	r8, r8, r0
 800712c:	e7e9      	b.n	8007102 <__sflush_r+0xda>
 800712e:	bf00      	nop
 8007130:	20400001 	.word	0x20400001

08007134 <_fflush_r>:
 8007134:	b538      	push	{r3, r4, r5, lr}
 8007136:	690b      	ldr	r3, [r1, #16]
 8007138:	4605      	mov	r5, r0
 800713a:	460c      	mov	r4, r1
 800713c:	b1db      	cbz	r3, 8007176 <_fflush_r+0x42>
 800713e:	b118      	cbz	r0, 8007148 <_fflush_r+0x14>
 8007140:	6983      	ldr	r3, [r0, #24]
 8007142:	b90b      	cbnz	r3, 8007148 <_fflush_r+0x14>
 8007144:	f000 f860 	bl	8007208 <__sinit>
 8007148:	4b0c      	ldr	r3, [pc, #48]	; (800717c <_fflush_r+0x48>)
 800714a:	429c      	cmp	r4, r3
 800714c:	d109      	bne.n	8007162 <_fflush_r+0x2e>
 800714e:	686c      	ldr	r4, [r5, #4]
 8007150:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007154:	b17b      	cbz	r3, 8007176 <_fflush_r+0x42>
 8007156:	4621      	mov	r1, r4
 8007158:	4628      	mov	r0, r5
 800715a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800715e:	f7ff bf63 	b.w	8007028 <__sflush_r>
 8007162:	4b07      	ldr	r3, [pc, #28]	; (8007180 <_fflush_r+0x4c>)
 8007164:	429c      	cmp	r4, r3
 8007166:	d101      	bne.n	800716c <_fflush_r+0x38>
 8007168:	68ac      	ldr	r4, [r5, #8]
 800716a:	e7f1      	b.n	8007150 <_fflush_r+0x1c>
 800716c:	4b05      	ldr	r3, [pc, #20]	; (8007184 <_fflush_r+0x50>)
 800716e:	429c      	cmp	r4, r3
 8007170:	bf08      	it	eq
 8007172:	68ec      	ldreq	r4, [r5, #12]
 8007174:	e7ec      	b.n	8007150 <_fflush_r+0x1c>
 8007176:	2000      	movs	r0, #0
 8007178:	bd38      	pop	{r3, r4, r5, pc}
 800717a:	bf00      	nop
 800717c:	08008190 	.word	0x08008190
 8007180:	080081b0 	.word	0x080081b0
 8007184:	08008170 	.word	0x08008170

08007188 <std>:
 8007188:	2300      	movs	r3, #0
 800718a:	b510      	push	{r4, lr}
 800718c:	4604      	mov	r4, r0
 800718e:	e9c0 3300 	strd	r3, r3, [r0]
 8007192:	6083      	str	r3, [r0, #8]
 8007194:	8181      	strh	r1, [r0, #12]
 8007196:	6643      	str	r3, [r0, #100]	; 0x64
 8007198:	81c2      	strh	r2, [r0, #14]
 800719a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800719e:	6183      	str	r3, [r0, #24]
 80071a0:	4619      	mov	r1, r3
 80071a2:	2208      	movs	r2, #8
 80071a4:	305c      	adds	r0, #92	; 0x5c
 80071a6:	f7ff fe13 	bl	8006dd0 <memset>
 80071aa:	4b05      	ldr	r3, [pc, #20]	; (80071c0 <std+0x38>)
 80071ac:	6263      	str	r3, [r4, #36]	; 0x24
 80071ae:	4b05      	ldr	r3, [pc, #20]	; (80071c4 <std+0x3c>)
 80071b0:	62a3      	str	r3, [r4, #40]	; 0x28
 80071b2:	4b05      	ldr	r3, [pc, #20]	; (80071c8 <std+0x40>)
 80071b4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80071b6:	4b05      	ldr	r3, [pc, #20]	; (80071cc <std+0x44>)
 80071b8:	6224      	str	r4, [r4, #32]
 80071ba:	6323      	str	r3, [r4, #48]	; 0x30
 80071bc:	bd10      	pop	{r4, pc}
 80071be:	bf00      	nop
 80071c0:	08007555 	.word	0x08007555
 80071c4:	08007577 	.word	0x08007577
 80071c8:	080075af 	.word	0x080075af
 80071cc:	080075d3 	.word	0x080075d3

080071d0 <_cleanup_r>:
 80071d0:	4901      	ldr	r1, [pc, #4]	; (80071d8 <_cleanup_r+0x8>)
 80071d2:	f000 b885 	b.w	80072e0 <_fwalk_reent>
 80071d6:	bf00      	nop
 80071d8:	08007135 	.word	0x08007135

080071dc <__sfmoreglue>:
 80071dc:	b570      	push	{r4, r5, r6, lr}
 80071de:	1e4a      	subs	r2, r1, #1
 80071e0:	2568      	movs	r5, #104	; 0x68
 80071e2:	4355      	muls	r5, r2
 80071e4:	460e      	mov	r6, r1
 80071e6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80071ea:	f000 f949 	bl	8007480 <_malloc_r>
 80071ee:	4604      	mov	r4, r0
 80071f0:	b140      	cbz	r0, 8007204 <__sfmoreglue+0x28>
 80071f2:	2100      	movs	r1, #0
 80071f4:	e9c0 1600 	strd	r1, r6, [r0]
 80071f8:	300c      	adds	r0, #12
 80071fa:	60a0      	str	r0, [r4, #8]
 80071fc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007200:	f7ff fde6 	bl	8006dd0 <memset>
 8007204:	4620      	mov	r0, r4
 8007206:	bd70      	pop	{r4, r5, r6, pc}

08007208 <__sinit>:
 8007208:	6983      	ldr	r3, [r0, #24]
 800720a:	b510      	push	{r4, lr}
 800720c:	4604      	mov	r4, r0
 800720e:	bb33      	cbnz	r3, 800725e <__sinit+0x56>
 8007210:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8007214:	6503      	str	r3, [r0, #80]	; 0x50
 8007216:	4b12      	ldr	r3, [pc, #72]	; (8007260 <__sinit+0x58>)
 8007218:	4a12      	ldr	r2, [pc, #72]	; (8007264 <__sinit+0x5c>)
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	6282      	str	r2, [r0, #40]	; 0x28
 800721e:	4298      	cmp	r0, r3
 8007220:	bf04      	itt	eq
 8007222:	2301      	moveq	r3, #1
 8007224:	6183      	streq	r3, [r0, #24]
 8007226:	f000 f81f 	bl	8007268 <__sfp>
 800722a:	6060      	str	r0, [r4, #4]
 800722c:	4620      	mov	r0, r4
 800722e:	f000 f81b 	bl	8007268 <__sfp>
 8007232:	60a0      	str	r0, [r4, #8]
 8007234:	4620      	mov	r0, r4
 8007236:	f000 f817 	bl	8007268 <__sfp>
 800723a:	2200      	movs	r2, #0
 800723c:	60e0      	str	r0, [r4, #12]
 800723e:	2104      	movs	r1, #4
 8007240:	6860      	ldr	r0, [r4, #4]
 8007242:	f7ff ffa1 	bl	8007188 <std>
 8007246:	2201      	movs	r2, #1
 8007248:	2109      	movs	r1, #9
 800724a:	68a0      	ldr	r0, [r4, #8]
 800724c:	f7ff ff9c 	bl	8007188 <std>
 8007250:	2202      	movs	r2, #2
 8007252:	2112      	movs	r1, #18
 8007254:	68e0      	ldr	r0, [r4, #12]
 8007256:	f7ff ff97 	bl	8007188 <std>
 800725a:	2301      	movs	r3, #1
 800725c:	61a3      	str	r3, [r4, #24]
 800725e:	bd10      	pop	{r4, pc}
 8007260:	0800816c 	.word	0x0800816c
 8007264:	080071d1 	.word	0x080071d1

08007268 <__sfp>:
 8007268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800726a:	4b1b      	ldr	r3, [pc, #108]	; (80072d8 <__sfp+0x70>)
 800726c:	681e      	ldr	r6, [r3, #0]
 800726e:	69b3      	ldr	r3, [r6, #24]
 8007270:	4607      	mov	r7, r0
 8007272:	b913      	cbnz	r3, 800727a <__sfp+0x12>
 8007274:	4630      	mov	r0, r6
 8007276:	f7ff ffc7 	bl	8007208 <__sinit>
 800727a:	3648      	adds	r6, #72	; 0x48
 800727c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007280:	3b01      	subs	r3, #1
 8007282:	d503      	bpl.n	800728c <__sfp+0x24>
 8007284:	6833      	ldr	r3, [r6, #0]
 8007286:	b133      	cbz	r3, 8007296 <__sfp+0x2e>
 8007288:	6836      	ldr	r6, [r6, #0]
 800728a:	e7f7      	b.n	800727c <__sfp+0x14>
 800728c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007290:	b16d      	cbz	r5, 80072ae <__sfp+0x46>
 8007292:	3468      	adds	r4, #104	; 0x68
 8007294:	e7f4      	b.n	8007280 <__sfp+0x18>
 8007296:	2104      	movs	r1, #4
 8007298:	4638      	mov	r0, r7
 800729a:	f7ff ff9f 	bl	80071dc <__sfmoreglue>
 800729e:	6030      	str	r0, [r6, #0]
 80072a0:	2800      	cmp	r0, #0
 80072a2:	d1f1      	bne.n	8007288 <__sfp+0x20>
 80072a4:	230c      	movs	r3, #12
 80072a6:	603b      	str	r3, [r7, #0]
 80072a8:	4604      	mov	r4, r0
 80072aa:	4620      	mov	r0, r4
 80072ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <__sfp+0x74>)
 80072b0:	6665      	str	r5, [r4, #100]	; 0x64
 80072b2:	e9c4 5500 	strd	r5, r5, [r4]
 80072b6:	60a5      	str	r5, [r4, #8]
 80072b8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80072bc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80072c0:	2208      	movs	r2, #8
 80072c2:	4629      	mov	r1, r5
 80072c4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80072c8:	f7ff fd82 	bl	8006dd0 <memset>
 80072cc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80072d0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80072d4:	e7e9      	b.n	80072aa <__sfp+0x42>
 80072d6:	bf00      	nop
 80072d8:	0800816c 	.word	0x0800816c
 80072dc:	ffff0001 	.word	0xffff0001

080072e0 <_fwalk_reent>:
 80072e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072e4:	4680      	mov	r8, r0
 80072e6:	4689      	mov	r9, r1
 80072e8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072ec:	2600      	movs	r6, #0
 80072ee:	b914      	cbnz	r4, 80072f6 <_fwalk_reent+0x16>
 80072f0:	4630      	mov	r0, r6
 80072f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072f6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80072fa:	3f01      	subs	r7, #1
 80072fc:	d501      	bpl.n	8007302 <_fwalk_reent+0x22>
 80072fe:	6824      	ldr	r4, [r4, #0]
 8007300:	e7f5      	b.n	80072ee <_fwalk_reent+0xe>
 8007302:	89ab      	ldrh	r3, [r5, #12]
 8007304:	2b01      	cmp	r3, #1
 8007306:	d907      	bls.n	8007318 <_fwalk_reent+0x38>
 8007308:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800730c:	3301      	adds	r3, #1
 800730e:	d003      	beq.n	8007318 <_fwalk_reent+0x38>
 8007310:	4629      	mov	r1, r5
 8007312:	4640      	mov	r0, r8
 8007314:	47c8      	blx	r9
 8007316:	4306      	orrs	r6, r0
 8007318:	3568      	adds	r5, #104	; 0x68
 800731a:	e7ee      	b.n	80072fa <_fwalk_reent+0x1a>

0800731c <__swhatbuf_r>:
 800731c:	b570      	push	{r4, r5, r6, lr}
 800731e:	460e      	mov	r6, r1
 8007320:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007324:	2900      	cmp	r1, #0
 8007326:	b096      	sub	sp, #88	; 0x58
 8007328:	4614      	mov	r4, r2
 800732a:	461d      	mov	r5, r3
 800732c:	da07      	bge.n	800733e <__swhatbuf_r+0x22>
 800732e:	2300      	movs	r3, #0
 8007330:	602b      	str	r3, [r5, #0]
 8007332:	89b3      	ldrh	r3, [r6, #12]
 8007334:	061a      	lsls	r2, r3, #24
 8007336:	d410      	bmi.n	800735a <__swhatbuf_r+0x3e>
 8007338:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800733c:	e00e      	b.n	800735c <__swhatbuf_r+0x40>
 800733e:	466a      	mov	r2, sp
 8007340:	f000 f96e 	bl	8007620 <_fstat_r>
 8007344:	2800      	cmp	r0, #0
 8007346:	dbf2      	blt.n	800732e <__swhatbuf_r+0x12>
 8007348:	9a01      	ldr	r2, [sp, #4]
 800734a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800734e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007352:	425a      	negs	r2, r3
 8007354:	415a      	adcs	r2, r3
 8007356:	602a      	str	r2, [r5, #0]
 8007358:	e7ee      	b.n	8007338 <__swhatbuf_r+0x1c>
 800735a:	2340      	movs	r3, #64	; 0x40
 800735c:	2000      	movs	r0, #0
 800735e:	6023      	str	r3, [r4, #0]
 8007360:	b016      	add	sp, #88	; 0x58
 8007362:	bd70      	pop	{r4, r5, r6, pc}

08007364 <__smakebuf_r>:
 8007364:	898b      	ldrh	r3, [r1, #12]
 8007366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007368:	079d      	lsls	r5, r3, #30
 800736a:	4606      	mov	r6, r0
 800736c:	460c      	mov	r4, r1
 800736e:	d507      	bpl.n	8007380 <__smakebuf_r+0x1c>
 8007370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007374:	6023      	str	r3, [r4, #0]
 8007376:	6123      	str	r3, [r4, #16]
 8007378:	2301      	movs	r3, #1
 800737a:	6163      	str	r3, [r4, #20]
 800737c:	b002      	add	sp, #8
 800737e:	bd70      	pop	{r4, r5, r6, pc}
 8007380:	ab01      	add	r3, sp, #4
 8007382:	466a      	mov	r2, sp
 8007384:	f7ff ffca 	bl	800731c <__swhatbuf_r>
 8007388:	9900      	ldr	r1, [sp, #0]
 800738a:	4605      	mov	r5, r0
 800738c:	4630      	mov	r0, r6
 800738e:	f000 f877 	bl	8007480 <_malloc_r>
 8007392:	b948      	cbnz	r0, 80073a8 <__smakebuf_r+0x44>
 8007394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007398:	059a      	lsls	r2, r3, #22
 800739a:	d4ef      	bmi.n	800737c <__smakebuf_r+0x18>
 800739c:	f023 0303 	bic.w	r3, r3, #3
 80073a0:	f043 0302 	orr.w	r3, r3, #2
 80073a4:	81a3      	strh	r3, [r4, #12]
 80073a6:	e7e3      	b.n	8007370 <__smakebuf_r+0xc>
 80073a8:	4b0d      	ldr	r3, [pc, #52]	; (80073e0 <__smakebuf_r+0x7c>)
 80073aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	6020      	str	r0, [r4, #0]
 80073b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073b4:	81a3      	strh	r3, [r4, #12]
 80073b6:	9b00      	ldr	r3, [sp, #0]
 80073b8:	6163      	str	r3, [r4, #20]
 80073ba:	9b01      	ldr	r3, [sp, #4]
 80073bc:	6120      	str	r0, [r4, #16]
 80073be:	b15b      	cbz	r3, 80073d8 <__smakebuf_r+0x74>
 80073c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80073c4:	4630      	mov	r0, r6
 80073c6:	f000 f93d 	bl	8007644 <_isatty_r>
 80073ca:	b128      	cbz	r0, 80073d8 <__smakebuf_r+0x74>
 80073cc:	89a3      	ldrh	r3, [r4, #12]
 80073ce:	f023 0303 	bic.w	r3, r3, #3
 80073d2:	f043 0301 	orr.w	r3, r3, #1
 80073d6:	81a3      	strh	r3, [r4, #12]
 80073d8:	89a3      	ldrh	r3, [r4, #12]
 80073da:	431d      	orrs	r5, r3
 80073dc:	81a5      	strh	r5, [r4, #12]
 80073de:	e7cd      	b.n	800737c <__smakebuf_r+0x18>
 80073e0:	080071d1 	.word	0x080071d1

080073e4 <_free_r>:
 80073e4:	b538      	push	{r3, r4, r5, lr}
 80073e6:	4605      	mov	r5, r0
 80073e8:	2900      	cmp	r1, #0
 80073ea:	d045      	beq.n	8007478 <_free_r+0x94>
 80073ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073f0:	1f0c      	subs	r4, r1, #4
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	bfb8      	it	lt
 80073f6:	18e4      	addlt	r4, r4, r3
 80073f8:	f000 f946 	bl	8007688 <__malloc_lock>
 80073fc:	4a1f      	ldr	r2, [pc, #124]	; (800747c <_free_r+0x98>)
 80073fe:	6813      	ldr	r3, [r2, #0]
 8007400:	4610      	mov	r0, r2
 8007402:	b933      	cbnz	r3, 8007412 <_free_r+0x2e>
 8007404:	6063      	str	r3, [r4, #4]
 8007406:	6014      	str	r4, [r2, #0]
 8007408:	4628      	mov	r0, r5
 800740a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800740e:	f000 b93c 	b.w	800768a <__malloc_unlock>
 8007412:	42a3      	cmp	r3, r4
 8007414:	d90c      	bls.n	8007430 <_free_r+0x4c>
 8007416:	6821      	ldr	r1, [r4, #0]
 8007418:	1862      	adds	r2, r4, r1
 800741a:	4293      	cmp	r3, r2
 800741c:	bf04      	itt	eq
 800741e:	681a      	ldreq	r2, [r3, #0]
 8007420:	685b      	ldreq	r3, [r3, #4]
 8007422:	6063      	str	r3, [r4, #4]
 8007424:	bf04      	itt	eq
 8007426:	1852      	addeq	r2, r2, r1
 8007428:	6022      	streq	r2, [r4, #0]
 800742a:	6004      	str	r4, [r0, #0]
 800742c:	e7ec      	b.n	8007408 <_free_r+0x24>
 800742e:	4613      	mov	r3, r2
 8007430:	685a      	ldr	r2, [r3, #4]
 8007432:	b10a      	cbz	r2, 8007438 <_free_r+0x54>
 8007434:	42a2      	cmp	r2, r4
 8007436:	d9fa      	bls.n	800742e <_free_r+0x4a>
 8007438:	6819      	ldr	r1, [r3, #0]
 800743a:	1858      	adds	r0, r3, r1
 800743c:	42a0      	cmp	r0, r4
 800743e:	d10b      	bne.n	8007458 <_free_r+0x74>
 8007440:	6820      	ldr	r0, [r4, #0]
 8007442:	4401      	add	r1, r0
 8007444:	1858      	adds	r0, r3, r1
 8007446:	4282      	cmp	r2, r0
 8007448:	6019      	str	r1, [r3, #0]
 800744a:	d1dd      	bne.n	8007408 <_free_r+0x24>
 800744c:	6810      	ldr	r0, [r2, #0]
 800744e:	6852      	ldr	r2, [r2, #4]
 8007450:	605a      	str	r2, [r3, #4]
 8007452:	4401      	add	r1, r0
 8007454:	6019      	str	r1, [r3, #0]
 8007456:	e7d7      	b.n	8007408 <_free_r+0x24>
 8007458:	d902      	bls.n	8007460 <_free_r+0x7c>
 800745a:	230c      	movs	r3, #12
 800745c:	602b      	str	r3, [r5, #0]
 800745e:	e7d3      	b.n	8007408 <_free_r+0x24>
 8007460:	6820      	ldr	r0, [r4, #0]
 8007462:	1821      	adds	r1, r4, r0
 8007464:	428a      	cmp	r2, r1
 8007466:	bf04      	itt	eq
 8007468:	6811      	ldreq	r1, [r2, #0]
 800746a:	6852      	ldreq	r2, [r2, #4]
 800746c:	6062      	str	r2, [r4, #4]
 800746e:	bf04      	itt	eq
 8007470:	1809      	addeq	r1, r1, r0
 8007472:	6021      	streq	r1, [r4, #0]
 8007474:	605c      	str	r4, [r3, #4]
 8007476:	e7c7      	b.n	8007408 <_free_r+0x24>
 8007478:	bd38      	pop	{r3, r4, r5, pc}
 800747a:	bf00      	nop
 800747c:	200002c0 	.word	0x200002c0

08007480 <_malloc_r>:
 8007480:	b570      	push	{r4, r5, r6, lr}
 8007482:	1ccd      	adds	r5, r1, #3
 8007484:	f025 0503 	bic.w	r5, r5, #3
 8007488:	3508      	adds	r5, #8
 800748a:	2d0c      	cmp	r5, #12
 800748c:	bf38      	it	cc
 800748e:	250c      	movcc	r5, #12
 8007490:	2d00      	cmp	r5, #0
 8007492:	4606      	mov	r6, r0
 8007494:	db01      	blt.n	800749a <_malloc_r+0x1a>
 8007496:	42a9      	cmp	r1, r5
 8007498:	d903      	bls.n	80074a2 <_malloc_r+0x22>
 800749a:	230c      	movs	r3, #12
 800749c:	6033      	str	r3, [r6, #0]
 800749e:	2000      	movs	r0, #0
 80074a0:	bd70      	pop	{r4, r5, r6, pc}
 80074a2:	f000 f8f1 	bl	8007688 <__malloc_lock>
 80074a6:	4a21      	ldr	r2, [pc, #132]	; (800752c <_malloc_r+0xac>)
 80074a8:	6814      	ldr	r4, [r2, #0]
 80074aa:	4621      	mov	r1, r4
 80074ac:	b991      	cbnz	r1, 80074d4 <_malloc_r+0x54>
 80074ae:	4c20      	ldr	r4, [pc, #128]	; (8007530 <_malloc_r+0xb0>)
 80074b0:	6823      	ldr	r3, [r4, #0]
 80074b2:	b91b      	cbnz	r3, 80074bc <_malloc_r+0x3c>
 80074b4:	4630      	mov	r0, r6
 80074b6:	f000 f83d 	bl	8007534 <_sbrk_r>
 80074ba:	6020      	str	r0, [r4, #0]
 80074bc:	4629      	mov	r1, r5
 80074be:	4630      	mov	r0, r6
 80074c0:	f000 f838 	bl	8007534 <_sbrk_r>
 80074c4:	1c43      	adds	r3, r0, #1
 80074c6:	d124      	bne.n	8007512 <_malloc_r+0x92>
 80074c8:	230c      	movs	r3, #12
 80074ca:	6033      	str	r3, [r6, #0]
 80074cc:	4630      	mov	r0, r6
 80074ce:	f000 f8dc 	bl	800768a <__malloc_unlock>
 80074d2:	e7e4      	b.n	800749e <_malloc_r+0x1e>
 80074d4:	680b      	ldr	r3, [r1, #0]
 80074d6:	1b5b      	subs	r3, r3, r5
 80074d8:	d418      	bmi.n	800750c <_malloc_r+0x8c>
 80074da:	2b0b      	cmp	r3, #11
 80074dc:	d90f      	bls.n	80074fe <_malloc_r+0x7e>
 80074de:	600b      	str	r3, [r1, #0]
 80074e0:	50cd      	str	r5, [r1, r3]
 80074e2:	18cc      	adds	r4, r1, r3
 80074e4:	4630      	mov	r0, r6
 80074e6:	f000 f8d0 	bl	800768a <__malloc_unlock>
 80074ea:	f104 000b 	add.w	r0, r4, #11
 80074ee:	1d23      	adds	r3, r4, #4
 80074f0:	f020 0007 	bic.w	r0, r0, #7
 80074f4:	1ac3      	subs	r3, r0, r3
 80074f6:	d0d3      	beq.n	80074a0 <_malloc_r+0x20>
 80074f8:	425a      	negs	r2, r3
 80074fa:	50e2      	str	r2, [r4, r3]
 80074fc:	e7d0      	b.n	80074a0 <_malloc_r+0x20>
 80074fe:	428c      	cmp	r4, r1
 8007500:	684b      	ldr	r3, [r1, #4]
 8007502:	bf16      	itet	ne
 8007504:	6063      	strne	r3, [r4, #4]
 8007506:	6013      	streq	r3, [r2, #0]
 8007508:	460c      	movne	r4, r1
 800750a:	e7eb      	b.n	80074e4 <_malloc_r+0x64>
 800750c:	460c      	mov	r4, r1
 800750e:	6849      	ldr	r1, [r1, #4]
 8007510:	e7cc      	b.n	80074ac <_malloc_r+0x2c>
 8007512:	1cc4      	adds	r4, r0, #3
 8007514:	f024 0403 	bic.w	r4, r4, #3
 8007518:	42a0      	cmp	r0, r4
 800751a:	d005      	beq.n	8007528 <_malloc_r+0xa8>
 800751c:	1a21      	subs	r1, r4, r0
 800751e:	4630      	mov	r0, r6
 8007520:	f000 f808 	bl	8007534 <_sbrk_r>
 8007524:	3001      	adds	r0, #1
 8007526:	d0cf      	beq.n	80074c8 <_malloc_r+0x48>
 8007528:	6025      	str	r5, [r4, #0]
 800752a:	e7db      	b.n	80074e4 <_malloc_r+0x64>
 800752c:	200002c0 	.word	0x200002c0
 8007530:	200002c4 	.word	0x200002c4

08007534 <_sbrk_r>:
 8007534:	b538      	push	{r3, r4, r5, lr}
 8007536:	4c06      	ldr	r4, [pc, #24]	; (8007550 <_sbrk_r+0x1c>)
 8007538:	2300      	movs	r3, #0
 800753a:	4605      	mov	r5, r0
 800753c:	4608      	mov	r0, r1
 800753e:	6023      	str	r3, [r4, #0]
 8007540:	f7fb fb54 	bl	8002bec <_sbrk>
 8007544:	1c43      	adds	r3, r0, #1
 8007546:	d102      	bne.n	800754e <_sbrk_r+0x1a>
 8007548:	6823      	ldr	r3, [r4, #0]
 800754a:	b103      	cbz	r3, 800754e <_sbrk_r+0x1a>
 800754c:	602b      	str	r3, [r5, #0]
 800754e:	bd38      	pop	{r3, r4, r5, pc}
 8007550:	20000c70 	.word	0x20000c70

08007554 <__sread>:
 8007554:	b510      	push	{r4, lr}
 8007556:	460c      	mov	r4, r1
 8007558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755c:	f000 f896 	bl	800768c <_read_r>
 8007560:	2800      	cmp	r0, #0
 8007562:	bfab      	itete	ge
 8007564:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007566:	89a3      	ldrhlt	r3, [r4, #12]
 8007568:	181b      	addge	r3, r3, r0
 800756a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800756e:	bfac      	ite	ge
 8007570:	6563      	strge	r3, [r4, #84]	; 0x54
 8007572:	81a3      	strhlt	r3, [r4, #12]
 8007574:	bd10      	pop	{r4, pc}

08007576 <__swrite>:
 8007576:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800757a:	461f      	mov	r7, r3
 800757c:	898b      	ldrh	r3, [r1, #12]
 800757e:	05db      	lsls	r3, r3, #23
 8007580:	4605      	mov	r5, r0
 8007582:	460c      	mov	r4, r1
 8007584:	4616      	mov	r6, r2
 8007586:	d505      	bpl.n	8007594 <__swrite+0x1e>
 8007588:	2302      	movs	r3, #2
 800758a:	2200      	movs	r2, #0
 800758c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007590:	f000 f868 	bl	8007664 <_lseek_r>
 8007594:	89a3      	ldrh	r3, [r4, #12]
 8007596:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800759a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800759e:	81a3      	strh	r3, [r4, #12]
 80075a0:	4632      	mov	r2, r6
 80075a2:	463b      	mov	r3, r7
 80075a4:	4628      	mov	r0, r5
 80075a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80075aa:	f000 b817 	b.w	80075dc <_write_r>

080075ae <__sseek>:
 80075ae:	b510      	push	{r4, lr}
 80075b0:	460c      	mov	r4, r1
 80075b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075b6:	f000 f855 	bl	8007664 <_lseek_r>
 80075ba:	1c43      	adds	r3, r0, #1
 80075bc:	89a3      	ldrh	r3, [r4, #12]
 80075be:	bf15      	itete	ne
 80075c0:	6560      	strne	r0, [r4, #84]	; 0x54
 80075c2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80075c6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80075ca:	81a3      	strheq	r3, [r4, #12]
 80075cc:	bf18      	it	ne
 80075ce:	81a3      	strhne	r3, [r4, #12]
 80075d0:	bd10      	pop	{r4, pc}

080075d2 <__sclose>:
 80075d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075d6:	f000 b813 	b.w	8007600 <_close_r>
	...

080075dc <_write_r>:
 80075dc:	b538      	push	{r3, r4, r5, lr}
 80075de:	4c07      	ldr	r4, [pc, #28]	; (80075fc <_write_r+0x20>)
 80075e0:	4605      	mov	r5, r0
 80075e2:	4608      	mov	r0, r1
 80075e4:	4611      	mov	r1, r2
 80075e6:	2200      	movs	r2, #0
 80075e8:	6022      	str	r2, [r4, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	f7f9 f934 	bl	8000858 <_write>
 80075f0:	1c43      	adds	r3, r0, #1
 80075f2:	d102      	bne.n	80075fa <_write_r+0x1e>
 80075f4:	6823      	ldr	r3, [r4, #0]
 80075f6:	b103      	cbz	r3, 80075fa <_write_r+0x1e>
 80075f8:	602b      	str	r3, [r5, #0]
 80075fa:	bd38      	pop	{r3, r4, r5, pc}
 80075fc:	20000c70 	.word	0x20000c70

08007600 <_close_r>:
 8007600:	b538      	push	{r3, r4, r5, lr}
 8007602:	4c06      	ldr	r4, [pc, #24]	; (800761c <_close_r+0x1c>)
 8007604:	2300      	movs	r3, #0
 8007606:	4605      	mov	r5, r0
 8007608:	4608      	mov	r0, r1
 800760a:	6023      	str	r3, [r4, #0]
 800760c:	f7fb fab9 	bl	8002b82 <_close>
 8007610:	1c43      	adds	r3, r0, #1
 8007612:	d102      	bne.n	800761a <_close_r+0x1a>
 8007614:	6823      	ldr	r3, [r4, #0]
 8007616:	b103      	cbz	r3, 800761a <_close_r+0x1a>
 8007618:	602b      	str	r3, [r5, #0]
 800761a:	bd38      	pop	{r3, r4, r5, pc}
 800761c:	20000c70 	.word	0x20000c70

08007620 <_fstat_r>:
 8007620:	b538      	push	{r3, r4, r5, lr}
 8007622:	4c07      	ldr	r4, [pc, #28]	; (8007640 <_fstat_r+0x20>)
 8007624:	2300      	movs	r3, #0
 8007626:	4605      	mov	r5, r0
 8007628:	4608      	mov	r0, r1
 800762a:	4611      	mov	r1, r2
 800762c:	6023      	str	r3, [r4, #0]
 800762e:	f7fb fab4 	bl	8002b9a <_fstat>
 8007632:	1c43      	adds	r3, r0, #1
 8007634:	d102      	bne.n	800763c <_fstat_r+0x1c>
 8007636:	6823      	ldr	r3, [r4, #0]
 8007638:	b103      	cbz	r3, 800763c <_fstat_r+0x1c>
 800763a:	602b      	str	r3, [r5, #0]
 800763c:	bd38      	pop	{r3, r4, r5, pc}
 800763e:	bf00      	nop
 8007640:	20000c70 	.word	0x20000c70

08007644 <_isatty_r>:
 8007644:	b538      	push	{r3, r4, r5, lr}
 8007646:	4c06      	ldr	r4, [pc, #24]	; (8007660 <_isatty_r+0x1c>)
 8007648:	2300      	movs	r3, #0
 800764a:	4605      	mov	r5, r0
 800764c:	4608      	mov	r0, r1
 800764e:	6023      	str	r3, [r4, #0]
 8007650:	f7fb fab3 	bl	8002bba <_isatty>
 8007654:	1c43      	adds	r3, r0, #1
 8007656:	d102      	bne.n	800765e <_isatty_r+0x1a>
 8007658:	6823      	ldr	r3, [r4, #0]
 800765a:	b103      	cbz	r3, 800765e <_isatty_r+0x1a>
 800765c:	602b      	str	r3, [r5, #0]
 800765e:	bd38      	pop	{r3, r4, r5, pc}
 8007660:	20000c70 	.word	0x20000c70

08007664 <_lseek_r>:
 8007664:	b538      	push	{r3, r4, r5, lr}
 8007666:	4c07      	ldr	r4, [pc, #28]	; (8007684 <_lseek_r+0x20>)
 8007668:	4605      	mov	r5, r0
 800766a:	4608      	mov	r0, r1
 800766c:	4611      	mov	r1, r2
 800766e:	2200      	movs	r2, #0
 8007670:	6022      	str	r2, [r4, #0]
 8007672:	461a      	mov	r2, r3
 8007674:	f7fb faac 	bl	8002bd0 <_lseek>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d102      	bne.n	8007682 <_lseek_r+0x1e>
 800767c:	6823      	ldr	r3, [r4, #0]
 800767e:	b103      	cbz	r3, 8007682 <_lseek_r+0x1e>
 8007680:	602b      	str	r3, [r5, #0]
 8007682:	bd38      	pop	{r3, r4, r5, pc}
 8007684:	20000c70 	.word	0x20000c70

08007688 <__malloc_lock>:
 8007688:	4770      	bx	lr

0800768a <__malloc_unlock>:
 800768a:	4770      	bx	lr

0800768c <_read_r>:
 800768c:	b538      	push	{r3, r4, r5, lr}
 800768e:	4c07      	ldr	r4, [pc, #28]	; (80076ac <_read_r+0x20>)
 8007690:	4605      	mov	r5, r0
 8007692:	4608      	mov	r0, r1
 8007694:	4611      	mov	r1, r2
 8007696:	2200      	movs	r2, #0
 8007698:	6022      	str	r2, [r4, #0]
 800769a:	461a      	mov	r2, r3
 800769c:	f7fb fa54 	bl	8002b48 <_read>
 80076a0:	1c43      	adds	r3, r0, #1
 80076a2:	d102      	bne.n	80076aa <_read_r+0x1e>
 80076a4:	6823      	ldr	r3, [r4, #0]
 80076a6:	b103      	cbz	r3, 80076aa <_read_r+0x1e>
 80076a8:	602b      	str	r3, [r5, #0]
 80076aa:	bd38      	pop	{r3, r4, r5, pc}
 80076ac:	20000c70 	.word	0x20000c70

080076b0 <_init>:
 80076b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076b2:	bf00      	nop
 80076b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076b6:	bc08      	pop	{r3}
 80076b8:	469e      	mov	lr, r3
 80076ba:	4770      	bx	lr

080076bc <_fini>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr
