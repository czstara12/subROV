
subROV.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c8  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000b08  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009058  08009058  00020244  2**0
                  CONTENTS
  4 .ARM          00000008  08009058  08009058  00019058  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009060  08009060  00020244  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009060  08009060  00019060  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009064  08009064  00019064  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000244  20000000  08009068  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000b20  20000244  080092ac  00020244  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000d64  080092ac  00020d64  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020244  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016244  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003249  00000000  00000000  000364b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001208  00000000  00000000  00039708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  0003a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022bbb  00000000  00000000  0003b9d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00014ec8  00000000  00000000  0005e58b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d018a  00000000  00000000  00073453  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001435dd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000051e0  00000000  00000000  00143630  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000244 	.word	0x20000244
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008538 	.word	0x08008538

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000248 	.word	0x20000248
 80001c4:	08008538 	.word	0x08008538

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	3c01      	subs	r4, #1
 8000304:	bf28      	it	cs
 8000306:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800030a:	d2e9      	bcs.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__aeabi_d2f>:
 8000964:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000968:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800096c:	bf24      	itt	cs
 800096e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000972:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000976:	d90d      	bls.n	8000994 <__aeabi_d2f+0x30>
 8000978:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800097c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000980:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000984:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000988:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800098c:	bf08      	it	eq
 800098e:	f020 0001 	biceq.w	r0, r0, #1
 8000992:	4770      	bx	lr
 8000994:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000998:	d121      	bne.n	80009de <__aeabi_d2f+0x7a>
 800099a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800099e:	bfbc      	itt	lt
 80009a0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80009a4:	4770      	bxlt	lr
 80009a6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009aa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80009ae:	f1c2 0218 	rsb	r2, r2, #24
 80009b2:	f1c2 0c20 	rsb	ip, r2, #32
 80009b6:	fa10 f30c 	lsls.w	r3, r0, ip
 80009ba:	fa20 f002 	lsr.w	r0, r0, r2
 80009be:	bf18      	it	ne
 80009c0:	f040 0001 	orrne.w	r0, r0, #1
 80009c4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009c8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80009cc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80009d0:	ea40 000c 	orr.w	r0, r0, ip
 80009d4:	fa23 f302 	lsr.w	r3, r3, r2
 80009d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80009dc:	e7cc      	b.n	8000978 <__aeabi_d2f+0x14>
 80009de:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80009e2:	d107      	bne.n	80009f4 <__aeabi_d2f+0x90>
 80009e4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80009e8:	bf1e      	ittt	ne
 80009ea:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80009ee:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80009f2:	4770      	bxne	lr
 80009f4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80009f8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80009fc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a00:	4770      	bx	lr
 8000a02:	bf00      	nop

08000a04 <__aeabi_uldivmod>:
 8000a04:	b953      	cbnz	r3, 8000a1c <__aeabi_uldivmod+0x18>
 8000a06:	b94a      	cbnz	r2, 8000a1c <__aeabi_uldivmod+0x18>
 8000a08:	2900      	cmp	r1, #0
 8000a0a:	bf08      	it	eq
 8000a0c:	2800      	cmpeq	r0, #0
 8000a0e:	bf1c      	itt	ne
 8000a10:	f04f 31ff 	movne.w	r1, #4294967295
 8000a14:	f04f 30ff 	movne.w	r0, #4294967295
 8000a18:	f000 b96e 	b.w	8000cf8 <__aeabi_idiv0>
 8000a1c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a20:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a24:	f000 f806 	bl	8000a34 <__udivmoddi4>
 8000a28:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a2c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a30:	b004      	add	sp, #16
 8000a32:	4770      	bx	lr

08000a34 <__udivmoddi4>:
 8000a34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a38:	9d08      	ldr	r5, [sp, #32]
 8000a3a:	4604      	mov	r4, r0
 8000a3c:	468c      	mov	ip, r1
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	f040 8083 	bne.w	8000b4a <__udivmoddi4+0x116>
 8000a44:	428a      	cmp	r2, r1
 8000a46:	4617      	mov	r7, r2
 8000a48:	d947      	bls.n	8000ada <__udivmoddi4+0xa6>
 8000a4a:	fab2 f282 	clz	r2, r2
 8000a4e:	b142      	cbz	r2, 8000a62 <__udivmoddi4+0x2e>
 8000a50:	f1c2 0020 	rsb	r0, r2, #32
 8000a54:	fa24 f000 	lsr.w	r0, r4, r0
 8000a58:	4091      	lsls	r1, r2
 8000a5a:	4097      	lsls	r7, r2
 8000a5c:	ea40 0c01 	orr.w	ip, r0, r1
 8000a60:	4094      	lsls	r4, r2
 8000a62:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000a66:	0c23      	lsrs	r3, r4, #16
 8000a68:	fbbc f6f8 	udiv	r6, ip, r8
 8000a6c:	fa1f fe87 	uxth.w	lr, r7
 8000a70:	fb08 c116 	mls	r1, r8, r6, ip
 8000a74:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000a78:	fb06 f10e 	mul.w	r1, r6, lr
 8000a7c:	4299      	cmp	r1, r3
 8000a7e:	d909      	bls.n	8000a94 <__udivmoddi4+0x60>
 8000a80:	18fb      	adds	r3, r7, r3
 8000a82:	f106 30ff 	add.w	r0, r6, #4294967295
 8000a86:	f080 8119 	bcs.w	8000cbc <__udivmoddi4+0x288>
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	f240 8116 	bls.w	8000cbc <__udivmoddi4+0x288>
 8000a90:	3e02      	subs	r6, #2
 8000a92:	443b      	add	r3, r7
 8000a94:	1a5b      	subs	r3, r3, r1
 8000a96:	b2a4      	uxth	r4, r4
 8000a98:	fbb3 f0f8 	udiv	r0, r3, r8
 8000a9c:	fb08 3310 	mls	r3, r8, r0, r3
 8000aa0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000aa4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000aa8:	45a6      	cmp	lr, r4
 8000aaa:	d909      	bls.n	8000ac0 <__udivmoddi4+0x8c>
 8000aac:	193c      	adds	r4, r7, r4
 8000aae:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ab2:	f080 8105 	bcs.w	8000cc0 <__udivmoddi4+0x28c>
 8000ab6:	45a6      	cmp	lr, r4
 8000ab8:	f240 8102 	bls.w	8000cc0 <__udivmoddi4+0x28c>
 8000abc:	3802      	subs	r0, #2
 8000abe:	443c      	add	r4, r7
 8000ac0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ac4:	eba4 040e 	sub.w	r4, r4, lr
 8000ac8:	2600      	movs	r6, #0
 8000aca:	b11d      	cbz	r5, 8000ad4 <__udivmoddi4+0xa0>
 8000acc:	40d4      	lsrs	r4, r2
 8000ace:	2300      	movs	r3, #0
 8000ad0:	e9c5 4300 	strd	r4, r3, [r5]
 8000ad4:	4631      	mov	r1, r6
 8000ad6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ada:	b902      	cbnz	r2, 8000ade <__udivmoddi4+0xaa>
 8000adc:	deff      	udf	#255	; 0xff
 8000ade:	fab2 f282 	clz	r2, r2
 8000ae2:	2a00      	cmp	r2, #0
 8000ae4:	d150      	bne.n	8000b88 <__udivmoddi4+0x154>
 8000ae6:	1bcb      	subs	r3, r1, r7
 8000ae8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000aec:	fa1f f887 	uxth.w	r8, r7
 8000af0:	2601      	movs	r6, #1
 8000af2:	fbb3 fcfe 	udiv	ip, r3, lr
 8000af6:	0c21      	lsrs	r1, r4, #16
 8000af8:	fb0e 331c 	mls	r3, lr, ip, r3
 8000afc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000b00:	fb08 f30c 	mul.w	r3, r8, ip
 8000b04:	428b      	cmp	r3, r1
 8000b06:	d907      	bls.n	8000b18 <__udivmoddi4+0xe4>
 8000b08:	1879      	adds	r1, r7, r1
 8000b0a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000b0e:	d202      	bcs.n	8000b16 <__udivmoddi4+0xe2>
 8000b10:	428b      	cmp	r3, r1
 8000b12:	f200 80e9 	bhi.w	8000ce8 <__udivmoddi4+0x2b4>
 8000b16:	4684      	mov	ip, r0
 8000b18:	1ac9      	subs	r1, r1, r3
 8000b1a:	b2a3      	uxth	r3, r4
 8000b1c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000b20:	fb0e 1110 	mls	r1, lr, r0, r1
 8000b24:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000b28:	fb08 f800 	mul.w	r8, r8, r0
 8000b2c:	45a0      	cmp	r8, r4
 8000b2e:	d907      	bls.n	8000b40 <__udivmoddi4+0x10c>
 8000b30:	193c      	adds	r4, r7, r4
 8000b32:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b36:	d202      	bcs.n	8000b3e <__udivmoddi4+0x10a>
 8000b38:	45a0      	cmp	r8, r4
 8000b3a:	f200 80d9 	bhi.w	8000cf0 <__udivmoddi4+0x2bc>
 8000b3e:	4618      	mov	r0, r3
 8000b40:	eba4 0408 	sub.w	r4, r4, r8
 8000b44:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000b48:	e7bf      	b.n	8000aca <__udivmoddi4+0x96>
 8000b4a:	428b      	cmp	r3, r1
 8000b4c:	d909      	bls.n	8000b62 <__udivmoddi4+0x12e>
 8000b4e:	2d00      	cmp	r5, #0
 8000b50:	f000 80b1 	beq.w	8000cb6 <__udivmoddi4+0x282>
 8000b54:	2600      	movs	r6, #0
 8000b56:	e9c5 0100 	strd	r0, r1, [r5]
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	4631      	mov	r1, r6
 8000b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b62:	fab3 f683 	clz	r6, r3
 8000b66:	2e00      	cmp	r6, #0
 8000b68:	d14a      	bne.n	8000c00 <__udivmoddi4+0x1cc>
 8000b6a:	428b      	cmp	r3, r1
 8000b6c:	d302      	bcc.n	8000b74 <__udivmoddi4+0x140>
 8000b6e:	4282      	cmp	r2, r0
 8000b70:	f200 80b8 	bhi.w	8000ce4 <__udivmoddi4+0x2b0>
 8000b74:	1a84      	subs	r4, r0, r2
 8000b76:	eb61 0103 	sbc.w	r1, r1, r3
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2d00      	cmp	r5, #0
 8000b80:	d0a8      	beq.n	8000ad4 <__udivmoddi4+0xa0>
 8000b82:	e9c5 4c00 	strd	r4, ip, [r5]
 8000b86:	e7a5      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000b88:	f1c2 0320 	rsb	r3, r2, #32
 8000b8c:	fa20 f603 	lsr.w	r6, r0, r3
 8000b90:	4097      	lsls	r7, r2
 8000b92:	fa01 f002 	lsl.w	r0, r1, r2
 8000b96:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b9a:	40d9      	lsrs	r1, r3
 8000b9c:	4330      	orrs	r0, r6
 8000b9e:	0c03      	lsrs	r3, r0, #16
 8000ba0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ba4:	fa1f f887 	uxth.w	r8, r7
 8000ba8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000bac:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb0:	fb06 f108 	mul.w	r1, r6, r8
 8000bb4:	4299      	cmp	r1, r3
 8000bb6:	fa04 f402 	lsl.w	r4, r4, r2
 8000bba:	d909      	bls.n	8000bd0 <__udivmoddi4+0x19c>
 8000bbc:	18fb      	adds	r3, r7, r3
 8000bbe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000bc2:	f080 808d 	bcs.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bc6:	4299      	cmp	r1, r3
 8000bc8:	f240 808a 	bls.w	8000ce0 <__udivmoddi4+0x2ac>
 8000bcc:	3e02      	subs	r6, #2
 8000bce:	443b      	add	r3, r7
 8000bd0:	1a5b      	subs	r3, r3, r1
 8000bd2:	b281      	uxth	r1, r0
 8000bd4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bd8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bdc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000be0:	fb00 f308 	mul.w	r3, r0, r8
 8000be4:	428b      	cmp	r3, r1
 8000be6:	d907      	bls.n	8000bf8 <__udivmoddi4+0x1c4>
 8000be8:	1879      	adds	r1, r7, r1
 8000bea:	f100 3cff 	add.w	ip, r0, #4294967295
 8000bee:	d273      	bcs.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf0:	428b      	cmp	r3, r1
 8000bf2:	d971      	bls.n	8000cd8 <__udivmoddi4+0x2a4>
 8000bf4:	3802      	subs	r0, #2
 8000bf6:	4439      	add	r1, r7
 8000bf8:	1acb      	subs	r3, r1, r3
 8000bfa:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000bfe:	e778      	b.n	8000af2 <__udivmoddi4+0xbe>
 8000c00:	f1c6 0c20 	rsb	ip, r6, #32
 8000c04:	fa03 f406 	lsl.w	r4, r3, r6
 8000c08:	fa22 f30c 	lsr.w	r3, r2, ip
 8000c0c:	431c      	orrs	r4, r3
 8000c0e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000c12:	fa01 f306 	lsl.w	r3, r1, r6
 8000c16:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000c1a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000c1e:	431f      	orrs	r7, r3
 8000c20:	0c3b      	lsrs	r3, r7, #16
 8000c22:	fbb1 f9fe 	udiv	r9, r1, lr
 8000c26:	fa1f f884 	uxth.w	r8, r4
 8000c2a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000c2e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000c32:	fb09 fa08 	mul.w	sl, r9, r8
 8000c36:	458a      	cmp	sl, r1
 8000c38:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3c:	fa00 f306 	lsl.w	r3, r0, r6
 8000c40:	d908      	bls.n	8000c54 <__udivmoddi4+0x220>
 8000c42:	1861      	adds	r1, r4, r1
 8000c44:	f109 30ff 	add.w	r0, r9, #4294967295
 8000c48:	d248      	bcs.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4a:	458a      	cmp	sl, r1
 8000c4c:	d946      	bls.n	8000cdc <__udivmoddi4+0x2a8>
 8000c4e:	f1a9 0902 	sub.w	r9, r9, #2
 8000c52:	4421      	add	r1, r4
 8000c54:	eba1 010a 	sub.w	r1, r1, sl
 8000c58:	b2bf      	uxth	r7, r7
 8000c5a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c5e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c62:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000c66:	fb00 f808 	mul.w	r8, r0, r8
 8000c6a:	45b8      	cmp	r8, r7
 8000c6c:	d907      	bls.n	8000c7e <__udivmoddi4+0x24a>
 8000c6e:	19e7      	adds	r7, r4, r7
 8000c70:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c74:	d22e      	bcs.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c76:	45b8      	cmp	r8, r7
 8000c78:	d92c      	bls.n	8000cd4 <__udivmoddi4+0x2a0>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4427      	add	r7, r4
 8000c7e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000c82:	eba7 0708 	sub.w	r7, r7, r8
 8000c86:	fba0 8902 	umull	r8, r9, r0, r2
 8000c8a:	454f      	cmp	r7, r9
 8000c8c:	46c6      	mov	lr, r8
 8000c8e:	4649      	mov	r1, r9
 8000c90:	d31a      	bcc.n	8000cc8 <__udivmoddi4+0x294>
 8000c92:	d017      	beq.n	8000cc4 <__udivmoddi4+0x290>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x27a>
 8000c96:	ebb3 020e 	subs.w	r2, r3, lr
 8000c9a:	eb67 0701 	sbc.w	r7, r7, r1
 8000c9e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000ca2:	40f2      	lsrs	r2, r6
 8000ca4:	ea4c 0202 	orr.w	r2, ip, r2
 8000ca8:	40f7      	lsrs	r7, r6
 8000caa:	e9c5 2700 	strd	r2, r7, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	462e      	mov	r6, r5
 8000cb8:	4628      	mov	r0, r5
 8000cba:	e70b      	b.n	8000ad4 <__udivmoddi4+0xa0>
 8000cbc:	4606      	mov	r6, r0
 8000cbe:	e6e9      	b.n	8000a94 <__udivmoddi4+0x60>
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	e6fd      	b.n	8000ac0 <__udivmoddi4+0x8c>
 8000cc4:	4543      	cmp	r3, r8
 8000cc6:	d2e5      	bcs.n	8000c94 <__udivmoddi4+0x260>
 8000cc8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ccc:	eb69 0104 	sbc.w	r1, r9, r4
 8000cd0:	3801      	subs	r0, #1
 8000cd2:	e7df      	b.n	8000c94 <__udivmoddi4+0x260>
 8000cd4:	4608      	mov	r0, r1
 8000cd6:	e7d2      	b.n	8000c7e <__udivmoddi4+0x24a>
 8000cd8:	4660      	mov	r0, ip
 8000cda:	e78d      	b.n	8000bf8 <__udivmoddi4+0x1c4>
 8000cdc:	4681      	mov	r9, r0
 8000cde:	e7b9      	b.n	8000c54 <__udivmoddi4+0x220>
 8000ce0:	4666      	mov	r6, ip
 8000ce2:	e775      	b.n	8000bd0 <__udivmoddi4+0x19c>
 8000ce4:	4630      	mov	r0, r6
 8000ce6:	e74a      	b.n	8000b7e <__udivmoddi4+0x14a>
 8000ce8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000cec:	4439      	add	r1, r7
 8000cee:	e713      	b.n	8000b18 <__udivmoddi4+0xe4>
 8000cf0:	3802      	subs	r0, #2
 8000cf2:	443c      	add	r4, r7
 8000cf4:	e724      	b.n	8000b40 <__udivmoddi4+0x10c>
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_idiv0>:
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop

08000cfc <PID_init>:
};
//Roll,Pitch,Yaw,z x y
float target_ver[6];
int pidinit = 0;
void PID_init()
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
    target_ver[0] = 0;
 8000d00:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <PID_init+0x2c>)
 8000d02:	f04f 0200 	mov.w	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
    target_ver[1] = 0;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <PID_init+0x2c>)
 8000d0a:	f04f 0200 	mov.w	r2, #0
 8000d0e:	605a      	str	r2, [r3, #4]
    target_ver[2] = yaw;
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <PID_init+0x30>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <PID_init+0x2c>)
 8000d16:	6093      	str	r3, [r2, #8]
    pidinit = 1;
 8000d18:	4b05      	ldr	r3, [pc, #20]	; (8000d30 <PID_init+0x34>)
 8000d1a:	2201      	movs	r2, #1
 8000d1c:	601a      	str	r2, [r3, #0]
}
 8000d1e:	bf00      	nop
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	200002fc 	.word	0x200002fc
 8000d2c:	20000370 	.word	0x20000370
 8000d30:	20000260 	.word	0x20000260

08000d34 <PID_CTRL>:

void PID_CTRL() //综合控制 encodeL左侧编码器 encodeR右侧编码器
{
 8000d34:	b480      	push	{r7}
 8000d36:	b089      	sub	sp, #36	; 0x24
 8000d38:	af00      	add	r7, sp, #0
    //out += Kpr * (err - err1) + Tir * err+Tdr*(err-2*err1+err2); //
    //增量式PID方程 输出=输出+P*(本次误差-上次误差)+I*本次误差
    float err[6];
    float tmp_yaw;
    tmp_yaw = target_ver[2];
 8000d3a:	4b95      	ldr	r3, [pc, #596]	; (8000f90 <PID_CTRL+0x25c>)
 8000d3c:	689b      	ldr	r3, [r3, #8]
 8000d3e:	61fb      	str	r3, [r7, #28]
    if (tmp_yaw > 180)
 8000d40:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d44:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8000f94 <PID_CTRL+0x260>
 8000d48:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d50:	dd08      	ble.n	8000d64 <PID_CTRL+0x30>
    	tmp_yaw = target_ver[2] - 360;
 8000d52:	4b8f      	ldr	r3, [pc, #572]	; (8000f90 <PID_CTRL+0x25c>)
 8000d54:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d58:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 8000f98 <PID_CTRL+0x264>
 8000d5c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000d60:	edc7 7a07 	vstr	s15, [r7, #28]
    if (tmp_yaw < -180)
 8000d64:	edd7 7a07 	vldr	s15, [r7, #28]
 8000d68:	ed9f 7a8c 	vldr	s14, [pc, #560]	; 8000f9c <PID_CTRL+0x268>
 8000d6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000d70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d74:	d508      	bpl.n	8000d88 <PID_CTRL+0x54>
    	tmp_yaw = target_ver[2] + 360;
 8000d76:	4b86      	ldr	r3, [pc, #536]	; (8000f90 <PID_CTRL+0x25c>)
 8000d78:	edd3 7a02 	vldr	s15, [r3, #8]
 8000d7c:	ed9f 7a86 	vldr	s14, [pc, #536]	; 8000f98 <PID_CTRL+0x264>
 8000d80:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000d84:	edc7 7a07 	vstr	s15, [r7, #28]

    err[0] = target_ver[0] - roll;  //求误差
 8000d88:	4b81      	ldr	r3, [pc, #516]	; (8000f90 <PID_CTRL+0x25c>)
 8000d8a:	ed93 7a00 	vldr	s14, [r3]
 8000d8e:	4b84      	ldr	r3, [pc, #528]	; (8000fa0 <PID_CTRL+0x26c>)
 8000d90:	edd3 7a00 	vldr	s15, [r3]
 8000d94:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000d98:	edc7 7a00 	vstr	s15, [r7]
    err[1] = target_ver[1] - pitch; //求误差
 8000d9c:	4b7c      	ldr	r3, [pc, #496]	; (8000f90 <PID_CTRL+0x25c>)
 8000d9e:	ed93 7a01 	vldr	s14, [r3, #4]
 8000da2:	4b80      	ldr	r3, [pc, #512]	; (8000fa4 <PID_CTRL+0x270>)
 8000da4:	edd3 7a00 	vldr	s15, [r3]
 8000da8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dac:	edc7 7a01 	vstr	s15, [r7, #4]
    err[2] = tmp_yaw - yaw;   //求误差
 8000db0:	4b7d      	ldr	r3, [pc, #500]	; (8000fa8 <PID_CTRL+0x274>)
 8000db2:	edd3 7a00 	vldr	s15, [r3]
 8000db6:	ed97 7a07 	vldr	s14, [r7, #28]
 8000dba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dbe:	edc7 7a02 	vstr	s15, [r7, #8]

    if (err[2] > 180)
 8000dc2:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dc6:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8000f94 <PID_CTRL+0x260>
 8000dca:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd2:	dd07      	ble.n	8000de4 <PID_CTRL+0xb0>
        err[2] -= 360;
 8000dd4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd8:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8000f98 <PID_CTRL+0x264>
 8000ddc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000de0:	edc7 7a02 	vstr	s15, [r7, #8]
    if (err[2] < -180)
 8000de4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000de8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8000f9c <PID_CTRL+0x268>
 8000dec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000df0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000df4:	d507      	bpl.n	8000e06 <PID_CTRL+0xd2>
        err[2] += 360;
 8000df6:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dfa:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8000f98 <PID_CTRL+0x264>
 8000dfe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8000e02:	edc7 7a02 	vstr	s15, [r7, #8]

    err[3] = target_ver[3]; //求误差
 8000e06:	4b62      	ldr	r3, [pc, #392]	; (8000f90 <PID_CTRL+0x25c>)
 8000e08:	68db      	ldr	r3, [r3, #12]
 8000e0a:	60fb      	str	r3, [r7, #12]
    err[4] = target_ver[4]; //求误差
 8000e0c:	4b60      	ldr	r3, [pc, #384]	; (8000f90 <PID_CTRL+0x25c>)
 8000e0e:	691b      	ldr	r3, [r3, #16]
 8000e10:	613b      	str	r3, [r7, #16]
    err[5] = target_ver[5]; //求误差
 8000e12:	4b5f      	ldr	r3, [pc, #380]	; (8000f90 <PID_CTRL+0x25c>)
 8000e14:	695b      	ldr	r3, [r3, #20]
 8000e16:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < 6; i++)
 8000e18:	2300      	movs	r3, #0
 8000e1a:	61bb      	str	r3, [r7, #24]
 8000e1c:	e0ad      	b.n	8000f7a <PID_CTRL+0x246>
    {
        pid_ver[i][3] += pid_ver[i][0] * (err[i] - pid_ver[i][4]) + pid_ver[i][1] * err[i] + pid_ver[i][2] * (err[i] - 2 * pid_ver[i][4] + pid_ver[i][5]);
 8000e1e:	4963      	ldr	r1, [pc, #396]	; (8000fac <PID_CTRL+0x278>)
 8000e20:	69ba      	ldr	r2, [r7, #24]
 8000e22:	4613      	mov	r3, r2
 8000e24:	00db      	lsls	r3, r3, #3
 8000e26:	1a9b      	subs	r3, r3, r2
 8000e28:	009b      	lsls	r3, r3, #2
 8000e2a:	440b      	add	r3, r1
 8000e2c:	330c      	adds	r3, #12
 8000e2e:	ed93 7a00 	vldr	s14, [r3]
 8000e32:	495e      	ldr	r1, [pc, #376]	; (8000fac <PID_CTRL+0x278>)
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4613      	mov	r3, r2
 8000e38:	00db      	lsls	r3, r3, #3
 8000e3a:	1a9b      	subs	r3, r3, r2
 8000e3c:	009b      	lsls	r3, r3, #2
 8000e3e:	440b      	add	r3, r1
 8000e40:	edd3 6a00 	vldr	s13, [r3]
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	009b      	lsls	r3, r3, #2
 8000e48:	f107 0220 	add.w	r2, r7, #32
 8000e4c:	4413      	add	r3, r2
 8000e4e:	3b20      	subs	r3, #32
 8000e50:	ed93 6a00 	vldr	s12, [r3]
 8000e54:	4955      	ldr	r1, [pc, #340]	; (8000fac <PID_CTRL+0x278>)
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	4613      	mov	r3, r2
 8000e5a:	00db      	lsls	r3, r3, #3
 8000e5c:	1a9b      	subs	r3, r3, r2
 8000e5e:	009b      	lsls	r3, r3, #2
 8000e60:	440b      	add	r3, r1
 8000e62:	3310      	adds	r3, #16
 8000e64:	edd3 7a00 	vldr	s15, [r3]
 8000e68:	ee76 7a67 	vsub.f32	s15, s12, s15
 8000e6c:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000e70:	494e      	ldr	r1, [pc, #312]	; (8000fac <PID_CTRL+0x278>)
 8000e72:	69ba      	ldr	r2, [r7, #24]
 8000e74:	4613      	mov	r3, r2
 8000e76:	00db      	lsls	r3, r3, #3
 8000e78:	1a9b      	subs	r3, r3, r2
 8000e7a:	009b      	lsls	r3, r3, #2
 8000e7c:	440b      	add	r3, r1
 8000e7e:	3304      	adds	r3, #4
 8000e80:	ed93 6a00 	vldr	s12, [r3]
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	009b      	lsls	r3, r3, #2
 8000e88:	f107 0220 	add.w	r2, r7, #32
 8000e8c:	4413      	add	r3, r2
 8000e8e:	3b20      	subs	r3, #32
 8000e90:	edd3 7a00 	vldr	s15, [r3]
 8000e94:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000e98:	ee76 6aa7 	vadd.f32	s13, s13, s15
 8000e9c:	4943      	ldr	r1, [pc, #268]	; (8000fac <PID_CTRL+0x278>)
 8000e9e:	69ba      	ldr	r2, [r7, #24]
 8000ea0:	4613      	mov	r3, r2
 8000ea2:	00db      	lsls	r3, r3, #3
 8000ea4:	1a9b      	subs	r3, r3, r2
 8000ea6:	009b      	lsls	r3, r3, #2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	3308      	adds	r3, #8
 8000eac:	ed93 6a00 	vldr	s12, [r3]
 8000eb0:	69bb      	ldr	r3, [r7, #24]
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	f107 0220 	add.w	r2, r7, #32
 8000eb8:	4413      	add	r3, r2
 8000eba:	3b20      	subs	r3, #32
 8000ebc:	edd3 5a00 	vldr	s11, [r3]
 8000ec0:	493a      	ldr	r1, [pc, #232]	; (8000fac <PID_CTRL+0x278>)
 8000ec2:	69ba      	ldr	r2, [r7, #24]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	00db      	lsls	r3, r3, #3
 8000ec8:	1a9b      	subs	r3, r3, r2
 8000eca:	009b      	lsls	r3, r3, #2
 8000ecc:	440b      	add	r3, r1
 8000ece:	3310      	adds	r3, #16
 8000ed0:	edd3 7a00 	vldr	s15, [r3]
 8000ed4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8000ed8:	ee75 5ae7 	vsub.f32	s11, s11, s15
 8000edc:	4933      	ldr	r1, [pc, #204]	; (8000fac <PID_CTRL+0x278>)
 8000ede:	69ba      	ldr	r2, [r7, #24]
 8000ee0:	4613      	mov	r3, r2
 8000ee2:	00db      	lsls	r3, r3, #3
 8000ee4:	1a9b      	subs	r3, r3, r2
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	440b      	add	r3, r1
 8000eea:	3314      	adds	r3, #20
 8000eec:	edd3 7a00 	vldr	s15, [r3]
 8000ef0:	ee75 7aa7 	vadd.f32	s15, s11, s15
 8000ef4:	ee66 7a27 	vmul.f32	s15, s12, s15
 8000ef8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8000efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000f00:	492a      	ldr	r1, [pc, #168]	; (8000fac <PID_CTRL+0x278>)
 8000f02:	69ba      	ldr	r2, [r7, #24]
 8000f04:	4613      	mov	r3, r2
 8000f06:	00db      	lsls	r3, r3, #3
 8000f08:	1a9b      	subs	r3, r3, r2
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	440b      	add	r3, r1
 8000f0e:	330c      	adds	r3, #12
 8000f10:	edc3 7a00 	vstr	s15, [r3]
        dof6[i] = pid_ver[i][3];       //输出到6自由度
 8000f14:	4925      	ldr	r1, [pc, #148]	; (8000fac <PID_CTRL+0x278>)
 8000f16:	69ba      	ldr	r2, [r7, #24]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	00db      	lsls	r3, r3, #3
 8000f1c:	1a9b      	subs	r3, r3, r2
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	440b      	add	r3, r1
 8000f22:	330c      	adds	r3, #12
 8000f24:	681a      	ldr	r2, [r3, #0]
 8000f26:	4922      	ldr	r1, [pc, #136]	; (8000fb0 <PID_CTRL+0x27c>)
 8000f28:	69bb      	ldr	r3, [r7, #24]
 8000f2a:	009b      	lsls	r3, r3, #2
 8000f2c:	440b      	add	r3, r1
 8000f2e:	601a      	str	r2, [r3, #0]
        pid_ver[i][5] = pid_ver[i][4]; //更新上上次误差
 8000f30:	491e      	ldr	r1, [pc, #120]	; (8000fac <PID_CTRL+0x278>)
 8000f32:	69ba      	ldr	r2, [r7, #24]
 8000f34:	4613      	mov	r3, r2
 8000f36:	00db      	lsls	r3, r3, #3
 8000f38:	1a9b      	subs	r3, r3, r2
 8000f3a:	009b      	lsls	r3, r3, #2
 8000f3c:	440b      	add	r3, r1
 8000f3e:	3310      	adds	r3, #16
 8000f40:	6819      	ldr	r1, [r3, #0]
 8000f42:	481a      	ldr	r0, [pc, #104]	; (8000fac <PID_CTRL+0x278>)
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4613      	mov	r3, r2
 8000f48:	00db      	lsls	r3, r3, #3
 8000f4a:	1a9b      	subs	r3, r3, r2
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4403      	add	r3, r0
 8000f50:	3314      	adds	r3, #20
 8000f52:	6019      	str	r1, [r3, #0]
        pid_ver[i][4] = err[i];        //更新上次误差
 8000f54:	69bb      	ldr	r3, [r7, #24]
 8000f56:	009b      	lsls	r3, r3, #2
 8000f58:	f107 0220 	add.w	r2, r7, #32
 8000f5c:	4413      	add	r3, r2
 8000f5e:	3b20      	subs	r3, #32
 8000f60:	6819      	ldr	r1, [r3, #0]
 8000f62:	4812      	ldr	r0, [pc, #72]	; (8000fac <PID_CTRL+0x278>)
 8000f64:	69ba      	ldr	r2, [r7, #24]
 8000f66:	4613      	mov	r3, r2
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	1a9b      	subs	r3, r3, r2
 8000f6c:	009b      	lsls	r3, r3, #2
 8000f6e:	4403      	add	r3, r0
 8000f70:	3310      	adds	r3, #16
 8000f72:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < 6; i++)
 8000f74:	69bb      	ldr	r3, [r7, #24]
 8000f76:	3301      	adds	r3, #1
 8000f78:	61bb      	str	r3, [r7, #24]
 8000f7a:	69bb      	ldr	r3, [r7, #24]
 8000f7c:	2b05      	cmp	r3, #5
 8000f7e:	f77f af4e 	ble.w	8000e1e <PID_CTRL+0xea>
    }
}
 8000f82:	bf00      	nop
 8000f84:	bf00      	nop
 8000f86:	3724      	adds	r7, #36	; 0x24
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr
 8000f90:	200002fc 	.word	0x200002fc
 8000f94:	43340000 	.word	0x43340000
 8000f98:	43b40000 	.word	0x43b40000
 8000f9c:	c3340000 	.word	0xc3340000
 8000fa0:	20000378 	.word	0x20000378
 8000fa4:	20000374 	.word	0x20000374
 8000fa8:	20000370 	.word	0x20000370
 8000fac:	20000000 	.word	0x20000000
 8000fb0:	20000264 	.word	0x20000264

08000fb4 <VRUinit>:
float pitch, roll, yaw,*dat;
int tim;
//UART_HandleTypeDef *VRUhuart;

void VRUinit(UART_HandleTypeDef *huart)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b082      	sub	sp, #8
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	//VRUhuart = huart;
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	68da      	ldr	r2, [r3, #12]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f042 0210 	orr.w	r2, r2, #16
 8000fca:	60da      	str	r2, [r3, #12]
    HAL_UART_Receive_DMA(huart, ch110, 82);
 8000fcc:	2252      	movs	r2, #82	; 0x52
 8000fce:	4904      	ldr	r1, [pc, #16]	; (8000fe0 <VRUinit+0x2c>)
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f005 fee5 	bl	8006da0 <HAL_UART_Receive_DMA>
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	2000031c 	.word	0x2000031c

08000fe4 <VRUupdate>:
//从串口中断触发 每次执行 提取姿态数据
void VRUupdate()
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
	float * datflo;
	datflo=(float *) (ch110 + 18);
 8000fea:	4b15      	ldr	r3, [pc, #84]	; (8001040 <VRUupdate+0x5c>)
 8000fec:	603b      	str	r3, [r7, #0]
	/*
	roll = *(float *) (ch110 + 54);
	pitch = *(float *) (ch110 + 58);
	yaw = *(float *) (ch110 + 62);
	*/
	roll = datflo[9];
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ff2:	4a14      	ldr	r2, [pc, #80]	; (8001044 <VRUupdate+0x60>)
 8000ff4:	6013      	str	r3, [r2, #0]
	pitch = datflo[10];
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ffa:	4a13      	ldr	r2, [pc, #76]	; (8001048 <VRUupdate+0x64>)
 8000ffc:	6013      	str	r3, [r2, #0]
	yaw = datflo[11];
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001002:	4a12      	ldr	r2, [pc, #72]	; (800104c <VRUupdate+0x68>)
 8001004:	6013      	str	r3, [r2, #0]

	for(int i=0;i<16;i++)
 8001006:	2300      	movs	r3, #0
 8001008:	607b      	str	r3, [r7, #4]
 800100a:	e00c      	b.n	8001026 <VRUupdate+0x42>
	{
		frame.fdata[i] = datflo[i];
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	009b      	lsls	r3, r3, #2
 8001010:	683a      	ldr	r2, [r7, #0]
 8001012:	4413      	add	r3, r2
 8001014:	681a      	ldr	r2, [r3, #0]
 8001016:	490e      	ldr	r1, [pc, #56]	; (8001050 <VRUupdate+0x6c>)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	009b      	lsls	r3, r3, #2
 800101c:	440b      	add	r3, r1
 800101e:	601a      	str	r2, [r3, #0]
	for(int i=0;i<16;i++)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	3301      	adds	r3, #1
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2b0f      	cmp	r3, #15
 800102a:	ddef      	ble.n	800100c <VRUupdate+0x28>
		//3角速度XYZ
		//6磁强度XYZ
		//9欧拉角Roll Pitch Yaw
		//12四元数WXYZ
	}
    if(pidinit == 0)
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <VRUupdate+0x70>)
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d101      	bne.n	8001038 <VRUupdate+0x54>
        PID_init();
 8001034:	f7ff fe62 	bl	8000cfc <PID_init>
    if(pidinit == 1)
    {
        PID_CTRL();
        setmotor();
    }*/
}
 8001038:	bf00      	nop
 800103a:	3708      	adds	r7, #8
 800103c:	46bd      	mov	sp, r7
 800103e:	bd80      	pop	{r7, pc}
 8001040:	2000032e 	.word	0x2000032e
 8001044:	20000378 	.word	0x20000378
 8001048:	20000374 	.word	0x20000374
 800104c:	20000370 	.word	0x20000370
 8001050:	200000a8 	.word	0x200000a8
 8001054:	20000260 	.word	0x20000260

08001058 <VRUerror>:
void VRUerror(UART_HandleTypeDef *huart)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f005 fecd 	bl	8006e00 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, ch110, 82);
 8001066:	2252      	movs	r2, #82	; 0x52
 8001068:	4903      	ldr	r1, [pc, #12]	; (8001078 <VRUerror+0x20>)
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f005 fe98 	bl	8006da0 <HAL_UART_Receive_DMA>
}
 8001070:	bf00      	nop
 8001072:	3708      	adds	r7, #8
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2000031c 	.word	0x2000031c

0800107c <_write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int _write(int file, char *ptr, int len) {
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	60f8      	str	r0, [r7, #12]
 8001084:	60b9      	str	r1, [r7, #8]
 8001086:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart1, (uint8_t*) ptr, len, 300);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	b29a      	uxth	r2, r3
 800108c:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8001090:	68b9      	ldr	r1, [r7, #8]
 8001092:	4804      	ldr	r0, [pc, #16]	; (80010a4 <_write+0x28>)
 8001094:	f005 fdad 	bl	8006bf2 <HAL_UART_Transmit>
	return len;
 8001098:	687b      	ldr	r3, [r7, #4]
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	2000068c 	.word	0x2000068c

080010a8 <HAL_UART_RxCpltCallback>:
void delay_ms(unsigned int ms) {
	HAL_Delay(ms);
	return;
}
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	4a08      	ldr	r2, [pc, #32]	; (80010d4 <HAL_UART_RxCpltCallback+0x2c>)
 80010b4:	4293      	cmp	r3, r2
 80010b6:	d102      	bne.n	80010be <HAL_UART_RxCpltCallback+0x16>
	{
		VRUupdate();
 80010b8:	f7ff ff94 	bl	8000fe4 <VRUupdate>
	}else if(&huart4==huart)
	 {
		raspi();
	}
}
 80010bc:	e005      	b.n	80010ca <HAL_UART_RxCpltCallback+0x22>
	}else if(&huart4==huart)
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a05      	ldr	r2, [pc, #20]	; (80010d8 <HAL_UART_RxCpltCallback+0x30>)
 80010c2:	4293      	cmp	r3, r2
 80010c4:	d101      	bne.n	80010ca <HAL_UART_RxCpltCallback+0x22>
		raspi();
 80010c6:	f001 fb0b 	bl	80026e0 <raspi>
}
 80010ca:	bf00      	nop
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	200007fc 	.word	0x200007fc
 80010d8:	20000718 	.word	0x20000718

080010dc <HAL_UART_ErrorCallback>:
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
	if(&huart2==huart)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	4a11      	ldr	r2, [pc, #68]	; (800112c <HAL_UART_ErrorCallback+0x50>)
 80010e8:	4293      	cmp	r3, r2
 80010ea:	d103      	bne.n	80010f4 <HAL_UART_ErrorCallback+0x18>
	{
		VRUerror(huart);
 80010ec:	6878      	ldr	r0, [r7, #4]
 80010ee:	f7ff ffb3 	bl	8001058 <VRUerror>
		//
	}else if(&huart4==huart)
	{
		raspierr(huart);
	}
}
 80010f2:	e016      	b.n	8001122 <HAL_UART_ErrorCallback+0x46>
	}else if(&huart1==huart)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	4a0e      	ldr	r2, [pc, #56]	; (8001130 <HAL_UART_ErrorCallback+0x54>)
 80010f8:	4293      	cmp	r3, r2
 80010fa:	d012      	beq.n	8001122 <HAL_UART_ErrorCallback+0x46>
	}else if(&huart5==huart)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a0d      	ldr	r2, [pc, #52]	; (8001134 <HAL_UART_ErrorCallback+0x58>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d103      	bne.n	800110c <HAL_UART_ErrorCallback+0x30>
		remoteerr(huart);
 8001104:	6878      	ldr	r0, [r7, #4]
 8001106:	f001 fc7d 	bl	8002a04 <remoteerr>
}
 800110a:	e00a      	b.n	8001122 <HAL_UART_ErrorCallback+0x46>
	}else if(&huart3==huart)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a0a      	ldr	r2, [pc, #40]	; (8001138 <HAL_UART_ErrorCallback+0x5c>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d006      	beq.n	8001122 <HAL_UART_ErrorCallback+0x46>
	}else if(&huart4==huart)
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a09      	ldr	r2, [pc, #36]	; (800113c <HAL_UART_ErrorCallback+0x60>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d102      	bne.n	8001122 <HAL_UART_ErrorCallback+0x46>
		raspierr(huart);
 800111c:	6878      	ldr	r0, [r7, #4]
 800111e:	f001 fb53 	bl	80027c8 <raspierr>
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
 800112a:	bf00      	nop
 800112c:	200007fc 	.word	0x200007fc
 8001130:	2000068c 	.word	0x2000068c
 8001134:	200005a0 	.word	0x200005a0
 8001138:	200004cc 	.word	0x200004cc
 800113c:	20000718 	.word	0x20000718

08001140 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	b082      	sub	sp, #8
 8001144:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001146:	f002 fb7f 	bl	8003848 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800114a:	f000 f86d 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800114e:	f000 fdb9 	bl	8001cc4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001152:	f000 fd71 	bl	8001c38 <MX_DMA_Init>
  MX_ADC1_Init();
 8001156:	f000 f8d1 	bl	80012fc <MX_ADC1_Init>
  MX_SPI1_Init();
 800115a:	f000 f921 	bl	80013a0 <MX_SPI1_Init>
  MX_TIM1_Init();
 800115e:	f000 f955 	bl	800140c <MX_TIM1_Init>
  MX_TIM2_Init();
 8001162:	f000 f9a3 	bl	80014ac <MX_TIM2_Init>
  MX_TIM3_Init();
 8001166:	f000 f9ed 	bl	8001544 <MX_TIM3_Init>
  MX_TIM4_Init();
 800116a:	f000 fa83 	bl	8001674 <MX_TIM4_Init>
  MX_TIM5_Init();
 800116e:	f000 fb19 	bl	80017a4 <MX_TIM5_Init>
  MX_TIM8_Init();
 8001172:	f000 fb7b 	bl	800186c <MX_TIM8_Init>
  MX_UART4_Init();
 8001176:	f000 fc8d 	bl	8001a94 <MX_UART4_Init>
  MX_UART5_Init();
 800117a:	f000 fcb5 	bl	8001ae8 <MX_UART5_Init>
  MX_USART1_UART_Init();
 800117e:	f000 fcdd 	bl	8001b3c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001182:	f000 fd05 	bl	8001b90 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001186:	f000 fd2d 	bl	8001be4 <MX_USART3_UART_Init>
  MX_TIM12_Init();
 800118a:	f000 fc33 	bl	80019f4 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim2);//delay function sppeeort
 800118e:	481c      	ldr	r0, [pc, #112]	; (8001200 <main+0xc0>)
 8001190:	f004 fc4e 	bl	8005a30 <HAL_TIM_Base_Start>

  motorinit();
 8001194:	f000 feac 	bl	8001ef0 <motorinit>

	HAL_TIM_Base_Start_IT(&htim1);
 8001198:	481a      	ldr	r0, [pc, #104]	; (8001204 <main+0xc4>)
 800119a:	f004 fcb1 	bl	8005b00 <HAL_TIM_Base_Start_IT>

	VRUinit(&huart2);
 800119e:	481a      	ldr	r0, [pc, #104]	; (8001208 <main+0xc8>)
 80011a0:	f7ff ff08 	bl	8000fb4 <VRUinit>
	OLED_Init();
 80011a4:	f001 f9e0 	bl	8002568 <OLED_Init>
	//PID_init();
	remoteInit(&huart5);
 80011a8:	4818      	ldr	r0, [pc, #96]	; (800120c <main+0xcc>)
 80011aa:	f001 fb1f 	bl	80027ec <remoteInit>
	raspiInit(&huart4);
 80011ae:	4818      	ldr	r0, [pc, #96]	; (8001210 <main+0xd0>)
 80011b0:	f001 fa86 	bl	80026c0 <raspiInit>
	//remoteInit(&huart1);
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  printf("hello\r\n");
 80011b4:	4817      	ldr	r0, [pc, #92]	; (8001214 <main+0xd4>)
 80011b6:	f006 fd67 	bl	8007c88 <puts>
  OLED_ShowString(0,0,"runing...");
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <main+0xd8>)
 80011bc:	2100      	movs	r1, #0
 80011be:	2000      	movs	r0, #0
 80011c0:	f001 f9a0 	bl	8002504 <OLED_ShowString>

  while (1)
  {
	  OLED_ShowString(0,12,"run time:");
 80011c4:	4a15      	ldr	r2, [pc, #84]	; (800121c <main+0xdc>)
 80011c6:	210c      	movs	r1, #12
 80011c8:	2000      	movs	r0, #0
 80011ca:	f001 f99b 	bl	8002504 <OLED_ShowString>
	  OLED_ShowNumber(0, 24, HAL_GetTick()/1000, 3, 12);
 80011ce:	f002 fb71 	bl	80038b4 <HAL_GetTick>
 80011d2:	4603      	mov	r3, r0
 80011d4:	4a12      	ldr	r2, [pc, #72]	; (8001220 <main+0xe0>)
 80011d6:	fba2 2303 	umull	r2, r3, r2, r3
 80011da:	099a      	lsrs	r2, r3, #6
 80011dc:	230c      	movs	r3, #12
 80011de:	9300      	str	r3, [sp, #0]
 80011e0:	2303      	movs	r3, #3
 80011e2:	2118      	movs	r1, #24
 80011e4:	2000      	movs	r0, #0
 80011e6:	f001 f91f 	bl	8002428 <OLED_ShowNumber>
	  OLED_ShowNumber(0, 36, raspiBuffer[10], 3, 12);
 80011ea:	4b0e      	ldr	r3, [pc, #56]	; (8001224 <main+0xe4>)
 80011ec:	7a9b      	ldrb	r3, [r3, #10]
 80011ee:	461a      	mov	r2, r3
 80011f0:	230c      	movs	r3, #12
 80011f2:	9300      	str	r3, [sp, #0]
 80011f4:	2303      	movs	r3, #3
 80011f6:	2124      	movs	r1, #36	; 0x24
 80011f8:	2000      	movs	r0, #0
 80011fa:	f001 f915 	bl	8002428 <OLED_ShowNumber>
	  OLED_ShowString(0,12,"run time:");
 80011fe:	e7e1      	b.n	80011c4 <main+0x84>
 8001200:	200007b4 	.word	0x200007b4
 8001204:	200006d0 	.word	0x200006d0
 8001208:	200007fc 	.word	0x200007fc
 800120c:	200005a0 	.word	0x200005a0
 8001210:	20000718 	.word	0x20000718
 8001214:	08008550 	.word	0x08008550
 8001218:	08008558 	.word	0x08008558
 800121c:	08008564 	.word	0x08008564
 8001220:	10624dd3 	.word	0x10624dd3
 8001224:	20000280 	.word	0x20000280

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b094      	sub	sp, #80	; 0x50
 800122c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800122e:	f107 0320 	add.w	r3, r7, #32
 8001232:	2230      	movs	r2, #48	; 0x30
 8001234:	2100      	movs	r1, #0
 8001236:	4618      	mov	r0, r3
 8001238:	f006 fcb0 	bl	8007b9c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800123c:	f107 030c 	add.w	r3, r7, #12
 8001240:	2200      	movs	r2, #0
 8001242:	601a      	str	r2, [r3, #0]
 8001244:	605a      	str	r2, [r3, #4]
 8001246:	609a      	str	r2, [r3, #8]
 8001248:	60da      	str	r2, [r3, #12]
 800124a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800124c:	2300      	movs	r3, #0
 800124e:	60bb      	str	r3, [r7, #8]
 8001250:	4b28      	ldr	r3, [pc, #160]	; (80012f4 <SystemClock_Config+0xcc>)
 8001252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001254:	4a27      	ldr	r2, [pc, #156]	; (80012f4 <SystemClock_Config+0xcc>)
 8001256:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800125a:	6413      	str	r3, [r2, #64]	; 0x40
 800125c:	4b25      	ldr	r3, [pc, #148]	; (80012f4 <SystemClock_Config+0xcc>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001264:	60bb      	str	r3, [r7, #8]
 8001266:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001268:	2300      	movs	r3, #0
 800126a:	607b      	str	r3, [r7, #4]
 800126c:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <SystemClock_Config+0xd0>)
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4a21      	ldr	r2, [pc, #132]	; (80012f8 <SystemClock_Config+0xd0>)
 8001272:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001276:	6013      	str	r3, [r2, #0]
 8001278:	4b1f      	ldr	r3, [pc, #124]	; (80012f8 <SystemClock_Config+0xd0>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001280:	607b      	str	r3, [r7, #4]
 8001282:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001284:	2301      	movs	r3, #1
 8001286:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001288:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800128c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800128e:	2302      	movs	r3, #2
 8001290:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001292:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001296:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001298:	2308      	movs	r3, #8
 800129a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800129c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80012a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012a2:	2302      	movs	r3, #2
 80012a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012a6:	2304      	movs	r3, #4
 80012a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012aa:	f107 0320 	add.w	r3, r7, #32
 80012ae:	4618      	mov	r0, r3
 80012b0:	f003 fc38 	bl	8004b24 <HAL_RCC_OscConfig>
 80012b4:	4603      	mov	r3, r0
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d001      	beq.n	80012be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012ba:	f000 fe13 	bl	8001ee4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012be:	230f      	movs	r3, #15
 80012c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012c2:	2302      	movs	r3, #2
 80012c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012c6:	2300      	movs	r3, #0
 80012c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80012ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012d0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012d6:	f107 030c 	add.w	r3, r7, #12
 80012da:	2105      	movs	r1, #5
 80012dc:	4618      	mov	r0, r3
 80012de:	f003 fe99 	bl	8005014 <HAL_RCC_ClockConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80012e8:	f000 fdfc 	bl	8001ee4 <Error_Handler>
  }
}
 80012ec:	bf00      	nop
 80012ee:	3750      	adds	r7, #80	; 0x50
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40007000 	.word	0x40007000

080012fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b084      	sub	sp, #16
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001302:	463b      	mov	r3, r7
 8001304:	2200      	movs	r2, #0
 8001306:	601a      	str	r2, [r3, #0]
 8001308:	605a      	str	r2, [r3, #4]
 800130a:	609a      	str	r2, [r3, #8]
 800130c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800130e:	4b21      	ldr	r3, [pc, #132]	; (8001394 <MX_ADC1_Init+0x98>)
 8001310:	4a21      	ldr	r2, [pc, #132]	; (8001398 <MX_ADC1_Init+0x9c>)
 8001312:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001314:	4b1f      	ldr	r3, [pc, #124]	; (8001394 <MX_ADC1_Init+0x98>)
 8001316:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800131a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800131c:	4b1d      	ldr	r3, [pc, #116]	; (8001394 <MX_ADC1_Init+0x98>)
 800131e:	2200      	movs	r2, #0
 8001320:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001322:	4b1c      	ldr	r3, [pc, #112]	; (8001394 <MX_ADC1_Init+0x98>)
 8001324:	2200      	movs	r2, #0
 8001326:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001328:	4b1a      	ldr	r3, [pc, #104]	; (8001394 <MX_ADC1_Init+0x98>)
 800132a:	2200      	movs	r2, #0
 800132c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800132e:	4b19      	ldr	r3, [pc, #100]	; (8001394 <MX_ADC1_Init+0x98>)
 8001330:	2200      	movs	r2, #0
 8001332:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001336:	4b17      	ldr	r3, [pc, #92]	; (8001394 <MX_ADC1_Init+0x98>)
 8001338:	2200      	movs	r2, #0
 800133a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800133c:	4b15      	ldr	r3, [pc, #84]	; (8001394 <MX_ADC1_Init+0x98>)
 800133e:	4a17      	ldr	r2, [pc, #92]	; (800139c <MX_ADC1_Init+0xa0>)
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001342:	4b14      	ldr	r3, [pc, #80]	; (8001394 <MX_ADC1_Init+0x98>)
 8001344:	2200      	movs	r2, #0
 8001346:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001348:	4b12      	ldr	r3, [pc, #72]	; (8001394 <MX_ADC1_Init+0x98>)
 800134a:	2201      	movs	r2, #1
 800134c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800134e:	4b11      	ldr	r3, [pc, #68]	; (8001394 <MX_ADC1_Init+0x98>)
 8001350:	2200      	movs	r2, #0
 8001352:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001356:	4b0f      	ldr	r3, [pc, #60]	; (8001394 <MX_ADC1_Init+0x98>)
 8001358:	2201      	movs	r2, #1
 800135a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800135c:	480d      	ldr	r0, [pc, #52]	; (8001394 <MX_ADC1_Init+0x98>)
 800135e:	f002 fad9 	bl	8003914 <HAL_ADC_Init>
 8001362:	4603      	mov	r3, r0
 8001364:	2b00      	cmp	r3, #0
 8001366:	d001      	beq.n	800136c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001368:	f000 fdbc 	bl	8001ee4 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800136c:	2304      	movs	r3, #4
 800136e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001370:	2301      	movs	r3, #1
 8001372:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001374:	2300      	movs	r3, #0
 8001376:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001378:	463b      	mov	r3, r7
 800137a:	4619      	mov	r1, r3
 800137c:	4805      	ldr	r0, [pc, #20]	; (8001394 <MX_ADC1_Init+0x98>)
 800137e:	f002 fb0d 	bl	800399c <HAL_ADC_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001388:	f000 fdac 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800138c:	bf00      	nop
 800138e:	3710      	adds	r7, #16
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	200005e4 	.word	0x200005e4
 8001398:	40012000 	.word	0x40012000
 800139c:	0f000001 	.word	0x0f000001

080013a0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80013a4:	4b17      	ldr	r3, [pc, #92]	; (8001404 <MX_SPI1_Init+0x64>)
 80013a6:	4a18      	ldr	r2, [pc, #96]	; (8001408 <MX_SPI1_Init+0x68>)
 80013a8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80013aa:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_SPI1_Init+0x64>)
 80013ac:	f44f 7282 	mov.w	r2, #260	; 0x104
 80013b0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80013b2:	4b14      	ldr	r3, [pc, #80]	; (8001404 <MX_SPI1_Init+0x64>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80013b8:	4b12      	ldr	r3, [pc, #72]	; (8001404 <MX_SPI1_Init+0x64>)
 80013ba:	2200      	movs	r2, #0
 80013bc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80013be:	4b11      	ldr	r3, [pc, #68]	; (8001404 <MX_SPI1_Init+0x64>)
 80013c0:	2200      	movs	r2, #0
 80013c2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80013c4:	4b0f      	ldr	r3, [pc, #60]	; (8001404 <MX_SPI1_Init+0x64>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80013ca:	4b0e      	ldr	r3, [pc, #56]	; (8001404 <MX_SPI1_Init+0x64>)
 80013cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80013d0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80013d2:	4b0c      	ldr	r3, [pc, #48]	; (8001404 <MX_SPI1_Init+0x64>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80013d8:	4b0a      	ldr	r3, [pc, #40]	; (8001404 <MX_SPI1_Init+0x64>)
 80013da:	2200      	movs	r2, #0
 80013dc:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80013de:	4b09      	ldr	r3, [pc, #36]	; (8001404 <MX_SPI1_Init+0x64>)
 80013e0:	2200      	movs	r2, #0
 80013e2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80013e4:	4b07      	ldr	r3, [pc, #28]	; (8001404 <MX_SPI1_Init+0x64>)
 80013e6:	2200      	movs	r2, #0
 80013e8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <MX_SPI1_Init+0x64>)
 80013ec:	220a      	movs	r2, #10
 80013ee:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80013f0:	4804      	ldr	r0, [pc, #16]	; (8001404 <MX_SPI1_Init+0x64>)
 80013f2:	f004 f83d 	bl	8005470 <HAL_SPI_Init>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80013fc:	f000 fd72 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001400:	bf00      	nop
 8001402:	bd80      	pop	{r7, pc}
 8001404:	2000075c 	.word	0x2000075c
 8001408:	40013000 	.word	0x40013000

0800140c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b086      	sub	sp, #24
 8001410:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001412:	f107 0308 	add.w	r3, r7, #8
 8001416:	2200      	movs	r2, #0
 8001418:	601a      	str	r2, [r3, #0]
 800141a:	605a      	str	r2, [r3, #4]
 800141c:	609a      	str	r2, [r3, #8]
 800141e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001420:	463b      	mov	r3, r7
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001428:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <MX_TIM1_Init+0x98>)
 800142a:	4a1f      	ldr	r2, [pc, #124]	; (80014a8 <MX_TIM1_Init+0x9c>)
 800142c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 167;
 800142e:	4b1d      	ldr	r3, [pc, #116]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001430:	22a7      	movs	r2, #167	; 0xa7
 8001432:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001434:	4b1b      	ldr	r3, [pc, #108]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 20000;
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <MX_TIM1_Init+0x98>)
 800143c:	f644 6220 	movw	r2, #20000	; 0x4e20
 8001440:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001442:	4b18      	ldr	r3, [pc, #96]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001444:	2200      	movs	r2, #0
 8001446:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001448:	4b16      	ldr	r3, [pc, #88]	; (80014a4 <MX_TIM1_Init+0x98>)
 800144a:	2200      	movs	r2, #0
 800144c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001450:	2200      	movs	r2, #0
 8001452:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001454:	4813      	ldr	r0, [pc, #76]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001456:	f004 fa9b 	bl	8005990 <HAL_TIM_Base_Init>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001460:	f000 fd40 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001464:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001468:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800146a:	f107 0308 	add.w	r3, r7, #8
 800146e:	4619      	mov	r1, r3
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <MX_TIM1_Init+0x98>)
 8001472:	f004 fe93 	bl	800619c <HAL_TIM_ConfigClockSource>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 800147c:	f000 fd32 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	; (80014a4 <MX_TIM1_Init+0x98>)
 800148e:	f005 fa81 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001498:	f000 fd24 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3718      	adds	r7, #24
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	200006d0 	.word	0x200006d0
 80014a8:	40010000 	.word	0x40010000

080014ac <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014b2:	f107 0308 	add.w	r3, r7, #8
 80014b6:	2200      	movs	r2, #0
 80014b8:	601a      	str	r2, [r3, #0]
 80014ba:	605a      	str	r2, [r3, #4]
 80014bc:	609a      	str	r2, [r3, #8]
 80014be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014c0:	463b      	mov	r3, r7
 80014c2:	2200      	movs	r2, #0
 80014c4:	601a      	str	r2, [r3, #0]
 80014c6:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c8:	4b1d      	ldr	r3, [pc, #116]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ca:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ce:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80014d0:	4b1b      	ldr	r3, [pc, #108]	; (8001540 <MX_TIM2_Init+0x94>)
 80014d2:	2253      	movs	r2, #83	; 0x53
 80014d4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014d6:	4b1a      	ldr	r3, [pc, #104]	; (8001540 <MX_TIM2_Init+0x94>)
 80014d8:	2200      	movs	r2, #0
 80014da:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <MX_TIM2_Init+0x94>)
 80014de:	f04f 32ff 	mov.w	r2, #4294967295
 80014e2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014e4:	4b16      	ldr	r3, [pc, #88]	; (8001540 <MX_TIM2_Init+0x94>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ea:	4b15      	ldr	r3, [pc, #84]	; (8001540 <MX_TIM2_Init+0x94>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80014f0:	4813      	ldr	r0, [pc, #76]	; (8001540 <MX_TIM2_Init+0x94>)
 80014f2:	f004 fa4d 	bl	8005990 <HAL_TIM_Base_Init>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80014fc:	f000 fcf2 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001504:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001506:	f107 0308 	add.w	r3, r7, #8
 800150a:	4619      	mov	r1, r3
 800150c:	480c      	ldr	r0, [pc, #48]	; (8001540 <MX_TIM2_Init+0x94>)
 800150e:	f004 fe45 	bl	800619c <HAL_TIM_ConfigClockSource>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001518:	f000 fce4 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001524:	463b      	mov	r3, r7
 8001526:	4619      	mov	r1, r3
 8001528:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_TIM2_Init+0x94>)
 800152a:	f005 fa33 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 800152e:	4603      	mov	r3, r0
 8001530:	2b00      	cmp	r3, #0
 8001532:	d001      	beq.n	8001538 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001534:	f000 fcd6 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001538:	bf00      	nop
 800153a:	3718      	adds	r7, #24
 800153c:	46bd      	mov	sp, r7
 800153e:	bd80      	pop	{r7, pc}
 8001540:	200007b4 	.word	0x200007b4

08001544 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001544:	b580      	push	{r7, lr}
 8001546:	b08e      	sub	sp, #56	; 0x38
 8001548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800154a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800154e:	2200      	movs	r2, #0
 8001550:	601a      	str	r2, [r3, #0]
 8001552:	605a      	str	r2, [r3, #4]
 8001554:	609a      	str	r2, [r3, #8]
 8001556:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001558:	f107 0320 	add.w	r3, r7, #32
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
 8001560:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001562:	1d3b      	adds	r3, r7, #4
 8001564:	2200      	movs	r2, #0
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	605a      	str	r2, [r3, #4]
 800156a:	609a      	str	r2, [r3, #8]
 800156c:	60da      	str	r2, [r3, #12]
 800156e:	611a      	str	r2, [r3, #16]
 8001570:	615a      	str	r2, [r3, #20]
 8001572:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001574:	4b3d      	ldr	r3, [pc, #244]	; (800166c <MX_TIM3_Init+0x128>)
 8001576:	4a3e      	ldr	r2, [pc, #248]	; (8001670 <MX_TIM3_Init+0x12c>)
 8001578:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800157a:	4b3c      	ldr	r3, [pc, #240]	; (800166c <MX_TIM3_Init+0x128>)
 800157c:	2200      	movs	r2, #0
 800157e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001580:	4b3a      	ldr	r3, [pc, #232]	; (800166c <MX_TIM3_Init+0x128>)
 8001582:	2200      	movs	r2, #0
 8001584:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001586:	4b39      	ldr	r3, [pc, #228]	; (800166c <MX_TIM3_Init+0x128>)
 8001588:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800158c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800158e:	4b37      	ldr	r3, [pc, #220]	; (800166c <MX_TIM3_Init+0x128>)
 8001590:	2200      	movs	r2, #0
 8001592:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001594:	4b35      	ldr	r3, [pc, #212]	; (800166c <MX_TIM3_Init+0x128>)
 8001596:	2200      	movs	r2, #0
 8001598:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800159a:	4834      	ldr	r0, [pc, #208]	; (800166c <MX_TIM3_Init+0x128>)
 800159c:	f004 f9f8 	bl	8005990 <HAL_TIM_Base_Init>
 80015a0:	4603      	mov	r3, r0
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d001      	beq.n	80015aa <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 80015a6:	f000 fc9d 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80015aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015ae:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80015b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80015b4:	4619      	mov	r1, r3
 80015b6:	482d      	ldr	r0, [pc, #180]	; (800166c <MX_TIM3_Init+0x128>)
 80015b8:	f004 fdf0 	bl	800619c <HAL_TIM_ConfigClockSource>
 80015bc:	4603      	mov	r3, r0
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d001      	beq.n	80015c6 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80015c2:	f000 fc8f 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80015c6:	4829      	ldr	r0, [pc, #164]	; (800166c <MX_TIM3_Init+0x128>)
 80015c8:	f004 fb0a 	bl	8005be0 <HAL_TIM_PWM_Init>
 80015cc:	4603      	mov	r3, r0
 80015ce:	2b00      	cmp	r3, #0
 80015d0:	d001      	beq.n	80015d6 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80015d2:	f000 fc87 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015d6:	2300      	movs	r3, #0
 80015d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015da:	2300      	movs	r3, #0
 80015dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015de:	f107 0320 	add.w	r3, r7, #32
 80015e2:	4619      	mov	r1, r3
 80015e4:	4821      	ldr	r0, [pc, #132]	; (800166c <MX_TIM3_Init+0x128>)
 80015e6:	f005 f9d5 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 80015ea:	4603      	mov	r3, r0
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d001      	beq.n	80015f4 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80015f0:	f000 fc78 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015f4:	2360      	movs	r3, #96	; 0x60
 80015f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001600:	2300      	movs	r3, #0
 8001602:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001604:	1d3b      	adds	r3, r7, #4
 8001606:	2200      	movs	r2, #0
 8001608:	4619      	mov	r1, r3
 800160a:	4818      	ldr	r0, [pc, #96]	; (800166c <MX_TIM3_Init+0x128>)
 800160c:	f004 fd08 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001610:	4603      	mov	r3, r0
 8001612:	2b00      	cmp	r3, #0
 8001614:	d001      	beq.n	800161a <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 8001616:	f000 fc65 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2204      	movs	r2, #4
 800161e:	4619      	mov	r1, r3
 8001620:	4812      	ldr	r0, [pc, #72]	; (800166c <MX_TIM3_Init+0x128>)
 8001622:	f004 fcfd 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001626:	4603      	mov	r3, r0
 8001628:	2b00      	cmp	r3, #0
 800162a:	d001      	beq.n	8001630 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 800162c:	f000 fc5a 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001630:	1d3b      	adds	r3, r7, #4
 8001632:	2208      	movs	r2, #8
 8001634:	4619      	mov	r1, r3
 8001636:	480d      	ldr	r0, [pc, #52]	; (800166c <MX_TIM3_Init+0x128>)
 8001638:	f004 fcf2 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001642:	f000 fc4f 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001646:	1d3b      	adds	r3, r7, #4
 8001648:	220c      	movs	r2, #12
 800164a:	4619      	mov	r1, r3
 800164c:	4807      	ldr	r0, [pc, #28]	; (800166c <MX_TIM3_Init+0x128>)
 800164e:	f004 fce7 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001658:	f000 fc44 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800165c:	4803      	ldr	r0, [pc, #12]	; (800166c <MX_TIM3_Init+0x128>)
 800165e:	f001 fba5 	bl	8002dac <HAL_TIM_MspPostInit>

}
 8001662:	bf00      	nop
 8001664:	3738      	adds	r7, #56	; 0x38
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	20000558 	.word	0x20000558
 8001670:	40000400 	.word	0x40000400

08001674 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b08e      	sub	sp, #56	; 0x38
 8001678:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800167e:	2200      	movs	r2, #0
 8001680:	601a      	str	r2, [r3, #0]
 8001682:	605a      	str	r2, [r3, #4]
 8001684:	609a      	str	r2, [r3, #8]
 8001686:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001688:	f107 0320 	add.w	r3, r7, #32
 800168c:	2200      	movs	r2, #0
 800168e:	601a      	str	r2, [r3, #0]
 8001690:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001692:	1d3b      	adds	r3, r7, #4
 8001694:	2200      	movs	r2, #0
 8001696:	601a      	str	r2, [r3, #0]
 8001698:	605a      	str	r2, [r3, #4]
 800169a:	609a      	str	r2, [r3, #8]
 800169c:	60da      	str	r2, [r3, #12]
 800169e:	611a      	str	r2, [r3, #16]
 80016a0:	615a      	str	r2, [r3, #20]
 80016a2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80016a4:	4b3d      	ldr	r3, [pc, #244]	; (800179c <MX_TIM4_Init+0x128>)
 80016a6:	4a3e      	ldr	r2, [pc, #248]	; (80017a0 <MX_TIM4_Init+0x12c>)
 80016a8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 83;
 80016aa:	4b3c      	ldr	r3, [pc, #240]	; (800179c <MX_TIM4_Init+0x128>)
 80016ac:	2253      	movs	r2, #83	; 0x53
 80016ae:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016b0:	4b3a      	ldr	r3, [pc, #232]	; (800179c <MX_TIM4_Init+0x128>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19999;
 80016b6:	4b39      	ldr	r3, [pc, #228]	; (800179c <MX_TIM4_Init+0x128>)
 80016b8:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80016bc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016be:	4b37      	ldr	r3, [pc, #220]	; (800179c <MX_TIM4_Init+0x128>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016c4:	4b35      	ldr	r3, [pc, #212]	; (800179c <MX_TIM4_Init+0x128>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80016ca:	4834      	ldr	r0, [pc, #208]	; (800179c <MX_TIM4_Init+0x128>)
 80016cc:	f004 f960 	bl	8005990 <HAL_TIM_Base_Init>
 80016d0:	4603      	mov	r3, r0
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d001      	beq.n	80016da <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80016d6:	f000 fc05 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016da:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016de:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80016e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016e4:	4619      	mov	r1, r3
 80016e6:	482d      	ldr	r0, [pc, #180]	; (800179c <MX_TIM4_Init+0x128>)
 80016e8:	f004 fd58 	bl	800619c <HAL_TIM_ConfigClockSource>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d001      	beq.n	80016f6 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80016f2:	f000 fbf7 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80016f6:	4829      	ldr	r0, [pc, #164]	; (800179c <MX_TIM4_Init+0x128>)
 80016f8:	f004 fa72 	bl	8005be0 <HAL_TIM_PWM_Init>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001702:	f000 fbef 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001706:	2300      	movs	r3, #0
 8001708:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800170a:	2300      	movs	r3, #0
 800170c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800170e:	f107 0320 	add.w	r3, r7, #32
 8001712:	4619      	mov	r1, r3
 8001714:	4821      	ldr	r0, [pc, #132]	; (800179c <MX_TIM4_Init+0x128>)
 8001716:	f005 f93d 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 800171a:	4603      	mov	r3, r0
 800171c:	2b00      	cmp	r3, #0
 800171e:	d001      	beq.n	8001724 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001720:	f000 fbe0 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001724:	2360      	movs	r3, #96	; 0x60
 8001726:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800172c:	2300      	movs	r3, #0
 800172e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001730:	2300      	movs	r3, #0
 8001732:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001734:	1d3b      	adds	r3, r7, #4
 8001736:	2200      	movs	r2, #0
 8001738:	4619      	mov	r1, r3
 800173a:	4818      	ldr	r0, [pc, #96]	; (800179c <MX_TIM4_Init+0x128>)
 800173c:	f004 fc70 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001746:	f000 fbcd 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2204      	movs	r2, #4
 800174e:	4619      	mov	r1, r3
 8001750:	4812      	ldr	r0, [pc, #72]	; (800179c <MX_TIM4_Init+0x128>)
 8001752:	f004 fc65 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 800175c:	f000 fbc2 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001760:	1d3b      	adds	r3, r7, #4
 8001762:	2208      	movs	r2, #8
 8001764:	4619      	mov	r1, r3
 8001766:	480d      	ldr	r0, [pc, #52]	; (800179c <MX_TIM4_Init+0x128>)
 8001768:	f004 fc5a 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800176c:	4603      	mov	r3, r0
 800176e:	2b00      	cmp	r3, #0
 8001770:	d001      	beq.n	8001776 <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001772:	f000 fbb7 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001776:	1d3b      	adds	r3, r7, #4
 8001778:	220c      	movs	r2, #12
 800177a:	4619      	mov	r1, r3
 800177c:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_TIM4_Init+0x128>)
 800177e:	f004 fc4f 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001788:	f000 fbac 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800178c:	4803      	ldr	r0, [pc, #12]	; (800179c <MX_TIM4_Init+0x128>)
 800178e:	f001 fb0d 	bl	8002dac <HAL_TIM_MspPostInit>

}
 8001792:	bf00      	nop
 8001794:	3738      	adds	r7, #56	; 0x38
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	20000484 	.word	0x20000484
 80017a0:	40000800 	.word	0x40000800

080017a4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08a      	sub	sp, #40	; 0x28
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b4:	1d3b      	adds	r3, r7, #4
 80017b6:	2200      	movs	r2, #0
 80017b8:	601a      	str	r2, [r3, #0]
 80017ba:	605a      	str	r2, [r3, #4]
 80017bc:	609a      	str	r2, [r3, #8]
 80017be:	60da      	str	r2, [r3, #12]
 80017c0:	611a      	str	r2, [r3, #16]
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80017c6:	4b27      	ldr	r3, [pc, #156]	; (8001864 <MX_TIM5_Init+0xc0>)
 80017c8:	4a27      	ldr	r2, [pc, #156]	; (8001868 <MX_TIM5_Init+0xc4>)
 80017ca:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 80017cc:	4b25      	ldr	r3, [pc, #148]	; (8001864 <MX_TIM5_Init+0xc0>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d2:	4b24      	ldr	r3, [pc, #144]	; (8001864 <MX_TIM5_Init+0xc0>)
 80017d4:	2200      	movs	r2, #0
 80017d6:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 4294967295;
 80017d8:	4b22      	ldr	r3, [pc, #136]	; (8001864 <MX_TIM5_Init+0xc0>)
 80017da:	f04f 32ff 	mov.w	r2, #4294967295
 80017de:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e0:	4b20      	ldr	r3, [pc, #128]	; (8001864 <MX_TIM5_Init+0xc0>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017e6:	4b1f      	ldr	r3, [pc, #124]	; (8001864 <MX_TIM5_Init+0xc0>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80017ec:	481d      	ldr	r0, [pc, #116]	; (8001864 <MX_TIM5_Init+0xc0>)
 80017ee:	f004 f9f7 	bl	8005be0 <HAL_TIM_PWM_Init>
 80017f2:	4603      	mov	r3, r0
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d001      	beq.n	80017fc <MX_TIM5_Init+0x58>
  {
    Error_Handler();
 80017f8:	f000 fb74 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017fc:	2300      	movs	r3, #0
 80017fe:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001800:	2300      	movs	r3, #0
 8001802:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001804:	f107 0320 	add.w	r3, r7, #32
 8001808:	4619      	mov	r1, r3
 800180a:	4816      	ldr	r0, [pc, #88]	; (8001864 <MX_TIM5_Init+0xc0>)
 800180c:	f005 f8c2 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <MX_TIM5_Init+0x76>
  {
    Error_Handler();
 8001816:	f000 fb65 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800181a:	2360      	movs	r3, #96	; 0x60
 800181c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800181e:	2300      	movs	r3, #0
 8001820:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001822:	2300      	movs	r3, #0
 8001824:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001826:	2300      	movs	r3, #0
 8001828:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800182a:	1d3b      	adds	r3, r7, #4
 800182c:	2208      	movs	r2, #8
 800182e:	4619      	mov	r1, r3
 8001830:	480c      	ldr	r0, [pc, #48]	; (8001864 <MX_TIM5_Init+0xc0>)
 8001832:	f004 fbf5 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001836:	4603      	mov	r3, r0
 8001838:	2b00      	cmp	r3, #0
 800183a:	d001      	beq.n	8001840 <MX_TIM5_Init+0x9c>
  {
    Error_Handler();
 800183c:	f000 fb52 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001840:	1d3b      	adds	r3, r7, #4
 8001842:	220c      	movs	r2, #12
 8001844:	4619      	mov	r1, r3
 8001846:	4807      	ldr	r0, [pc, #28]	; (8001864 <MX_TIM5_Init+0xc0>)
 8001848:	f004 fbea 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800184c:	4603      	mov	r3, r0
 800184e:	2b00      	cmp	r3, #0
 8001850:	d001      	beq.n	8001856 <MX_TIM5_Init+0xb2>
  {
    Error_Handler();
 8001852:	f000 fb47 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001856:	4803      	ldr	r0, [pc, #12]	; (8001864 <MX_TIM5_Init+0xc0>)
 8001858:	f001 faa8 	bl	8002dac <HAL_TIM_MspPostInit>

}
 800185c:	bf00      	nop
 800185e:	3728      	adds	r7, #40	; 0x28
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}
 8001864:	20000510 	.word	0x20000510
 8001868:	40000c00 	.word	0x40000c00

0800186c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	b096      	sub	sp, #88	; 0x58
 8001870:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001872:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001876:	2200      	movs	r2, #0
 8001878:	601a      	str	r2, [r3, #0]
 800187a:	605a      	str	r2, [r3, #4]
 800187c:	609a      	str	r2, [r3, #8]
 800187e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001880:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001884:	2200      	movs	r2, #0
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800188a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800188e:	2200      	movs	r2, #0
 8001890:	601a      	str	r2, [r3, #0]
 8001892:	605a      	str	r2, [r3, #4]
 8001894:	609a      	str	r2, [r3, #8]
 8001896:	60da      	str	r2, [r3, #12]
 8001898:	611a      	str	r2, [r3, #16]
 800189a:	615a      	str	r2, [r3, #20]
 800189c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	2220      	movs	r2, #32
 80018a2:	2100      	movs	r1, #0
 80018a4:	4618      	mov	r0, r3
 80018a6:	f006 f979 	bl	8007b9c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80018aa:	4b50      	ldr	r3, [pc, #320]	; (80019ec <MX_TIM8_Init+0x180>)
 80018ac:	4a50      	ldr	r2, [pc, #320]	; (80019f0 <MX_TIM8_Init+0x184>)
 80018ae:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 167;
 80018b0:	4b4e      	ldr	r3, [pc, #312]	; (80019ec <MX_TIM8_Init+0x180>)
 80018b2:	22a7      	movs	r2, #167	; 0xa7
 80018b4:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018b6:	4b4d      	ldr	r3, [pc, #308]	; (80019ec <MX_TIM8_Init+0x180>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 19999;
 80018bc:	4b4b      	ldr	r3, [pc, #300]	; (80019ec <MX_TIM8_Init+0x180>)
 80018be:	f644 621f 	movw	r2, #19999	; 0x4e1f
 80018c2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018c4:	4b49      	ldr	r3, [pc, #292]	; (80019ec <MX_TIM8_Init+0x180>)
 80018c6:	2200      	movs	r2, #0
 80018c8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80018ca:	4b48      	ldr	r3, [pc, #288]	; (80019ec <MX_TIM8_Init+0x180>)
 80018cc:	2200      	movs	r2, #0
 80018ce:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018d0:	4b46      	ldr	r3, [pc, #280]	; (80019ec <MX_TIM8_Init+0x180>)
 80018d2:	2200      	movs	r2, #0
 80018d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80018d6:	4845      	ldr	r0, [pc, #276]	; (80019ec <MX_TIM8_Init+0x180>)
 80018d8:	f004 f85a 	bl	8005990 <HAL_TIM_Base_Init>
 80018dc:	4603      	mov	r3, r0
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d001      	beq.n	80018e6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80018e2:	f000 faff 	bl	8001ee4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80018e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018ea:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80018ec:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80018f0:	4619      	mov	r1, r3
 80018f2:	483e      	ldr	r0, [pc, #248]	; (80019ec <MX_TIM8_Init+0x180>)
 80018f4:	f004 fc52 	bl	800619c <HAL_TIM_ConfigClockSource>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d001      	beq.n	8001902 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80018fe:	f000 faf1 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 8001902:	483a      	ldr	r0, [pc, #232]	; (80019ec <MX_TIM8_Init+0x180>)
 8001904:	f004 f96c 	bl	8005be0 <HAL_TIM_PWM_Init>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d001      	beq.n	8001912 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 800190e:	f000 fae9 	bl	8001ee4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001912:	2300      	movs	r3, #0
 8001914:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001916:	2300      	movs	r3, #0
 8001918:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800191a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800191e:	4619      	mov	r1, r3
 8001920:	4832      	ldr	r0, [pc, #200]	; (80019ec <MX_TIM8_Init+0x180>)
 8001922:	f005 f837 	bl	8006994 <HAL_TIMEx_MasterConfigSynchronization>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800192c:	f000 fada 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001930:	2360      	movs	r3, #96	; 0x60
 8001932:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001934:	2300      	movs	r3, #0
 8001936:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001938:	2300      	movs	r3, #0
 800193a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800193c:	2300      	movs	r3, #0
 800193e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001944:	2300      	movs	r3, #0
 8001946:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001948:	2300      	movs	r3, #0
 800194a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800194c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001950:	2200      	movs	r2, #0
 8001952:	4619      	mov	r1, r3
 8001954:	4825      	ldr	r0, [pc, #148]	; (80019ec <MX_TIM8_Init+0x180>)
 8001956:	f004 fb63 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800195a:	4603      	mov	r3, r0
 800195c:	2b00      	cmp	r3, #0
 800195e:	d001      	beq.n	8001964 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001960:	f000 fac0 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001964:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001968:	2204      	movs	r2, #4
 800196a:	4619      	mov	r1, r3
 800196c:	481f      	ldr	r0, [pc, #124]	; (80019ec <MX_TIM8_Init+0x180>)
 800196e:	f004 fb57 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001978:	f000 fab4 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800197c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001980:	2208      	movs	r2, #8
 8001982:	4619      	mov	r1, r3
 8001984:	4819      	ldr	r0, [pc, #100]	; (80019ec <MX_TIM8_Init+0x180>)
 8001986:	f004 fb4b 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 800198a:	4603      	mov	r3, r0
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001990:	f000 faa8 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001994:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001998:	220c      	movs	r2, #12
 800199a:	4619      	mov	r1, r3
 800199c:	4813      	ldr	r0, [pc, #76]	; (80019ec <MX_TIM8_Init+0x180>)
 800199e:	f004 fb3f 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 80019a2:	4603      	mov	r3, r0
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d001      	beq.n	80019ac <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80019a8:	f000 fa9c 	bl	8001ee4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80019ac:	2300      	movs	r3, #0
 80019ae:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80019b0:	2300      	movs	r3, #0
 80019b2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80019b4:	2300      	movs	r3, #0
 80019b6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80019b8:	2300      	movs	r3, #0
 80019ba:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80019bc:	2300      	movs	r3, #0
 80019be:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80019c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80019c4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80019c6:	2300      	movs	r3, #0
 80019c8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80019ca:	1d3b      	adds	r3, r7, #4
 80019cc:	4619      	mov	r1, r3
 80019ce:	4807      	ldr	r0, [pc, #28]	; (80019ec <MX_TIM8_Init+0x180>)
 80019d0:	f005 f85c 	bl	8006a8c <HAL_TIMEx_ConfigBreakDeadTime>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80019da:	f000 fa83 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80019de:	4803      	ldr	r0, [pc, #12]	; (80019ec <MX_TIM8_Init+0x180>)
 80019e0:	f001 f9e4 	bl	8002dac <HAL_TIM_MspPostInit>

}
 80019e4:	bf00      	nop
 80019e6:	3758      	adds	r7, #88	; 0x58
 80019e8:	46bd      	mov	sp, r7
 80019ea:	bd80      	pop	{r7, pc}
 80019ec:	2000043c 	.word	0x2000043c
 80019f0:	40010400 	.word	0x40010400

080019f4 <MX_TIM12_Init>:
  * @brief TIM12 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM12_Init(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	b088      	sub	sp, #32
 80019f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80019fa:	1d3b      	adds	r3, r7, #4
 80019fc:	2200      	movs	r2, #0
 80019fe:	601a      	str	r2, [r3, #0]
 8001a00:	605a      	str	r2, [r3, #4]
 8001a02:	609a      	str	r2, [r3, #8]
 8001a04:	60da      	str	r2, [r3, #12]
 8001a06:	611a      	str	r2, [r3, #16]
 8001a08:	615a      	str	r2, [r3, #20]
 8001a0a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 8001a0c:	4b1f      	ldr	r3, [pc, #124]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a0e:	4a20      	ldr	r2, [pc, #128]	; (8001a90 <MX_TIM12_Init+0x9c>)
 8001a10:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 0;
 8001a12:	4b1e      	ldr	r3, [pc, #120]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a14:	2200      	movs	r2, #0
 8001a16:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a18:	4b1c      	ldr	r3, [pc, #112]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 65535;
 8001a1e:	4b1b      	ldr	r3, [pc, #108]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a20:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a24:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001a26:	4b19      	ldr	r3, [pc, #100]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 8001a32:	4816      	ldr	r0, [pc, #88]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a34:	f004 f8d4 	bl	8005be0 <HAL_TIM_PWM_Init>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 8001a3e:	f000 fa51 	bl	8001ee4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a42:	2360      	movs	r3, #96	; 0x60
 8001a44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	480c      	ldr	r0, [pc, #48]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a5a:	f004 fae1 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 8001a64:	f000 fa3e 	bl	8001ee4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a68:	1d3b      	adds	r3, r7, #4
 8001a6a:	2204      	movs	r2, #4
 8001a6c:	4619      	mov	r1, r3
 8001a6e:	4807      	ldr	r0, [pc, #28]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a70:	f004 fad6 	bl	8006020 <HAL_TIM_PWM_ConfigChannel>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d001      	beq.n	8001a7e <MX_TIM12_Init+0x8a>
  {
    Error_Handler();
 8001a7a:	f000 fa33 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 8001a7e:	4803      	ldr	r0, [pc, #12]	; (8001a8c <MX_TIM12_Init+0x98>)
 8001a80:	f001 f994 	bl	8002dac <HAL_TIM_MspPostInit>

}
 8001a84:	bf00      	nop
 8001a86:	3720      	adds	r7, #32
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	200008a0 	.word	0x200008a0
 8001a90:	40001800 	.word	0x40001800

08001a94 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001a98:	4b11      	ldr	r3, [pc, #68]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001a9a:	4a12      	ldr	r2, [pc, #72]	; (8001ae4 <MX_UART4_Init+0x50>)
 8001a9c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001a9e:	4b10      	ldr	r3, [pc, #64]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001aa0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001aa4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001aa6:	4b0e      	ldr	r3, [pc, #56]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001aac:	4b0c      	ldr	r3, [pc, #48]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001ab2:	4b0b      	ldr	r3, [pc, #44]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001ab8:	4b09      	ldr	r3, [pc, #36]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001aba:	220c      	movs	r2, #12
 8001abc:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001abe:	4b08      	ldr	r3, [pc, #32]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ac4:	4b06      	ldr	r3, [pc, #24]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001aca:	4805      	ldr	r0, [pc, #20]	; (8001ae0 <MX_UART4_Init+0x4c>)
 8001acc:	f005 f844 	bl	8006b58 <HAL_UART_Init>
 8001ad0:	4603      	mov	r3, r0
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d001      	beq.n	8001ada <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ad6:	f000 fa05 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ada:	bf00      	nop
 8001adc:	bd80      	pop	{r7, pc}
 8001ade:	bf00      	nop
 8001ae0:	20000718 	.word	0x20000718
 8001ae4:	40004c00 	.word	0x40004c00

08001ae8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8001aec:	4b11      	ldr	r3, [pc, #68]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001aee:	4a12      	ldr	r2, [pc, #72]	; (8001b38 <MX_UART5_Init+0x50>)
 8001af0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 8001af2:	4b10      	ldr	r3, [pc, #64]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001af4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001af8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8001afa:	4b0e      	ldr	r3, [pc, #56]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8001b00:	4b0c      	ldr	r3, [pc, #48]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8001b06:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8001b0c:	4b09      	ldr	r3, [pc, #36]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001b0e:	220c      	movs	r2, #12
 8001b10:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b18:	4b06      	ldr	r3, [pc, #24]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <MX_UART5_Init+0x4c>)
 8001b20:	f005 f81a 	bl	8006b58 <HAL_UART_Init>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8001b2a:	f000 f9db 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8001b2e:	bf00      	nop
 8001b30:	bd80      	pop	{r7, pc}
 8001b32:	bf00      	nop
 8001b34:	200005a0 	.word	0x200005a0
 8001b38:	40005000 	.word	0x40005000

08001b3c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001b40:	4b11      	ldr	r3, [pc, #68]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b42:	4a12      	ldr	r2, [pc, #72]	; (8001b8c <MX_USART1_UART_Init+0x50>)
 8001b44:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001b46:	4b10      	ldr	r3, [pc, #64]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b48:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b4c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4e:	4b0e      	ldr	r3, [pc, #56]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001b54:	4b0c      	ldr	r3, [pc, #48]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b56:	2200      	movs	r2, #0
 8001b58:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001b5a:	4b0b      	ldr	r3, [pc, #44]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b5c:	2200      	movs	r2, #0
 8001b5e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001b60:	4b09      	ldr	r3, [pc, #36]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b62:	220c      	movs	r2, #12
 8001b64:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b66:	4b08      	ldr	r3, [pc, #32]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b68:	2200      	movs	r2, #0
 8001b6a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001b72:	4805      	ldr	r0, [pc, #20]	; (8001b88 <MX_USART1_UART_Init+0x4c>)
 8001b74:	f004 fff0 	bl	8006b58 <HAL_UART_Init>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d001      	beq.n	8001b82 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001b7e:	f000 f9b1 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001b82:	bf00      	nop
 8001b84:	bd80      	pop	{r7, pc}
 8001b86:	bf00      	nop
 8001b88:	2000068c 	.word	0x2000068c
 8001b8c:	40011000 	.word	0x40011000

08001b90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b90:	b580      	push	{r7, lr}
 8001b92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b94:	4b11      	ldr	r3, [pc, #68]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001b96:	4a12      	ldr	r2, [pc, #72]	; (8001be0 <MX_USART2_UART_Init+0x50>)
 8001b98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b9a:	4b10      	ldr	r3, [pc, #64]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001b9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001ba0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba2:	4b0e      	ldr	r3, [pc, #56]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bae:	4b0b      	ldr	r3, [pc, #44]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb4:	4b09      	ldr	r3, [pc, #36]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bb6:	220c      	movs	r2, #12
 8001bb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bba:	4b08      	ldr	r3, [pc, #32]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc0:	4b06      	ldr	r3, [pc, #24]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bc2:	2200      	movs	r2, #0
 8001bc4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bc6:	4805      	ldr	r0, [pc, #20]	; (8001bdc <MX_USART2_UART_Init+0x4c>)
 8001bc8:	f004 ffc6 	bl	8006b58 <HAL_UART_Init>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d001      	beq.n	8001bd6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001bd2:	f000 f987 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001bd6:	bf00      	nop
 8001bd8:	bd80      	pop	{r7, pc}
 8001bda:	bf00      	nop
 8001bdc:	200007fc 	.word	0x200007fc
 8001be0:	40004400 	.word	0x40004400

08001be4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001be8:	4b11      	ldr	r3, [pc, #68]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001bea:	4a12      	ldr	r2, [pc, #72]	; (8001c34 <MX_USART3_UART_Init+0x50>)
 8001bec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001bee:	4b10      	ldr	r3, [pc, #64]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001bf0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001bf4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001bf6:	4b0e      	ldr	r3, [pc, #56]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001bfc:	4b0c      	ldr	r3, [pc, #48]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001bfe:	2200      	movs	r2, #0
 8001c00:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001c04:	2200      	movs	r2, #0
 8001c06:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001c08:	4b09      	ldr	r3, [pc, #36]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001c0a:	220c      	movs	r2, #12
 8001c0c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c0e:	4b08      	ldr	r3, [pc, #32]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c14:	4b06      	ldr	r3, [pc, #24]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001c1a:	4805      	ldr	r0, [pc, #20]	; (8001c30 <MX_USART3_UART_Init+0x4c>)
 8001c1c:	f004 ff9c 	bl	8006b58 <HAL_UART_Init>
 8001c20:	4603      	mov	r3, r0
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d001      	beq.n	8001c2a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001c26:	f000 f95d 	bl	8001ee4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	200004cc 	.word	0x200004cc
 8001c34:	40004800 	.word	0x40004800

08001c38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	4b1f      	ldr	r3, [pc, #124]	; (8001cc0 <MX_DMA_Init+0x88>)
 8001c44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c46:	4a1e      	ldr	r2, [pc, #120]	; (8001cc0 <MX_DMA_Init+0x88>)
 8001c48:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001c4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4e:	4b1c      	ldr	r3, [pc, #112]	; (8001cc0 <MX_DMA_Init+0x88>)
 8001c50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c52:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c56:	607b      	str	r3, [r7, #4]
 8001c58:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	603b      	str	r3, [r7, #0]
 8001c5e:	4b18      	ldr	r3, [pc, #96]	; (8001cc0 <MX_DMA_Init+0x88>)
 8001c60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c62:	4a17      	ldr	r2, [pc, #92]	; (8001cc0 <MX_DMA_Init+0x88>)
 8001c64:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001c68:	6313      	str	r3, [r2, #48]	; 0x30
 8001c6a:	4b15      	ldr	r3, [pc, #84]	; (8001cc0 <MX_DMA_Init+0x88>)
 8001c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001c72:	603b      	str	r3, [r7, #0]
 8001c74:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8001c76:	2200      	movs	r2, #0
 8001c78:	2100      	movs	r1, #0
 8001c7a:	200b      	movs	r0, #11
 8001c7c:	f002 f964 	bl	8003f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001c80:	200b      	movs	r0, #11
 8001c82:	f002 f97d 	bl	8003f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	200d      	movs	r0, #13
 8001c8c:	f002 f95c 	bl	8003f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001c90:	200d      	movs	r0, #13
 8001c92:	f002 f975 	bl	8003f80 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001c96:	2200      	movs	r2, #0
 8001c98:	2100      	movs	r1, #0
 8001c9a:	2010      	movs	r0, #16
 8001c9c:	f002 f954 	bl	8003f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8001ca0:	2010      	movs	r0, #16
 8001ca2:	f002 f96d 	bl	8003f80 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 0, 0);
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	2100      	movs	r1, #0
 8001caa:	203a      	movs	r0, #58	; 0x3a
 8001cac:	f002 f94c 	bl	8003f48 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8001cb0:	203a      	movs	r0, #58	; 0x3a
 8001cb2:	f002 f965 	bl	8003f80 <HAL_NVIC_EnableIRQ>

}
 8001cb6:	bf00      	nop
 8001cb8:	3708      	adds	r7, #8
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800

08001cc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001cc4:	b580      	push	{r7, lr}
 8001cc6:	b08c      	sub	sp, #48	; 0x30
 8001cc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cca:	f107 031c 	add.w	r3, r7, #28
 8001cce:	2200      	movs	r2, #0
 8001cd0:	601a      	str	r2, [r3, #0]
 8001cd2:	605a      	str	r2, [r3, #4]
 8001cd4:	609a      	str	r2, [r3, #8]
 8001cd6:	60da      	str	r2, [r3, #12]
 8001cd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	61bb      	str	r3, [r7, #24]
 8001cde:	4b62      	ldr	r3, [pc, #392]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001ce0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce2:	4a61      	ldr	r2, [pc, #388]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001ce4:	f043 0310 	orr.w	r3, r3, #16
 8001ce8:	6313      	str	r3, [r2, #48]	; 0x30
 8001cea:	4b5f      	ldr	r3, [pc, #380]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cee:	f003 0310 	and.w	r3, r3, #16
 8001cf2:	61bb      	str	r3, [r7, #24]
 8001cf4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	4b5b      	ldr	r3, [pc, #364]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cfe:	4a5a      	ldr	r2, [pc, #360]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d00:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001d04:	6313      	str	r3, [r2, #48]	; 0x30
 8001d06:	4b58      	ldr	r3, [pc, #352]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
 8001d16:	4b54      	ldr	r3, [pc, #336]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d1a:	4a53      	ldr	r2, [pc, #332]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d1c:	f043 0301 	orr.w	r3, r3, #1
 8001d20:	6313      	str	r3, [r2, #48]	; 0x30
 8001d22:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	613b      	str	r3, [r7, #16]
 8001d2c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b4d      	ldr	r3, [pc, #308]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d36:	4a4c      	ldr	r2, [pc, #304]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d38:	f043 0302 	orr.w	r3, r3, #2
 8001d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d42:	f003 0302 	and.w	r3, r3, #2
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	60bb      	str	r3, [r7, #8]
 8001d4e:	4b46      	ldr	r3, [pc, #280]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d52:	4a45      	ldr	r2, [pc, #276]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d54:	f043 0308 	orr.w	r3, r3, #8
 8001d58:	6313      	str	r3, [r2, #48]	; 0x30
 8001d5a:	4b43      	ldr	r3, [pc, #268]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d5e:	f003 0308 	and.w	r3, r3, #8
 8001d62:	60bb      	str	r3, [r7, #8]
 8001d64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001d66:	2300      	movs	r3, #0
 8001d68:	607b      	str	r3, [r7, #4]
 8001d6a:	4b3f      	ldr	r3, [pc, #252]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d6e:	4a3e      	ldr	r2, [pc, #248]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d70:	f043 0304 	orr.w	r3, r3, #4
 8001d74:	6313      	str	r3, [r2, #48]	; 0x30
 8001d76:	4b3c      	ldr	r3, [pc, #240]	; (8001e68 <MX_GPIO_Init+0x1a4>)
 8001d78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d7a:	f003 0304 	and.w	r3, r3, #4
 8001d7e:	607b      	str	r3, [r7, #4]
 8001d80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 8001d82:	2200      	movs	r2, #0
 8001d84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001d88:	4838      	ldr	r0, [pc, #224]	; (8001e6c <MX_GPIO_Init+0x1a8>)
 8001d8a:	f002 feb1 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OLED_CSN_GPIO_Port, OLED_CSN_Pin, GPIO_PIN_RESET);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d94:	4836      	ldr	r0, [pc, #216]	; (8001e70 <MX_GPIO_Init+0x1ac>)
 8001d96:	f002 feab 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OLED_RES_Pin|OLED_DC_Pin, GPIO_PIN_RESET);
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	21c0      	movs	r1, #192	; 0xc0
 8001d9e:	4835      	ldr	r0, [pc, #212]	; (8001e74 <MX_GPIO_Init+0x1b0>)
 8001da0:	f002 fea6 	bl	8004af0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE5 PE6 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001da4:	2360      	movs	r3, #96	; 0x60
 8001da6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001da8:	2302      	movs	r3, #2
 8001daa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dac:	2300      	movs	r3, #0
 8001dae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001db0:	2300      	movs	r3, #0
 8001db2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8001db4:	2303      	movs	r3, #3
 8001db6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001db8:	f107 031c 	add.w	r3, r7, #28
 8001dbc:	4619      	mov	r1, r3
 8001dbe:	482e      	ldr	r0, [pc, #184]	; (8001e78 <MX_GPIO_Init+0x1b4>)
 8001dc0:	f002 fcfa 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED1_Pin */
  GPIO_InitStruct.Pin = LED1_Pin;
 8001dc4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	2300      	movs	r3, #0
 8001dd0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED1_GPIO_Port, &GPIO_InitStruct);
 8001dd6:	f107 031c 	add.w	r3, r7, #28
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4823      	ldr	r0, [pc, #140]	; (8001e6c <MX_GPIO_Init+0x1a8>)
 8001dde:	f002 fceb 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : OLED_CSN_Pin */
  GPIO_InitStruct.Pin = OLED_CSN_Pin;
 8001de2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001de6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001de8:	2301      	movs	r3, #1
 8001dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dec:	2300      	movs	r3, #0
 8001dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001df0:	2303      	movs	r3, #3
 8001df2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(OLED_CSN_GPIO_Port, &GPIO_InitStruct);
 8001df4:	f107 031c 	add.w	r3, r7, #28
 8001df8:	4619      	mov	r1, r3
 8001dfa:	481d      	ldr	r0, [pc, #116]	; (8001e70 <MX_GPIO_Init+0x1ac>)
 8001dfc:	f002 fcdc 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : OLED_RES_Pin OLED_DC_Pin */
  GPIO_InitStruct.Pin = OLED_RES_Pin|OLED_DC_Pin;
 8001e00:	23c0      	movs	r3, #192	; 0xc0
 8001e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e04:	2301      	movs	r3, #1
 8001e06:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e08:	2300      	movs	r3, #0
 8001e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e10:	f107 031c 	add.w	r3, r7, #28
 8001e14:	4619      	mov	r1, r3
 8001e16:	4817      	ldr	r0, [pc, #92]	; (8001e74 <MX_GPIO_Init+0x1b0>)
 8001e18:	f002 fcce 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB8 */
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001e1c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001e20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e22:	2302      	movs	r3, #2
 8001e24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e26:	2300      	movs	r3, #0
 8001e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM10;
 8001e2e:	2303      	movs	r3, #3
 8001e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e32:	f107 031c 	add.w	r3, r7, #28
 8001e36:	4619      	mov	r1, r3
 8001e38:	480e      	ldr	r0, [pc, #56]	; (8001e74 <MX_GPIO_Init+0x1b0>)
 8001e3a:	f002 fcbd 	bl	80047b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001e3e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001e42:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e44:	2302      	movs	r3, #2
 8001e46:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e48:	2300      	movs	r3, #0
 8001e4a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM11;
 8001e50:	2303      	movs	r3, #3
 8001e52:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e54:	f107 031c 	add.w	r3, r7, #28
 8001e58:	4619      	mov	r1, r3
 8001e5a:	4806      	ldr	r0, [pc, #24]	; (8001e74 <MX_GPIO_Init+0x1b0>)
 8001e5c:	f002 fcac 	bl	80047b8 <HAL_GPIO_Init>

}
 8001e60:	bf00      	nop
 8001e62:	3730      	adds	r7, #48	; 0x30
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}
 8001e68:	40023800 	.word	0x40023800
 8001e6c:	40020c00 	.word	0x40020c00
 8001e70:	40020000 	.word	0x40020000
 8001e74:	40020400 	.word	0x40020400
 8001e78:	40021000 	.word	0x40021000

08001e7c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	b082      	sub	sp, #8
 8001e80:	af00      	add	r7, sp, #0
 8001e82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM7) {
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a10      	ldr	r2, [pc, #64]	; (8001ecc <HAL_TIM_PeriodElapsedCallback+0x50>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d102      	bne.n	8001e94 <HAL_TIM_PeriodElapsedCallback+0x18>
    HAL_IncTick();
 8001e8e:	f001 fcfd 	bl	800388c <HAL_IncTick>
      if(pidinit==1&&lock!=0)
    	  PID_CTRL();
      setmotor();
  }
  /* USER CODE END Callback 1 */
}
 8001e92:	e017      	b.n	8001ec4 <HAL_TIM_PeriodElapsedCallback+0x48>
  else if(htim->Instance == TIM1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a0d      	ldr	r2, [pc, #52]	; (8001ed0 <HAL_TIM_PeriodElapsedCallback+0x54>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d112      	bne.n	8001ec4 <HAL_TIM_PeriodElapsedCallback+0x48>
	  HAL_UART_Transmit_IT(&huart5, (unsigned char *)&frame, sizeof(frame));
 8001e9e:	226c      	movs	r2, #108	; 0x6c
 8001ea0:	490c      	ldr	r1, [pc, #48]	; (8001ed4 <HAL_TIM_PeriodElapsedCallback+0x58>)
 8001ea2:	480d      	ldr	r0, [pc, #52]	; (8001ed8 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8001ea4:	f004 ff37 	bl	8006d16 <HAL_UART_Transmit_IT>
	  OLED_Refresh_Gram();
 8001ea8:	f000 f956 	bl	8002158 <OLED_Refresh_Gram>
      if(pidinit==1&&lock!=0)
 8001eac:	4b0b      	ldr	r3, [pc, #44]	; (8001edc <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	2b01      	cmp	r3, #1
 8001eb2:	d105      	bne.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x44>
 8001eb4:	4b0a      	ldr	r3, [pc, #40]	; (8001ee0 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d001      	beq.n	8001ec0 <HAL_TIM_PeriodElapsedCallback+0x44>
    	  PID_CTRL();
 8001ebc:	f7fe ff3a 	bl	8000d34 <PID_CTRL>
      setmotor();
 8001ec0:	f000 f83e 	bl	8001f40 <setmotor>
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40001400 	.word	0x40001400
 8001ed0:	40010000 	.word	0x40010000
 8001ed4:	200000a8 	.word	0x200000a8
 8001ed8:	200005a0 	.word	0x200005a0
 8001edc:	20000260 	.word	0x20000260
 8001ee0:	2000027c 	.word	0x2000027c

08001ee4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ee8:	b672      	cpsid	i
}
 8001eea:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001eec:	e7fe      	b.n	8001eec <Error_Handler+0x8>
	...

08001ef0 <motorinit>:
		{ 1.0f, 1.0f, 0, 0,1.0f, 0, 0, 0, 0, },
		{ -1.0f, 1.0f, 0, 0, 1.0f, 0, 0, 0, 0, }, };*/
float motor[8];
//每次执行会将六自由度dof6转换为8个电机通道 并赋值
void motorinit()
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
	extern TIM_HandleTypeDef htim4;
	extern TIM_HandleTypeDef htim8;
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001ef4:	2100      	movs	r1, #0
 8001ef6:	4810      	ldr	r0, [pc, #64]	; (8001f38 <motorinit+0x48>)
 8001ef8:	f003 fec2 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8001efc:	2104      	movs	r1, #4
 8001efe:	480e      	ldr	r0, [pc, #56]	; (8001f38 <motorinit+0x48>)
 8001f00:	f003 febe 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8001f04:	2108      	movs	r1, #8
 8001f06:	480c      	ldr	r0, [pc, #48]	; (8001f38 <motorinit+0x48>)
 8001f08:	f003 feba 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4);
 8001f0c:	210c      	movs	r1, #12
 8001f0e:	480a      	ldr	r0, [pc, #40]	; (8001f38 <motorinit+0x48>)
 8001f10:	f003 feb6 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8001f14:	2100      	movs	r1, #0
 8001f16:	4809      	ldr	r0, [pc, #36]	; (8001f3c <motorinit+0x4c>)
 8001f18:	f003 feb2 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8001f1c:	2104      	movs	r1, #4
 8001f1e:	4807      	ldr	r0, [pc, #28]	; (8001f3c <motorinit+0x4c>)
 8001f20:	f003 feae 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_3);
 8001f24:	2108      	movs	r1, #8
 8001f26:	4805      	ldr	r0, [pc, #20]	; (8001f3c <motorinit+0x4c>)
 8001f28:	f003 feaa 	bl	8005c80 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_4);
 8001f2c:	210c      	movs	r1, #12
 8001f2e:	4803      	ldr	r0, [pc, #12]	; (8001f3c <motorinit+0x4c>)
 8001f30:	f003 fea6 	bl	8005c80 <HAL_TIM_PWM_Start>
}
 8001f34:	bf00      	nop
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	20000484 	.word	0x20000484
 8001f3c:	2000043c 	.word	0x2000043c

08001f40 <setmotor>:
void setmotor()
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
    int time = HAL_GetTick();
 8001f46:	f001 fcb5 	bl	80038b4 <HAL_GetTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	603b      	str	r3, [r7, #0]
    for (int i = 0; i < 8; i++)
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	e05d      	b.n	8002010 <setmotor+0xd0>
    {
        float tmp = 0;
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	60bb      	str	r3, [r7, #8]
        for (int j = 0; j < 6; j++)
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	607b      	str	r3, [r7, #4]
 8001f5e:	e01c      	b.n	8001f9a <setmotor+0x5a>
            tmp += hcc[i][j] * dof6[j];
 8001f60:	4973      	ldr	r1, [pc, #460]	; (8002130 <setmotor+0x1f0>)
 8001f62:	68fa      	ldr	r2, [r7, #12]
 8001f64:	4613      	mov	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	4413      	add	r3, r2
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	687a      	ldr	r2, [r7, #4]
 8001f6e:	4413      	add	r3, r2
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	440b      	add	r3, r1
 8001f74:	ed93 7a00 	vldr	s14, [r3]
 8001f78:	4a6e      	ldr	r2, [pc, #440]	; (8002134 <setmotor+0x1f4>)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	009b      	lsls	r3, r3, #2
 8001f7e:	4413      	add	r3, r2
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f88:	ed97 7a02 	vldr	s14, [r7, #8]
 8001f8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f90:	edc7 7a02 	vstr	s15, [r7, #8]
        for (int j = 0; j < 6; j++)
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	2b05      	cmp	r3, #5
 8001f9e:	dddf      	ble.n	8001f60 <setmotor+0x20>
        if(tmp > 1)
 8001fa0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fa4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001fa8:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fb0:	dd02      	ble.n	8001fb8 <setmotor+0x78>
            tmp = 1;
 8001fb2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8001fb6:	60bb      	str	r3, [r7, #8]
        if(tmp < -1)
 8001fb8:	edd7 7a02 	vldr	s15, [r7, #8]
 8001fbc:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8001fc0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001fc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fc8:	d501      	bpl.n	8001fce <setmotor+0x8e>
            tmp = -1;
 8001fca:	4b5b      	ldr	r3, [pc, #364]	; (8002138 <setmotor+0x1f8>)
 8001fcc:	60bb      	str	r3, [r7, #8]
        if(time<10000||lock==0)//初始化||没有解开锁定
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8001fd4:	4293      	cmp	r3, r2
 8001fd6:	dd03      	ble.n	8001fe0 <setmotor+0xa0>
 8001fd8:	4b58      	ldr	r3, [pc, #352]	; (800213c <setmotor+0x1fc>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d107      	bne.n	8001ff0 <setmotor+0xb0>
			motor[i] = 0;
 8001fe0:	4a57      	ldr	r2, [pc, #348]	; (8002140 <setmotor+0x200>)
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	009b      	lsls	r3, r3, #2
 8001fe6:	4413      	add	r3, r2
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	e005      	b.n	8001ffc <setmotor+0xbc>
        else
        	motor[i] = tmp;
 8001ff0:	4a53      	ldr	r2, [pc, #332]	; (8002140 <setmotor+0x200>)
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	009b      	lsls	r3, r3, #2
 8001ff6:	4413      	add	r3, r2
 8001ff8:	68ba      	ldr	r2, [r7, #8]
 8001ffa:	601a      	str	r2, [r3, #0]
        frame.fdata[i + 16] = tmp;//回传数据
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	3310      	adds	r3, #16
 8002000:	4a50      	ldr	r2, [pc, #320]	; (8002144 <setmotor+0x204>)
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	4413      	add	r3, r2
 8002006:	68ba      	ldr	r2, [r7, #8]
 8002008:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < 8; i++)
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	3301      	adds	r3, #1
 800200e:	60fb      	str	r3, [r7, #12]
 8002010:	68fb      	ldr	r3, [r7, #12]
 8002012:	2b07      	cmp	r3, #7
 8002014:	dd9e      	ble.n	8001f54 <setmotor+0x14>
    }

    MOTOR_1 = motor[0] * MOTOR_WAY + MOTOR_CENTER;
 8002016:	4b4a      	ldr	r3, [pc, #296]	; (8002140 <setmotor+0x200>)
 8002018:	edd3 7a00 	vldr	s15, [r3]
 800201c:	ed9f 7a4a 	vldr	s14, [pc, #296]	; 8002148 <setmotor+0x208>
 8002020:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002024:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800214c <setmotor+0x20c>
 8002028:	ee77 7a87 	vadd.f32	s15, s15, s14
 800202c:	4b48      	ldr	r3, [pc, #288]	; (8002150 <setmotor+0x210>)
 800202e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002032:	ee17 2a90 	vmov	r2, s15
 8002036:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_2 = motor[1] * MOTOR_WAY + MOTOR_CENTER;
 8002038:	4b41      	ldr	r3, [pc, #260]	; (8002140 <setmotor+0x200>)
 800203a:	edd3 7a01 	vldr	s15, [r3, #4]
 800203e:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8002148 <setmotor+0x208>
 8002042:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002046:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800214c <setmotor+0x20c>
 800204a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800204e:	4b40      	ldr	r3, [pc, #256]	; (8002150 <setmotor+0x210>)
 8002050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002054:	ee17 2a90 	vmov	r2, s15
 8002058:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_3 = motor[2] * MOTOR_WAY + MOTOR_CENTER;
 800205a:	4b39      	ldr	r3, [pc, #228]	; (8002140 <setmotor+0x200>)
 800205c:	edd3 7a02 	vldr	s15, [r3, #8]
 8002060:	ed9f 7a39 	vldr	s14, [pc, #228]	; 8002148 <setmotor+0x208>
 8002064:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002068:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800214c <setmotor+0x20c>
 800206c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002070:	4b37      	ldr	r3, [pc, #220]	; (8002150 <setmotor+0x210>)
 8002072:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002076:	ee17 2a90 	vmov	r2, s15
 800207a:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_4 = motor[3] * MOTOR_WAY + MOTOR_CENTER;
 800207c:	4b30      	ldr	r3, [pc, #192]	; (8002140 <setmotor+0x200>)
 800207e:	edd3 7a03 	vldr	s15, [r3, #12]
 8002082:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8002148 <setmotor+0x208>
 8002086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800208a:	ed9f 7a30 	vldr	s14, [pc, #192]	; 800214c <setmotor+0x20c>
 800208e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002092:	4b2f      	ldr	r3, [pc, #188]	; (8002150 <setmotor+0x210>)
 8002094:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002098:	ee17 2a90 	vmov	r2, s15
 800209c:	641a      	str	r2, [r3, #64]	; 0x40
    MOTOR_5 = motor[4] * MOTOR_WAY + MOTOR_CENTER;
 800209e:	4b28      	ldr	r3, [pc, #160]	; (8002140 <setmotor+0x200>)
 80020a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80020a4:	ed9f 7a28 	vldr	s14, [pc, #160]	; 8002148 <setmotor+0x208>
 80020a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ac:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800214c <setmotor+0x20c>
 80020b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020b4:	4b27      	ldr	r3, [pc, #156]	; (8002154 <setmotor+0x214>)
 80020b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020ba:	ee17 2a90 	vmov	r2, s15
 80020be:	635a      	str	r2, [r3, #52]	; 0x34
    MOTOR_6 = motor[5] * MOTOR_WAY + MOTOR_CENTER;
 80020c0:	4b1f      	ldr	r3, [pc, #124]	; (8002140 <setmotor+0x200>)
 80020c2:	edd3 7a05 	vldr	s15, [r3, #20]
 80020c6:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002148 <setmotor+0x208>
 80020ca:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020ce:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 800214c <setmotor+0x20c>
 80020d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <setmotor+0x214>)
 80020d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020dc:	ee17 2a90 	vmov	r2, s15
 80020e0:	639a      	str	r2, [r3, #56]	; 0x38
    MOTOR_7 = motor[6] * MOTOR_WAY + MOTOR_CENTER;
 80020e2:	4b17      	ldr	r3, [pc, #92]	; (8002140 <setmotor+0x200>)
 80020e4:	edd3 7a06 	vldr	s15, [r3, #24]
 80020e8:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002148 <setmotor+0x208>
 80020ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020f0:	ed9f 7a16 	vldr	s14, [pc, #88]	; 800214c <setmotor+0x20c>
 80020f4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80020f8:	4b16      	ldr	r3, [pc, #88]	; (8002154 <setmotor+0x214>)
 80020fa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80020fe:	ee17 2a90 	vmov	r2, s15
 8002102:	63da      	str	r2, [r3, #60]	; 0x3c
    MOTOR_8 = motor[7] * MOTOR_WAY + MOTOR_CENTER;
 8002104:	4b0e      	ldr	r3, [pc, #56]	; (8002140 <setmotor+0x200>)
 8002106:	edd3 7a07 	vldr	s15, [r3, #28]
 800210a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8002148 <setmotor+0x208>
 800210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002112:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 800214c <setmotor+0x20c>
 8002116:	ee77 7a87 	vadd.f32	s15, s15, s14
 800211a:	4b0e      	ldr	r3, [pc, #56]	; (8002154 <setmotor+0x214>)
 800211c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002120:	ee17 2a90 	vmov	r2, s15
 8002124:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002126:	bf00      	nop
 8002128:	3710      	adds	r7, #16
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	20000114 	.word	0x20000114
 8002134:	20000264 	.word	0x20000264
 8002138:	bf800000 	.word	0xbf800000
 800213c:	2000027c 	.word	0x2000027c
 8002140:	200008e8 	.word	0x200008e8
 8002144:	200000a8 	.word	0x200000a8
 8002148:	44480000 	.word	0x44480000
 800214c:	44bb8000 	.word	0x44bb8000
 8002150:	40000800 	.word	0x40000800
 8002154:	40010400 	.word	0x40010400

08002158 <OLED_Refresh_Gram>:
extern SPI_HandleTypeDef hspi1;

  
u8 OLED_GRAM[8][128];	   //内部定义了一块GRAM
void OLED_Refresh_Gram(void) //把32内部的GRAM刷新到OLED里面显示
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
	//u8 i,n;
	for(int i=0;i<8;i++)
 800215e:	2300      	movs	r3, #0
 8002160:	607b      	str	r3, [r7, #4]
 8002162:	e01b      	b.n	800219c <OLED_Refresh_Gram+0x44>
	{
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	b2db      	uxtb	r3, r3
 8002168:	3b50      	subs	r3, #80	; 0x50
 800216a:	b2db      	uxtb	r3, r3
 800216c:	2100      	movs	r1, #0
 800216e:	4618      	mov	r0, r3
 8002170:	f000 f820 	bl	80021b4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002174:	2100      	movs	r1, #0
 8002176:	2000      	movs	r0, #0
 8002178:	f000 f81c 	bl	80021b4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址
 800217c:	2100      	movs	r1, #0
 800217e:	2010      	movs	r0, #16
 8002180:	f000 f818 	bl	80021b4 <OLED_WR_Byte>
		//OLED_RS_Set();
		HAL_SPI_Transmit(&hspi1, OLED_GRAM[i], 128, 10);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	01db      	lsls	r3, r3, #7
 8002188:	4a08      	ldr	r2, [pc, #32]	; (80021ac <OLED_Refresh_Gram+0x54>)
 800218a:	1899      	adds	r1, r3, r2
 800218c:	230a      	movs	r3, #10
 800218e:	2280      	movs	r2, #128	; 0x80
 8002190:	4807      	ldr	r0, [pc, #28]	; (80021b0 <OLED_Refresh_Gram+0x58>)
 8002192:	f003 f9f6 	bl	8005582 <HAL_SPI_Transmit>
	for(int i=0;i<8;i++)
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3301      	adds	r3, #1
 800219a:	607b      	str	r3, [r7, #4]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2b07      	cmp	r3, #7
 80021a0:	dde0      	ble.n	8002164 <OLED_Refresh_Gram+0xc>
		//for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA);
	}
}
 80021a2:	bf00      	nop
 80021a4:	bf00      	nop
 80021a6:	3708      	adds	r7, #8
 80021a8:	46bd      	mov	sp, r7
 80021aa:	bd80      	pop	{r7, pc}
 80021ac:	20000908 	.word	0x20000908
 80021b0:	2000075c 	.word	0x2000075c

080021b4 <OLED_WR_Byte>:
函数功能：向OLED写入一个字节
入口参数：dat:要写入的数据/命令  ，cmd:数据/命令标志 0,表示命令;1,表示数据;
返 回 值：无
**************************************************************************/
void OLED_WR_Byte(u8 dat,u8 cmd)
{	
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	4603      	mov	r3, r0
 80021bc:	460a      	mov	r2, r1
 80021be:	71fb      	strb	r3, [r7, #7]
 80021c0:	4613      	mov	r3, r2
 80021c2:	71bb      	strb	r3, [r7, #6]
	//u8 i;
	if(cmd)
 80021c4:	79bb      	ldrb	r3, [r7, #6]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d005      	beq.n	80021d6 <OLED_WR_Byte+0x22>
	  OLED_RS_Set();
 80021ca:	2201      	movs	r2, #1
 80021cc:	2180      	movs	r1, #128	; 0x80
 80021ce:	480c      	ldr	r0, [pc, #48]	; (8002200 <OLED_WR_Byte+0x4c>)
 80021d0:	f002 fc8e 	bl	8004af0 <HAL_GPIO_WritePin>
 80021d4:	e004      	b.n	80021e0 <OLED_WR_Byte+0x2c>
	else 
	  OLED_RS_Clr();
 80021d6:	2200      	movs	r2, #0
 80021d8:	2180      	movs	r1, #128	; 0x80
 80021da:	4809      	ldr	r0, [pc, #36]	; (8002200 <OLED_WR_Byte+0x4c>)
 80021dc:	f002 fc88 	bl	8004af0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &dat, 1, 10);
 80021e0:	1df9      	adds	r1, r7, #7
 80021e2:	230a      	movs	r3, #10
 80021e4:	2201      	movs	r2, #1
 80021e6:	4807      	ldr	r0, [pc, #28]	; (8002204 <OLED_WR_Byte+0x50>)
 80021e8:	f003 f9cb 	bl	8005582 <HAL_SPI_Transmit>
		   OLED_SDIN_Clr();
		OLED_SCLK_Set();
		dat<<=1;   
	}				 		  
	*/
	OLED_RS_Set();   	  
 80021ec:	2201      	movs	r2, #1
 80021ee:	2180      	movs	r1, #128	; 0x80
 80021f0:	4803      	ldr	r0, [pc, #12]	; (8002200 <OLED_WR_Byte+0x4c>)
 80021f2:	f002 fc7d 	bl	8004af0 <HAL_GPIO_WritePin>
} 
 80021f6:	bf00      	nop
 80021f8:	3708      	adds	r7, #8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bd80      	pop	{r7, pc}
 80021fe:	bf00      	nop
 8002200:	40020400 	.word	0x40020400
 8002204:	2000075c 	.word	0x2000075c

08002208 <OLED_Clear>:
	OLED_WR_Byte(0XAE,OLED_CMD);  //DISPLAY OFF
}	
////////////////////////////////////////////////////////////////////////////////
//清屏函数,清完屏,整个屏幕是黑色的!和没点亮一样!!!	  
void OLED_Clear(void)  
{  
 8002208:	b480      	push	{r7}
 800220a:	b083      	sub	sp, #12
 800220c:	af00      	add	r7, sp, #0
	u8 i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[i][n]=0X00;
 800220e:	2300      	movs	r3, #0
 8002210:	71fb      	strb	r3, [r7, #7]
 8002212:	e014      	b.n	800223e <OLED_Clear+0x36>
 8002214:	2300      	movs	r3, #0
 8002216:	71bb      	strb	r3, [r7, #6]
 8002218:	e00a      	b.n	8002230 <OLED_Clear+0x28>
 800221a:	79fa      	ldrb	r2, [r7, #7]
 800221c:	79bb      	ldrb	r3, [r7, #6]
 800221e:	490d      	ldr	r1, [pc, #52]	; (8002254 <OLED_Clear+0x4c>)
 8002220:	01d2      	lsls	r2, r2, #7
 8002222:	440a      	add	r2, r1
 8002224:	4413      	add	r3, r2
 8002226:	2200      	movs	r2, #0
 8002228:	701a      	strb	r2, [r3, #0]
 800222a:	79bb      	ldrb	r3, [r7, #6]
 800222c:	3301      	adds	r3, #1
 800222e:	71bb      	strb	r3, [r7, #6]
 8002230:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8002234:	2b00      	cmp	r3, #0
 8002236:	daf0      	bge.n	800221a <OLED_Clear+0x12>
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	3301      	adds	r3, #1
 800223c:	71fb      	strb	r3, [r7, #7]
 800223e:	79fb      	ldrb	r3, [r7, #7]
 8002240:	2b07      	cmp	r3, #7
 8002242:	d9e7      	bls.n	8002214 <OLED_Clear+0xc>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
		//for(k=0;k<128;k++)OLED_WR_Byte(OLED_GRAM[j][k],OLED_DATA);
	}
	//OLED_Refresh_Gram();//更新显示
	 */
}
 8002244:	bf00      	nop
 8002246:	bf00      	nop
 8002248:	370c      	adds	r7, #12
 800224a:	46bd      	mov	sp, r7
 800224c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002250:	4770      	bx	lr
 8002252:	bf00      	nop
 8002254:	20000908 	.word	0x20000908

08002258 <OLED_DrawPoint>:
函数功能：在OLED中画点
入口参数：坐标:x：0~127，y:0~63  ，t:1 填充 0,清空		
返 回 值：无
**************************************************************************/
void OLED_DrawPoint(u8 x,u8 y,u8 t)
{
 8002258:	b480      	push	{r7}
 800225a:	b085      	sub	sp, #20
 800225c:	af00      	add	r7, sp, #0
 800225e:	4603      	mov	r3, r0
 8002260:	71fb      	strb	r3, [r7, #7]
 8002262:	460b      	mov	r3, r1
 8002264:	71bb      	strb	r3, [r7, #6]
 8002266:	4613      	mov	r3, r2
 8002268:	717b      	strb	r3, [r7, #5]
	u8 pos,bx,temp=0;
 800226a:	2300      	movs	r3, #0
 800226c:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//超出范围了.
 800226e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002272:	2b00      	cmp	r3, #0
 8002274:	db41      	blt.n	80022fa <OLED_DrawPoint+0xa2>
 8002276:	79bb      	ldrb	r3, [r7, #6]
 8002278:	2b3f      	cmp	r3, #63	; 0x3f
 800227a:	d83e      	bhi.n	80022fa <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800227c:	79bb      	ldrb	r3, [r7, #6]
 800227e:	08db      	lsrs	r3, r3, #3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	f1c3 0307 	rsb	r3, r3, #7
 8002286:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 8002288:	79bb      	ldrb	r3, [r7, #6]
 800228a:	f003 0307 	and.w	r3, r3, #7
 800228e:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 8002290:	7b7b      	ldrb	r3, [r7, #13]
 8002292:	f1c3 0307 	rsb	r3, r3, #7
 8002296:	2201      	movs	r2, #1
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[pos][x]|=temp;
 800229e:	797b      	ldrb	r3, [r7, #5]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d012      	beq.n	80022ca <OLED_DrawPoint+0x72>
 80022a4:	7bba      	ldrb	r2, [r7, #14]
 80022a6:	79fb      	ldrb	r3, [r7, #7]
 80022a8:	4917      	ldr	r1, [pc, #92]	; (8002308 <OLED_DrawPoint+0xb0>)
 80022aa:	01d2      	lsls	r2, r2, #7
 80022ac:	440a      	add	r2, r1
 80022ae:	4413      	add	r3, r2
 80022b0:	7818      	ldrb	r0, [r3, #0]
 80022b2:	7bba      	ldrb	r2, [r7, #14]
 80022b4:	79fb      	ldrb	r3, [r7, #7]
 80022b6:	7bf9      	ldrb	r1, [r7, #15]
 80022b8:	4301      	orrs	r1, r0
 80022ba:	b2c8      	uxtb	r0, r1
 80022bc:	4912      	ldr	r1, [pc, #72]	; (8002308 <OLED_DrawPoint+0xb0>)
 80022be:	01d2      	lsls	r2, r2, #7
 80022c0:	440a      	add	r2, r1
 80022c2:	4413      	add	r3, r2
 80022c4:	4602      	mov	r2, r0
 80022c6:	701a      	strb	r2, [r3, #0]
 80022c8:	e018      	b.n	80022fc <OLED_DrawPoint+0xa4>
	else OLED_GRAM[pos][x]&=~temp;
 80022ca:	7bba      	ldrb	r2, [r7, #14]
 80022cc:	79fb      	ldrb	r3, [r7, #7]
 80022ce:	490e      	ldr	r1, [pc, #56]	; (8002308 <OLED_DrawPoint+0xb0>)
 80022d0:	01d2      	lsls	r2, r2, #7
 80022d2:	440a      	add	r2, r1
 80022d4:	4413      	add	r3, r2
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	b25a      	sxtb	r2, r3
 80022da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80022de:	43db      	mvns	r3, r3
 80022e0:	b25b      	sxtb	r3, r3
 80022e2:	4013      	ands	r3, r2
 80022e4:	b259      	sxtb	r1, r3
 80022e6:	7bba      	ldrb	r2, [r7, #14]
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	b2c8      	uxtb	r0, r1
 80022ec:	4906      	ldr	r1, [pc, #24]	; (8002308 <OLED_DrawPoint+0xb0>)
 80022ee:	01d2      	lsls	r2, r2, #7
 80022f0:	440a      	add	r2, r1
 80022f2:	4413      	add	r3, r2
 80022f4:	4602      	mov	r2, r0
 80022f6:	701a      	strb	r2, [r3, #0]
 80022f8:	e000      	b.n	80022fc <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//超出范围了.
 80022fa:	bf00      	nop
}
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000908 	.word	0x20000908

0800230c <OLED_ShowChar>:
函数功能：在指定的位置显示一个字符
入口参数：坐标:x：0~127，y:0~63 ，mode:0,反白显示;1,正常显示	，size:选择字体 12-16		
返 回 值：无
**************************************************************************/
void OLED_ShowChar(u8 x,u8 y,u8 chr,u8 size,u8 mode)
{      			    
 800230c:	b590      	push	{r4, r7, lr}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	4604      	mov	r4, r0
 8002314:	4608      	mov	r0, r1
 8002316:	4611      	mov	r1, r2
 8002318:	461a      	mov	r2, r3
 800231a:	4623      	mov	r3, r4
 800231c:	71fb      	strb	r3, [r7, #7]
 800231e:	4603      	mov	r3, r0
 8002320:	71bb      	strb	r3, [r7, #6]
 8002322:	460b      	mov	r3, r1
 8002324:	717b      	strb	r3, [r7, #5]
 8002326:	4613      	mov	r3, r2
 8002328:	713b      	strb	r3, [r7, #4]
	u8 temp,t,t1;
	u8 y0=y;
 800232a:	79bb      	ldrb	r3, [r7, #6]
 800232c:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';//得到偏移后的值				   
 800232e:	797b      	ldrb	r3, [r7, #5]
 8002330:	3b20      	subs	r3, #32
 8002332:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 8002334:	2300      	movs	r3, #0
 8002336:	73bb      	strb	r3, [r7, #14]
 8002338:	e04d      	b.n	80023d6 <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //调用1206字体
 800233a:	793b      	ldrb	r3, [r7, #4]
 800233c:	2b0c      	cmp	r3, #12
 800233e:	d10b      	bne.n	8002358 <OLED_ShowChar+0x4c>
 8002340:	797a      	ldrb	r2, [r7, #5]
 8002342:	7bb9      	ldrb	r1, [r7, #14]
 8002344:	4828      	ldr	r0, [pc, #160]	; (80023e8 <OLED_ShowChar+0xdc>)
 8002346:	4613      	mov	r3, r2
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	4413      	add	r3, r2
 800234c:	009b      	lsls	r3, r3, #2
 800234e:	4403      	add	r3, r0
 8002350:	440b      	add	r3, r1
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e007      	b.n	8002368 <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //调用1608字体 	                          
 8002358:	797a      	ldrb	r2, [r7, #5]
 800235a:	7bbb      	ldrb	r3, [r7, #14]
 800235c:	4923      	ldr	r1, [pc, #140]	; (80023ec <OLED_ShowChar+0xe0>)
 800235e:	0112      	lsls	r2, r2, #4
 8002360:	440a      	add	r2, r1
 8002362:	4413      	add	r3, r2
 8002364:	781b      	ldrb	r3, [r3, #0]
 8002366:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 8002368:	2300      	movs	r3, #0
 800236a:	737b      	strb	r3, [r7, #13]
 800236c:	e02d      	b.n	80023ca <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800236e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002372:	2b00      	cmp	r3, #0
 8002374:	da07      	bge.n	8002386 <OLED_ShowChar+0x7a>
 8002376:	f897 2020 	ldrb.w	r2, [r7, #32]
 800237a:	79b9      	ldrb	r1, [r7, #6]
 800237c:	79fb      	ldrb	r3, [r7, #7]
 800237e:	4618      	mov	r0, r3
 8002380:	f7ff ff6a 	bl	8002258 <OLED_DrawPoint>
 8002384:	e00c      	b.n	80023a0 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 8002386:	f897 3020 	ldrb.w	r3, [r7, #32]
 800238a:	2b00      	cmp	r3, #0
 800238c:	bf0c      	ite	eq
 800238e:	2301      	moveq	r3, #1
 8002390:	2300      	movne	r3, #0
 8002392:	b2db      	uxtb	r3, r3
 8002394:	461a      	mov	r2, r3
 8002396:	79b9      	ldrb	r1, [r7, #6]
 8002398:	79fb      	ldrb	r3, [r7, #7]
 800239a:	4618      	mov	r0, r3
 800239c:	f7ff ff5c 	bl	8002258 <OLED_DrawPoint>
			temp<<=1;
 80023a0:	7bfb      	ldrb	r3, [r7, #15]
 80023a2:	005b      	lsls	r3, r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
			y++;
 80023a6:	79bb      	ldrb	r3, [r7, #6]
 80023a8:	3301      	adds	r3, #1
 80023aa:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 80023ac:	79ba      	ldrb	r2, [r7, #6]
 80023ae:	7b3b      	ldrb	r3, [r7, #12]
 80023b0:	1ad2      	subs	r2, r2, r3
 80023b2:	793b      	ldrb	r3, [r7, #4]
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d105      	bne.n	80023c4 <OLED_ShowChar+0xb8>
			{
				y=y0;
 80023b8:	7b3b      	ldrb	r3, [r7, #12]
 80023ba:	71bb      	strb	r3, [r7, #6]
				x++;
 80023bc:	79fb      	ldrb	r3, [r7, #7]
 80023be:	3301      	adds	r3, #1
 80023c0:	71fb      	strb	r3, [r7, #7]
				break;
 80023c2:	e005      	b.n	80023d0 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 80023c4:	7b7b      	ldrb	r3, [r7, #13]
 80023c6:	3301      	adds	r3, #1
 80023c8:	737b      	strb	r3, [r7, #13]
 80023ca:	7b7b      	ldrb	r3, [r7, #13]
 80023cc:	2b07      	cmp	r3, #7
 80023ce:	d9ce      	bls.n	800236e <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 80023d0:	7bbb      	ldrb	r3, [r7, #14]
 80023d2:	3301      	adds	r3, #1
 80023d4:	73bb      	strb	r3, [r7, #14]
 80023d6:	7bba      	ldrb	r2, [r7, #14]
 80023d8:	793b      	ldrb	r3, [r7, #4]
 80023da:	429a      	cmp	r2, r3
 80023dc:	d3ad      	bcc.n	800233a <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 80023de:	bf00      	nop
 80023e0:	bf00      	nop
 80023e2:	3714      	adds	r7, #20
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd90      	pop	{r4, r7, pc}
 80023e8:	08008570 	.word	0x08008570
 80023ec:	080089e4 	.word	0x080089e4

080023f0 <oled_pow>:

//m^n函数
u32 oled_pow(u8 m,u8 n)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b085      	sub	sp, #20
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	4603      	mov	r3, r0
 80023f8:	460a      	mov	r2, r1
 80023fa:	71fb      	strb	r3, [r7, #7]
 80023fc:	4613      	mov	r3, r2
 80023fe:	71bb      	strb	r3, [r7, #6]
	u32 result=1;	 
 8002400:	2301      	movs	r3, #1
 8002402:	60fb      	str	r3, [r7, #12]
	while(n--)result*=m;    
 8002404:	e004      	b.n	8002410 <oled_pow+0x20>
 8002406:	79fa      	ldrb	r2, [r7, #7]
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	fb02 f303 	mul.w	r3, r2, r3
 800240e:	60fb      	str	r3, [r7, #12]
 8002410:	79bb      	ldrb	r3, [r7, #6]
 8002412:	1e5a      	subs	r2, r3, #1
 8002414:	71ba      	strb	r2, [r7, #6]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d1f5      	bne.n	8002406 <oled_pow+0x16>
	return result;
 800241a:	68fb      	ldr	r3, [r7, #12]
}	
 800241c:	4618      	mov	r0, r3
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr

08002428 <OLED_ShowNumber>:
函数功能：显示2个数字
入口参数：坐标:x：0~127，y:0~63 ；num:数值(0~4294967295)；mode:0,填充模式 1,叠加模式； size:选择字体 12-16		
返 回 值：无
**************************************************************************/  
void OLED_ShowNumber(u8 x,u8 y,u32 num,u8 len,u8 size)
{         	
 8002428:	b590      	push	{r4, r7, lr}
 800242a:	b087      	sub	sp, #28
 800242c:	af02      	add	r7, sp, #8
 800242e:	603a      	str	r2, [r7, #0]
 8002430:	461a      	mov	r2, r3
 8002432:	4603      	mov	r3, r0
 8002434:	71fb      	strb	r3, [r7, #7]
 8002436:	460b      	mov	r3, r1
 8002438:	71bb      	strb	r3, [r7, #6]
 800243a:	4613      	mov	r3, r2
 800243c:	717b      	strb	r3, [r7, #5]
	u8 t,temp;
	u8 enshow=0;						   
 800243e:	2300      	movs	r3, #0
 8002440:	73bb      	strb	r3, [r7, #14]
	for(t=0;t<len;t++)
 8002442:	2300      	movs	r3, #0
 8002444:	73fb      	strb	r3, [r7, #15]
 8002446:	e051      	b.n	80024ec <OLED_ShowNumber+0xc4>
	{
		temp=(num/oled_pow(10,len-t-1))%10;
 8002448:	797a      	ldrb	r2, [r7, #5]
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	1ad3      	subs	r3, r2, r3
 800244e:	b2db      	uxtb	r3, r3
 8002450:	3b01      	subs	r3, #1
 8002452:	b2db      	uxtb	r3, r3
 8002454:	4619      	mov	r1, r3
 8002456:	200a      	movs	r0, #10
 8002458:	f7ff ffca 	bl	80023f0 <oled_pow>
 800245c:	4602      	mov	r2, r0
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	fbb3 f1f2 	udiv	r1, r3, r2
 8002464:	4b26      	ldr	r3, [pc, #152]	; (8002500 <OLED_ShowNumber+0xd8>)
 8002466:	fba3 2301 	umull	r2, r3, r3, r1
 800246a:	08da      	lsrs	r2, r3, #3
 800246c:	4613      	mov	r3, r2
 800246e:	009b      	lsls	r3, r3, #2
 8002470:	4413      	add	r3, r2
 8002472:	005b      	lsls	r3, r3, #1
 8002474:	1aca      	subs	r2, r1, r3
 8002476:	4613      	mov	r3, r2
 8002478:	737b      	strb	r3, [r7, #13]
		if(enshow==0&&t<(len-1))
 800247a:	7bbb      	ldrb	r3, [r7, #14]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <OLED_ShowNumber+0x94>
 8002480:	7bfa      	ldrb	r2, [r7, #15]
 8002482:	797b      	ldrb	r3, [r7, #5]
 8002484:	3b01      	subs	r3, #1
 8002486:	429a      	cmp	r2, r3
 8002488:	da18      	bge.n	80024bc <OLED_ShowNumber+0x94>
		{
			if(temp==0)
 800248a:	7b7b      	ldrb	r3, [r7, #13]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d113      	bne.n	80024b8 <OLED_ShowNumber+0x90>
			{
				OLED_ShowChar(x+(size/2)*t,y,' ',size,1);
 8002490:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002494:	085b      	lsrs	r3, r3, #1
 8002496:	b2db      	uxtb	r3, r3
 8002498:	7bfa      	ldrb	r2, [r7, #15]
 800249a:	fb12 f303 	smulbb	r3, r2, r3
 800249e:	b2da      	uxtb	r2, r3
 80024a0:	79fb      	ldrb	r3, [r7, #7]
 80024a2:	4413      	add	r3, r2
 80024a4:	b2d8      	uxtb	r0, r3
 80024a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024aa:	79b9      	ldrb	r1, [r7, #6]
 80024ac:	2201      	movs	r2, #1
 80024ae:	9200      	str	r2, [sp, #0]
 80024b0:	2220      	movs	r2, #32
 80024b2:	f7ff ff2b 	bl	800230c <OLED_ShowChar>
				continue;
 80024b6:	e016      	b.n	80024e6 <OLED_ShowNumber+0xbe>
			}else enshow=1; 
 80024b8:	2301      	movs	r3, #1
 80024ba:	73bb      	strb	r3, [r7, #14]
		 	 
		}
	 	OLED_ShowChar(x+(size/2)*t,y,temp+'0',size,1); 
 80024bc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024c0:	085b      	lsrs	r3, r3, #1
 80024c2:	b2db      	uxtb	r3, r3
 80024c4:	7bfa      	ldrb	r2, [r7, #15]
 80024c6:	fb12 f303 	smulbb	r3, r2, r3
 80024ca:	b2da      	uxtb	r2, r3
 80024cc:	79fb      	ldrb	r3, [r7, #7]
 80024ce:	4413      	add	r3, r2
 80024d0:	b2d8      	uxtb	r0, r3
 80024d2:	7b7b      	ldrb	r3, [r7, #13]
 80024d4:	3330      	adds	r3, #48	; 0x30
 80024d6:	b2da      	uxtb	r2, r3
 80024d8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024dc:	79b9      	ldrb	r1, [r7, #6]
 80024de:	2401      	movs	r4, #1
 80024e0:	9400      	str	r4, [sp, #0]
 80024e2:	f7ff ff13 	bl	800230c <OLED_ShowChar>
	for(t=0;t<len;t++)
 80024e6:	7bfb      	ldrb	r3, [r7, #15]
 80024e8:	3301      	adds	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
 80024ec:	7bfa      	ldrb	r2, [r7, #15]
 80024ee:	797b      	ldrb	r3, [r7, #5]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d3a9      	bcc.n	8002448 <OLED_ShowNumber+0x20>
	}
} 
 80024f4:	bf00      	nop
 80024f6:	bf00      	nop
 80024f8:	3714      	adds	r7, #20
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd90      	pop	{r4, r7, pc}
 80024fe:	bf00      	nop
 8002500:	cccccccd 	.word	0xcccccccd

08002504 <OLED_ShowString>:
函数功能：显示字符串
入口参数：坐标:x：0~127，y:0~63 ；*p:字符串起始地址；
返 回 值：无
**************************************************************************/  
void OLED_ShowString(u8 x,u8 y,const char *p)
{
 8002504:	b580      	push	{r7, lr}
 8002506:	b084      	sub	sp, #16
 8002508:	af02      	add	r7, sp, #8
 800250a:	4603      	mov	r3, r0
 800250c:	603a      	str	r2, [r7, #0]
 800250e:	71fb      	strb	r3, [r7, #7]
 8002510:	460b      	mov	r3, r1
 8002512:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 8002514:	e01f      	b.n	8002556 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 8002516:	79fb      	ldrb	r3, [r7, #7]
 8002518:	2b7a      	cmp	r3, #122	; 0x7a
 800251a:	d904      	bls.n	8002526 <OLED_ShowString+0x22>
 800251c:	2300      	movs	r3, #0
 800251e:	71fb      	strb	r3, [r7, #7]
 8002520:	79bb      	ldrb	r3, [r7, #6]
 8002522:	3310      	adds	r3, #16
 8002524:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 8002526:	79bb      	ldrb	r3, [r7, #6]
 8002528:	2b3a      	cmp	r3, #58	; 0x3a
 800252a:	d905      	bls.n	8002538 <OLED_ShowString+0x34>
 800252c:	2300      	movs	r3, #0
 800252e:	71fb      	strb	r3, [r7, #7]
 8002530:	79fb      	ldrb	r3, [r7, #7]
 8002532:	71bb      	strb	r3, [r7, #6]
 8002534:	f7ff fe68 	bl	8002208 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	781a      	ldrb	r2, [r3, #0]
 800253c:	79b9      	ldrb	r1, [r7, #6]
 800253e:	79f8      	ldrb	r0, [r7, #7]
 8002540:	2301      	movs	r3, #1
 8002542:	9300      	str	r3, [sp, #0]
 8002544:	230c      	movs	r3, #12
 8002546:	f7ff fee1 	bl	800230c <OLED_ShowChar>
        x+=8;
 800254a:	79fb      	ldrb	r3, [r7, #7]
 800254c:	3308      	adds	r3, #8
 800254e:	71fb      	strb	r3, [r7, #7]
        p++;
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	3301      	adds	r3, #1
 8002554:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	781b      	ldrb	r3, [r3, #0]
 800255a:	2b00      	cmp	r3, #0
 800255c:	d1db      	bne.n	8002516 <OLED_ShowString+0x12>
    }  
}	
 800255e:	bf00      	nop
 8002560:	bf00      	nop
 8002562:	3708      	adds	r7, #8
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <OLED_Init>:
函数功能：初始化OLED
入口参数：无
返 回 值：无
**************************************************************************/ 
void OLED_Init(void)
{ 	 	 
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
	OLED_RST_Clr();
 800256e:	2200      	movs	r2, #0
 8002570:	2140      	movs	r1, #64	; 0x40
 8002572:	4851      	ldr	r0, [pc, #324]	; (80026b8 <OLED_Init+0x150>)
 8002574:	f002 fabc 	bl	8004af0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002578:	2001      	movs	r0, #1
 800257a:	f001 f9a7 	bl	80038cc <HAL_Delay>
	OLED_RST_Set();   //OLED复位
 800257e:	2201      	movs	r2, #1
 8002580:	2140      	movs	r1, #64	; 0x40
 8002582:	484d      	ldr	r0, [pc, #308]	; (80026b8 <OLED_Init+0x150>)
 8002584:	f002 fab4 	bl	8004af0 <HAL_GPIO_WritePin>
					  
	OLED_WR_Byte(0xAE,OLED_CMD); //关闭显示
 8002588:	2100      	movs	r1, #0
 800258a:	20ae      	movs	r0, #174	; 0xae
 800258c:	f7ff fe12 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD5,OLED_CMD); //设置时钟分频因子,震荡频率
 8002590:	2100      	movs	r1, #0
 8002592:	20d5      	movs	r0, #213	; 0xd5
 8002594:	f7ff fe0e 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);   //[3:0],分频因子;[7:4],震荡频率
 8002598:	2100      	movs	r1, #0
 800259a:	2050      	movs	r0, #80	; 0x50
 800259c:	f7ff fe0a 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //设置驱动路数
 80025a0:	2100      	movs	r1, #0
 80025a2:	20a8      	movs	r0, #168	; 0xa8
 80025a4:	f7ff fe06 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //默认0X3F(1/64) 
 80025a8:	2100      	movs	r1, #0
 80025aa:	203f      	movs	r0, #63	; 0x3f
 80025ac:	f7ff fe02 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD); //设置显示偏移
 80025b0:	2100      	movs	r1, #0
 80025b2:	20d3      	movs	r0, #211	; 0xd3
 80025b4:	f7ff fdfe 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //默认为0
 80025b8:	2100      	movs	r1, #0
 80025ba:	2000      	movs	r0, #0
 80025bc:	f7ff fdfa 	bl	80021b4 <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //设置显示开始行 [5:0],行数.
 80025c0:	2100      	movs	r1, #0
 80025c2:	2040      	movs	r0, #64	; 0x40
 80025c4:	f7ff fdf6 	bl	80021b4 <OLED_WR_Byte>
													    
	OLED_WR_Byte(0x8D,OLED_CMD); //电荷泵设置
 80025c8:	2100      	movs	r1, #0
 80025ca:	208d      	movs	r0, #141	; 0x8d
 80025cc:	f7ff fdf2 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //bit2，开启/关闭
 80025d0:	2100      	movs	r1, #0
 80025d2:	2014      	movs	r0, #20
 80025d4:	f7ff fdee 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //设置内存地址模式
 80025d8:	2100      	movs	r1, #0
 80025da:	2020      	movs	r0, #32
 80025dc:	f7ff fdea 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //[1:0],00，列地址模式;01，行地址模式;10,页地址模式;默认10;
 80025e0:	2100      	movs	r1, #0
 80025e2:	2002      	movs	r0, #2
 80025e4:	f7ff fde6 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //段重定义设置,bit0:0,0->0;1,0->127;
 80025e8:	2100      	movs	r1, #0
 80025ea:	20a1      	movs	r0, #161	; 0xa1
 80025ec:	f7ff fde2 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //设置COM扫描方向;bit3:0,普通模式;1,重定义模式 COM[N-1]->COM0;N:驱动路数
 80025f0:	2100      	movs	r1, #0
 80025f2:	20c0      	movs	r0, #192	; 0xc0
 80025f4:	f7ff fdde 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //设置COM硬件引脚配置
 80025f8:	2100      	movs	r1, #0
 80025fa:	20da      	movs	r0, #218	; 0xda
 80025fc:	f7ff fdda 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4]配置
 8002600:	2100      	movs	r1, #0
 8002602:	2012      	movs	r0, #18
 8002604:	f7ff fdd6 	bl	80021b4 <OLED_WR_Byte>
		 
	OLED_WR_Byte(0x81,OLED_CMD); //对比度设置
 8002608:	2100      	movs	r1, #0
 800260a:	2081      	movs	r0, #129	; 0x81
 800260c:	f7ff fdd2 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~255;默认0X7F (亮度设置,越大越亮)
 8002610:	2100      	movs	r1, #0
 8002612:	20ef      	movs	r0, #239	; 0xef
 8002614:	f7ff fdce 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //设置预充电周期
 8002618:	2100      	movs	r1, #0
 800261a:	20d9      	movs	r0, #217	; 0xd9
 800261c:	f7ff fdca 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 8002620:	2100      	movs	r1, #0
 8002622:	20f1      	movs	r0, #241	; 0xf1
 8002624:	f7ff fdc6 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //设置VCOMH 电压倍率
 8002628:	2100      	movs	r1, #0
 800262a:	20db      	movs	r0, #219	; 0xdb
 800262c:	f7ff fdc2 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD); //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 8002630:	2100      	movs	r1, #0
 8002632:	2030      	movs	r0, #48	; 0x30
 8002634:	f7ff fdbe 	bl	80021b4 <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //全局显示开启;bit0:1,开启;0,关闭;(白屏/黑屏)
 8002638:	2100      	movs	r1, #0
 800263a:	20a4      	movs	r0, #164	; 0xa4
 800263c:	f7ff fdba 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //设置显示方式;bit0:1,反相显示;0,正常显示	    						   
 8002640:	2100      	movs	r1, #0
 8002642:	20a6      	movs	r0, #166	; 0xa6
 8002644:	f7ff fdb6 	bl	80021b4 <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //开启显示	 
 8002648:	2100      	movs	r1, #0
 800264a:	20af      	movs	r0, #175	; 0xaf
 800264c:	f7ff fdb2 	bl	80021b4 <OLED_WR_Byte>
	OLED_Clear();                //清屏
 8002650:	f7ff fdda 	bl	8002208 <OLED_Clear>
	u8 i,n;		    
	for(i=0;i<8;i++)  
 8002654:	2300      	movs	r3, #0
 8002656:	71fb      	strb	r3, [r7, #7]
 8002658:	e026      	b.n	80026a8 <OLED_Init+0x140>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    //设置页地址（0~7）
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	3b50      	subs	r3, #80	; 0x50
 800265e:	b2db      	uxtb	r3, r3
 8002660:	2100      	movs	r1, #0
 8002662:	4618      	mov	r0, r3
 8002664:	f7ff fda6 	bl	80021b4 <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      //设置显示位置—列低地址
 8002668:	2100      	movs	r1, #0
 800266a:	2000      	movs	r0, #0
 800266c:	f7ff fda2 	bl	80021b4 <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);      //设置显示位置—列高地址   
 8002670:	2100      	movs	r1, #0
 8002672:	2010      	movs	r0, #16
 8002674:	f7ff fd9e 	bl	80021b4 <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[i][n],OLED_DATA);
 8002678:	2300      	movs	r3, #0
 800267a:	71bb      	strb	r3, [r7, #6]
 800267c:	e00d      	b.n	800269a <OLED_Init+0x132>
 800267e:	79fa      	ldrb	r2, [r7, #7]
 8002680:	79bb      	ldrb	r3, [r7, #6]
 8002682:	490e      	ldr	r1, [pc, #56]	; (80026bc <OLED_Init+0x154>)
 8002684:	01d2      	lsls	r2, r2, #7
 8002686:	440a      	add	r2, r1
 8002688:	4413      	add	r3, r2
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2101      	movs	r1, #1
 800268e:	4618      	mov	r0, r3
 8002690:	f7ff fd90 	bl	80021b4 <OLED_WR_Byte>
 8002694:	79bb      	ldrb	r3, [r7, #6]
 8002696:	3301      	adds	r3, #1
 8002698:	71bb      	strb	r3, [r7, #6]
 800269a:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	daed      	bge.n	800267e <OLED_Init+0x116>
	for(i=0;i<8;i++)  
 80026a2:	79fb      	ldrb	r3, [r7, #7]
 80026a4:	3301      	adds	r3, #1
 80026a6:	71fb      	strb	r3, [r7, #7]
 80026a8:	79fb      	ldrb	r3, [r7, #7]
 80026aa:	2b07      	cmp	r3, #7
 80026ac:	d9d5      	bls.n	800265a <OLED_Init+0xf2>
	}   
}  
 80026ae:	bf00      	nop
 80026b0:	bf00      	nop
 80026b2:	3708      	adds	r7, #8
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bd80      	pop	{r7, pc}
 80026b8:	40020400 	.word	0x40020400
 80026bc:	20000908 	.word	0x20000908

080026c0 <raspiInit>:
//0x5a 0xa5 Yaw Factor Throttle Factor Forward Factor Lateral Factor LED lock



void raspiInit(UART_HandleTypeDef *huart)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
    //__HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 80026c8:	220c      	movs	r2, #12
 80026ca:	4904      	ldr	r1, [pc, #16]	; (80026dc <raspiInit+0x1c>)
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f004 fb67 	bl	8006da0 <HAL_UART_Receive_DMA>
}
 80026d2:	bf00      	nop
 80026d4:	3708      	adds	r7, #8
 80026d6:	46bd      	mov	sp, r7
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000280 	.word	0x20000280

080026e0 <raspi>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void raspi()
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b082      	sub	sp, #8
 80026e4:	af00      	add	r7, sp, #0
	short * date = (short *)(raspiBuffer + 2);
 80026e6:	4b30      	ldr	r3, [pc, #192]	; (80027a8 <raspi+0xc8>)
 80026e8:	603b      	str	r3, [r7, #0]
	for(int i=0;i<4;i++)
 80026ea:	2300      	movs	r3, #0
 80026ec:	607b      	str	r3, [r7, #4]
 80026ee:	e01c      	b.n	800272a <raspi+0x4a>
		raspich_float[i]=1.0*date[i]/0x7fff;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	005b      	lsls	r3, r3, #1
 80026f4:	683a      	ldr	r2, [r7, #0]
 80026f6:	4413      	add	r3, r2
 80026f8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd feb5 	bl	800046c <__aeabi_i2d>
 8002702:	a327      	add	r3, pc, #156	; (adr r3, 80027a0 <raspi+0xc0>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fe f844 	bl	8000794 <__aeabi_ddiv>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe f926 	bl	8000964 <__aeabi_d2f>
 8002718:	4602      	mov	r2, r0
 800271a:	4924      	ldr	r1, [pc, #144]	; (80027ac <raspi+0xcc>)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	440b      	add	r3, r1
 8002722:	601a      	str	r2, [r3, #0]
	for(int i=0;i<4;i++)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	3301      	adds	r3, #1
 8002728:	607b      	str	r3, [r7, #4]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2b03      	cmp	r3, #3
 800272e:	dddf      	ble.n	80026f0 <raspi+0x10>

    target_ver[2] = yaw + raspich_float[0]*180;
 8002730:	4b1e      	ldr	r3, [pc, #120]	; (80027ac <raspi+0xcc>)
 8002732:	edd3 7a00 	vldr	s15, [r3]
 8002736:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80027b0 <raspi+0xd0>
 800273a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800273e:	4b1d      	ldr	r3, [pc, #116]	; (80027b4 <raspi+0xd4>)
 8002740:	edd3 7a00 	vldr	s15, [r3]
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	4b1b      	ldr	r3, [pc, #108]	; (80027b8 <raspi+0xd8>)
 800274a:	edc3 7a02 	vstr	s15, [r3, #8]
    target_ver[3] = raspich_float[1];
 800274e:	4b17      	ldr	r3, [pc, #92]	; (80027ac <raspi+0xcc>)
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	4a19      	ldr	r2, [pc, #100]	; (80027b8 <raspi+0xd8>)
 8002754:	60d3      	str	r3, [r2, #12]
    target_ver[4] = raspich_float[2];
 8002756:	4b15      	ldr	r3, [pc, #84]	; (80027ac <raspi+0xcc>)
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4a17      	ldr	r2, [pc, #92]	; (80027b8 <raspi+0xd8>)
 800275c:	6113      	str	r3, [r2, #16]
    target_ver[5] = raspich_float[3];
 800275e:	4b13      	ldr	r3, [pc, #76]	; (80027ac <raspi+0xcc>)
 8002760:	68db      	ldr	r3, [r3, #12]
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <raspi+0xd8>)
 8002764:	6153      	str	r3, [r2, #20]
    if(raspiBuffer[10]==0)
 8002766:	4b15      	ldr	r3, [pc, #84]	; (80027bc <raspi+0xdc>)
 8002768:	7a9b      	ldrb	r3, [r3, #10]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d106      	bne.n	800277c <raspi+0x9c>
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_SET);
 800276e:	2201      	movs	r2, #1
 8002770:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002774:	4812      	ldr	r0, [pc, #72]	; (80027c0 <raspi+0xe0>)
 8002776:	f002 f9bb 	bl	8004af0 <HAL_GPIO_WritePin>
 800277a:	e005      	b.n	8002788 <raspi+0xa8>
    else
    	HAL_GPIO_WritePin(LED1_GPIO_Port, LED1_Pin, GPIO_PIN_RESET);
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002782:	480f      	ldr	r0, [pc, #60]	; (80027c0 <raspi+0xe0>)
 8002784:	f002 f9b4 	bl	8004af0 <HAL_GPIO_WritePin>
    lock=raspiBuffer[11];
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <raspi+0xdc>)
 800278a:	7adb      	ldrb	r3, [r3, #11]
 800278c:	461a      	mov	r2, r3
 800278e:	4b0d      	ldr	r3, [pc, #52]	; (80027c4 <raspi+0xe4>)
 8002790:	601a      	str	r2, [r3, #0]

}
 8002792:	bf00      	nop
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	f3af 8000 	nop.w
 80027a0:	00000000 	.word	0x00000000
 80027a4:	40dfffc0 	.word	0x40dfffc0
 80027a8:	20000282 	.word	0x20000282
 80027ac:	200002a0 	.word	0x200002a0
 80027b0:	43340000 	.word	0x43340000
 80027b4:	20000370 	.word	0x20000370
 80027b8:	200002fc 	.word	0x200002fc
 80027bc:	20000280 	.word	0x20000280
 80027c0:	40020c00 	.word	0x40020c00
 80027c4:	2000027c 	.word	0x2000027c

080027c8 <raspierr>:
void raspierr(UART_HandleTypeDef *huart)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
    HAL_UART_AbortReceive(huart);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f004 fb15 	bl	8006e00 <HAL_UART_AbortReceive>
    HAL_UART_Receive_DMA(huart, raspiBuffer, 12);
 80027d6:	220c      	movs	r2, #12
 80027d8:	4903      	ldr	r1, [pc, #12]	; (80027e8 <raspierr+0x20>)
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	f004 fae0 	bl	8006da0 <HAL_UART_Receive_DMA>
}
 80027e0:	bf00      	nop
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}
 80027e8:	20000280 	.word	0x20000280

080027ec <remoteInit>:
float conf=0;
float val=0;
extern UART_HandleTypeDef huart5;
extern UART_HandleTypeDef huart1;
void remoteInit(UART_HandleTypeDef *huart)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b082      	sub	sp, #8
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
    if(&huart1==huart)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	4a0f      	ldr	r2, [pc, #60]	; (8002834 <remoteInit+0x48>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d106      	bne.n	800280a <remoteInit+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 80027fc:	4b0e      	ldr	r3, [pc, #56]	; (8002838 <remoteInit+0x4c>)
 80027fe:	2219      	movs	r2, #25
 8002800:	4619      	mov	r1, r3
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f004 facc 	bl	8006da0 <HAL_UART_Receive_DMA>
 8002808:	e008      	b.n	800281c <remoteInit+0x30>
	}else if(&huart5==huart)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	4a0b      	ldr	r2, [pc, #44]	; (800283c <remoteInit+0x50>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d104      	bne.n	800281c <remoteInit+0x30>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002812:	2219      	movs	r2, #25
 8002814:	490a      	ldr	r1, [pc, #40]	; (8002840 <remoteInit+0x54>)
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f004 fac2 	bl	8006da0 <HAL_UART_Receive_DMA>
	}
    __HAL_UART_ENABLE_IT(huart, UART_IT_IDLE);
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	68da      	ldr	r2, [r3, #12]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f042 0210 	orr.w	r2, r2, #16
 800282a:	60da      	str	r2, [r3, #12]
}
 800282c:	bf00      	nop
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	2000068c 	.word	0x2000068c
 8002838:	200002c0 	.word	0x200002c0
 800283c:	200005a0 	.word	0x200005a0
 8002840:	200002b0 	.word	0x200002b0

08002844 <remote>:
//从中断触发 每次执行 将遥控器通道数据提取 归一到ch_float中
void remote(uint8_t * remoteBuffer)
{
 8002844:	b490      	push	{r4, r7}
 8002846:	b086      	sub	sp, #24
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
	float *dat = (float*)(remoteBuffer+4);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	3304      	adds	r3, #4
 8002850:	617b      	str	r3, [r7, #20]
	if(remoteBuffer[3]==0x00)
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	3303      	adds	r3, #3
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	2b00      	cmp	r3, #0
 800285a:	d108      	bne.n	800286e <remote+0x2a>
	{
		ch_float[4]=dat[1];
 800285c:	697b      	ldr	r3, [r7, #20]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	4a60      	ldr	r2, [pc, #384]	; (80029e4 <remote+0x1a0>)
 8002862:	6113      	str	r3, [r2, #16]
		ch_float[5]=dat[0];
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	4a5e      	ldr	r2, [pc, #376]	; (80029e4 <remote+0x1a0>)
 800286a:	6153      	str	r3, [r2, #20]
 800286c:	e08a      	b.n	8002984 <remote+0x140>
	}else if(remoteBuffer[3]==0x01)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3303      	adds	r3, #3
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d108      	bne.n	800288a <remote+0x46>
	{
		ch_float[0]=dat[0];
 8002878:	697b      	ldr	r3, [r7, #20]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a59      	ldr	r2, [pc, #356]	; (80029e4 <remote+0x1a0>)
 800287e:	6013      	str	r3, [r2, #0]
		ch_float[1]=dat[1];
 8002880:	697b      	ldr	r3, [r7, #20]
 8002882:	685b      	ldr	r3, [r3, #4]
 8002884:	4a57      	ldr	r2, [pc, #348]	; (80029e4 <remote+0x1a0>)
 8002886:	6053      	str	r3, [r2, #4]
 8002888:	e07c      	b.n	8002984 <remote+0x140>
	}else if(remoteBuffer[3]==0x02)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	3303      	adds	r3, #3
 800288e:	781b      	ldrb	r3, [r3, #0]
 8002890:	2b02      	cmp	r3, #2
 8002892:	d106      	bne.n	80028a2 <remote+0x5e>
	{
		lock = remoteBuffer[7];
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3307      	adds	r3, #7
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	461a      	mov	r2, r3
 800289c:	4b52      	ldr	r3, [pc, #328]	; (80029e8 <remote+0x1a4>)
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	e070      	b.n	8002984 <remote+0x140>
	}else if(remoteBuffer[3]==0x03)//通道选择
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	3303      	adds	r3, #3
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b03      	cmp	r3, #3
 80028aa:	d12e      	bne.n	800290a <remote+0xc6>
	{
		conf=dat[0];
 80028ac:	697b      	ldr	r3, [r7, #20]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	4a4e      	ldr	r2, [pc, #312]	; (80029ec <remote+0x1a8>)
 80028b2:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 80028b4:	4b4d      	ldr	r3, [pc, #308]	; (80029ec <remote+0x1a8>)
 80028b6:	edd3 7a00 	vldr	s15, [r3]
 80028ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028be:	ee17 3a90 	vmov	r3, s15
 80028c2:	60fb      	str	r3, [r7, #12]
		val=pid_ver[i_conf/3][i_conf%3];
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	4a4a      	ldr	r2, [pc, #296]	; (80029f0 <remote+0x1ac>)
 80028c8:	fb82 1203 	smull	r1, r2, r2, r3
 80028cc:	17db      	asrs	r3, r3, #31
 80028ce:	1ad0      	subs	r0, r2, r3
 80028d0:	68f9      	ldr	r1, [r7, #12]
 80028d2:	4b47      	ldr	r3, [pc, #284]	; (80029f0 <remote+0x1ac>)
 80028d4:	fb83 3201 	smull	r3, r2, r3, r1
 80028d8:	17cb      	asrs	r3, r1, #31
 80028da:	1ad2      	subs	r2, r2, r3
 80028dc:	4613      	mov	r3, r2
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	4413      	add	r3, r2
 80028e2:	1aca      	subs	r2, r1, r3
 80028e4:	4943      	ldr	r1, [pc, #268]	; (80029f4 <remote+0x1b0>)
 80028e6:	4603      	mov	r3, r0
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	1a1b      	subs	r3, r3, r0
 80028ec:	4413      	add	r3, r2
 80028ee:	009b      	lsls	r3, r3, #2
 80028f0:	440b      	add	r3, r1
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4a40      	ldr	r2, [pc, #256]	; (80029f8 <remote+0x1b4>)
 80028f6:	6013      	str	r3, [r2, #0]
		frame.fdata[24]=conf;
 80028f8:	4b3c      	ldr	r3, [pc, #240]	; (80029ec <remote+0x1a8>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a3f      	ldr	r2, [pc, #252]	; (80029fc <remote+0x1b8>)
 80028fe:	6613      	str	r3, [r2, #96]	; 0x60
		frame.fdata[25]=val;
 8002900:	4b3d      	ldr	r3, [pc, #244]	; (80029f8 <remote+0x1b4>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a3d      	ldr	r2, [pc, #244]	; (80029fc <remote+0x1b8>)
 8002906:	6653      	str	r3, [r2, #100]	; 0x64
 8002908:	e03c      	b.n	8002984 <remote+0x140>
	}else if(remoteBuffer[3]==0x04)//通道值
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3303      	adds	r3, #3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	2b04      	cmp	r3, #4
 8002912:	d12a      	bne.n	800296a <remote+0x126>
	{
		val=dat[0];
 8002914:	697b      	ldr	r3, [r7, #20]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a37      	ldr	r2, [pc, #220]	; (80029f8 <remote+0x1b4>)
 800291a:	6013      	str	r3, [r2, #0]
		int i_conf=(int)conf;
 800291c:	4b33      	ldr	r3, [pc, #204]	; (80029ec <remote+0x1a8>)
 800291e:	edd3 7a00 	vldr	s15, [r3]
 8002922:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002926:	ee17 3a90 	vmov	r3, s15
 800292a:	613b      	str	r3, [r7, #16]
		pid_ver[i_conf/3][i_conf%3]=val;
 800292c:	693b      	ldr	r3, [r7, #16]
 800292e:	4a30      	ldr	r2, [pc, #192]	; (80029f0 <remote+0x1ac>)
 8002930:	fb82 1203 	smull	r1, r2, r2, r3
 8002934:	17db      	asrs	r3, r3, #31
 8002936:	1ad0      	subs	r0, r2, r3
 8002938:	6939      	ldr	r1, [r7, #16]
 800293a:	4b2d      	ldr	r3, [pc, #180]	; (80029f0 <remote+0x1ac>)
 800293c:	fb83 3201 	smull	r3, r2, r3, r1
 8002940:	17cb      	asrs	r3, r1, #31
 8002942:	1ad2      	subs	r2, r2, r3
 8002944:	4613      	mov	r3, r2
 8002946:	005b      	lsls	r3, r3, #1
 8002948:	4413      	add	r3, r2
 800294a:	1aca      	subs	r2, r1, r3
 800294c:	4b2a      	ldr	r3, [pc, #168]	; (80029f8 <remote+0x1b4>)
 800294e:	6819      	ldr	r1, [r3, #0]
 8002950:	4c28      	ldr	r4, [pc, #160]	; (80029f4 <remote+0x1b0>)
 8002952:	4603      	mov	r3, r0
 8002954:	00db      	lsls	r3, r3, #3
 8002956:	1a1b      	subs	r3, r3, r0
 8002958:	4413      	add	r3, r2
 800295a:	009b      	lsls	r3, r3, #2
 800295c:	4423      	add	r3, r4
 800295e:	6019      	str	r1, [r3, #0]
		frame.fdata[25]=val;
 8002960:	4b25      	ldr	r3, [pc, #148]	; (80029f8 <remote+0x1b4>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4a25      	ldr	r2, [pc, #148]	; (80029fc <remote+0x1b8>)
 8002966:	6653      	str	r3, [r2, #100]	; 0x64
 8002968:	e00c      	b.n	8002984 <remote+0x140>
	}else if(remoteBuffer[3]==0x05)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	3303      	adds	r3, #3
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	2b05      	cmp	r3, #5
 8002972:	d107      	bne.n	8002984 <remote+0x140>
	{
		ch_float[2]=dat[0];
 8002974:	697b      	ldr	r3, [r7, #20]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a1a      	ldr	r2, [pc, #104]	; (80029e4 <remote+0x1a0>)
 800297a:	6093      	str	r3, [r2, #8]
		ch_float[3]=dat[1];
 800297c:	697b      	ldr	r3, [r7, #20]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	4a18      	ldr	r2, [pc, #96]	; (80029e4 <remote+0x1a0>)
 8002982:	60d3      	str	r3, [r2, #12]
	}
    target_ver[0] = ch_float[0]*30;
 8002984:	4b17      	ldr	r3, [pc, #92]	; (80029e4 <remote+0x1a0>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002992:	4b1b      	ldr	r3, [pc, #108]	; (8002a00 <remote+0x1bc>)
 8002994:	edc3 7a00 	vstr	s15, [r3]
    target_ver[1] = ch_float[1]*30;
 8002998:	4b12      	ldr	r3, [pc, #72]	; (80029e4 <remote+0x1a0>)
 800299a:	edd3 7a01 	vldr	s15, [r3, #4]
 800299e:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80029a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029a6:	4b16      	ldr	r3, [pc, #88]	; (8002a00 <remote+0x1bc>)
 80029a8:	edc3 7a01 	vstr	s15, [r3, #4]
    target_ver[2] -= ch_float[2];
 80029ac:	4b14      	ldr	r3, [pc, #80]	; (8002a00 <remote+0x1bc>)
 80029ae:	ed93 7a02 	vldr	s14, [r3, #8]
 80029b2:	4b0c      	ldr	r3, [pc, #48]	; (80029e4 <remote+0x1a0>)
 80029b4:	edd3 7a02 	vldr	s15, [r3, #8]
 80029b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029bc:	4b10      	ldr	r3, [pc, #64]	; (8002a00 <remote+0x1bc>)
 80029be:	edc3 7a02 	vstr	s15, [r3, #8]
    target_ver[3] = ch_float[3];
 80029c2:	4b08      	ldr	r3, [pc, #32]	; (80029e4 <remote+0x1a0>)
 80029c4:	68db      	ldr	r3, [r3, #12]
 80029c6:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <remote+0x1bc>)
 80029c8:	60d3      	str	r3, [r2, #12]
    target_ver[4] = ch_float[4];
 80029ca:	4b06      	ldr	r3, [pc, #24]	; (80029e4 <remote+0x1a0>)
 80029cc:	691b      	ldr	r3, [r3, #16]
 80029ce:	4a0c      	ldr	r2, [pc, #48]	; (8002a00 <remote+0x1bc>)
 80029d0:	6113      	str	r3, [r2, #16]
    target_ver[5] = ch_float[5];
 80029d2:	4b04      	ldr	r3, [pc, #16]	; (80029e4 <remote+0x1a0>)
 80029d4:	695b      	ldr	r3, [r3, #20]
 80029d6:	4a0a      	ldr	r2, [pc, #40]	; (8002a00 <remote+0x1bc>)
 80029d8:	6153      	str	r3, [r2, #20]
}
 80029da:	bf00      	nop
 80029dc:	3718      	adds	r7, #24
 80029de:	46bd      	mov	sp, r7
 80029e0:	bc90      	pop	{r4, r7}
 80029e2:	4770      	bx	lr
 80029e4:	200002d0 	.word	0x200002d0
 80029e8:	2000027c 	.word	0x2000027c
 80029ec:	200002e8 	.word	0x200002e8
 80029f0:	55555556 	.word	0x55555556
 80029f4:	20000000 	.word	0x20000000
 80029f8:	200002ec 	.word	0x200002ec
 80029fc:	200000a8 	.word	0x200000a8
 8002a00:	200002fc 	.word	0x200002fc

08002a04 <remoteerr>:
void remoteerr(UART_HandleTypeDef *huart)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b082      	sub	sp, #8
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]
    //HAL_UART_AbortReceive(huart);
    if(&huart1==huart)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	4a0b      	ldr	r2, [pc, #44]	; (8002a3c <remoteerr+0x38>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d106      	bne.n	8002a22 <remoteerr+0x1e>
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer+16, 25);
 8002a14:	4b0a      	ldr	r3, [pc, #40]	; (8002a40 <remoteerr+0x3c>)
 8002a16:	2219      	movs	r2, #25
 8002a18:	4619      	mov	r1, r3
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f004 f9c0 	bl	8006da0 <HAL_UART_Receive_DMA>
	}else if(&huart5==huart)
	{
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
	}
    //HAL_UART_Receive_DMA(huart, remoteBuffer, 16);
}
 8002a20:	e008      	b.n	8002a34 <remoteerr+0x30>
	}else if(&huart5==huart)
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a07      	ldr	r2, [pc, #28]	; (8002a44 <remoteerr+0x40>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d104      	bne.n	8002a34 <remoteerr+0x30>
		HAL_UART_Receive_DMA(huart, remoteBuffer, 25);
 8002a2a:	2219      	movs	r2, #25
 8002a2c:	4906      	ldr	r1, [pc, #24]	; (8002a48 <remoteerr+0x44>)
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f004 f9b6 	bl	8006da0 <HAL_UART_Receive_DMA>
}
 8002a34:	bf00      	nop
 8002a36:	3708      	adds	r7, #8
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	2000068c 	.word	0x2000068c
 8002a40:	200002c0 	.word	0x200002c0
 8002a44:	200005a0 	.word	0x200005a0
 8002a48:	200002b0 	.word	0x200002b0

08002a4c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a52:	2300      	movs	r3, #0
 8002a54:	607b      	str	r3, [r7, #4]
 8002a56:	4b10      	ldr	r3, [pc, #64]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	4a0f      	ldr	r2, [pc, #60]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a5c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a60:	6453      	str	r3, [r2, #68]	; 0x44
 8002a62:	4b0d      	ldr	r3, [pc, #52]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a66:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a6a:	607b      	str	r3, [r7, #4]
 8002a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a6e:	2300      	movs	r3, #0
 8002a70:	603b      	str	r3, [r7, #0]
 8002a72:	4b09      	ldr	r3, [pc, #36]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	4a08      	ldr	r2, [pc, #32]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a78:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a7c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a7e:	4b06      	ldr	r3, [pc, #24]	; (8002a98 <HAL_MspInit+0x4c>)
 8002a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a86:	603b      	str	r3, [r7, #0]
 8002a88:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a8a:	bf00      	nop
 8002a8c:	370c      	adds	r7, #12
 8002a8e:	46bd      	mov	sp, r7
 8002a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a94:	4770      	bx	lr
 8002a96:	bf00      	nop
 8002a98:	40023800 	.word	0x40023800

08002a9c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b08a      	sub	sp, #40	; 0x28
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa4:	f107 0314 	add.w	r3, r7, #20
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	605a      	str	r2, [r3, #4]
 8002aae:	609a      	str	r2, [r3, #8]
 8002ab0:	60da      	str	r2, [r3, #12]
 8002ab2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4a17      	ldr	r2, [pc, #92]	; (8002b18 <HAL_ADC_MspInit+0x7c>)
 8002aba:	4293      	cmp	r3, r2
 8002abc:	d127      	bne.n	8002b0e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002abe:	2300      	movs	r3, #0
 8002ac0:	613b      	str	r3, [r7, #16]
 8002ac2:	4b16      	ldr	r3, [pc, #88]	; (8002b1c <HAL_ADC_MspInit+0x80>)
 8002ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac6:	4a15      	ldr	r2, [pc, #84]	; (8002b1c <HAL_ADC_MspInit+0x80>)
 8002ac8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002acc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ace:	4b13      	ldr	r3, [pc, #76]	; (8002b1c <HAL_ADC_MspInit+0x80>)
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ad6:	613b      	str	r3, [r7, #16]
 8002ad8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ada:	2300      	movs	r3, #0
 8002adc:	60fb      	str	r3, [r7, #12]
 8002ade:	4b0f      	ldr	r3, [pc, #60]	; (8002b1c <HAL_ADC_MspInit+0x80>)
 8002ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae2:	4a0e      	ldr	r2, [pc, #56]	; (8002b1c <HAL_ADC_MspInit+0x80>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aea:	4b0c      	ldr	r3, [pc, #48]	; (8002b1c <HAL_ADC_MspInit+0x80>)
 8002aec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002af6:	2310      	movs	r3, #16
 8002af8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002afa:	2303      	movs	r3, #3
 8002afc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002afe:	2300      	movs	r3, #0
 8002b00:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b02:	f107 0314 	add.w	r3, r7, #20
 8002b06:	4619      	mov	r1, r3
 8002b08:	4805      	ldr	r0, [pc, #20]	; (8002b20 <HAL_ADC_MspInit+0x84>)
 8002b0a:	f001 fe55 	bl	80047b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b0e:	bf00      	nop
 8002b10:	3728      	adds	r7, #40	; 0x28
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	40012000 	.word	0x40012000
 8002b1c:	40023800 	.word	0x40023800
 8002b20:	40020000 	.word	0x40020000

08002b24 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b08a      	sub	sp, #40	; 0x28
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b2c:	f107 0314 	add.w	r3, r7, #20
 8002b30:	2200      	movs	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	605a      	str	r2, [r3, #4]
 8002b36:	609a      	str	r2, [r3, #8]
 8002b38:	60da      	str	r2, [r3, #12]
 8002b3a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	4a28      	ldr	r2, [pc, #160]	; (8002be4 <HAL_SPI_MspInit+0xc0>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d149      	bne.n	8002bda <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b46:	2300      	movs	r3, #0
 8002b48:	613b      	str	r3, [r7, #16]
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b4e:	4a26      	ldr	r2, [pc, #152]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b50:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002b54:	6453      	str	r3, [r2, #68]	; 0x44
 8002b56:	4b24      	ldr	r3, [pc, #144]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b5a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b5e:	613b      	str	r3, [r7, #16]
 8002b60:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	4b20      	ldr	r3, [pc, #128]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6a:	4a1f      	ldr	r2, [pc, #124]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6313      	str	r3, [r2, #48]	; 0x30
 8002b72:	4b1d      	ldr	r3, [pc, #116]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	60fb      	str	r3, [r7, #12]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60bb      	str	r3, [r7, #8]
 8002b82:	4b19      	ldr	r3, [pc, #100]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a18      	ldr	r2, [pc, #96]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b88:	f043 0302 	orr.w	r3, r3, #2
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b16      	ldr	r3, [pc, #88]	; (8002be8 <HAL_SPI_MspInit+0xc4>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0302 	and.w	r3, r3, #2
 8002b96:	60bb      	str	r3, [r7, #8]
 8002b98:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002b9a:	2320      	movs	r3, #32
 8002b9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002baa:	2305      	movs	r3, #5
 8002bac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bae:	f107 0314 	add.w	r3, r7, #20
 8002bb2:	4619      	mov	r1, r3
 8002bb4:	480d      	ldr	r0, [pc, #52]	; (8002bec <HAL_SPI_MspInit+0xc8>)
 8002bb6:	f001 fdff 	bl	80047b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002bba:	2330      	movs	r3, #48	; 0x30
 8002bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bca:	2305      	movs	r3, #5
 8002bcc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bce:	f107 0314 	add.w	r3, r7, #20
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4806      	ldr	r0, [pc, #24]	; (8002bf0 <HAL_SPI_MspInit+0xcc>)
 8002bd6:	f001 fdef 	bl	80047b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002bda:	bf00      	nop
 8002bdc:	3728      	adds	r7, #40	; 0x28
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40013000 	.word	0x40013000
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40020400 	.word	0x40020400

08002bf4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b088      	sub	sp, #32
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	4a36      	ldr	r2, [pc, #216]	; (8002cdc <HAL_TIM_Base_MspInit+0xe8>)
 8002c02:	4293      	cmp	r3, r2
 8002c04:	d116      	bne.n	8002c34 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002c06:	2300      	movs	r3, #0
 8002c08:	61fb      	str	r3, [r7, #28]
 8002c0a:	4b35      	ldr	r3, [pc, #212]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c0e:	4a34      	ldr	r2, [pc, #208]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c10:	f043 0301 	orr.w	r3, r3, #1
 8002c14:	6453      	str	r3, [r2, #68]	; 0x44
 8002c16:	4b32      	ldr	r3, [pc, #200]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	61fb      	str	r3, [r7, #28]
 8002c20:	69fb      	ldr	r3, [r7, #28]
    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8002c22:	2200      	movs	r2, #0
 8002c24:	2100      	movs	r1, #0
 8002c26:	2019      	movs	r0, #25
 8002c28:	f001 f98e 	bl	8003f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002c2c:	2019      	movs	r0, #25
 8002c2e:	f001 f9a7 	bl	8003f80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002c32:	e04e      	b.n	8002cd2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM2)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002c3e:	2300      	movs	r3, #0
 8002c40:	61bb      	str	r3, [r7, #24]
 8002c42:	4b27      	ldr	r3, [pc, #156]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c46:	4a26      	ldr	r2, [pc, #152]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c4e:	4b24      	ldr	r3, [pc, #144]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c52:	f003 0301 	and.w	r3, r3, #1
 8002c56:	61bb      	str	r3, [r7, #24]
 8002c58:	69bb      	ldr	r3, [r7, #24]
}
 8002c5a:	e03a      	b.n	8002cd2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	4a20      	ldr	r2, [pc, #128]	; (8002ce4 <HAL_TIM_Base_MspInit+0xf0>)
 8002c62:	4293      	cmp	r3, r2
 8002c64:	d10e      	bne.n	8002c84 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c66:	2300      	movs	r3, #0
 8002c68:	617b      	str	r3, [r7, #20]
 8002c6a:	4b1d      	ldr	r3, [pc, #116]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c70:	f043 0302 	orr.w	r3, r3, #2
 8002c74:	6413      	str	r3, [r2, #64]	; 0x40
 8002c76:	4b1a      	ldr	r3, [pc, #104]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c7a:	f003 0302 	and.w	r3, r3, #2
 8002c7e:	617b      	str	r3, [r7, #20]
 8002c80:	697b      	ldr	r3, [r7, #20]
}
 8002c82:	e026      	b.n	8002cd2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	4a17      	ldr	r2, [pc, #92]	; (8002ce8 <HAL_TIM_Base_MspInit+0xf4>)
 8002c8a:	4293      	cmp	r3, r2
 8002c8c:	d10e      	bne.n	8002cac <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002c8e:	2300      	movs	r3, #0
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	4b13      	ldr	r3, [pc, #76]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c96:	4a12      	ldr	r2, [pc, #72]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002c98:	f043 0304 	orr.w	r3, r3, #4
 8002c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8002c9e:	4b10      	ldr	r3, [pc, #64]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f003 0304 	and.w	r3, r3, #4
 8002ca6:	613b      	str	r3, [r7, #16]
 8002ca8:	693b      	ldr	r3, [r7, #16]
}
 8002caa:	e012      	b.n	8002cd2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a0e      	ldr	r2, [pc, #56]	; (8002cec <HAL_TIM_Base_MspInit+0xf8>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8002cb6:	2300      	movs	r3, #0
 8002cb8:	60fb      	str	r3, [r7, #12]
 8002cba:	4b09      	ldr	r3, [pc, #36]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002cbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cbe:	4a08      	ldr	r2, [pc, #32]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002cc0:	f043 0302 	orr.w	r3, r3, #2
 8002cc4:	6453      	str	r3, [r2, #68]	; 0x44
 8002cc6:	4b06      	ldr	r3, [pc, #24]	; (8002ce0 <HAL_TIM_Base_MspInit+0xec>)
 8002cc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cca:	f003 0302 	and.w	r3, r3, #2
 8002cce:	60fb      	str	r3, [r7, #12]
 8002cd0:	68fb      	ldr	r3, [r7, #12]
}
 8002cd2:	bf00      	nop
 8002cd4:	3720      	adds	r7, #32
 8002cd6:	46bd      	mov	sp, r7
 8002cd8:	bd80      	pop	{r7, pc}
 8002cda:	bf00      	nop
 8002cdc:	40010000 	.word	0x40010000
 8002ce0:	40023800 	.word	0x40023800
 8002ce4:	40000400 	.word	0x40000400
 8002ce8:	40000800 	.word	0x40000800
 8002cec:	40010400 	.word	0x40010400

08002cf0 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b08a      	sub	sp, #40	; 0x28
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cf8:	f107 0314 	add.w	r3, r7, #20
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	601a      	str	r2, [r3, #0]
 8002d00:	605a      	str	r2, [r3, #4]
 8002d02:	609a      	str	r2, [r3, #8]
 8002d04:	60da      	str	r2, [r3, #12]
 8002d06:	611a      	str	r2, [r3, #16]
  if(htim_pwm->Instance==TIM5)
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a23      	ldr	r2, [pc, #140]	; (8002d9c <HAL_TIM_PWM_MspInit+0xac>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d12c      	bne.n	8002d6c <HAL_TIM_PWM_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002d12:	2300      	movs	r3, #0
 8002d14:	613b      	str	r3, [r7, #16]
 8002d16:	4b22      	ldr	r3, [pc, #136]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1a:	4a21      	ldr	r2, [pc, #132]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d1c:	f043 0308 	orr.w	r3, r3, #8
 8002d20:	6413      	str	r3, [r2, #64]	; 0x40
 8002d22:	4b1f      	ldr	r3, [pc, #124]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	613b      	str	r3, [r7, #16]
 8002d2c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d2e:	2300      	movs	r3, #0
 8002d30:	60fb      	str	r3, [r7, #12]
 8002d32:	4b1b      	ldr	r3, [pc, #108]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d36:	4a1a      	ldr	r2, [pc, #104]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d38:	f043 0301 	orr.w	r3, r3, #1
 8002d3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002d3e:	4b18      	ldr	r3, [pc, #96]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d42:	f003 0301 	and.w	r3, r3, #1
 8002d46:	60fb      	str	r3, [r7, #12]
 8002d48:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002d4a:	2303      	movs	r3, #3
 8002d4c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d4e:	2302      	movs	r3, #2
 8002d50:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d52:	2300      	movs	r3, #0
 8002d54:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002d56:	2300      	movs	r3, #0
 8002d58:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002d5a:	2302      	movs	r3, #2
 8002d5c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d5e:	f107 0314 	add.w	r3, r7, #20
 8002d62:	4619      	mov	r1, r3
 8002d64:	480f      	ldr	r0, [pc, #60]	; (8002da4 <HAL_TIM_PWM_MspInit+0xb4>)
 8002d66:	f001 fd27 	bl	80047b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }

}
 8002d6a:	e012      	b.n	8002d92 <HAL_TIM_PWM_MspInit+0xa2>
  else if(htim_pwm->Instance==TIM12)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	4a0d      	ldr	r2, [pc, #52]	; (8002da8 <HAL_TIM_PWM_MspInit+0xb8>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d10d      	bne.n	8002d92 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8002d76:	2300      	movs	r3, #0
 8002d78:	60bb      	str	r3, [r7, #8]
 8002d7a:	4b09      	ldr	r3, [pc, #36]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7e:	4a08      	ldr	r2, [pc, #32]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002d84:	6413      	str	r3, [r2, #64]	; 0x40
 8002d86:	4b06      	ldr	r3, [pc, #24]	; (8002da0 <HAL_TIM_PWM_MspInit+0xb0>)
 8002d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8e:	60bb      	str	r3, [r7, #8]
 8002d90:	68bb      	ldr	r3, [r7, #8]
}
 8002d92:	bf00      	nop
 8002d94:	3728      	adds	r7, #40	; 0x28
 8002d96:	46bd      	mov	sp, r7
 8002d98:	bd80      	pop	{r7, pc}
 8002d9a:	bf00      	nop
 8002d9c:	40000c00 	.word	0x40000c00
 8002da0:	40023800 	.word	0x40023800
 8002da4:	40020000 	.word	0x40020000
 8002da8:	40001800 	.word	0x40001800

08002dac <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	b08e      	sub	sp, #56	; 0x38
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002db4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002db8:	2200      	movs	r2, #0
 8002dba:	601a      	str	r2, [r3, #0]
 8002dbc:	605a      	str	r2, [r3, #4]
 8002dbe:	609a      	str	r2, [r3, #8]
 8002dc0:	60da      	str	r2, [r3, #12]
 8002dc2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a6a      	ldr	r2, [pc, #424]	; (8002f74 <HAL_TIM_MspPostInit+0x1c8>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d13c      	bne.n	8002e48 <HAL_TIM_MspPostInit+0x9c>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002dce:	2300      	movs	r3, #0
 8002dd0:	623b      	str	r3, [r7, #32]
 8002dd2:	4b69      	ldr	r3, [pc, #420]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002dd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dd6:	4a68      	ldr	r2, [pc, #416]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002dd8:	f043 0301 	orr.w	r3, r3, #1
 8002ddc:	6313      	str	r3, [r2, #48]	; 0x30
 8002dde:	4b66      	ldr	r3, [pc, #408]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002de2:	f003 0301 	and.w	r3, r3, #1
 8002de6:	623b      	str	r3, [r7, #32]
 8002de8:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dea:	2300      	movs	r3, #0
 8002dec:	61fb      	str	r3, [r7, #28]
 8002dee:	4b62      	ldr	r3, [pc, #392]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002df0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002df2:	4a61      	ldr	r2, [pc, #388]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002df4:	f043 0302 	orr.w	r3, r3, #2
 8002df8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dfa:	4b5f      	ldr	r3, [pc, #380]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002dfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	69fb      	ldr	r3, [r7, #28]
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB0     ------> TIM3_CH3
    PB1     ------> TIM3_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e06:	23c0      	movs	r3, #192	; 0xc0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e12:	2300      	movs	r3, #0
 8002e14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e16:	2302      	movs	r3, #2
 8002e18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e1e:	4619      	mov	r1, r3
 8002e20:	4856      	ldr	r0, [pc, #344]	; (8002f7c <HAL_TIM_MspPostInit+0x1d0>)
 8002e22:	f001 fcc9 	bl	80047b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002e26:	2303      	movs	r3, #3
 8002e28:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e32:	2300      	movs	r3, #0
 8002e34:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002e36:	2302      	movs	r3, #2
 8002e38:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e3e:	4619      	mov	r1, r3
 8002e40:	484f      	ldr	r0, [pc, #316]	; (8002f80 <HAL_TIM_MspPostInit+0x1d4>)
 8002e42:	f001 fcb9 	bl	80047b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8002e46:	e091      	b.n	8002f6c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM4)
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	4a4d      	ldr	r2, [pc, #308]	; (8002f84 <HAL_TIM_MspPostInit+0x1d8>)
 8002e4e:	4293      	cmp	r3, r2
 8002e50:	d11f      	bne.n	8002e92 <HAL_TIM_MspPostInit+0xe6>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002e52:	2300      	movs	r3, #0
 8002e54:	61bb      	str	r3, [r7, #24]
 8002e56:	4b48      	ldr	r3, [pc, #288]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e5a:	4a47      	ldr	r2, [pc, #284]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002e5c:	f043 0308 	orr.w	r3, r3, #8
 8002e60:	6313      	str	r3, [r2, #48]	; 0x30
 8002e62:	4b45      	ldr	r3, [pc, #276]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	f003 0308 	and.w	r3, r3, #8
 8002e6a:	61bb      	str	r3, [r7, #24]
 8002e6c:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8002e6e:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8002e72:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e74:	2302      	movs	r3, #2
 8002e76:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e78:	2300      	movs	r3, #0
 8002e7a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002e80:	2302      	movs	r3, #2
 8002e82:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002e84:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002e88:	4619      	mov	r1, r3
 8002e8a:	483f      	ldr	r0, [pc, #252]	; (8002f88 <HAL_TIM_MspPostInit+0x1dc>)
 8002e8c:	f001 fc94 	bl	80047b8 <HAL_GPIO_Init>
}
 8002e90:	e06c      	b.n	8002f6c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM5)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	4a3d      	ldr	r2, [pc, #244]	; (8002f8c <HAL_TIM_MspPostInit+0x1e0>)
 8002e98:	4293      	cmp	r3, r2
 8002e9a:	d11e      	bne.n	8002eda <HAL_TIM_MspPostInit+0x12e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	4b35      	ldr	r3, [pc, #212]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ea4:	4a34      	ldr	r2, [pc, #208]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002ea6:	f043 0301 	orr.w	r3, r3, #1
 8002eaa:	6313      	str	r3, [r2, #48]	; 0x30
 8002eac:	4b32      	ldr	r3, [pc, #200]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002eae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eb0:	f003 0301 	and.w	r3, r3, #1
 8002eb4:	617b      	str	r3, [r7, #20]
 8002eb6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002eb8:	230c      	movs	r3, #12
 8002eba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ebc:	2302      	movs	r3, #2
 8002ebe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002ec8:	2302      	movs	r3, #2
 8002eca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ecc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002ed0:	4619      	mov	r1, r3
 8002ed2:	482a      	ldr	r0, [pc, #168]	; (8002f7c <HAL_TIM_MspPostInit+0x1d0>)
 8002ed4:	f001 fc70 	bl	80047b8 <HAL_GPIO_Init>
}
 8002ed8:	e048      	b.n	8002f6c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM8)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	4a2c      	ldr	r2, [pc, #176]	; (8002f90 <HAL_TIM_MspPostInit+0x1e4>)
 8002ee0:	4293      	cmp	r3, r2
 8002ee2:	d11f      	bne.n	8002f24 <HAL_TIM_MspPostInit+0x178>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002eec:	4a22      	ldr	r2, [pc, #136]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002eee:	f043 0304 	orr.w	r3, r3, #4
 8002ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef4:	4b20      	ldr	r3, [pc, #128]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef8:	f003 0304 	and.w	r3, r3, #4
 8002efc:	613b      	str	r3, [r7, #16]
 8002efe:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 8002f00:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002f04:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f06:	2302      	movs	r3, #2
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002f12:	2303      	movs	r3, #3
 8002f14:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f1a:	4619      	mov	r1, r3
 8002f1c:	481d      	ldr	r0, [pc, #116]	; (8002f94 <HAL_TIM_MspPostInit+0x1e8>)
 8002f1e:	f001 fc4b 	bl	80047b8 <HAL_GPIO_Init>
}
 8002f22:	e023      	b.n	8002f6c <HAL_TIM_MspPostInit+0x1c0>
  else if(htim->Instance==TIM12)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4a1b      	ldr	r2, [pc, #108]	; (8002f98 <HAL_TIM_MspPostInit+0x1ec>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d11e      	bne.n	8002f6c <HAL_TIM_MspPostInit+0x1c0>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f2e:	2300      	movs	r3, #0
 8002f30:	60fb      	str	r3, [r7, #12]
 8002f32:	4b11      	ldr	r3, [pc, #68]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f36:	4a10      	ldr	r2, [pc, #64]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002f38:	f043 0302 	orr.w	r3, r3, #2
 8002f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <HAL_TIM_MspPostInit+0x1cc>)
 8002f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	60fb      	str	r3, [r7, #12]
 8002f48:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8002f4a:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8002f4e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f50:	2302      	movs	r3, #2
 8002f52:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f54:	2300      	movs	r3, #0
 8002f56:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f58:	2300      	movs	r3, #0
 8002f5a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8002f5c:	2309      	movs	r3, #9
 8002f5e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002f60:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002f64:	4619      	mov	r1, r3
 8002f66:	4806      	ldr	r0, [pc, #24]	; (8002f80 <HAL_TIM_MspPostInit+0x1d4>)
 8002f68:	f001 fc26 	bl	80047b8 <HAL_GPIO_Init>
}
 8002f6c:	bf00      	nop
 8002f6e:	3738      	adds	r7, #56	; 0x38
 8002f70:	46bd      	mov	sp, r7
 8002f72:	bd80      	pop	{r7, pc}
 8002f74:	40000400 	.word	0x40000400
 8002f78:	40023800 	.word	0x40023800
 8002f7c:	40020000 	.word	0x40020000
 8002f80:	40020400 	.word	0x40020400
 8002f84:	40000800 	.word	0x40000800
 8002f88:	40020c00 	.word	0x40020c00
 8002f8c:	40000c00 	.word	0x40000c00
 8002f90:	40010400 	.word	0x40010400
 8002f94:	40020800 	.word	0x40020800
 8002f98:	40001800 	.word	0x40001800

08002f9c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b092      	sub	sp, #72	; 0x48
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a78      	ldr	r2, [pc, #480]	; (800319c <HAL_UART_MspInit+0x200>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d164      	bne.n	8003088 <HAL_UART_MspInit+0xec>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	633b      	str	r3, [r7, #48]	; 0x30
 8002fc2:	4b77      	ldr	r3, [pc, #476]	; (80031a0 <HAL_UART_MspInit+0x204>)
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc6:	4a76      	ldr	r2, [pc, #472]	; (80031a0 <HAL_UART_MspInit+0x204>)
 8002fc8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002fcc:	6413      	str	r3, [r2, #64]	; 0x40
 8002fce:	4b74      	ldr	r3, [pc, #464]	; (80031a0 <HAL_UART_MspInit+0x204>)
 8002fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fd2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
 8002fd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002fda:	2300      	movs	r3, #0
 8002fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fde:	4b70      	ldr	r3, [pc, #448]	; (80031a0 <HAL_UART_MspInit+0x204>)
 8002fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fe2:	4a6f      	ldr	r2, [pc, #444]	; (80031a0 <HAL_UART_MspInit+0x204>)
 8002fe4:	f043 0304 	orr.w	r3, r3, #4
 8002fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8002fea:	4b6d      	ldr	r3, [pc, #436]	; (80031a0 <HAL_UART_MspInit+0x204>)
 8002fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fee:	f003 0304 	and.w	r3, r3, #4
 8002ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002ff4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002ff6:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002ffa:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ffc:	2302      	movs	r3, #2
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003000:	2301      	movs	r3, #1
 8003002:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003004:	2303      	movs	r3, #3
 8003006:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003008:	2308      	movs	r3, #8
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800300c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003010:	4619      	mov	r1, r3
 8003012:	4864      	ldr	r0, [pc, #400]	; (80031a4 <HAL_UART_MspInit+0x208>)
 8003014:	f001 fbd0 	bl	80047b8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8003018:	4b63      	ldr	r3, [pc, #396]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 800301a:	4a64      	ldr	r2, [pc, #400]	; (80031ac <HAL_UART_MspInit+0x210>)
 800301c:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 800301e:	4b62      	ldr	r3, [pc, #392]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003020:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003024:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003026:	4b60      	ldr	r3, [pc, #384]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302c:	4b5e      	ldr	r3, [pc, #376]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003032:	4b5d      	ldr	r3, [pc, #372]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003034:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003038:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303a:	4b5b      	ldr	r3, [pc, #364]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003040:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_CIRCULAR;
 8003046:	4b58      	ldr	r3, [pc, #352]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003048:	f44f 7280 	mov.w	r2, #256	; 0x100
 800304c:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800304e:	4b56      	ldr	r3, [pc, #344]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003050:	2200      	movs	r2, #0
 8003052:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003054:	4b54      	ldr	r3, [pc, #336]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 800305a:	4853      	ldr	r0, [pc, #332]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 800305c:	f000 ff9e 	bl	8003f9c <HAL_DMA_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8003066:	f7fe ff3d 	bl	8001ee4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a4e      	ldr	r2, [pc, #312]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 800306e:	639a      	str	r2, [r3, #56]	; 0x38
 8003070:	4a4d      	ldr	r2, [pc, #308]	; (80031a8 <HAL_UART_MspInit+0x20c>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2100      	movs	r1, #0
 800307a:	2034      	movs	r0, #52	; 0x34
 800307c:	f000 ff64 	bl	8003f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8003080:	2034      	movs	r0, #52	; 0x34
 8003082:	f000 ff7d 	bl	8003f80 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003086:	e1a0      	b.n	80033ca <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==UART5)
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a48      	ldr	r2, [pc, #288]	; (80031b0 <HAL_UART_MspInit+0x214>)
 800308e:	4293      	cmp	r3, r2
 8003090:	f040 8096 	bne.w	80031c0 <HAL_UART_MspInit+0x224>
    __HAL_RCC_UART5_CLK_ENABLE();
 8003094:	2300      	movs	r3, #0
 8003096:	62bb      	str	r3, [r7, #40]	; 0x28
 8003098:	4b41      	ldr	r3, [pc, #260]	; (80031a0 <HAL_UART_MspInit+0x204>)
 800309a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800309c:	4a40      	ldr	r2, [pc, #256]	; (80031a0 <HAL_UART_MspInit+0x204>)
 800309e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80030a2:	6413      	str	r3, [r2, #64]	; 0x40
 80030a4:	4b3e      	ldr	r3, [pc, #248]	; (80031a0 <HAL_UART_MspInit+0x204>)
 80030a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80030b0:	2300      	movs	r3, #0
 80030b2:	627b      	str	r3, [r7, #36]	; 0x24
 80030b4:	4b3a      	ldr	r3, [pc, #232]	; (80031a0 <HAL_UART_MspInit+0x204>)
 80030b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b8:	4a39      	ldr	r2, [pc, #228]	; (80031a0 <HAL_UART_MspInit+0x204>)
 80030ba:	f043 0304 	orr.w	r3, r3, #4
 80030be:	6313      	str	r3, [r2, #48]	; 0x30
 80030c0:	4b37      	ldr	r3, [pc, #220]	; (80031a0 <HAL_UART_MspInit+0x204>)
 80030c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c4:	f003 0304 	and.w	r3, r3, #4
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80030cc:	2300      	movs	r3, #0
 80030ce:	623b      	str	r3, [r7, #32]
 80030d0:	4b33      	ldr	r3, [pc, #204]	; (80031a0 <HAL_UART_MspInit+0x204>)
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	4a32      	ldr	r2, [pc, #200]	; (80031a0 <HAL_UART_MspInit+0x204>)
 80030d6:	f043 0308 	orr.w	r3, r3, #8
 80030da:	6313      	str	r3, [r2, #48]	; 0x30
 80030dc:	4b30      	ldr	r3, [pc, #192]	; (80031a0 <HAL_UART_MspInit+0x204>)
 80030de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030e0:	f003 0308 	and.w	r3, r3, #8
 80030e4:	623b      	str	r3, [r7, #32]
 80030e6:	6a3b      	ldr	r3, [r7, #32]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80030e8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030ec:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ee:	2302      	movs	r3, #2
 80030f0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80030f2:	2301      	movs	r3, #1
 80030f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80030f6:	2303      	movs	r3, #3
 80030f8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80030fa:	2308      	movs	r3, #8
 80030fc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80030fe:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003102:	4619      	mov	r1, r3
 8003104:	4827      	ldr	r0, [pc, #156]	; (80031a4 <HAL_UART_MspInit+0x208>)
 8003106:	f001 fb57 	bl	80047b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800310a:	2304      	movs	r3, #4
 800310c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800310e:	2302      	movs	r3, #2
 8003110:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003112:	2301      	movs	r3, #1
 8003114:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003116:	2303      	movs	r3, #3
 8003118:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800311a:	2308      	movs	r3, #8
 800311c:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800311e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003122:	4619      	mov	r1, r3
 8003124:	4823      	ldr	r0, [pc, #140]	; (80031b4 <HAL_UART_MspInit+0x218>)
 8003126:	f001 fb47 	bl	80047b8 <HAL_GPIO_Init>
    hdma_uart5_rx.Instance = DMA1_Stream0;
 800312a:	4b23      	ldr	r3, [pc, #140]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 800312c:	4a23      	ldr	r2, [pc, #140]	; (80031bc <HAL_UART_MspInit+0x220>)
 800312e:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8003130:	4b21      	ldr	r3, [pc, #132]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003136:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003138:	4b1f      	ldr	r3, [pc, #124]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 800313a:	2200      	movs	r2, #0
 800313c:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800313e:	4b1e      	ldr	r3, [pc, #120]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003140:	2200      	movs	r2, #0
 8003142:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003144:	4b1c      	ldr	r3, [pc, #112]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003146:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800314a:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800314c:	4b1a      	ldr	r3, [pc, #104]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 800314e:	2200      	movs	r2, #0
 8003150:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003152:	4b19      	ldr	r3, [pc, #100]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003154:	2200      	movs	r2, #0
 8003156:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_CIRCULAR;
 8003158:	4b17      	ldr	r3, [pc, #92]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 800315a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800315e:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003160:	4b15      	ldr	r3, [pc, #84]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003162:	2200      	movs	r2, #0
 8003164:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003166:	4b14      	ldr	r3, [pc, #80]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003168:	2200      	movs	r2, #0
 800316a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 800316c:	4812      	ldr	r0, [pc, #72]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 800316e:	f000 ff15 	bl	8003f9c <HAL_DMA_Init>
 8003172:	4603      	mov	r3, r0
 8003174:	2b00      	cmp	r3, #0
 8003176:	d001      	beq.n	800317c <HAL_UART_MspInit+0x1e0>
      Error_Handler();
 8003178:	f7fe feb4 	bl	8001ee4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_uart5_rx);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a0e      	ldr	r2, [pc, #56]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003180:	639a      	str	r2, [r3, #56]	; 0x38
 8003182:	4a0d      	ldr	r2, [pc, #52]	; (80031b8 <HAL_UART_MspInit+0x21c>)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003188:	2200      	movs	r2, #0
 800318a:	2100      	movs	r1, #0
 800318c:	2035      	movs	r0, #53	; 0x35
 800318e:	f000 fedb 	bl	8003f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003192:	2035      	movs	r0, #53	; 0x35
 8003194:	f000 fef4 	bl	8003f80 <HAL_NVIC_EnableIRQ>
}
 8003198:	e117      	b.n	80033ca <HAL_UART_MspInit+0x42e>
 800319a:	bf00      	nop
 800319c:	40004c00 	.word	0x40004c00
 80031a0:	40023800 	.word	0x40023800
 80031a4:	40020800 	.word	0x40020800
 80031a8:	2000037c 	.word	0x2000037c
 80031ac:	40026040 	.word	0x40026040
 80031b0:	40005000 	.word	0x40005000
 80031b4:	40020c00 	.word	0x40020c00
 80031b8:	20000840 	.word	0x20000840
 80031bc:	40026010 	.word	0x40026010
  else if(huart->Instance==USART1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a83      	ldr	r2, [pc, #524]	; (80033d4 <HAL_UART_MspInit+0x438>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d164      	bne.n	8003294 <HAL_UART_MspInit+0x2f8>
    __HAL_RCC_USART1_CLK_ENABLE();
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
 80031ce:	4b82      	ldr	r3, [pc, #520]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80031d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031d2:	4a81      	ldr	r2, [pc, #516]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80031d4:	f043 0310 	orr.w	r3, r3, #16
 80031d8:	6453      	str	r3, [r2, #68]	; 0x44
 80031da:	4b7f      	ldr	r3, [pc, #508]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80031dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80031de:	f003 0310 	and.w	r3, r3, #16
 80031e2:	61fb      	str	r3, [r7, #28]
 80031e4:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
 80031ea:	4b7b      	ldr	r3, [pc, #492]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80031ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031ee:	4a7a      	ldr	r2, [pc, #488]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	6313      	str	r3, [r2, #48]	; 0x30
 80031f6:	4b78      	ldr	r3, [pc, #480]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80031f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031fa:	f003 0301 	and.w	r3, r3, #1
 80031fe:	61bb      	str	r3, [r7, #24]
 8003200:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003202:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003206:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003208:	2302      	movs	r3, #2
 800320a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800320c:	2300      	movs	r3, #0
 800320e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003210:	2303      	movs	r3, #3
 8003212:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003214:	2307      	movs	r3, #7
 8003216:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003218:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800321c:	4619      	mov	r1, r3
 800321e:	486f      	ldr	r0, [pc, #444]	; (80033dc <HAL_UART_MspInit+0x440>)
 8003220:	f001 faca 	bl	80047b8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream2;
 8003224:	4b6e      	ldr	r3, [pc, #440]	; (80033e0 <HAL_UART_MspInit+0x444>)
 8003226:	4a6f      	ldr	r2, [pc, #444]	; (80033e4 <HAL_UART_MspInit+0x448>)
 8003228:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 800322a:	4b6d      	ldr	r3, [pc, #436]	; (80033e0 <HAL_UART_MspInit+0x444>)
 800322c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003230:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003232:	4b6b      	ldr	r3, [pc, #428]	; (80033e0 <HAL_UART_MspInit+0x444>)
 8003234:	2200      	movs	r2, #0
 8003236:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003238:	4b69      	ldr	r3, [pc, #420]	; (80033e0 <HAL_UART_MspInit+0x444>)
 800323a:	2200      	movs	r2, #0
 800323c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800323e:	4b68      	ldr	r3, [pc, #416]	; (80033e0 <HAL_UART_MspInit+0x444>)
 8003240:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003244:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003246:	4b66      	ldr	r3, [pc, #408]	; (80033e0 <HAL_UART_MspInit+0x444>)
 8003248:	2200      	movs	r2, #0
 800324a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800324c:	4b64      	ldr	r3, [pc, #400]	; (80033e0 <HAL_UART_MspInit+0x444>)
 800324e:	2200      	movs	r2, #0
 8003250:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8003252:	4b63      	ldr	r3, [pc, #396]	; (80033e0 <HAL_UART_MspInit+0x444>)
 8003254:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003258:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800325a:	4b61      	ldr	r3, [pc, #388]	; (80033e0 <HAL_UART_MspInit+0x444>)
 800325c:	2200      	movs	r2, #0
 800325e:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003260:	4b5f      	ldr	r3, [pc, #380]	; (80033e0 <HAL_UART_MspInit+0x444>)
 8003262:	2200      	movs	r2, #0
 8003264:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8003266:	485e      	ldr	r0, [pc, #376]	; (80033e0 <HAL_UART_MspInit+0x444>)
 8003268:	f000 fe98 	bl	8003f9c <HAL_DMA_Init>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d001      	beq.n	8003276 <HAL_UART_MspInit+0x2da>
      Error_Handler();
 8003272:	f7fe fe37 	bl	8001ee4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart1_rx);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	4a59      	ldr	r2, [pc, #356]	; (80033e0 <HAL_UART_MspInit+0x444>)
 800327a:	639a      	str	r2, [r3, #56]	; 0x38
 800327c:	4a58      	ldr	r2, [pc, #352]	; (80033e0 <HAL_UART_MspInit+0x444>)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003282:	2200      	movs	r2, #0
 8003284:	2100      	movs	r1, #0
 8003286:	2025      	movs	r0, #37	; 0x25
 8003288:	f000 fe5e 	bl	8003f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800328c:	2025      	movs	r0, #37	; 0x25
 800328e:	f000 fe77 	bl	8003f80 <HAL_NVIC_EnableIRQ>
}
 8003292:	e09a      	b.n	80033ca <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==USART2)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	4a53      	ldr	r2, [pc, #332]	; (80033e8 <HAL_UART_MspInit+0x44c>)
 800329a:	4293      	cmp	r3, r2
 800329c:	d163      	bne.n	8003366 <HAL_UART_MspInit+0x3ca>
    __HAL_RCC_USART2_CLK_ENABLE();
 800329e:	2300      	movs	r3, #0
 80032a0:	617b      	str	r3, [r7, #20]
 80032a2:	4b4d      	ldr	r3, [pc, #308]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80032a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a6:	4a4c      	ldr	r2, [pc, #304]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80032a8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ac:	6413      	str	r3, [r2, #64]	; 0x40
 80032ae:	4b4a      	ldr	r3, [pc, #296]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80032b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	617b      	str	r3, [r7, #20]
 80032b8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
 80032be:	4b46      	ldr	r3, [pc, #280]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80032c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032c2:	4a45      	ldr	r2, [pc, #276]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80032c4:	f043 0308 	orr.w	r3, r3, #8
 80032c8:	6313      	str	r3, [r2, #48]	; 0x30
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 80032cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ce:	f003 0308 	and.w	r3, r3, #8
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 80032d6:	2360      	movs	r3, #96	; 0x60
 80032d8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032da:	2302      	movs	r3, #2
 80032dc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032de:	2300      	movs	r3, #0
 80032e0:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80032e2:	2303      	movs	r3, #3
 80032e4:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80032e6:	2307      	movs	r3, #7
 80032e8:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80032ea:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80032ee:	4619      	mov	r1, r3
 80032f0:	483e      	ldr	r0, [pc, #248]	; (80033ec <HAL_UART_MspInit+0x450>)
 80032f2:	f001 fa61 	bl	80047b8 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80032f6:	4b3e      	ldr	r3, [pc, #248]	; (80033f0 <HAL_UART_MspInit+0x454>)
 80032f8:	4a3e      	ldr	r2, [pc, #248]	; (80033f4 <HAL_UART_MspInit+0x458>)
 80032fa:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80032fc:	4b3c      	ldr	r3, [pc, #240]	; (80033f0 <HAL_UART_MspInit+0x454>)
 80032fe:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003302:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003304:	4b3a      	ldr	r3, [pc, #232]	; (80033f0 <HAL_UART_MspInit+0x454>)
 8003306:	2200      	movs	r2, #0
 8003308:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800330a:	4b39      	ldr	r3, [pc, #228]	; (80033f0 <HAL_UART_MspInit+0x454>)
 800330c:	2200      	movs	r2, #0
 800330e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003310:	4b37      	ldr	r3, [pc, #220]	; (80033f0 <HAL_UART_MspInit+0x454>)
 8003312:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003316:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003318:	4b35      	ldr	r3, [pc, #212]	; (80033f0 <HAL_UART_MspInit+0x454>)
 800331a:	2200      	movs	r2, #0
 800331c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800331e:	4b34      	ldr	r3, [pc, #208]	; (80033f0 <HAL_UART_MspInit+0x454>)
 8003320:	2200      	movs	r2, #0
 8003322:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003324:	4b32      	ldr	r3, [pc, #200]	; (80033f0 <HAL_UART_MspInit+0x454>)
 8003326:	f44f 7280 	mov.w	r2, #256	; 0x100
 800332a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800332c:	4b30      	ldr	r3, [pc, #192]	; (80033f0 <HAL_UART_MspInit+0x454>)
 800332e:	2200      	movs	r2, #0
 8003330:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003332:	4b2f      	ldr	r3, [pc, #188]	; (80033f0 <HAL_UART_MspInit+0x454>)
 8003334:	2200      	movs	r2, #0
 8003336:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003338:	482d      	ldr	r0, [pc, #180]	; (80033f0 <HAL_UART_MspInit+0x454>)
 800333a:	f000 fe2f 	bl	8003f9c <HAL_DMA_Init>
 800333e:	4603      	mov	r3, r0
 8003340:	2b00      	cmp	r3, #0
 8003342:	d001      	beq.n	8003348 <HAL_UART_MspInit+0x3ac>
      Error_Handler();
 8003344:	f7fe fdce 	bl	8001ee4 <Error_Handler>
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	4a29      	ldr	r2, [pc, #164]	; (80033f0 <HAL_UART_MspInit+0x454>)
 800334c:	639a      	str	r2, [r3, #56]	; 0x38
 800334e:	4a28      	ldr	r2, [pc, #160]	; (80033f0 <HAL_UART_MspInit+0x454>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003354:	2200      	movs	r2, #0
 8003356:	2100      	movs	r1, #0
 8003358:	2026      	movs	r0, #38	; 0x26
 800335a:	f000 fdf5 	bl	8003f48 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800335e:	2026      	movs	r0, #38	; 0x26
 8003360:	f000 fe0e 	bl	8003f80 <HAL_NVIC_EnableIRQ>
}
 8003364:	e031      	b.n	80033ca <HAL_UART_MspInit+0x42e>
  else if(huart->Instance==USART3)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a23      	ldr	r2, [pc, #140]	; (80033f8 <HAL_UART_MspInit+0x45c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d12c      	bne.n	80033ca <HAL_UART_MspInit+0x42e>
    __HAL_RCC_USART3_CLK_ENABLE();
 8003370:	2300      	movs	r3, #0
 8003372:	60fb      	str	r3, [r7, #12]
 8003374:	4b18      	ldr	r3, [pc, #96]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 8003376:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003378:	4a17      	ldr	r2, [pc, #92]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 800337a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800337e:	6413      	str	r3, [r2, #64]	; 0x40
 8003380:	4b15      	ldr	r3, [pc, #84]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 8003382:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003384:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003388:	60fb      	str	r3, [r7, #12]
 800338a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800338c:	2300      	movs	r3, #0
 800338e:	60bb      	str	r3, [r7, #8]
 8003390:	4b11      	ldr	r3, [pc, #68]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 8003392:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003394:	4a10      	ldr	r2, [pc, #64]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 8003396:	f043 0302 	orr.w	r3, r3, #2
 800339a:	6313      	str	r3, [r2, #48]	; 0x30
 800339c:	4b0e      	ldr	r3, [pc, #56]	; (80033d8 <HAL_UART_MspInit+0x43c>)
 800339e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a0:	f003 0302 	and.w	r3, r3, #2
 80033a4:	60bb      	str	r3, [r7, #8]
 80033a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80033a8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033ae:	2302      	movs	r3, #2
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033b2:	2300      	movs	r3, #0
 80033b4:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80033b6:	2303      	movs	r3, #3
 80033b8:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80033ba:	2307      	movs	r3, #7
 80033bc:	647b      	str	r3, [r7, #68]	; 0x44
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80033be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80033c2:	4619      	mov	r1, r3
 80033c4:	480d      	ldr	r0, [pc, #52]	; (80033fc <HAL_UART_MspInit+0x460>)
 80033c6:	f001 f9f7 	bl	80047b8 <HAL_GPIO_Init>
}
 80033ca:	bf00      	nop
 80033cc:	3748      	adds	r7, #72	; 0x48
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
 80033d2:	bf00      	nop
 80033d4:	40011000 	.word	0x40011000
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40020000 	.word	0x40020000
 80033e0:	2000062c 	.word	0x2000062c
 80033e4:	40026440 	.word	0x40026440
 80033e8:	40004400 	.word	0x40004400
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	200003dc 	.word	0x200003dc
 80033f4:	40026088 	.word	0x40026088
 80033f8:	40004800 	.word	0x40004800
 80033fc:	40020400 	.word	0x40020400

08003400 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b08c      	sub	sp, #48	; 0x30
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8003408:	2300      	movs	r3, #0
 800340a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 800340c:	2300      	movs	r3, #0
 800340e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM7 IRQ priority */
  HAL_NVIC_SetPriority(TIM7_IRQn, TickPriority ,0);
 8003410:	2200      	movs	r2, #0
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	2037      	movs	r0, #55	; 0x37
 8003416:	f000 fd97 	bl	8003f48 <HAL_NVIC_SetPriority>

  /* Enable the TIM7 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM7_IRQn);
 800341a:	2037      	movs	r0, #55	; 0x37
 800341c:	f000 fdb0 	bl	8003f80 <HAL_NVIC_EnableIRQ>
  /* Enable TIM7 clock */
  __HAL_RCC_TIM7_CLK_ENABLE();
 8003420:	2300      	movs	r3, #0
 8003422:	60fb      	str	r3, [r7, #12]
 8003424:	4b1f      	ldr	r3, [pc, #124]	; (80034a4 <HAL_InitTick+0xa4>)
 8003426:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003428:	4a1e      	ldr	r2, [pc, #120]	; (80034a4 <HAL_InitTick+0xa4>)
 800342a:	f043 0320 	orr.w	r3, r3, #32
 800342e:	6413      	str	r3, [r2, #64]	; 0x40
 8003430:	4b1c      	ldr	r3, [pc, #112]	; (80034a4 <HAL_InitTick+0xa4>)
 8003432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003434:	f003 0320 	and.w	r3, r3, #32
 8003438:	60fb      	str	r3, [r7, #12]
 800343a:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800343c:	f107 0210 	add.w	r2, r7, #16
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4611      	mov	r1, r2
 8003446:	4618      	mov	r0, r3
 8003448:	f001 ffe0 	bl	800540c <HAL_RCC_GetClockConfig>

  /* Compute TIM7 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 800344c:	f001 ffb6 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 8003450:	4603      	mov	r3, r0
 8003452:	005b      	lsls	r3, r3, #1
 8003454:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM7 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003458:	4a13      	ldr	r2, [pc, #76]	; (80034a8 <HAL_InitTick+0xa8>)
 800345a:	fba2 2303 	umull	r2, r3, r2, r3
 800345e:	0c9b      	lsrs	r3, r3, #18
 8003460:	3b01      	subs	r3, #1
 8003462:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM7 */
  htim7.Instance = TIM7;
 8003464:	4b11      	ldr	r3, [pc, #68]	; (80034ac <HAL_InitTick+0xac>)
 8003466:	4a12      	ldr	r2, [pc, #72]	; (80034b0 <HAL_InitTick+0xb0>)
 8003468:	601a      	str	r2, [r3, #0]
  + Period = [(TIM7CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim7.Init.Period = (1000000U / 1000U) - 1U;
 800346a:	4b10      	ldr	r3, [pc, #64]	; (80034ac <HAL_InitTick+0xac>)
 800346c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003470:	60da      	str	r2, [r3, #12]
  htim7.Init.Prescaler = uwPrescalerValue;
 8003472:	4a0e      	ldr	r2, [pc, #56]	; (80034ac <HAL_InitTick+0xac>)
 8003474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003476:	6053      	str	r3, [r2, #4]
  htim7.Init.ClockDivision = 0;
 8003478:	4b0c      	ldr	r3, [pc, #48]	; (80034ac <HAL_InitTick+0xac>)
 800347a:	2200      	movs	r2, #0
 800347c:	611a      	str	r2, [r3, #16]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800347e:	4b0b      	ldr	r3, [pc, #44]	; (80034ac <HAL_InitTick+0xac>)
 8003480:	2200      	movs	r2, #0
 8003482:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim7) == HAL_OK)
 8003484:	4809      	ldr	r0, [pc, #36]	; (80034ac <HAL_InitTick+0xac>)
 8003486:	f002 fa83 	bl	8005990 <HAL_TIM_Base_Init>
 800348a:	4603      	mov	r3, r0
 800348c:	2b00      	cmp	r3, #0
 800348e:	d104      	bne.n	800349a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim7);
 8003490:	4806      	ldr	r0, [pc, #24]	; (80034ac <HAL_InitTick+0xac>)
 8003492:	f002 fb35 	bl	8005b00 <HAL_TIM_Base_Start_IT>
 8003496:	4603      	mov	r3, r0
 8003498:	e000      	b.n	800349c <HAL_InitTick+0x9c>
  }

  /* Return function status */
  return HAL_ERROR;
 800349a:	2301      	movs	r3, #1
}
 800349c:	4618      	mov	r0, r3
 800349e:	3730      	adds	r7, #48	; 0x30
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	40023800 	.word	0x40023800
 80034a8:	431bde83 	.word	0x431bde83
 80034ac:	20000d08 	.word	0x20000d08
 80034b0:	40001400 	.word	0x40001400

080034b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80034b8:	e7fe      	b.n	80034b8 <NMI_Handler+0x4>

080034ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80034ba:	b480      	push	{r7}
 80034bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80034be:	e7fe      	b.n	80034be <HardFault_Handler+0x4>

080034c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80034c4:	e7fe      	b.n	80034c4 <MemManage_Handler+0x4>

080034c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80034c6:	b480      	push	{r7}
 80034c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80034ca:	e7fe      	b.n	80034ca <BusFault_Handler+0x4>

080034cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80034d0:	e7fe      	b.n	80034d0 <UsageFault_Handler+0x4>

080034d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80034d2:	b480      	push	{r7}
 80034d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80034d6:	bf00      	nop
 80034d8:	46bd      	mov	sp, r7
 80034da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034de:	4770      	bx	lr

080034e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80034e0:	b480      	push	{r7}
 80034e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80034e4:	bf00      	nop
 80034e6:	46bd      	mov	sp, r7
 80034e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ec:	4770      	bx	lr

080034ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80034ee:	b480      	push	{r7}
 80034f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80034f2:	bf00      	nop
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80034fc:	b480      	push	{r7}
 80034fe:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003500:	bf00      	nop
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr
	...

0800350c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8003510:	4802      	ldr	r0, [pc, #8]	; (800351c <DMA1_Stream0_IRQHandler+0x10>)
 8003512:	f000 fedb 	bl	80042cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8003516:	bf00      	nop
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	20000840 	.word	0x20000840

08003520 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8003524:	4802      	ldr	r0, [pc, #8]	; (8003530 <DMA1_Stream2_IRQHandler+0x10>)
 8003526:	f000 fed1 	bl	80042cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 800352a:	bf00      	nop
 800352c:	bd80      	pop	{r7, pc}
 800352e:	bf00      	nop
 8003530:	2000037c 	.word	0x2000037c

08003534 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003538:	4802      	ldr	r0, [pc, #8]	; (8003544 <DMA1_Stream5_IRQHandler+0x10>)
 800353a:	f000 fec7 	bl	80042cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800353e:	bf00      	nop
 8003540:	bd80      	pop	{r7, pc}
 8003542:	bf00      	nop
 8003544:	200003dc 	.word	0x200003dc

08003548 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800354c:	4802      	ldr	r0, [pc, #8]	; (8003558 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800354e:	f002 fc5f 	bl	8005e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	200006d0 	.word	0x200006d0

0800355c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0

	        	remote(remoteBuffer + 16);
	        }
	    }*/
  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003560:	4802      	ldr	r0, [pc, #8]	; (800356c <USART1_IRQHandler+0x10>)
 8003562:	f003 fca9 	bl	8006eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003566:	bf00      	nop
 8003568:	bd80      	pop	{r7, pc}
 800356a:	bf00      	nop
 800356c:	2000068c 	.word	0x2000068c

08003570 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b082      	sub	sp, #8
 8003574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
    extern unsigned char ch110[82];
    if(USART2->SR & 0x10)
 8003576:	4b12      	ldr	r3, [pc, #72]	; (80035c0 <USART2_IRQHandler+0x50>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f003 0310 	and.w	r3, r3, #16
 800357e:	2b00      	cmp	r3, #0
 8003580:	d016      	beq.n	80035b0 <USART2_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart2);
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	4b0f      	ldr	r3, [pc, #60]	; (80035c4 <USART2_IRQHandler+0x54>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	607b      	str	r3, [r7, #4]
 800358e:	4b0d      	ldr	r3, [pc, #52]	; (80035c4 <USART2_IRQHandler+0x54>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	685b      	ldr	r3, [r3, #4]
 8003594:	607b      	str	r3, [r7, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
        if(ch110[0] != 0x5a)
 8003598:	4b0b      	ldr	r3, [pc, #44]	; (80035c8 <USART2_IRQHandler+0x58>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b5a      	cmp	r3, #90	; 0x5a
 800359e:	d007      	beq.n	80035b0 <USART2_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart2);
 80035a0:	4808      	ldr	r0, [pc, #32]	; (80035c4 <USART2_IRQHandler+0x54>)
 80035a2:	f003 fc2d 	bl	8006e00 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart2, ch110, 82);
 80035a6:	2252      	movs	r2, #82	; 0x52
 80035a8:	4907      	ldr	r1, [pc, #28]	; (80035c8 <USART2_IRQHandler+0x58>)
 80035aa:	4806      	ldr	r0, [pc, #24]	; (80035c4 <USART2_IRQHandler+0x54>)
 80035ac:	f003 fbf8 	bl	8006da0 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80035b0:	4804      	ldr	r0, [pc, #16]	; (80035c4 <USART2_IRQHandler+0x54>)
 80035b2:	f003 fc81 	bl	8006eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80035b6:	bf00      	nop
 80035b8:	3708      	adds	r7, #8
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40004400 	.word	0x40004400
 80035c4:	200007fc 	.word	0x200007fc
 80035c8:	2000031c 	.word	0x2000031c

080035cc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
    extern unsigned char raspiBuffer[82];
    if(UART4->SR & 0x10)
 80035d2:	4b12      	ldr	r3, [pc, #72]	; (800361c <UART4_IRQHandler+0x50>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d016      	beq.n	800360c <UART4_IRQHandler+0x40>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart4);
 80035de:	2300      	movs	r3, #0
 80035e0:	607b      	str	r3, [r7, #4]
 80035e2:	4b0f      	ldr	r3, [pc, #60]	; (8003620 <UART4_IRQHandler+0x54>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	607b      	str	r3, [r7, #4]
 80035ea:	4b0d      	ldr	r3, [pc, #52]	; (8003620 <UART4_IRQHandler+0x54>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	607b      	str	r3, [r7, #4]
 80035f2:	687b      	ldr	r3, [r7, #4]
        if(raspiBuffer[0] != 0x5a)
 80035f4:	4b0b      	ldr	r3, [pc, #44]	; (8003624 <UART4_IRQHandler+0x58>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b5a      	cmp	r3, #90	; 0x5a
 80035fa:	d007      	beq.n	800360c <UART4_IRQHandler+0x40>
        {
            HAL_UART_AbortReceive(&huart4);
 80035fc:	4808      	ldr	r0, [pc, #32]	; (8003620 <UART4_IRQHandler+0x54>)
 80035fe:	f003 fbff 	bl	8006e00 <HAL_UART_AbortReceive>
            HAL_UART_Receive_DMA(&huart4, raspiBuffer, 12);
 8003602:	220c      	movs	r2, #12
 8003604:	4907      	ldr	r1, [pc, #28]	; (8003624 <UART4_IRQHandler+0x58>)
 8003606:	4806      	ldr	r0, [pc, #24]	; (8003620 <UART4_IRQHandler+0x54>)
 8003608:	f003 fbca 	bl	8006da0 <HAL_UART_Receive_DMA>
        }
    }
  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800360c:	4804      	ldr	r0, [pc, #16]	; (8003620 <UART4_IRQHandler+0x54>)
 800360e:	f003 fc53 	bl	8006eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8003612:	bf00      	nop
 8003614:	3708      	adds	r7, #8
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}
 800361a:	bf00      	nop
 800361c:	40004c00 	.word	0x40004c00
 8003620:	20000718 	.word	0x20000718
 8003624:	20000280 	.word	0x20000280

08003628 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

    extern unsigned char remoteBuffer[32];
    if(UART5->SR & 0x10)
 800362e:	4b15      	ldr	r3, [pc, #84]	; (8003684 <UART5_IRQHandler+0x5c>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	f003 0310 	and.w	r3, r3, #16
 8003636:	2b00      	cmp	r3, #0
 8003638:	d01d      	beq.n	8003676 <UART5_IRQHandler+0x4e>
    {
        __HAL_UART_CLEAR_IDLEFLAG(&huart5);
 800363a:	2300      	movs	r3, #0
 800363c:	607b      	str	r3, [r7, #4]
 800363e:	4b12      	ldr	r3, [pc, #72]	; (8003688 <UART5_IRQHandler+0x60>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	607b      	str	r3, [r7, #4]
 8003646:	4b10      	ldr	r3, [pc, #64]	; (8003688 <UART5_IRQHandler+0x60>)
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	607b      	str	r3, [r7, #4]
 800364e:	687b      	ldr	r3, [r7, #4]
        HAL_UART_AbortReceive(&huart5);
 8003650:	480d      	ldr	r0, [pc, #52]	; (8003688 <UART5_IRQHandler+0x60>)
 8003652:	f003 fbd5 	bl	8006e00 <HAL_UART_AbortReceive>
        HAL_UART_Receive_DMA(&huart5, remoteBuffer, 25);
 8003656:	2219      	movs	r2, #25
 8003658:	490c      	ldr	r1, [pc, #48]	; (800368c <UART5_IRQHandler+0x64>)
 800365a:	480b      	ldr	r0, [pc, #44]	; (8003688 <UART5_IRQHandler+0x60>)
 800365c:	f003 fba0 	bl	8006da0 <HAL_UART_Receive_DMA>
        if (0x5a == remoteBuffer[0]&&0xa5 == remoteBuffer[1])
 8003660:	4b0a      	ldr	r3, [pc, #40]	; (800368c <UART5_IRQHandler+0x64>)
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	2b5a      	cmp	r3, #90	; 0x5a
 8003666:	d106      	bne.n	8003676 <UART5_IRQHandler+0x4e>
 8003668:	4b08      	ldr	r3, [pc, #32]	; (800368c <UART5_IRQHandler+0x64>)
 800366a:	785b      	ldrb	r3, [r3, #1]
 800366c:	2ba5      	cmp	r3, #165	; 0xa5
 800366e:	d102      	bne.n	8003676 <UART5_IRQHandler+0x4e>
        {
        	void remote(uint8_t * remoteBuffer);

        	remote(remoteBuffer);
 8003670:	4806      	ldr	r0, [pc, #24]	; (800368c <UART5_IRQHandler+0x64>)
 8003672:	f7ff f8e7 	bl	8002844 <remote>
        }
    }
  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003676:	4804      	ldr	r0, [pc, #16]	; (8003688 <UART5_IRQHandler+0x60>)
 8003678:	f003 fc1e 	bl	8006eb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800367c:	bf00      	nop
 800367e:	3708      	adds	r7, #8
 8003680:	46bd      	mov	sp, r7
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40005000 	.word	0x40005000
 8003688:	200005a0 	.word	0x200005a0
 800368c:	200002b0 	.word	0x200002b0

08003690 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003694:	4802      	ldr	r0, [pc, #8]	; (80036a0 <TIM7_IRQHandler+0x10>)
 8003696:	f002 fbbb 	bl	8005e10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 800369a:	bf00      	nop
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000d08 	.word	0x20000d08

080036a4 <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 80036a8:	4802      	ldr	r0, [pc, #8]	; (80036b4 <DMA2_Stream2_IRQHandler+0x10>)
 80036aa:	f000 fe0f 	bl	80042cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
 80036b2:	bf00      	nop
 80036b4:	2000062c 	.word	0x2000062c

080036b8 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	b086      	sub	sp, #24
 80036bc:	af00      	add	r7, sp, #0
 80036be:	60f8      	str	r0, [r7, #12]
 80036c0:	60b9      	str	r1, [r7, #8]
 80036c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036c4:	2300      	movs	r3, #0
 80036c6:	617b      	str	r3, [r7, #20]
 80036c8:	e00a      	b.n	80036e0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80036ca:	f3af 8000 	nop.w
 80036ce:	4601      	mov	r1, r0
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	1c5a      	adds	r2, r3, #1
 80036d4:	60ba      	str	r2, [r7, #8]
 80036d6:	b2ca      	uxtb	r2, r1
 80036d8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80036da:	697b      	ldr	r3, [r7, #20]
 80036dc:	3301      	adds	r3, #1
 80036de:	617b      	str	r3, [r7, #20]
 80036e0:	697a      	ldr	r2, [r7, #20]
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	429a      	cmp	r2, r3
 80036e6:	dbf0      	blt.n	80036ca <_read+0x12>
	}

return len;
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	3718      	adds	r7, #24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	bd80      	pop	{r7, pc}

080036f2 <_close>:
	}
	return len;
}

int _close(int file)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
	return -1;
 80036fa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80036fe:	4618      	mov	r0, r3
 8003700:	370c      	adds	r7, #12
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr

0800370a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800370a:	b480      	push	{r7}
 800370c:	b083      	sub	sp, #12
 800370e:	af00      	add	r7, sp, #0
 8003710:	6078      	str	r0, [r7, #4]
 8003712:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800371a:	605a      	str	r2, [r3, #4]
	return 0;
 800371c:	2300      	movs	r3, #0
}
 800371e:	4618      	mov	r0, r3
 8003720:	370c      	adds	r7, #12
 8003722:	46bd      	mov	sp, r7
 8003724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003728:	4770      	bx	lr

0800372a <_isatty>:

int _isatty(int file)
{
 800372a:	b480      	push	{r7}
 800372c:	b083      	sub	sp, #12
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
	return 1;
 8003732:	2301      	movs	r3, #1
}
 8003734:	4618      	mov	r0, r3
 8003736:	370c      	adds	r7, #12
 8003738:	46bd      	mov	sp, r7
 800373a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373e:	4770      	bx	lr

08003740 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003740:	b480      	push	{r7}
 8003742:	b085      	sub	sp, #20
 8003744:	af00      	add	r7, sp, #0
 8003746:	60f8      	str	r0, [r7, #12]
 8003748:	60b9      	str	r1, [r7, #8]
 800374a:	607a      	str	r2, [r7, #4]
	return 0;
 800374c:	2300      	movs	r3, #0
}
 800374e:	4618      	mov	r0, r3
 8003750:	3714      	adds	r7, #20
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
	...

0800375c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b086      	sub	sp, #24
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003764:	4a14      	ldr	r2, [pc, #80]	; (80037b8 <_sbrk+0x5c>)
 8003766:	4b15      	ldr	r3, [pc, #84]	; (80037bc <_sbrk+0x60>)
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003770:	4b13      	ldr	r3, [pc, #76]	; (80037c0 <_sbrk+0x64>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	2b00      	cmp	r3, #0
 8003776:	d102      	bne.n	800377e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <_sbrk+0x64>)
 800377a:	4a12      	ldr	r2, [pc, #72]	; (80037c4 <_sbrk+0x68>)
 800377c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800377e:	4b10      	ldr	r3, [pc, #64]	; (80037c0 <_sbrk+0x64>)
 8003780:	681a      	ldr	r2, [r3, #0]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	4413      	add	r3, r2
 8003786:	693a      	ldr	r2, [r7, #16]
 8003788:	429a      	cmp	r2, r3
 800378a:	d207      	bcs.n	800379c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800378c:	f004 f9dc 	bl	8007b48 <__errno>
 8003790:	4603      	mov	r3, r0
 8003792:	220c      	movs	r2, #12
 8003794:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003796:	f04f 33ff 	mov.w	r3, #4294967295
 800379a:	e009      	b.n	80037b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800379c:	4b08      	ldr	r3, [pc, #32]	; (80037c0 <_sbrk+0x64>)
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80037a2:	4b07      	ldr	r3, [pc, #28]	; (80037c0 <_sbrk+0x64>)
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4413      	add	r3, r2
 80037aa:	4a05      	ldr	r2, [pc, #20]	; (80037c0 <_sbrk+0x64>)
 80037ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80037ae:	68fb      	ldr	r3, [r7, #12]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3718      	adds	r7, #24
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}
 80037b8:	20020000 	.word	0x20020000
 80037bc:	00000400 	.word	0x00000400
 80037c0:	200002f0 	.word	0x200002f0
 80037c4:	20000d68 	.word	0x20000d68

080037c8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80037c8:	b480      	push	{r7}
 80037ca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80037cc:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <SystemInit+0x28>)
 80037ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037d2:	4a07      	ldr	r2, [pc, #28]	; (80037f0 <SystemInit+0x28>)
 80037d4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80037d8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80037dc:	4b04      	ldr	r3, [pc, #16]	; (80037f0 <SystemInit+0x28>)
 80037de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80037e2:	609a      	str	r2, [r3, #8]
#endif
}
 80037e4:	bf00      	nop
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
 80037ee:	bf00      	nop
 80037f0:	e000ed00 	.word	0xe000ed00

080037f4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80037f4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800382c <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80037f8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80037fa:	e003      	b.n	8003804 <LoopCopyDataInit>

080037fc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80037fc:	4b0c      	ldr	r3, [pc, #48]	; (8003830 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80037fe:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003800:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003802:	3104      	adds	r1, #4

08003804 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003804:	480b      	ldr	r0, [pc, #44]	; (8003834 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003806:	4b0c      	ldr	r3, [pc, #48]	; (8003838 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003808:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800380a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800380c:	d3f6      	bcc.n	80037fc <CopyDataInit>
  ldr  r2, =_sbss
 800380e:	4a0b      	ldr	r2, [pc, #44]	; (800383c <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003810:	e002      	b.n	8003818 <LoopFillZerobss>

08003812 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003812:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003814:	f842 3b04 	str.w	r3, [r2], #4

08003818 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003818:	4b09      	ldr	r3, [pc, #36]	; (8003840 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800381a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800381c:	d3f9      	bcc.n	8003812 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800381e:	f7ff ffd3 	bl	80037c8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003822:	f004 f997 	bl	8007b54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003826:	f7fd fc8b 	bl	8001140 <main>
  bx  lr    
 800382a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800382c:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8003830:	08009068 	.word	0x08009068
  ldr  r0, =_sdata
 8003834:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003838:	20000244 	.word	0x20000244
  ldr  r2, =_sbss
 800383c:	20000244 	.word	0x20000244
  ldr  r3, = _ebss
 8003840:	20000d64 	.word	0x20000d64

08003844 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003844:	e7fe      	b.n	8003844 <ADC_IRQHandler>
	...

08003848 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003848:	b580      	push	{r7, lr}
 800384a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800384c:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_Init+0x40>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a0d      	ldr	r2, [pc, #52]	; (8003888 <HAL_Init+0x40>)
 8003852:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003856:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003858:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_Init+0x40>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <HAL_Init+0x40>)
 800385e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003862:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003864:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_Init+0x40>)
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a07      	ldr	r2, [pc, #28]	; (8003888 <HAL_Init+0x40>)
 800386a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800386e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003870:	2003      	movs	r0, #3
 8003872:	f000 fb5e 	bl	8003f32 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003876:	2000      	movs	r0, #0
 8003878:	f7ff fdc2 	bl	8003400 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800387c:	f7ff f8e6 	bl	8002a4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003880:	2300      	movs	r3, #0
}
 8003882:	4618      	mov	r0, r3
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40023c00 	.word	0x40023c00

0800388c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800388c:	b480      	push	{r7}
 800388e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003890:	4b06      	ldr	r3, [pc, #24]	; (80038ac <HAL_IncTick+0x20>)
 8003892:	781b      	ldrb	r3, [r3, #0]
 8003894:	461a      	mov	r2, r3
 8003896:	4b06      	ldr	r3, [pc, #24]	; (80038b0 <HAL_IncTick+0x24>)
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	4413      	add	r3, r2
 800389c:	4a04      	ldr	r2, [pc, #16]	; (80038b0 <HAL_IncTick+0x24>)
 800389e:	6013      	str	r3, [r2, #0]
}
 80038a0:	bf00      	nop
 80038a2:	46bd      	mov	sp, r7
 80038a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a8:	4770      	bx	lr
 80038aa:	bf00      	nop
 80038ac:	200001dc 	.word	0x200001dc
 80038b0:	20000d50 	.word	0x20000d50

080038b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80038b4:	b480      	push	{r7}
 80038b6:	af00      	add	r7, sp, #0
  return uwTick;
 80038b8:	4b03      	ldr	r3, [pc, #12]	; (80038c8 <HAL_GetTick+0x14>)
 80038ba:	681b      	ldr	r3, [r3, #0]
}
 80038bc:	4618      	mov	r0, r3
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	20000d50 	.word	0x20000d50

080038cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b084      	sub	sp, #16
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80038d4:	f7ff ffee 	bl	80038b4 <HAL_GetTick>
 80038d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038e4:	d005      	beq.n	80038f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80038e6:	4b0a      	ldr	r3, [pc, #40]	; (8003910 <HAL_Delay+0x44>)
 80038e8:	781b      	ldrb	r3, [r3, #0]
 80038ea:	461a      	mov	r2, r3
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	4413      	add	r3, r2
 80038f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80038f2:	bf00      	nop
 80038f4:	f7ff ffde 	bl	80038b4 <HAL_GetTick>
 80038f8:	4602      	mov	r2, r0
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	1ad3      	subs	r3, r2, r3
 80038fe:	68fa      	ldr	r2, [r7, #12]
 8003900:	429a      	cmp	r2, r3
 8003902:	d8f7      	bhi.n	80038f4 <HAL_Delay+0x28>
  {
  }
}
 8003904:	bf00      	nop
 8003906:	bf00      	nop
 8003908:	3710      	adds	r7, #16
 800390a:	46bd      	mov	sp, r7
 800390c:	bd80      	pop	{r7, pc}
 800390e:	bf00      	nop
 8003910:	200001dc 	.word	0x200001dc

08003914 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b084      	sub	sp, #16
 8003918:	af00      	add	r7, sp, #0
 800391a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800391c:	2300      	movs	r3, #0
 800391e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2b00      	cmp	r3, #0
 8003924:	d101      	bne.n	800392a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003926:	2301      	movs	r3, #1
 8003928:	e033      	b.n	8003992 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392e:	2b00      	cmp	r3, #0
 8003930:	d109      	bne.n	8003946 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7ff f8b2 	bl	8002a9c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800394a:	f003 0310 	and.w	r3, r3, #16
 800394e:	2b00      	cmp	r3, #0
 8003950:	d118      	bne.n	8003984 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003956:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800395a:	f023 0302 	bic.w	r3, r3, #2
 800395e:	f043 0202 	orr.w	r2, r3, #2
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	f000 f93a 	bl	8003be0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2200      	movs	r2, #0
 8003970:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003976:	f023 0303 	bic.w	r3, r3, #3
 800397a:	f043 0201 	orr.w	r2, r3, #1
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	641a      	str	r2, [r3, #64]	; 0x40
 8003982:	e001      	b.n	8003988 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003984:	2301      	movs	r3, #1
 8003986:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003990:	7bfb      	ldrb	r3, [r7, #15]
}
 8003992:	4618      	mov	r0, r3
 8003994:	3710      	adds	r7, #16
 8003996:	46bd      	mov	sp, r7
 8003998:	bd80      	pop	{r7, pc}
	...

0800399c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
 80039a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	d101      	bne.n	80039b8 <HAL_ADC_ConfigChannel+0x1c>
 80039b4:	2302      	movs	r3, #2
 80039b6:	e105      	b.n	8003bc4 <HAL_ADC_ConfigChannel+0x228>
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2b09      	cmp	r3, #9
 80039c6:	d925      	bls.n	8003a14 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	68d9      	ldr	r1, [r3, #12]
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	b29b      	uxth	r3, r3
 80039d4:	461a      	mov	r2, r3
 80039d6:	4613      	mov	r3, r2
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	4413      	add	r3, r2
 80039dc:	3b1e      	subs	r3, #30
 80039de:	2207      	movs	r2, #7
 80039e0:	fa02 f303 	lsl.w	r3, r2, r3
 80039e4:	43da      	mvns	r2, r3
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	400a      	ands	r2, r1
 80039ec:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	68d9      	ldr	r1, [r3, #12]
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	689a      	ldr	r2, [r3, #8]
 80039f8:	683b      	ldr	r3, [r7, #0]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	b29b      	uxth	r3, r3
 80039fe:	4618      	mov	r0, r3
 8003a00:	4603      	mov	r3, r0
 8003a02:	005b      	lsls	r3, r3, #1
 8003a04:	4403      	add	r3, r0
 8003a06:	3b1e      	subs	r3, #30
 8003a08:	409a      	lsls	r2, r3
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	430a      	orrs	r2, r1
 8003a10:	60da      	str	r2, [r3, #12]
 8003a12:	e022      	b.n	8003a5a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	6919      	ldr	r1, [r3, #16]
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	b29b      	uxth	r3, r3
 8003a20:	461a      	mov	r2, r3
 8003a22:	4613      	mov	r3, r2
 8003a24:	005b      	lsls	r3, r3, #1
 8003a26:	4413      	add	r3, r2
 8003a28:	2207      	movs	r2, #7
 8003a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2e:	43da      	mvns	r2, r3
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	400a      	ands	r2, r1
 8003a36:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6919      	ldr	r1, [r3, #16]
 8003a3e:	683b      	ldr	r3, [r7, #0]
 8003a40:	689a      	ldr	r2, [r3, #8]
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	4403      	add	r3, r0
 8003a50:	409a      	lsls	r2, r3
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	430a      	orrs	r2, r1
 8003a58:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	2b06      	cmp	r3, #6
 8003a60:	d824      	bhi.n	8003aac <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	685a      	ldr	r2, [r3, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	4413      	add	r3, r2
 8003a72:	3b05      	subs	r3, #5
 8003a74:	221f      	movs	r2, #31
 8003a76:	fa02 f303 	lsl.w	r3, r2, r3
 8003a7a:	43da      	mvns	r2, r3
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	400a      	ands	r2, r1
 8003a82:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	b29b      	uxth	r3, r3
 8003a90:	4618      	mov	r0, r3
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	685a      	ldr	r2, [r3, #4]
 8003a96:	4613      	mov	r3, r2
 8003a98:	009b      	lsls	r3, r3, #2
 8003a9a:	4413      	add	r3, r2
 8003a9c:	3b05      	subs	r3, #5
 8003a9e:	fa00 f203 	lsl.w	r2, r0, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	430a      	orrs	r2, r1
 8003aa8:	635a      	str	r2, [r3, #52]	; 0x34
 8003aaa:	e04c      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b0c      	cmp	r3, #12
 8003ab2:	d824      	bhi.n	8003afe <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	685a      	ldr	r2, [r3, #4]
 8003abe:	4613      	mov	r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	4413      	add	r3, r2
 8003ac4:	3b23      	subs	r3, #35	; 0x23
 8003ac6:	221f      	movs	r2, #31
 8003ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8003acc:	43da      	mvns	r2, r3
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	400a      	ands	r2, r1
 8003ad4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	b29b      	uxth	r3, r3
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	685a      	ldr	r2, [r3, #4]
 8003ae8:	4613      	mov	r3, r2
 8003aea:	009b      	lsls	r3, r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	3b23      	subs	r3, #35	; 0x23
 8003af0:	fa00 f203 	lsl.w	r2, r0, r3
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	631a      	str	r2, [r3, #48]	; 0x30
 8003afc:	e023      	b.n	8003b46 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	685a      	ldr	r2, [r3, #4]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	3b41      	subs	r3, #65	; 0x41
 8003b10:	221f      	movs	r2, #31
 8003b12:	fa02 f303 	lsl.w	r3, r2, r3
 8003b16:	43da      	mvns	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	400a      	ands	r2, r1
 8003b1e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	4618      	mov	r0, r3
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	685a      	ldr	r2, [r3, #4]
 8003b32:	4613      	mov	r3, r2
 8003b34:	009b      	lsls	r3, r3, #2
 8003b36:	4413      	add	r3, r2
 8003b38:	3b41      	subs	r3, #65	; 0x41
 8003b3a:	fa00 f203 	lsl.w	r2, r0, r3
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b46:	4b22      	ldr	r3, [pc, #136]	; (8003bd0 <HAL_ADC_ConfigChannel+0x234>)
 8003b48:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a21      	ldr	r2, [pc, #132]	; (8003bd4 <HAL_ADC_ConfigChannel+0x238>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d109      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1cc>
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	2b12      	cmp	r3, #18
 8003b5a:	d105      	bne.n	8003b68 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a19      	ldr	r2, [pc, #100]	; (8003bd4 <HAL_ADC_ConfigChannel+0x238>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d123      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x21e>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b10      	cmp	r3, #16
 8003b78:	d003      	beq.n	8003b82 <HAL_ADC_ConfigChannel+0x1e6>
 8003b7a:	683b      	ldr	r3, [r7, #0]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	2b11      	cmp	r3, #17
 8003b80:	d11b      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b10      	cmp	r3, #16
 8003b94:	d111      	bne.n	8003bba <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b96:	4b10      	ldr	r3, [pc, #64]	; (8003bd8 <HAL_ADC_ConfigChannel+0x23c>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4a10      	ldr	r2, [pc, #64]	; (8003bdc <HAL_ADC_ConfigChannel+0x240>)
 8003b9c:	fba2 2303 	umull	r2, r3, r2, r3
 8003ba0:	0c9a      	lsrs	r2, r3, #18
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	4413      	add	r3, r2
 8003ba8:	005b      	lsls	r3, r3, #1
 8003baa:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bac:	e002      	b.n	8003bb4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003bae:	68bb      	ldr	r3, [r7, #8]
 8003bb0:	3b01      	subs	r3, #1
 8003bb2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d1f9      	bne.n	8003bae <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003bc2:	2300      	movs	r3, #0
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	3714      	adds	r7, #20
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bce:	4770      	bx	lr
 8003bd0:	40012300 	.word	0x40012300
 8003bd4:	40012000 	.word	0x40012000
 8003bd8:	200001d4 	.word	0x200001d4
 8003bdc:	431bde83 	.word	0x431bde83

08003be0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003be8:	4b79      	ldr	r3, [pc, #484]	; (8003dd0 <ADC_Init+0x1f0>)
 8003bea:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685a      	ldr	r2, [r3, #4]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	431a      	orrs	r2, r3
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	685a      	ldr	r2, [r3, #4]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003c14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6859      	ldr	r1, [r3, #4]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	691b      	ldr	r3, [r3, #16]
 8003c20:	021a      	lsls	r2, r3, #8
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c38:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	6859      	ldr	r1, [r3, #4]
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	689a      	ldr	r2, [r3, #8]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689a      	ldr	r2, [r3, #8]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c5a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	6899      	ldr	r1, [r3, #8]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	68da      	ldr	r2, [r3, #12]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	430a      	orrs	r2, r1
 8003c6c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c72:	4a58      	ldr	r2, [pc, #352]	; (8003dd4 <ADC_Init+0x1f4>)
 8003c74:	4293      	cmp	r3, r2
 8003c76:	d022      	beq.n	8003cbe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	689a      	ldr	r2, [r3, #8]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c86:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6899      	ldr	r1, [r3, #8]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	430a      	orrs	r2, r1
 8003c98:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	689a      	ldr	r2, [r3, #8]
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ca8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	6899      	ldr	r1, [r3, #8]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	430a      	orrs	r2, r1
 8003cba:	609a      	str	r2, [r3, #8]
 8003cbc:	e00f      	b.n	8003cde <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	689a      	ldr	r2, [r3, #8]
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ccc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689a      	ldr	r2, [r3, #8]
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003cdc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689a      	ldr	r2, [r3, #8]
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f022 0202 	bic.w	r2, r2, #2
 8003cec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	6899      	ldr	r1, [r3, #8]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	7e1b      	ldrb	r3, [r3, #24]
 8003cf8:	005a      	lsls	r2, r3, #1
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	430a      	orrs	r2, r1
 8003d00:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d01b      	beq.n	8003d44 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003d1a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003d2a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6859      	ldr	r1, [r3, #4]
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d36:	3b01      	subs	r3, #1
 8003d38:	035a      	lsls	r2, r3, #13
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	605a      	str	r2, [r3, #4]
 8003d42:	e007      	b.n	8003d54 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d52:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d62:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	69db      	ldr	r3, [r3, #28]
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	051a      	lsls	r2, r3, #20
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	689a      	ldr	r2, [r3, #8]
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d88:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	6899      	ldr	r1, [r3, #8]
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d96:	025a      	lsls	r2, r3, #9
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	689a      	ldr	r2, [r3, #8]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	6899      	ldr	r1, [r3, #8]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	695b      	ldr	r3, [r3, #20]
 8003dba:	029a      	lsls	r2, r3, #10
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	609a      	str	r2, [r3, #8]
}
 8003dc4:	bf00      	nop
 8003dc6:	3714      	adds	r7, #20
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dce:	4770      	bx	lr
 8003dd0:	40012300 	.word	0x40012300
 8003dd4:	0f000001 	.word	0x0f000001

08003dd8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b085      	sub	sp, #20
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f003 0307 	and.w	r3, r3, #7
 8003de6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003de8:	4b0c      	ldr	r3, [pc, #48]	; (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003df4:	4013      	ands	r3, r2
 8003df6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dfc:	68bb      	ldr	r3, [r7, #8]
 8003dfe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003e00:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003e04:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e08:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003e0a:	4a04      	ldr	r2, [pc, #16]	; (8003e1c <__NVIC_SetPriorityGrouping+0x44>)
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	60d3      	str	r3, [r2, #12]
}
 8003e10:	bf00      	nop
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr
 8003e1c:	e000ed00 	.word	0xe000ed00

08003e20 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003e20:	b480      	push	{r7}
 8003e22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003e24:	4b04      	ldr	r3, [pc, #16]	; (8003e38 <__NVIC_GetPriorityGrouping+0x18>)
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	0a1b      	lsrs	r3, r3, #8
 8003e2a:	f003 0307 	and.w	r3, r3, #7
}
 8003e2e:	4618      	mov	r0, r3
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr
 8003e38:	e000ed00 	.word	0xe000ed00

08003e3c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	4603      	mov	r3, r0
 8003e44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	db0b      	blt.n	8003e66 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e4e:	79fb      	ldrb	r3, [r7, #7]
 8003e50:	f003 021f 	and.w	r2, r3, #31
 8003e54:	4907      	ldr	r1, [pc, #28]	; (8003e74 <__NVIC_EnableIRQ+0x38>)
 8003e56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5a:	095b      	lsrs	r3, r3, #5
 8003e5c:	2001      	movs	r0, #1
 8003e5e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e66:	bf00      	nop
 8003e68:	370c      	adds	r7, #12
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e70:	4770      	bx	lr
 8003e72:	bf00      	nop
 8003e74:	e000e100 	.word	0xe000e100

08003e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	4603      	mov	r3, r0
 8003e80:	6039      	str	r1, [r7, #0]
 8003e82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	db0a      	blt.n	8003ea2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	b2da      	uxtb	r2, r3
 8003e90:	490c      	ldr	r1, [pc, #48]	; (8003ec4 <__NVIC_SetPriority+0x4c>)
 8003e92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e96:	0112      	lsls	r2, r2, #4
 8003e98:	b2d2      	uxtb	r2, r2
 8003e9a:	440b      	add	r3, r1
 8003e9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ea0:	e00a      	b.n	8003eb8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	b2da      	uxtb	r2, r3
 8003ea6:	4908      	ldr	r1, [pc, #32]	; (8003ec8 <__NVIC_SetPriority+0x50>)
 8003ea8:	79fb      	ldrb	r3, [r7, #7]
 8003eaa:	f003 030f 	and.w	r3, r3, #15
 8003eae:	3b04      	subs	r3, #4
 8003eb0:	0112      	lsls	r2, r2, #4
 8003eb2:	b2d2      	uxtb	r2, r2
 8003eb4:	440b      	add	r3, r1
 8003eb6:	761a      	strb	r2, [r3, #24]
}
 8003eb8:	bf00      	nop
 8003eba:	370c      	adds	r7, #12
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec2:	4770      	bx	lr
 8003ec4:	e000e100 	.word	0xe000e100
 8003ec8:	e000ed00 	.word	0xe000ed00

08003ecc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ecc:	b480      	push	{r7}
 8003ece:	b089      	sub	sp, #36	; 0x24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f003 0307 	and.w	r3, r3, #7
 8003ede:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ee0:	69fb      	ldr	r3, [r7, #28]
 8003ee2:	f1c3 0307 	rsb	r3, r3, #7
 8003ee6:	2b04      	cmp	r3, #4
 8003ee8:	bf28      	it	cs
 8003eea:	2304      	movcs	r3, #4
 8003eec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eee:	69fb      	ldr	r3, [r7, #28]
 8003ef0:	3304      	adds	r3, #4
 8003ef2:	2b06      	cmp	r3, #6
 8003ef4:	d902      	bls.n	8003efc <NVIC_EncodePriority+0x30>
 8003ef6:	69fb      	ldr	r3, [r7, #28]
 8003ef8:	3b03      	subs	r3, #3
 8003efa:	e000      	b.n	8003efe <NVIC_EncodePriority+0x32>
 8003efc:	2300      	movs	r3, #0
 8003efe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f00:	f04f 32ff 	mov.w	r2, #4294967295
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	fa02 f303 	lsl.w	r3, r2, r3
 8003f0a:	43da      	mvns	r2, r3
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	401a      	ands	r2, r3
 8003f10:	697b      	ldr	r3, [r7, #20]
 8003f12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003f14:	f04f 31ff 	mov.w	r1, #4294967295
 8003f18:	697b      	ldr	r3, [r7, #20]
 8003f1a:	fa01 f303 	lsl.w	r3, r1, r3
 8003f1e:	43d9      	mvns	r1, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f24:	4313      	orrs	r3, r2
         );
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	3724      	adds	r7, #36	; 0x24
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b082      	sub	sp, #8
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f7ff ff4c 	bl	8003dd8 <__NVIC_SetPriorityGrouping>
}
 8003f40:	bf00      	nop
 8003f42:	3708      	adds	r7, #8
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}

08003f48 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	4603      	mov	r3, r0
 8003f50:	60b9      	str	r1, [r7, #8]
 8003f52:	607a      	str	r2, [r7, #4]
 8003f54:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f56:	2300      	movs	r3, #0
 8003f58:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f5a:	f7ff ff61 	bl	8003e20 <__NVIC_GetPriorityGrouping>
 8003f5e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f60:	687a      	ldr	r2, [r7, #4]
 8003f62:	68b9      	ldr	r1, [r7, #8]
 8003f64:	6978      	ldr	r0, [r7, #20]
 8003f66:	f7ff ffb1 	bl	8003ecc <NVIC_EncodePriority>
 8003f6a:	4602      	mov	r2, r0
 8003f6c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f70:	4611      	mov	r1, r2
 8003f72:	4618      	mov	r0, r3
 8003f74:	f7ff ff80 	bl	8003e78 <__NVIC_SetPriority>
}
 8003f78:	bf00      	nop
 8003f7a:	3718      	adds	r7, #24
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b082      	sub	sp, #8
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	4603      	mov	r3, r0
 8003f88:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7ff ff54 	bl	8003e3c <__NVIC_EnableIRQ>
}
 8003f94:	bf00      	nop
 8003f96:	3708      	adds	r7, #8
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b086      	sub	sp, #24
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003fa8:	f7ff fc84 	bl	80038b4 <HAL_GetTick>
 8003fac:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d101      	bne.n	8003fb8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003fb4:	2301      	movs	r3, #1
 8003fb6:	e099      	b.n	80040ec <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2202      	movs	r2, #2
 8003fc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	f022 0201 	bic.w	r2, r2, #1
 8003fd6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fd8:	e00f      	b.n	8003ffa <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003fda:	f7ff fc6b 	bl	80038b4 <HAL_GetTick>
 8003fde:	4602      	mov	r2, r0
 8003fe0:	693b      	ldr	r3, [r7, #16]
 8003fe2:	1ad3      	subs	r3, r2, r3
 8003fe4:	2b05      	cmp	r3, #5
 8003fe6:	d908      	bls.n	8003ffa <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2220      	movs	r2, #32
 8003fec:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2203      	movs	r2, #3
 8003ff2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e078      	b.n	80040ec <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d1e8      	bne.n	8003fda <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004010:	697a      	ldr	r2, [r7, #20]
 8004012:	4b38      	ldr	r3, [pc, #224]	; (80040f4 <HAL_DMA_Init+0x158>)
 8004014:	4013      	ands	r3, r2
 8004016:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	685a      	ldr	r2, [r3, #4]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	689b      	ldr	r3, [r3, #8]
 8004020:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004026:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	691b      	ldr	r3, [r3, #16]
 800402c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004032:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	699b      	ldr	r3, [r3, #24]
 8004038:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800403e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	6a1b      	ldr	r3, [r3, #32]
 8004044:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004046:	697a      	ldr	r2, [r7, #20]
 8004048:	4313      	orrs	r3, r2
 800404a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004050:	2b04      	cmp	r3, #4
 8004052:	d107      	bne.n	8004064 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800405c:	4313      	orrs	r3, r2
 800405e:	697a      	ldr	r2, [r7, #20]
 8004060:	4313      	orrs	r3, r2
 8004062:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	695b      	ldr	r3, [r3, #20]
 8004072:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004074:	697b      	ldr	r3, [r7, #20]
 8004076:	f023 0307 	bic.w	r3, r3, #7
 800407a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	4313      	orrs	r3, r2
 8004084:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800408a:	2b04      	cmp	r3, #4
 800408c:	d117      	bne.n	80040be <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800409c:	2b00      	cmp	r3, #0
 800409e:	d00e      	beq.n	80040be <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040a0:	6878      	ldr	r0, [r7, #4]
 80040a2:	f000 fb0d 	bl	80046c0 <DMA_CheckFifoParam>
 80040a6:	4603      	mov	r3, r0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	2240      	movs	r2, #64	; 0x40
 80040b0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2201      	movs	r2, #1
 80040b6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80040ba:	2301      	movs	r3, #1
 80040bc:	e016      	b.n	80040ec <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f000 fac4 	bl	8004654 <DMA_CalcBaseAndBitshift>
 80040cc:	4603      	mov	r3, r0
 80040ce:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040d4:	223f      	movs	r2, #63	; 0x3f
 80040d6:	409a      	lsls	r2, r3
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2201      	movs	r2, #1
 80040e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80040ea:	2300      	movs	r3, #0
}
 80040ec:	4618      	mov	r0, r3
 80040ee:	3718      	adds	r7, #24
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}
 80040f4:	f010803f 	.word	0xf010803f

080040f8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b086      	sub	sp, #24
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004106:	2300      	movs	r3, #0
 8004108:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004116:	2b01      	cmp	r3, #1
 8004118:	d101      	bne.n	800411e <HAL_DMA_Start_IT+0x26>
 800411a:	2302      	movs	r3, #2
 800411c:	e040      	b.n	80041a0 <HAL_DMA_Start_IT+0xa8>
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	2201      	movs	r2, #1
 8004122:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b01      	cmp	r3, #1
 8004130:	d12f      	bne.n	8004192 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2202      	movs	r2, #2
 8004136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2200      	movs	r2, #0
 800413e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	687a      	ldr	r2, [r7, #4]
 8004144:	68b9      	ldr	r1, [r7, #8]
 8004146:	68f8      	ldr	r0, [r7, #12]
 8004148:	f000 fa56 	bl	80045f8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004150:	223f      	movs	r2, #63	; 0x3f
 8004152:	409a      	lsls	r2, r3
 8004154:	693b      	ldr	r3, [r7, #16]
 8004156:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	681a      	ldr	r2, [r3, #0]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0216 	orr.w	r2, r2, #22
 8004166:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800416c:	2b00      	cmp	r3, #0
 800416e:	d007      	beq.n	8004180 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f042 0208 	orr.w	r2, r2, #8
 800417e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	681a      	ldr	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f042 0201 	orr.w	r2, r2, #1
 800418e:	601a      	str	r2, [r3, #0]
 8004190:	e005      	b.n	800419e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800419a:	2302      	movs	r3, #2
 800419c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800419e:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a0:	4618      	mov	r0, r3
 80041a2:	3718      	adds	r7, #24
 80041a4:	46bd      	mov	sp, r7
 80041a6:	bd80      	pop	{r7, pc}

080041a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b084      	sub	sp, #16
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80041b6:	f7ff fb7d 	bl	80038b4 <HAL_GetTick>
 80041ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041c2:	b2db      	uxtb	r3, r3
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d008      	beq.n	80041da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2280      	movs	r2, #128	; 0x80
 80041cc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80041d6:	2301      	movs	r3, #1
 80041d8:	e052      	b.n	8004280 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	681a      	ldr	r2, [r3, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f022 0216 	bic.w	r2, r2, #22
 80041e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	695a      	ldr	r2, [r3, #20]
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80041f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d103      	bne.n	800420a <HAL_DMA_Abort+0x62>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004206:	2b00      	cmp	r3, #0
 8004208:	d007      	beq.n	800421a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f022 0208 	bic.w	r2, r2, #8
 8004218:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	681a      	ldr	r2, [r3, #0]
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f022 0201 	bic.w	r2, r2, #1
 8004228:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800422a:	e013      	b.n	8004254 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800422c:	f7ff fb42 	bl	80038b4 <HAL_GetTick>
 8004230:	4602      	mov	r2, r0
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	1ad3      	subs	r3, r2, r3
 8004236:	2b05      	cmp	r3, #5
 8004238:	d90c      	bls.n	8004254 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	2220      	movs	r2, #32
 800423e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	2200      	movs	r2, #0
 8004244:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2203      	movs	r2, #3
 800424c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e015      	b.n	8004280 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	f003 0301 	and.w	r3, r3, #1
 800425e:	2b00      	cmp	r3, #0
 8004260:	d1e4      	bne.n	800422c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004266:	223f      	movs	r2, #63	; 0x3f
 8004268:	409a      	lsls	r2, r3
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2200      	movs	r2, #0
 8004272:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2201      	movs	r2, #1
 800427a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800427e:	2300      	movs	r3, #0
}
 8004280:	4618      	mov	r0, r3
 8004282:	3710      	adds	r7, #16
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}

08004288 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004288:	b480      	push	{r7}
 800428a:	b083      	sub	sp, #12
 800428c:	af00      	add	r7, sp, #0
 800428e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004296:	b2db      	uxtb	r3, r3
 8004298:	2b02      	cmp	r3, #2
 800429a:	d004      	beq.n	80042a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2280      	movs	r2, #128	; 0x80
 80042a0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042a2:	2301      	movs	r3, #1
 80042a4:	e00c      	b.n	80042c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2205      	movs	r2, #5
 80042aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f022 0201 	bic.w	r2, r2, #1
 80042bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80042be:	2300      	movs	r3, #0
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	370c      	adds	r7, #12
 80042c4:	46bd      	mov	sp, r7
 80042c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ca:	4770      	bx	lr

080042cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80042cc:	b580      	push	{r7, lr}
 80042ce:	b086      	sub	sp, #24
 80042d0:	af00      	add	r7, sp, #0
 80042d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80042d4:	2300      	movs	r3, #0
 80042d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80042d8:	4b92      	ldr	r3, [pc, #584]	; (8004524 <HAL_DMA_IRQHandler+0x258>)
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	4a92      	ldr	r2, [pc, #584]	; (8004528 <HAL_DMA_IRQHandler+0x25c>)
 80042de:	fba2 2303 	umull	r2, r3, r2, r3
 80042e2:	0a9b      	lsrs	r3, r3, #10
 80042e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80042ec:	693b      	ldr	r3, [r7, #16]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042f6:	2208      	movs	r2, #8
 80042f8:	409a      	lsls	r2, r3
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	4013      	ands	r3, r2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d01a      	beq.n	8004338 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f003 0304 	and.w	r3, r3, #4
 800430c:	2b00      	cmp	r3, #0
 800430e:	d013      	beq.n	8004338 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0204 	bic.w	r2, r2, #4
 800431e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004324:	2208      	movs	r2, #8
 8004326:	409a      	lsls	r2, r3
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	f043 0201 	orr.w	r2, r3, #1
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800433c:	2201      	movs	r2, #1
 800433e:	409a      	lsls	r2, r3
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	4013      	ands	r3, r2
 8004344:	2b00      	cmp	r3, #0
 8004346:	d012      	beq.n	800436e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	695b      	ldr	r3, [r3, #20]
 800434e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004352:	2b00      	cmp	r3, #0
 8004354:	d00b      	beq.n	800436e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800435a:	2201      	movs	r2, #1
 800435c:	409a      	lsls	r2, r3
 800435e:	693b      	ldr	r3, [r7, #16]
 8004360:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004366:	f043 0202 	orr.w	r2, r3, #2
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004372:	2204      	movs	r2, #4
 8004374:	409a      	lsls	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4013      	ands	r3, r2
 800437a:	2b00      	cmp	r3, #0
 800437c:	d012      	beq.n	80043a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f003 0302 	and.w	r3, r3, #2
 8004388:	2b00      	cmp	r3, #0
 800438a:	d00b      	beq.n	80043a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004390:	2204      	movs	r2, #4
 8004392:	409a      	lsls	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439c:	f043 0204 	orr.w	r2, r3, #4
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043a8:	2210      	movs	r2, #16
 80043aa:	409a      	lsls	r2, r3
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4013      	ands	r3, r2
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d043      	beq.n	800443c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f003 0308 	and.w	r3, r3, #8
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d03c      	beq.n	800443c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043c6:	2210      	movs	r2, #16
 80043c8:	409a      	lsls	r2, r3
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d018      	beq.n	800440e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d108      	bne.n	80043fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d024      	beq.n	800443c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043f6:	6878      	ldr	r0, [r7, #4]
 80043f8:	4798      	blx	r3
 80043fa:	e01f      	b.n	800443c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004400:	2b00      	cmp	r3, #0
 8004402:	d01b      	beq.n	800443c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004408:	6878      	ldr	r0, [r7, #4]
 800440a:	4798      	blx	r3
 800440c:	e016      	b.n	800443c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004418:	2b00      	cmp	r3, #0
 800441a:	d107      	bne.n	800442c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0208 	bic.w	r2, r2, #8
 800442a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004430:	2b00      	cmp	r3, #0
 8004432:	d003      	beq.n	800443c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004438:	6878      	ldr	r0, [r7, #4]
 800443a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004440:	2220      	movs	r2, #32
 8004442:	409a      	lsls	r2, r3
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	4013      	ands	r3, r2
 8004448:	2b00      	cmp	r3, #0
 800444a:	f000 808e 	beq.w	800456a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	f003 0310 	and.w	r3, r3, #16
 8004458:	2b00      	cmp	r3, #0
 800445a:	f000 8086 	beq.w	800456a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004462:	2220      	movs	r2, #32
 8004464:	409a      	lsls	r2, r3
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b05      	cmp	r3, #5
 8004474:	d136      	bne.n	80044e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f022 0216 	bic.w	r2, r2, #22
 8004484:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	695a      	ldr	r2, [r3, #20]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004494:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800449a:	2b00      	cmp	r3, #0
 800449c:	d103      	bne.n	80044a6 <HAL_DMA_IRQHandler+0x1da>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d007      	beq.n	80044b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f022 0208 	bic.w	r2, r2, #8
 80044b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ba:	223f      	movs	r2, #63	; 0x3f
 80044bc:	409a      	lsls	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2200      	movs	r2, #0
 80044c6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d07d      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	4798      	blx	r3
        }
        return;
 80044e2:	e078      	b.n	80045d6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d01c      	beq.n	800452c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d108      	bne.n	8004512 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004504:	2b00      	cmp	r3, #0
 8004506:	d030      	beq.n	800456a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	4798      	blx	r3
 8004510:	e02b      	b.n	800456a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004516:	2b00      	cmp	r3, #0
 8004518:	d027      	beq.n	800456a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800451e:	6878      	ldr	r0, [r7, #4]
 8004520:	4798      	blx	r3
 8004522:	e022      	b.n	800456a <HAL_DMA_IRQHandler+0x29e>
 8004524:	200001d4 	.word	0x200001d4
 8004528:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004536:	2b00      	cmp	r3, #0
 8004538:	d10f      	bne.n	800455a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f022 0210 	bic.w	r2, r2, #16
 8004548:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	2201      	movs	r2, #1
 8004556:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	2b00      	cmp	r3, #0
 8004570:	d032      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004576:	f003 0301 	and.w	r3, r3, #1
 800457a:	2b00      	cmp	r3, #0
 800457c:	d022      	beq.n	80045c4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	2205      	movs	r2, #5
 8004582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681a      	ldr	r2, [r3, #0]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f022 0201 	bic.w	r2, r2, #1
 8004594:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	3301      	adds	r3, #1
 800459a:	60bb      	str	r3, [r7, #8]
 800459c:	697a      	ldr	r2, [r7, #20]
 800459e:	429a      	cmp	r2, r3
 80045a0:	d307      	bcc.n	80045b2 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f003 0301 	and.w	r3, r3, #1
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f2      	bne.n	8004596 <HAL_DMA_IRQHandler+0x2ca>
 80045b0:	e000      	b.n	80045b4 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80045b2:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2200      	movs	r2, #0
 80045b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d005      	beq.n	80045d8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
 80045d4:	e000      	b.n	80045d8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80045d6:	bf00      	nop
    }
  }
}
 80045d8:	3718      	adds	r7, #24
 80045da:	46bd      	mov	sp, r7
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	bf00      	nop

080045e0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b083      	sub	sp, #12
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	370c      	adds	r7, #12
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	60b9      	str	r1, [r7, #8]
 8004602:	607a      	str	r2, [r7, #4]
 8004604:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	68fb      	ldr	r3, [r7, #12]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004614:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	683a      	ldr	r2, [r7, #0]
 800461c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	2b40      	cmp	r3, #64	; 0x40
 8004624:	d108      	bne.n	8004638 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	68ba      	ldr	r2, [r7, #8]
 8004634:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004636:	e007      	b.n	8004648 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	68ba      	ldr	r2, [r7, #8]
 800463e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	687a      	ldr	r2, [r7, #4]
 8004646:	60da      	str	r2, [r3, #12]
}
 8004648:	bf00      	nop
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	681b      	ldr	r3, [r3, #0]
 8004660:	b2db      	uxtb	r3, r3
 8004662:	3b10      	subs	r3, #16
 8004664:	4a14      	ldr	r2, [pc, #80]	; (80046b8 <DMA_CalcBaseAndBitshift+0x64>)
 8004666:	fba2 2303 	umull	r2, r3, r2, r3
 800466a:	091b      	lsrs	r3, r3, #4
 800466c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800466e:	4a13      	ldr	r2, [pc, #76]	; (80046bc <DMA_CalcBaseAndBitshift+0x68>)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	4413      	add	r3, r2
 8004674:	781b      	ldrb	r3, [r3, #0]
 8004676:	461a      	mov	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2b03      	cmp	r3, #3
 8004680:	d909      	bls.n	8004696 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800468a:	f023 0303 	bic.w	r3, r3, #3
 800468e:	1d1a      	adds	r2, r3, #4
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	659a      	str	r2, [r3, #88]	; 0x58
 8004694:	e007      	b.n	80046a6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800469e:	f023 0303 	bic.w	r3, r3, #3
 80046a2:	687a      	ldr	r2, [r7, #4]
 80046a4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr
 80046b6:	bf00      	nop
 80046b8:	aaaaaaab 	.word	0xaaaaaaab
 80046bc:	08008fec 	.word	0x08008fec

080046c0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80046c8:	2300      	movs	r3, #0
 80046ca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046d0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	699b      	ldr	r3, [r3, #24]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d11f      	bne.n	800471a <DMA_CheckFifoParam+0x5a>
 80046da:	68bb      	ldr	r3, [r7, #8]
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d856      	bhi.n	800478e <DMA_CheckFifoParam+0xce>
 80046e0:	a201      	add	r2, pc, #4	; (adr r2, 80046e8 <DMA_CheckFifoParam+0x28>)
 80046e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046e6:	bf00      	nop
 80046e8:	080046f9 	.word	0x080046f9
 80046ec:	0800470b 	.word	0x0800470b
 80046f0:	080046f9 	.word	0x080046f9
 80046f4:	0800478f 	.word	0x0800478f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046fc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004700:	2b00      	cmp	r3, #0
 8004702:	d046      	beq.n	8004792 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004704:	2301      	movs	r3, #1
 8004706:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004708:	e043      	b.n	8004792 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800470e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004712:	d140      	bne.n	8004796 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004718:	e03d      	b.n	8004796 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004722:	d121      	bne.n	8004768 <DMA_CheckFifoParam+0xa8>
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	2b03      	cmp	r3, #3
 8004728:	d837      	bhi.n	800479a <DMA_CheckFifoParam+0xda>
 800472a:	a201      	add	r2, pc, #4	; (adr r2, 8004730 <DMA_CheckFifoParam+0x70>)
 800472c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004730:	08004741 	.word	0x08004741
 8004734:	08004747 	.word	0x08004747
 8004738:	08004741 	.word	0x08004741
 800473c:	08004759 	.word	0x08004759
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004740:	2301      	movs	r3, #1
 8004742:	73fb      	strb	r3, [r7, #15]
      break;
 8004744:	e030      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800474a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800474e:	2b00      	cmp	r3, #0
 8004750:	d025      	beq.n	800479e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004756:	e022      	b.n	800479e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004760:	d11f      	bne.n	80047a2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004762:	2301      	movs	r3, #1
 8004764:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004766:	e01c      	b.n	80047a2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004768:	68bb      	ldr	r3, [r7, #8]
 800476a:	2b02      	cmp	r3, #2
 800476c:	d903      	bls.n	8004776 <DMA_CheckFifoParam+0xb6>
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	2b03      	cmp	r3, #3
 8004772:	d003      	beq.n	800477c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004774:	e018      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	73fb      	strb	r3, [r7, #15]
      break;
 800477a:	e015      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004780:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004784:	2b00      	cmp	r3, #0
 8004786:	d00e      	beq.n	80047a6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004788:	2301      	movs	r3, #1
 800478a:	73fb      	strb	r3, [r7, #15]
      break;
 800478c:	e00b      	b.n	80047a6 <DMA_CheckFifoParam+0xe6>
      break;
 800478e:	bf00      	nop
 8004790:	e00a      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004792:	bf00      	nop
 8004794:	e008      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      break;
 8004796:	bf00      	nop
 8004798:	e006      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      break;
 800479a:	bf00      	nop
 800479c:	e004      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      break;
 800479e:	bf00      	nop
 80047a0:	e002      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      break;   
 80047a2:	bf00      	nop
 80047a4:	e000      	b.n	80047a8 <DMA_CheckFifoParam+0xe8>
      break;
 80047a6:	bf00      	nop
    }
  } 
  
  return status; 
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3714      	adds	r7, #20
 80047ae:	46bd      	mov	sp, r7
 80047b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b4:	4770      	bx	lr
 80047b6:	bf00      	nop

080047b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047b8:	b480      	push	{r7}
 80047ba:	b089      	sub	sp, #36	; 0x24
 80047bc:	af00      	add	r7, sp, #0
 80047be:	6078      	str	r0, [r7, #4]
 80047c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80047c2:	2300      	movs	r3, #0
 80047c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80047c6:	2300      	movs	r3, #0
 80047c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80047ca:	2300      	movs	r3, #0
 80047cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80047ce:	2300      	movs	r3, #0
 80047d0:	61fb      	str	r3, [r7, #28]
 80047d2:	e16b      	b.n	8004aac <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80047d4:	2201      	movs	r2, #1
 80047d6:	69fb      	ldr	r3, [r7, #28]
 80047d8:	fa02 f303 	lsl.w	r3, r2, r3
 80047dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	697a      	ldr	r2, [r7, #20]
 80047e4:	4013      	ands	r3, r2
 80047e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80047e8:	693a      	ldr	r2, [r7, #16]
 80047ea:	697b      	ldr	r3, [r7, #20]
 80047ec:	429a      	cmp	r2, r3
 80047ee:	f040 815a 	bne.w	8004aa6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047f2:	683b      	ldr	r3, [r7, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	f003 0303 	and.w	r3, r3, #3
 80047fa:	2b01      	cmp	r3, #1
 80047fc:	d005      	beq.n	800480a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004806:	2b02      	cmp	r3, #2
 8004808:	d130      	bne.n	800486c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	689b      	ldr	r3, [r3, #8]
 800480e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004810:	69fb      	ldr	r3, [r7, #28]
 8004812:	005b      	lsls	r3, r3, #1
 8004814:	2203      	movs	r2, #3
 8004816:	fa02 f303 	lsl.w	r3, r2, r3
 800481a:	43db      	mvns	r3, r3
 800481c:	69ba      	ldr	r2, [r7, #24]
 800481e:	4013      	ands	r3, r2
 8004820:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	68da      	ldr	r2, [r3, #12]
 8004826:	69fb      	ldr	r3, [r7, #28]
 8004828:	005b      	lsls	r3, r3, #1
 800482a:	fa02 f303 	lsl.w	r3, r2, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4313      	orrs	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	69ba      	ldr	r2, [r7, #24]
 8004838:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004840:	2201      	movs	r2, #1
 8004842:	69fb      	ldr	r3, [r7, #28]
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	43db      	mvns	r3, r3
 800484a:	69ba      	ldr	r2, [r7, #24]
 800484c:	4013      	ands	r3, r2
 800484e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8004850:	683b      	ldr	r3, [r7, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	091b      	lsrs	r3, r3, #4
 8004856:	f003 0201 	and.w	r2, r3, #1
 800485a:	69fb      	ldr	r3, [r7, #28]
 800485c:	fa02 f303 	lsl.w	r3, r2, r3
 8004860:	69ba      	ldr	r2, [r7, #24]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	f003 0303 	and.w	r3, r3, #3
 8004874:	2b03      	cmp	r3, #3
 8004876:	d017      	beq.n	80048a8 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800487e:	69fb      	ldr	r3, [r7, #28]
 8004880:	005b      	lsls	r3, r3, #1
 8004882:	2203      	movs	r2, #3
 8004884:	fa02 f303 	lsl.w	r3, r2, r3
 8004888:	43db      	mvns	r3, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4013      	ands	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004890:	683b      	ldr	r3, [r7, #0]
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	005b      	lsls	r3, r3, #1
 8004898:	fa02 f303 	lsl.w	r3, r2, r3
 800489c:	69ba      	ldr	r2, [r7, #24]
 800489e:	4313      	orrs	r3, r2
 80048a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	69ba      	ldr	r2, [r7, #24]
 80048a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f003 0303 	and.w	r3, r3, #3
 80048b0:	2b02      	cmp	r3, #2
 80048b2:	d123      	bne.n	80048fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048b4:	69fb      	ldr	r3, [r7, #28]
 80048b6:	08da      	lsrs	r2, r3, #3
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	3208      	adds	r2, #8
 80048bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80048c2:	69fb      	ldr	r3, [r7, #28]
 80048c4:	f003 0307 	and.w	r3, r3, #7
 80048c8:	009b      	lsls	r3, r3, #2
 80048ca:	220f      	movs	r2, #15
 80048cc:	fa02 f303 	lsl.w	r3, r2, r3
 80048d0:	43db      	mvns	r3, r3
 80048d2:	69ba      	ldr	r2, [r7, #24]
 80048d4:	4013      	ands	r3, r2
 80048d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80048d8:	683b      	ldr	r3, [r7, #0]
 80048da:	691a      	ldr	r2, [r3, #16]
 80048dc:	69fb      	ldr	r3, [r7, #28]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	fa02 f303 	lsl.w	r3, r2, r3
 80048e8:	69ba      	ldr	r2, [r7, #24]
 80048ea:	4313      	orrs	r3, r2
 80048ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80048ee:	69fb      	ldr	r3, [r7, #28]
 80048f0:	08da      	lsrs	r2, r3, #3
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	3208      	adds	r2, #8
 80048f6:	69b9      	ldr	r1, [r7, #24]
 80048f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	005b      	lsls	r3, r3, #1
 8004906:	2203      	movs	r2, #3
 8004908:	fa02 f303 	lsl.w	r3, r2, r3
 800490c:	43db      	mvns	r3, r3
 800490e:	69ba      	ldr	r2, [r7, #24]
 8004910:	4013      	ands	r3, r2
 8004912:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	f003 0203 	and.w	r2, r3, #3
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	fa02 f303 	lsl.w	r3, r2, r3
 8004924:	69ba      	ldr	r2, [r7, #24]
 8004926:	4313      	orrs	r3, r2
 8004928:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	69ba      	ldr	r2, [r7, #24]
 800492e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004930:	683b      	ldr	r3, [r7, #0]
 8004932:	685b      	ldr	r3, [r3, #4]
 8004934:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004938:	2b00      	cmp	r3, #0
 800493a:	f000 80b4 	beq.w	8004aa6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800493e:	2300      	movs	r3, #0
 8004940:	60fb      	str	r3, [r7, #12]
 8004942:	4b60      	ldr	r3, [pc, #384]	; (8004ac4 <HAL_GPIO_Init+0x30c>)
 8004944:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004946:	4a5f      	ldr	r2, [pc, #380]	; (8004ac4 <HAL_GPIO_Init+0x30c>)
 8004948:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800494c:	6453      	str	r3, [r2, #68]	; 0x44
 800494e:	4b5d      	ldr	r3, [pc, #372]	; (8004ac4 <HAL_GPIO_Init+0x30c>)
 8004950:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004952:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004956:	60fb      	str	r3, [r7, #12]
 8004958:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800495a:	4a5b      	ldr	r2, [pc, #364]	; (8004ac8 <HAL_GPIO_Init+0x310>)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	089b      	lsrs	r3, r3, #2
 8004960:	3302      	adds	r3, #2
 8004962:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004966:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004968:	69fb      	ldr	r3, [r7, #28]
 800496a:	f003 0303 	and.w	r3, r3, #3
 800496e:	009b      	lsls	r3, r3, #2
 8004970:	220f      	movs	r2, #15
 8004972:	fa02 f303 	lsl.w	r3, r2, r3
 8004976:	43db      	mvns	r3, r3
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	4013      	ands	r3, r2
 800497c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a52      	ldr	r2, [pc, #328]	; (8004acc <HAL_GPIO_Init+0x314>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d02b      	beq.n	80049de <HAL_GPIO_Init+0x226>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	4a51      	ldr	r2, [pc, #324]	; (8004ad0 <HAL_GPIO_Init+0x318>)
 800498a:	4293      	cmp	r3, r2
 800498c:	d025      	beq.n	80049da <HAL_GPIO_Init+0x222>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a50      	ldr	r2, [pc, #320]	; (8004ad4 <HAL_GPIO_Init+0x31c>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d01f      	beq.n	80049d6 <HAL_GPIO_Init+0x21e>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a4f      	ldr	r2, [pc, #316]	; (8004ad8 <HAL_GPIO_Init+0x320>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d019      	beq.n	80049d2 <HAL_GPIO_Init+0x21a>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a4e      	ldr	r2, [pc, #312]	; (8004adc <HAL_GPIO_Init+0x324>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d013      	beq.n	80049ce <HAL_GPIO_Init+0x216>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a4d      	ldr	r2, [pc, #308]	; (8004ae0 <HAL_GPIO_Init+0x328>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d00d      	beq.n	80049ca <HAL_GPIO_Init+0x212>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a4c      	ldr	r2, [pc, #304]	; (8004ae4 <HAL_GPIO_Init+0x32c>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d007      	beq.n	80049c6 <HAL_GPIO_Init+0x20e>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a4b      	ldr	r2, [pc, #300]	; (8004ae8 <HAL_GPIO_Init+0x330>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d101      	bne.n	80049c2 <HAL_GPIO_Init+0x20a>
 80049be:	2307      	movs	r3, #7
 80049c0:	e00e      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049c2:	2308      	movs	r3, #8
 80049c4:	e00c      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049c6:	2306      	movs	r3, #6
 80049c8:	e00a      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049ca:	2305      	movs	r3, #5
 80049cc:	e008      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049ce:	2304      	movs	r3, #4
 80049d0:	e006      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049d2:	2303      	movs	r3, #3
 80049d4:	e004      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049d6:	2302      	movs	r3, #2
 80049d8:	e002      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049da:	2301      	movs	r3, #1
 80049dc:	e000      	b.n	80049e0 <HAL_GPIO_Init+0x228>
 80049de:	2300      	movs	r3, #0
 80049e0:	69fa      	ldr	r2, [r7, #28]
 80049e2:	f002 0203 	and.w	r2, r2, #3
 80049e6:	0092      	lsls	r2, r2, #2
 80049e8:	4093      	lsls	r3, r2
 80049ea:	69ba      	ldr	r2, [r7, #24]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049f0:	4935      	ldr	r1, [pc, #212]	; (8004ac8 <HAL_GPIO_Init+0x310>)
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	089b      	lsrs	r3, r3, #2
 80049f6:	3302      	adds	r3, #2
 80049f8:	69ba      	ldr	r2, [r7, #24]
 80049fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80049fe:	4b3b      	ldr	r3, [pc, #236]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a04:	693b      	ldr	r3, [r7, #16]
 8004a06:	43db      	mvns	r3, r3
 8004a08:	69ba      	ldr	r2, [r7, #24]
 8004a0a:	4013      	ands	r3, r2
 8004a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d003      	beq.n	8004a22 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a1a:	69ba      	ldr	r2, [r7, #24]
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a22:	4a32      	ldr	r2, [pc, #200]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004a24:	69bb      	ldr	r3, [r7, #24]
 8004a26:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a28:	4b30      	ldr	r3, [pc, #192]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004a2a:	685b      	ldr	r3, [r3, #4]
 8004a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a2e:	693b      	ldr	r3, [r7, #16]
 8004a30:	43db      	mvns	r3, r3
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	4013      	ands	r3, r2
 8004a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	685b      	ldr	r3, [r3, #4]
 8004a3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d003      	beq.n	8004a4c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004a44:	69ba      	ldr	r2, [r7, #24]
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a4c:	4a27      	ldr	r2, [pc, #156]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a52:	4b26      	ldr	r3, [pc, #152]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a58:	693b      	ldr	r3, [r7, #16]
 8004a5a:	43db      	mvns	r3, r3
 8004a5c:	69ba      	ldr	r2, [r7, #24]
 8004a5e:	4013      	ands	r3, r2
 8004a60:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d003      	beq.n	8004a76 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004a6e:	69ba      	ldr	r2, [r7, #24]
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	4313      	orrs	r3, r2
 8004a74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a76:	4a1d      	ldr	r2, [pc, #116]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004a78:	69bb      	ldr	r3, [r7, #24]
 8004a7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a7c:	4b1b      	ldr	r3, [pc, #108]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004a7e:	68db      	ldr	r3, [r3, #12]
 8004a80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	43db      	mvns	r3, r3
 8004a86:	69ba      	ldr	r2, [r7, #24]
 8004a88:	4013      	ands	r3, r2
 8004a8a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	685b      	ldr	r3, [r3, #4]
 8004a90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d003      	beq.n	8004aa0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004a98:	69ba      	ldr	r2, [r7, #24]
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	4313      	orrs	r3, r2
 8004a9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aa0:	4a12      	ldr	r2, [pc, #72]	; (8004aec <HAL_GPIO_Init+0x334>)
 8004aa2:	69bb      	ldr	r3, [r7, #24]
 8004aa4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aa6:	69fb      	ldr	r3, [r7, #28]
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	61fb      	str	r3, [r7, #28]
 8004aac:	69fb      	ldr	r3, [r7, #28]
 8004aae:	2b0f      	cmp	r3, #15
 8004ab0:	f67f ae90 	bls.w	80047d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004ab4:	bf00      	nop
 8004ab6:	bf00      	nop
 8004ab8:	3724      	adds	r7, #36	; 0x24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac0:	4770      	bx	lr
 8004ac2:	bf00      	nop
 8004ac4:	40023800 	.word	0x40023800
 8004ac8:	40013800 	.word	0x40013800
 8004acc:	40020000 	.word	0x40020000
 8004ad0:	40020400 	.word	0x40020400
 8004ad4:	40020800 	.word	0x40020800
 8004ad8:	40020c00 	.word	0x40020c00
 8004adc:	40021000 	.word	0x40021000
 8004ae0:	40021400 	.word	0x40021400
 8004ae4:	40021800 	.word	0x40021800
 8004ae8:	40021c00 	.word	0x40021c00
 8004aec:	40013c00 	.word	0x40013c00

08004af0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
 8004af8:	460b      	mov	r3, r1
 8004afa:	807b      	strh	r3, [r7, #2]
 8004afc:	4613      	mov	r3, r2
 8004afe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b00:	787b      	ldrb	r3, [r7, #1]
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d003      	beq.n	8004b0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b0c:	e003      	b.n	8004b16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b0e:	887b      	ldrh	r3, [r7, #2]
 8004b10:	041a      	lsls	r2, r3, #16
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	619a      	str	r2, [r3, #24]
}
 8004b16:	bf00      	nop
 8004b18:	370c      	adds	r7, #12
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b20:	4770      	bx	lr
	...

08004b24 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b24:	b580      	push	{r7, lr}
 8004b26:	b086      	sub	sp, #24
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d101      	bne.n	8004b36 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e264      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f003 0301 	and.w	r3, r3, #1
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d075      	beq.n	8004c2e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b42:	4ba3      	ldr	r3, [pc, #652]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	f003 030c 	and.w	r3, r3, #12
 8004b4a:	2b04      	cmp	r3, #4
 8004b4c:	d00c      	beq.n	8004b68 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b4e:	4ba0      	ldr	r3, [pc, #640]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b56:	2b08      	cmp	r3, #8
 8004b58:	d112      	bne.n	8004b80 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b5a:	4b9d      	ldr	r3, [pc, #628]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b62:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b66:	d10b      	bne.n	8004b80 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b68:	4b99      	ldr	r3, [pc, #612]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d05b      	beq.n	8004c2c <HAL_RCC_OscConfig+0x108>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d157      	bne.n	8004c2c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004b7c:	2301      	movs	r3, #1
 8004b7e:	e23f      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b88:	d106      	bne.n	8004b98 <HAL_RCC_OscConfig+0x74>
 8004b8a:	4b91      	ldr	r3, [pc, #580]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4a90      	ldr	r2, [pc, #576]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004b90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b94:	6013      	str	r3, [r2, #0]
 8004b96:	e01d      	b.n	8004bd4 <HAL_RCC_OscConfig+0xb0>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004ba0:	d10c      	bne.n	8004bbc <HAL_RCC_OscConfig+0x98>
 8004ba2:	4b8b      	ldr	r3, [pc, #556]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a8a      	ldr	r2, [pc, #552]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004ba8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bac:	6013      	str	r3, [r2, #0]
 8004bae:	4b88      	ldr	r3, [pc, #544]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	4a87      	ldr	r2, [pc, #540]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004bb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	e00b      	b.n	8004bd4 <HAL_RCC_OscConfig+0xb0>
 8004bbc:	4b84      	ldr	r3, [pc, #528]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	4a83      	ldr	r2, [pc, #524]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004bc2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bc6:	6013      	str	r3, [r2, #0]
 8004bc8:	4b81      	ldr	r3, [pc, #516]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a80      	ldr	r2, [pc, #512]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004bce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bd2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d013      	beq.n	8004c04 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004bdc:	f7fe fe6a 	bl	80038b4 <HAL_GetTick>
 8004be0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004be2:	e008      	b.n	8004bf6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004be4:	f7fe fe66 	bl	80038b4 <HAL_GetTick>
 8004be8:	4602      	mov	r2, r0
 8004bea:	693b      	ldr	r3, [r7, #16]
 8004bec:	1ad3      	subs	r3, r2, r3
 8004bee:	2b64      	cmp	r3, #100	; 0x64
 8004bf0:	d901      	bls.n	8004bf6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004bf2:	2303      	movs	r3, #3
 8004bf4:	e204      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	4b76      	ldr	r3, [pc, #472]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d0f0      	beq.n	8004be4 <HAL_RCC_OscConfig+0xc0>
 8004c02:	e014      	b.n	8004c2e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c04:	f7fe fe56 	bl	80038b4 <HAL_GetTick>
 8004c08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c0a:	e008      	b.n	8004c1e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c0c:	f7fe fe52 	bl	80038b4 <HAL_GetTick>
 8004c10:	4602      	mov	r2, r0
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	1ad3      	subs	r3, r2, r3
 8004c16:	2b64      	cmp	r3, #100	; 0x64
 8004c18:	d901      	bls.n	8004c1e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c1a:	2303      	movs	r3, #3
 8004c1c:	e1f0      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c1e:	4b6c      	ldr	r3, [pc, #432]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d1f0      	bne.n	8004c0c <HAL_RCC_OscConfig+0xe8>
 8004c2a:	e000      	b.n	8004c2e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	f003 0302 	and.w	r3, r3, #2
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d063      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c3a:	4b65      	ldr	r3, [pc, #404]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	f003 030c 	and.w	r3, r3, #12
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d00b      	beq.n	8004c5e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c46:	4b62      	ldr	r3, [pc, #392]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004c48:	689b      	ldr	r3, [r3, #8]
 8004c4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c4e:	2b08      	cmp	r3, #8
 8004c50:	d11c      	bne.n	8004c8c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c52:	4b5f      	ldr	r3, [pc, #380]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004c54:	685b      	ldr	r3, [r3, #4]
 8004c56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d116      	bne.n	8004c8c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c5e:	4b5c      	ldr	r3, [pc, #368]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d005      	beq.n	8004c76 <HAL_RCC_OscConfig+0x152>
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	68db      	ldr	r3, [r3, #12]
 8004c6e:	2b01      	cmp	r3, #1
 8004c70:	d001      	beq.n	8004c76 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c72:	2301      	movs	r3, #1
 8004c74:	e1c4      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c76:	4b56      	ldr	r3, [pc, #344]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	691b      	ldr	r3, [r3, #16]
 8004c82:	00db      	lsls	r3, r3, #3
 8004c84:	4952      	ldr	r1, [pc, #328]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004c86:	4313      	orrs	r3, r2
 8004c88:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	e03a      	b.n	8004d02 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d020      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c94:	4b4f      	ldr	r3, [pc, #316]	; (8004dd4 <HAL_RCC_OscConfig+0x2b0>)
 8004c96:	2201      	movs	r2, #1
 8004c98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c9a:	f7fe fe0b 	bl	80038b4 <HAL_GetTick>
 8004c9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ca0:	e008      	b.n	8004cb4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ca2:	f7fe fe07 	bl	80038b4 <HAL_GetTick>
 8004ca6:	4602      	mov	r2, r0
 8004ca8:	693b      	ldr	r3, [r7, #16]
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	2b02      	cmp	r3, #2
 8004cae:	d901      	bls.n	8004cb4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e1a5      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004cb4:	4b46      	ldr	r3, [pc, #280]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f003 0302 	and.w	r3, r3, #2
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d0f0      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cc0:	4b43      	ldr	r3, [pc, #268]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	691b      	ldr	r3, [r3, #16]
 8004ccc:	00db      	lsls	r3, r3, #3
 8004cce:	4940      	ldr	r1, [pc, #256]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	600b      	str	r3, [r1, #0]
 8004cd4:	e015      	b.n	8004d02 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004cd6:	4b3f      	ldr	r3, [pc, #252]	; (8004dd4 <HAL_RCC_OscConfig+0x2b0>)
 8004cd8:	2200      	movs	r2, #0
 8004cda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cdc:	f7fe fdea 	bl	80038b4 <HAL_GetTick>
 8004ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ce2:	e008      	b.n	8004cf6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004ce4:	f7fe fde6 	bl	80038b4 <HAL_GetTick>
 8004ce8:	4602      	mov	r2, r0
 8004cea:	693b      	ldr	r3, [r7, #16]
 8004cec:	1ad3      	subs	r3, r2, r3
 8004cee:	2b02      	cmp	r3, #2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e184      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004cf6:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d1f0      	bne.n	8004ce4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	f003 0308 	and.w	r3, r3, #8
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d030      	beq.n	8004d70 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	695b      	ldr	r3, [r3, #20]
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d016      	beq.n	8004d44 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d16:	4b30      	ldr	r3, [pc, #192]	; (8004dd8 <HAL_RCC_OscConfig+0x2b4>)
 8004d18:	2201      	movs	r2, #1
 8004d1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d1c:	f7fe fdca 	bl	80038b4 <HAL_GetTick>
 8004d20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d22:	e008      	b.n	8004d36 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d24:	f7fe fdc6 	bl	80038b4 <HAL_GetTick>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	1ad3      	subs	r3, r2, r3
 8004d2e:	2b02      	cmp	r3, #2
 8004d30:	d901      	bls.n	8004d36 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d32:	2303      	movs	r3, #3
 8004d34:	e164      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d36:	4b26      	ldr	r3, [pc, #152]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004d38:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d3a:	f003 0302 	and.w	r3, r3, #2
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d0f0      	beq.n	8004d24 <HAL_RCC_OscConfig+0x200>
 8004d42:	e015      	b.n	8004d70 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d44:	4b24      	ldr	r3, [pc, #144]	; (8004dd8 <HAL_RCC_OscConfig+0x2b4>)
 8004d46:	2200      	movs	r2, #0
 8004d48:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d4a:	f7fe fdb3 	bl	80038b4 <HAL_GetTick>
 8004d4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d50:	e008      	b.n	8004d64 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d52:	f7fe fdaf 	bl	80038b4 <HAL_GetTick>
 8004d56:	4602      	mov	r2, r0
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	1ad3      	subs	r3, r2, r3
 8004d5c:	2b02      	cmp	r3, #2
 8004d5e:	d901      	bls.n	8004d64 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e14d      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d64:	4b1a      	ldr	r3, [pc, #104]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004d66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d68:	f003 0302 	and.w	r3, r3, #2
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d1f0      	bne.n	8004d52 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f003 0304 	and.w	r3, r3, #4
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	f000 80a0 	beq.w	8004ebe <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d82:	4b13      	ldr	r3, [pc, #76]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d10f      	bne.n	8004dae <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d8e:	2300      	movs	r3, #0
 8004d90:	60bb      	str	r3, [r7, #8]
 8004d92:	4b0f      	ldr	r3, [pc, #60]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	4a0e      	ldr	r2, [pc, #56]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004d98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d9c:	6413      	str	r3, [r2, #64]	; 0x40
 8004d9e:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCC_OscConfig+0x2ac>)
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004da6:	60bb      	str	r3, [r7, #8]
 8004da8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004daa:	2301      	movs	r3, #1
 8004dac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dae:	4b0b      	ldr	r3, [pc, #44]	; (8004ddc <HAL_RCC_OscConfig+0x2b8>)
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d121      	bne.n	8004dfe <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004dba:	4b08      	ldr	r3, [pc, #32]	; (8004ddc <HAL_RCC_OscConfig+0x2b8>)
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	4a07      	ldr	r2, [pc, #28]	; (8004ddc <HAL_RCC_OscConfig+0x2b8>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dc6:	f7fe fd75 	bl	80038b4 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004dcc:	e011      	b.n	8004df2 <HAL_RCC_OscConfig+0x2ce>
 8004dce:	bf00      	nop
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	42470000 	.word	0x42470000
 8004dd8:	42470e80 	.word	0x42470e80
 8004ddc:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004de0:	f7fe fd68 	bl	80038b4 <HAL_GetTick>
 8004de4:	4602      	mov	r2, r0
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	1ad3      	subs	r3, r2, r3
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e106      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004df2:	4b85      	ldr	r3, [pc, #532]	; (8005008 <HAL_RCC_OscConfig+0x4e4>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d0f0      	beq.n	8004de0 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	689b      	ldr	r3, [r3, #8]
 8004e02:	2b01      	cmp	r3, #1
 8004e04:	d106      	bne.n	8004e14 <HAL_RCC_OscConfig+0x2f0>
 8004e06:	4b81      	ldr	r3, [pc, #516]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0a:	4a80      	ldr	r2, [pc, #512]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e0c:	f043 0301 	orr.w	r3, r3, #1
 8004e10:	6713      	str	r3, [r2, #112]	; 0x70
 8004e12:	e01c      	b.n	8004e4e <HAL_RCC_OscConfig+0x32a>
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b05      	cmp	r3, #5
 8004e1a:	d10c      	bne.n	8004e36 <HAL_RCC_OscConfig+0x312>
 8004e1c:	4b7b      	ldr	r3, [pc, #492]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e20:	4a7a      	ldr	r2, [pc, #488]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e22:	f043 0304 	orr.w	r3, r3, #4
 8004e26:	6713      	str	r3, [r2, #112]	; 0x70
 8004e28:	4b78      	ldr	r3, [pc, #480]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e2c:	4a77      	ldr	r2, [pc, #476]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e2e:	f043 0301 	orr.w	r3, r3, #1
 8004e32:	6713      	str	r3, [r2, #112]	; 0x70
 8004e34:	e00b      	b.n	8004e4e <HAL_RCC_OscConfig+0x32a>
 8004e36:	4b75      	ldr	r3, [pc, #468]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e3a:	4a74      	ldr	r2, [pc, #464]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e3c:	f023 0301 	bic.w	r3, r3, #1
 8004e40:	6713      	str	r3, [r2, #112]	; 0x70
 8004e42:	4b72      	ldr	r3, [pc, #456]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a71      	ldr	r2, [pc, #452]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e48:	f023 0304 	bic.w	r3, r3, #4
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d015      	beq.n	8004e82 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e56:	f7fe fd2d 	bl	80038b4 <HAL_GetTick>
 8004e5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e5c:	e00a      	b.n	8004e74 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e5e:	f7fe fd29 	bl	80038b4 <HAL_GetTick>
 8004e62:	4602      	mov	r2, r0
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	1ad3      	subs	r3, r2, r3
 8004e68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d901      	bls.n	8004e74 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8004e70:	2303      	movs	r3, #3
 8004e72:	e0c5      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e74:	4b65      	ldr	r3, [pc, #404]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004e76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e78:	f003 0302 	and.w	r3, r3, #2
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d0ee      	beq.n	8004e5e <HAL_RCC_OscConfig+0x33a>
 8004e80:	e014      	b.n	8004eac <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004e82:	f7fe fd17 	bl	80038b4 <HAL_GetTick>
 8004e86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e88:	e00a      	b.n	8004ea0 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e8a:	f7fe fd13 	bl	80038b4 <HAL_GetTick>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	693b      	ldr	r3, [r7, #16]
 8004e92:	1ad3      	subs	r3, r2, r3
 8004e94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d901      	bls.n	8004ea0 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8004e9c:	2303      	movs	r3, #3
 8004e9e:	e0af      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ea0:	4b5a      	ldr	r3, [pc, #360]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004ea2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ea4:	f003 0302 	and.w	r3, r3, #2
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d1ee      	bne.n	8004e8a <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004eac:	7dfb      	ldrb	r3, [r7, #23]
 8004eae:	2b01      	cmp	r3, #1
 8004eb0:	d105      	bne.n	8004ebe <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004eb2:	4b56      	ldr	r3, [pc, #344]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb6:	4a55      	ldr	r2, [pc, #340]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004eb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ebc:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	f000 809b 	beq.w	8004ffe <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004ec8:	4b50      	ldr	r3, [pc, #320]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004eca:	689b      	ldr	r3, [r3, #8]
 8004ecc:	f003 030c 	and.w	r3, r3, #12
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d05c      	beq.n	8004f8e <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	699b      	ldr	r3, [r3, #24]
 8004ed8:	2b02      	cmp	r3, #2
 8004eda:	d141      	bne.n	8004f60 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004edc:	4b4c      	ldr	r3, [pc, #304]	; (8005010 <HAL_RCC_OscConfig+0x4ec>)
 8004ede:	2200      	movs	r2, #0
 8004ee0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ee2:	f7fe fce7 	bl	80038b4 <HAL_GetTick>
 8004ee6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ee8:	e008      	b.n	8004efc <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004eea:	f7fe fce3 	bl	80038b4 <HAL_GetTick>
 8004eee:	4602      	mov	r2, r0
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	1ad3      	subs	r3, r2, r3
 8004ef4:	2b02      	cmp	r3, #2
 8004ef6:	d901      	bls.n	8004efc <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8004ef8:	2303      	movs	r3, #3
 8004efa:	e081      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004efc:	4b43      	ldr	r3, [pc, #268]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d1f0      	bne.n	8004eea <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	69da      	ldr	r2, [r3, #28]
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a1b      	ldr	r3, [r3, #32]
 8004f10:	431a      	orrs	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	019b      	lsls	r3, r3, #6
 8004f18:	431a      	orrs	r2, r3
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f1e:	085b      	lsrs	r3, r3, #1
 8004f20:	3b01      	subs	r3, #1
 8004f22:	041b      	lsls	r3, r3, #16
 8004f24:	431a      	orrs	r2, r3
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f2a:	061b      	lsls	r3, r3, #24
 8004f2c:	4937      	ldr	r1, [pc, #220]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f32:	4b37      	ldr	r3, [pc, #220]	; (8005010 <HAL_RCC_OscConfig+0x4ec>)
 8004f34:	2201      	movs	r2, #1
 8004f36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f38:	f7fe fcbc 	bl	80038b4 <HAL_GetTick>
 8004f3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	e008      	b.n	8004f52 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f40:	f7fe fcb8 	bl	80038b4 <HAL_GetTick>
 8004f44:	4602      	mov	r2, r0
 8004f46:	693b      	ldr	r3, [r7, #16]
 8004f48:	1ad3      	subs	r3, r2, r3
 8004f4a:	2b02      	cmp	r3, #2
 8004f4c:	d901      	bls.n	8004f52 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8004f4e:	2303      	movs	r3, #3
 8004f50:	e056      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f52:	4b2e      	ldr	r3, [pc, #184]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d0f0      	beq.n	8004f40 <HAL_RCC_OscConfig+0x41c>
 8004f5e:	e04e      	b.n	8004ffe <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f60:	4b2b      	ldr	r3, [pc, #172]	; (8005010 <HAL_RCC_OscConfig+0x4ec>)
 8004f62:	2200      	movs	r2, #0
 8004f64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f66:	f7fe fca5 	bl	80038b4 <HAL_GetTick>
 8004f6a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f6c:	e008      	b.n	8004f80 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f6e:	f7fe fca1 	bl	80038b4 <HAL_GetTick>
 8004f72:	4602      	mov	r2, r0
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	1ad3      	subs	r3, r2, r3
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d901      	bls.n	8004f80 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8004f7c:	2303      	movs	r3, #3
 8004f7e:	e03f      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f80:	4b22      	ldr	r3, [pc, #136]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d1f0      	bne.n	8004f6e <HAL_RCC_OscConfig+0x44a>
 8004f8c:	e037      	b.n	8004ffe <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	2b01      	cmp	r3, #1
 8004f94:	d101      	bne.n	8004f9a <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e032      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004f9a:	4b1c      	ldr	r3, [pc, #112]	; (800500c <HAL_RCC_OscConfig+0x4e8>)
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	699b      	ldr	r3, [r3, #24]
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d028      	beq.n	8004ffa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fb2:	429a      	cmp	r2, r3
 8004fb4:	d121      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d11a      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fc4:	68fa      	ldr	r2, [r7, #12]
 8004fc6:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fca:	4013      	ands	r3, r2
 8004fcc:	687a      	ldr	r2, [r7, #4]
 8004fce:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fd0:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d111      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fe0:	085b      	lsrs	r3, r3, #1
 8004fe2:	3b01      	subs	r3, #1
 8004fe4:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004fe6:	429a      	cmp	r2, r3
 8004fe8:	d107      	bne.n	8004ffa <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fea:	68fb      	ldr	r3, [r7, #12]
 8004fec:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ff4:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ff6:	429a      	cmp	r2, r3
 8004ff8:	d001      	beq.n	8004ffe <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004ffa:	2301      	movs	r3, #1
 8004ffc:	e000      	b.n	8005000 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004ffe:	2300      	movs	r3, #0
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	40007000 	.word	0x40007000
 800500c:	40023800 	.word	0x40023800
 8005010:	42470060 	.word	0x42470060

08005014 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005014:	b580      	push	{r7, lr}
 8005016:	b084      	sub	sp, #16
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005024:	2301      	movs	r3, #1
 8005026:	e0cc      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005028:	4b68      	ldr	r3, [pc, #416]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f003 0307 	and.w	r3, r3, #7
 8005030:	683a      	ldr	r2, [r7, #0]
 8005032:	429a      	cmp	r2, r3
 8005034:	d90c      	bls.n	8005050 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005036:	4b65      	ldr	r3, [pc, #404]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005038:	683a      	ldr	r2, [r7, #0]
 800503a:	b2d2      	uxtb	r2, r2
 800503c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800503e:	4b63      	ldr	r3, [pc, #396]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	f003 0307 	and.w	r3, r3, #7
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	429a      	cmp	r2, r3
 800504a:	d001      	beq.n	8005050 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800504c:	2301      	movs	r3, #1
 800504e:	e0b8      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	f003 0302 	and.w	r3, r3, #2
 8005058:	2b00      	cmp	r3, #0
 800505a:	d020      	beq.n	800509e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0304 	and.w	r3, r3, #4
 8005064:	2b00      	cmp	r3, #0
 8005066:	d005      	beq.n	8005074 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005068:	4b59      	ldr	r3, [pc, #356]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800506a:	689b      	ldr	r3, [r3, #8]
 800506c:	4a58      	ldr	r2, [pc, #352]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800506e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005072:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	f003 0308 	and.w	r3, r3, #8
 800507c:	2b00      	cmp	r3, #0
 800507e:	d005      	beq.n	800508c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005080:	4b53      	ldr	r3, [pc, #332]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	4a52      	ldr	r2, [pc, #328]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005086:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800508a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800508c:	4b50      	ldr	r3, [pc, #320]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800508e:	689b      	ldr	r3, [r3, #8]
 8005090:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	494d      	ldr	r1, [pc, #308]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	4313      	orrs	r3, r2
 800509c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d044      	beq.n	8005134 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685b      	ldr	r3, [r3, #4]
 80050ae:	2b01      	cmp	r3, #1
 80050b0:	d107      	bne.n	80050c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050b2:	4b47      	ldr	r3, [pc, #284]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d119      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050be:	2301      	movs	r3, #1
 80050c0:	e07f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	685b      	ldr	r3, [r3, #4]
 80050c6:	2b02      	cmp	r3, #2
 80050c8:	d003      	beq.n	80050d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ce:	2b03      	cmp	r3, #3
 80050d0:	d107      	bne.n	80050e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050d2:	4b3f      	ldr	r3, [pc, #252]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d109      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050de:	2301      	movs	r3, #1
 80050e0:	e06f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050e2:	4b3b      	ldr	r3, [pc, #236]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f003 0302 	and.w	r3, r3, #2
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d101      	bne.n	80050f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ee:	2301      	movs	r3, #1
 80050f0:	e067      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050f2:	4b37      	ldr	r3, [pc, #220]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	f023 0203 	bic.w	r2, r3, #3
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4934      	ldr	r1, [pc, #208]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	4313      	orrs	r3, r2
 8005102:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005104:	f7fe fbd6 	bl	80038b4 <HAL_GetTick>
 8005108:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800510a:	e00a      	b.n	8005122 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800510c:	f7fe fbd2 	bl	80038b4 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	f241 3288 	movw	r2, #5000	; 0x1388
 800511a:	4293      	cmp	r3, r2
 800511c:	d901      	bls.n	8005122 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e04f      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005122:	4b2b      	ldr	r3, [pc, #172]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005124:	689b      	ldr	r3, [r3, #8]
 8005126:	f003 020c 	and.w	r2, r3, #12
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	685b      	ldr	r3, [r3, #4]
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	429a      	cmp	r2, r3
 8005132:	d1eb      	bne.n	800510c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005134:	4b25      	ldr	r3, [pc, #148]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	f003 0307 	and.w	r3, r3, #7
 800513c:	683a      	ldr	r2, [r7, #0]
 800513e:	429a      	cmp	r2, r3
 8005140:	d20c      	bcs.n	800515c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005142:	4b22      	ldr	r3, [pc, #136]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	b2d2      	uxtb	r2, r2
 8005148:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800514a:	4b20      	ldr	r3, [pc, #128]	; (80051cc <HAL_RCC_ClockConfig+0x1b8>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0307 	and.w	r3, r3, #7
 8005152:	683a      	ldr	r2, [r7, #0]
 8005154:	429a      	cmp	r2, r3
 8005156:	d001      	beq.n	800515c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005158:	2301      	movs	r3, #1
 800515a:	e032      	b.n	80051c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f003 0304 	and.w	r3, r3, #4
 8005164:	2b00      	cmp	r3, #0
 8005166:	d008      	beq.n	800517a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005168:	4b19      	ldr	r3, [pc, #100]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68db      	ldr	r3, [r3, #12]
 8005174:	4916      	ldr	r1, [pc, #88]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f003 0308 	and.w	r3, r3, #8
 8005182:	2b00      	cmp	r3, #0
 8005184:	d009      	beq.n	800519a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005186:	4b12      	ldr	r3, [pc, #72]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005188:	689b      	ldr	r3, [r3, #8]
 800518a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	691b      	ldr	r3, [r3, #16]
 8005192:	00db      	lsls	r3, r3, #3
 8005194:	490e      	ldr	r1, [pc, #56]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	4313      	orrs	r3, r2
 8005198:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800519a:	f000 f821 	bl	80051e0 <HAL_RCC_GetSysClockFreq>
 800519e:	4602      	mov	r2, r0
 80051a0:	4b0b      	ldr	r3, [pc, #44]	; (80051d0 <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	689b      	ldr	r3, [r3, #8]
 80051a4:	091b      	lsrs	r3, r3, #4
 80051a6:	f003 030f 	and.w	r3, r3, #15
 80051aa:	490a      	ldr	r1, [pc, #40]	; (80051d4 <HAL_RCC_ClockConfig+0x1c0>)
 80051ac:	5ccb      	ldrb	r3, [r1, r3]
 80051ae:	fa22 f303 	lsr.w	r3, r2, r3
 80051b2:	4a09      	ldr	r2, [pc, #36]	; (80051d8 <HAL_RCC_ClockConfig+0x1c4>)
 80051b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051b6:	4b09      	ldr	r3, [pc, #36]	; (80051dc <HAL_RCC_ClockConfig+0x1c8>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4618      	mov	r0, r3
 80051bc:	f7fe f920 	bl	8003400 <HAL_InitTick>

  return HAL_OK;
 80051c0:	2300      	movs	r3, #0
}
 80051c2:	4618      	mov	r0, r3
 80051c4:	3710      	adds	r7, #16
 80051c6:	46bd      	mov	sp, r7
 80051c8:	bd80      	pop	{r7, pc}
 80051ca:	bf00      	nop
 80051cc:	40023c00 	.word	0x40023c00
 80051d0:	40023800 	.word	0x40023800
 80051d4:	08008fd4 	.word	0x08008fd4
 80051d8:	200001d4 	.word	0x200001d4
 80051dc:	200001d8 	.word	0x200001d8

080051e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051e0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80051e4:	b084      	sub	sp, #16
 80051e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80051e8:	2300      	movs	r3, #0
 80051ea:	607b      	str	r3, [r7, #4]
 80051ec:	2300      	movs	r3, #0
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	2300      	movs	r3, #0
 80051f2:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 80051f4:	2300      	movs	r3, #0
 80051f6:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051f8:	4b67      	ldr	r3, [pc, #412]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80051fa:	689b      	ldr	r3, [r3, #8]
 80051fc:	f003 030c 	and.w	r3, r3, #12
 8005200:	2b08      	cmp	r3, #8
 8005202:	d00d      	beq.n	8005220 <HAL_RCC_GetSysClockFreq+0x40>
 8005204:	2b08      	cmp	r3, #8
 8005206:	f200 80bd 	bhi.w	8005384 <HAL_RCC_GetSysClockFreq+0x1a4>
 800520a:	2b00      	cmp	r3, #0
 800520c:	d002      	beq.n	8005214 <HAL_RCC_GetSysClockFreq+0x34>
 800520e:	2b04      	cmp	r3, #4
 8005210:	d003      	beq.n	800521a <HAL_RCC_GetSysClockFreq+0x3a>
 8005212:	e0b7      	b.n	8005384 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005214:	4b61      	ldr	r3, [pc, #388]	; (800539c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005216:	60bb      	str	r3, [r7, #8]
       break;
 8005218:	e0b7      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800521a:	4b61      	ldr	r3, [pc, #388]	; (80053a0 <HAL_RCC_GetSysClockFreq+0x1c0>)
 800521c:	60bb      	str	r3, [r7, #8]
      break;
 800521e:	e0b4      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005220:	4b5d      	ldr	r3, [pc, #372]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005228:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800522a:	4b5b      	ldr	r3, [pc, #364]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d04d      	beq.n	80052d2 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005236:	4b58      	ldr	r3, [pc, #352]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	099b      	lsrs	r3, r3, #6
 800523c:	461a      	mov	r2, r3
 800523e:	f04f 0300 	mov.w	r3, #0
 8005242:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005246:	f04f 0100 	mov.w	r1, #0
 800524a:	ea02 0800 	and.w	r8, r2, r0
 800524e:	ea03 0901 	and.w	r9, r3, r1
 8005252:	4640      	mov	r0, r8
 8005254:	4649      	mov	r1, r9
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	014b      	lsls	r3, r1, #5
 8005260:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005264:	0142      	lsls	r2, r0, #5
 8005266:	4610      	mov	r0, r2
 8005268:	4619      	mov	r1, r3
 800526a:	ebb0 0008 	subs.w	r0, r0, r8
 800526e:	eb61 0109 	sbc.w	r1, r1, r9
 8005272:	f04f 0200 	mov.w	r2, #0
 8005276:	f04f 0300 	mov.w	r3, #0
 800527a:	018b      	lsls	r3, r1, #6
 800527c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005280:	0182      	lsls	r2, r0, #6
 8005282:	1a12      	subs	r2, r2, r0
 8005284:	eb63 0301 	sbc.w	r3, r3, r1
 8005288:	f04f 0000 	mov.w	r0, #0
 800528c:	f04f 0100 	mov.w	r1, #0
 8005290:	00d9      	lsls	r1, r3, #3
 8005292:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005296:	00d0      	lsls	r0, r2, #3
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	eb12 0208 	adds.w	r2, r2, r8
 80052a0:	eb43 0309 	adc.w	r3, r3, r9
 80052a4:	f04f 0000 	mov.w	r0, #0
 80052a8:	f04f 0100 	mov.w	r1, #0
 80052ac:	0259      	lsls	r1, r3, #9
 80052ae:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80052b2:	0250      	lsls	r0, r2, #9
 80052b4:	4602      	mov	r2, r0
 80052b6:	460b      	mov	r3, r1
 80052b8:	4610      	mov	r0, r2
 80052ba:	4619      	mov	r1, r3
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	461a      	mov	r2, r3
 80052c0:	f04f 0300 	mov.w	r3, #0
 80052c4:	f7fb fb9e 	bl	8000a04 <__aeabi_uldivmod>
 80052c8:	4602      	mov	r2, r0
 80052ca:	460b      	mov	r3, r1
 80052cc:	4613      	mov	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
 80052d0:	e04a      	b.n	8005368 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052d2:	4b31      	ldr	r3, [pc, #196]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80052d4:	685b      	ldr	r3, [r3, #4]
 80052d6:	099b      	lsrs	r3, r3, #6
 80052d8:	461a      	mov	r2, r3
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f240 10ff 	movw	r0, #511	; 0x1ff
 80052e2:	f04f 0100 	mov.w	r1, #0
 80052e6:	ea02 0400 	and.w	r4, r2, r0
 80052ea:	ea03 0501 	and.w	r5, r3, r1
 80052ee:	4620      	mov	r0, r4
 80052f0:	4629      	mov	r1, r5
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	014b      	lsls	r3, r1, #5
 80052fc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005300:	0142      	lsls	r2, r0, #5
 8005302:	4610      	mov	r0, r2
 8005304:	4619      	mov	r1, r3
 8005306:	1b00      	subs	r0, r0, r4
 8005308:	eb61 0105 	sbc.w	r1, r1, r5
 800530c:	f04f 0200 	mov.w	r2, #0
 8005310:	f04f 0300 	mov.w	r3, #0
 8005314:	018b      	lsls	r3, r1, #6
 8005316:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800531a:	0182      	lsls	r2, r0, #6
 800531c:	1a12      	subs	r2, r2, r0
 800531e:	eb63 0301 	sbc.w	r3, r3, r1
 8005322:	f04f 0000 	mov.w	r0, #0
 8005326:	f04f 0100 	mov.w	r1, #0
 800532a:	00d9      	lsls	r1, r3, #3
 800532c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005330:	00d0      	lsls	r0, r2, #3
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	1912      	adds	r2, r2, r4
 8005338:	eb45 0303 	adc.w	r3, r5, r3
 800533c:	f04f 0000 	mov.w	r0, #0
 8005340:	f04f 0100 	mov.w	r1, #0
 8005344:	0299      	lsls	r1, r3, #10
 8005346:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800534a:	0290      	lsls	r0, r2, #10
 800534c:	4602      	mov	r2, r0
 800534e:	460b      	mov	r3, r1
 8005350:	4610      	mov	r0, r2
 8005352:	4619      	mov	r1, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	461a      	mov	r2, r3
 8005358:	f04f 0300 	mov.w	r3, #0
 800535c:	f7fb fb52 	bl	8000a04 <__aeabi_uldivmod>
 8005360:	4602      	mov	r2, r0
 8005362:	460b      	mov	r3, r1
 8005364:	4613      	mov	r3, r2
 8005366:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005368:	4b0b      	ldr	r3, [pc, #44]	; (8005398 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800536a:	685b      	ldr	r3, [r3, #4]
 800536c:	0c1b      	lsrs	r3, r3, #16
 800536e:	f003 0303 	and.w	r3, r3, #3
 8005372:	3301      	adds	r3, #1
 8005374:	005b      	lsls	r3, r3, #1
 8005376:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8005378:	68fa      	ldr	r2, [r7, #12]
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005380:	60bb      	str	r3, [r7, #8]
      break;
 8005382:	e002      	b.n	800538a <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005384:	4b05      	ldr	r3, [pc, #20]	; (800539c <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005386:	60bb      	str	r3, [r7, #8]
      break;
 8005388:	bf00      	nop
    }
  }
  return sysclockfreq;
 800538a:	68bb      	ldr	r3, [r7, #8]
}
 800538c:	4618      	mov	r0, r3
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005396:	bf00      	nop
 8005398:	40023800 	.word	0x40023800
 800539c:	00f42400 	.word	0x00f42400
 80053a0:	007a1200 	.word	0x007a1200

080053a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053a4:	b480      	push	{r7}
 80053a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053a8:	4b03      	ldr	r3, [pc, #12]	; (80053b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80053aa:	681b      	ldr	r3, [r3, #0]
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	46bd      	mov	sp, r7
 80053b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b4:	4770      	bx	lr
 80053b6:	bf00      	nop
 80053b8:	200001d4 	.word	0x200001d4

080053bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053bc:	b580      	push	{r7, lr}
 80053be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80053c0:	f7ff fff0 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80053c4:	4602      	mov	r2, r0
 80053c6:	4b05      	ldr	r3, [pc, #20]	; (80053dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80053c8:	689b      	ldr	r3, [r3, #8]
 80053ca:	0a9b      	lsrs	r3, r3, #10
 80053cc:	f003 0307 	and.w	r3, r3, #7
 80053d0:	4903      	ldr	r1, [pc, #12]	; (80053e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80053d8:	4618      	mov	r0, r3
 80053da:	bd80      	pop	{r7, pc}
 80053dc:	40023800 	.word	0x40023800
 80053e0:	08008fe4 	.word	0x08008fe4

080053e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80053e8:	f7ff ffdc 	bl	80053a4 <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetPCLK2Freq+0x20>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0b5b      	lsrs	r3, r3, #13
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4903      	ldr	r1, [pc, #12]	; (8005408 <HAL_RCC_GetPCLK2Freq+0x24>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40023800 	.word	0x40023800
 8005408:	08008fe4 	.word	0x08008fe4

0800540c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
 8005414:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	220f      	movs	r2, #15
 800541a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800541c:	4b12      	ldr	r3, [pc, #72]	; (8005468 <HAL_RCC_GetClockConfig+0x5c>)
 800541e:	689b      	ldr	r3, [r3, #8]
 8005420:	f003 0203 	and.w	r2, r3, #3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8005428:	4b0f      	ldr	r3, [pc, #60]	; (8005468 <HAL_RCC_GetClockConfig+0x5c>)
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005434:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <HAL_RCC_GetClockConfig+0x5c>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8005440:	4b09      	ldr	r3, [pc, #36]	; (8005468 <HAL_RCC_GetClockConfig+0x5c>)
 8005442:	689b      	ldr	r3, [r3, #8]
 8005444:	08db      	lsrs	r3, r3, #3
 8005446:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800544e:	4b07      	ldr	r3, [pc, #28]	; (800546c <HAL_RCC_GetClockConfig+0x60>)
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f003 0207 	and.w	r2, r3, #7
 8005456:	683b      	ldr	r3, [r7, #0]
 8005458:	601a      	str	r2, [r3, #0]
}
 800545a:	bf00      	nop
 800545c:	370c      	adds	r7, #12
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr
 8005466:	bf00      	nop
 8005468:	40023800 	.word	0x40023800
 800546c:	40023c00 	.word	0x40023c00

08005470 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
 8005476:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800547e:	2301      	movs	r3, #1
 8005480:	e07b      	b.n	800557a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005486:	2b00      	cmp	r3, #0
 8005488:	d108      	bne.n	800549c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	685b      	ldr	r3, [r3, #4]
 800548e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005492:	d009      	beq.n	80054a8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	61da      	str	r2, [r3, #28]
 800549a:	e005      	b.n	80054a8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2200      	movs	r2, #0
 80054a0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054b4:	b2db      	uxtb	r3, r3
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d106      	bne.n	80054c8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	2200      	movs	r2, #0
 80054be:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054c2:	6878      	ldr	r0, [r7, #4]
 80054c4:	f7fd fb2e 	bl	8002b24 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	2202      	movs	r2, #2
 80054cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054de:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80054f0:	431a      	orrs	r2, r3
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68db      	ldr	r3, [r3, #12]
 80054f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80054fa:	431a      	orrs	r2, r3
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	691b      	ldr	r3, [r3, #16]
 8005500:	f003 0302 	and.w	r3, r3, #2
 8005504:	431a      	orrs	r2, r3
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	695b      	ldr	r3, [r3, #20]
 800550a:	f003 0301 	and.w	r3, r3, #1
 800550e:	431a      	orrs	r2, r3
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	699b      	ldr	r3, [r3, #24]
 8005514:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005518:	431a      	orrs	r2, r3
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	69db      	ldr	r3, [r3, #28]
 800551e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005522:	431a      	orrs	r2, r3
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a1b      	ldr	r3, [r3, #32]
 8005528:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800552c:	ea42 0103 	orr.w	r1, r2, r3
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005534:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	430a      	orrs	r2, r1
 800553e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	699b      	ldr	r3, [r3, #24]
 8005544:	0c1b      	lsrs	r3, r3, #16
 8005546:	f003 0104 	and.w	r1, r3, #4
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554e:	f003 0210 	and.w	r2, r3, #16
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	430a      	orrs	r2, r1
 8005558:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	69da      	ldr	r2, [r3, #28]
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005568:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	2200      	movs	r2, #0
 800556e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2201      	movs	r2, #1
 8005574:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005578:	2300      	movs	r3, #0
}
 800557a:	4618      	mov	r0, r3
 800557c:	3708      	adds	r7, #8
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}

08005582 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005582:	b580      	push	{r7, lr}
 8005584:	b088      	sub	sp, #32
 8005586:	af00      	add	r7, sp, #0
 8005588:	60f8      	str	r0, [r7, #12]
 800558a:	60b9      	str	r1, [r7, #8]
 800558c:	603b      	str	r3, [r7, #0]
 800558e:	4613      	mov	r3, r2
 8005590:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005592:	2300      	movs	r3, #0
 8005594:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800559c:	2b01      	cmp	r3, #1
 800559e:	d101      	bne.n	80055a4 <HAL_SPI_Transmit+0x22>
 80055a0:	2302      	movs	r3, #2
 80055a2:	e126      	b.n	80057f2 <HAL_SPI_Transmit+0x270>
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	2201      	movs	r2, #1
 80055a8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055ac:	f7fe f982 	bl	80038b4 <HAL_GetTick>
 80055b0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055b2:	88fb      	ldrh	r3, [r7, #6]
 80055b4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055bc:	b2db      	uxtb	r3, r3
 80055be:	2b01      	cmp	r3, #1
 80055c0:	d002      	beq.n	80055c8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055c2:	2302      	movs	r3, #2
 80055c4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055c6:	e10b      	b.n	80057e0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d002      	beq.n	80055d4 <HAL_SPI_Transmit+0x52>
 80055ce:	88fb      	ldrh	r3, [r7, #6]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d102      	bne.n	80055da <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055d4:	2301      	movs	r3, #1
 80055d6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055d8:	e102      	b.n	80057e0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	2203      	movs	r2, #3
 80055de:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	2200      	movs	r2, #0
 80055e6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	88fa      	ldrh	r2, [r7, #6]
 80055f2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	88fa      	ldrh	r2, [r7, #6]
 80055f8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	2200      	movs	r2, #0
 80055fe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2200      	movs	r2, #0
 8005604:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	2200      	movs	r2, #0
 800560a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	2200      	movs	r2, #0
 8005610:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	2200      	movs	r2, #0
 8005616:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	689b      	ldr	r3, [r3, #8]
 800561c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005620:	d10f      	bne.n	8005642 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	681a      	ldr	r2, [r3, #0]
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005630:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d007      	beq.n	8005660 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	68fb      	ldr	r3, [r7, #12]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800565e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005668:	d14b      	bne.n	8005702 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d002      	beq.n	8005678 <HAL_SPI_Transmit+0xf6>
 8005672:	8afb      	ldrh	r3, [r7, #22]
 8005674:	2b01      	cmp	r3, #1
 8005676:	d13e      	bne.n	80056f6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800567c:	881a      	ldrh	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005684:	68fb      	ldr	r3, [r7, #12]
 8005686:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005688:	1c9a      	adds	r2, r3, #2
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800569c:	e02b      	b.n	80056f6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	689b      	ldr	r3, [r3, #8]
 80056a4:	f003 0302 	and.w	r3, r3, #2
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d112      	bne.n	80056d2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056b0:	881a      	ldrh	r2, [r3, #0]
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056bc:	1c9a      	adds	r2, r3, #2
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056c6:	b29b      	uxth	r3, r3
 80056c8:	3b01      	subs	r3, #1
 80056ca:	b29a      	uxth	r2, r3
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	86da      	strh	r2, [r3, #54]	; 0x36
 80056d0:	e011      	b.n	80056f6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056d2:	f7fe f8ef 	bl	80038b4 <HAL_GetTick>
 80056d6:	4602      	mov	r2, r0
 80056d8:	69bb      	ldr	r3, [r7, #24]
 80056da:	1ad3      	subs	r3, r2, r3
 80056dc:	683a      	ldr	r2, [r7, #0]
 80056de:	429a      	cmp	r2, r3
 80056e0:	d803      	bhi.n	80056ea <HAL_SPI_Transmit+0x168>
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e8:	d102      	bne.n	80056f0 <HAL_SPI_Transmit+0x16e>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d102      	bne.n	80056f6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80056f4:	e074      	b.n	80057e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056fa:	b29b      	uxth	r3, r3
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1ce      	bne.n	800569e <HAL_SPI_Transmit+0x11c>
 8005700:	e04c      	b.n	800579c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	685b      	ldr	r3, [r3, #4]
 8005706:	2b00      	cmp	r3, #0
 8005708:	d002      	beq.n	8005710 <HAL_SPI_Transmit+0x18e>
 800570a:	8afb      	ldrh	r3, [r7, #22]
 800570c:	2b01      	cmp	r3, #1
 800570e:	d140      	bne.n	8005792 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	330c      	adds	r3, #12
 800571a:	7812      	ldrb	r2, [r2, #0]
 800571c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800572c:	b29b      	uxth	r3, r3
 800572e:	3b01      	subs	r3, #1
 8005730:	b29a      	uxth	r2, r3
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005736:	e02c      	b.n	8005792 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	f003 0302 	and.w	r3, r3, #2
 8005742:	2b02      	cmp	r3, #2
 8005744:	d113      	bne.n	800576e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	330c      	adds	r3, #12
 8005750:	7812      	ldrb	r2, [r2, #0]
 8005752:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005758:	1c5a      	adds	r2, r3, #1
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005762:	b29b      	uxth	r3, r3
 8005764:	3b01      	subs	r3, #1
 8005766:	b29a      	uxth	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	86da      	strh	r2, [r3, #54]	; 0x36
 800576c:	e011      	b.n	8005792 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800576e:	f7fe f8a1 	bl	80038b4 <HAL_GetTick>
 8005772:	4602      	mov	r2, r0
 8005774:	69bb      	ldr	r3, [r7, #24]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	429a      	cmp	r2, r3
 800577c:	d803      	bhi.n	8005786 <HAL_SPI_Transmit+0x204>
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005784:	d102      	bne.n	800578c <HAL_SPI_Transmit+0x20a>
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	2b00      	cmp	r3, #0
 800578a:	d102      	bne.n	8005792 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005790:	e026      	b.n	80057e0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005796:	b29b      	uxth	r3, r3
 8005798:	2b00      	cmp	r3, #0
 800579a:	d1cd      	bne.n	8005738 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800579c:	69ba      	ldr	r2, [r7, #24]
 800579e:	6839      	ldr	r1, [r7, #0]
 80057a0:	68f8      	ldr	r0, [r7, #12]
 80057a2:	f000 f8b3 	bl	800590c <SPI_EndRxTxTransaction>
 80057a6:	4603      	mov	r3, r0
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d002      	beq.n	80057b2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2220      	movs	r2, #32
 80057b0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057b2:	68fb      	ldr	r3, [r7, #12]
 80057b4:	689b      	ldr	r3, [r3, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d10a      	bne.n	80057d0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ba:	2300      	movs	r3, #0
 80057bc:	613b      	str	r3, [r7, #16]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	613b      	str	r3, [r7, #16]
 80057c6:	68fb      	ldr	r3, [r7, #12]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d002      	beq.n	80057de <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057d8:	2301      	movs	r3, #1
 80057da:	77fb      	strb	r3, [r7, #31]
 80057dc:	e000      	b.n	80057e0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057de:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	2201      	movs	r2, #1
 80057e4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2200      	movs	r2, #0
 80057ec:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80057f0:	7ffb      	ldrb	r3, [r7, #31]
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3720      	adds	r7, #32
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b088      	sub	sp, #32
 8005800:	af00      	add	r7, sp, #0
 8005802:	60f8      	str	r0, [r7, #12]
 8005804:	60b9      	str	r1, [r7, #8]
 8005806:	603b      	str	r3, [r7, #0]
 8005808:	4613      	mov	r3, r2
 800580a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800580c:	f7fe f852 	bl	80038b4 <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005814:	1a9b      	subs	r3, r3, r2
 8005816:	683a      	ldr	r2, [r7, #0]
 8005818:	4413      	add	r3, r2
 800581a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800581c:	f7fe f84a 	bl	80038b4 <HAL_GetTick>
 8005820:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005822:	4b39      	ldr	r3, [pc, #228]	; (8005908 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	015b      	lsls	r3, r3, #5
 8005828:	0d1b      	lsrs	r3, r3, #20
 800582a:	69fa      	ldr	r2, [r7, #28]
 800582c:	fb02 f303 	mul.w	r3, r2, r3
 8005830:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005832:	e054      	b.n	80058de <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005834:	683b      	ldr	r3, [r7, #0]
 8005836:	f1b3 3fff 	cmp.w	r3, #4294967295
 800583a:	d050      	beq.n	80058de <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800583c:	f7fe f83a 	bl	80038b4 <HAL_GetTick>
 8005840:	4602      	mov	r2, r0
 8005842:	69bb      	ldr	r3, [r7, #24]
 8005844:	1ad3      	subs	r3, r2, r3
 8005846:	69fa      	ldr	r2, [r7, #28]
 8005848:	429a      	cmp	r2, r3
 800584a:	d902      	bls.n	8005852 <SPI_WaitFlagStateUntilTimeout+0x56>
 800584c:	69fb      	ldr	r3, [r7, #28]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d13d      	bne.n	80058ce <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	685a      	ldr	r2, [r3, #4]
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005860:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800586a:	d111      	bne.n	8005890 <SPI_WaitFlagStateUntilTimeout+0x94>
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005874:	d004      	beq.n	8005880 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	689b      	ldr	r3, [r3, #8]
 800587a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587e:	d107      	bne.n	8005890 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	681a      	ldr	r2, [r3, #0]
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800588e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005894:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005898:	d10f      	bne.n	80058ba <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058a8:	601a      	str	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	2201      	movs	r2, #1
 80058be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	2200      	movs	r2, #0
 80058c6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058ca:	2303      	movs	r3, #3
 80058cc:	e017      	b.n	80058fe <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80058ce:	697b      	ldr	r3, [r7, #20]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058d4:	2300      	movs	r3, #0
 80058d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	3b01      	subs	r3, #1
 80058dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	689a      	ldr	r2, [r3, #8]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	4013      	ands	r3, r2
 80058e8:	68ba      	ldr	r2, [r7, #8]
 80058ea:	429a      	cmp	r2, r3
 80058ec:	bf0c      	ite	eq
 80058ee:	2301      	moveq	r3, #1
 80058f0:	2300      	movne	r3, #0
 80058f2:	b2db      	uxtb	r3, r3
 80058f4:	461a      	mov	r2, r3
 80058f6:	79fb      	ldrb	r3, [r7, #7]
 80058f8:	429a      	cmp	r2, r3
 80058fa:	d19b      	bne.n	8005834 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80058fc:	2300      	movs	r3, #0
}
 80058fe:	4618      	mov	r0, r3
 8005900:	3720      	adds	r7, #32
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	200001d4 	.word	0x200001d4

0800590c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b088      	sub	sp, #32
 8005910:	af02      	add	r7, sp, #8
 8005912:	60f8      	str	r0, [r7, #12]
 8005914:	60b9      	str	r1, [r7, #8]
 8005916:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005918:	4b1b      	ldr	r3, [pc, #108]	; (8005988 <SPI_EndRxTxTransaction+0x7c>)
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	4a1b      	ldr	r2, [pc, #108]	; (800598c <SPI_EndRxTxTransaction+0x80>)
 800591e:	fba2 2303 	umull	r2, r3, r2, r3
 8005922:	0d5b      	lsrs	r3, r3, #21
 8005924:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005928:	fb02 f303 	mul.w	r3, r2, r3
 800592c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005936:	d112      	bne.n	800595e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	9300      	str	r3, [sp, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2200      	movs	r2, #0
 8005940:	2180      	movs	r1, #128	; 0x80
 8005942:	68f8      	ldr	r0, [r7, #12]
 8005944:	f7ff ff5a 	bl	80057fc <SPI_WaitFlagStateUntilTimeout>
 8005948:	4603      	mov	r3, r0
 800594a:	2b00      	cmp	r3, #0
 800594c:	d016      	beq.n	800597c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005952:	f043 0220 	orr.w	r2, r3, #32
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800595a:	2303      	movs	r3, #3
 800595c:	e00f      	b.n	800597e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800595e:	697b      	ldr	r3, [r7, #20]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d00a      	beq.n	800597a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	3b01      	subs	r3, #1
 8005968:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	689b      	ldr	r3, [r3, #8]
 8005970:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005974:	2b80      	cmp	r3, #128	; 0x80
 8005976:	d0f2      	beq.n	800595e <SPI_EndRxTxTransaction+0x52>
 8005978:	e000      	b.n	800597c <SPI_EndRxTxTransaction+0x70>
        break;
 800597a:	bf00      	nop
  }

  return HAL_OK;
 800597c:	2300      	movs	r3, #0
}
 800597e:	4618      	mov	r0, r3
 8005980:	3718      	adds	r7, #24
 8005982:	46bd      	mov	sp, r7
 8005984:	bd80      	pop	{r7, pc}
 8005986:	bf00      	nop
 8005988:	200001d4 	.word	0x200001d4
 800598c:	165e9f81 	.word	0x165e9f81

08005990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e041      	b.n	8005a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d106      	bne.n	80059bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2200      	movs	r2, #0
 80059b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059b6:	6878      	ldr	r0, [r7, #4]
 80059b8:	f7fd f91c 	bl	8002bf4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2202      	movs	r2, #2
 80059c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	3304      	adds	r3, #4
 80059cc:	4619      	mov	r1, r3
 80059ce:	4610      	mov	r0, r2
 80059d0:	f000 fcd0 	bl	8006374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2201      	movs	r2, #1
 80059e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a24:	2300      	movs	r3, #0
}
 8005a26:	4618      	mov	r0, r3
 8005a28:	3708      	adds	r7, #8
 8005a2a:	46bd      	mov	sp, r7
 8005a2c:	bd80      	pop	{r7, pc}
	...

08005a30 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b085      	sub	sp, #20
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a3e:	b2db      	uxtb	r3, r3
 8005a40:	2b01      	cmp	r3, #1
 8005a42:	d001      	beq.n	8005a48 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005a44:	2301      	movs	r3, #1
 8005a46:	e046      	b.n	8005ad6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2202      	movs	r2, #2
 8005a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	4a23      	ldr	r2, [pc, #140]	; (8005ae4 <HAL_TIM_Base_Start+0xb4>)
 8005a56:	4293      	cmp	r3, r2
 8005a58:	d022      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x70>
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a62:	d01d      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x70>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a1f      	ldr	r2, [pc, #124]	; (8005ae8 <HAL_TIM_Base_Start+0xb8>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d018      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x70>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a1e      	ldr	r2, [pc, #120]	; (8005aec <HAL_TIM_Base_Start+0xbc>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d013      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x70>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a1c      	ldr	r2, [pc, #112]	; (8005af0 <HAL_TIM_Base_Start+0xc0>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d00e      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x70>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a1b      	ldr	r2, [pc, #108]	; (8005af4 <HAL_TIM_Base_Start+0xc4>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d009      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x70>
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <HAL_TIM_Base_Start+0xc8>)
 8005a92:	4293      	cmp	r3, r2
 8005a94:	d004      	beq.n	8005aa0 <HAL_TIM_Base_Start+0x70>
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	4a18      	ldr	r2, [pc, #96]	; (8005afc <HAL_TIM_Base_Start+0xcc>)
 8005a9c:	4293      	cmp	r3, r2
 8005a9e:	d111      	bne.n	8005ac4 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	689b      	ldr	r3, [r3, #8]
 8005aa6:	f003 0307 	and.w	r3, r3, #7
 8005aaa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	2b06      	cmp	r3, #6
 8005ab0:	d010      	beq.n	8005ad4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f042 0201 	orr.w	r2, r2, #1
 8005ac0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ac2:	e007      	b.n	8005ad4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f042 0201 	orr.w	r2, r2, #1
 8005ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ad4:	2300      	movs	r3, #0
}
 8005ad6:	4618      	mov	r0, r3
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr
 8005ae2:	bf00      	nop
 8005ae4:	40010000 	.word	0x40010000
 8005ae8:	40000400 	.word	0x40000400
 8005aec:	40000800 	.word	0x40000800
 8005af0:	40000c00 	.word	0x40000c00
 8005af4:	40010400 	.word	0x40010400
 8005af8:	40014000 	.word	0x40014000
 8005afc:	40001800 	.word	0x40001800

08005b00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b085      	sub	sp, #20
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b01      	cmp	r3, #1
 8005b12:	d001      	beq.n	8005b18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b14:	2301      	movs	r3, #1
 8005b16:	e04e      	b.n	8005bb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	68da      	ldr	r2, [r3, #12]
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	f042 0201 	orr.w	r2, r2, #1
 8005b2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	4a23      	ldr	r2, [pc, #140]	; (8005bc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b36:	4293      	cmp	r3, r2
 8005b38:	d022      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b42:	d01d      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	4a1f      	ldr	r2, [pc, #124]	; (8005bc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b4a:	4293      	cmp	r3, r2
 8005b4c:	d018      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	4a1e      	ldr	r2, [pc, #120]	; (8005bcc <HAL_TIM_Base_Start_IT+0xcc>)
 8005b54:	4293      	cmp	r3, r2
 8005b56:	d013      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	4a1c      	ldr	r2, [pc, #112]	; (8005bd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b5e:	4293      	cmp	r3, r2
 8005b60:	d00e      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	4a1b      	ldr	r2, [pc, #108]	; (8005bd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b68:	4293      	cmp	r3, r2
 8005b6a:	d009      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4a19      	ldr	r2, [pc, #100]	; (8005bd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d004      	beq.n	8005b80 <HAL_TIM_Base_Start_IT+0x80>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a18      	ldr	r2, [pc, #96]	; (8005bdc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b7c:	4293      	cmp	r3, r2
 8005b7e:	d111      	bne.n	8005ba4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	689b      	ldr	r3, [r3, #8]
 8005b86:	f003 0307 	and.w	r3, r3, #7
 8005b8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	2b06      	cmp	r3, #6
 8005b90:	d010      	beq.n	8005bb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	681a      	ldr	r2, [r3, #0]
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f042 0201 	orr.w	r2, r2, #1
 8005ba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ba2:	e007      	b.n	8005bb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f042 0201 	orr.w	r2, r2, #1
 8005bb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005bb4:	2300      	movs	r3, #0
}
 8005bb6:	4618      	mov	r0, r3
 8005bb8:	3714      	adds	r7, #20
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc0:	4770      	bx	lr
 8005bc2:	bf00      	nop
 8005bc4:	40010000 	.word	0x40010000
 8005bc8:	40000400 	.word	0x40000400
 8005bcc:	40000800 	.word	0x40000800
 8005bd0:	40000c00 	.word	0x40000c00
 8005bd4:	40010400 	.word	0x40010400
 8005bd8:	40014000 	.word	0x40014000
 8005bdc:	40001800 	.word	0x40001800

08005be0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005be0:	b580      	push	{r7, lr}
 8005be2:	b082      	sub	sp, #8
 8005be4:	af00      	add	r7, sp, #0
 8005be6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	2b00      	cmp	r3, #0
 8005bec:	d101      	bne.n	8005bf2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bee:	2301      	movs	r3, #1
 8005bf0:	e041      	b.n	8005c76 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d106      	bne.n	8005c0c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fd f872 	bl	8002cf0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681a      	ldr	r2, [r3, #0]
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	3304      	adds	r3, #4
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4610      	mov	r0, r2
 8005c20:	f000 fba8 	bl	8006374 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	2201      	movs	r2, #1
 8005c58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2201      	movs	r2, #1
 8005c60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	2201      	movs	r2, #1
 8005c68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	2201      	movs	r2, #1
 8005c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005c74:	2300      	movs	r3, #0
}
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}
	...

08005c80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
 8005c88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c8a:	683b      	ldr	r3, [r7, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d109      	bne.n	8005ca4 <HAL_TIM_PWM_Start+0x24>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	2b01      	cmp	r3, #1
 8005c9a:	bf14      	ite	ne
 8005c9c:	2301      	movne	r3, #1
 8005c9e:	2300      	moveq	r3, #0
 8005ca0:	b2db      	uxtb	r3, r3
 8005ca2:	e022      	b.n	8005cea <HAL_TIM_PWM_Start+0x6a>
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	2b04      	cmp	r3, #4
 8005ca8:	d109      	bne.n	8005cbe <HAL_TIM_PWM_Start+0x3e>
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005cb0:	b2db      	uxtb	r3, r3
 8005cb2:	2b01      	cmp	r3, #1
 8005cb4:	bf14      	ite	ne
 8005cb6:	2301      	movne	r3, #1
 8005cb8:	2300      	moveq	r3, #0
 8005cba:	b2db      	uxtb	r3, r3
 8005cbc:	e015      	b.n	8005cea <HAL_TIM_PWM_Start+0x6a>
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d109      	bne.n	8005cd8 <HAL_TIM_PWM_Start+0x58>
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005cca:	b2db      	uxtb	r3, r3
 8005ccc:	2b01      	cmp	r3, #1
 8005cce:	bf14      	ite	ne
 8005cd0:	2301      	movne	r3, #1
 8005cd2:	2300      	moveq	r3, #0
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	e008      	b.n	8005cea <HAL_TIM_PWM_Start+0x6a>
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005cde:	b2db      	uxtb	r3, r3
 8005ce0:	2b01      	cmp	r3, #1
 8005ce2:	bf14      	ite	ne
 8005ce4:	2301      	movne	r3, #1
 8005ce6:	2300      	moveq	r3, #0
 8005ce8:	b2db      	uxtb	r3, r3
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d001      	beq.n	8005cf2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005cee:	2301      	movs	r3, #1
 8005cf0:	e07c      	b.n	8005dec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d104      	bne.n	8005d02 <HAL_TIM_PWM_Start+0x82>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2202      	movs	r2, #2
 8005cfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d00:	e013      	b.n	8005d2a <HAL_TIM_PWM_Start+0xaa>
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	2b04      	cmp	r3, #4
 8005d06:	d104      	bne.n	8005d12 <HAL_TIM_PWM_Start+0x92>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005d10:	e00b      	b.n	8005d2a <HAL_TIM_PWM_Start+0xaa>
 8005d12:	683b      	ldr	r3, [r7, #0]
 8005d14:	2b08      	cmp	r3, #8
 8005d16:	d104      	bne.n	8005d22 <HAL_TIM_PWM_Start+0xa2>
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2202      	movs	r2, #2
 8005d1c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005d20:	e003      	b.n	8005d2a <HAL_TIM_PWM_Start+0xaa>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2202      	movs	r2, #2
 8005d26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	2201      	movs	r2, #1
 8005d30:	6839      	ldr	r1, [r7, #0]
 8005d32:	4618      	mov	r0, r3
 8005d34:	f000 fe08 	bl	8006948 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a2d      	ldr	r2, [pc, #180]	; (8005df4 <HAL_TIM_PWM_Start+0x174>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d004      	beq.n	8005d4c <HAL_TIM_PWM_Start+0xcc>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a2c      	ldr	r2, [pc, #176]	; (8005df8 <HAL_TIM_PWM_Start+0x178>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d101      	bne.n	8005d50 <HAL_TIM_PWM_Start+0xd0>
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	e000      	b.n	8005d52 <HAL_TIM_PWM_Start+0xd2>
 8005d50:	2300      	movs	r3, #0
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d007      	beq.n	8005d66 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d64:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a22      	ldr	r2, [pc, #136]	; (8005df4 <HAL_TIM_PWM_Start+0x174>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d022      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x136>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d78:	d01d      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x136>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a1f      	ldr	r2, [pc, #124]	; (8005dfc <HAL_TIM_PWM_Start+0x17c>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d018      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x136>
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a1d      	ldr	r2, [pc, #116]	; (8005e00 <HAL_TIM_PWM_Start+0x180>)
 8005d8a:	4293      	cmp	r3, r2
 8005d8c:	d013      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x136>
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	4a1c      	ldr	r2, [pc, #112]	; (8005e04 <HAL_TIM_PWM_Start+0x184>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00e      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x136>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	4a16      	ldr	r2, [pc, #88]	; (8005df8 <HAL_TIM_PWM_Start+0x178>)
 8005d9e:	4293      	cmp	r3, r2
 8005da0:	d009      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x136>
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	4a18      	ldr	r2, [pc, #96]	; (8005e08 <HAL_TIM_PWM_Start+0x188>)
 8005da8:	4293      	cmp	r3, r2
 8005daa:	d004      	beq.n	8005db6 <HAL_TIM_PWM_Start+0x136>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	4a16      	ldr	r2, [pc, #88]	; (8005e0c <HAL_TIM_PWM_Start+0x18c>)
 8005db2:	4293      	cmp	r3, r2
 8005db4:	d111      	bne.n	8005dda <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	689b      	ldr	r3, [r3, #8]
 8005dbc:	f003 0307 	and.w	r3, r3, #7
 8005dc0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	2b06      	cmp	r3, #6
 8005dc6:	d010      	beq.n	8005dea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	681a      	ldr	r2, [r3, #0]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f042 0201 	orr.w	r2, r2, #1
 8005dd6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dd8:	e007      	b.n	8005dea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	681a      	ldr	r2, [r3, #0]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f042 0201 	orr.w	r2, r2, #1
 8005de8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3710      	adds	r7, #16
 8005df0:	46bd      	mov	sp, r7
 8005df2:	bd80      	pop	{r7, pc}
 8005df4:	40010000 	.word	0x40010000
 8005df8:	40010400 	.word	0x40010400
 8005dfc:	40000400 	.word	0x40000400
 8005e00:	40000800 	.word	0x40000800
 8005e04:	40000c00 	.word	0x40000c00
 8005e08:	40014000 	.word	0x40014000
 8005e0c:	40001800 	.word	0x40001800

08005e10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e10:	b580      	push	{r7, lr}
 8005e12:	b082      	sub	sp, #8
 8005e14:	af00      	add	r7, sp, #0
 8005e16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	691b      	ldr	r3, [r3, #16]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d122      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	68db      	ldr	r3, [r3, #12]
 8005e2c:	f003 0302 	and.w	r3, r3, #2
 8005e30:	2b02      	cmp	r3, #2
 8005e32:	d11b      	bne.n	8005e6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	f06f 0202 	mvn.w	r2, #2
 8005e3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2201      	movs	r2, #1
 8005e42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	699b      	ldr	r3, [r3, #24]
 8005e4a:	f003 0303 	and.w	r3, r3, #3
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d003      	beq.n	8005e5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e52:	6878      	ldr	r0, [r7, #4]
 8005e54:	f000 fa70 	bl	8006338 <HAL_TIM_IC_CaptureCallback>
 8005e58:	e005      	b.n	8005e66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fa62 	bl	8006324 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f000 fa73 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2200      	movs	r2, #0
 8005e6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	681b      	ldr	r3, [r3, #0]
 8005e70:	691b      	ldr	r3, [r3, #16]
 8005e72:	f003 0304 	and.w	r3, r3, #4
 8005e76:	2b04      	cmp	r3, #4
 8005e78:	d122      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	68db      	ldr	r3, [r3, #12]
 8005e80:	f003 0304 	and.w	r3, r3, #4
 8005e84:	2b04      	cmp	r3, #4
 8005e86:	d11b      	bne.n	8005ec0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	f06f 0204 	mvn.w	r2, #4
 8005e90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2202      	movs	r2, #2
 8005e96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	699b      	ldr	r3, [r3, #24]
 8005e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d003      	beq.n	8005eae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ea6:	6878      	ldr	r0, [r7, #4]
 8005ea8:	f000 fa46 	bl	8006338 <HAL_TIM_IC_CaptureCallback>
 8005eac:	e005      	b.n	8005eba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eae:	6878      	ldr	r0, [r7, #4]
 8005eb0:	f000 fa38 	bl	8006324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005eb4:	6878      	ldr	r0, [r7, #4]
 8005eb6:	f000 fa49 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	2200      	movs	r2, #0
 8005ebe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	691b      	ldr	r3, [r3, #16]
 8005ec6:	f003 0308 	and.w	r3, r3, #8
 8005eca:	2b08      	cmp	r3, #8
 8005ecc:	d122      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68db      	ldr	r3, [r3, #12]
 8005ed4:	f003 0308 	and.w	r3, r3, #8
 8005ed8:	2b08      	cmp	r3, #8
 8005eda:	d11b      	bne.n	8005f14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	f06f 0208 	mvn.w	r2, #8
 8005ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	2204      	movs	r2, #4
 8005eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	69db      	ldr	r3, [r3, #28]
 8005ef2:	f003 0303 	and.w	r3, r3, #3
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d003      	beq.n	8005f02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fa1c 	bl	8006338 <HAL_TIM_IC_CaptureCallback>
 8005f00:	e005      	b.n	8005f0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	f000 fa0e 	bl	8006324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f000 fa1f 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	2200      	movs	r2, #0
 8005f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	691b      	ldr	r3, [r3, #16]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	2b10      	cmp	r3, #16
 8005f20:	d122      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	68db      	ldr	r3, [r3, #12]
 8005f28:	f003 0310 	and.w	r3, r3, #16
 8005f2c:	2b10      	cmp	r3, #16
 8005f2e:	d11b      	bne.n	8005f68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f06f 0210 	mvn.w	r2, #16
 8005f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	2208      	movs	r2, #8
 8005f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	69db      	ldr	r3, [r3, #28]
 8005f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d003      	beq.n	8005f56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f4e:	6878      	ldr	r0, [r7, #4]
 8005f50:	f000 f9f2 	bl	8006338 <HAL_TIM_IC_CaptureCallback>
 8005f54:	e005      	b.n	8005f62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f56:	6878      	ldr	r0, [r7, #4]
 8005f58:	f000 f9e4 	bl	8006324 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f5c:	6878      	ldr	r0, [r7, #4]
 8005f5e:	f000 f9f5 	bl	800634c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	2200      	movs	r2, #0
 8005f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	691b      	ldr	r3, [r3, #16]
 8005f6e:	f003 0301 	and.w	r3, r3, #1
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10e      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b01      	cmp	r3, #1
 8005f82:	d107      	bne.n	8005f94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0201 	mvn.w	r2, #1
 8005f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f7fb ff74 	bl	8001e7c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	691b      	ldr	r3, [r3, #16]
 8005f9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f9e:	2b80      	cmp	r3, #128	; 0x80
 8005fa0:	d10e      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fac:	2b80      	cmp	r3, #128	; 0x80
 8005fae:	d107      	bne.n	8005fc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005fb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 fdc2 	bl	8006b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	691b      	ldr	r3, [r3, #16]
 8005fc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fca:	2b40      	cmp	r3, #64	; 0x40
 8005fcc:	d10e      	bne.n	8005fec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	68db      	ldr	r3, [r3, #12]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d107      	bne.n	8005fec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005fe4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f000 f9ba 	bl	8006360 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	691b      	ldr	r3, [r3, #16]
 8005ff2:	f003 0320 	and.w	r3, r3, #32
 8005ff6:	2b20      	cmp	r3, #32
 8005ff8:	d10e      	bne.n	8006018 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68db      	ldr	r3, [r3, #12]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b20      	cmp	r3, #32
 8006006:	d107      	bne.n	8006018 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	f06f 0220 	mvn.w	r2, #32
 8006010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006012:	6878      	ldr	r0, [r7, #4]
 8006014:	f000 fd8c 	bl	8006b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006018:	bf00      	nop
 800601a:	3708      	adds	r7, #8
 800601c:	46bd      	mov	sp, r7
 800601e:	bd80      	pop	{r7, pc}

08006020 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006020:	b580      	push	{r7, lr}
 8006022:	b084      	sub	sp, #16
 8006024:	af00      	add	r7, sp, #0
 8006026:	60f8      	str	r0, [r7, #12]
 8006028:	60b9      	str	r1, [r7, #8]
 800602a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006036:	2302      	movs	r3, #2
 8006038:	e0ac      	b.n	8006194 <HAL_TIM_PWM_ConfigChannel+0x174>
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2201      	movs	r2, #1
 800603e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b0c      	cmp	r3, #12
 8006046:	f200 809f 	bhi.w	8006188 <HAL_TIM_PWM_ConfigChannel+0x168>
 800604a:	a201      	add	r2, pc, #4	; (adr r2, 8006050 <HAL_TIM_PWM_ConfigChannel+0x30>)
 800604c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006050:	08006085 	.word	0x08006085
 8006054:	08006189 	.word	0x08006189
 8006058:	08006189 	.word	0x08006189
 800605c:	08006189 	.word	0x08006189
 8006060:	080060c5 	.word	0x080060c5
 8006064:	08006189 	.word	0x08006189
 8006068:	08006189 	.word	0x08006189
 800606c:	08006189 	.word	0x08006189
 8006070:	08006107 	.word	0x08006107
 8006074:	08006189 	.word	0x08006189
 8006078:	08006189 	.word	0x08006189
 800607c:	08006189 	.word	0x08006189
 8006080:	08006147 	.word	0x08006147
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	68b9      	ldr	r1, [r7, #8]
 800608a:	4618      	mov	r0, r3
 800608c:	f000 fa12 	bl	80064b4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	699a      	ldr	r2, [r3, #24]
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	f042 0208 	orr.w	r2, r2, #8
 800609e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	699a      	ldr	r2, [r3, #24]
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f022 0204 	bic.w	r2, r2, #4
 80060ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	6999      	ldr	r1, [r3, #24]
 80060b6:	68bb      	ldr	r3, [r7, #8]
 80060b8:	691a      	ldr	r2, [r3, #16]
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	430a      	orrs	r2, r1
 80060c0:	619a      	str	r2, [r3, #24]
      break;
 80060c2:	e062      	b.n	800618a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	68b9      	ldr	r1, [r7, #8]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 fa62 	bl	8006594 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	699a      	ldr	r2, [r3, #24]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80060de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	699a      	ldr	r2, [r3, #24]
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	6999      	ldr	r1, [r3, #24]
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	691b      	ldr	r3, [r3, #16]
 80060fa:	021a      	lsls	r2, r3, #8
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	430a      	orrs	r2, r1
 8006102:	619a      	str	r2, [r3, #24]
      break;
 8006104:	e041      	b.n	800618a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	68b9      	ldr	r1, [r7, #8]
 800610c:	4618      	mov	r0, r3
 800610e:	f000 fab7 	bl	8006680 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	69da      	ldr	r2, [r3, #28]
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f042 0208 	orr.w	r2, r2, #8
 8006120:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	69da      	ldr	r2, [r3, #28]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f022 0204 	bic.w	r2, r2, #4
 8006130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	69d9      	ldr	r1, [r3, #28]
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691a      	ldr	r2, [r3, #16]
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	430a      	orrs	r2, r1
 8006142:	61da      	str	r2, [r3, #28]
      break;
 8006144:	e021      	b.n	800618a <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	68b9      	ldr	r1, [r7, #8]
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fb0b 	bl	8006768 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	69da      	ldr	r2, [r3, #28]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006160:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	69da      	ldr	r2, [r3, #28]
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006170:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	69d9      	ldr	r1, [r3, #28]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	691b      	ldr	r3, [r3, #16]
 800617c:	021a      	lsls	r2, r3, #8
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	430a      	orrs	r2, r1
 8006184:	61da      	str	r2, [r3, #28]
      break;
 8006186:	e000      	b.n	800618a <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006188:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006192:	2300      	movs	r3, #0
}
 8006194:	4618      	mov	r0, r3
 8006196:	3710      	adds	r7, #16
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b084      	sub	sp, #16
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
 80061a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ac:	2b01      	cmp	r3, #1
 80061ae:	d101      	bne.n	80061b4 <HAL_TIM_ConfigClockSource+0x18>
 80061b0:	2302      	movs	r3, #2
 80061b2:	e0b3      	b.n	800631c <HAL_TIM_ConfigClockSource+0x180>
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2201      	movs	r2, #1
 80061b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2202      	movs	r2, #2
 80061c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80061d2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80061da:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	68fa      	ldr	r2, [r7, #12]
 80061e2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061e4:	683b      	ldr	r3, [r7, #0]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061ec:	d03e      	beq.n	800626c <HAL_TIM_ConfigClockSource+0xd0>
 80061ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80061f2:	f200 8087 	bhi.w	8006304 <HAL_TIM_ConfigClockSource+0x168>
 80061f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80061fa:	f000 8085 	beq.w	8006308 <HAL_TIM_ConfigClockSource+0x16c>
 80061fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006202:	d87f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
 8006204:	2b70      	cmp	r3, #112	; 0x70
 8006206:	d01a      	beq.n	800623e <HAL_TIM_ConfigClockSource+0xa2>
 8006208:	2b70      	cmp	r3, #112	; 0x70
 800620a:	d87b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
 800620c:	2b60      	cmp	r3, #96	; 0x60
 800620e:	d050      	beq.n	80062b2 <HAL_TIM_ConfigClockSource+0x116>
 8006210:	2b60      	cmp	r3, #96	; 0x60
 8006212:	d877      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
 8006214:	2b50      	cmp	r3, #80	; 0x50
 8006216:	d03c      	beq.n	8006292 <HAL_TIM_ConfigClockSource+0xf6>
 8006218:	2b50      	cmp	r3, #80	; 0x50
 800621a:	d873      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
 800621c:	2b40      	cmp	r3, #64	; 0x40
 800621e:	d058      	beq.n	80062d2 <HAL_TIM_ConfigClockSource+0x136>
 8006220:	2b40      	cmp	r3, #64	; 0x40
 8006222:	d86f      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
 8006224:	2b30      	cmp	r3, #48	; 0x30
 8006226:	d064      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x156>
 8006228:	2b30      	cmp	r3, #48	; 0x30
 800622a:	d86b      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
 800622c:	2b20      	cmp	r3, #32
 800622e:	d060      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x156>
 8006230:	2b20      	cmp	r3, #32
 8006232:	d867      	bhi.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
 8006234:	2b00      	cmp	r3, #0
 8006236:	d05c      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x156>
 8006238:	2b10      	cmp	r3, #16
 800623a:	d05a      	beq.n	80062f2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800623c:	e062      	b.n	8006304 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	6818      	ldr	r0, [r3, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	6899      	ldr	r1, [r3, #8]
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	685a      	ldr	r2, [r3, #4]
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	68db      	ldr	r3, [r3, #12]
 800624e:	f000 fb5b 	bl	8006908 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	689b      	ldr	r3, [r3, #8]
 8006258:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006260:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68fa      	ldr	r2, [r7, #12]
 8006268:	609a      	str	r2, [r3, #8]
      break;
 800626a:	e04e      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6818      	ldr	r0, [r3, #0]
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	6899      	ldr	r1, [r3, #8]
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685a      	ldr	r2, [r3, #4]
 8006278:	683b      	ldr	r3, [r7, #0]
 800627a:	68db      	ldr	r3, [r3, #12]
 800627c:	f000 fb44 	bl	8006908 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	689a      	ldr	r2, [r3, #8]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800628e:	609a      	str	r2, [r3, #8]
      break;
 8006290:	e03b      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	683b      	ldr	r3, [r7, #0]
 8006298:	6859      	ldr	r1, [r3, #4]
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	68db      	ldr	r3, [r3, #12]
 800629e:	461a      	mov	r2, r3
 80062a0:	f000 fab8 	bl	8006814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	2150      	movs	r1, #80	; 0x50
 80062aa:	4618      	mov	r0, r3
 80062ac:	f000 fb11 	bl	80068d2 <TIM_ITRx_SetConfig>
      break;
 80062b0:	e02b      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6818      	ldr	r0, [r3, #0]
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	6859      	ldr	r1, [r3, #4]
 80062ba:	683b      	ldr	r3, [r7, #0]
 80062bc:	68db      	ldr	r3, [r3, #12]
 80062be:	461a      	mov	r2, r3
 80062c0:	f000 fad7 	bl	8006872 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2160      	movs	r1, #96	; 0x60
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 fb01 	bl	80068d2 <TIM_ITRx_SetConfig>
      break;
 80062d0:	e01b      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6818      	ldr	r0, [r3, #0]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	6859      	ldr	r1, [r3, #4]
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	461a      	mov	r2, r3
 80062e0:	f000 fa98 	bl	8006814 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	2140      	movs	r1, #64	; 0x40
 80062ea:	4618      	mov	r0, r3
 80062ec:	f000 faf1 	bl	80068d2 <TIM_ITRx_SetConfig>
      break;
 80062f0:	e00b      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681a      	ldr	r2, [r3, #0]
 80062f6:	683b      	ldr	r3, [r7, #0]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4619      	mov	r1, r3
 80062fc:	4610      	mov	r0, r2
 80062fe:	f000 fae8 	bl	80068d2 <TIM_ITRx_SetConfig>
        break;
 8006302:	e002      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006304:	bf00      	nop
 8006306:	e000      	b.n	800630a <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8006308:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006324:	b480      	push	{r7}
 8006326:	b083      	sub	sp, #12
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800632c:	bf00      	nop
 800632e:	370c      	adds	r7, #12
 8006330:	46bd      	mov	sp, r7
 8006332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006336:	4770      	bx	lr

08006338 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006340:	bf00      	nop
 8006342:	370c      	adds	r7, #12
 8006344:	46bd      	mov	sp, r7
 8006346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634a:	4770      	bx	lr

0800634c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800634c:	b480      	push	{r7}
 800634e:	b083      	sub	sp, #12
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006354:	bf00      	nop
 8006356:	370c      	adds	r7, #12
 8006358:	46bd      	mov	sp, r7
 800635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800635e:	4770      	bx	lr

08006360 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006368:	bf00      	nop
 800636a:	370c      	adds	r7, #12
 800636c:	46bd      	mov	sp, r7
 800636e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006372:	4770      	bx	lr

08006374 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006374:	b480      	push	{r7}
 8006376:	b085      	sub	sp, #20
 8006378:	af00      	add	r7, sp, #0
 800637a:	6078      	str	r0, [r7, #4]
 800637c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	4a40      	ldr	r2, [pc, #256]	; (8006488 <TIM_Base_SetConfig+0x114>)
 8006388:	4293      	cmp	r3, r2
 800638a:	d013      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006392:	d00f      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	4a3d      	ldr	r2, [pc, #244]	; (800648c <TIM_Base_SetConfig+0x118>)
 8006398:	4293      	cmp	r3, r2
 800639a:	d00b      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	4a3c      	ldr	r2, [pc, #240]	; (8006490 <TIM_Base_SetConfig+0x11c>)
 80063a0:	4293      	cmp	r3, r2
 80063a2:	d007      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	4a3b      	ldr	r2, [pc, #236]	; (8006494 <TIM_Base_SetConfig+0x120>)
 80063a8:	4293      	cmp	r3, r2
 80063aa:	d003      	beq.n	80063b4 <TIM_Base_SetConfig+0x40>
 80063ac:	687b      	ldr	r3, [r7, #4]
 80063ae:	4a3a      	ldr	r2, [pc, #232]	; (8006498 <TIM_Base_SetConfig+0x124>)
 80063b0:	4293      	cmp	r3, r2
 80063b2:	d108      	bne.n	80063c6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80063ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	68fa      	ldr	r2, [r7, #12]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	4a2f      	ldr	r2, [pc, #188]	; (8006488 <TIM_Base_SetConfig+0x114>)
 80063ca:	4293      	cmp	r3, r2
 80063cc:	d02b      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d027      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	4a2c      	ldr	r2, [pc, #176]	; (800648c <TIM_Base_SetConfig+0x118>)
 80063da:	4293      	cmp	r3, r2
 80063dc:	d023      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	4a2b      	ldr	r2, [pc, #172]	; (8006490 <TIM_Base_SetConfig+0x11c>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d01f      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	4a2a      	ldr	r2, [pc, #168]	; (8006494 <TIM_Base_SetConfig+0x120>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d01b      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	4a29      	ldr	r2, [pc, #164]	; (8006498 <TIM_Base_SetConfig+0x124>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d017      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	4a28      	ldr	r2, [pc, #160]	; (800649c <TIM_Base_SetConfig+0x128>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d013      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	4a27      	ldr	r2, [pc, #156]	; (80064a0 <TIM_Base_SetConfig+0x12c>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d00f      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	4a26      	ldr	r2, [pc, #152]	; (80064a4 <TIM_Base_SetConfig+0x130>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d00b      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	4a25      	ldr	r2, [pc, #148]	; (80064a8 <TIM_Base_SetConfig+0x134>)
 8006412:	4293      	cmp	r3, r2
 8006414:	d007      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	4a24      	ldr	r2, [pc, #144]	; (80064ac <TIM_Base_SetConfig+0x138>)
 800641a:	4293      	cmp	r3, r2
 800641c:	d003      	beq.n	8006426 <TIM_Base_SetConfig+0xb2>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	4a23      	ldr	r2, [pc, #140]	; (80064b0 <TIM_Base_SetConfig+0x13c>)
 8006422:	4293      	cmp	r3, r2
 8006424:	d108      	bne.n	8006438 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800642c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	68fa      	ldr	r2, [r7, #12]
 8006434:	4313      	orrs	r3, r2
 8006436:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	695b      	ldr	r3, [r3, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	689a      	ldr	r2, [r3, #8]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	4a0a      	ldr	r2, [pc, #40]	; (8006488 <TIM_Base_SetConfig+0x114>)
 8006460:	4293      	cmp	r3, r2
 8006462:	d003      	beq.n	800646c <TIM_Base_SetConfig+0xf8>
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	4a0c      	ldr	r2, [pc, #48]	; (8006498 <TIM_Base_SetConfig+0x124>)
 8006468:	4293      	cmp	r3, r2
 800646a:	d103      	bne.n	8006474 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	691a      	ldr	r2, [r3, #16]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2201      	movs	r2, #1
 8006478:	615a      	str	r2, [r3, #20]
}
 800647a:	bf00      	nop
 800647c:	3714      	adds	r7, #20
 800647e:	46bd      	mov	sp, r7
 8006480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006484:	4770      	bx	lr
 8006486:	bf00      	nop
 8006488:	40010000 	.word	0x40010000
 800648c:	40000400 	.word	0x40000400
 8006490:	40000800 	.word	0x40000800
 8006494:	40000c00 	.word	0x40000c00
 8006498:	40010400 	.word	0x40010400
 800649c:	40014000 	.word	0x40014000
 80064a0:	40014400 	.word	0x40014400
 80064a4:	40014800 	.word	0x40014800
 80064a8:	40001800 	.word	0x40001800
 80064ac:	40001c00 	.word	0x40001c00
 80064b0:	40002000 	.word	0x40002000

080064b4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80064b4:	b480      	push	{r7}
 80064b6:	b087      	sub	sp, #28
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
 80064bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	6a1b      	ldr	r3, [r3, #32]
 80064c2:	f023 0201 	bic.w	r2, r3, #1
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	6a1b      	ldr	r3, [r3, #32]
 80064ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	699b      	ldr	r3, [r3, #24]
 80064da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f023 0303 	bic.w	r3, r3, #3
 80064ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	68fa      	ldr	r2, [r7, #12]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064f6:	697b      	ldr	r3, [r7, #20]
 80064f8:	f023 0302 	bic.w	r3, r3, #2
 80064fc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	689b      	ldr	r3, [r3, #8]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	4313      	orrs	r3, r2
 8006506:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	4a20      	ldr	r2, [pc, #128]	; (800658c <TIM_OC1_SetConfig+0xd8>)
 800650c:	4293      	cmp	r3, r2
 800650e:	d003      	beq.n	8006518 <TIM_OC1_SetConfig+0x64>
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	4a1f      	ldr	r2, [pc, #124]	; (8006590 <TIM_OC1_SetConfig+0xdc>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d10c      	bne.n	8006532 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	f023 0308 	bic.w	r3, r3, #8
 800651e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006520:	683b      	ldr	r3, [r7, #0]
 8006522:	68db      	ldr	r3, [r3, #12]
 8006524:	697a      	ldr	r2, [r7, #20]
 8006526:	4313      	orrs	r3, r2
 8006528:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800652a:	697b      	ldr	r3, [r7, #20]
 800652c:	f023 0304 	bic.w	r3, r3, #4
 8006530:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a15      	ldr	r2, [pc, #84]	; (800658c <TIM_OC1_SetConfig+0xd8>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d003      	beq.n	8006542 <TIM_OC1_SetConfig+0x8e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a14      	ldr	r2, [pc, #80]	; (8006590 <TIM_OC1_SetConfig+0xdc>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d111      	bne.n	8006566 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006548:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800654a:	693b      	ldr	r3, [r7, #16]
 800654c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006550:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	695b      	ldr	r3, [r3, #20]
 8006556:	693a      	ldr	r2, [r7, #16]
 8006558:	4313      	orrs	r3, r2
 800655a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800655c:	683b      	ldr	r3, [r7, #0]
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	693a      	ldr	r2, [r7, #16]
 8006562:	4313      	orrs	r3, r2
 8006564:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	693a      	ldr	r2, [r7, #16]
 800656a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006572:	683b      	ldr	r3, [r7, #0]
 8006574:	685a      	ldr	r2, [r3, #4]
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	697a      	ldr	r2, [r7, #20]
 800657e:	621a      	str	r2, [r3, #32]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr
 800658c:	40010000 	.word	0x40010000
 8006590:	40010400 	.word	0x40010400

08006594 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006594:	b480      	push	{r7}
 8006596:	b087      	sub	sp, #28
 8006598:	af00      	add	r7, sp, #0
 800659a:	6078      	str	r0, [r7, #4]
 800659c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6a1b      	ldr	r3, [r3, #32]
 80065a2:	f023 0210 	bic.w	r2, r3, #16
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	6a1b      	ldr	r3, [r3, #32]
 80065ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	699b      	ldr	r3, [r3, #24]
 80065ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80065c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	021b      	lsls	r3, r3, #8
 80065d2:	68fa      	ldr	r2, [r7, #12]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	f023 0320 	bic.w	r3, r3, #32
 80065de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689b      	ldr	r3, [r3, #8]
 80065e4:	011b      	lsls	r3, r3, #4
 80065e6:	697a      	ldr	r2, [r7, #20]
 80065e8:	4313      	orrs	r3, r2
 80065ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	4a22      	ldr	r2, [pc, #136]	; (8006678 <TIM_OC2_SetConfig+0xe4>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d003      	beq.n	80065fc <TIM_OC2_SetConfig+0x68>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	4a21      	ldr	r2, [pc, #132]	; (800667c <TIM_OC2_SetConfig+0xe8>)
 80065f8:	4293      	cmp	r3, r2
 80065fa:	d10d      	bne.n	8006618 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006602:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006604:	683b      	ldr	r3, [r7, #0]
 8006606:	68db      	ldr	r3, [r3, #12]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4313      	orrs	r3, r2
 800660e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006616:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	4a17      	ldr	r2, [pc, #92]	; (8006678 <TIM_OC2_SetConfig+0xe4>)
 800661c:	4293      	cmp	r3, r2
 800661e:	d003      	beq.n	8006628 <TIM_OC2_SetConfig+0x94>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	4a16      	ldr	r2, [pc, #88]	; (800667c <TIM_OC2_SetConfig+0xe8>)
 8006624:	4293      	cmp	r3, r2
 8006626:	d113      	bne.n	8006650 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800662e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	695b      	ldr	r3, [r3, #20]
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	4313      	orrs	r3, r2
 8006642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	699b      	ldr	r3, [r3, #24]
 8006648:	009b      	lsls	r3, r3, #2
 800664a:	693a      	ldr	r2, [r7, #16]
 800664c:	4313      	orrs	r3, r2
 800664e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	68fa      	ldr	r2, [r7, #12]
 800665a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800665c:	683b      	ldr	r3, [r7, #0]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006664:	687b      	ldr	r3, [r7, #4]
 8006666:	697a      	ldr	r2, [r7, #20]
 8006668:	621a      	str	r2, [r3, #32]
}
 800666a:	bf00      	nop
 800666c:	371c      	adds	r7, #28
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
 8006676:	bf00      	nop
 8006678:	40010000 	.word	0x40010000
 800667c:	40010400 	.word	0x40010400

08006680 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006680:	b480      	push	{r7}
 8006682:	b087      	sub	sp, #28
 8006684:	af00      	add	r7, sp, #0
 8006686:	6078      	str	r0, [r7, #4]
 8006688:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	6a1b      	ldr	r3, [r3, #32]
 800668e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	6a1b      	ldr	r3, [r3, #32]
 800669a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	685b      	ldr	r3, [r3, #4]
 80066a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	69db      	ldr	r3, [r3, #28]
 80066a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	f023 0303 	bic.w	r3, r3, #3
 80066b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	68fa      	ldr	r2, [r7, #12]
 80066be:	4313      	orrs	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066c2:	697b      	ldr	r3, [r7, #20]
 80066c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	689b      	ldr	r3, [r3, #8]
 80066ce:	021b      	lsls	r3, r3, #8
 80066d0:	697a      	ldr	r2, [r7, #20]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	4a21      	ldr	r2, [pc, #132]	; (8006760 <TIM_OC3_SetConfig+0xe0>)
 80066da:	4293      	cmp	r3, r2
 80066dc:	d003      	beq.n	80066e6 <TIM_OC3_SetConfig+0x66>
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	4a20      	ldr	r2, [pc, #128]	; (8006764 <TIM_OC3_SetConfig+0xe4>)
 80066e2:	4293      	cmp	r3, r2
 80066e4:	d10d      	bne.n	8006702 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80066ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066ee:	683b      	ldr	r3, [r7, #0]
 80066f0:	68db      	ldr	r3, [r3, #12]
 80066f2:	021b      	lsls	r3, r3, #8
 80066f4:	697a      	ldr	r2, [r7, #20]
 80066f6:	4313      	orrs	r3, r2
 80066f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066fa:	697b      	ldr	r3, [r7, #20]
 80066fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006700:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	4a16      	ldr	r2, [pc, #88]	; (8006760 <TIM_OC3_SetConfig+0xe0>)
 8006706:	4293      	cmp	r3, r2
 8006708:	d003      	beq.n	8006712 <TIM_OC3_SetConfig+0x92>
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	4a15      	ldr	r2, [pc, #84]	; (8006764 <TIM_OC3_SetConfig+0xe4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d113      	bne.n	800673a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006718:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800671a:	693b      	ldr	r3, [r7, #16]
 800671c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006720:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	695b      	ldr	r3, [r3, #20]
 8006726:	011b      	lsls	r3, r3, #4
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	4313      	orrs	r3, r2
 800672c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	699b      	ldr	r3, [r3, #24]
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	693a      	ldr	r2, [r7, #16]
 8006736:	4313      	orrs	r3, r2
 8006738:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	693a      	ldr	r2, [r7, #16]
 800673e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	68fa      	ldr	r2, [r7, #12]
 8006744:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	685a      	ldr	r2, [r3, #4]
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	621a      	str	r2, [r3, #32]
}
 8006754:	bf00      	nop
 8006756:	371c      	adds	r7, #28
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	40010000 	.word	0x40010000
 8006764:	40010400 	.word	0x40010400

08006768 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006768:	b480      	push	{r7}
 800676a:	b087      	sub	sp, #28
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	6a1b      	ldr	r3, [r3, #32]
 8006776:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a1b      	ldr	r3, [r3, #32]
 8006782:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	69db      	ldr	r3, [r3, #28]
 800678e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006796:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800679e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	021b      	lsls	r3, r3, #8
 80067a6:	68fa      	ldr	r2, [r7, #12]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80067ac:	693b      	ldr	r3, [r7, #16]
 80067ae:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80067b2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	031b      	lsls	r3, r3, #12
 80067ba:	693a      	ldr	r2, [r7, #16]
 80067bc:	4313      	orrs	r3, r2
 80067be:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	4a12      	ldr	r2, [pc, #72]	; (800680c <TIM_OC4_SetConfig+0xa4>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d003      	beq.n	80067d0 <TIM_OC4_SetConfig+0x68>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	4a11      	ldr	r2, [pc, #68]	; (8006810 <TIM_OC4_SetConfig+0xa8>)
 80067cc:	4293      	cmp	r3, r2
 80067ce:	d109      	bne.n	80067e4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067d0:	697b      	ldr	r3, [r7, #20]
 80067d2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80067d6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067d8:	683b      	ldr	r3, [r7, #0]
 80067da:	695b      	ldr	r3, [r3, #20]
 80067dc:	019b      	lsls	r3, r3, #6
 80067de:	697a      	ldr	r2, [r7, #20]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	697a      	ldr	r2, [r7, #20]
 80067e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	68fa      	ldr	r2, [r7, #12]
 80067ee:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	685a      	ldr	r2, [r3, #4]
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	693a      	ldr	r2, [r7, #16]
 80067fc:	621a      	str	r2, [r3, #32]
}
 80067fe:	bf00      	nop
 8006800:	371c      	adds	r7, #28
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400

08006814 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006814:	b480      	push	{r7}
 8006816:	b087      	sub	sp, #28
 8006818:	af00      	add	r7, sp, #0
 800681a:	60f8      	str	r0, [r7, #12]
 800681c:	60b9      	str	r1, [r7, #8]
 800681e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006820:	68fb      	ldr	r3, [r7, #12]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	6a1b      	ldr	r3, [r3, #32]
 800682a:	f023 0201 	bic.w	r2, r3, #1
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006832:	68fb      	ldr	r3, [r7, #12]
 8006834:	699b      	ldr	r3, [r3, #24]
 8006836:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006838:	693b      	ldr	r3, [r7, #16]
 800683a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800683e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	011b      	lsls	r3, r3, #4
 8006844:	693a      	ldr	r2, [r7, #16]
 8006846:	4313      	orrs	r3, r2
 8006848:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800684a:	697b      	ldr	r3, [r7, #20]
 800684c:	f023 030a 	bic.w	r3, r3, #10
 8006850:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006852:	697a      	ldr	r2, [r7, #20]
 8006854:	68bb      	ldr	r3, [r7, #8]
 8006856:	4313      	orrs	r3, r2
 8006858:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	693a      	ldr	r2, [r7, #16]
 800685e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006860:	68fb      	ldr	r3, [r7, #12]
 8006862:	697a      	ldr	r2, [r7, #20]
 8006864:	621a      	str	r2, [r3, #32]
}
 8006866:	bf00      	nop
 8006868:	371c      	adds	r7, #28
 800686a:	46bd      	mov	sp, r7
 800686c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006870:	4770      	bx	lr

08006872 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006872:	b480      	push	{r7}
 8006874:	b087      	sub	sp, #28
 8006876:	af00      	add	r7, sp, #0
 8006878:	60f8      	str	r0, [r7, #12]
 800687a:	60b9      	str	r1, [r7, #8]
 800687c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6a1b      	ldr	r3, [r3, #32]
 8006882:	f023 0210 	bic.w	r2, r3, #16
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	699b      	ldr	r3, [r3, #24]
 800688e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006890:	68fb      	ldr	r3, [r7, #12]
 8006892:	6a1b      	ldr	r3, [r3, #32]
 8006894:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800689c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	031b      	lsls	r3, r3, #12
 80068a2:	697a      	ldr	r2, [r7, #20]
 80068a4:	4313      	orrs	r3, r2
 80068a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068a8:	693b      	ldr	r3, [r7, #16]
 80068aa:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80068ae:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80068b0:	68bb      	ldr	r3, [r7, #8]
 80068b2:	011b      	lsls	r3, r3, #4
 80068b4:	693a      	ldr	r2, [r7, #16]
 80068b6:	4313      	orrs	r3, r2
 80068b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068ba:	68fb      	ldr	r3, [r7, #12]
 80068bc:	697a      	ldr	r2, [r7, #20]
 80068be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	693a      	ldr	r2, [r7, #16]
 80068c4:	621a      	str	r2, [r3, #32]
}
 80068c6:	bf00      	nop
 80068c8:	371c      	adds	r7, #28
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b085      	sub	sp, #20
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
 80068da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	689b      	ldr	r3, [r3, #8]
 80068e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068e2:	68fb      	ldr	r3, [r7, #12]
 80068e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068ea:	683a      	ldr	r2, [r7, #0]
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	4313      	orrs	r3, r2
 80068f0:	f043 0307 	orr.w	r3, r3, #7
 80068f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	609a      	str	r2, [r3, #8]
}
 80068fc:	bf00      	nop
 80068fe:	3714      	adds	r7, #20
 8006900:	46bd      	mov	sp, r7
 8006902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006906:	4770      	bx	lr

08006908 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006908:	b480      	push	{r7}
 800690a:	b087      	sub	sp, #28
 800690c:	af00      	add	r7, sp, #0
 800690e:	60f8      	str	r0, [r7, #12]
 8006910:	60b9      	str	r1, [r7, #8]
 8006912:	607a      	str	r2, [r7, #4]
 8006914:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	689b      	ldr	r3, [r3, #8]
 800691a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800691c:	697b      	ldr	r3, [r7, #20]
 800691e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006922:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006924:	683b      	ldr	r3, [r7, #0]
 8006926:	021a      	lsls	r2, r3, #8
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	431a      	orrs	r2, r3
 800692c:	68bb      	ldr	r3, [r7, #8]
 800692e:	4313      	orrs	r3, r2
 8006930:	697a      	ldr	r2, [r7, #20]
 8006932:	4313      	orrs	r3, r2
 8006934:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	697a      	ldr	r2, [r7, #20]
 800693a:	609a      	str	r2, [r3, #8]
}
 800693c:	bf00      	nop
 800693e:	371c      	adds	r7, #28
 8006940:	46bd      	mov	sp, r7
 8006942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006946:	4770      	bx	lr

08006948 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006954:	68bb      	ldr	r3, [r7, #8]
 8006956:	f003 031f 	and.w	r3, r3, #31
 800695a:	2201      	movs	r2, #1
 800695c:	fa02 f303 	lsl.w	r3, r2, r3
 8006960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	6a1a      	ldr	r2, [r3, #32]
 8006966:	697b      	ldr	r3, [r7, #20]
 8006968:	43db      	mvns	r3, r3
 800696a:	401a      	ands	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	6a1a      	ldr	r2, [r3, #32]
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	f003 031f 	and.w	r3, r3, #31
 800697a:	6879      	ldr	r1, [r7, #4]
 800697c:	fa01 f303 	lsl.w	r3, r1, r3
 8006980:	431a      	orrs	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	621a      	str	r2, [r3, #32]
}
 8006986:	bf00      	nop
 8006988:	371c      	adds	r7, #28
 800698a:	46bd      	mov	sp, r7
 800698c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006990:	4770      	bx	lr
	...

08006994 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006994:	b480      	push	{r7}
 8006996:	b085      	sub	sp, #20
 8006998:	af00      	add	r7, sp, #0
 800699a:	6078      	str	r0, [r7, #4]
 800699c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069a4:	2b01      	cmp	r3, #1
 80069a6:	d101      	bne.n	80069ac <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069a8:	2302      	movs	r3, #2
 80069aa:	e05a      	b.n	8006a62 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2201      	movs	r2, #1
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	685b      	ldr	r3, [r3, #4]
 80069c2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069d2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	68fa      	ldr	r2, [r7, #12]
 80069da:	4313      	orrs	r3, r2
 80069dc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	68fa      	ldr	r2, [r7, #12]
 80069e4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a21      	ldr	r2, [pc, #132]	; (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d022      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80069f8:	d01d      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1d      	ldr	r2, [pc, #116]	; (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d018      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a1b      	ldr	r2, [pc, #108]	; (8006a78 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d013      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a1a      	ldr	r2, [pc, #104]	; (8006a7c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d00e      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a18      	ldr	r2, [pc, #96]	; (8006a80 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d009      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a17      	ldr	r2, [pc, #92]	; (8006a84 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a28:	4293      	cmp	r3, r2
 8006a2a:	d004      	beq.n	8006a36 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	4a15      	ldr	r2, [pc, #84]	; (8006a88 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a32:	4293      	cmp	r3, r2
 8006a34:	d10c      	bne.n	8006a50 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a36:	68bb      	ldr	r3, [r7, #8]
 8006a38:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a3c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a3e:	683b      	ldr	r3, [r7, #0]
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	68ba      	ldr	r2, [r7, #8]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	68ba      	ldr	r2, [r7, #8]
 8006a4e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2201      	movs	r2, #1
 8006a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	2200      	movs	r2, #0
 8006a5c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a60:	2300      	movs	r3, #0
}
 8006a62:	4618      	mov	r0, r3
 8006a64:	3714      	adds	r7, #20
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	40010000 	.word	0x40010000
 8006a74:	40000400 	.word	0x40000400
 8006a78:	40000800 	.word	0x40000800
 8006a7c:	40000c00 	.word	0x40000c00
 8006a80:	40010400 	.word	0x40010400
 8006a84:	40014000 	.word	0x40014000
 8006a88:	40001800 	.word	0x40001800

08006a8c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a8c:	b480      	push	{r7}
 8006a8e:	b085      	sub	sp, #20
 8006a90:	af00      	add	r7, sp, #0
 8006a92:	6078      	str	r0, [r7, #4]
 8006a94:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006aa0:	2b01      	cmp	r3, #1
 8006aa2:	d101      	bne.n	8006aa8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	e03d      	b.n	8006b24 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2201      	movs	r2, #1
 8006aac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8006ab6:	683b      	ldr	r3, [r7, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	689b      	ldr	r3, [r3, #8]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8006ad2:	683b      	ldr	r3, [r7, #0]
 8006ad4:	685b      	ldr	r3, [r3, #4]
 8006ad6:	4313      	orrs	r3, r2
 8006ad8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	4313      	orrs	r3, r2
 8006ae6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	691b      	ldr	r3, [r3, #16]
 8006af2:	4313      	orrs	r3, r2
 8006af4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8006afc:	683b      	ldr	r3, [r7, #0]
 8006afe:	695b      	ldr	r3, [r3, #20]
 8006b00:	4313      	orrs	r3, r2
 8006b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	69db      	ldr	r3, [r3, #28]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b22:	2300      	movs	r3, #0
}
 8006b24:	4618      	mov	r0, r3
 8006b26:	3714      	adds	r7, #20
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b083      	sub	sp, #12
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b4c:	bf00      	nop
 8006b4e:	370c      	adds	r7, #12
 8006b50:	46bd      	mov	sp, r7
 8006b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b56:	4770      	bx	lr

08006b58 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b082      	sub	sp, #8
 8006b5c:	af00      	add	r7, sp, #0
 8006b5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d101      	bne.n	8006b6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b66:	2301      	movs	r3, #1
 8006b68:	e03f      	b.n	8006bea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006b70:	b2db      	uxtb	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d106      	bne.n	8006b84 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7fc fa0c 	bl	8002f9c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2224      	movs	r2, #36	; 0x24
 8006b88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	68da      	ldr	r2, [r3, #12]
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006b9a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006b9c:	6878      	ldr	r0, [r7, #4]
 8006b9e:	f000 fe0b 	bl	80077b8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	691a      	ldr	r2, [r3, #16]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006bb0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	695a      	ldr	r2, [r3, #20]
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006bc0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	68da      	ldr	r2, [r3, #12]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006bd0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2200      	movs	r2, #0
 8006bd6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2220      	movs	r2, #32
 8006bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2220      	movs	r2, #32
 8006be4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006be8:	2300      	movs	r3, #0
}
 8006bea:	4618      	mov	r0, r3
 8006bec:	3708      	adds	r7, #8
 8006bee:	46bd      	mov	sp, r7
 8006bf0:	bd80      	pop	{r7, pc}

08006bf2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006bf2:	b580      	push	{r7, lr}
 8006bf4:	b08a      	sub	sp, #40	; 0x28
 8006bf6:	af02      	add	r7, sp, #8
 8006bf8:	60f8      	str	r0, [r7, #12]
 8006bfa:	60b9      	str	r1, [r7, #8]
 8006bfc:	603b      	str	r3, [r7, #0]
 8006bfe:	4613      	mov	r3, r2
 8006c00:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8006c02:	2300      	movs	r3, #0
 8006c04:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b20      	cmp	r3, #32
 8006c10:	d17c      	bne.n	8006d0c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d002      	beq.n	8006c1e <HAL_UART_Transmit+0x2c>
 8006c18:	88fb      	ldrh	r3, [r7, #6]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d101      	bne.n	8006c22 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	e075      	b.n	8006d0e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c28:	2b01      	cmp	r3, #1
 8006c2a:	d101      	bne.n	8006c30 <HAL_UART_Transmit+0x3e>
 8006c2c:	2302      	movs	r3, #2
 8006c2e:	e06e      	b.n	8006d0e <HAL_UART_Transmit+0x11c>
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2201      	movs	r2, #1
 8006c34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	2221      	movs	r2, #33	; 0x21
 8006c42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006c46:	f7fc fe35 	bl	80038b4 <HAL_GetTick>
 8006c4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	88fa      	ldrh	r2, [r7, #6]
 8006c50:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	88fa      	ldrh	r2, [r7, #6]
 8006c56:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	689b      	ldr	r3, [r3, #8]
 8006c5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c60:	d108      	bne.n	8006c74 <HAL_UART_Transmit+0x82>
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	691b      	ldr	r3, [r3, #16]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d104      	bne.n	8006c74 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006c6a:	2300      	movs	r3, #0
 8006c6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8006c6e:	68bb      	ldr	r3, [r7, #8]
 8006c70:	61bb      	str	r3, [r7, #24]
 8006c72:	e003      	b.n	8006c7c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006c74:	68bb      	ldr	r3, [r7, #8]
 8006c76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006c84:	e02a      	b.n	8006cdc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c86:	683b      	ldr	r3, [r7, #0]
 8006c88:	9300      	str	r3, [sp, #0]
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	2200      	movs	r2, #0
 8006c8e:	2180      	movs	r1, #128	; 0x80
 8006c90:	68f8      	ldr	r0, [r7, #12]
 8006c92:	f000 fb8d 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d001      	beq.n	8006ca0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006c9c:	2303      	movs	r3, #3
 8006c9e:	e036      	b.n	8006d0e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006ca0:	69fb      	ldr	r3, [r7, #28]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d10b      	bne.n	8006cbe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ca6:	69bb      	ldr	r3, [r7, #24]
 8006ca8:	881b      	ldrh	r3, [r3, #0]
 8006caa:	461a      	mov	r2, r3
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006cb4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	3302      	adds	r3, #2
 8006cba:	61bb      	str	r3, [r7, #24]
 8006cbc:	e007      	b.n	8006cce <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8006cbe:	69fb      	ldr	r3, [r7, #28]
 8006cc0:	781a      	ldrb	r2, [r3, #0]
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006cc8:	69fb      	ldr	r3, [r7, #28]
 8006cca:	3301      	adds	r3, #1
 8006ccc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006cd2:	b29b      	uxth	r3, r3
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	b29a      	uxth	r2, r3
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006ce0:	b29b      	uxth	r3, r3
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d1cf      	bne.n	8006c86 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	9300      	str	r3, [sp, #0]
 8006cea:	697b      	ldr	r3, [r7, #20]
 8006cec:	2200      	movs	r2, #0
 8006cee:	2140      	movs	r1, #64	; 0x40
 8006cf0:	68f8      	ldr	r0, [r7, #12]
 8006cf2:	f000 fb5d 	bl	80073b0 <UART_WaitOnFlagUntilTimeout>
 8006cf6:	4603      	mov	r3, r0
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	d001      	beq.n	8006d00 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006cfc:	2303      	movs	r3, #3
 8006cfe:	e006      	b.n	8006d0e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	2220      	movs	r2, #32
 8006d04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006d08:	2300      	movs	r3, #0
 8006d0a:	e000      	b.n	8006d0e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006d0c:	2302      	movs	r3, #2
  }
}
 8006d0e:	4618      	mov	r0, r3
 8006d10:	3720      	adds	r7, #32
 8006d12:	46bd      	mov	sp, r7
 8006d14:	bd80      	pop	{r7, pc}

08006d16 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d16:	b480      	push	{r7}
 8006d18:	b085      	sub	sp, #20
 8006d1a:	af00      	add	r7, sp, #0
 8006d1c:	60f8      	str	r0, [r7, #12]
 8006d1e:	60b9      	str	r1, [r7, #8]
 8006d20:	4613      	mov	r3, r2
 8006d22:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006d24:	68fb      	ldr	r3, [r7, #12]
 8006d26:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	2b20      	cmp	r3, #32
 8006d2e:	d130      	bne.n	8006d92 <HAL_UART_Transmit_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8006d30:	68bb      	ldr	r3, [r7, #8]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d002      	beq.n	8006d3c <HAL_UART_Transmit_IT+0x26>
 8006d36:	88fb      	ldrh	r3, [r7, #6]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d101      	bne.n	8006d40 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	e029      	b.n	8006d94 <HAL_UART_Transmit_IT+0x7e>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d46:	2b01      	cmp	r3, #1
 8006d48:	d101      	bne.n	8006d4e <HAL_UART_Transmit_IT+0x38>
 8006d4a:	2302      	movs	r3, #2
 8006d4c:	e022      	b.n	8006d94 <HAL_UART_Transmit_IT+0x7e>
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2201      	movs	r2, #1
 8006d52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	68ba      	ldr	r2, [r7, #8]
 8006d5a:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	88fa      	ldrh	r2, [r7, #6]
 8006d60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	88fa      	ldrh	r2, [r7, #6]
 8006d66:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	2200      	movs	r2, #0
 8006d6c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	2221      	movs	r2, #33	; 0x21
 8006d72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68da      	ldr	r2, [r3, #12]
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006d8c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	e000      	b.n	8006d94 <HAL_UART_Transmit_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 8006d92:	2302      	movs	r3, #2
  }
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3714      	adds	r7, #20
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9e:	4770      	bx	lr

08006da0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b084      	sub	sp, #16
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	60f8      	str	r0, [r7, #12]
 8006da8:	60b9      	str	r1, [r7, #8]
 8006daa:	4613      	mov	r3, r2
 8006dac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006db4:	b2db      	uxtb	r3, r3
 8006db6:	2b20      	cmp	r3, #32
 8006db8:	d11d      	bne.n	8006df6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d002      	beq.n	8006dc6 <HAL_UART_Receive_DMA+0x26>
 8006dc0:	88fb      	ldrh	r3, [r7, #6]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d101      	bne.n	8006dca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8006dc6:	2301      	movs	r3, #1
 8006dc8:	e016      	b.n	8006df8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006dd0:	2b01      	cmp	r3, #1
 8006dd2:	d101      	bne.n	8006dd8 <HAL_UART_Receive_DMA+0x38>
 8006dd4:	2302      	movs	r3, #2
 8006dd6:	e00f      	b.n	8006df8 <HAL_UART_Receive_DMA+0x58>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2200      	movs	r2, #0
 8006de4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8006de6:	88fb      	ldrh	r3, [r7, #6]
 8006de8:	461a      	mov	r2, r3
 8006dea:	68b9      	ldr	r1, [r7, #8]
 8006dec:	68f8      	ldr	r0, [r7, #12]
 8006dee:	f000 fb29 	bl	8007444 <UART_Start_Receive_DMA>
 8006df2:	4603      	mov	r3, r0
 8006df4:	e000      	b.n	8006df8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006df6:	2302      	movs	r3, #2
  }
}
 8006df8:	4618      	mov	r0, r3
 8006dfa:	3710      	adds	r7, #16
 8006dfc:	46bd      	mov	sp, r7
 8006dfe:	bd80      	pop	{r7, pc}

08006e00 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	68da      	ldr	r2, [r3, #12]
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006e16:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	695a      	ldr	r2, [r3, #20]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	615a      	str	r2, [r3, #20]

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2c:	2b01      	cmp	r3, #1
 8006e2e:	d107      	bne.n	8006e40 <HAL_UART_AbortReceive+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68da      	ldr	r2, [r3, #12]
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f022 0210 	bic.w	r2, r2, #16
 8006e3e:	60da      	str	r2, [r3, #12]
  }

  /* Disable the UART DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	695b      	ldr	r3, [r3, #20]
 8006e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e4a:	2b40      	cmp	r3, #64	; 0x40
 8006e4c:	d124      	bne.n	8006e98 <HAL_UART_AbortReceive+0x98>
  {
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	695a      	ldr	r2, [r3, #20]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e5c:	615a      	str	r2, [r3, #20]

    /* Abort the UART DMA Rx stream : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d018      	beq.n	8006e98 <HAL_UART_AbortReceive+0x98>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e72:	4618      	mov	r0, r3
 8006e74:	f7fd f998 	bl	80041a8 <HAL_DMA_Abort>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d00c      	beq.n	8006e98 <HAL_UART_AbortReceive+0x98>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fd fbac 	bl	80045e0 <HAL_DMA_GetError>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b20      	cmp	r3, #32
 8006e8c:	d104      	bne.n	8006e98 <HAL_UART_AbortReceive+0x98>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	2210      	movs	r2, #16
 8006e92:	641a      	str	r2, [r3, #64]	; 0x40

          return HAL_TIMEOUT;
 8006e94:	2303      	movs	r3, #3
 8006e96:	e00a      	b.n	8006eae <HAL_UART_AbortReceive+0xae>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0x00U;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	2200      	movs	r2, #0
 8006e9c:	85da      	strh	r2, [r3, #46]	; 0x2e

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2220      	movs	r2, #32
 8006ea2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	631a      	str	r2, [r3, #48]	; 0x30

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3708      	adds	r7, #8
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
	...

08006eb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006eb8:	b580      	push	{r7, lr}
 8006eba:	b08a      	sub	sp, #40	; 0x28
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	68db      	ldr	r3, [r3, #12]
 8006ece:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	695b      	ldr	r3, [r3, #20]
 8006ed6:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	f003 030f 	and.w	r3, r3, #15
 8006ee6:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8006ee8:	69bb      	ldr	r3, [r7, #24]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10d      	bne.n	8006f0a <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ef0:	f003 0320 	and.w	r3, r3, #32
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d008      	beq.n	8006f0a <HAL_UART_IRQHandler+0x52>
 8006ef8:	6a3b      	ldr	r3, [r7, #32]
 8006efa:	f003 0320 	and.w	r3, r3, #32
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d003      	beq.n	8006f0a <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f000 fbc1 	bl	800768a <UART_Receive_IT>
      return;
 8006f08:	e17c      	b.n	8007204 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006f0a:	69bb      	ldr	r3, [r7, #24]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	f000 80b1 	beq.w	8007074 <HAL_UART_IRQHandler+0x1bc>
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	f003 0301 	and.w	r3, r3, #1
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d105      	bne.n	8006f28 <HAL_UART_IRQHandler+0x70>
 8006f1c:	6a3b      	ldr	r3, [r7, #32]
 8006f1e:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	f000 80a6 	beq.w	8007074 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006f28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f2a:	f003 0301 	and.w	r3, r3, #1
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00a      	beq.n	8006f48 <HAL_UART_IRQHandler+0x90>
 8006f32:	6a3b      	ldr	r3, [r7, #32]
 8006f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d005      	beq.n	8006f48 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006f3c:	687b      	ldr	r3, [r7, #4]
 8006f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f40:	f043 0201 	orr.w	r2, r3, #1
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4a:	f003 0304 	and.w	r3, r3, #4
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d00a      	beq.n	8006f68 <HAL_UART_IRQHandler+0xb0>
 8006f52:	69fb      	ldr	r3, [r7, #28]
 8006f54:	f003 0301 	and.w	r3, r3, #1
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d005      	beq.n	8006f68 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f60:	f043 0202 	orr.w	r2, r3, #2
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006f68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f6a:	f003 0302 	and.w	r3, r3, #2
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d00a      	beq.n	8006f88 <HAL_UART_IRQHandler+0xd0>
 8006f72:	69fb      	ldr	r3, [r7, #28]
 8006f74:	f003 0301 	and.w	r3, r3, #1
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d005      	beq.n	8006f88 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f80:	f043 0204 	orr.w	r2, r3, #4
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8006f88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f8a:	f003 0308 	and.w	r3, r3, #8
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d00f      	beq.n	8006fb2 <HAL_UART_IRQHandler+0xfa>
 8006f92:	6a3b      	ldr	r3, [r7, #32]
 8006f94:	f003 0320 	and.w	r3, r3, #32
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d104      	bne.n	8006fa6 <HAL_UART_IRQHandler+0xee>
 8006f9c:	69fb      	ldr	r3, [r7, #28]
 8006f9e:	f003 0301 	and.w	r3, r3, #1
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d005      	beq.n	8006fb2 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006faa:	f043 0208 	orr.w	r2, r3, #8
 8006fae:	687b      	ldr	r3, [r7, #4]
 8006fb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	f000 811f 	beq.w	80071fa <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006fbe:	f003 0320 	and.w	r3, r3, #32
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d007      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x11e>
 8006fc6:	6a3b      	ldr	r3, [r7, #32]
 8006fc8:	f003 0320 	and.w	r3, r3, #32
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d002      	beq.n	8006fd6 <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fb5a 	bl	800768a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	695b      	ldr	r3, [r3, #20]
 8006fdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fe0:	2b40      	cmp	r3, #64	; 0x40
 8006fe2:	bf0c      	ite	eq
 8006fe4:	2301      	moveq	r3, #1
 8006fe6:	2300      	movne	r3, #0
 8006fe8:	b2db      	uxtb	r3, r3
 8006fea:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ff0:	f003 0308 	and.w	r3, r3, #8
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d102      	bne.n	8006ffe <HAL_UART_IRQHandler+0x146>
 8006ff8:	697b      	ldr	r3, [r7, #20]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d031      	beq.n	8007062 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f000 fa9a 	bl	8007538 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	695b      	ldr	r3, [r3, #20]
 800700a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800700e:	2b40      	cmp	r3, #64	; 0x40
 8007010:	d123      	bne.n	800705a <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	681b      	ldr	r3, [r3, #0]
 8007016:	695a      	ldr	r2, [r3, #20]
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007020:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007026:	2b00      	cmp	r3, #0
 8007028:	d013      	beq.n	8007052 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	4a77      	ldr	r2, [pc, #476]	; (800720c <HAL_UART_IRQHandler+0x354>)
 8007030:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007036:	4618      	mov	r0, r3
 8007038:	f7fd f926 	bl	8004288 <HAL_DMA_Abort_IT>
 800703c:	4603      	mov	r3, r0
 800703e:	2b00      	cmp	r3, #0
 8007040:	d016      	beq.n	8007070 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007046:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800704c:	4610      	mov	r0, r2
 800704e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007050:	e00e      	b.n	8007070 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007052:	6878      	ldr	r0, [r7, #4]
 8007054:	f7fa f842 	bl	80010dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007058:	e00a      	b.n	8007070 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f7fa f83e 	bl	80010dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007060:	e006      	b.n	8007070 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007062:	6878      	ldr	r0, [r7, #4]
 8007064:	f7fa f83a 	bl	80010dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	2200      	movs	r2, #0
 800706c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800706e:	e0c4      	b.n	80071fa <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007070:	bf00      	nop
    return;
 8007072:	e0c2      	b.n	80071fa <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	f040 80a2 	bne.w	80071c2 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 800707e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007080:	f003 0310 	and.w	r3, r3, #16
 8007084:	2b00      	cmp	r3, #0
 8007086:	f000 809c 	beq.w	80071c2 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800708a:	6a3b      	ldr	r3, [r7, #32]
 800708c:	f003 0310 	and.w	r3, r3, #16
 8007090:	2b00      	cmp	r3, #0
 8007092:	f000 8096 	beq.w	80071c2 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007096:	2300      	movs	r3, #0
 8007098:	60fb      	str	r3, [r7, #12]
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	60fb      	str	r3, [r7, #12]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	60fb      	str	r3, [r7, #12]
 80070aa:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	681b      	ldr	r3, [r3, #0]
 80070b0:	695b      	ldr	r3, [r3, #20]
 80070b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070b6:	2b40      	cmp	r3, #64	; 0x40
 80070b8:	d14f      	bne.n	800715a <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	685b      	ldr	r3, [r3, #4]
 80070c2:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80070c4:	8a3b      	ldrh	r3, [r7, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	f000 8099 	beq.w	80071fe <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070d0:	8a3a      	ldrh	r2, [r7, #16]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	f080 8093 	bcs.w	80071fe <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	8a3a      	ldrh	r2, [r7, #16]
 80070dc:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070e2:	69db      	ldr	r3, [r3, #28]
 80070e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070e8:	d02b      	beq.n	8007142 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	68da      	ldr	r2, [r3, #12]
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80070f8:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	695a      	ldr	r2, [r3, #20]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f022 0201 	bic.w	r2, r2, #1
 8007108:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	695a      	ldr	r2, [r3, #20]
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007118:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	2220      	movs	r2, #32
 800711e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	68da      	ldr	r2, [r3, #12]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0210 	bic.w	r2, r2, #16
 8007136:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800713c:	4618      	mov	r0, r3
 800713e:	f7fd f833 	bl	80041a8 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800714a:	b29b      	uxth	r3, r3
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	b29b      	uxth	r3, r3
 8007150:	4619      	mov	r1, r3
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f870 	bl	8007238 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007158:	e051      	b.n	80071fe <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007162:	b29b      	uxth	r3, r3
 8007164:	1ad3      	subs	r3, r2, r3
 8007166:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800716c:	b29b      	uxth	r3, r3
 800716e:	2b00      	cmp	r3, #0
 8007170:	d047      	beq.n	8007202 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007172:	8a7b      	ldrh	r3, [r7, #18]
 8007174:	2b00      	cmp	r3, #0
 8007176:	d044      	beq.n	8007202 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	68da      	ldr	r2, [r3, #12]
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007186:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	695a      	ldr	r2, [r3, #20]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f022 0201 	bic.w	r2, r2, #1
 8007196:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2200      	movs	r2, #0
 80071a4:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	68da      	ldr	r2, [r3, #12]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	f022 0210 	bic.w	r2, r2, #16
 80071b4:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071b6:	8a7b      	ldrh	r3, [r7, #18]
 80071b8:	4619      	mov	r1, r3
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f83c 	bl	8007238 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80071c0:	e01f      	b.n	8007202 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d008      	beq.n	80071de <HAL_UART_IRQHandler+0x326>
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d003      	beq.n	80071de <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f9ef 	bl	80075ba <UART_Transmit_IT>
    return;
 80071dc:	e012      	b.n	8007204 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00d      	beq.n	8007204 <HAL_UART_IRQHandler+0x34c>
 80071e8:	6a3b      	ldr	r3, [r7, #32]
 80071ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d008      	beq.n	8007204 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 fa31 	bl	800765a <UART_EndTransmit_IT>
    return;
 80071f8:	e004      	b.n	8007204 <HAL_UART_IRQHandler+0x34c>
    return;
 80071fa:	bf00      	nop
 80071fc:	e002      	b.n	8007204 <HAL_UART_IRQHandler+0x34c>
      return;
 80071fe:	bf00      	nop
 8007200:	e000      	b.n	8007204 <HAL_UART_IRQHandler+0x34c>
      return;
 8007202:	bf00      	nop
  }
}
 8007204:	3728      	adds	r7, #40	; 0x28
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	08007593 	.word	0x08007593

08007210 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007210:	b480      	push	{r7}
 8007212:	b083      	sub	sp, #12
 8007214:	af00      	add	r7, sp, #0
 8007216:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007218:	bf00      	nop
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr

08007224 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007224:	b480      	push	{r7}
 8007226:	b083      	sub	sp, #12
 8007228:	af00      	add	r7, sp, #0
 800722a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800722c:	bf00      	nop
 800722e:	370c      	adds	r7, #12
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007238:	b480      	push	{r7}
 800723a:	b083      	sub	sp, #12
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
 8007240:	460b      	mov	r3, r1
 8007242:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b084      	sub	sp, #16
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800725c:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007268:	2b00      	cmp	r3, #0
 800726a:	d12a      	bne.n	80072c2 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	2200      	movs	r2, #0
 8007270:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007272:	68fb      	ldr	r3, [r7, #12]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	68da      	ldr	r2, [r3, #12]
 8007278:	68fb      	ldr	r3, [r7, #12]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007280:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	695a      	ldr	r2, [r3, #20]
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f022 0201 	bic.w	r2, r2, #1
 8007290:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	695a      	ldr	r2, [r3, #20]
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072a0:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	2220      	movs	r2, #32
 80072a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d107      	bne.n	80072c2 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	68da      	ldr	r2, [r3, #12]
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	f022 0210 	bic.w	r2, r2, #16
 80072c0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d106      	bne.n	80072d8 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80072ce:	4619      	mov	r1, r3
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff ffb1 	bl	8007238 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80072d6:	e002      	b.n	80072de <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80072d8:	68f8      	ldr	r0, [r7, #12]
 80072da:	f7f9 fee5 	bl	80010a8 <HAL_UART_RxCpltCallback>
}
 80072de:	bf00      	nop
 80072e0:	3710      	adds	r7, #16
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80072e6:	b580      	push	{r7, lr}
 80072e8:	b084      	sub	sp, #16
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072f8:	2b01      	cmp	r3, #1
 80072fa:	d108      	bne.n	800730e <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007300:	085b      	lsrs	r3, r3, #1
 8007302:	b29b      	uxth	r3, r3
 8007304:	4619      	mov	r1, r3
 8007306:	68f8      	ldr	r0, [r7, #12]
 8007308:	f7ff ff96 	bl	8007238 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800730c:	e002      	b.n	8007314 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800730e:	68f8      	ldr	r0, [r7, #12]
 8007310:	f7ff ff88 	bl	8007224 <HAL_UART_RxHalfCpltCallback>
}
 8007314:	bf00      	nop
 8007316:	3710      	adds	r7, #16
 8007318:	46bd      	mov	sp, r7
 800731a:	bd80      	pop	{r7, pc}

0800731c <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800731c:	b580      	push	{r7, lr}
 800731e:	b084      	sub	sp, #16
 8007320:	af00      	add	r7, sp, #0
 8007322:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800732c:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800732e:	68bb      	ldr	r3, [r7, #8]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	695b      	ldr	r3, [r3, #20]
 8007334:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007338:	2b80      	cmp	r3, #128	; 0x80
 800733a:	bf0c      	ite	eq
 800733c:	2301      	moveq	r3, #1
 800733e:	2300      	movne	r3, #0
 8007340:	b2db      	uxtb	r3, r3
 8007342:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007344:	68bb      	ldr	r3, [r7, #8]
 8007346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734a:	b2db      	uxtb	r3, r3
 800734c:	2b21      	cmp	r3, #33	; 0x21
 800734e:	d108      	bne.n	8007362 <UART_DMAError+0x46>
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d005      	beq.n	8007362 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007356:	68bb      	ldr	r3, [r7, #8]
 8007358:	2200      	movs	r2, #0
 800735a:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800735c:	68b8      	ldr	r0, [r7, #8]
 800735e:	f000 f8d5 	bl	800750c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800736c:	2b40      	cmp	r3, #64	; 0x40
 800736e:	bf0c      	ite	eq
 8007370:	2301      	moveq	r3, #1
 8007372:	2300      	movne	r3, #0
 8007374:	b2db      	uxtb	r3, r3
 8007376:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007378:	68bb      	ldr	r3, [r7, #8]
 800737a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800737e:	b2db      	uxtb	r3, r3
 8007380:	2b22      	cmp	r3, #34	; 0x22
 8007382:	d108      	bne.n	8007396 <UART_DMAError+0x7a>
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d005      	beq.n	8007396 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800738a:	68bb      	ldr	r3, [r7, #8]
 800738c:	2200      	movs	r2, #0
 800738e:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007390:	68b8      	ldr	r0, [r7, #8]
 8007392:	f000 f8d1 	bl	8007538 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007396:	68bb      	ldr	r3, [r7, #8]
 8007398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739a:	f043 0210 	orr.w	r2, r3, #16
 800739e:	68bb      	ldr	r3, [r7, #8]
 80073a0:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80073a2:	68b8      	ldr	r0, [r7, #8]
 80073a4:	f7f9 fe9a 	bl	80010dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80073a8:	bf00      	nop
 80073aa:	3710      	adds	r7, #16
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}

080073b0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	b084      	sub	sp, #16
 80073b4:	af00      	add	r7, sp, #0
 80073b6:	60f8      	str	r0, [r7, #12]
 80073b8:	60b9      	str	r1, [r7, #8]
 80073ba:	603b      	str	r3, [r7, #0]
 80073bc:	4613      	mov	r3, r2
 80073be:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80073c0:	e02c      	b.n	800741c <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80073c2:	69bb      	ldr	r3, [r7, #24]
 80073c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073c8:	d028      	beq.n	800741c <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80073ca:	69bb      	ldr	r3, [r7, #24]
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d007      	beq.n	80073e0 <UART_WaitOnFlagUntilTimeout+0x30>
 80073d0:	f7fc fa70 	bl	80038b4 <HAL_GetTick>
 80073d4:	4602      	mov	r2, r0
 80073d6:	683b      	ldr	r3, [r7, #0]
 80073d8:	1ad3      	subs	r3, r2, r3
 80073da:	69ba      	ldr	r2, [r7, #24]
 80073dc:	429a      	cmp	r2, r3
 80073de:	d21d      	bcs.n	800741c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80073ee:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	695a      	ldr	r2, [r3, #20]
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	f022 0201 	bic.w	r2, r2, #1
 80073fe:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	2220      	movs	r2, #32
 8007404:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	2220      	movs	r2, #32
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	2200      	movs	r2, #0
 8007414:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8007418:	2303      	movs	r3, #3
 800741a:	e00f      	b.n	800743c <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	681a      	ldr	r2, [r3, #0]
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	4013      	ands	r3, r2
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	429a      	cmp	r2, r3
 800742a:	bf0c      	ite	eq
 800742c:	2301      	moveq	r3, #1
 800742e:	2300      	movne	r3, #0
 8007430:	b2db      	uxtb	r3, r3
 8007432:	461a      	mov	r2, r3
 8007434:	79fb      	ldrb	r3, [r7, #7]
 8007436:	429a      	cmp	r2, r3
 8007438:	d0c3      	beq.n	80073c2 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800743a:	2300      	movs	r3, #0
}
 800743c:	4618      	mov	r0, r3
 800743e:	3710      	adds	r7, #16
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}

08007444 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007444:	b580      	push	{r7, lr}
 8007446:	b086      	sub	sp, #24
 8007448:	af00      	add	r7, sp, #0
 800744a:	60f8      	str	r0, [r7, #12]
 800744c:	60b9      	str	r1, [r7, #8]
 800744e:	4613      	mov	r3, r2
 8007450:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007452:	68ba      	ldr	r2, [r7, #8]
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	88fa      	ldrh	r2, [r7, #6]
 800745c:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	2200      	movs	r2, #0
 8007462:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	2222      	movs	r2, #34	; 0x22
 8007468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007470:	4a23      	ldr	r2, [pc, #140]	; (8007500 <UART_Start_Receive_DMA+0xbc>)
 8007472:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007478:	4a22      	ldr	r2, [pc, #136]	; (8007504 <UART_Start_Receive_DMA+0xc0>)
 800747a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007480:	4a21      	ldr	r2, [pc, #132]	; (8007508 <UART_Start_Receive_DMA+0xc4>)
 8007482:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	2200      	movs	r2, #0
 800748a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	3304      	adds	r3, #4
 800749c:	4619      	mov	r1, r3
 800749e:	697b      	ldr	r3, [r7, #20]
 80074a0:	681a      	ldr	r2, [r3, #0]
 80074a2:	88fb      	ldrh	r3, [r7, #6]
 80074a4:	f7fc fe28 	bl	80040f8 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80074a8:	2300      	movs	r3, #0
 80074aa:	613b      	str	r3, [r7, #16]
 80074ac:	68fb      	ldr	r3, [r7, #12]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	685b      	ldr	r3, [r3, #4]
 80074ba:	613b      	str	r3, [r7, #16]
 80074bc:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	2200      	movs	r2, #0
 80074c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074c6:	68fb      	ldr	r3, [r7, #12]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	68da      	ldr	r2, [r3, #12]
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80074d4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	695a      	ldr	r2, [r3, #20]
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f042 0201 	orr.w	r2, r2, #1
 80074e4:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	695a      	ldr	r2, [r3, #20]
 80074ec:	68fb      	ldr	r3, [r7, #12]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80074f4:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80074f6:	2300      	movs	r3, #0
}
 80074f8:	4618      	mov	r0, r3
 80074fa:	3718      	adds	r7, #24
 80074fc:	46bd      	mov	sp, r7
 80074fe:	bd80      	pop	{r7, pc}
 8007500:	08007251 	.word	0x08007251
 8007504:	080072e7 	.word	0x080072e7
 8007508:	0800731d 	.word	0x0800731d

0800750c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800750c:	b480      	push	{r7}
 800750e:	b083      	sub	sp, #12
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	68da      	ldr	r2, [r3, #12]
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8007522:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2220      	movs	r2, #32
 8007528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800752c:	bf00      	nop
 800752e:	370c      	adds	r7, #12
 8007530:	46bd      	mov	sp, r7
 8007532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007536:	4770      	bx	lr

08007538 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007538:	b480      	push	{r7}
 800753a:	b083      	sub	sp, #12
 800753c:	af00      	add	r7, sp, #0
 800753e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	68da      	ldr	r2, [r3, #12]
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800754e:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	695a      	ldr	r2, [r3, #20]
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	f022 0201 	bic.w	r2, r2, #1
 800755e:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007564:	2b01      	cmp	r3, #1
 8007566:	d107      	bne.n	8007578 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68da      	ldr	r2, [r3, #12]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	f022 0210 	bic.w	r2, r2, #16
 8007576:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2220      	movs	r2, #32
 800757c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8007586:	bf00      	nop
 8007588:	370c      	adds	r7, #12
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr

08007592 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007592:	b580      	push	{r7, lr}
 8007594:	b084      	sub	sp, #16
 8007596:	af00      	add	r7, sp, #0
 8007598:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800759e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	2200      	movs	r2, #0
 80075a4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	2200      	movs	r2, #0
 80075aa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80075ac:	68f8      	ldr	r0, [r7, #12]
 80075ae:	f7f9 fd95 	bl	80010dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80075b2:	bf00      	nop
 80075b4:	3710      	adds	r7, #16
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bd80      	pop	{r7, pc}

080075ba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80075ba:	b480      	push	{r7}
 80075bc:	b085      	sub	sp, #20
 80075be:	af00      	add	r7, sp, #0
 80075c0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075c8:	b2db      	uxtb	r3, r3
 80075ca:	2b21      	cmp	r3, #33	; 0x21
 80075cc:	d13e      	bne.n	800764c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	689b      	ldr	r3, [r3, #8]
 80075d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80075d6:	d114      	bne.n	8007602 <UART_Transmit_IT+0x48>
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	691b      	ldr	r3, [r3, #16]
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d110      	bne.n	8007602 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	881b      	ldrh	r3, [r3, #0]
 80075ea:	461a      	mov	r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80075f4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	6a1b      	ldr	r3, [r3, #32]
 80075fa:	1c9a      	adds	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	621a      	str	r2, [r3, #32]
 8007600:	e008      	b.n	8007614 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	6a1b      	ldr	r3, [r3, #32]
 8007606:	1c59      	adds	r1, r3, #1
 8007608:	687a      	ldr	r2, [r7, #4]
 800760a:	6211      	str	r1, [r2, #32]
 800760c:	781a      	ldrb	r2, [r3, #0]
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007618:	b29b      	uxth	r3, r3
 800761a:	3b01      	subs	r3, #1
 800761c:	b29b      	uxth	r3, r3
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	4619      	mov	r1, r3
 8007622:	84d1      	strh	r1, [r2, #38]	; 0x26
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10f      	bne.n	8007648 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	68da      	ldr	r2, [r3, #12]
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007636:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	68da      	ldr	r2, [r3, #12]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007646:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007648:	2300      	movs	r3, #0
 800764a:	e000      	b.n	800764e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800764c:	2302      	movs	r3, #2
  }
}
 800764e:	4618      	mov	r0, r3
 8007650:	3714      	adds	r7, #20
 8007652:	46bd      	mov	sp, r7
 8007654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007658:	4770      	bx	lr

0800765a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b082      	sub	sp, #8
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68da      	ldr	r2, [r3, #12]
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007670:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007672:	687b      	ldr	r3, [r7, #4]
 8007674:	2220      	movs	r2, #32
 8007676:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f7ff fdc8 	bl	8007210 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007680:	2300      	movs	r3, #0
}
 8007682:	4618      	mov	r0, r3
 8007684:	3708      	adds	r7, #8
 8007686:	46bd      	mov	sp, r7
 8007688:	bd80      	pop	{r7, pc}

0800768a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800768a:	b580      	push	{r7, lr}
 800768c:	b084      	sub	sp, #16
 800768e:	af00      	add	r7, sp, #0
 8007690:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007698:	b2db      	uxtb	r3, r3
 800769a:	2b22      	cmp	r3, #34	; 0x22
 800769c:	f040 8087 	bne.w	80077ae <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	689b      	ldr	r3, [r3, #8]
 80076a4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076a8:	d117      	bne.n	80076da <UART_Receive_IT+0x50>
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d113      	bne.n	80076da <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ba:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	b29b      	uxth	r3, r3
 80076c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80076c8:	b29a      	uxth	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076d2:	1c9a      	adds	r2, r3, #2
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	629a      	str	r2, [r3, #40]	; 0x28
 80076d8:	e026      	b.n	8007728 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076de:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80076e0:	2300      	movs	r3, #0
 80076e2:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	689b      	ldr	r3, [r3, #8]
 80076e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076ec:	d007      	beq.n	80076fe <UART_Receive_IT+0x74>
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	689b      	ldr	r3, [r3, #8]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d10a      	bne.n	800770c <UART_Receive_IT+0x82>
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	691b      	ldr	r3, [r3, #16]
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d106      	bne.n	800770c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	b2da      	uxtb	r2, r3
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	e008      	b.n	800771e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	685b      	ldr	r3, [r3, #4]
 8007712:	b2db      	uxtb	r3, r3
 8007714:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007718:	b2da      	uxtb	r2, r3
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007722:	1c5a      	adds	r2, r3, #1
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800772c:	b29b      	uxth	r3, r3
 800772e:	3b01      	subs	r3, #1
 8007730:	b29b      	uxth	r3, r3
 8007732:	687a      	ldr	r2, [r7, #4]
 8007734:	4619      	mov	r1, r3
 8007736:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007738:	2b00      	cmp	r3, #0
 800773a:	d136      	bne.n	80077aa <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68da      	ldr	r2, [r3, #12]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f022 0220 	bic.w	r2, r2, #32
 800774a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	68da      	ldr	r2, [r3, #12]
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800775a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	695a      	ldr	r2, [r3, #20]
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	681b      	ldr	r3, [r3, #0]
 8007766:	f022 0201 	bic.w	r2, r2, #1
 800776a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2220      	movs	r2, #32
 8007770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007778:	2b01      	cmp	r3, #1
 800777a:	d10e      	bne.n	800779a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68da      	ldr	r2, [r3, #12]
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	f022 0210 	bic.w	r2, r2, #16
 800778a:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007790:	4619      	mov	r1, r3
 8007792:	6878      	ldr	r0, [r7, #4]
 8007794:	f7ff fd50 	bl	8007238 <HAL_UARTEx_RxEventCallback>
 8007798:	e002      	b.n	80077a0 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800779a:	6878      	ldr	r0, [r7, #4]
 800779c:	f7f9 fc84 	bl	80010a8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	2200      	movs	r2, #0
 80077a4:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 80077a6:	2300      	movs	r3, #0
 80077a8:	e002      	b.n	80077b0 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	e000      	b.n	80077b0 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 80077ae:	2302      	movs	r3, #2
  }
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80077b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077bc:	b09f      	sub	sp, #124	; 0x7c
 80077be:	af00      	add	r7, sp, #0
 80077c0:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80077c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	691b      	ldr	r3, [r3, #16]
 80077c8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80077cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ce:	68d9      	ldr	r1, [r3, #12]
 80077d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077d2:	681a      	ldr	r2, [r3, #0]
 80077d4:	ea40 0301 	orr.w	r3, r0, r1
 80077d8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80077da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077dc:	689a      	ldr	r2, [r3, #8]
 80077de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e0:	691b      	ldr	r3, [r3, #16]
 80077e2:	431a      	orrs	r2, r3
 80077e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077e6:	695b      	ldr	r3, [r3, #20]
 80077e8:	431a      	orrs	r2, r3
 80077ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077ec:	69db      	ldr	r3, [r3, #28]
 80077ee:	4313      	orrs	r3, r2
 80077f0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80077f2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	68db      	ldr	r3, [r3, #12]
 80077f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80077fc:	f021 010c 	bic.w	r1, r1, #12
 8007800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007802:	681a      	ldr	r2, [r3, #0]
 8007804:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007806:	430b      	orrs	r3, r1
 8007808:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800780a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007814:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007816:	6999      	ldr	r1, [r3, #24]
 8007818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800781a:	681a      	ldr	r2, [r3, #0]
 800781c:	ea40 0301 	orr.w	r3, r0, r1
 8007820:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007822:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007824:	681a      	ldr	r2, [r3, #0]
 8007826:	4bc5      	ldr	r3, [pc, #788]	; (8007b3c <UART_SetConfig+0x384>)
 8007828:	429a      	cmp	r2, r3
 800782a:	d004      	beq.n	8007836 <UART_SetConfig+0x7e>
 800782c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800782e:	681a      	ldr	r2, [r3, #0]
 8007830:	4bc3      	ldr	r3, [pc, #780]	; (8007b40 <UART_SetConfig+0x388>)
 8007832:	429a      	cmp	r2, r3
 8007834:	d103      	bne.n	800783e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007836:	f7fd fdd5 	bl	80053e4 <HAL_RCC_GetPCLK2Freq>
 800783a:	6778      	str	r0, [r7, #116]	; 0x74
 800783c:	e002      	b.n	8007844 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800783e:	f7fd fdbd 	bl	80053bc <HAL_RCC_GetPCLK1Freq>
 8007842:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007844:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007846:	69db      	ldr	r3, [r3, #28]
 8007848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800784c:	f040 80b6 	bne.w	80079bc <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007850:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007852:	461c      	mov	r4, r3
 8007854:	f04f 0500 	mov.w	r5, #0
 8007858:	4622      	mov	r2, r4
 800785a:	462b      	mov	r3, r5
 800785c:	1891      	adds	r1, r2, r2
 800785e:	6439      	str	r1, [r7, #64]	; 0x40
 8007860:	415b      	adcs	r3, r3
 8007862:	647b      	str	r3, [r7, #68]	; 0x44
 8007864:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007868:	1912      	adds	r2, r2, r4
 800786a:	eb45 0303 	adc.w	r3, r5, r3
 800786e:	f04f 0000 	mov.w	r0, #0
 8007872:	f04f 0100 	mov.w	r1, #0
 8007876:	00d9      	lsls	r1, r3, #3
 8007878:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800787c:	00d0      	lsls	r0, r2, #3
 800787e:	4602      	mov	r2, r0
 8007880:	460b      	mov	r3, r1
 8007882:	1911      	adds	r1, r2, r4
 8007884:	6639      	str	r1, [r7, #96]	; 0x60
 8007886:	416b      	adcs	r3, r5
 8007888:	667b      	str	r3, [r7, #100]	; 0x64
 800788a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800788c:	685b      	ldr	r3, [r3, #4]
 800788e:	461a      	mov	r2, r3
 8007890:	f04f 0300 	mov.w	r3, #0
 8007894:	1891      	adds	r1, r2, r2
 8007896:	63b9      	str	r1, [r7, #56]	; 0x38
 8007898:	415b      	adcs	r3, r3
 800789a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800789c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80078a0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80078a4:	f7f9 f8ae 	bl	8000a04 <__aeabi_uldivmod>
 80078a8:	4602      	mov	r2, r0
 80078aa:	460b      	mov	r3, r1
 80078ac:	4ba5      	ldr	r3, [pc, #660]	; (8007b44 <UART_SetConfig+0x38c>)
 80078ae:	fba3 2302 	umull	r2, r3, r3, r2
 80078b2:	095b      	lsrs	r3, r3, #5
 80078b4:	011e      	lsls	r6, r3, #4
 80078b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80078b8:	461c      	mov	r4, r3
 80078ba:	f04f 0500 	mov.w	r5, #0
 80078be:	4622      	mov	r2, r4
 80078c0:	462b      	mov	r3, r5
 80078c2:	1891      	adds	r1, r2, r2
 80078c4:	6339      	str	r1, [r7, #48]	; 0x30
 80078c6:	415b      	adcs	r3, r3
 80078c8:	637b      	str	r3, [r7, #52]	; 0x34
 80078ca:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80078ce:	1912      	adds	r2, r2, r4
 80078d0:	eb45 0303 	adc.w	r3, r5, r3
 80078d4:	f04f 0000 	mov.w	r0, #0
 80078d8:	f04f 0100 	mov.w	r1, #0
 80078dc:	00d9      	lsls	r1, r3, #3
 80078de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80078e2:	00d0      	lsls	r0, r2, #3
 80078e4:	4602      	mov	r2, r0
 80078e6:	460b      	mov	r3, r1
 80078e8:	1911      	adds	r1, r2, r4
 80078ea:	65b9      	str	r1, [r7, #88]	; 0x58
 80078ec:	416b      	adcs	r3, r5
 80078ee:	65fb      	str	r3, [r7, #92]	; 0x5c
 80078f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80078f2:	685b      	ldr	r3, [r3, #4]
 80078f4:	461a      	mov	r2, r3
 80078f6:	f04f 0300 	mov.w	r3, #0
 80078fa:	1891      	adds	r1, r2, r2
 80078fc:	62b9      	str	r1, [r7, #40]	; 0x28
 80078fe:	415b      	adcs	r3, r3
 8007900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007902:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007906:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800790a:	f7f9 f87b 	bl	8000a04 <__aeabi_uldivmod>
 800790e:	4602      	mov	r2, r0
 8007910:	460b      	mov	r3, r1
 8007912:	4b8c      	ldr	r3, [pc, #560]	; (8007b44 <UART_SetConfig+0x38c>)
 8007914:	fba3 1302 	umull	r1, r3, r3, r2
 8007918:	095b      	lsrs	r3, r3, #5
 800791a:	2164      	movs	r1, #100	; 0x64
 800791c:	fb01 f303 	mul.w	r3, r1, r3
 8007920:	1ad3      	subs	r3, r2, r3
 8007922:	00db      	lsls	r3, r3, #3
 8007924:	3332      	adds	r3, #50	; 0x32
 8007926:	4a87      	ldr	r2, [pc, #540]	; (8007b44 <UART_SetConfig+0x38c>)
 8007928:	fba2 2303 	umull	r2, r3, r2, r3
 800792c:	095b      	lsrs	r3, r3, #5
 800792e:	005b      	lsls	r3, r3, #1
 8007930:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007934:	441e      	add	r6, r3
 8007936:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007938:	4618      	mov	r0, r3
 800793a:	f04f 0100 	mov.w	r1, #0
 800793e:	4602      	mov	r2, r0
 8007940:	460b      	mov	r3, r1
 8007942:	1894      	adds	r4, r2, r2
 8007944:	623c      	str	r4, [r7, #32]
 8007946:	415b      	adcs	r3, r3
 8007948:	627b      	str	r3, [r7, #36]	; 0x24
 800794a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800794e:	1812      	adds	r2, r2, r0
 8007950:	eb41 0303 	adc.w	r3, r1, r3
 8007954:	f04f 0400 	mov.w	r4, #0
 8007958:	f04f 0500 	mov.w	r5, #0
 800795c:	00dd      	lsls	r5, r3, #3
 800795e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007962:	00d4      	lsls	r4, r2, #3
 8007964:	4622      	mov	r2, r4
 8007966:	462b      	mov	r3, r5
 8007968:	1814      	adds	r4, r2, r0
 800796a:	653c      	str	r4, [r7, #80]	; 0x50
 800796c:	414b      	adcs	r3, r1
 800796e:	657b      	str	r3, [r7, #84]	; 0x54
 8007970:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007972:	685b      	ldr	r3, [r3, #4]
 8007974:	461a      	mov	r2, r3
 8007976:	f04f 0300 	mov.w	r3, #0
 800797a:	1891      	adds	r1, r2, r2
 800797c:	61b9      	str	r1, [r7, #24]
 800797e:	415b      	adcs	r3, r3
 8007980:	61fb      	str	r3, [r7, #28]
 8007982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007986:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800798a:	f7f9 f83b 	bl	8000a04 <__aeabi_uldivmod>
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4b6c      	ldr	r3, [pc, #432]	; (8007b44 <UART_SetConfig+0x38c>)
 8007994:	fba3 1302 	umull	r1, r3, r3, r2
 8007998:	095b      	lsrs	r3, r3, #5
 800799a:	2164      	movs	r1, #100	; 0x64
 800799c:	fb01 f303 	mul.w	r3, r1, r3
 80079a0:	1ad3      	subs	r3, r2, r3
 80079a2:	00db      	lsls	r3, r3, #3
 80079a4:	3332      	adds	r3, #50	; 0x32
 80079a6:	4a67      	ldr	r2, [pc, #412]	; (8007b44 <UART_SetConfig+0x38c>)
 80079a8:	fba2 2303 	umull	r2, r3, r2, r3
 80079ac:	095b      	lsrs	r3, r3, #5
 80079ae:	f003 0207 	and.w	r2, r3, #7
 80079b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4432      	add	r2, r6
 80079b8:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80079ba:	e0b9      	b.n	8007b30 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80079bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80079be:	461c      	mov	r4, r3
 80079c0:	f04f 0500 	mov.w	r5, #0
 80079c4:	4622      	mov	r2, r4
 80079c6:	462b      	mov	r3, r5
 80079c8:	1891      	adds	r1, r2, r2
 80079ca:	6139      	str	r1, [r7, #16]
 80079cc:	415b      	adcs	r3, r3
 80079ce:	617b      	str	r3, [r7, #20]
 80079d0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80079d4:	1912      	adds	r2, r2, r4
 80079d6:	eb45 0303 	adc.w	r3, r5, r3
 80079da:	f04f 0000 	mov.w	r0, #0
 80079de:	f04f 0100 	mov.w	r1, #0
 80079e2:	00d9      	lsls	r1, r3, #3
 80079e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80079e8:	00d0      	lsls	r0, r2, #3
 80079ea:	4602      	mov	r2, r0
 80079ec:	460b      	mov	r3, r1
 80079ee:	eb12 0804 	adds.w	r8, r2, r4
 80079f2:	eb43 0905 	adc.w	r9, r3, r5
 80079f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079f8:	685b      	ldr	r3, [r3, #4]
 80079fa:	4618      	mov	r0, r3
 80079fc:	f04f 0100 	mov.w	r1, #0
 8007a00:	f04f 0200 	mov.w	r2, #0
 8007a04:	f04f 0300 	mov.w	r3, #0
 8007a08:	008b      	lsls	r3, r1, #2
 8007a0a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a0e:	0082      	lsls	r2, r0, #2
 8007a10:	4640      	mov	r0, r8
 8007a12:	4649      	mov	r1, r9
 8007a14:	f7f8 fff6 	bl	8000a04 <__aeabi_uldivmod>
 8007a18:	4602      	mov	r2, r0
 8007a1a:	460b      	mov	r3, r1
 8007a1c:	4b49      	ldr	r3, [pc, #292]	; (8007b44 <UART_SetConfig+0x38c>)
 8007a1e:	fba3 2302 	umull	r2, r3, r3, r2
 8007a22:	095b      	lsrs	r3, r3, #5
 8007a24:	011e      	lsls	r6, r3, #4
 8007a26:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007a28:	4618      	mov	r0, r3
 8007a2a:	f04f 0100 	mov.w	r1, #0
 8007a2e:	4602      	mov	r2, r0
 8007a30:	460b      	mov	r3, r1
 8007a32:	1894      	adds	r4, r2, r2
 8007a34:	60bc      	str	r4, [r7, #8]
 8007a36:	415b      	adcs	r3, r3
 8007a38:	60fb      	str	r3, [r7, #12]
 8007a3a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007a3e:	1812      	adds	r2, r2, r0
 8007a40:	eb41 0303 	adc.w	r3, r1, r3
 8007a44:	f04f 0400 	mov.w	r4, #0
 8007a48:	f04f 0500 	mov.w	r5, #0
 8007a4c:	00dd      	lsls	r5, r3, #3
 8007a4e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007a52:	00d4      	lsls	r4, r2, #3
 8007a54:	4622      	mov	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	1814      	adds	r4, r2, r0
 8007a5a:	64bc      	str	r4, [r7, #72]	; 0x48
 8007a5c:	414b      	adcs	r3, r1
 8007a5e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	4618      	mov	r0, r3
 8007a66:	f04f 0100 	mov.w	r1, #0
 8007a6a:	f04f 0200 	mov.w	r2, #0
 8007a6e:	f04f 0300 	mov.w	r3, #0
 8007a72:	008b      	lsls	r3, r1, #2
 8007a74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007a78:	0082      	lsls	r2, r0, #2
 8007a7a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8007a7e:	f7f8 ffc1 	bl	8000a04 <__aeabi_uldivmod>
 8007a82:	4602      	mov	r2, r0
 8007a84:	460b      	mov	r3, r1
 8007a86:	4b2f      	ldr	r3, [pc, #188]	; (8007b44 <UART_SetConfig+0x38c>)
 8007a88:	fba3 1302 	umull	r1, r3, r3, r2
 8007a8c:	095b      	lsrs	r3, r3, #5
 8007a8e:	2164      	movs	r1, #100	; 0x64
 8007a90:	fb01 f303 	mul.w	r3, r1, r3
 8007a94:	1ad3      	subs	r3, r2, r3
 8007a96:	011b      	lsls	r3, r3, #4
 8007a98:	3332      	adds	r3, #50	; 0x32
 8007a9a:	4a2a      	ldr	r2, [pc, #168]	; (8007b44 <UART_SetConfig+0x38c>)
 8007a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa0:	095b      	lsrs	r3, r3, #5
 8007aa2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007aa6:	441e      	add	r6, r3
 8007aa8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007aaa:	4618      	mov	r0, r3
 8007aac:	f04f 0100 	mov.w	r1, #0
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	460b      	mov	r3, r1
 8007ab4:	1894      	adds	r4, r2, r2
 8007ab6:	603c      	str	r4, [r7, #0]
 8007ab8:	415b      	adcs	r3, r3
 8007aba:	607b      	str	r3, [r7, #4]
 8007abc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007ac0:	1812      	adds	r2, r2, r0
 8007ac2:	eb41 0303 	adc.w	r3, r1, r3
 8007ac6:	f04f 0400 	mov.w	r4, #0
 8007aca:	f04f 0500 	mov.w	r5, #0
 8007ace:	00dd      	lsls	r5, r3, #3
 8007ad0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8007ad4:	00d4      	lsls	r4, r2, #3
 8007ad6:	4622      	mov	r2, r4
 8007ad8:	462b      	mov	r3, r5
 8007ada:	eb12 0a00 	adds.w	sl, r2, r0
 8007ade:	eb43 0b01 	adc.w	fp, r3, r1
 8007ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007ae4:	685b      	ldr	r3, [r3, #4]
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f04f 0100 	mov.w	r1, #0
 8007aec:	f04f 0200 	mov.w	r2, #0
 8007af0:	f04f 0300 	mov.w	r3, #0
 8007af4:	008b      	lsls	r3, r1, #2
 8007af6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8007afa:	0082      	lsls	r2, r0, #2
 8007afc:	4650      	mov	r0, sl
 8007afe:	4659      	mov	r1, fp
 8007b00:	f7f8 ff80 	bl	8000a04 <__aeabi_uldivmod>
 8007b04:	4602      	mov	r2, r0
 8007b06:	460b      	mov	r3, r1
 8007b08:	4b0e      	ldr	r3, [pc, #56]	; (8007b44 <UART_SetConfig+0x38c>)
 8007b0a:	fba3 1302 	umull	r1, r3, r3, r2
 8007b0e:	095b      	lsrs	r3, r3, #5
 8007b10:	2164      	movs	r1, #100	; 0x64
 8007b12:	fb01 f303 	mul.w	r3, r1, r3
 8007b16:	1ad3      	subs	r3, r2, r3
 8007b18:	011b      	lsls	r3, r3, #4
 8007b1a:	3332      	adds	r3, #50	; 0x32
 8007b1c:	4a09      	ldr	r2, [pc, #36]	; (8007b44 <UART_SetConfig+0x38c>)
 8007b1e:	fba2 2303 	umull	r2, r3, r2, r3
 8007b22:	095b      	lsrs	r3, r3, #5
 8007b24:	f003 020f 	and.w	r2, r3, #15
 8007b28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	4432      	add	r2, r6
 8007b2e:	609a      	str	r2, [r3, #8]
}
 8007b30:	bf00      	nop
 8007b32:	377c      	adds	r7, #124	; 0x7c
 8007b34:	46bd      	mov	sp, r7
 8007b36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b3a:	bf00      	nop
 8007b3c:	40011000 	.word	0x40011000
 8007b40:	40011400 	.word	0x40011400
 8007b44:	51eb851f 	.word	0x51eb851f

08007b48 <__errno>:
 8007b48:	4b01      	ldr	r3, [pc, #4]	; (8007b50 <__errno+0x8>)
 8007b4a:	6818      	ldr	r0, [r3, #0]
 8007b4c:	4770      	bx	lr
 8007b4e:	bf00      	nop
 8007b50:	200001e0 	.word	0x200001e0

08007b54 <__libc_init_array>:
 8007b54:	b570      	push	{r4, r5, r6, lr}
 8007b56:	4d0d      	ldr	r5, [pc, #52]	; (8007b8c <__libc_init_array+0x38>)
 8007b58:	4c0d      	ldr	r4, [pc, #52]	; (8007b90 <__libc_init_array+0x3c>)
 8007b5a:	1b64      	subs	r4, r4, r5
 8007b5c:	10a4      	asrs	r4, r4, #2
 8007b5e:	2600      	movs	r6, #0
 8007b60:	42a6      	cmp	r6, r4
 8007b62:	d109      	bne.n	8007b78 <__libc_init_array+0x24>
 8007b64:	4d0b      	ldr	r5, [pc, #44]	; (8007b94 <__libc_init_array+0x40>)
 8007b66:	4c0c      	ldr	r4, [pc, #48]	; (8007b98 <__libc_init_array+0x44>)
 8007b68:	f000 fce6 	bl	8008538 <_init>
 8007b6c:	1b64      	subs	r4, r4, r5
 8007b6e:	10a4      	asrs	r4, r4, #2
 8007b70:	2600      	movs	r6, #0
 8007b72:	42a6      	cmp	r6, r4
 8007b74:	d105      	bne.n	8007b82 <__libc_init_array+0x2e>
 8007b76:	bd70      	pop	{r4, r5, r6, pc}
 8007b78:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b7c:	4798      	blx	r3
 8007b7e:	3601      	adds	r6, #1
 8007b80:	e7ee      	b.n	8007b60 <__libc_init_array+0xc>
 8007b82:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b86:	4798      	blx	r3
 8007b88:	3601      	adds	r6, #1
 8007b8a:	e7f2      	b.n	8007b72 <__libc_init_array+0x1e>
 8007b8c:	08009060 	.word	0x08009060
 8007b90:	08009060 	.word	0x08009060
 8007b94:	08009060 	.word	0x08009060
 8007b98:	08009064 	.word	0x08009064

08007b9c <memset>:
 8007b9c:	4402      	add	r2, r0
 8007b9e:	4603      	mov	r3, r0
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d100      	bne.n	8007ba6 <memset+0xa>
 8007ba4:	4770      	bx	lr
 8007ba6:	f803 1b01 	strb.w	r1, [r3], #1
 8007baa:	e7f9      	b.n	8007ba0 <memset+0x4>

08007bac <_puts_r>:
 8007bac:	b570      	push	{r4, r5, r6, lr}
 8007bae:	460e      	mov	r6, r1
 8007bb0:	4605      	mov	r5, r0
 8007bb2:	b118      	cbz	r0, 8007bbc <_puts_r+0x10>
 8007bb4:	6983      	ldr	r3, [r0, #24]
 8007bb6:	b90b      	cbnz	r3, 8007bbc <_puts_r+0x10>
 8007bb8:	f000 fa48 	bl	800804c <__sinit>
 8007bbc:	69ab      	ldr	r3, [r5, #24]
 8007bbe:	68ac      	ldr	r4, [r5, #8]
 8007bc0:	b913      	cbnz	r3, 8007bc8 <_puts_r+0x1c>
 8007bc2:	4628      	mov	r0, r5
 8007bc4:	f000 fa42 	bl	800804c <__sinit>
 8007bc8:	4b2c      	ldr	r3, [pc, #176]	; (8007c7c <_puts_r+0xd0>)
 8007bca:	429c      	cmp	r4, r3
 8007bcc:	d120      	bne.n	8007c10 <_puts_r+0x64>
 8007bce:	686c      	ldr	r4, [r5, #4]
 8007bd0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007bd2:	07db      	lsls	r3, r3, #31
 8007bd4:	d405      	bmi.n	8007be2 <_puts_r+0x36>
 8007bd6:	89a3      	ldrh	r3, [r4, #12]
 8007bd8:	0598      	lsls	r0, r3, #22
 8007bda:	d402      	bmi.n	8007be2 <_puts_r+0x36>
 8007bdc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007bde:	f000 fad3 	bl	8008188 <__retarget_lock_acquire_recursive>
 8007be2:	89a3      	ldrh	r3, [r4, #12]
 8007be4:	0719      	lsls	r1, r3, #28
 8007be6:	d51d      	bpl.n	8007c24 <_puts_r+0x78>
 8007be8:	6923      	ldr	r3, [r4, #16]
 8007bea:	b1db      	cbz	r3, 8007c24 <_puts_r+0x78>
 8007bec:	3e01      	subs	r6, #1
 8007bee:	68a3      	ldr	r3, [r4, #8]
 8007bf0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007bf4:	3b01      	subs	r3, #1
 8007bf6:	60a3      	str	r3, [r4, #8]
 8007bf8:	bb39      	cbnz	r1, 8007c4a <_puts_r+0x9e>
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	da38      	bge.n	8007c70 <_puts_r+0xc4>
 8007bfe:	4622      	mov	r2, r4
 8007c00:	210a      	movs	r1, #10
 8007c02:	4628      	mov	r0, r5
 8007c04:	f000 f848 	bl	8007c98 <__swbuf_r>
 8007c08:	3001      	adds	r0, #1
 8007c0a:	d011      	beq.n	8007c30 <_puts_r+0x84>
 8007c0c:	250a      	movs	r5, #10
 8007c0e:	e011      	b.n	8007c34 <_puts_r+0x88>
 8007c10:	4b1b      	ldr	r3, [pc, #108]	; (8007c80 <_puts_r+0xd4>)
 8007c12:	429c      	cmp	r4, r3
 8007c14:	d101      	bne.n	8007c1a <_puts_r+0x6e>
 8007c16:	68ac      	ldr	r4, [r5, #8]
 8007c18:	e7da      	b.n	8007bd0 <_puts_r+0x24>
 8007c1a:	4b1a      	ldr	r3, [pc, #104]	; (8007c84 <_puts_r+0xd8>)
 8007c1c:	429c      	cmp	r4, r3
 8007c1e:	bf08      	it	eq
 8007c20:	68ec      	ldreq	r4, [r5, #12]
 8007c22:	e7d5      	b.n	8007bd0 <_puts_r+0x24>
 8007c24:	4621      	mov	r1, r4
 8007c26:	4628      	mov	r0, r5
 8007c28:	f000 f888 	bl	8007d3c <__swsetup_r>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	d0dd      	beq.n	8007bec <_puts_r+0x40>
 8007c30:	f04f 35ff 	mov.w	r5, #4294967295
 8007c34:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007c36:	07da      	lsls	r2, r3, #31
 8007c38:	d405      	bmi.n	8007c46 <_puts_r+0x9a>
 8007c3a:	89a3      	ldrh	r3, [r4, #12]
 8007c3c:	059b      	lsls	r3, r3, #22
 8007c3e:	d402      	bmi.n	8007c46 <_puts_r+0x9a>
 8007c40:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007c42:	f000 faa2 	bl	800818a <__retarget_lock_release_recursive>
 8007c46:	4628      	mov	r0, r5
 8007c48:	bd70      	pop	{r4, r5, r6, pc}
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da04      	bge.n	8007c58 <_puts_r+0xac>
 8007c4e:	69a2      	ldr	r2, [r4, #24]
 8007c50:	429a      	cmp	r2, r3
 8007c52:	dc06      	bgt.n	8007c62 <_puts_r+0xb6>
 8007c54:	290a      	cmp	r1, #10
 8007c56:	d004      	beq.n	8007c62 <_puts_r+0xb6>
 8007c58:	6823      	ldr	r3, [r4, #0]
 8007c5a:	1c5a      	adds	r2, r3, #1
 8007c5c:	6022      	str	r2, [r4, #0]
 8007c5e:	7019      	strb	r1, [r3, #0]
 8007c60:	e7c5      	b.n	8007bee <_puts_r+0x42>
 8007c62:	4622      	mov	r2, r4
 8007c64:	4628      	mov	r0, r5
 8007c66:	f000 f817 	bl	8007c98 <__swbuf_r>
 8007c6a:	3001      	adds	r0, #1
 8007c6c:	d1bf      	bne.n	8007bee <_puts_r+0x42>
 8007c6e:	e7df      	b.n	8007c30 <_puts_r+0x84>
 8007c70:	6823      	ldr	r3, [r4, #0]
 8007c72:	250a      	movs	r5, #10
 8007c74:	1c5a      	adds	r2, r3, #1
 8007c76:	6022      	str	r2, [r4, #0]
 8007c78:	701d      	strb	r5, [r3, #0]
 8007c7a:	e7db      	b.n	8007c34 <_puts_r+0x88>
 8007c7c:	08009018 	.word	0x08009018
 8007c80:	08009038 	.word	0x08009038
 8007c84:	08008ff8 	.word	0x08008ff8

08007c88 <puts>:
 8007c88:	4b02      	ldr	r3, [pc, #8]	; (8007c94 <puts+0xc>)
 8007c8a:	4601      	mov	r1, r0
 8007c8c:	6818      	ldr	r0, [r3, #0]
 8007c8e:	f7ff bf8d 	b.w	8007bac <_puts_r>
 8007c92:	bf00      	nop
 8007c94:	200001e0 	.word	0x200001e0

08007c98 <__swbuf_r>:
 8007c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007c9a:	460e      	mov	r6, r1
 8007c9c:	4614      	mov	r4, r2
 8007c9e:	4605      	mov	r5, r0
 8007ca0:	b118      	cbz	r0, 8007caa <__swbuf_r+0x12>
 8007ca2:	6983      	ldr	r3, [r0, #24]
 8007ca4:	b90b      	cbnz	r3, 8007caa <__swbuf_r+0x12>
 8007ca6:	f000 f9d1 	bl	800804c <__sinit>
 8007caa:	4b21      	ldr	r3, [pc, #132]	; (8007d30 <__swbuf_r+0x98>)
 8007cac:	429c      	cmp	r4, r3
 8007cae:	d12b      	bne.n	8007d08 <__swbuf_r+0x70>
 8007cb0:	686c      	ldr	r4, [r5, #4]
 8007cb2:	69a3      	ldr	r3, [r4, #24]
 8007cb4:	60a3      	str	r3, [r4, #8]
 8007cb6:	89a3      	ldrh	r3, [r4, #12]
 8007cb8:	071a      	lsls	r2, r3, #28
 8007cba:	d52f      	bpl.n	8007d1c <__swbuf_r+0x84>
 8007cbc:	6923      	ldr	r3, [r4, #16]
 8007cbe:	b36b      	cbz	r3, 8007d1c <__swbuf_r+0x84>
 8007cc0:	6923      	ldr	r3, [r4, #16]
 8007cc2:	6820      	ldr	r0, [r4, #0]
 8007cc4:	1ac0      	subs	r0, r0, r3
 8007cc6:	6963      	ldr	r3, [r4, #20]
 8007cc8:	b2f6      	uxtb	r6, r6
 8007cca:	4283      	cmp	r3, r0
 8007ccc:	4637      	mov	r7, r6
 8007cce:	dc04      	bgt.n	8007cda <__swbuf_r+0x42>
 8007cd0:	4621      	mov	r1, r4
 8007cd2:	4628      	mov	r0, r5
 8007cd4:	f000 f926 	bl	8007f24 <_fflush_r>
 8007cd8:	bb30      	cbnz	r0, 8007d28 <__swbuf_r+0x90>
 8007cda:	68a3      	ldr	r3, [r4, #8]
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	60a3      	str	r3, [r4, #8]
 8007ce0:	6823      	ldr	r3, [r4, #0]
 8007ce2:	1c5a      	adds	r2, r3, #1
 8007ce4:	6022      	str	r2, [r4, #0]
 8007ce6:	701e      	strb	r6, [r3, #0]
 8007ce8:	6963      	ldr	r3, [r4, #20]
 8007cea:	3001      	adds	r0, #1
 8007cec:	4283      	cmp	r3, r0
 8007cee:	d004      	beq.n	8007cfa <__swbuf_r+0x62>
 8007cf0:	89a3      	ldrh	r3, [r4, #12]
 8007cf2:	07db      	lsls	r3, r3, #31
 8007cf4:	d506      	bpl.n	8007d04 <__swbuf_r+0x6c>
 8007cf6:	2e0a      	cmp	r6, #10
 8007cf8:	d104      	bne.n	8007d04 <__swbuf_r+0x6c>
 8007cfa:	4621      	mov	r1, r4
 8007cfc:	4628      	mov	r0, r5
 8007cfe:	f000 f911 	bl	8007f24 <_fflush_r>
 8007d02:	b988      	cbnz	r0, 8007d28 <__swbuf_r+0x90>
 8007d04:	4638      	mov	r0, r7
 8007d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d08:	4b0a      	ldr	r3, [pc, #40]	; (8007d34 <__swbuf_r+0x9c>)
 8007d0a:	429c      	cmp	r4, r3
 8007d0c:	d101      	bne.n	8007d12 <__swbuf_r+0x7a>
 8007d0e:	68ac      	ldr	r4, [r5, #8]
 8007d10:	e7cf      	b.n	8007cb2 <__swbuf_r+0x1a>
 8007d12:	4b09      	ldr	r3, [pc, #36]	; (8007d38 <__swbuf_r+0xa0>)
 8007d14:	429c      	cmp	r4, r3
 8007d16:	bf08      	it	eq
 8007d18:	68ec      	ldreq	r4, [r5, #12]
 8007d1a:	e7ca      	b.n	8007cb2 <__swbuf_r+0x1a>
 8007d1c:	4621      	mov	r1, r4
 8007d1e:	4628      	mov	r0, r5
 8007d20:	f000 f80c 	bl	8007d3c <__swsetup_r>
 8007d24:	2800      	cmp	r0, #0
 8007d26:	d0cb      	beq.n	8007cc0 <__swbuf_r+0x28>
 8007d28:	f04f 37ff 	mov.w	r7, #4294967295
 8007d2c:	e7ea      	b.n	8007d04 <__swbuf_r+0x6c>
 8007d2e:	bf00      	nop
 8007d30:	08009018 	.word	0x08009018
 8007d34:	08009038 	.word	0x08009038
 8007d38:	08008ff8 	.word	0x08008ff8

08007d3c <__swsetup_r>:
 8007d3c:	4b32      	ldr	r3, [pc, #200]	; (8007e08 <__swsetup_r+0xcc>)
 8007d3e:	b570      	push	{r4, r5, r6, lr}
 8007d40:	681d      	ldr	r5, [r3, #0]
 8007d42:	4606      	mov	r6, r0
 8007d44:	460c      	mov	r4, r1
 8007d46:	b125      	cbz	r5, 8007d52 <__swsetup_r+0x16>
 8007d48:	69ab      	ldr	r3, [r5, #24]
 8007d4a:	b913      	cbnz	r3, 8007d52 <__swsetup_r+0x16>
 8007d4c:	4628      	mov	r0, r5
 8007d4e:	f000 f97d 	bl	800804c <__sinit>
 8007d52:	4b2e      	ldr	r3, [pc, #184]	; (8007e0c <__swsetup_r+0xd0>)
 8007d54:	429c      	cmp	r4, r3
 8007d56:	d10f      	bne.n	8007d78 <__swsetup_r+0x3c>
 8007d58:	686c      	ldr	r4, [r5, #4]
 8007d5a:	89a3      	ldrh	r3, [r4, #12]
 8007d5c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d60:	0719      	lsls	r1, r3, #28
 8007d62:	d42c      	bmi.n	8007dbe <__swsetup_r+0x82>
 8007d64:	06dd      	lsls	r5, r3, #27
 8007d66:	d411      	bmi.n	8007d8c <__swsetup_r+0x50>
 8007d68:	2309      	movs	r3, #9
 8007d6a:	6033      	str	r3, [r6, #0]
 8007d6c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007d70:	81a3      	strh	r3, [r4, #12]
 8007d72:	f04f 30ff 	mov.w	r0, #4294967295
 8007d76:	e03e      	b.n	8007df6 <__swsetup_r+0xba>
 8007d78:	4b25      	ldr	r3, [pc, #148]	; (8007e10 <__swsetup_r+0xd4>)
 8007d7a:	429c      	cmp	r4, r3
 8007d7c:	d101      	bne.n	8007d82 <__swsetup_r+0x46>
 8007d7e:	68ac      	ldr	r4, [r5, #8]
 8007d80:	e7eb      	b.n	8007d5a <__swsetup_r+0x1e>
 8007d82:	4b24      	ldr	r3, [pc, #144]	; (8007e14 <__swsetup_r+0xd8>)
 8007d84:	429c      	cmp	r4, r3
 8007d86:	bf08      	it	eq
 8007d88:	68ec      	ldreq	r4, [r5, #12]
 8007d8a:	e7e6      	b.n	8007d5a <__swsetup_r+0x1e>
 8007d8c:	0758      	lsls	r0, r3, #29
 8007d8e:	d512      	bpl.n	8007db6 <__swsetup_r+0x7a>
 8007d90:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007d92:	b141      	cbz	r1, 8007da6 <__swsetup_r+0x6a>
 8007d94:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007d98:	4299      	cmp	r1, r3
 8007d9a:	d002      	beq.n	8007da2 <__swsetup_r+0x66>
 8007d9c:	4630      	mov	r0, r6
 8007d9e:	f000 fa59 	bl	8008254 <_free_r>
 8007da2:	2300      	movs	r3, #0
 8007da4:	6363      	str	r3, [r4, #52]	; 0x34
 8007da6:	89a3      	ldrh	r3, [r4, #12]
 8007da8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007dac:	81a3      	strh	r3, [r4, #12]
 8007dae:	2300      	movs	r3, #0
 8007db0:	6063      	str	r3, [r4, #4]
 8007db2:	6923      	ldr	r3, [r4, #16]
 8007db4:	6023      	str	r3, [r4, #0]
 8007db6:	89a3      	ldrh	r3, [r4, #12]
 8007db8:	f043 0308 	orr.w	r3, r3, #8
 8007dbc:	81a3      	strh	r3, [r4, #12]
 8007dbe:	6923      	ldr	r3, [r4, #16]
 8007dc0:	b94b      	cbnz	r3, 8007dd6 <__swsetup_r+0x9a>
 8007dc2:	89a3      	ldrh	r3, [r4, #12]
 8007dc4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007dc8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007dcc:	d003      	beq.n	8007dd6 <__swsetup_r+0x9a>
 8007dce:	4621      	mov	r1, r4
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 f9ff 	bl	80081d4 <__smakebuf_r>
 8007dd6:	89a0      	ldrh	r0, [r4, #12]
 8007dd8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007ddc:	f010 0301 	ands.w	r3, r0, #1
 8007de0:	d00a      	beq.n	8007df8 <__swsetup_r+0xbc>
 8007de2:	2300      	movs	r3, #0
 8007de4:	60a3      	str	r3, [r4, #8]
 8007de6:	6963      	ldr	r3, [r4, #20]
 8007de8:	425b      	negs	r3, r3
 8007dea:	61a3      	str	r3, [r4, #24]
 8007dec:	6923      	ldr	r3, [r4, #16]
 8007dee:	b943      	cbnz	r3, 8007e02 <__swsetup_r+0xc6>
 8007df0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007df4:	d1ba      	bne.n	8007d6c <__swsetup_r+0x30>
 8007df6:	bd70      	pop	{r4, r5, r6, pc}
 8007df8:	0781      	lsls	r1, r0, #30
 8007dfa:	bf58      	it	pl
 8007dfc:	6963      	ldrpl	r3, [r4, #20]
 8007dfe:	60a3      	str	r3, [r4, #8]
 8007e00:	e7f4      	b.n	8007dec <__swsetup_r+0xb0>
 8007e02:	2000      	movs	r0, #0
 8007e04:	e7f7      	b.n	8007df6 <__swsetup_r+0xba>
 8007e06:	bf00      	nop
 8007e08:	200001e0 	.word	0x200001e0
 8007e0c:	08009018 	.word	0x08009018
 8007e10:	08009038 	.word	0x08009038
 8007e14:	08008ff8 	.word	0x08008ff8

08007e18 <__sflush_r>:
 8007e18:	898a      	ldrh	r2, [r1, #12]
 8007e1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e1e:	4605      	mov	r5, r0
 8007e20:	0710      	lsls	r0, r2, #28
 8007e22:	460c      	mov	r4, r1
 8007e24:	d458      	bmi.n	8007ed8 <__sflush_r+0xc0>
 8007e26:	684b      	ldr	r3, [r1, #4]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	dc05      	bgt.n	8007e38 <__sflush_r+0x20>
 8007e2c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	dc02      	bgt.n	8007e38 <__sflush_r+0x20>
 8007e32:	2000      	movs	r0, #0
 8007e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e38:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e3a:	2e00      	cmp	r6, #0
 8007e3c:	d0f9      	beq.n	8007e32 <__sflush_r+0x1a>
 8007e3e:	2300      	movs	r3, #0
 8007e40:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e44:	682f      	ldr	r7, [r5, #0]
 8007e46:	602b      	str	r3, [r5, #0]
 8007e48:	d032      	beq.n	8007eb0 <__sflush_r+0x98>
 8007e4a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007e4c:	89a3      	ldrh	r3, [r4, #12]
 8007e4e:	075a      	lsls	r2, r3, #29
 8007e50:	d505      	bpl.n	8007e5e <__sflush_r+0x46>
 8007e52:	6863      	ldr	r3, [r4, #4]
 8007e54:	1ac0      	subs	r0, r0, r3
 8007e56:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007e58:	b10b      	cbz	r3, 8007e5e <__sflush_r+0x46>
 8007e5a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007e5c:	1ac0      	subs	r0, r0, r3
 8007e5e:	2300      	movs	r3, #0
 8007e60:	4602      	mov	r2, r0
 8007e62:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e64:	6a21      	ldr	r1, [r4, #32]
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b0      	blx	r6
 8007e6a:	1c43      	adds	r3, r0, #1
 8007e6c:	89a3      	ldrh	r3, [r4, #12]
 8007e6e:	d106      	bne.n	8007e7e <__sflush_r+0x66>
 8007e70:	6829      	ldr	r1, [r5, #0]
 8007e72:	291d      	cmp	r1, #29
 8007e74:	d82c      	bhi.n	8007ed0 <__sflush_r+0xb8>
 8007e76:	4a2a      	ldr	r2, [pc, #168]	; (8007f20 <__sflush_r+0x108>)
 8007e78:	40ca      	lsrs	r2, r1
 8007e7a:	07d6      	lsls	r6, r2, #31
 8007e7c:	d528      	bpl.n	8007ed0 <__sflush_r+0xb8>
 8007e7e:	2200      	movs	r2, #0
 8007e80:	6062      	str	r2, [r4, #4]
 8007e82:	04d9      	lsls	r1, r3, #19
 8007e84:	6922      	ldr	r2, [r4, #16]
 8007e86:	6022      	str	r2, [r4, #0]
 8007e88:	d504      	bpl.n	8007e94 <__sflush_r+0x7c>
 8007e8a:	1c42      	adds	r2, r0, #1
 8007e8c:	d101      	bne.n	8007e92 <__sflush_r+0x7a>
 8007e8e:	682b      	ldr	r3, [r5, #0]
 8007e90:	b903      	cbnz	r3, 8007e94 <__sflush_r+0x7c>
 8007e92:	6560      	str	r0, [r4, #84]	; 0x54
 8007e94:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e96:	602f      	str	r7, [r5, #0]
 8007e98:	2900      	cmp	r1, #0
 8007e9a:	d0ca      	beq.n	8007e32 <__sflush_r+0x1a>
 8007e9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ea0:	4299      	cmp	r1, r3
 8007ea2:	d002      	beq.n	8007eaa <__sflush_r+0x92>
 8007ea4:	4628      	mov	r0, r5
 8007ea6:	f000 f9d5 	bl	8008254 <_free_r>
 8007eaa:	2000      	movs	r0, #0
 8007eac:	6360      	str	r0, [r4, #52]	; 0x34
 8007eae:	e7c1      	b.n	8007e34 <__sflush_r+0x1c>
 8007eb0:	6a21      	ldr	r1, [r4, #32]
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	4628      	mov	r0, r5
 8007eb6:	47b0      	blx	r6
 8007eb8:	1c41      	adds	r1, r0, #1
 8007eba:	d1c7      	bne.n	8007e4c <__sflush_r+0x34>
 8007ebc:	682b      	ldr	r3, [r5, #0]
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d0c4      	beq.n	8007e4c <__sflush_r+0x34>
 8007ec2:	2b1d      	cmp	r3, #29
 8007ec4:	d001      	beq.n	8007eca <__sflush_r+0xb2>
 8007ec6:	2b16      	cmp	r3, #22
 8007ec8:	d101      	bne.n	8007ece <__sflush_r+0xb6>
 8007eca:	602f      	str	r7, [r5, #0]
 8007ecc:	e7b1      	b.n	8007e32 <__sflush_r+0x1a>
 8007ece:	89a3      	ldrh	r3, [r4, #12]
 8007ed0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ed4:	81a3      	strh	r3, [r4, #12]
 8007ed6:	e7ad      	b.n	8007e34 <__sflush_r+0x1c>
 8007ed8:	690f      	ldr	r7, [r1, #16]
 8007eda:	2f00      	cmp	r7, #0
 8007edc:	d0a9      	beq.n	8007e32 <__sflush_r+0x1a>
 8007ede:	0793      	lsls	r3, r2, #30
 8007ee0:	680e      	ldr	r6, [r1, #0]
 8007ee2:	bf08      	it	eq
 8007ee4:	694b      	ldreq	r3, [r1, #20]
 8007ee6:	600f      	str	r7, [r1, #0]
 8007ee8:	bf18      	it	ne
 8007eea:	2300      	movne	r3, #0
 8007eec:	eba6 0807 	sub.w	r8, r6, r7
 8007ef0:	608b      	str	r3, [r1, #8]
 8007ef2:	f1b8 0f00 	cmp.w	r8, #0
 8007ef6:	dd9c      	ble.n	8007e32 <__sflush_r+0x1a>
 8007ef8:	6a21      	ldr	r1, [r4, #32]
 8007efa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007efc:	4643      	mov	r3, r8
 8007efe:	463a      	mov	r2, r7
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b0      	blx	r6
 8007f04:	2800      	cmp	r0, #0
 8007f06:	dc06      	bgt.n	8007f16 <__sflush_r+0xfe>
 8007f08:	89a3      	ldrh	r3, [r4, #12]
 8007f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f0e:	81a3      	strh	r3, [r4, #12]
 8007f10:	f04f 30ff 	mov.w	r0, #4294967295
 8007f14:	e78e      	b.n	8007e34 <__sflush_r+0x1c>
 8007f16:	4407      	add	r7, r0
 8007f18:	eba8 0800 	sub.w	r8, r8, r0
 8007f1c:	e7e9      	b.n	8007ef2 <__sflush_r+0xda>
 8007f1e:	bf00      	nop
 8007f20:	20400001 	.word	0x20400001

08007f24 <_fflush_r>:
 8007f24:	b538      	push	{r3, r4, r5, lr}
 8007f26:	690b      	ldr	r3, [r1, #16]
 8007f28:	4605      	mov	r5, r0
 8007f2a:	460c      	mov	r4, r1
 8007f2c:	b913      	cbnz	r3, 8007f34 <_fflush_r+0x10>
 8007f2e:	2500      	movs	r5, #0
 8007f30:	4628      	mov	r0, r5
 8007f32:	bd38      	pop	{r3, r4, r5, pc}
 8007f34:	b118      	cbz	r0, 8007f3e <_fflush_r+0x1a>
 8007f36:	6983      	ldr	r3, [r0, #24]
 8007f38:	b90b      	cbnz	r3, 8007f3e <_fflush_r+0x1a>
 8007f3a:	f000 f887 	bl	800804c <__sinit>
 8007f3e:	4b14      	ldr	r3, [pc, #80]	; (8007f90 <_fflush_r+0x6c>)
 8007f40:	429c      	cmp	r4, r3
 8007f42:	d11b      	bne.n	8007f7c <_fflush_r+0x58>
 8007f44:	686c      	ldr	r4, [r5, #4]
 8007f46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0ef      	beq.n	8007f2e <_fflush_r+0xa>
 8007f4e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007f50:	07d0      	lsls	r0, r2, #31
 8007f52:	d404      	bmi.n	8007f5e <_fflush_r+0x3a>
 8007f54:	0599      	lsls	r1, r3, #22
 8007f56:	d402      	bmi.n	8007f5e <_fflush_r+0x3a>
 8007f58:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f5a:	f000 f915 	bl	8008188 <__retarget_lock_acquire_recursive>
 8007f5e:	4628      	mov	r0, r5
 8007f60:	4621      	mov	r1, r4
 8007f62:	f7ff ff59 	bl	8007e18 <__sflush_r>
 8007f66:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007f68:	07da      	lsls	r2, r3, #31
 8007f6a:	4605      	mov	r5, r0
 8007f6c:	d4e0      	bmi.n	8007f30 <_fflush_r+0xc>
 8007f6e:	89a3      	ldrh	r3, [r4, #12]
 8007f70:	059b      	lsls	r3, r3, #22
 8007f72:	d4dd      	bmi.n	8007f30 <_fflush_r+0xc>
 8007f74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007f76:	f000 f908 	bl	800818a <__retarget_lock_release_recursive>
 8007f7a:	e7d9      	b.n	8007f30 <_fflush_r+0xc>
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <_fflush_r+0x70>)
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d101      	bne.n	8007f86 <_fflush_r+0x62>
 8007f82:	68ac      	ldr	r4, [r5, #8]
 8007f84:	e7df      	b.n	8007f46 <_fflush_r+0x22>
 8007f86:	4b04      	ldr	r3, [pc, #16]	; (8007f98 <_fflush_r+0x74>)
 8007f88:	429c      	cmp	r4, r3
 8007f8a:	bf08      	it	eq
 8007f8c:	68ec      	ldreq	r4, [r5, #12]
 8007f8e:	e7da      	b.n	8007f46 <_fflush_r+0x22>
 8007f90:	08009018 	.word	0x08009018
 8007f94:	08009038 	.word	0x08009038
 8007f98:	08008ff8 	.word	0x08008ff8

08007f9c <std>:
 8007f9c:	2300      	movs	r3, #0
 8007f9e:	b510      	push	{r4, lr}
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fa6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007faa:	6083      	str	r3, [r0, #8]
 8007fac:	8181      	strh	r1, [r0, #12]
 8007fae:	6643      	str	r3, [r0, #100]	; 0x64
 8007fb0:	81c2      	strh	r2, [r0, #14]
 8007fb2:	6183      	str	r3, [r0, #24]
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	2208      	movs	r2, #8
 8007fb8:	305c      	adds	r0, #92	; 0x5c
 8007fba:	f7ff fdef 	bl	8007b9c <memset>
 8007fbe:	4b05      	ldr	r3, [pc, #20]	; (8007fd4 <std+0x38>)
 8007fc0:	6263      	str	r3, [r4, #36]	; 0x24
 8007fc2:	4b05      	ldr	r3, [pc, #20]	; (8007fd8 <std+0x3c>)
 8007fc4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007fc6:	4b05      	ldr	r3, [pc, #20]	; (8007fdc <std+0x40>)
 8007fc8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007fca:	4b05      	ldr	r3, [pc, #20]	; (8007fe0 <std+0x44>)
 8007fcc:	6224      	str	r4, [r4, #32]
 8007fce:	6323      	str	r3, [r4, #48]	; 0x30
 8007fd0:	bd10      	pop	{r4, pc}
 8007fd2:	bf00      	nop
 8007fd4:	080083c9 	.word	0x080083c9
 8007fd8:	080083eb 	.word	0x080083eb
 8007fdc:	08008423 	.word	0x08008423
 8007fe0:	08008447 	.word	0x08008447

08007fe4 <_cleanup_r>:
 8007fe4:	4901      	ldr	r1, [pc, #4]	; (8007fec <_cleanup_r+0x8>)
 8007fe6:	f000 b8af 	b.w	8008148 <_fwalk_reent>
 8007fea:	bf00      	nop
 8007fec:	08007f25 	.word	0x08007f25

08007ff0 <__sfmoreglue>:
 8007ff0:	b570      	push	{r4, r5, r6, lr}
 8007ff2:	1e4a      	subs	r2, r1, #1
 8007ff4:	2568      	movs	r5, #104	; 0x68
 8007ff6:	4355      	muls	r5, r2
 8007ff8:	460e      	mov	r6, r1
 8007ffa:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007ffe:	f000 f979 	bl	80082f4 <_malloc_r>
 8008002:	4604      	mov	r4, r0
 8008004:	b140      	cbz	r0, 8008018 <__sfmoreglue+0x28>
 8008006:	2100      	movs	r1, #0
 8008008:	e9c0 1600 	strd	r1, r6, [r0]
 800800c:	300c      	adds	r0, #12
 800800e:	60a0      	str	r0, [r4, #8]
 8008010:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008014:	f7ff fdc2 	bl	8007b9c <memset>
 8008018:	4620      	mov	r0, r4
 800801a:	bd70      	pop	{r4, r5, r6, pc}

0800801c <__sfp_lock_acquire>:
 800801c:	4801      	ldr	r0, [pc, #4]	; (8008024 <__sfp_lock_acquire+0x8>)
 800801e:	f000 b8b3 	b.w	8008188 <__retarget_lock_acquire_recursive>
 8008022:	bf00      	nop
 8008024:	20000d5c 	.word	0x20000d5c

08008028 <__sfp_lock_release>:
 8008028:	4801      	ldr	r0, [pc, #4]	; (8008030 <__sfp_lock_release+0x8>)
 800802a:	f000 b8ae 	b.w	800818a <__retarget_lock_release_recursive>
 800802e:	bf00      	nop
 8008030:	20000d5c 	.word	0x20000d5c

08008034 <__sinit_lock_acquire>:
 8008034:	4801      	ldr	r0, [pc, #4]	; (800803c <__sinit_lock_acquire+0x8>)
 8008036:	f000 b8a7 	b.w	8008188 <__retarget_lock_acquire_recursive>
 800803a:	bf00      	nop
 800803c:	20000d57 	.word	0x20000d57

08008040 <__sinit_lock_release>:
 8008040:	4801      	ldr	r0, [pc, #4]	; (8008048 <__sinit_lock_release+0x8>)
 8008042:	f000 b8a2 	b.w	800818a <__retarget_lock_release_recursive>
 8008046:	bf00      	nop
 8008048:	20000d57 	.word	0x20000d57

0800804c <__sinit>:
 800804c:	b510      	push	{r4, lr}
 800804e:	4604      	mov	r4, r0
 8008050:	f7ff fff0 	bl	8008034 <__sinit_lock_acquire>
 8008054:	69a3      	ldr	r3, [r4, #24]
 8008056:	b11b      	cbz	r3, 8008060 <__sinit+0x14>
 8008058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800805c:	f7ff bff0 	b.w	8008040 <__sinit_lock_release>
 8008060:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008064:	6523      	str	r3, [r4, #80]	; 0x50
 8008066:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <__sinit+0x68>)
 8008068:	4a13      	ldr	r2, [pc, #76]	; (80080b8 <__sinit+0x6c>)
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	62a2      	str	r2, [r4, #40]	; 0x28
 800806e:	42a3      	cmp	r3, r4
 8008070:	bf04      	itt	eq
 8008072:	2301      	moveq	r3, #1
 8008074:	61a3      	streq	r3, [r4, #24]
 8008076:	4620      	mov	r0, r4
 8008078:	f000 f820 	bl	80080bc <__sfp>
 800807c:	6060      	str	r0, [r4, #4]
 800807e:	4620      	mov	r0, r4
 8008080:	f000 f81c 	bl	80080bc <__sfp>
 8008084:	60a0      	str	r0, [r4, #8]
 8008086:	4620      	mov	r0, r4
 8008088:	f000 f818 	bl	80080bc <__sfp>
 800808c:	2200      	movs	r2, #0
 800808e:	60e0      	str	r0, [r4, #12]
 8008090:	2104      	movs	r1, #4
 8008092:	6860      	ldr	r0, [r4, #4]
 8008094:	f7ff ff82 	bl	8007f9c <std>
 8008098:	68a0      	ldr	r0, [r4, #8]
 800809a:	2201      	movs	r2, #1
 800809c:	2109      	movs	r1, #9
 800809e:	f7ff ff7d 	bl	8007f9c <std>
 80080a2:	68e0      	ldr	r0, [r4, #12]
 80080a4:	2202      	movs	r2, #2
 80080a6:	2112      	movs	r1, #18
 80080a8:	f7ff ff78 	bl	8007f9c <std>
 80080ac:	2301      	movs	r3, #1
 80080ae:	61a3      	str	r3, [r4, #24]
 80080b0:	e7d2      	b.n	8008058 <__sinit+0xc>
 80080b2:	bf00      	nop
 80080b4:	08008ff4 	.word	0x08008ff4
 80080b8:	08007fe5 	.word	0x08007fe5

080080bc <__sfp>:
 80080bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080be:	4607      	mov	r7, r0
 80080c0:	f7ff ffac 	bl	800801c <__sfp_lock_acquire>
 80080c4:	4b1e      	ldr	r3, [pc, #120]	; (8008140 <__sfp+0x84>)
 80080c6:	681e      	ldr	r6, [r3, #0]
 80080c8:	69b3      	ldr	r3, [r6, #24]
 80080ca:	b913      	cbnz	r3, 80080d2 <__sfp+0x16>
 80080cc:	4630      	mov	r0, r6
 80080ce:	f7ff ffbd 	bl	800804c <__sinit>
 80080d2:	3648      	adds	r6, #72	; 0x48
 80080d4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80080d8:	3b01      	subs	r3, #1
 80080da:	d503      	bpl.n	80080e4 <__sfp+0x28>
 80080dc:	6833      	ldr	r3, [r6, #0]
 80080de:	b30b      	cbz	r3, 8008124 <__sfp+0x68>
 80080e0:	6836      	ldr	r6, [r6, #0]
 80080e2:	e7f7      	b.n	80080d4 <__sfp+0x18>
 80080e4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80080e8:	b9d5      	cbnz	r5, 8008120 <__sfp+0x64>
 80080ea:	4b16      	ldr	r3, [pc, #88]	; (8008144 <__sfp+0x88>)
 80080ec:	60e3      	str	r3, [r4, #12]
 80080ee:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80080f2:	6665      	str	r5, [r4, #100]	; 0x64
 80080f4:	f000 f847 	bl	8008186 <__retarget_lock_init_recursive>
 80080f8:	f7ff ff96 	bl	8008028 <__sfp_lock_release>
 80080fc:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008100:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008104:	6025      	str	r5, [r4, #0]
 8008106:	61a5      	str	r5, [r4, #24]
 8008108:	2208      	movs	r2, #8
 800810a:	4629      	mov	r1, r5
 800810c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008110:	f7ff fd44 	bl	8007b9c <memset>
 8008114:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008118:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800811c:	4620      	mov	r0, r4
 800811e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008120:	3468      	adds	r4, #104	; 0x68
 8008122:	e7d9      	b.n	80080d8 <__sfp+0x1c>
 8008124:	2104      	movs	r1, #4
 8008126:	4638      	mov	r0, r7
 8008128:	f7ff ff62 	bl	8007ff0 <__sfmoreglue>
 800812c:	4604      	mov	r4, r0
 800812e:	6030      	str	r0, [r6, #0]
 8008130:	2800      	cmp	r0, #0
 8008132:	d1d5      	bne.n	80080e0 <__sfp+0x24>
 8008134:	f7ff ff78 	bl	8008028 <__sfp_lock_release>
 8008138:	230c      	movs	r3, #12
 800813a:	603b      	str	r3, [r7, #0]
 800813c:	e7ee      	b.n	800811c <__sfp+0x60>
 800813e:	bf00      	nop
 8008140:	08008ff4 	.word	0x08008ff4
 8008144:	ffff0001 	.word	0xffff0001

08008148 <_fwalk_reent>:
 8008148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800814c:	4606      	mov	r6, r0
 800814e:	4688      	mov	r8, r1
 8008150:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008154:	2700      	movs	r7, #0
 8008156:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800815a:	f1b9 0901 	subs.w	r9, r9, #1
 800815e:	d505      	bpl.n	800816c <_fwalk_reent+0x24>
 8008160:	6824      	ldr	r4, [r4, #0]
 8008162:	2c00      	cmp	r4, #0
 8008164:	d1f7      	bne.n	8008156 <_fwalk_reent+0xe>
 8008166:	4638      	mov	r0, r7
 8008168:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800816c:	89ab      	ldrh	r3, [r5, #12]
 800816e:	2b01      	cmp	r3, #1
 8008170:	d907      	bls.n	8008182 <_fwalk_reent+0x3a>
 8008172:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008176:	3301      	adds	r3, #1
 8008178:	d003      	beq.n	8008182 <_fwalk_reent+0x3a>
 800817a:	4629      	mov	r1, r5
 800817c:	4630      	mov	r0, r6
 800817e:	47c0      	blx	r8
 8008180:	4307      	orrs	r7, r0
 8008182:	3568      	adds	r5, #104	; 0x68
 8008184:	e7e9      	b.n	800815a <_fwalk_reent+0x12>

08008186 <__retarget_lock_init_recursive>:
 8008186:	4770      	bx	lr

08008188 <__retarget_lock_acquire_recursive>:
 8008188:	4770      	bx	lr

0800818a <__retarget_lock_release_recursive>:
 800818a:	4770      	bx	lr

0800818c <__swhatbuf_r>:
 800818c:	b570      	push	{r4, r5, r6, lr}
 800818e:	460e      	mov	r6, r1
 8008190:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008194:	2900      	cmp	r1, #0
 8008196:	b096      	sub	sp, #88	; 0x58
 8008198:	4614      	mov	r4, r2
 800819a:	461d      	mov	r5, r3
 800819c:	da07      	bge.n	80081ae <__swhatbuf_r+0x22>
 800819e:	2300      	movs	r3, #0
 80081a0:	602b      	str	r3, [r5, #0]
 80081a2:	89b3      	ldrh	r3, [r6, #12]
 80081a4:	061a      	lsls	r2, r3, #24
 80081a6:	d410      	bmi.n	80081ca <__swhatbuf_r+0x3e>
 80081a8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081ac:	e00e      	b.n	80081cc <__swhatbuf_r+0x40>
 80081ae:	466a      	mov	r2, sp
 80081b0:	f000 f970 	bl	8008494 <_fstat_r>
 80081b4:	2800      	cmp	r0, #0
 80081b6:	dbf2      	blt.n	800819e <__swhatbuf_r+0x12>
 80081b8:	9a01      	ldr	r2, [sp, #4]
 80081ba:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081be:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081c2:	425a      	negs	r2, r3
 80081c4:	415a      	adcs	r2, r3
 80081c6:	602a      	str	r2, [r5, #0]
 80081c8:	e7ee      	b.n	80081a8 <__swhatbuf_r+0x1c>
 80081ca:	2340      	movs	r3, #64	; 0x40
 80081cc:	2000      	movs	r0, #0
 80081ce:	6023      	str	r3, [r4, #0]
 80081d0:	b016      	add	sp, #88	; 0x58
 80081d2:	bd70      	pop	{r4, r5, r6, pc}

080081d4 <__smakebuf_r>:
 80081d4:	898b      	ldrh	r3, [r1, #12]
 80081d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081d8:	079d      	lsls	r5, r3, #30
 80081da:	4606      	mov	r6, r0
 80081dc:	460c      	mov	r4, r1
 80081de:	d507      	bpl.n	80081f0 <__smakebuf_r+0x1c>
 80081e0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80081e4:	6023      	str	r3, [r4, #0]
 80081e6:	6123      	str	r3, [r4, #16]
 80081e8:	2301      	movs	r3, #1
 80081ea:	6163      	str	r3, [r4, #20]
 80081ec:	b002      	add	sp, #8
 80081ee:	bd70      	pop	{r4, r5, r6, pc}
 80081f0:	ab01      	add	r3, sp, #4
 80081f2:	466a      	mov	r2, sp
 80081f4:	f7ff ffca 	bl	800818c <__swhatbuf_r>
 80081f8:	9900      	ldr	r1, [sp, #0]
 80081fa:	4605      	mov	r5, r0
 80081fc:	4630      	mov	r0, r6
 80081fe:	f000 f879 	bl	80082f4 <_malloc_r>
 8008202:	b948      	cbnz	r0, 8008218 <__smakebuf_r+0x44>
 8008204:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008208:	059a      	lsls	r2, r3, #22
 800820a:	d4ef      	bmi.n	80081ec <__smakebuf_r+0x18>
 800820c:	f023 0303 	bic.w	r3, r3, #3
 8008210:	f043 0302 	orr.w	r3, r3, #2
 8008214:	81a3      	strh	r3, [r4, #12]
 8008216:	e7e3      	b.n	80081e0 <__smakebuf_r+0xc>
 8008218:	4b0d      	ldr	r3, [pc, #52]	; (8008250 <__smakebuf_r+0x7c>)
 800821a:	62b3      	str	r3, [r6, #40]	; 0x28
 800821c:	89a3      	ldrh	r3, [r4, #12]
 800821e:	6020      	str	r0, [r4, #0]
 8008220:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	9b00      	ldr	r3, [sp, #0]
 8008228:	6163      	str	r3, [r4, #20]
 800822a:	9b01      	ldr	r3, [sp, #4]
 800822c:	6120      	str	r0, [r4, #16]
 800822e:	b15b      	cbz	r3, 8008248 <__smakebuf_r+0x74>
 8008230:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008234:	4630      	mov	r0, r6
 8008236:	f000 f93f 	bl	80084b8 <_isatty_r>
 800823a:	b128      	cbz	r0, 8008248 <__smakebuf_r+0x74>
 800823c:	89a3      	ldrh	r3, [r4, #12]
 800823e:	f023 0303 	bic.w	r3, r3, #3
 8008242:	f043 0301 	orr.w	r3, r3, #1
 8008246:	81a3      	strh	r3, [r4, #12]
 8008248:	89a0      	ldrh	r0, [r4, #12]
 800824a:	4305      	orrs	r5, r0
 800824c:	81a5      	strh	r5, [r4, #12]
 800824e:	e7cd      	b.n	80081ec <__smakebuf_r+0x18>
 8008250:	08007fe5 	.word	0x08007fe5

08008254 <_free_r>:
 8008254:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008256:	2900      	cmp	r1, #0
 8008258:	d048      	beq.n	80082ec <_free_r+0x98>
 800825a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800825e:	9001      	str	r0, [sp, #4]
 8008260:	2b00      	cmp	r3, #0
 8008262:	f1a1 0404 	sub.w	r4, r1, #4
 8008266:	bfb8      	it	lt
 8008268:	18e4      	addlt	r4, r4, r3
 800826a:	f000 f947 	bl	80084fc <__malloc_lock>
 800826e:	4a20      	ldr	r2, [pc, #128]	; (80082f0 <_free_r+0x9c>)
 8008270:	9801      	ldr	r0, [sp, #4]
 8008272:	6813      	ldr	r3, [r2, #0]
 8008274:	4615      	mov	r5, r2
 8008276:	b933      	cbnz	r3, 8008286 <_free_r+0x32>
 8008278:	6063      	str	r3, [r4, #4]
 800827a:	6014      	str	r4, [r2, #0]
 800827c:	b003      	add	sp, #12
 800827e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008282:	f000 b941 	b.w	8008508 <__malloc_unlock>
 8008286:	42a3      	cmp	r3, r4
 8008288:	d90b      	bls.n	80082a2 <_free_r+0x4e>
 800828a:	6821      	ldr	r1, [r4, #0]
 800828c:	1862      	adds	r2, r4, r1
 800828e:	4293      	cmp	r3, r2
 8008290:	bf04      	itt	eq
 8008292:	681a      	ldreq	r2, [r3, #0]
 8008294:	685b      	ldreq	r3, [r3, #4]
 8008296:	6063      	str	r3, [r4, #4]
 8008298:	bf04      	itt	eq
 800829a:	1852      	addeq	r2, r2, r1
 800829c:	6022      	streq	r2, [r4, #0]
 800829e:	602c      	str	r4, [r5, #0]
 80082a0:	e7ec      	b.n	800827c <_free_r+0x28>
 80082a2:	461a      	mov	r2, r3
 80082a4:	685b      	ldr	r3, [r3, #4]
 80082a6:	b10b      	cbz	r3, 80082ac <_free_r+0x58>
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	d9fa      	bls.n	80082a2 <_free_r+0x4e>
 80082ac:	6811      	ldr	r1, [r2, #0]
 80082ae:	1855      	adds	r5, r2, r1
 80082b0:	42a5      	cmp	r5, r4
 80082b2:	d10b      	bne.n	80082cc <_free_r+0x78>
 80082b4:	6824      	ldr	r4, [r4, #0]
 80082b6:	4421      	add	r1, r4
 80082b8:	1854      	adds	r4, r2, r1
 80082ba:	42a3      	cmp	r3, r4
 80082bc:	6011      	str	r1, [r2, #0]
 80082be:	d1dd      	bne.n	800827c <_free_r+0x28>
 80082c0:	681c      	ldr	r4, [r3, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	6053      	str	r3, [r2, #4]
 80082c6:	4421      	add	r1, r4
 80082c8:	6011      	str	r1, [r2, #0]
 80082ca:	e7d7      	b.n	800827c <_free_r+0x28>
 80082cc:	d902      	bls.n	80082d4 <_free_r+0x80>
 80082ce:	230c      	movs	r3, #12
 80082d0:	6003      	str	r3, [r0, #0]
 80082d2:	e7d3      	b.n	800827c <_free_r+0x28>
 80082d4:	6825      	ldr	r5, [r4, #0]
 80082d6:	1961      	adds	r1, r4, r5
 80082d8:	428b      	cmp	r3, r1
 80082da:	bf04      	itt	eq
 80082dc:	6819      	ldreq	r1, [r3, #0]
 80082de:	685b      	ldreq	r3, [r3, #4]
 80082e0:	6063      	str	r3, [r4, #4]
 80082e2:	bf04      	itt	eq
 80082e4:	1949      	addeq	r1, r1, r5
 80082e6:	6021      	streq	r1, [r4, #0]
 80082e8:	6054      	str	r4, [r2, #4]
 80082ea:	e7c7      	b.n	800827c <_free_r+0x28>
 80082ec:	b003      	add	sp, #12
 80082ee:	bd30      	pop	{r4, r5, pc}
 80082f0:	200002f4 	.word	0x200002f4

080082f4 <_malloc_r>:
 80082f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082f6:	1ccd      	adds	r5, r1, #3
 80082f8:	f025 0503 	bic.w	r5, r5, #3
 80082fc:	3508      	adds	r5, #8
 80082fe:	2d0c      	cmp	r5, #12
 8008300:	bf38      	it	cc
 8008302:	250c      	movcc	r5, #12
 8008304:	2d00      	cmp	r5, #0
 8008306:	4606      	mov	r6, r0
 8008308:	db01      	blt.n	800830e <_malloc_r+0x1a>
 800830a:	42a9      	cmp	r1, r5
 800830c:	d903      	bls.n	8008316 <_malloc_r+0x22>
 800830e:	230c      	movs	r3, #12
 8008310:	6033      	str	r3, [r6, #0]
 8008312:	2000      	movs	r0, #0
 8008314:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008316:	f000 f8f1 	bl	80084fc <__malloc_lock>
 800831a:	4921      	ldr	r1, [pc, #132]	; (80083a0 <_malloc_r+0xac>)
 800831c:	680a      	ldr	r2, [r1, #0]
 800831e:	4614      	mov	r4, r2
 8008320:	b99c      	cbnz	r4, 800834a <_malloc_r+0x56>
 8008322:	4f20      	ldr	r7, [pc, #128]	; (80083a4 <_malloc_r+0xb0>)
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	b923      	cbnz	r3, 8008332 <_malloc_r+0x3e>
 8008328:	4621      	mov	r1, r4
 800832a:	4630      	mov	r0, r6
 800832c:	f000 f83c 	bl	80083a8 <_sbrk_r>
 8008330:	6038      	str	r0, [r7, #0]
 8008332:	4629      	mov	r1, r5
 8008334:	4630      	mov	r0, r6
 8008336:	f000 f837 	bl	80083a8 <_sbrk_r>
 800833a:	1c43      	adds	r3, r0, #1
 800833c:	d123      	bne.n	8008386 <_malloc_r+0x92>
 800833e:	230c      	movs	r3, #12
 8008340:	6033      	str	r3, [r6, #0]
 8008342:	4630      	mov	r0, r6
 8008344:	f000 f8e0 	bl	8008508 <__malloc_unlock>
 8008348:	e7e3      	b.n	8008312 <_malloc_r+0x1e>
 800834a:	6823      	ldr	r3, [r4, #0]
 800834c:	1b5b      	subs	r3, r3, r5
 800834e:	d417      	bmi.n	8008380 <_malloc_r+0x8c>
 8008350:	2b0b      	cmp	r3, #11
 8008352:	d903      	bls.n	800835c <_malloc_r+0x68>
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	441c      	add	r4, r3
 8008358:	6025      	str	r5, [r4, #0]
 800835a:	e004      	b.n	8008366 <_malloc_r+0x72>
 800835c:	6863      	ldr	r3, [r4, #4]
 800835e:	42a2      	cmp	r2, r4
 8008360:	bf0c      	ite	eq
 8008362:	600b      	streq	r3, [r1, #0]
 8008364:	6053      	strne	r3, [r2, #4]
 8008366:	4630      	mov	r0, r6
 8008368:	f000 f8ce 	bl	8008508 <__malloc_unlock>
 800836c:	f104 000b 	add.w	r0, r4, #11
 8008370:	1d23      	adds	r3, r4, #4
 8008372:	f020 0007 	bic.w	r0, r0, #7
 8008376:	1ac2      	subs	r2, r0, r3
 8008378:	d0cc      	beq.n	8008314 <_malloc_r+0x20>
 800837a:	1a1b      	subs	r3, r3, r0
 800837c:	50a3      	str	r3, [r4, r2]
 800837e:	e7c9      	b.n	8008314 <_malloc_r+0x20>
 8008380:	4622      	mov	r2, r4
 8008382:	6864      	ldr	r4, [r4, #4]
 8008384:	e7cc      	b.n	8008320 <_malloc_r+0x2c>
 8008386:	1cc4      	adds	r4, r0, #3
 8008388:	f024 0403 	bic.w	r4, r4, #3
 800838c:	42a0      	cmp	r0, r4
 800838e:	d0e3      	beq.n	8008358 <_malloc_r+0x64>
 8008390:	1a21      	subs	r1, r4, r0
 8008392:	4630      	mov	r0, r6
 8008394:	f000 f808 	bl	80083a8 <_sbrk_r>
 8008398:	3001      	adds	r0, #1
 800839a:	d1dd      	bne.n	8008358 <_malloc_r+0x64>
 800839c:	e7cf      	b.n	800833e <_malloc_r+0x4a>
 800839e:	bf00      	nop
 80083a0:	200002f4 	.word	0x200002f4
 80083a4:	200002f8 	.word	0x200002f8

080083a8 <_sbrk_r>:
 80083a8:	b538      	push	{r3, r4, r5, lr}
 80083aa:	4d06      	ldr	r5, [pc, #24]	; (80083c4 <_sbrk_r+0x1c>)
 80083ac:	2300      	movs	r3, #0
 80083ae:	4604      	mov	r4, r0
 80083b0:	4608      	mov	r0, r1
 80083b2:	602b      	str	r3, [r5, #0]
 80083b4:	f7fb f9d2 	bl	800375c <_sbrk>
 80083b8:	1c43      	adds	r3, r0, #1
 80083ba:	d102      	bne.n	80083c2 <_sbrk_r+0x1a>
 80083bc:	682b      	ldr	r3, [r5, #0]
 80083be:	b103      	cbz	r3, 80083c2 <_sbrk_r+0x1a>
 80083c0:	6023      	str	r3, [r4, #0]
 80083c2:	bd38      	pop	{r3, r4, r5, pc}
 80083c4:	20000d60 	.word	0x20000d60

080083c8 <__sread>:
 80083c8:	b510      	push	{r4, lr}
 80083ca:	460c      	mov	r4, r1
 80083cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80083d0:	f000 f8a0 	bl	8008514 <_read_r>
 80083d4:	2800      	cmp	r0, #0
 80083d6:	bfab      	itete	ge
 80083d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80083da:	89a3      	ldrhlt	r3, [r4, #12]
 80083dc:	181b      	addge	r3, r3, r0
 80083de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80083e2:	bfac      	ite	ge
 80083e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80083e6:	81a3      	strhlt	r3, [r4, #12]
 80083e8:	bd10      	pop	{r4, pc}

080083ea <__swrite>:
 80083ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80083ee:	461f      	mov	r7, r3
 80083f0:	898b      	ldrh	r3, [r1, #12]
 80083f2:	05db      	lsls	r3, r3, #23
 80083f4:	4605      	mov	r5, r0
 80083f6:	460c      	mov	r4, r1
 80083f8:	4616      	mov	r6, r2
 80083fa:	d505      	bpl.n	8008408 <__swrite+0x1e>
 80083fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008400:	2302      	movs	r3, #2
 8008402:	2200      	movs	r2, #0
 8008404:	f000 f868 	bl	80084d8 <_lseek_r>
 8008408:	89a3      	ldrh	r3, [r4, #12]
 800840a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800840e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008412:	81a3      	strh	r3, [r4, #12]
 8008414:	4632      	mov	r2, r6
 8008416:	463b      	mov	r3, r7
 8008418:	4628      	mov	r0, r5
 800841a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800841e:	f000 b817 	b.w	8008450 <_write_r>

08008422 <__sseek>:
 8008422:	b510      	push	{r4, lr}
 8008424:	460c      	mov	r4, r1
 8008426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800842a:	f000 f855 	bl	80084d8 <_lseek_r>
 800842e:	1c43      	adds	r3, r0, #1
 8008430:	89a3      	ldrh	r3, [r4, #12]
 8008432:	bf15      	itete	ne
 8008434:	6560      	strne	r0, [r4, #84]	; 0x54
 8008436:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800843a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800843e:	81a3      	strheq	r3, [r4, #12]
 8008440:	bf18      	it	ne
 8008442:	81a3      	strhne	r3, [r4, #12]
 8008444:	bd10      	pop	{r4, pc}

08008446 <__sclose>:
 8008446:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800844a:	f000 b813 	b.w	8008474 <_close_r>
	...

08008450 <_write_r>:
 8008450:	b538      	push	{r3, r4, r5, lr}
 8008452:	4d07      	ldr	r5, [pc, #28]	; (8008470 <_write_r+0x20>)
 8008454:	4604      	mov	r4, r0
 8008456:	4608      	mov	r0, r1
 8008458:	4611      	mov	r1, r2
 800845a:	2200      	movs	r2, #0
 800845c:	602a      	str	r2, [r5, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	f7f8 fe0c 	bl	800107c <_write>
 8008464:	1c43      	adds	r3, r0, #1
 8008466:	d102      	bne.n	800846e <_write_r+0x1e>
 8008468:	682b      	ldr	r3, [r5, #0]
 800846a:	b103      	cbz	r3, 800846e <_write_r+0x1e>
 800846c:	6023      	str	r3, [r4, #0]
 800846e:	bd38      	pop	{r3, r4, r5, pc}
 8008470:	20000d60 	.word	0x20000d60

08008474 <_close_r>:
 8008474:	b538      	push	{r3, r4, r5, lr}
 8008476:	4d06      	ldr	r5, [pc, #24]	; (8008490 <_close_r+0x1c>)
 8008478:	2300      	movs	r3, #0
 800847a:	4604      	mov	r4, r0
 800847c:	4608      	mov	r0, r1
 800847e:	602b      	str	r3, [r5, #0]
 8008480:	f7fb f937 	bl	80036f2 <_close>
 8008484:	1c43      	adds	r3, r0, #1
 8008486:	d102      	bne.n	800848e <_close_r+0x1a>
 8008488:	682b      	ldr	r3, [r5, #0]
 800848a:	b103      	cbz	r3, 800848e <_close_r+0x1a>
 800848c:	6023      	str	r3, [r4, #0]
 800848e:	bd38      	pop	{r3, r4, r5, pc}
 8008490:	20000d60 	.word	0x20000d60

08008494 <_fstat_r>:
 8008494:	b538      	push	{r3, r4, r5, lr}
 8008496:	4d07      	ldr	r5, [pc, #28]	; (80084b4 <_fstat_r+0x20>)
 8008498:	2300      	movs	r3, #0
 800849a:	4604      	mov	r4, r0
 800849c:	4608      	mov	r0, r1
 800849e:	4611      	mov	r1, r2
 80084a0:	602b      	str	r3, [r5, #0]
 80084a2:	f7fb f932 	bl	800370a <_fstat>
 80084a6:	1c43      	adds	r3, r0, #1
 80084a8:	d102      	bne.n	80084b0 <_fstat_r+0x1c>
 80084aa:	682b      	ldr	r3, [r5, #0]
 80084ac:	b103      	cbz	r3, 80084b0 <_fstat_r+0x1c>
 80084ae:	6023      	str	r3, [r4, #0]
 80084b0:	bd38      	pop	{r3, r4, r5, pc}
 80084b2:	bf00      	nop
 80084b4:	20000d60 	.word	0x20000d60

080084b8 <_isatty_r>:
 80084b8:	b538      	push	{r3, r4, r5, lr}
 80084ba:	4d06      	ldr	r5, [pc, #24]	; (80084d4 <_isatty_r+0x1c>)
 80084bc:	2300      	movs	r3, #0
 80084be:	4604      	mov	r4, r0
 80084c0:	4608      	mov	r0, r1
 80084c2:	602b      	str	r3, [r5, #0]
 80084c4:	f7fb f931 	bl	800372a <_isatty>
 80084c8:	1c43      	adds	r3, r0, #1
 80084ca:	d102      	bne.n	80084d2 <_isatty_r+0x1a>
 80084cc:	682b      	ldr	r3, [r5, #0]
 80084ce:	b103      	cbz	r3, 80084d2 <_isatty_r+0x1a>
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	bd38      	pop	{r3, r4, r5, pc}
 80084d4:	20000d60 	.word	0x20000d60

080084d8 <_lseek_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d07      	ldr	r5, [pc, #28]	; (80084f8 <_lseek_r+0x20>)
 80084dc:	4604      	mov	r4, r0
 80084de:	4608      	mov	r0, r1
 80084e0:	4611      	mov	r1, r2
 80084e2:	2200      	movs	r2, #0
 80084e4:	602a      	str	r2, [r5, #0]
 80084e6:	461a      	mov	r2, r3
 80084e8:	f7fb f92a 	bl	8003740 <_lseek>
 80084ec:	1c43      	adds	r3, r0, #1
 80084ee:	d102      	bne.n	80084f6 <_lseek_r+0x1e>
 80084f0:	682b      	ldr	r3, [r5, #0]
 80084f2:	b103      	cbz	r3, 80084f6 <_lseek_r+0x1e>
 80084f4:	6023      	str	r3, [r4, #0]
 80084f6:	bd38      	pop	{r3, r4, r5, pc}
 80084f8:	20000d60 	.word	0x20000d60

080084fc <__malloc_lock>:
 80084fc:	4801      	ldr	r0, [pc, #4]	; (8008504 <__malloc_lock+0x8>)
 80084fe:	f7ff be43 	b.w	8008188 <__retarget_lock_acquire_recursive>
 8008502:	bf00      	nop
 8008504:	20000d58 	.word	0x20000d58

08008508 <__malloc_unlock>:
 8008508:	4801      	ldr	r0, [pc, #4]	; (8008510 <__malloc_unlock+0x8>)
 800850a:	f7ff be3e 	b.w	800818a <__retarget_lock_release_recursive>
 800850e:	bf00      	nop
 8008510:	20000d58 	.word	0x20000d58

08008514 <_read_r>:
 8008514:	b538      	push	{r3, r4, r5, lr}
 8008516:	4d07      	ldr	r5, [pc, #28]	; (8008534 <_read_r+0x20>)
 8008518:	4604      	mov	r4, r0
 800851a:	4608      	mov	r0, r1
 800851c:	4611      	mov	r1, r2
 800851e:	2200      	movs	r2, #0
 8008520:	602a      	str	r2, [r5, #0]
 8008522:	461a      	mov	r2, r3
 8008524:	f7fb f8c8 	bl	80036b8 <_read>
 8008528:	1c43      	adds	r3, r0, #1
 800852a:	d102      	bne.n	8008532 <_read_r+0x1e>
 800852c:	682b      	ldr	r3, [r5, #0]
 800852e:	b103      	cbz	r3, 8008532 <_read_r+0x1e>
 8008530:	6023      	str	r3, [r4, #0]
 8008532:	bd38      	pop	{r3, r4, r5, pc}
 8008534:	20000d60 	.word	0x20000d60

08008538 <_init>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	bf00      	nop
 800853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853e:	bc08      	pop	{r3}
 8008540:	469e      	mov	lr, r3
 8008542:	4770      	bx	lr

08008544 <_fini>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr
